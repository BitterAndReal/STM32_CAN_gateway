
STM32CubeIDE NMEA2000 battery example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010874  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08010a5c  08010a5c  00020a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f4c  08010f4c  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08010f4c  08010f4c  00020f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f54  08010f54  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010f54  08010f54  00020f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f5c  08010f5c  00020f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08010f60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd4  20000190  080110ec  00030190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  080110ec  00031164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 12 .comment      00000050  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8e5  00000000  00000000  00030205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3c  00000000  00000000  0004baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0004e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0004f91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e100  00000000  00000000  00050cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000f5c4  00000000  00000000  0005edd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000064e4  00000000  00000000  0006e39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000190 	.word	0x20000190
 8000204:	00000000 	.word	0x00000000
 8000208:	08010a44 	.word	0x08010a44

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000194 	.word	0x20000194
 8000224:	08010a44 	.word	0x08010a44

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 b976 	b.w	8000e8c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9e08      	ldr	r6, [sp, #32]
 8000bbe:	460d      	mov	r5, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14d      	bne.n	8000c64 <__udivmoddi4+0xac>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4694      	mov	ip, r2
 8000bcc:	d968      	bls.n	8000ca0 <__udivmoddi4+0xe8>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b152      	cbz	r2, 8000bea <__udivmoddi4+0x32>
 8000bd4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bd8:	f1c2 0120 	rsb	r1, r2, #32
 8000bdc:	fa20 f101 	lsr.w	r1, r0, r1
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	ea41 0803 	orr.w	r8, r1, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	fb01 8817 	mls	r8, r1, r7, r8
 8000bfa:	fb07 f00e 	mul.w	r0, r7, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	4298      	cmp	r0, r3
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x66>
 8000c08:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000c10:	f080 811e 	bcs.w	8000e50 <__udivmoddi4+0x298>
 8000c14:	4298      	cmp	r0, r3
 8000c16:	f240 811b 	bls.w	8000e50 <__udivmoddi4+0x298>
 8000c1a:	3f02      	subs	r7, #2
 8000c1c:	4463      	add	r3, ip
 8000c1e:	1a1b      	subs	r3, r3, r0
 8000c20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c24:	fb01 3310 	mls	r3, r1, r0, r3
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8109 	bcs.w	8000e54 <__udivmoddi4+0x29c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8106 	bls.w	8000e54 <__udivmoddi4+0x29c>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	eba4 040e 	sub.w	r4, r4, lr
 8000c52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa8>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	40d4      	lsrs	r4, r2
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0xc2>
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	f000 80ee 	beq.w	8000e4a <__udivmoddi4+0x292>
 8000c6e:	2100      	movs	r1, #0
 8000c70:	e9c6 0500 	strd	r0, r5, [r6]
 8000c74:	4608      	mov	r0, r1
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x160>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd4>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fc 	bhi.w	8000e84 <__udivmoddi4+0x2cc>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e2      	beq.n	8000c60 <__udivmoddi4+0xa8>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7df      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xec>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 8091 	bne.w	8000dd0 <__udivmoddi4+0x218>
 8000cae:	eba1 000c 	sub.w	r0, r1, ip
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb8:	fa1f fe8c 	uxth.w	lr, ip
 8000cbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000cc4:	0c25      	lsrs	r5, r4, #16
 8000cc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cca:	fb0e f003 	mul.w	r0, lr, r3
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x12c>
 8000cd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x12a>
 8000cdc:	42a8      	cmp	r0, r5
 8000cde:	f200 80ce 	bhi.w	8000e7e <__udivmoddi4+0x2c6>
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	1a2d      	subs	r5, r5, r0
 8000ce6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cea:	fb07 5510 	mls	r5, r7, r0, r5
 8000cee:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x156>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x154>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80b6 	bhi.w	8000e78 <__udivmoddi4+0x2c0>
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d16:	e79e      	b.n	8000c56 <__udivmoddi4+0x9e>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fbba f8f9 	udiv	r8, sl, r9
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d3a:	408d      	lsls	r5, r1
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	431d      	orrs	r5, r3
 8000d42:	fa00 f301 	lsl.w	r3, r0, r1
 8000d46:	fb08 f00e 	mul.w	r0, r8, lr
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b8>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2bc>
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2bc>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1a24      	subs	r4, r4, r0
 8000d72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d76:	fb09 4410 	mls	r4, r9, r0, r4
 8000d7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7e:	b2ad      	uxth	r5, r5
 8000d80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1e2>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2b4>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2b4>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x2a4>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x2a0>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2d0>
 8000db4:	ebb3 0208 	subs.w	r2, r3, r8
 8000db8:	eb64 040e 	sbc.w	r4, r4, lr
 8000dbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000dc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc4:	431f      	orrs	r7, r3
 8000dc6:	40cc      	lsrs	r4, r1
 8000dc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	f1c2 0120 	rsb	r1, r2, #32
 8000dd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	4095      	lsls	r5, r2
 8000de6:	430d      	orrs	r5, r1
 8000de8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dec:	fb07 3311 	mls	r3, r7, r1, r3
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000dfe:	4283      	cmp	r3, r0
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x260>
 8000e06:	eb1c 0000 	adds.w	r0, ip, r0
 8000e0a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b8>
 8000e10:	4283      	cmp	r3, r0
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b8>
 8000e14:	3902      	subs	r1, #2
 8000e16:	4460      	add	r0, ip
 8000e18:	1ac0      	subs	r0, r0, r3
 8000e1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000e22:	b2ad      	uxth	r5, r5
 8000e24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e28:	fb03 f00e 	mul.w	r0, r3, lr
 8000e2c:	42a8      	cmp	r0, r5
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x28a>
 8000e30:	eb1c 0505 	adds.w	r5, ip, r5
 8000e34:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3a:	42a8      	cmp	r0, r5
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4465      	add	r5, ip
 8000e42:	1a28      	subs	r0, r5, r0
 8000e44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0x104>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e707      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000e50:	462f      	mov	r7, r5
 8000e52:	e6e4      	b.n	8000c1e <__udivmoddi4+0x66>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6f9      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e58:	454b      	cmp	r3, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f8>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f8>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x28a>
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1e2>
 8000e70:	4641      	mov	r1, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b8>
 8000e78:	4464      	add	r4, ip
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	e747      	b.n	8000d0e <__udivmoddi4+0x156>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4465      	add	r5, ip
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x12c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e706      	b.n	8000c96 <__udivmoddi4+0xde>
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa8>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <cpp_link>:
 8000e90:	b508      	push	{r3, lr}
 8000e92:	f000 fa71 	bl	8001378 <_Z16myCppProcessInitv>
 8000e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e9a:	f000 baa9 	b.w	80013f0 <_Z12myCppProcessv>
	...

08000ea0 <SystemClock_Config>:
 8000ea0:	b530      	push	{r4, r5, lr}
 8000ea2:	b09d      	sub	sp, #116	; 0x74
 8000ea4:	2234      	movs	r2, #52	; 0x34
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	a80f      	add	r0, sp, #60	; 0x3c
 8000eaa:	f00f fc85 	bl	80107b8 <memset>
 8000eae:	2214      	movs	r2, #20
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	a801      	add	r0, sp, #4
 8000eb4:	f00f fc80 	bl	80107b8 <memset>
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2100      	movs	r1, #0
 8000ebc:	a806      	add	r0, sp, #24
 8000ebe:	f00f fc7b 	bl	80107b8 <memset>
 8000ec2:	2502      	movs	r5, #2
 8000ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec8:	2401      	movs	r4, #1
 8000eca:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
 8000ece:	9310      	str	r3, [sp, #64]	; 0x40
 8000ed0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ed4:	a80e      	add	r0, sp, #56	; 0x38
 8000ed6:	940e      	str	r4, [sp, #56]	; 0x38
 8000ed8:	9413      	str	r4, [sp, #76]	; 0x4c
 8000eda:	9318      	str	r3, [sp, #96]	; 0x60
 8000edc:	f002 f890 	bl	8003000 <HAL_RCC_OscConfig>
 8000ee0:	b108      	cbz	r0, 8000ee6 <SystemClock_Config+0x46>
 8000ee2:	b672      	cpsid	i
 8000ee4:	e7fe      	b.n	8000ee4 <SystemClock_Config+0x44>
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8000eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef0:	9003      	str	r0, [sp, #12]
 8000ef2:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	a801      	add	r0, sp, #4
 8000efa:	f002 fae3 	bl	80034c4 <HAL_RCC_ClockConfig>
 8000efe:	b108      	cbz	r0, 8000f04 <SystemClock_Config+0x64>
 8000f00:	b672      	cpsid	i
 8000f02:	e7fe      	b.n	8000f02 <SystemClock_Config+0x62>
 8000f04:	2312      	movs	r3, #18
 8000f06:	9306      	str	r3, [sp, #24]
 8000f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0c:	900d      	str	r0, [sp, #52]	; 0x34
 8000f0e:	a806      	add	r0, sp, #24
 8000f10:	9308      	str	r3, [sp, #32]
 8000f12:	f002 fb89 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	b108      	cbz	r0, 8000f1c <SystemClock_Config+0x7c>
 8000f18:	b672      	cpsid	i
 8000f1a:	e7fe      	b.n	8000f1a <SystemClock_Config+0x7a>
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <SystemClock_Config+0x84>)
 8000f1e:	671c      	str	r4, [r3, #112]	; 0x70
 8000f20:	b01d      	add	sp, #116	; 0x74
 8000f22:	bd30      	pop	{r4, r5, pc}
 8000f24:	42420000 	.word	0x42420000

08000f28 <main>:
 8000f28:	2610      	movs	r6, #16
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	4c71      	ldr	r4, [pc, #452]	; (80010f4 <main+0x1cc>)
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	f000 fc92 	bl	8001858 <HAL_Init>
 8000f34:	f7ff ffb4 	bl	8000ea0 <SystemClock_Config>
 8000f38:	4632      	mov	r2, r6
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	a808      	add	r0, sp, #32
 8000f3e:	f00f fc3b 	bl	80107b8 <memset>
 8000f42:	69a3      	ldr	r3, [r4, #24]
 8000f44:	2500      	movs	r5, #0
 8000f46:	2701      	movs	r7, #1
 8000f48:	f04f 0907 	mov.w	r9, #7
 8000f4c:	f04f 0802 	mov.w	r8, #2
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	61a3      	str	r3, [r4, #24]
 8000f56:	69a3      	ldr	r3, [r4, #24]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	9b02      	ldr	r3, [sp, #8]
 8000f62:	69a3      	ldr	r3, [r4, #24]
 8000f64:	2107      	movs	r1, #7
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	61a3      	str	r3, [r4, #24]
 8000f6c:	69a3      	ldr	r3, [r4, #24]
 8000f6e:	4862      	ldr	r0, [pc, #392]	; (80010f8 <main+0x1d0>)
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	9303      	str	r3, [sp, #12]
 8000f76:	9b03      	ldr	r3, [sp, #12]
 8000f78:	69a3      	ldr	r3, [r4, #24]
 8000f7a:	4333      	orrs	r3, r6
 8000f7c:	61a3      	str	r3, [r4, #24]
 8000f7e:	69a3      	ldr	r3, [r4, #24]
 8000f80:	4033      	ands	r3, r6
 8000f82:	9304      	str	r3, [sp, #16]
 8000f84:	9b04      	ldr	r3, [sp, #16]
 8000f86:	69a3      	ldr	r3, [r4, #24]
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	61a3      	str	r3, [r4, #24]
 8000f8e:	69a3      	ldr	r3, [r4, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	9305      	str	r3, [sp, #20]
 8000f96:	9b05      	ldr	r3, [sp, #20]
 8000f98:	f001 fc22 	bl	80027e0 <HAL_GPIO_WritePin>
 8000f9c:	4856      	ldr	r0, [pc, #344]	; (80010f8 <main+0x1d0>)
 8000f9e:	a908      	add	r1, sp, #32
 8000fa0:	e9cd 580a 	strd	r5, r8, [sp, #40]	; 0x28
 8000fa4:	e9cd 9708 	strd	r9, r7, [sp, #32]
 8000fa8:	f001 fb40 	bl	800262c <HAL_GPIO_Init>
 8000fac:	6963      	ldr	r3, [r4, #20]
 8000fae:	462a      	mov	r2, r5
 8000fb0:	433b      	orrs	r3, r7
 8000fb2:	6163      	str	r3, [r4, #20]
 8000fb4:	6963      	ldr	r3, [r4, #20]
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	403b      	ands	r3, r7
 8000fba:	200b      	movs	r0, #11
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	9b01      	ldr	r3, [sp, #4]
 8000fc0:	f001 f964 	bl	800228c <HAL_NVIC_SetPriority>
 8000fc4:	200b      	movs	r0, #11
 8000fc6:	f001 f993 	bl	80022f0 <HAL_NVIC_EnableIRQ>
 8000fca:	4c4c      	ldr	r4, [pc, #304]	; (80010fc <main+0x1d4>)
 8000fcc:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <main+0x1d8>)
 8000fce:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8000fd2:	6023      	str	r3, [r4, #0]
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	950a      	str	r5, [sp, #40]	; 0x28
 8000fda:	60a3      	str	r3, [r4, #8]
 8000fdc:	7525      	strb	r5, [r4, #20]
 8000fde:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8000fe2:	6065      	str	r5, [r4, #4]
 8000fe4:	2503      	movs	r5, #3
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	7327      	strb	r7, [r4, #12]
 8000fea:	61e3      	str	r3, [r4, #28]
 8000fec:	6125      	str	r5, [r4, #16]
 8000fee:	f000 fd85 	bl	8001afc <HAL_ADC_Init>
 8000ff2:	b108      	cbz	r0, 8000ff8 <main+0xd0>
 8000ff4:	b672      	cpsid	i
 8000ff6:	e7fe      	b.n	8000ff6 <main+0xce>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	a908      	add	r1, sp, #32
 8000ffc:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001000:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8001004:	f000 fcd6 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8001008:	b108      	cbz	r0, 800100e <main+0xe6>
 800100a:	b672      	cpsid	i
 800100c:	e7fe      	b.n	800100c <main+0xe4>
 800100e:	4620      	mov	r0, r4
 8001010:	a908      	add	r1, sp, #32
 8001012:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001016:	f000 fccd 	bl	80019b4 <HAL_ADC_ConfigChannel>
 800101a:	b108      	cbz	r0, 8001020 <main+0xf8>
 800101c:	b672      	cpsid	i
 800101e:	e7fe      	b.n	800101e <main+0xf6>
 8001020:	2311      	movs	r3, #17
 8001022:	4620      	mov	r0, r4
 8001024:	a908      	add	r1, sp, #32
 8001026:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800102a:	f000 fcc3 	bl	80019b4 <HAL_ADC_ConfigChannel>
 800102e:	4605      	mov	r5, r0
 8001030:	b108      	cbz	r0, 8001036 <main+0x10e>
 8001032:	b672      	cpsid	i
 8001034:	e7fe      	b.n	8001034 <main+0x10c>
 8001036:	4632      	mov	r2, r6
 8001038:	4601      	mov	r1, r0
 800103a:	a808      	add	r0, sp, #32
 800103c:	f00f fbbc 	bl	80107b8 <memset>
 8001040:	2347      	movs	r3, #71	; 0x47
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	4c2f      	ldr	r4, [pc, #188]	; (8001104 <main+0x1dc>)
 8001048:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800104c:	e9c4 2300 	strd	r2, r3, [r4]
 8001050:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001054:	4620      	mov	r0, r4
 8001056:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800105a:	60a5      	str	r5, [r4, #8]
 800105c:	61a5      	str	r5, [r4, #24]
 800105e:	f002 fc89 	bl	8003974 <HAL_TIM_Base_Init>
 8001062:	b108      	cbz	r0, 8001068 <main+0x140>
 8001064:	b672      	cpsid	i
 8001066:	e7fe      	b.n	8001066 <main+0x13e>
 8001068:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800106c:	4620      	mov	r0, r4
 800106e:	a908      	add	r1, sp, #32
 8001070:	9708      	str	r7, [sp, #32]
 8001072:	f002 fcb5 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8001076:	b108      	cbz	r0, 800107c <main+0x154>
 8001078:	b672      	cpsid	i
 800107a:	e7fe      	b.n	800107a <main+0x152>
 800107c:	2320      	movs	r3, #32
 800107e:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001082:	4620      	mov	r0, r4
 8001084:	a906      	add	r1, sp, #24
 8001086:	e9cd 3806 	strd	r3, r8, [sp, #24]
 800108a:	f002 fd3d 	bl	8003b08 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4605      	mov	r5, r0
 8001090:	b108      	cbz	r0, 8001096 <main+0x16e>
 8001092:	b672      	cpsid	i
 8001094:	e7fe      	b.n	8001094 <main+0x16c>
 8001096:	f00f f835 	bl	8010104 <MX_USB_DEVICE_Init>
 800109a:	4632      	mov	r2, r6
 800109c:	4629      	mov	r1, r5
 800109e:	a808      	add	r0, sp, #32
 80010a0:	f00f fb8a 	bl	80107b8 <memset>
 80010a4:	4c18      	ldr	r4, [pc, #96]	; (8001108 <main+0x1e0>)
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <main+0x1e4>)
 80010a8:	4620      	mov	r0, r4
 80010aa:	e9c4 3500 	strd	r3, r5, [r4]
 80010ae:	f240 23cf 	movw	r3, #719	; 0x2cf
 80010b2:	e9cd 5506 	strd	r5, r5, [sp, #24]
 80010b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80010ba:	60a5      	str	r5, [r4, #8]
 80010bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80010c0:	f002 fc58 	bl	8003974 <HAL_TIM_Base_Init>
 80010c4:	b108      	cbz	r0, 80010ca <main+0x1a2>
 80010c6:	b672      	cpsid	i
 80010c8:	e7fe      	b.n	80010c8 <main+0x1a0>
 80010ca:	4620      	mov	r0, r4
 80010cc:	a908      	add	r1, sp, #32
 80010ce:	9708      	str	r7, [sp, #32]
 80010d0:	f002 fc86 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 80010d4:	b108      	cbz	r0, 80010da <main+0x1b2>
 80010d6:	b672      	cpsid	i
 80010d8:	e7fe      	b.n	80010d8 <main+0x1b0>
 80010da:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80010de:	a906      	add	r1, sp, #24
 80010e0:	4620      	mov	r0, r4
 80010e2:	f002 fd11 	bl	8003b08 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	b108      	cbz	r0, 80010ec <main+0x1c4>
 80010e8:	b672      	cpsid	i
 80010ea:	e7fe      	b.n	80010ea <main+0x1c2>
 80010ec:	f7ff fed0 	bl	8000e90 <cpp_link>
 80010f0:	e7fe      	b.n	80010f0 <main+0x1c8>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	200001ac 	.word	0x200001ac
 8001100:	40012400 	.word	0x40012400
 8001104:	20000270 	.word	0x20000270
 8001108:	200002b8 	.word	0x200002b8
 800110c:	40000c00 	.word	0x40000c00

08001110 <Error_Handler>:
 8001110:	b672      	cpsid	i
 8001112:	e7fe      	b.n	8001112 <Error_Handler+0x2>

08001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	68c3      	ldr	r3, [r0, #12]
 8001118:	4604      	mov	r4, r0
 800111a:	b933      	cbnz	r3, 800112a <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x16>
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001124:	e9c0 2300 	strd	r2, r3, [r0]
 8001128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800112a:	f006 fe0b 	bl	8007d44 <_Z11N2kMillis64v>
 800112e:	68a3      	ldr	r3, [r4, #8]
 8001130:	4a10      	ldr	r2, [pc, #64]	; (8001174 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x60>)
 8001132:	e9d2 5600 	ldrd	r5, r6, [r2]
 8001136:	195d      	adds	r5, r3, r5
 8001138:	f146 0600 	adc.w	r6, r6, #0
 800113c:	42a8      	cmp	r0, r5
 800113e:	eb71 0306 	sbcs.w	r3, r1, r6
 8001142:	d202      	bcs.n	800114a <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x36>
 8001144:	6025      	str	r5, [r4, #0]
 8001146:	6066      	str	r6, [r4, #4]
 8001148:	e7ee      	b.n	8001128 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14>
 800114a:	68e7      	ldr	r7, [r4, #12]
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	eb61 0106 	sbc.w	r1, r1, r6
 8001152:	2300      	movs	r3, #0
 8001154:	463a      	mov	r2, r7
 8001156:	f7ff fd17 	bl	8000b88 <__aeabi_uldivmod>
 800115a:	1c43      	adds	r3, r0, #1
 800115c:	fba3 3007 	umull	r3, r0, r3, r7
 8001160:	f141 0100 	adc.w	r1, r1, #0
 8001164:	fb07 0001 	mla	r0, r7, r1, r0
 8001168:	195b      	adds	r3, r3, r5
 800116a:	eb40 0606 	adc.w	r6, r0, r6
 800116e:	6023      	str	r3, [r4, #0]
 8001170:	e7e9      	b.n	8001146 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x32>
 8001172:	bf00      	nop
 8001174:	20000358 	.word	0x20000358

08001178 <_Z9OnN2kOpenv>:
 8001178:	b508      	push	{r3, lr}
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <_Z9OnN2kOpenv+0x18>)
 800117c:	f7ff ffca 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <_Z9OnN2kOpenv+0x1c>)
 8001182:	f7ff ffc7 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <_Z9OnN2kOpenv+0x20>)
 8001188:	f7ff ffc4 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 800118c:	bd08      	pop	{r3, pc}
 800118e:	bf00      	nop
 8001190:	20000318 	.word	0x20000318
 8001194:	20000328 	.word	0x20000328
 8001198:	20000300 	.word	0x20000300
 800119c:	00000000 	.word	0x00000000

080011a0 <_Z22SendN2kBatteryMessagesv>:
 80011a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a4:	2400      	movs	r4, #0
 80011a6:	b0ca      	sub	sp, #296	; 0x128
 80011a8:	4623      	mov	r3, r4
 80011aa:	2206      	movs	r2, #6
 80011ac:	210f      	movs	r1, #15
 80011ae:	9400      	str	r4, [sp, #0]
 80011b0:	a80b      	add	r0, sp, #44	; 0x2c
 80011b2:	f005 fcdd 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
 80011b6:	f006 fdc5 	bl	8007d44 <_Z11N2kMillis64v>
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <_Z22SendN2kBatteryMessagesv+0x188>)
 80011bc:	e9d3 5200 	ldrd	r5, r2, [r3]
 80011c0:	4285      	cmp	r5, r0
 80011c2:	418a      	sbcs	r2, r1
 80011c4:	d23b      	bcs.n	800123e <_Z22SendN2kBatteryMessagesv+0x9e>
 80011c6:	4618      	mov	r0, r3
 80011c8:	f8df a160 	ldr.w	sl, [pc, #352]	; 800132c <_Z22SendN2kBatteryMessagesv+0x18c>
 80011cc:	f7ff ffa2 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 80011d0:	4b57      	ldr	r3, [pc, #348]	; (8001330 <_Z22SendN2kBatteryMessagesv+0x190>)
 80011d2:	f89a 2000 	ldrb.w	r2, [sl]
 80011d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80011da:	4b56      	ldr	r3, [pc, #344]	; (8001334 <_Z22SendN2kBatteryMessagesv+0x194>)
 80011dc:	3201      	adds	r2, #1
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <_Z22SendN2kBatteryMessagesv+0x198>)
 80011e6:	2afc      	cmp	r2, #252	; 0xfc
 80011e8:	bf94      	ite	ls
 80011ea:	f88a 2000 	strbls.w	r2, [sl]
 80011ee:	f88a 4000 	strbhi.w	r4, [sl]
 80011f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011f6:	a346      	add	r3, pc, #280	; (adr r3, 8001310 <_Z22SendN2kBatteryMessagesv+0x170>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff fc48 	bl	8000a94 <__aeabi_dcmpeq>
 8001204:	b940      	cbnz	r0, 8001218 <_Z22SendN2kBatteryMessagesv+0x78>
 8001206:	a344      	add	r3, pc, #272	; (adr r3, 8001318 <_Z22SendN2kBatteryMessagesv+0x178>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f822 	bl	8000258 <__adddf3>
 8001214:	4604      	mov	r4, r0
 8001216:	460d      	mov	r5, r1
 8001218:	f89a 3000 	ldrb.w	r3, [sl]
 800121c:	4632      	mov	r2, r6
 800121e:	2100      	movs	r1, #0
 8001220:	9304      	str	r3, [sp, #16]
 8001222:	a80b      	add	r0, sp, #44	; 0x2c
 8001224:	463b      	mov	r3, r7
 8001226:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800122a:	e9cd 8900 	strd	r8, r9, [sp]
 800122e:	f005 fb53 	bl	80068d8 <_Z15SetN2kPGN127508R7tN2kMsghdddh>
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <_Z22SendN2kBatteryMessagesv+0x19c>)
 8001234:	2200      	movs	r2, #0
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	a90b      	add	r1, sp, #44	; 0x2c
 800123a:	f009 fb1f 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800123e:	f006 fd81 	bl	8007d44 <_Z11N2kMillis64v>
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <_Z22SendN2kBatteryMessagesv+0x1a0>)
 8001244:	e9d3 4200 	ldrd	r4, r2, [r3]
 8001248:	4284      	cmp	r4, r0
 800124a:	418a      	sbcs	r2, r1
 800124c:	d229      	bcs.n	80012a2 <_Z22SendN2kBatteryMessagesv+0x102>
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff60 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <_Z22SendN2kBatteryMessagesv+0x18c>)
 8001256:	781c      	ldrb	r4, [r3, #0]
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <_Z22SendN2kBatteryMessagesv+0x1a4>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001262:	a32f      	add	r3, pc, #188	; (adr r3, 8001320 <_Z22SendN2kBatteryMessagesv+0x180>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <_Z22SendN2kBatteryMessagesv+0x1a8>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <_Z22SendN2kBatteryMessagesv+0x1ac>)
 8001278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127c:	f7ff fc64 	bl	8000b48 <__aeabi_d2uiz>
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <_Z22SendN2kBatteryMessagesv+0x1b0>)
 8001282:	b2c0      	uxtb	r0, r0
 8001284:	9001      	str	r0, [sp, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4621      	mov	r1, r4
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	a80b      	add	r0, sp, #44	; 0x2c
 8001290:	461a      	mov	r2, r3
 8001292:	f005 fab1 	bl	80067f8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <_Z22SendN2kBatteryMessagesv+0x19c>)
 8001298:	2200      	movs	r2, #0
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	a90b      	add	r1, sp, #44	; 0x2c
 800129e:	f009 faed 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80012a2:	f006 fd4f 	bl	8007d44 <_Z11N2kMillis64v>
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <_Z22SendN2kBatteryMessagesv+0x1b4>)
 80012a8:	e9d3 4200 	ldrd	r4, r2, [r3]
 80012ac:	4284      	cmp	r4, r0
 80012ae:	418a      	sbcs	r2, r1
 80012b0:	d228      	bcs.n	8001304 <_Z22SendN2kBatteryMessagesv+0x164>
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff2e 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <_Z22SendN2kBatteryMessagesv+0x1b8>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	f993 3000 	ldrsb.w	r3, [r3]
 80012c0:	a80b      	add	r0, sp, #44	; 0x2c
 80012c2:	9308      	str	r3, [sp, #32]
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <_Z22SendN2kBatteryMessagesv+0x1bc>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <_Z22SendN2kBatteryMessagesv+0x1c0>)
 80012d0:	f993 3000 	ldrsb.w	r3, [r3]
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <_Z22SendN2kBatteryMessagesv+0x1c4>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <_Z22SendN2kBatteryMessagesv+0x1c8>)
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <_Z22SendN2kBatteryMessagesv+0x1cc>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <_Z22SendN2kBatteryMessagesv+0x1d0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <_Z22SendN2kBatteryMessagesv+0x1d4>)
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f005 fb4c 	bl	8006990 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <_Z22SendN2kBatteryMessagesv+0x19c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	a90b      	add	r1, sp, #44	; 0x2c
 8001300:	f009 fabc 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8001304:	b04a      	add	sp, #296	; 0x128
 8001306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w
 8001310:	00000000 	.word	0x00000000
 8001314:	c1cdcd65 	.word	0xc1cdcd65
 8001318:	66666666 	.word	0x66666666
 800131c:	40711266 	.word	0x40711266
 8001320:	00000000 	.word	0x00000000
 8001324:	406fe000 	.word	0x406fe000
 8001328:	20000318 	.word	0x20000318
 800132c:	20000348 	.word	0x20000348
 8001330:	20000028 	.word	0x20000028
 8001334:	20000010 	.word	0x20000010
 8001338:	20000018 	.word	0x20000018
 800133c:	20000338 	.word	0x20000338
 8001340:	20000328 	.word	0x20000328
 8001344:	20000020 	.word	0x20000020
 8001348:	20000040 	.word	0x20000040
 800134c:	20000038 	.word	0x20000038
 8001350:	20000030 	.word	0x20000030
 8001354:	20000300 	.word	0x20000300
 8001358:	2000000b 	.word	0x2000000b
 800135c:	20000340 	.word	0x20000340
 8001360:	2000000a 	.word	0x2000000a
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000310 	.word	0x20000310
 8001370:	20000009 	.word	0x20000009
 8001374:	2000000c 	.word	0x2000000c

08001378 <_Z16myCppProcessInitv>:
 8001378:	b530      	push	{r4, r5, lr}
 800137a:	4c16      	ldr	r4, [pc, #88]	; (80013d4 <_Z16myCppProcessInitv+0x5c>)
 800137c:	b085      	sub	sp, #20
 800137e:	6820      	ldr	r0, [r4, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	4915      	ldr	r1, [pc, #84]	; (80013d8 <_Z16myCppProcessInitv+0x60>)
 8001384:	f007 feca 	bl	800911c <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <_Z16myCppProcessInitv+0x64>)
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_Z16myCppProcessInitv+0x68>)
 800138e:	4915      	ldr	r1, [pc, #84]	; (80013e4 <_Z16myCppProcessInitv+0x6c>)
 8001390:	f007 ff94 	bl	80092bc <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
 8001394:	2500      	movs	r5, #0
 8001396:	2304      	movs	r3, #4
 8001398:	6820      	ldr	r0, [r4, #0]
 800139a:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800139e:	22aa      	movs	r2, #170	; 0xaa
 80013a0:	2323      	movs	r3, #35	; 0x23
 80013a2:	2101      	movs	r1, #1
 80013a4:	9500      	str	r5, [sp, #0]
 80013a6:	f008 fbae 	bl	8009b06 <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
 80013aa:	6820      	ldr	r0, [r4, #0]
 80013ac:	2250      	movs	r2, #80	; 0x50
 80013ae:	2101      	movs	r1, #1
 80013b0:	f008 fce4 	bl	8009d7c <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>
 80013b4:	462a      	mov	r2, r5
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	490b      	ldr	r1, [pc, #44]	; (80013e8 <_Z16myCppProcessInitv+0x70>)
 80013ba:	f008 fcbd 	bl	8009d38 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	490a      	ldr	r1, [pc, #40]	; (80013ec <_Z16myCppProcessInitv+0x74>)
 80013c2:	f00c ff85 	bl	800e2d0 <_ZN9tNMEA20009SetOnOpenEPFvvE>
 80013c6:	6820      	ldr	r0, [r4, #0]
 80013c8:	b005      	add	sp, #20
 80013ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013ce:	f008 bd47 	b.w	8009e60 <_ZN9tNMEA20004OpenEv>
 80013d2:	bf00      	nop
 80013d4:	20000338 	.word	0x20000338
 80013d8:	08010b40 	.word	0x08010b40
 80013dc:	08010bf5 	.word	0x08010bf5
 80013e0:	08010bf4 	.word	0x08010bf4
 80013e4:	08010bca 	.word	0x08010bca
 80013e8:	08010be0 	.word	0x08010be0
 80013ec:	08001179 	.word	0x08001179

080013f0 <_Z12myCppProcessv>:
 80013f0:	b508      	push	{r3, lr}
 80013f2:	4c03      	ldr	r4, [pc, #12]	; (8001400 <_Z12myCppProcessv+0x10>)
 80013f4:	f7ff fed4 	bl	80011a0 <_Z22SendN2kBatteryMessagesv>
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f00c fe8b 	bl	800e114 <_ZN9tNMEA200013ParseMessagesEv>
 80013fe:	e7f9      	b.n	80013f4 <_Z12myCppProcessv+0x4>
 8001400:	20000338 	.word	0x20000338

08001404 <_GLOBAL__sub_I_state_of_charge>:
 8001404:	b510      	push	{r4, lr}
 8001406:	20d0      	movs	r0, #208	; 0xd0
 8001408:	f00f f851 	bl	80104ae <_Znwj>
 800140c:	4604      	mov	r4, r0
 800140e:	4911      	ldr	r1, [pc, #68]	; (8001454 <_GLOBAL__sub_I_state_of_charge+0x50>)
 8001410:	f00d f9c8 	bl	800e7a4 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>
 8001414:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001418:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <_GLOBAL__sub_I_state_of_charge+0x54>)
 800141e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001422:	601c      	str	r4, [r3, #0]
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <_GLOBAL__sub_I_state_of_charge+0x58>)
 8001426:	f44f 74ff 	mov.w	r4, #510	; 0x1fe
 800142a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800142e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001432:	e9c3 0100 	strd	r0, r1, [r3]
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <_GLOBAL__sub_I_state_of_charge+0x5c>)
 8001438:	e9c3 4202 	strd	r4, r2, [r3, #8]
 800143c:	f240 2412 	movw	r4, #530	; 0x212
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	e9c3 0100 	strd	r0, r1, [r3]
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <_GLOBAL__sub_I_state_of_charge+0x60>)
 800144a:	e9c3 4202 	strd	r4, r2, [r3, #8]
 800144e:	e9c3 0100 	strd	r0, r1, [r3]
 8001452:	bd10      	pop	{r4, pc}
 8001454:	20000204 	.word	0x20000204
 8001458:	20000338 	.word	0x20000338
 800145c:	20000318 	.word	0x20000318
 8001460:	20000328 	.word	0x20000328
 8001464:	20000300 	.word	0x20000300

08001468 <HAL_MspInit>:
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_MspInit+0x3c>)
 800146a:	b082      	sub	sp, #8
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	619a      	str	r2, [r3, #24]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	f002 0201 	and.w	r2, r2, #1
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	9a00      	ldr	r2, [sp, #0]
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001484:	61da      	str	r2, [r3, #28]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_MspInit+0x40>)
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	6853      	ldr	r3, [r2, #4]
 8001494:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800149c:	6053      	str	r3, [r2, #4]
 800149e:	b002      	add	sp, #8
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_ADC_MspInit>:
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	4605      	mov	r5, r0
 80014b0:	b086      	sub	sp, #24
 80014b2:	2210      	movs	r2, #16
 80014b4:	2100      	movs	r1, #0
 80014b6:	a802      	add	r0, sp, #8
 80014b8:	f00f f97e 	bl	80107b8 <memset>
 80014bc:	682a      	ldr	r2, [r5, #0]
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_ADC_MspInit+0x98>)
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d13d      	bne.n	8001540 <HAL_ADC_MspInit+0x94>
 80014c4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	2620      	movs	r6, #32
 80014cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	699a      	ldr	r2, [r3, #24]
 80014d4:	481c      	ldr	r0, [pc, #112]	; (8001548 <HAL_ADC_MspInit+0x9c>)
 80014d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	9a00      	ldr	r2, [sp, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	a902      	add	r1, sp, #8
 80014e2:	f042 0210 	orr.w	r2, r2, #16
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4c18      	ldr	r4, [pc, #96]	; (800154c <HAL_ADC_MspInit+0xa0>)
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	2303      	movs	r3, #3
 80014f6:	e9cd 6302 	strd	r6, r3, [sp, #8]
 80014fa:	f001 f897 	bl	800262c <HAL_GPIO_Init>
 80014fe:	2300      	movs	r3, #0
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0xa4>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	e9c4 2300 	strd	r2, r3, [r4]
 8001508:	60a3      	str	r3, [r4, #8]
 800150a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150e:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	e9c4 3605 	strd	r3, r6, [r4, #20]
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	4620      	mov	r0, r4
 8001520:	61e3      	str	r3, [r4, #28]
 8001522:	f000 ff07 	bl	8002334 <HAL_DMA_Init>
 8001526:	b108      	cbz	r0, 800152c <HAL_ADC_MspInit+0x80>
 8001528:	f7ff fdf2 	bl	8001110 <Error_Handler>
 800152c:	2200      	movs	r2, #0
 800152e:	2012      	movs	r0, #18
 8001530:	622c      	str	r4, [r5, #32]
 8001532:	4611      	mov	r1, r2
 8001534:	6265      	str	r5, [r4, #36]	; 0x24
 8001536:	f000 fea9 	bl	800228c <HAL_NVIC_SetPriority>
 800153a:	2012      	movs	r0, #18
 800153c:	f000 fed8 	bl	80022f0 <HAL_NVIC_EnableIRQ>
 8001540:	b006      	add	sp, #24
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	40012400 	.word	0x40012400
 8001548:	40011000 	.word	0x40011000
 800154c:	2000022c 	.word	0x2000022c
 8001550:	40020008 	.word	0x40020008

08001554 <HAL_CAN_MspInit>:
 8001554:	b510      	push	{r4, lr}
 8001556:	4604      	mov	r4, r0
 8001558:	b08a      	sub	sp, #40	; 0x28
 800155a:	2210      	movs	r2, #16
 800155c:	2100      	movs	r1, #0
 800155e:	a806      	add	r0, sp, #24
 8001560:	f00f f92a 	bl	80107b8 <memset>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	4a47      	ldr	r2, [pc, #284]	; (8001684 <HAL_CAN_MspInit+0x130>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d145      	bne.n	80015f8 <HAL_CAN_MspInit+0xa4>
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <HAL_CAN_MspInit+0x134>)
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b45      	ldr	r3, [pc, #276]	; (800168c <HAL_CAN_MspInit+0x138>)
 8001578:	d108      	bne.n	800158c <HAL_CAN_MspInit+0x38>
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001580:	61da      	str	r2, [r3, #28]
 8001582:	69da      	ldr	r2, [r3, #28]
 8001584:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001588:	9201      	str	r2, [sp, #4]
 800158a:	9a01      	ldr	r2, [sp, #4]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	4840      	ldr	r0, [pc, #256]	; (8001690 <HAL_CAN_MspInit+0x13c>)
 8001590:	f042 0208 	orr.w	r2, r2, #8
 8001594:	619a      	str	r2, [r3, #24]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	a906      	add	r1, sp, #24
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	9b02      	ldr	r3, [sp, #8]
 80015a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a6:	9306      	str	r3, [sp, #24]
 80015a8:	f001 f840 	bl	800262c <HAL_GPIO_Init>
 80015ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b0:	2302      	movs	r3, #2
 80015b2:	e9cd 1306 	strd	r1, r3, [sp, #24]
 80015b6:	2303      	movs	r3, #3
 80015b8:	4835      	ldr	r0, [pc, #212]	; (8001690 <HAL_CAN_MspInit+0x13c>)
 80015ba:	a906      	add	r1, sp, #24
 80015bc:	9309      	str	r3, [sp, #36]	; 0x24
 80015be:	f001 f835 	bl	800262c <HAL_GPIO_Init>
 80015c2:	4a34      	ldr	r2, [pc, #208]	; (8001694 <HAL_CAN_MspInit+0x140>)
 80015c4:	2013      	movs	r0, #19
 80015c6:	6853      	ldr	r3, [r2, #4]
 80015c8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80015cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6053      	str	r3, [r2, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	4611      	mov	r1, r2
 80015da:	f000 fe57 	bl	800228c <HAL_NVIC_SetPriority>
 80015de:	2013      	movs	r0, #19
 80015e0:	f000 fe86 	bl	80022f0 <HAL_NVIC_EnableIRQ>
 80015e4:	2200      	movs	r2, #0
 80015e6:	2014      	movs	r0, #20
 80015e8:	4611      	mov	r1, r2
 80015ea:	f000 fe4f 	bl	800228c <HAL_NVIC_SetPriority>
 80015ee:	2014      	movs	r0, #20
 80015f0:	f000 fe7e 	bl	80022f0 <HAL_NVIC_EnableIRQ>
 80015f4:	b00a      	add	sp, #40	; 0x28
 80015f6:	bd10      	pop	{r4, pc}
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_CAN_MspInit+0x144>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d1fa      	bne.n	80015f4 <HAL_CAN_MspInit+0xa0>
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_CAN_MspInit+0x138>)
 8001600:	4921      	ldr	r1, [pc, #132]	; (8001688 <HAL_CAN_MspInit+0x134>)
 8001602:	69da      	ldr	r2, [r3, #28]
 8001604:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001608:	61da      	str	r2, [r3, #28]
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001610:	9203      	str	r2, [sp, #12]
 8001612:	9a03      	ldr	r2, [sp, #12]
 8001614:	680a      	ldr	r2, [r1, #0]
 8001616:	3201      	adds	r2, #1
 8001618:	2a01      	cmp	r2, #1
 800161a:	600a      	str	r2, [r1, #0]
 800161c:	d108      	bne.n	8001630 <HAL_CAN_MspInit+0xdc>
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001624:	61da      	str	r2, [r3, #28]
 8001626:	69da      	ldr	r2, [r3, #28]
 8001628:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800162c:	9204      	str	r2, [sp, #16]
 800162e:	9a04      	ldr	r2, [sp, #16]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	4817      	ldr	r0, [pc, #92]	; (8001690 <HAL_CAN_MspInit+0x13c>)
 8001634:	f042 0208 	orr.w	r2, r2, #8
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	a906      	add	r1, sp, #24
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	9305      	str	r3, [sp, #20]
 8001644:	9b05      	ldr	r3, [sp, #20]
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	9306      	str	r3, [sp, #24]
 800164c:	f000 ffee 	bl	800262c <HAL_GPIO_Init>
 8001650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001654:	2302      	movs	r3, #2
 8001656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800165a:	2303      	movs	r3, #3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <HAL_CAN_MspInit+0x13c>)
 800165e:	a906      	add	r1, sp, #24
 8001660:	9309      	str	r3, [sp, #36]	; 0x24
 8001662:	f000 ffe3 	bl	800262c <HAL_GPIO_Init>
 8001666:	2200      	movs	r2, #0
 8001668:	203f      	movs	r0, #63	; 0x3f
 800166a:	4611      	mov	r1, r2
 800166c:	f000 fe0e 	bl	800228c <HAL_NVIC_SetPriority>
 8001670:	203f      	movs	r0, #63	; 0x3f
 8001672:	f000 fe3d 	bl	80022f0 <HAL_NVIC_EnableIRQ>
 8001676:	2200      	movs	r2, #0
 8001678:	2041      	movs	r0, #65	; 0x41
 800167a:	4611      	mov	r1, r2
 800167c:	f000 fe06 	bl	800228c <HAL_NVIC_SetPriority>
 8001680:	2041      	movs	r0, #65	; 0x41
 8001682:	e7b5      	b.n	80015f0 <HAL_CAN_MspInit+0x9c>
 8001684:	40006400 	.word	0x40006400
 8001688:	2000034c 	.word	0x2000034c
 800168c:	40021000 	.word	0x40021000
 8001690:	40010c00 	.word	0x40010c00
 8001694:	40010000 	.word	0x40010000
 8001698:	40006800 	.word	0x40006800

0800169c <HAL_TIM_Base_MspInit>:
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	b507      	push	{r0, r1, r2, lr}
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d115      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x36>
 80016a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	201c      	movs	r0, #28
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	61da      	str	r2, [r3, #28]
 80016b4:	2200      	movs	r2, #0
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	4611      	mov	r1, r2
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	9b00      	ldr	r3, [sp, #0]
 80016c2:	f000 fde3 	bl	800228c <HAL_NVIC_SetPriority>
 80016c6:	201c      	movs	r0, #28
 80016c8:	b003      	add	sp, #12
 80016ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80016ce:	f000 be0f 	b.w	80022f0 <HAL_NVIC_EnableIRQ>
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_TIM_Base_MspInit+0x58>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d109      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x50>
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_TIM_Base_MspInit+0x5c>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	f042 0208 	orr.w	r2, r2, #8
 80016e0:	61da      	str	r2, [r3, #28]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	9b01      	ldr	r3, [sp, #4]
 80016ec:	b003      	add	sp, #12
 80016ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80016f2:	bf00      	nop
 80016f4:	40000c00 	.word	0x40000c00
 80016f8:	40021000 	.word	0x40021000

080016fc <NMI_Handler>:
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler>

080016fe <HardFault_Handler>:
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler>

08001700 <MemManage_Handler>:
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler>

08001702 <BusFault_Handler>:
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler>

08001704 <UsageFault_Handler>:
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler>

08001706 <SVC_Handler>:
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:
 800170c:	f000 b8b6 	b.w	800187c <HAL_IncTick>

08001710 <DMA1_Channel1_IRQHandler>:
 8001710:	4801      	ldr	r0, [pc, #4]	; (8001718 <DMA1_Channel1_IRQHandler+0x8>)
 8001712:	f000 be4d 	b.w	80023b0 <HAL_DMA_IRQHandler>
 8001716:	bf00      	nop
 8001718:	2000022c 	.word	0x2000022c

0800171c <ADC1_2_IRQHandler>:
 800171c:	4801      	ldr	r0, [pc, #4]	; (8001724 <ADC1_2_IRQHandler+0x8>)
 800171e:	f000 b8d3 	b.w	80018c8 <HAL_ADC_IRQHandler>
 8001722:	bf00      	nop
 8001724:	200001ac 	.word	0x200001ac

08001728 <CAN1_TX_IRQHandler>:
 8001728:	4801      	ldr	r0, [pc, #4]	; (8001730 <CAN1_TX_IRQHandler+0x8>)
 800172a:	f000 bc9f 	b.w	800206c <HAL_CAN_IRQHandler>
 800172e:	bf00      	nop
 8001730:	200001dc 	.word	0x200001dc

08001734 <CAN1_RX0_IRQHandler>:
 8001734:	f7ff bff8 	b.w	8001728 <CAN1_TX_IRQHandler>

08001738 <TIM2_IRQHandler>:
 8001738:	4801      	ldr	r0, [pc, #4]	; (8001740 <TIM2_IRQHandler+0x8>)
 800173a:	f002 b838 	b.w	80037ae <HAL_TIM_IRQHandler>
 800173e:	bf00      	nop
 8001740:	20000270 	.word	0x20000270

08001744 <CAN2_TX_IRQHandler>:
 8001744:	4801      	ldr	r0, [pc, #4]	; (800174c <CAN2_TX_IRQHandler+0x8>)
 8001746:	f000 bc91 	b.w	800206c <HAL_CAN_IRQHandler>
 800174a:	bf00      	nop
 800174c:	20000204 	.word	0x20000204

08001750 <CAN2_RX1_IRQHandler>:
 8001750:	f7ff bff8 	b.w	8001744 <CAN2_TX_IRQHandler>

08001754 <OTG_FS_IRQHandler>:
 8001754:	4801      	ldr	r0, [pc, #4]	; (800175c <OTG_FS_IRQHandler+0x8>)
 8001756:	f001 b8fb 	b.w	8002950 <HAL_PCD_IRQHandler>
 800175a:	bf00      	nop
 800175c:	20000930 	.word	0x20000930

08001760 <_getpid>:
 8001760:	2001      	movs	r0, #1
 8001762:	4770      	bx	lr

08001764 <_kill>:
 8001764:	b508      	push	{r3, lr}
 8001766:	f00e ffdf 	bl	8010728 <__errno>
 800176a:	2316      	movs	r3, #22
 800176c:	6003      	str	r3, [r0, #0]
 800176e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001772:	bd08      	pop	{r3, pc}

08001774 <_exit>:
 8001774:	b508      	push	{r3, lr}
 8001776:	f00e ffd7 	bl	8010728 <__errno>
 800177a:	2316      	movs	r3, #22
 800177c:	6003      	str	r3, [r0, #0]
 800177e:	e7fe      	b.n	800177e <_exit+0xa>

08001780 <_sbrk>:
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <_sbrk+0x30>)
 8001782:	4603      	mov	r3, r0
 8001784:	6811      	ldr	r1, [r2, #0]
 8001786:	b510      	push	{r4, lr}
 8001788:	b909      	cbnz	r1, 800178e <_sbrk+0xe>
 800178a:	490a      	ldr	r1, [pc, #40]	; (80017b4 <_sbrk+0x34>)
 800178c:	6011      	str	r1, [r2, #0]
 800178e:	6810      	ldr	r0, [r2, #0]
 8001790:	4909      	ldr	r1, [pc, #36]	; (80017b8 <_sbrk+0x38>)
 8001792:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <_sbrk+0x3c>)
 8001794:	4403      	add	r3, r0
 8001796:	1b09      	subs	r1, r1, r4
 8001798:	428b      	cmp	r3, r1
 800179a:	d906      	bls.n	80017aa <_sbrk+0x2a>
 800179c:	f00e ffc4 	bl	8010728 <__errno>
 80017a0:	230c      	movs	r3, #12
 80017a2:	6003      	str	r3, [r0, #0]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a8:	bd10      	pop	{r4, pc}
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e7fc      	b.n	80017a8 <_sbrk+0x28>
 80017ae:	bf00      	nop
 80017b0:	20000350 	.word	0x20000350
 80017b4:	20001168 	.word	0x20001168
 80017b8:	20010000 	.word	0x20010000
 80017bc:	00000400 	.word	0x00000400

080017c0 <SystemInit>:
 80017c0:	4770      	bx	lr
	...

080017c4 <Reset_Handler>:
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <LoopFillZerobss+0x12>)
 80017c6:	490d      	ldr	r1, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <LoopFillZerobss+0x1a>)
 80017ca:	2300      	movs	r3, #0
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:
 80017ce:	58d4      	ldr	r4, [r2, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:
 80017d4:	18c4      	adds	r4, r0, r3
 80017d6:	428c      	cmp	r4, r1
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopFillZerobss+0x1e>)
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <LoopFillZerobss+0x22>)
 80017de:	2300      	movs	r3, #0
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:
 80017e6:	42a2      	cmp	r2, r4
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>
 80017ea:	f7ff ffe9 	bl	80017c0 <SystemInit>
 80017ee:	f00e ffa1 	bl	8010734 <__libc_init_array>
 80017f2:	f7ff fb99 	bl	8000f28 <main>
 80017f6:	4770      	bx	lr
 80017f8:	20000000 	.word	0x20000000
 80017fc:	2000018c 	.word	0x2000018c
 8001800:	08010f60 	.word	0x08010f60
 8001804:	20000190 	.word	0x20000190
 8001808:	20001164 	.word	0x20001164

0800180c <CAN1_RX1_IRQHandler>:
 800180c:	e7fe      	b.n	800180c <CAN1_RX1_IRQHandler>
	...

08001810 <HAL_InitTick>:
 8001810:	b538      	push	{r3, r4, r5, lr}
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_InitTick+0x3c>)
 8001814:	4605      	mov	r5, r0
 8001816:	7818      	ldrb	r0, [r3, #0]
 8001818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_InitTick+0x40>)
 8001822:	6810      	ldr	r0, [r2, #0]
 8001824:	fbb0 f0f3 	udiv	r0, r0, r3
 8001828:	f000 fd70 	bl	800230c <HAL_SYSTICK_Config>
 800182c:	4604      	mov	r4, r0
 800182e:	b958      	cbnz	r0, 8001848 <HAL_InitTick+0x38>
 8001830:	2d0f      	cmp	r5, #15
 8001832:	d809      	bhi.n	8001848 <HAL_InitTick+0x38>
 8001834:	4602      	mov	r2, r0
 8001836:	4629      	mov	r1, r5
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	f000 fd26 	bl	800228c <HAL_NVIC_SetPriority>
 8001840:	4620      	mov	r0, r4
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_InitTick+0x44>)
 8001844:	601d      	str	r5, [r3, #0]
 8001846:	bd38      	pop	{r3, r4, r5, pc}
 8001848:	2001      	movs	r0, #1
 800184a:	e7fc      	b.n	8001846 <HAL_InitTick+0x36>
 800184c:	2000004c 	.word	0x2000004c
 8001850:	20000048 	.word	0x20000048
 8001854:	20000050 	.word	0x20000050

08001858 <HAL_Init>:
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_Init+0x20>)
 800185a:	b508      	push	{r3, lr}
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	2003      	movs	r0, #3
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	f000 fcff 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>
 800186a:	200f      	movs	r0, #15
 800186c:	f7ff ffd0 	bl	8001810 <HAL_InitTick>
 8001870:	f7ff fdfa 	bl	8001468 <HAL_MspInit>
 8001874:	2000      	movs	r0, #0
 8001876:	bd08      	pop	{r3, pc}
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_IncTick>:
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_IncTick+0x10>)
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <HAL_IncTick+0x14>)
 8001880:	6811      	ldr	r1, [r2, #0]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	440b      	add	r3, r1
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000354 	.word	0x20000354
 8001890:	2000004c 	.word	0x2000004c

08001894 <HAL_GetTick>:
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <HAL_GetTick+0x8>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000354 	.word	0x20000354

080018a0 <HAL_Delay>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	f7ff fff6 	bl	8001894 <HAL_GetTick>
 80018a8:	4605      	mov	r5, r0
 80018aa:	1c63      	adds	r3, r4, #1
 80018ac:	bf1e      	ittt	ne
 80018ae:	4b04      	ldrne	r3, [pc, #16]	; (80018c0 <HAL_Delay+0x20>)
 80018b0:	781b      	ldrbne	r3, [r3, #0]
 80018b2:	18e4      	addne	r4, r4, r3
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	1b43      	subs	r3, r0, r5
 80018ba:	42a3      	cmp	r3, r4
 80018bc:	d3fa      	bcc.n	80018b4 <HAL_Delay+0x14>
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	2000004c 	.word	0x2000004c

080018c4 <HAL_ADC_ConvCpltCallback>:
 80018c4:	4770      	bx	lr

080018c6 <HAL_ADC_LevelOutOfWindowCallback>:
 80018c6:	4770      	bx	lr

080018c8 <HAL_ADC_IRQHandler>:
 80018c8:	6803      	ldr	r3, [r0, #0]
 80018ca:	b510      	push	{r4, lr}
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4604      	mov	r4, r0
 80018d0:	0690      	lsls	r0, r2, #26
 80018d2:	d527      	bpl.n	8001924 <HAL_ADC_IRQHandler+0x5c>
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	0791      	lsls	r1, r2, #30
 80018d8:	d524      	bpl.n	8001924 <HAL_ADC_IRQHandler+0x5c>
 80018da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018dc:	06d2      	lsls	r2, r2, #27
 80018de:	bf5e      	ittt	pl
 80018e0:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80018e2:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80018e6:	62a2      	strpl	r2, [r4, #40]	; 0x28
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80018ee:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80018f2:	d110      	bne.n	8001916 <HAL_ADC_IRQHandler+0x4e>
 80018f4:	7b22      	ldrb	r2, [r4, #12]
 80018f6:	b972      	cbnz	r2, 8001916 <HAL_ADC_IRQHandler+0x4e>
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	f022 0220 	bic.w	r2, r2, #32
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001906:	62a3      	str	r3, [r4, #40]	; 0x28
 8001908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800190a:	04db      	lsls	r3, r3, #19
 800190c:	bf5e      	ittt	pl
 800190e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001910:	f043 0301 	orrpl.w	r3, r3, #1
 8001914:	62a3      	strpl	r3, [r4, #40]	; 0x28
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff ffd4 	bl	80018c4 <HAL_ADC_ConvCpltCallback>
 800191c:	f06f 0212 	mvn.w	r2, #18
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	0610      	lsls	r0, r2, #24
 800192a:	d530      	bpl.n	800198e <HAL_ADC_IRQHandler+0xc6>
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	0751      	lsls	r1, r2, #29
 8001930:	d52d      	bpl.n	800198e <HAL_ADC_IRQHandler+0xc6>
 8001932:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001934:	06d2      	lsls	r2, r2, #27
 8001936:	bf5e      	ittt	pl
 8001938:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800193a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800193e:	62a2      	strpl	r2, [r4, #40]	; 0x28
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001946:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800194a:	d00a      	beq.n	8001962 <HAL_ADC_IRQHandler+0x9a>
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	0550      	lsls	r0, r2, #21
 8001950:	d416      	bmi.n	8001980 <HAL_ADC_IRQHandler+0xb8>
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001958:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800195c:	d110      	bne.n	8001980 <HAL_ADC_IRQHandler+0xb8>
 800195e:	7b22      	ldrb	r2, [r4, #12]
 8001960:	b972      	cbnz	r2, 8001980 <HAL_ADC_IRQHandler+0xb8>
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800196c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001970:	62a3      	str	r3, [r4, #40]	; 0x28
 8001972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001974:	05d9      	lsls	r1, r3, #23
 8001976:	bf5e      	ittt	pl
 8001978:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800197a:	f043 0301 	orrpl.w	r3, r3, #1
 800197e:	62a3      	strpl	r3, [r4, #40]	; 0x28
 8001980:	4620      	mov	r0, r4
 8001982:	f000 f939 	bl	8001bf8 <HAL_ADCEx_InjectedConvCpltCallback>
 8001986:	f06f 020c 	mvn.w	r2, #12
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	0652      	lsls	r2, r2, #25
 8001994:	d50d      	bpl.n	80019b2 <HAL_ADC_IRQHandler+0xea>
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	07db      	lsls	r3, r3, #31
 800199a:	d50a      	bpl.n	80019b2 <HAL_ADC_IRQHandler+0xea>
 800199c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800199e:	4620      	mov	r0, r4
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80019a6:	f7ff ff8e 	bl	80018c6 <HAL_ADC_LevelOutOfWindowCallback>
 80019aa:	f06f 0201 	mvn.w	r2, #1
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	bd10      	pop	{r4, pc}

080019b4 <HAL_ADC_ConfigChannel>:
 80019b4:	2300      	movs	r3, #0
 80019b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80019be:	4604      	mov	r4, r0
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d06c      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0xea>
 80019c4:	2301      	movs	r3, #1
 80019c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80019ca:	684d      	ldr	r5, [r1, #4]
 80019cc:	6802      	ldr	r2, [r0, #0]
 80019ce:	2d06      	cmp	r5, #6
 80019d0:	6808      	ldr	r0, [r1, #0]
 80019d2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80019d6:	d822      	bhi.n	8001a1e <HAL_ADC_ConfigChannel+0x6a>
 80019d8:	261f      	movs	r6, #31
 80019da:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80019dc:	3b05      	subs	r3, #5
 80019de:	409e      	lsls	r6, r3
 80019e0:	ea25 0506 	bic.w	r5, r5, r6
 80019e4:	fa00 f303 	lsl.w	r3, r0, r3
 80019e8:	432b      	orrs	r3, r5
 80019ea:	6353      	str	r3, [r2, #52]	; 0x34
 80019ec:	2809      	cmp	r0, #9
 80019ee:	688b      	ldr	r3, [r1, #8]
 80019f0:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80019f4:	f04f 0107 	mov.w	r1, #7
 80019f8:	d929      	bls.n	8001a4e <HAL_ADC_ConfigChannel+0x9a>
 80019fa:	68d6      	ldr	r6, [r2, #12]
 80019fc:	3d1e      	subs	r5, #30
 80019fe:	40a9      	lsls	r1, r5
 8001a00:	ea26 0101 	bic.w	r1, r6, r1
 8001a04:	40ab      	lsls	r3, r5
 8001a06:	430b      	orrs	r3, r1
 8001a08:	60d3      	str	r3, [r2, #12]
 8001a0a:	f1a0 0310 	sub.w	r3, r0, #16
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d925      	bls.n	8001a5e <HAL_ADC_ConfigChannel+0xaa>
 8001a12:	2000      	movs	r0, #0
 8001a14:	2300      	movs	r3, #0
 8001a16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}
 8001a1e:	2d0c      	cmp	r5, #12
 8001a20:	f04f 051f 	mov.w	r5, #31
 8001a24:	d809      	bhi.n	8001a3a <HAL_ADC_ConfigChannel+0x86>
 8001a26:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001a28:	3b23      	subs	r3, #35	; 0x23
 8001a2a:	409d      	lsls	r5, r3
 8001a2c:	ea26 0505 	bic.w	r5, r6, r5
 8001a30:	fa00 f303 	lsl.w	r3, r0, r3
 8001a34:	432b      	orrs	r3, r5
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	e7d8      	b.n	80019ec <HAL_ADC_ConfigChannel+0x38>
 8001a3a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001a3c:	3b41      	subs	r3, #65	; 0x41
 8001a3e:	409d      	lsls	r5, r3
 8001a40:	ea26 0505 	bic.w	r5, r6, r5
 8001a44:	fa00 f303 	lsl.w	r3, r0, r3
 8001a48:	432b      	orrs	r3, r5
 8001a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a4c:	e7ce      	b.n	80019ec <HAL_ADC_ConfigChannel+0x38>
 8001a4e:	6910      	ldr	r0, [r2, #16]
 8001a50:	40a9      	lsls	r1, r5
 8001a52:	ea20 0101 	bic.w	r1, r0, r1
 8001a56:	40ab      	lsls	r3, r5
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6113      	str	r3, [r2, #16]
 8001a5c:	e7d9      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x5e>
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_ADC_ConfigChannel+0xf0>)
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d116      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0xde>
 8001a64:	6893      	ldr	r3, [r2, #8]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	d4d3      	bmi.n	8001a12 <HAL_ADC_ConfigChannel+0x5e>
 8001a6a:	6893      	ldr	r3, [r2, #8]
 8001a6c:	2810      	cmp	r0, #16
 8001a6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a72:	6093      	str	r3, [r2, #8]
 8001a74:	d1cd      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x5e>
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_ADC_ConfigChannel+0xf4>)
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_ADC_ConfigChannel+0xf8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a80:	220a      	movs	r2, #10
 8001a82:	4353      	muls	r3, r2
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	9b01      	ldr	r3, [sp, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0c2      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x5e>
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	e7f8      	b.n	8001a84 <HAL_ADC_ConfigChannel+0xd0>
 8001a92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a94:	2001      	movs	r0, #1
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a9c:	e7ba      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x60>
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	e7bb      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x66>
 8001aa2:	bf00      	nop
 8001aa4:	40012400 	.word	0x40012400
 8001aa8:	20000048 	.word	0x20000048
 8001aac:	000f4240 	.word	0x000f4240

08001ab0 <ADC_ConversionStop_Disable>:
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	6803      	ldr	r3, [r0, #0]
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	07d1      	lsls	r1, r2, #31
 8001aba:	d401      	bmi.n	8001ac0 <ADC_ConversionStop_Disable+0x10>
 8001abc:	2000      	movs	r0, #0
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	f7ff fee4 	bl	8001894 <HAL_GetTick>
 8001acc:	4605      	mov	r5, r0
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	07db      	lsls	r3, r3, #31
 8001ad4:	d5f2      	bpl.n	8001abc <ADC_ConversionStop_Disable+0xc>
 8001ad6:	f7ff fedd 	bl	8001894 <HAL_GetTick>
 8001ada:	1b40      	subs	r0, r0, r5
 8001adc:	2802      	cmp	r0, #2
 8001ade:	d9f6      	bls.n	8001ace <ADC_ConversionStop_Disable+0x1e>
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	07da      	lsls	r2, r3, #31
 8001ae6:	d5f2      	bpl.n	8001ace <ADC_ConversionStop_Disable+0x1e>
 8001ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001aea:	2001      	movs	r0, #1
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001afa:	e7e0      	b.n	8001abe <ADC_ConversionStop_Disable+0xe>

08001afc <HAL_ADC_Init>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	4604      	mov	r4, r0
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d06e      	beq.n	8001be2 <HAL_ADC_Init+0xe6>
 8001b04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b06:	b923      	cbnz	r3, 8001b12 <HAL_ADC_Init+0x16>
 8001b08:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001b0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8001b0e:	f7ff fccd 	bl	80014ac <HAL_ADC_MspInit>
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff ffcc 	bl	8001ab0 <ADC_ConversionStop_Disable>
 8001b18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b1a:	f013 0310 	ands.w	r3, r3, #16
 8001b1e:	d162      	bne.n	8001be6 <HAL_ADC_Init+0xea>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d160      	bne.n	8001be6 <HAL_ADC_Init+0xea>
 8001b24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b26:	69e5      	ldr	r5, [r4, #28]
 8001b28:	6861      	ldr	r1, [r4, #4]
 8001b2a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001b2e:	f022 0202 	bic.w	r2, r2, #2
 8001b32:	f042 0202 	orr.w	r2, r2, #2
 8001b36:	4329      	orrs	r1, r5
 8001b38:	68a5      	ldr	r5, [r4, #8]
 8001b3a:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b3c:	7b22      	ldrb	r2, [r4, #12]
 8001b3e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001b42:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8001b46:	d037      	beq.n	8001bb8 <HAL_ADC_Init+0xbc>
 8001b48:	2d01      	cmp	r5, #1
 8001b4a:	bf14      	ite	ne
 8001b4c:	2700      	movne	r7, #0
 8001b4e:	f44f 7780 	moveq.w	r7, #256	; 0x100
 8001b52:	7d26      	ldrb	r6, [r4, #20]
 8001b54:	2e01      	cmp	r6, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_ADC_Init+0x6a>
 8001b58:	bb82      	cbnz	r2, 8001bbc <HAL_ADC_Init+0xc0>
 8001b5a:	69a2      	ldr	r2, [r4, #24]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001b62:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001b6c:	6856      	ldr	r6, [r2, #4]
 8001b6e:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001b72:	ea46 0607 	orr.w	r6, r6, r7
 8001b76:	6056      	str	r6, [r2, #4]
 8001b78:	6897      	ldr	r7, [r2, #8]
 8001b7a:	4e1d      	ldr	r6, [pc, #116]	; (8001bf0 <HAL_ADC_Init+0xf4>)
 8001b7c:	ea06 0607 	and.w	r6, r6, r7
 8001b80:	ea46 0601 	orr.w	r6, r6, r1
 8001b84:	6096      	str	r6, [r2, #8]
 8001b86:	d001      	beq.n	8001b8c <HAL_ADC_Init+0x90>
 8001b88:	2d01      	cmp	r5, #1
 8001b8a:	d102      	bne.n	8001b92 <HAL_ADC_Init+0x96>
 8001b8c:	6923      	ldr	r3, [r4, #16]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	051b      	lsls	r3, r3, #20
 8001b92:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001b94:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001b98:	432b      	orrs	r3, r5
 8001b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b9c:	6892      	ldr	r2, [r2, #8]
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_ADC_Init+0xf8>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	4299      	cmp	r1, r3
 8001ba4:	d113      	bne.n	8001bce <HAL_ADC_Init+0xd2>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bac:	f023 0303 	bic.w	r3, r3, #3
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb8:	462f      	mov	r7, r5
 8001bba:	e7ca      	b.n	8001b52 <HAL_ADC_Init+0x56>
 8001bbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	62a2      	str	r2, [r4, #40]	; 0x28
 8001bc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001bcc:	e7cb      	b.n	8001b66 <HAL_ADC_Init+0x6a>
 8001bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bd0:	f023 0312 	bic.w	r3, r3, #18
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001be2:	2001      	movs	r0, #1
 8001be4:	e7e7      	b.n	8001bb6 <HAL_ADC_Init+0xba>
 8001be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bee:	e7f8      	b.n	8001be2 <HAL_ADC_Init+0xe6>
 8001bf0:	ffe1f7fd 	.word	0xffe1f7fd
 8001bf4:	ff1f0efe 	.word	0xff1f0efe

08001bf8 <HAL_ADCEx_InjectedConvCpltCallback>:
 8001bf8:	4770      	bx	lr

08001bfa <HAL_CAN_Init>:
 8001bfa:	b538      	push	{r3, r4, r5, lr}
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d06e      	beq.n	8001ce0 <HAL_CAN_Init+0xe6>
 8001c02:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001c06:	b90b      	cbnz	r3, 8001c0c <HAL_CAN_Init+0x12>
 8001c08:	f7ff fca4 	bl	8001554 <HAL_CAN_MspInit>
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	f7ff fe3d 	bl	8001894 <HAL_GetTick>
 8001c1a:	4605      	mov	r5, r0
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	07d1      	lsls	r1, r2, #31
 8001c22:	d551      	bpl.n	8001cc8 <HAL_CAN_Init+0xce>
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f022 0202 	bic.w	r2, r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f7ff fe32 	bl	8001894 <HAL_GetTick>
 8001c30:	4605      	mov	r5, r0
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	0792      	lsls	r2, r2, #30
 8001c38:	d454      	bmi.n	8001ce4 <HAL_CAN_Init+0xea>
 8001c3a:	7e22      	ldrb	r2, [r4, #24]
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	2a01      	cmp	r2, #1
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	bf0c      	ite	eq
 8001c44:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
 8001c48:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	7e62      	ldrb	r2, [r4, #25]
 8001c50:	2a01      	cmp	r2, #1
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	bf0c      	ite	eq
 8001c56:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
 8001c5a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	7ea2      	ldrb	r2, [r4, #26]
 8001c62:	2a01      	cmp	r2, #1
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	bf0c      	ite	eq
 8001c68:	f042 0220 	orreq.w	r2, r2, #32
 8001c6c:	f022 0220 	bicne.w	r2, r2, #32
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	7ee2      	ldrb	r2, [r4, #27]
 8001c74:	2a01      	cmp	r2, #1
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	bf0c      	ite	eq
 8001c7a:	f022 0210 	biceq.w	r2, r2, #16
 8001c7e:	f042 0210 	orrne.w	r2, r2, #16
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	7f22      	ldrb	r2, [r4, #28]
 8001c86:	2a01      	cmp	r2, #1
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	bf0c      	ite	eq
 8001c8c:	f042 0208 	orreq.w	r2, r2, #8
 8001c90:	f022 0208 	bicne.w	r2, r2, #8
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	7f62      	ldrb	r2, [r4, #29]
 8001c98:	2a01      	cmp	r2, #1
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	bf0c      	ite	eq
 8001c9e:	f042 0204 	orreq.w	r2, r2, #4
 8001ca2:	f022 0204 	bicne.w	r2, r2, #4
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	6921      	ldr	r1, [r4, #16]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	6961      	ldr	r1, [r4, #20]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	6861      	ldr	r1, [r4, #4]
 8001cb8:	3901      	subs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	61da      	str	r2, [r3, #28]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	6260      	str	r0, [r4, #36]	; 0x24
 8001cc2:	f884 3020 	strb.w	r3, [r4, #32]
 8001cc6:	bd38      	pop	{r3, r4, r5, pc}
 8001cc8:	f7ff fde4 	bl	8001894 <HAL_GetTick>
 8001ccc:	1b40      	subs	r0, r0, r5
 8001cce:	280a      	cmp	r0, #10
 8001cd0:	d9a4      	bls.n	8001c1c <HAL_CAN_Init+0x22>
 8001cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8001cda:	2305      	movs	r3, #5
 8001cdc:	f884 3020 	strb.w	r3, [r4, #32]
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	e7f0      	b.n	8001cc6 <HAL_CAN_Init+0xcc>
 8001ce4:	f7ff fdd6 	bl	8001894 <HAL_GetTick>
 8001ce8:	1b40      	subs	r0, r0, r5
 8001cea:	280a      	cmp	r0, #10
 8001cec:	d9a1      	bls.n	8001c32 <HAL_CAN_Init+0x38>
 8001cee:	e7f0      	b.n	8001cd2 <HAL_CAN_Init+0xd8>

08001cf0 <HAL_CAN_ConfigFilter>:
 8001cf0:	b530      	push	{r4, r5, lr}
 8001cf2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d878      	bhi.n	8001dee <HAL_CAN_ConfigFilter+0xfe>
 8001cfc:	2401      	movs	r4, #1
 8001cfe:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_CAN_ConfigFilter+0x10c>)
 8001d00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001d0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d10:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001d14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001d18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d1c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001d1e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001d22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001d26:	694a      	ldr	r2, [r1, #20]
 8001d28:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8001d2c:	f002 001f 	and.w	r0, r2, #31
 8001d30:	fa04 f000 	lsl.w	r0, r4, r0
 8001d34:	ea25 0500 	bic.w	r5, r5, r0
 8001d38:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
 8001d3c:	69cd      	ldr	r5, [r1, #28]
 8001d3e:	43c4      	mvns	r4, r0
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	d135      	bne.n	8001db0 <HAL_CAN_ConfigFilter+0xc0>
 8001d44:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001d48:	4025      	ands	r5, r4
 8001d4a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 8001d4e:	68cb      	ldr	r3, [r1, #12]
 8001d50:	888d      	ldrh	r5, [r1, #4]
 8001d52:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001d56:	00d3      	lsls	r3, r2, #3
 8001d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d5c:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8001d60:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
 8001d64:	880a      	ldrh	r2, [r1, #0]
 8001d66:	688d      	ldr	r5, [r1, #8]
 8001d68:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001d6c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8001d70:	698a      	ldr	r2, [r1, #24]
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_CAN_ConfigFilter+0x10c>)
 8001d74:	bb8a      	cbnz	r2, 8001dda <HAL_CAN_ConfigFilter+0xea>
 8001d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d7a:	4022      	ands	r2, r4
 8001d7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d80:	690a      	ldr	r2, [r1, #16]
 8001d82:	bb72      	cbnz	r2, 8001de2 <HAL_CAN_ConfigFilter+0xf2>
 8001d84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d88:	4014      	ands	r4, r2
 8001d8a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
 8001d8e:	6a0b      	ldr	r3, [r1, #32]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_CAN_ConfigFilter+0x10c>)
 8001d94:	bf02      	ittt	eq
 8001d96:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8001d9a:	4310      	orreq	r0, r2
 8001d9c:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
 8001da0:	2000      	movs	r0, #0
 8001da2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001dae:	bd30      	pop	{r4, r5, pc}
 8001db0:	2d01      	cmp	r5, #1
 8001db2:	d1dd      	bne.n	8001d70 <HAL_CAN_ConfigFilter+0x80>
 8001db4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001db8:	4305      	orrs	r5, r0
 8001dba:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 8001dbe:	680b      	ldr	r3, [r1, #0]
 8001dc0:	888d      	ldrh	r5, [r1, #4]
 8001dc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001dc6:	00d3      	lsls	r3, r2, #3
 8001dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dcc:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8001dd0:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
 8001dd4:	898a      	ldrh	r2, [r1, #12]
 8001dd6:	688d      	ldr	r5, [r1, #8]
 8001dd8:	e7c6      	b.n	8001d68 <HAL_CAN_ConfigFilter+0x78>
 8001dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dde:	4302      	orrs	r2, r0
 8001de0:	e7cc      	b.n	8001d7c <HAL_CAN_ConfigFilter+0x8c>
 8001de2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001de6:	4302      	orrs	r2, r0
 8001de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001dec:	e7cf      	b.n	8001d8e <HAL_CAN_ConfigFilter+0x9e>
 8001dee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6243      	str	r3, [r0, #36]	; 0x24
 8001df6:	2001      	movs	r0, #1
 8001df8:	e7d9      	b.n	8001dae <HAL_CAN_ConfigFilter+0xbe>
 8001dfa:	bf00      	nop
 8001dfc:	40006400 	.word	0x40006400

08001e00 <HAL_CAN_Start>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001e06:	4604      	mov	r4, r0
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	b2dd      	uxtb	r5, r3
 8001e0c:	d120      	bne.n	8001e50 <HAL_CAN_Start+0x50>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	f880 3020 	strb.w	r3, [r0, #32]
 8001e16:	6813      	ldr	r3, [r2, #0]
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	f7ff fd39 	bl	8001894 <HAL_GetTick>
 8001e22:	4606      	mov	r6, r0
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f013 0301 	ands.w	r3, r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_CAN_Start+0x34>
 8001e2e:	461d      	mov	r5, r3
 8001e30:	6263      	str	r3, [r4, #36]	; 0x24
 8001e32:	e00b      	b.n	8001e4c <HAL_CAN_Start+0x4c>
 8001e34:	f7ff fd2e 	bl	8001894 <HAL_GetTick>
 8001e38:	1b80      	subs	r0, r0, r6
 8001e3a:	280a      	cmp	r0, #10
 8001e3c:	d9f2      	bls.n	8001e24 <HAL_CAN_Start+0x24>
 8001e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	6263      	str	r3, [r4, #36]	; 0x24
 8001e46:	2305      	movs	r3, #5
 8001e48:	f884 3020 	strb.w	r3, [r4, #32]
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e52:	2501      	movs	r5, #1
 8001e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e58:	6243      	str	r3, [r0, #36]	; 0x24
 8001e5a:	e7f7      	b.n	8001e4c <HAL_CAN_Start+0x4c>

08001e5c <HAL_CAN_AddTxMessage>:
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	f890 5020 	ldrb.w	r5, [r0, #32]
 8001e62:	6806      	ldr	r6, [r0, #0]
 8001e64:	3d01      	subs	r5, #1
 8001e66:	2d01      	cmp	r5, #1
 8001e68:	68b4      	ldr	r4, [r6, #8]
 8001e6a:	d841      	bhi.n	8001ef0 <HAL_CAN_AddTxMessage+0x94>
 8001e6c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001e70:	d03a      	beq.n	8001ee8 <HAL_CAN_AddTxMessage+0x8c>
 8001e72:	f3c4 6401 	ubfx	r4, r4, #24, #2
 8001e76:	2c03      	cmp	r4, #3
 8001e78:	f04f 0501 	mov.w	r5, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_CAN_AddTxMessage+0x2e>
 8001e7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e84:	6243      	str	r3, [r0, #36]	; 0x24
 8001e86:	2001      	movs	r0, #1
 8001e88:	e028      	b.n	8001edc <HAL_CAN_AddTxMessage+0x80>
 8001e8a:	40a5      	lsls	r5, r4
 8001e8c:	601d      	str	r5, [r3, #0]
 8001e8e:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8001e92:	f104 0318 	add.w	r3, r4, #24
 8001e96:	bb10      	cbnz	r0, 8001ede <HAL_CAN_AddTxMessage+0x82>
 8001e98:	6808      	ldr	r0, [r1, #0]
 8001e9a:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	50f0      	str	r0, [r6, r3]
 8001ea2:	0120      	lsls	r0, r4, #4
 8001ea4:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8001ea8:	4406      	add	r6, r0
 8001eaa:	2000      	movs	r0, #0
 8001eac:	690d      	ldr	r5, [r1, #16]
 8001eae:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
 8001eb2:	7d09      	ldrb	r1, [r1, #20]
 8001eb4:	2901      	cmp	r1, #1
 8001eb6:	bf02      	ittt	eq
 8001eb8:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8001ebc:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001ec0:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
 8001ec4:	6851      	ldr	r1, [r2, #4]
 8001ec6:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
 8001ed0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ede:	684d      	ldr	r5, [r1, #4]
 8001ee0:	4338      	orrs	r0, r7
 8001ee2:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001ee6:	e7da      	b.n	8001e9e <HAL_CAN_AddTxMessage+0x42>
 8001ee8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eee:	e7c9      	b.n	8001e84 <HAL_CAN_AddTxMessage+0x28>
 8001ef0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef6:	e7c5      	b.n	8001e84 <HAL_CAN_AddTxMessage+0x28>

08001ef8 <HAL_CAN_GetTxMailboxesFreeLevel>:
 8001ef8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d80c      	bhi.n	8001f1c <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	6898      	ldr	r0, [r3, #8]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	f3c0 6080 	ubfx	r0, r0, #26, #1
 8001f10:	bf48      	it	mi
 8001f12:	3001      	addmi	r0, #1
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	d502      	bpl.n	8001f1e <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
 8001f18:	3001      	adds	r0, #1
 8001f1a:	4770      	bx	lr
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_GetRxMessage>:
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001f26:	3c01      	subs	r4, #1
 8001f28:	2c01      	cmp	r4, #1
 8001f2a:	d86c      	bhi.n	8002006 <HAL_CAN_GetRxMessage+0xe6>
 8001f2c:	6806      	ldr	r6, [r0, #0]
 8001f2e:	b941      	cbnz	r1, 8001f42 <HAL_CAN_GetRxMessage+0x22>
 8001f30:	68f4      	ldr	r4, [r6, #12]
 8001f32:	07a4      	lsls	r4, r4, #30
 8001f34:	d107      	bne.n	8001f46 <HAL_CAN_GetRxMessage+0x26>
 8001f36:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f3c:	6243      	str	r3, [r0, #36]	; 0x24
 8001f3e:	2001      	movs	r0, #1
 8001f40:	e056      	b.n	8001ff0 <HAL_CAN_GetRxMessage+0xd0>
 8001f42:	6934      	ldr	r4, [r6, #16]
 8001f44:	e7f5      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x12>
 8001f46:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8001f4a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001f4e:	010c      	lsls	r4, r1, #4
 8001f50:	f007 0704 	and.w	r7, r7, #4
 8001f54:	6097      	str	r7, [r2, #8]
 8001f56:	2f00      	cmp	r7, #0
 8001f58:	d14b      	bne.n	8001ff2 <HAL_CAN_GetRxMessage+0xd2>
 8001f5a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001f5e:	0d7f      	lsrs	r7, r7, #21
 8001f60:	6017      	str	r7, [r2, #0]
 8001f62:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001f66:	4426      	add	r6, r4
 8001f68:	f007 0702 	and.w	r7, r7, #2
 8001f6c:	60d7      	str	r7, [r2, #12]
 8001f6e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8001f72:	f007 070f 	and.w	r7, r7, #15
 8001f76:	6117      	str	r7, [r2, #16]
 8001f78:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8001f7c:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
 8001f80:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8001f84:	0c2d      	lsrs	r5, r5, #16
 8001f86:	6197      	str	r7, [r2, #24]
 8001f88:	6155      	str	r5, [r2, #20]
 8001f8a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	6802      	ldr	r2, [r0, #0]
 8001f92:	4422      	add	r2, r4
 8001f94:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001f98:	0a12      	lsrs	r2, r2, #8
 8001f9a:	705a      	strb	r2, [r3, #1]
 8001f9c:	6802      	ldr	r2, [r0, #0]
 8001f9e:	4422      	add	r2, r4
 8001fa0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001fa4:	0c12      	lsrs	r2, r2, #16
 8001fa6:	709a      	strb	r2, [r3, #2]
 8001fa8:	6802      	ldr	r2, [r0, #0]
 8001faa:	4422      	add	r2, r4
 8001fac:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001fb0:	0e12      	lsrs	r2, r2, #24
 8001fb2:	70da      	strb	r2, [r3, #3]
 8001fb4:	6802      	ldr	r2, [r0, #0]
 8001fb6:	4422      	add	r2, r4
 8001fb8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001fbc:	711a      	strb	r2, [r3, #4]
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	4422      	add	r2, r4
 8001fc2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001fc6:	0a12      	lsrs	r2, r2, #8
 8001fc8:	715a      	strb	r2, [r3, #5]
 8001fca:	6802      	ldr	r2, [r0, #0]
 8001fcc:	4422      	add	r2, r4
 8001fce:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001fd2:	0c12      	lsrs	r2, r2, #16
 8001fd4:	719a      	strb	r2, [r3, #6]
 8001fd6:	6802      	ldr	r2, [r0, #0]
 8001fd8:	4422      	add	r2, r4
 8001fda:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001fde:	0e12      	lsrs	r2, r2, #24
 8001fe0:	71da      	strb	r2, [r3, #7]
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	b951      	cbnz	r1, 8001ffc <HAL_CAN_GetRxMessage+0xdc>
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	f042 0220 	orr.w	r2, r2, #32
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	2000      	movs	r0, #0
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001ff6:	08ff      	lsrs	r7, r7, #3
 8001ff8:	6057      	str	r7, [r2, #4]
 8001ffa:	e7b2      	b.n	8001f62 <HAL_CAN_GetRxMessage+0x42>
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	611a      	str	r2, [r3, #16]
 8002004:	e7f3      	b.n	8001fee <HAL_CAN_GetRxMessage+0xce>
 8002006:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	e796      	b.n	8001f3c <HAL_CAN_GetRxMessage+0x1c>

0800200e <HAL_CAN_ActivateNotification>:
 800200e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002012:	3b01      	subs	r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d805      	bhi.n	8002024 <HAL_CAN_ActivateNotification+0x16>
 8002018:	6802      	ldr	r2, [r0, #0]
 800201a:	2000      	movs	r0, #0
 800201c:	6953      	ldr	r3, [r2, #20]
 800201e:	4319      	orrs	r1, r3
 8002020:	6151      	str	r1, [r2, #20]
 8002022:	4770      	bx	lr
 8002024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202a:	6243      	str	r3, [r0, #36]	; 0x24
 800202c:	2001      	movs	r0, #1
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_DeactivateNotification>:
 8002030:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002034:	3b01      	subs	r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d806      	bhi.n	8002048 <HAL_CAN_DeactivateNotification+0x18>
 800203a:	6802      	ldr	r2, [r0, #0]
 800203c:	2000      	movs	r0, #0
 800203e:	6953      	ldr	r3, [r2, #20]
 8002040:	ea23 0101 	bic.w	r1, r3, r1
 8002044:	6151      	str	r1, [r2, #20]
 8002046:	4770      	bx	lr
 8002048:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800204a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204e:	6243      	str	r3, [r0, #36]	; 0x24
 8002050:	2001      	movs	r0, #1
 8002052:	4770      	bx	lr

08002054 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002054:	4770      	bx	lr

08002056 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_TxMailbox0AbortCallback>:
 800205a:	4770      	bx	lr

0800205c <HAL_CAN_TxMailbox1AbortCallback>:
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_TxMailbox2AbortCallback>:
 800205e:	4770      	bx	lr

08002060 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002060:	4770      	bx	lr

08002062 <HAL_CAN_RxFifo0FullCallback>:
 8002062:	4770      	bx	lr

08002064 <HAL_CAN_RxFifo1FullCallback>:
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_SleepCallback>:
 8002066:	4770      	bx	lr

08002068 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002068:	4770      	bx	lr

0800206a <HAL_CAN_ErrorCallback>:
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_IRQHandler>:
 800206c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002070:	6803      	ldr	r3, [r0, #0]
 8002072:	4605      	mov	r5, r0
 8002074:	695e      	ldr	r6, [r3, #20]
 8002076:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800207a:	f016 0401 	ands.w	r4, r6, #1
 800207e:	689f      	ldr	r7, [r3, #8]
 8002080:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8002084:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8002088:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800208c:	d022      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x68>
 800208e:	f017 0401 	ands.w	r4, r7, #1
 8002092:	d007      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x38>
 8002094:	2201      	movs	r2, #1
 8002096:	07b9      	lsls	r1, r7, #30
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	f140 80a5 	bpl.w	80021e8 <HAL_CAN_IRQHandler+0x17c>
 800209e:	f7ff ffd9 	bl	8002054 <HAL_CAN_TxMailbox0CompleteCallback>
 80020a2:	2400      	movs	r4, #0
 80020a4:	05fb      	lsls	r3, r7, #23
 80020a6:	d509      	bpl.n	80020bc <HAL_CAN_IRQHandler+0x50>
 80020a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	05b8      	lsls	r0, r7, #22
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	f140 80a7 	bpl.w	8002204 <HAL_CAN_IRQHandler+0x198>
 80020b6:	4628      	mov	r0, r5
 80020b8:	f7ff ffcd 	bl	8002056 <HAL_CAN_TxMailbox1CompleteCallback>
 80020bc:	03fb      	lsls	r3, r7, #15
 80020be:	d509      	bpl.n	80020d4 <HAL_CAN_IRQHandler+0x68>
 80020c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	03b8      	lsls	r0, r7, #14
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	f140 80a9 	bpl.w	8002220 <HAL_CAN_IRQHandler+0x1b4>
 80020ce:	4628      	mov	r0, r5
 80020d0:	f7ff ffc2 	bl	8002058 <HAL_CAN_TxMailbox2CompleteCallback>
 80020d4:	0733      	lsls	r3, r6, #28
 80020d6:	d507      	bpl.n	80020e8 <HAL_CAN_IRQHandler+0x7c>
 80020d8:	f01b 0f10 	tst.w	fp, #16
 80020dc:	bf1f      	itttt	ne
 80020de:	2210      	movne	r2, #16
 80020e0:	682b      	ldrne	r3, [r5, #0]
 80020e2:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
 80020e6:	60da      	strne	r2, [r3, #12]
 80020e8:	0777      	lsls	r7, r6, #29
 80020ea:	d508      	bpl.n	80020fe <HAL_CAN_IRQHandler+0x92>
 80020ec:	f01b 0f08 	tst.w	fp, #8
 80020f0:	d005      	beq.n	80020fe <HAL_CAN_IRQHandler+0x92>
 80020f2:	2208      	movs	r2, #8
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	4628      	mov	r0, r5
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	f7ff ffb2 	bl	8002062 <HAL_CAN_RxFifo0FullCallback>
 80020fe:	07b0      	lsls	r0, r6, #30
 8002100:	d506      	bpl.n	8002110 <HAL_CAN_IRQHandler+0xa4>
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0799      	lsls	r1, r3, #30
 8002108:	d002      	beq.n	8002110 <HAL_CAN_IRQHandler+0xa4>
 800210a:	4628      	mov	r0, r5
 800210c:	f7ff ffa8 	bl	8002060 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002110:	0672      	lsls	r2, r6, #25
 8002112:	d507      	bpl.n	8002124 <HAL_CAN_IRQHandler+0xb8>
 8002114:	f01a 0f10 	tst.w	sl, #16
 8002118:	bf1f      	itttt	ne
 800211a:	2210      	movne	r2, #16
 800211c:	682b      	ldrne	r3, [r5, #0]
 800211e:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
 8002122:	611a      	strne	r2, [r3, #16]
 8002124:	06b3      	lsls	r3, r6, #26
 8002126:	d508      	bpl.n	800213a <HAL_CAN_IRQHandler+0xce>
 8002128:	f01a 0f08 	tst.w	sl, #8
 800212c:	d005      	beq.n	800213a <HAL_CAN_IRQHandler+0xce>
 800212e:	2208      	movs	r2, #8
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	4628      	mov	r0, r5
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	f7ff ff95 	bl	8002064 <HAL_CAN_RxFifo1FullCallback>
 800213a:	06f7      	lsls	r7, r6, #27
 800213c:	d506      	bpl.n	800214c <HAL_CAN_IRQHandler+0xe0>
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	0798      	lsls	r0, r3, #30
 8002144:	d002      	beq.n	800214c <HAL_CAN_IRQHandler+0xe0>
 8002146:	4628      	mov	r0, r5
 8002148:	f00c ff02 	bl	800ef50 <HAL_CAN_RxFifo1MsgPendingCallback>
 800214c:	03b1      	lsls	r1, r6, #14
 800214e:	d508      	bpl.n	8002162 <HAL_CAN_IRQHandler+0xf6>
 8002150:	f019 0f10 	tst.w	r9, #16
 8002154:	d005      	beq.n	8002162 <HAL_CAN_IRQHandler+0xf6>
 8002156:	2210      	movs	r2, #16
 8002158:	682b      	ldr	r3, [r5, #0]
 800215a:	4628      	mov	r0, r5
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	f7ff ff82 	bl	8002066 <HAL_CAN_SleepCallback>
 8002162:	03f2      	lsls	r2, r6, #15
 8002164:	d508      	bpl.n	8002178 <HAL_CAN_IRQHandler+0x10c>
 8002166:	f019 0f08 	tst.w	r9, #8
 800216a:	d005      	beq.n	8002178 <HAL_CAN_IRQHandler+0x10c>
 800216c:	2208      	movs	r2, #8
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	4628      	mov	r0, r5
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	f7ff ff78 	bl	8002068 <HAL_CAN_WakeUpFromRxMsgCallback>
 8002178:	0433      	lsls	r3, r6, #16
 800217a:	d52c      	bpl.n	80021d6 <HAL_CAN_IRQHandler+0x16a>
 800217c:	f019 0f04 	tst.w	r9, #4
 8002180:	682a      	ldr	r2, [r5, #0]
 8002182:	d026      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x166>
 8002184:	05f7      	lsls	r7, r6, #23
 8002186:	d504      	bpl.n	8002192 <HAL_CAN_IRQHandler+0x126>
 8002188:	f018 0f01 	tst.w	r8, #1
 800218c:	bf18      	it	ne
 800218e:	f044 0401 	orrne.w	r4, r4, #1
 8002192:	05b0      	lsls	r0, r6, #22
 8002194:	d504      	bpl.n	80021a0 <HAL_CAN_IRQHandler+0x134>
 8002196:	f018 0f02 	tst.w	r8, #2
 800219a:	bf18      	it	ne
 800219c:	f044 0402 	orrne.w	r4, r4, #2
 80021a0:	0571      	lsls	r1, r6, #21
 80021a2:	d504      	bpl.n	80021ae <HAL_CAN_IRQHandler+0x142>
 80021a4:	f018 0f04 	tst.w	r8, #4
 80021a8:	bf18      	it	ne
 80021aa:	f044 0404 	orrne.w	r4, r4, #4
 80021ae:	0533      	lsls	r3, r6, #20
 80021b0:	d50f      	bpl.n	80021d2 <HAL_CAN_IRQHandler+0x166>
 80021b2:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80021b6:	d00c      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x166>
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d04f      	beq.n	800225c <HAL_CAN_IRQHandler+0x1f0>
 80021bc:	d83e      	bhi.n	800223c <HAL_CAN_IRQHandler+0x1d0>
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d046      	beq.n	8002250 <HAL_CAN_IRQHandler+0x1e4>
 80021c2:	2b30      	cmp	r3, #48	; 0x30
 80021c4:	d047      	beq.n	8002256 <HAL_CAN_IRQHandler+0x1ea>
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d03f      	beq.n	800224a <HAL_CAN_IRQHandler+0x1de>
 80021ca:	6993      	ldr	r3, [r2, #24]
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	2304      	movs	r3, #4
 80021d4:	6053      	str	r3, [r2, #4]
 80021d6:	b12c      	cbz	r4, 80021e4 <HAL_CAN_IRQHandler+0x178>
 80021d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80021da:	4628      	mov	r0, r5
 80021dc:	431c      	orrs	r4, r3
 80021de:	626c      	str	r4, [r5, #36]	; 0x24
 80021e0:	f7ff ff43 	bl	800206a <HAL_CAN_ErrorCallback>
 80021e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e8:	077a      	lsls	r2, r7, #29
 80021ea:	d405      	bmi.n	80021f8 <HAL_CAN_IRQHandler+0x18c>
 80021ec:	f017 0408 	ands.w	r4, r7, #8
 80021f0:	d105      	bne.n	80021fe <HAL_CAN_IRQHandler+0x192>
 80021f2:	f7ff ff32 	bl	800205a <HAL_CAN_TxMailbox0AbortCallback>
 80021f6:	e755      	b.n	80020a4 <HAL_CAN_IRQHandler+0x38>
 80021f8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80021fc:	e752      	b.n	80020a4 <HAL_CAN_IRQHandler+0x38>
 80021fe:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002202:	e74f      	b.n	80020a4 <HAL_CAN_IRQHandler+0x38>
 8002204:	0579      	lsls	r1, r7, #21
 8002206:	d502      	bpl.n	800220e <HAL_CAN_IRQHandler+0x1a2>
 8002208:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800220c:	e756      	b.n	80020bc <HAL_CAN_IRQHandler+0x50>
 800220e:	053a      	lsls	r2, r7, #20
 8002210:	d502      	bpl.n	8002218 <HAL_CAN_IRQHandler+0x1ac>
 8002212:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002216:	e751      	b.n	80020bc <HAL_CAN_IRQHandler+0x50>
 8002218:	4628      	mov	r0, r5
 800221a:	f7ff ff1f 	bl	800205c <HAL_CAN_TxMailbox1AbortCallback>
 800221e:	e74d      	b.n	80020bc <HAL_CAN_IRQHandler+0x50>
 8002220:	0379      	lsls	r1, r7, #13
 8002222:	d502      	bpl.n	800222a <HAL_CAN_IRQHandler+0x1be>
 8002224:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002228:	e754      	b.n	80020d4 <HAL_CAN_IRQHandler+0x68>
 800222a:	033a      	lsls	r2, r7, #12
 800222c:	d502      	bpl.n	8002234 <HAL_CAN_IRQHandler+0x1c8>
 800222e:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002232:	e74f      	b.n	80020d4 <HAL_CAN_IRQHandler+0x68>
 8002234:	4628      	mov	r0, r5
 8002236:	f7ff ff12 	bl	800205e <HAL_CAN_TxMailbox2AbortCallback>
 800223a:	e74b      	b.n	80020d4 <HAL_CAN_IRQHandler+0x68>
 800223c:	2b50      	cmp	r3, #80	; 0x50
 800223e:	d010      	beq.n	8002262 <HAL_CAN_IRQHandler+0x1f6>
 8002240:	2b60      	cmp	r3, #96	; 0x60
 8002242:	d1c2      	bne.n	80021ca <HAL_CAN_IRQHandler+0x15e>
 8002244:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002248:	e7bf      	b.n	80021ca <HAL_CAN_IRQHandler+0x15e>
 800224a:	f044 0408 	orr.w	r4, r4, #8
 800224e:	e7bc      	b.n	80021ca <HAL_CAN_IRQHandler+0x15e>
 8002250:	f044 0410 	orr.w	r4, r4, #16
 8002254:	e7b9      	b.n	80021ca <HAL_CAN_IRQHandler+0x15e>
 8002256:	f044 0420 	orr.w	r4, r4, #32
 800225a:	e7b6      	b.n	80021ca <HAL_CAN_IRQHandler+0x15e>
 800225c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8002260:	e7b3      	b.n	80021ca <HAL_CAN_IRQHandler+0x15e>
 8002262:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002266:	e7b0      	b.n	80021ca <HAL_CAN_IRQHandler+0x15e>

08002268 <HAL_NVIC_SetPriorityGrouping>:
 8002268:	4907      	ldr	r1, [pc, #28]	; (8002288 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800226a:	0203      	lsls	r3, r0, #8
 800226c:	68ca      	ldr	r2, [r1, #12]
 800226e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	0c12      	lsrs	r2, r2, #16
 800227a:	4313      	orrs	r3, r2
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60cb      	str	r3, [r1, #12]
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <HAL_NVIC_SetPriority>:
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_NVIC_SetPriority+0x5c>)
 800228e:	b530      	push	{r4, r5, lr}
 8002290:	68dc      	ldr	r4, [r3, #12]
 8002292:	f3c4 2402 	ubfx	r4, r4, #8, #3
 8002296:	f1c4 0307 	rsb	r3, r4, #7
 800229a:	1d25      	adds	r5, r4, #4
 800229c:	2b04      	cmp	r3, #4
 800229e:	bf28      	it	cs
 80022a0:	2304      	movcs	r3, #4
 80022a2:	2d06      	cmp	r5, #6
 80022a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022a8:	bf98      	it	ls
 80022aa:	2400      	movls	r4, #0
 80022ac:	fa05 f303 	lsl.w	r3, r5, r3
 80022b0:	bf88      	it	hi
 80022b2:	3c03      	subhi	r4, #3
 80022b4:	ea21 0303 	bic.w	r3, r1, r3
 80022b8:	40a3      	lsls	r3, r4
 80022ba:	fa05 f404 	lsl.w	r4, r5, r4
 80022be:	ea22 0204 	bic.w	r2, r2, r4
 80022c2:	2800      	cmp	r0, #0
 80022c4:	ea43 0302 	orr.w	r3, r3, r2
 80022c8:	bfac      	ite	ge
 80022ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80022ce:	4a07      	ldrlt	r2, [pc, #28]	; (80022ec <HAL_NVIC_SetPriority+0x60>)
 80022d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	bfab      	itete	ge
 80022d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80022dc:	f000 000f 	andlt.w	r0, r0, #15
 80022e0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
 80022e4:	5413      	strblt	r3, [r2, r0]
 80022e6:	bd30      	pop	{r4, r5, pc}
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	e000ed14 	.word	0xe000ed14

080022f0 <HAL_NVIC_EnableIRQ>:
 80022f0:	2800      	cmp	r0, #0
 80022f2:	db08      	blt.n	8002306 <HAL_NVIC_EnableIRQ+0x16>
 80022f4:	2301      	movs	r3, #1
 80022f6:	0942      	lsrs	r2, r0, #5
 80022f8:	f000 001f 	and.w	r0, r0, #31
 80022fc:	fa03 f000 	lsl.w	r0, r3, r0
 8002300:	4b01      	ldr	r3, [pc, #4]	; (8002308 <HAL_NVIC_EnableIRQ+0x18>)
 8002302:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100

0800230c <HAL_SYSTICK_Config>:
 800230c:	3801      	subs	r0, #1
 800230e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002312:	d20b      	bcs.n	800232c <HAL_SYSTICK_Config+0x20>
 8002314:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002318:	21f0      	movs	r1, #240	; 0xf0
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <HAL_SYSTICK_Config+0x24>)
 800231c:	6158      	str	r0, [r3, #20]
 800231e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8002322:	2000      	movs	r0, #0
 8002324:	2207      	movs	r2, #7
 8002326:	6198      	str	r0, [r3, #24]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	4770      	bx	lr
 800232c:	2001      	movs	r0, #1
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <HAL_DMA_Init>:
 8002334:	b510      	push	{r4, lr}
 8002336:	2800      	cmp	r0, #0
 8002338:	d030      	beq.n	800239c <HAL_DMA_Init+0x68>
 800233a:	6801      	ldr	r1, [r0, #0]
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_DMA_Init+0x6c>)
 800233e:	2414      	movs	r4, #20
 8002340:	4299      	cmp	r1, r3
 8002342:	d823      	bhi.n	800238c <HAL_DMA_Init+0x58>
 8002344:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_DMA_Init+0x70>)
 8002346:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
 800234a:	440a      	add	r2, r1
 800234c:	fbb2 f2f4 	udiv	r2, r2, r4
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	6402      	str	r2, [r0, #64]	; 0x40
 8002354:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002356:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800235a:	4323      	orrs	r3, r4
 800235c:	68c4      	ldr	r4, [r0, #12]
 800235e:	680a      	ldr	r2, [r1, #0]
 8002360:	4323      	orrs	r3, r4
 8002362:	6904      	ldr	r4, [r0, #16]
 8002364:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002368:	4323      	orrs	r3, r4
 800236a:	6944      	ldr	r4, [r0, #20]
 800236c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002370:	4323      	orrs	r3, r4
 8002372:	6984      	ldr	r4, [r0, #24]
 8002374:	4323      	orrs	r3, r4
 8002376:	69c4      	ldr	r4, [r0, #28]
 8002378:	4323      	orrs	r3, r4
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
 800237e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002382:	2300      	movs	r3, #0
 8002384:	8402      	strh	r2, [r0, #32]
 8002386:	6383      	str	r3, [r0, #56]	; 0x38
 8002388:	4618      	mov	r0, r3
 800238a:	bd10      	pop	{r4, pc}
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_DMA_Init+0x74>)
 800238e:	440b      	add	r3, r1
 8002390:	fbb3 f3f4 	udiv	r3, r3, r4
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	6403      	str	r3, [r0, #64]	; 0x40
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_DMA_Init+0x78>)
 800239a:	e7db      	b.n	8002354 <HAL_DMA_Init+0x20>
 800239c:	2001      	movs	r0, #1
 800239e:	e7f4      	b.n	800238a <HAL_DMA_Init+0x56>
 80023a0:	40020407 	.word	0x40020407
 80023a4:	bffdfff8 	.word	0xbffdfff8
 80023a8:	bffdfbf8 	.word	0xbffdfbf8
 80023ac:	40020400 	.word	0x40020400

080023b0 <HAL_DMA_IRQHandler>:
 80023b0:	b470      	push	{r4, r5, r6}
 80023b2:	2504      	movs	r5, #4
 80023b4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80023b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023b8:	6834      	ldr	r4, [r6, #0]
 80023ba:	6803      	ldr	r3, [r0, #0]
 80023bc:	4095      	lsls	r5, r2
 80023be:	4225      	tst	r5, r4
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	f000 8085 	beq.w	80024d0 <HAL_DMA_IRQHandler+0x120>
 80023c6:	074d      	lsls	r5, r1, #29
 80023c8:	f140 8082 	bpl.w	80024d0 <HAL_DMA_IRQHandler+0x120>
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4991      	ldr	r1, [pc, #580]	; (8002614 <HAL_DMA_IRQHandler+0x264>)
 80023d0:	0696      	lsls	r6, r2, #26
 80023d2:	bf5e      	ittt	pl
 80023d4:	681a      	ldrpl	r2, [r3, #0]
 80023d6:	f022 0204 	bicpl.w	r2, r2, #4
 80023da:	601a      	strpl	r2, [r3, #0]
 80023dc:	4a8e      	ldr	r2, [pc, #568]	; (8002618 <HAL_DMA_IRQHandler+0x268>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d93e      	bls.n	8002460 <HAL_DMA_IRQHandler+0xb0>
 80023e2:	428b      	cmp	r3, r1
 80023e4:	d035      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa2>
 80023e6:	3114      	adds	r1, #20
 80023e8:	428b      	cmp	r3, r1
 80023ea:	d034      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa6>
 80023ec:	3114      	adds	r1, #20
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d033      	beq.n	800245a <HAL_DMA_IRQHandler+0xaa>
 80023f2:	3114      	adds	r1, #20
 80023f4:	428b      	cmp	r3, r1
 80023f6:	d020      	beq.n	800243a <HAL_DMA_IRQHandler+0x8a>
 80023f8:	3114      	adds	r1, #20
 80023fa:	428b      	cmp	r3, r1
 80023fc:	d020      	beq.n	8002440 <HAL_DMA_IRQHandler+0x90>
 80023fe:	3114      	adds	r1, #20
 8002400:	428b      	cmp	r3, r1
 8002402:	d020      	beq.n	8002446 <HAL_DMA_IRQHandler+0x96>
 8002404:	4293      	cmp	r3, r2
 8002406:	d021      	beq.n	800244c <HAL_DMA_IRQHandler+0x9c>
 8002408:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800240c:	4293      	cmp	r3, r2
 800240e:	d020      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa2>
 8002410:	3214      	adds	r2, #20
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa6>
 8002416:	3214      	adds	r2, #20
 8002418:	4293      	cmp	r3, r2
 800241a:	d01e      	beq.n	800245a <HAL_DMA_IRQHandler+0xaa>
 800241c:	3214      	adds	r2, #20
 800241e:	4293      	cmp	r3, r2
 8002420:	bf14      	ite	ne
 8002422:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8002426:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800242a:	4a7c      	ldr	r2, [pc, #496]	; (800261c <HAL_DMA_IRQHandler+0x26c>)
 800242c:	6053      	str	r3, [r2, #4]
 800242e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ed 	beq.w	8002610 <HAL_DMA_IRQHandler+0x260>
 8002436:	bc70      	pop	{r4, r5, r6}
 8002438:	4718      	bx	r3
 800243a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800243e:	e7f4      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 8002440:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002444:	e7f1      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 8002446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800244a:	e7ee      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 800244c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002450:	e7eb      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 8002452:	2304      	movs	r3, #4
 8002454:	e7e9      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 8002456:	2340      	movs	r3, #64	; 0x40
 8002458:	e7e7      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 800245a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245e:	e7e4      	b.n	800242a <HAL_DMA_IRQHandler+0x7a>
 8002460:	428b      	cmp	r3, r1
 8002462:	d02e      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x112>
 8002464:	496e      	ldr	r1, [pc, #440]	; (8002620 <HAL_DMA_IRQHandler+0x270>)
 8002466:	428b      	cmp	r3, r1
 8002468:	d02d      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x116>
 800246a:	3114      	adds	r1, #20
 800246c:	428b      	cmp	r3, r1
 800246e:	d02c      	beq.n	80024ca <HAL_DMA_IRQHandler+0x11a>
 8002470:	3114      	adds	r1, #20
 8002472:	428b      	cmp	r3, r1
 8002474:	d019      	beq.n	80024aa <HAL_DMA_IRQHandler+0xfa>
 8002476:	3114      	adds	r1, #20
 8002478:	428b      	cmp	r3, r1
 800247a:	d019      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x100>
 800247c:	3114      	adds	r1, #20
 800247e:	428b      	cmp	r3, r1
 8002480:	d019      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x106>
 8002482:	4293      	cmp	r3, r2
 8002484:	d01a      	beq.n	80024bc <HAL_DMA_IRQHandler+0x10c>
 8002486:	4a67      	ldr	r2, [pc, #412]	; (8002624 <HAL_DMA_IRQHandler+0x274>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01a      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x112>
 800248c:	3214      	adds	r2, #20
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x116>
 8002492:	3214      	adds	r2, #20
 8002494:	4293      	cmp	r3, r2
 8002496:	d018      	beq.n	80024ca <HAL_DMA_IRQHandler+0x11a>
 8002498:	3214      	adds	r2, #20
 800249a:	4293      	cmp	r3, r2
 800249c:	bf14      	ite	ne
 800249e:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80024a2:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80024a6:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_DMA_IRQHandler+0x278>)
 80024a8:	e7c0      	b.n	800242c <HAL_DMA_IRQHandler+0x7c>
 80024aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ae:	e7fa      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024b4:	e7f7      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ba:	e7f4      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024c0:	e7f1      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e7ef      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	e7ed      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ce:	e7ea      	b.n	80024a6 <HAL_DMA_IRQHandler+0xf6>
 80024d0:	2502      	movs	r5, #2
 80024d2:	4095      	lsls	r5, r2
 80024d4:	4225      	tst	r5, r4
 80024d6:	f000 8087 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x238>
 80024da:	078d      	lsls	r5, r1, #30
 80024dc:	f140 8084 	bpl.w	80025e8 <HAL_DMA_IRQHandler+0x238>
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	0694      	lsls	r4, r2, #26
 80024e4:	d406      	bmi.n	80024f4 <HAL_DMA_IRQHandler+0x144>
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f022 020a 	bic.w	r2, r2, #10
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
 80024f4:	4a48      	ldr	r2, [pc, #288]	; (8002618 <HAL_DMA_IRQHandler+0x268>)
 80024f6:	4947      	ldr	r1, [pc, #284]	; (8002614 <HAL_DMA_IRQHandler+0x264>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d93d      	bls.n	8002578 <HAL_DMA_IRQHandler+0x1c8>
 80024fc:	428b      	cmp	r3, r1
 80024fe:	d034      	beq.n	800256a <HAL_DMA_IRQHandler+0x1ba>
 8002500:	3114      	adds	r1, #20
 8002502:	428b      	cmp	r3, r1
 8002504:	d033      	beq.n	800256e <HAL_DMA_IRQHandler+0x1be>
 8002506:	3114      	adds	r1, #20
 8002508:	428b      	cmp	r3, r1
 800250a:	d032      	beq.n	8002572 <HAL_DMA_IRQHandler+0x1c2>
 800250c:	3114      	adds	r1, #20
 800250e:	428b      	cmp	r3, r1
 8002510:	d01f      	beq.n	8002552 <HAL_DMA_IRQHandler+0x1a2>
 8002512:	3114      	adds	r1, #20
 8002514:	428b      	cmp	r3, r1
 8002516:	d01f      	beq.n	8002558 <HAL_DMA_IRQHandler+0x1a8>
 8002518:	3114      	adds	r1, #20
 800251a:	428b      	cmp	r3, r1
 800251c:	d01f      	beq.n	800255e <HAL_DMA_IRQHandler+0x1ae>
 800251e:	4293      	cmp	r3, r2
 8002520:	d020      	beq.n	8002564 <HAL_DMA_IRQHandler+0x1b4>
 8002522:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_DMA_IRQHandler+0x1ba>
 800252a:	3214      	adds	r2, #20
 800252c:	4293      	cmp	r3, r2
 800252e:	d01e      	beq.n	800256e <HAL_DMA_IRQHandler+0x1be>
 8002530:	3214      	adds	r2, #20
 8002532:	4293      	cmp	r3, r2
 8002534:	d01d      	beq.n	8002572 <HAL_DMA_IRQHandler+0x1c2>
 8002536:	3214      	adds	r2, #20
 8002538:	4293      	cmp	r3, r2
 800253a:	bf14      	ite	ne
 800253c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8002540:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8002544:	4a35      	ldr	r2, [pc, #212]	; (800261c <HAL_DMA_IRQHandler+0x26c>)
 8002546:	6053      	str	r3, [r2, #4]
 8002548:	2300      	movs	r3, #0
 800254a:	f880 3020 	strb.w	r3, [r0, #32]
 800254e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002550:	e76e      	b.n	8002430 <HAL_DMA_IRQHandler+0x80>
 8002552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002556:	e7f5      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255c:	e7f2      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 800255e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002562:	e7ef      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002568:	e7ec      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 800256a:	2302      	movs	r3, #2
 800256c:	e7ea      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 800256e:	2320      	movs	r3, #32
 8002570:	e7e8      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002576:	e7e5      	b.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002578:	428b      	cmp	r3, r1
 800257a:	d02e      	beq.n	80025da <HAL_DMA_IRQHandler+0x22a>
 800257c:	4928      	ldr	r1, [pc, #160]	; (8002620 <HAL_DMA_IRQHandler+0x270>)
 800257e:	428b      	cmp	r3, r1
 8002580:	d02d      	beq.n	80025de <HAL_DMA_IRQHandler+0x22e>
 8002582:	3114      	adds	r1, #20
 8002584:	428b      	cmp	r3, r1
 8002586:	d02c      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x232>
 8002588:	3114      	adds	r1, #20
 800258a:	428b      	cmp	r3, r1
 800258c:	d019      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x212>
 800258e:	3114      	adds	r1, #20
 8002590:	428b      	cmp	r3, r1
 8002592:	d019      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x218>
 8002594:	3114      	adds	r1, #20
 8002596:	428b      	cmp	r3, r1
 8002598:	d019      	beq.n	80025ce <HAL_DMA_IRQHandler+0x21e>
 800259a:	4293      	cmp	r3, r2
 800259c:	d01a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x224>
 800259e:	4a21      	ldr	r2, [pc, #132]	; (8002624 <HAL_DMA_IRQHandler+0x274>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01a      	beq.n	80025da <HAL_DMA_IRQHandler+0x22a>
 80025a4:	3214      	adds	r2, #20
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_DMA_IRQHandler+0x22e>
 80025aa:	3214      	adds	r2, #20
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x232>
 80025b0:	3214      	adds	r2, #20
 80025b2:	4293      	cmp	r3, r2
 80025b4:	bf14      	ite	ne
 80025b6:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80025ba:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80025be:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_DMA_IRQHandler+0x278>)
 80025c0:	e7c1      	b.n	8002546 <HAL_DMA_IRQHandler+0x196>
 80025c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c6:	e7fa      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025cc:	e7f7      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d2:	e7f4      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d8:	e7f1      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e7ef      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025de:	2320      	movs	r3, #32
 80025e0:	e7ed      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e6:	e7ea      	b.n	80025be <HAL_DMA_IRQHandler+0x20e>
 80025e8:	2508      	movs	r5, #8
 80025ea:	4095      	lsls	r5, r2
 80025ec:	4225      	tst	r5, r4
 80025ee:	d00f      	beq.n	8002610 <HAL_DMA_IRQHandler+0x260>
 80025f0:	0709      	lsls	r1, r1, #28
 80025f2:	d50d      	bpl.n	8002610 <HAL_DMA_IRQHandler+0x260>
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	f021 010e 	bic.w	r1, r1, #14
 80025fa:	6019      	str	r1, [r3, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	fa03 f202 	lsl.w	r2, r3, r2
 8002602:	6072      	str	r2, [r6, #4]
 8002604:	6383      	str	r3, [r0, #56]	; 0x38
 8002606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260a:	8403      	strh	r3, [r0, #32]
 800260c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800260e:	e70f      	b.n	8002430 <HAL_DMA_IRQHandler+0x80>
 8002610:	bc70      	pop	{r4, r5, r6}
 8002612:	4770      	bx	lr
 8002614:	40020008 	.word	0x40020008
 8002618:	40020080 	.word	0x40020080
 800261c:	40020400 	.word	0x40020400
 8002620:	4002001c 	.word	0x4002001c
 8002624:	40020408 	.word	0x40020408
 8002628:	40020000 	.word	0x40020000

0800262c <HAL_GPIO_Init>:
 800262c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002630:	2200      	movs	r2, #0
 8002632:	4616      	mov	r6, r2
 8002634:	4f64      	ldr	r7, [pc, #400]	; (80027c8 <HAL_GPIO_Init+0x19c>)
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_GPIO_Init+0x1a0>)
 8002638:	f8df c194 	ldr.w	ip, [pc, #404]	; 80027d0 <HAL_GPIO_Init+0x1a4>
 800263c:	f8df e194 	ldr.w	lr, [pc, #404]	; 80027d4 <HAL_GPIO_Init+0x1a8>
 8002640:	680d      	ldr	r5, [r1, #0]
 8002642:	fa35 f406 	lsrs.w	r4, r5, r6
 8002646:	d102      	bne.n	800264e <HAL_GPIO_Init+0x22>
 8002648:	b003      	add	sp, #12
 800264a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800264e:	f04f 0801 	mov.w	r8, #1
 8002652:	fa08 f806 	lsl.w	r8, r8, r6
 8002656:	ea05 0408 	and.w	r4, r5, r8
 800265a:	ea38 0505 	bics.w	r5, r8, r5
 800265e:	d17b      	bne.n	8002758 <HAL_GPIO_Init+0x12c>
 8002660:	684d      	ldr	r5, [r1, #4]
 8002662:	2d03      	cmp	r5, #3
 8002664:	d807      	bhi.n	8002676 <HAL_GPIO_Init+0x4a>
 8002666:	3d01      	subs	r5, #1
 8002668:	2d02      	cmp	r5, #2
 800266a:	f200 8088 	bhi.w	800277e <HAL_GPIO_Init+0x152>
 800266e:	e8df f005 	tbb	[pc, r5]
 8002672:	9b96      	.short	0x9b96
 8002674:	a1          	.byte	0xa1
 8002675:	00          	.byte	0x00
 8002676:	2d12      	cmp	r5, #18
 8002678:	f000 8099 	beq.w	80027ae <HAL_GPIO_Init+0x182>
 800267c:	d86e      	bhi.n	800275c <HAL_GPIO_Init+0x130>
 800267e:	2d11      	cmp	r5, #17
 8002680:	f000 808f 	beq.w	80027a2 <HAL_GPIO_Init+0x176>
 8002684:	2cff      	cmp	r4, #255	; 0xff
 8002686:	bf98      	it	ls
 8002688:	4682      	movls	sl, r0
 800268a:	f04f 090f 	mov.w	r9, #15
 800268e:	bf88      	it	hi
 8002690:	f100 0a04 	addhi.w	sl, r0, #4
 8002694:	ea4f 0586 	mov.w	r5, r6, lsl #2
 8002698:	f8da 8000 	ldr.w	r8, [sl]
 800269c:	bf88      	it	hi
 800269e:	3d20      	subhi	r5, #32
 80026a0:	fa09 fb05 	lsl.w	fp, r9, r5
 80026a4:	ea28 080b 	bic.w	r8, r8, fp
 80026a8:	fa02 f505 	lsl.w	r5, r2, r5
 80026ac:	ea48 0505 	orr.w	r5, r8, r5
 80026b0:	f8ca 5000 	str.w	r5, [sl]
 80026b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80026b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80026bc:	d04c      	beq.n	8002758 <HAL_GPIO_Init+0x12c>
 80026be:	69bd      	ldr	r5, [r7, #24]
 80026c0:	f026 0803 	bic.w	r8, r6, #3
 80026c4:	f045 0501 	orr.w	r5, r5, #1
 80026c8:	61bd      	str	r5, [r7, #24]
 80026ca:	69bd      	ldr	r5, [r7, #24]
 80026cc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80026d0:	f005 0501 	and.w	r5, r5, #1
 80026d4:	9501      	str	r5, [sp, #4]
 80026d6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80026da:	f006 0b03 	and.w	fp, r6, #3
 80026de:	9d01      	ldr	r5, [sp, #4]
 80026e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80026e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80026e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80026ec:	ea25 0909 	bic.w	r9, r5, r9
 80026f0:	4d39      	ldr	r5, [pc, #228]	; (80027d8 <HAL_GPIO_Init+0x1ac>)
 80026f2:	42a8      	cmp	r0, r5
 80026f4:	d062      	beq.n	80027bc <HAL_GPIO_Init+0x190>
 80026f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026fa:	42a8      	cmp	r0, r5
 80026fc:	d060      	beq.n	80027c0 <HAL_GPIO_Init+0x194>
 80026fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002702:	42a8      	cmp	r0, r5
 8002704:	d05e      	beq.n	80027c4 <HAL_GPIO_Init+0x198>
 8002706:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800270a:	42a8      	cmp	r0, r5
 800270c:	bf0c      	ite	eq
 800270e:	2503      	moveq	r5, #3
 8002710:	2504      	movne	r5, #4
 8002712:	fa05 f50b 	lsl.w	r5, r5, fp
 8002716:	ea45 0509 	orr.w	r5, r5, r9
 800271a:	f8c8 5008 	str.w	r5, [r8, #8]
 800271e:	681d      	ldr	r5, [r3, #0]
 8002720:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
 8002724:	bf14      	ite	ne
 8002726:	4325      	orrne	r5, r4
 8002728:	43a5      	biceq	r5, r4
 800272a:	601d      	str	r5, [r3, #0]
 800272c:	685d      	ldr	r5, [r3, #4]
 800272e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
 8002732:	bf14      	ite	ne
 8002734:	4325      	orrne	r5, r4
 8002736:	43a5      	biceq	r5, r4
 8002738:	605d      	str	r5, [r3, #4]
 800273a:	689d      	ldr	r5, [r3, #8]
 800273c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
 8002740:	bf14      	ite	ne
 8002742:	4325      	orrne	r5, r4
 8002744:	43a5      	biceq	r5, r4
 8002746:	609d      	str	r5, [r3, #8]
 8002748:	68dd      	ldr	r5, [r3, #12]
 800274a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
 800274e:	bf14      	ite	ne
 8002750:	432c      	orrne	r4, r5
 8002752:	ea25 0404 	biceq.w	r4, r5, r4
 8002756:	60dc      	str	r4, [r3, #12]
 8002758:	3601      	adds	r6, #1
 800275a:	e771      	b.n	8002640 <HAL_GPIO_Init+0x14>
 800275c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80027dc <HAL_GPIO_Init+0x1b0>
 8002760:	454d      	cmp	r5, r9
 8002762:	d00c      	beq.n	800277e <HAL_GPIO_Init+0x152>
 8002764:	d817      	bhi.n	8002796 <HAL_GPIO_Init+0x16a>
 8002766:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800276a:	454d      	cmp	r5, r9
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x152>
 800276e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002772:	454d      	cmp	r5, r9
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x152>
 8002776:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800277a:	454d      	cmp	r5, r9
 800277c:	d182      	bne.n	8002684 <HAL_GPIO_Init+0x58>
 800277e:	688a      	ldr	r2, [r1, #8]
 8002780:	b1d2      	cbz	r2, 80027b8 <HAL_GPIO_Init+0x18c>
 8002782:	2a01      	cmp	r2, #1
 8002784:	bf08      	it	eq
 8002786:	f8c0 8010 	streq.w	r8, [r0, #16]
 800278a:	f04f 0208 	mov.w	r2, #8
 800278e:	bf18      	it	ne
 8002790:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002794:	e776      	b.n	8002684 <HAL_GPIO_Init+0x58>
 8002796:	4565      	cmp	r5, ip
 8002798:	d0f1      	beq.n	800277e <HAL_GPIO_Init+0x152>
 800279a:	4575      	cmp	r5, lr
 800279c:	e7ee      	b.n	800277c <HAL_GPIO_Init+0x150>
 800279e:	68ca      	ldr	r2, [r1, #12]
 80027a0:	e770      	b.n	8002684 <HAL_GPIO_Init+0x58>
 80027a2:	68ca      	ldr	r2, [r1, #12]
 80027a4:	3204      	adds	r2, #4
 80027a6:	e76d      	b.n	8002684 <HAL_GPIO_Init+0x58>
 80027a8:	68ca      	ldr	r2, [r1, #12]
 80027aa:	3208      	adds	r2, #8
 80027ac:	e76a      	b.n	8002684 <HAL_GPIO_Init+0x58>
 80027ae:	68ca      	ldr	r2, [r1, #12]
 80027b0:	320c      	adds	r2, #12
 80027b2:	e767      	b.n	8002684 <HAL_GPIO_Init+0x58>
 80027b4:	2200      	movs	r2, #0
 80027b6:	e765      	b.n	8002684 <HAL_GPIO_Init+0x58>
 80027b8:	2204      	movs	r2, #4
 80027ba:	e763      	b.n	8002684 <HAL_GPIO_Init+0x58>
 80027bc:	2500      	movs	r5, #0
 80027be:	e7a8      	b.n	8002712 <HAL_GPIO_Init+0xe6>
 80027c0:	2501      	movs	r5, #1
 80027c2:	e7a6      	b.n	8002712 <HAL_GPIO_Init+0xe6>
 80027c4:	2502      	movs	r5, #2
 80027c6:	e7a4      	b.n	8002712 <HAL_GPIO_Init+0xe6>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010400 	.word	0x40010400
 80027d0:	10310000 	.word	0x10310000
 80027d4:	10320000 	.word	0x10320000
 80027d8:	40010800 	.word	0x40010800
 80027dc:	10220000 	.word	0x10220000

080027e0 <HAL_GPIO_WritePin>:
 80027e0:	b10a      	cbz	r2, 80027e6 <HAL_GPIO_WritePin+0x6>
 80027e2:	6101      	str	r1, [r0, #16]
 80027e4:	4770      	bx	lr
 80027e6:	0409      	lsls	r1, r1, #16
 80027e8:	e7fb      	b.n	80027e2 <HAL_GPIO_WritePin+0x2>

080027ea <HAL_PCD_Init>:
 80027ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ec:	4604      	mov	r4, r0
 80027ee:	b08b      	sub	sp, #44	; 0x2c
 80027f0:	b360      	cbz	r0, 800284c <HAL_PCD_Init+0x62>
 80027f2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80027f6:	6805      	ldr	r5, [r0, #0]
 80027f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027fc:	b91b      	cbnz	r3, 8002806 <HAL_PCD_Init+0x1c>
 80027fe:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
 8002802:	f00d fd33 	bl	801026c <HAL_PCD_MspInit>
 8002806:	2303      	movs	r3, #3
 8002808:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 800280c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800280e:	4625      	mov	r5, r4
 8002810:	466e      	mov	r6, sp
 8002812:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002816:	f855 0b10 	ldr.w	r0, [r5], #16
 800281a:	bf08      	it	eq
 800281c:	6123      	streq	r3, [r4, #16]
 800281e:	f001 fa45 	bl	8003cac <USB_DisableGlobalInt>
 8002822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002824:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002828:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800282a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800282e:	4625      	mov	r5, r4
 8002830:	e886 0003 	stmia.w	r6, {r0, r1}
 8002834:	1d27      	adds	r7, r4, #4
 8002836:	f855 0b10 	ldr.w	r0, [r5], #16
 800283a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800283e:	f001 f997 	bl	8003b70 <USB_CoreInit>
 8002842:	4606      	mov	r6, r0
 8002844:	b120      	cbz	r0, 8002850 <HAL_PCD_Init+0x66>
 8002846:	2302      	movs	r3, #2
 8002848:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 800284c:	2501      	movs	r5, #1
 800284e:	e04e      	b.n	80028ee <HAL_PCD_Init+0x104>
 8002850:	4601      	mov	r1, r0
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	f001 fa30 	bl	8003cb8 <USB_SetCurrentMode>
 8002858:	4631      	mov	r1, r6
 800285a:	f04f 0e01 	mov.w	lr, #1
 800285e:	261c      	movs	r6, #28
 8002860:	4608      	mov	r0, r1
 8002862:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8002866:	b2ca      	uxtb	r2, r1
 8002868:	4594      	cmp	ip, r2
 800286a:	f101 0101 	add.w	r1, r1, #1
 800286e:	d81c      	bhi.n	80028aa <HAL_PCD_Init+0xc0>
 8002870:	2300      	movs	r3, #0
 8002872:	261c      	movs	r6, #28
 8002874:	4619      	mov	r1, r3
 8002876:	b2d8      	uxtb	r0, r3
 8002878:	4584      	cmp	ip, r0
 800287a:	f103 0301 	add.w	r3, r3, #1
 800287e:	d822      	bhi.n	80028c6 <HAL_PCD_Init+0xdc>
 8002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002882:	466e      	mov	r6, sp
 8002884:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002888:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800288a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800288e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002892:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002896:	6820      	ldr	r0, [r4, #0]
 8002898:	f001 fa66 	bl	8003d68 <USB_DevInit>
 800289c:	2301      	movs	r3, #1
 800289e:	4605      	mov	r5, r0
 80028a0:	b1f0      	cbz	r0, 80028e0 <HAL_PCD_Init+0xf6>
 80028a2:	2202      	movs	r2, #2
 80028a4:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80028a8:	e7d0      	b.n	800284c <HAL_PCD_Init+0x62>
 80028aa:	fb06 4302 	mla	r3, r6, r2, r4
 80028ae:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
 80028b2:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028ba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80028be:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
 80028c2:	6518      	str	r0, [r3, #80]	; 0x50
 80028c4:	e7cf      	b.n	8002866 <HAL_PCD_Init+0x7c>
 80028c6:	fb06 4200 	mla	r2, r6, r0, r4
 80028ca:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
 80028ce:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
 80028d2:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
 80028d6:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
 80028da:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80028de:	e7ca      	b.n	8002876 <HAL_PCD_Init+0x8c>
 80028e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 80028ea:	f001 fcd3 	bl	8004294 <USB_DevDisconnect>
 80028ee:	4628      	mov	r0, r5
 80028f0:	b00b      	add	sp, #44	; 0x2c
 80028f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028f4 <HAL_PCD_Start>:
 80028f4:	b510      	push	{r4, lr}
 80028f6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80028fa:	4604      	mov	r4, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d00c      	beq.n	800291a <HAL_PCD_Start+0x26>
 8002900:	2301      	movs	r3, #1
 8002902:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
 8002906:	6800      	ldr	r0, [r0, #0]
 8002908:	f001 f9ca 	bl	8003ca0 <USB_EnableGlobalInt>
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	f001 fcb3 	bl	8004278 <USB_DevConnect>
 8002912:	2000      	movs	r0, #0
 8002914:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 8002918:	bd10      	pop	{r4, pc}
 800291a:	2002      	movs	r0, #2
 800291c:	e7fc      	b.n	8002918 <HAL_PCD_Start+0x24>

0800291e <HAL_PCD_Stop>:
 800291e:	b510      	push	{r4, lr}
 8002920:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002924:	4604      	mov	r4, r0
 8002926:	2b01      	cmp	r3, #1
 8002928:	d010      	beq.n	800294c <HAL_PCD_Stop+0x2e>
 800292a:	2301      	movs	r3, #1
 800292c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
 8002930:	6800      	ldr	r0, [r0, #0]
 8002932:	f001 f9bb 	bl	8003cac <USB_DisableGlobalInt>
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	f001 fcac 	bl	8004294 <USB_DevDisconnect>
 800293c:	2110      	movs	r1, #16
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	f001 f9e8 	bl	8003d14 <USB_FlushTxFifo>
 8002944:	2000      	movs	r0, #0
 8002946:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 800294a:	bd10      	pop	{r4, pc}
 800294c:	2002      	movs	r0, #2
 800294e:	e7fc      	b.n	800294a <HAL_PCD_Stop+0x2c>

08002950 <HAL_PCD_IRQHandler>:
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	6805      	ldr	r5, [r0, #0]
 8002956:	b085      	sub	sp, #20
 8002958:	4604      	mov	r4, r0
 800295a:	4628      	mov	r0, r5
 800295c:	f001 fcd7 	bl	800430e <USB_GetMode>
 8002960:	9000      	str	r0, [sp, #0]
 8002962:	2800      	cmp	r0, #0
 8002964:	f040 811b 	bne.w	8002b9e <HAL_PCD_IRQHandler+0x24e>
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	f001 fca1 	bl	80042b0 <USB_ReadInterrupts>
 800296e:	2800      	cmp	r0, #0
 8002970:	f000 8115 	beq.w	8002b9e <HAL_PCD_IRQHandler+0x24e>
 8002974:	6820      	ldr	r0, [r4, #0]
 8002976:	f001 fc9b 	bl	80042b0 <USB_ReadInterrupts>
 800297a:	0786      	lsls	r6, r0, #30
 800297c:	bf48      	it	mi
 800297e:	6822      	ldrmi	r2, [r4, #0]
 8002980:	6820      	ldr	r0, [r4, #0]
 8002982:	bf42      	ittt	mi
 8002984:	6953      	ldrmi	r3, [r2, #20]
 8002986:	f003 0302 	andmi.w	r3, r3, #2
 800298a:	6153      	strmi	r3, [r2, #20]
 800298c:	f001 fc90 	bl	80042b0 <USB_ReadInterrupts>
 8002990:	06c0      	lsls	r0, r0, #27
 8002992:	d52a      	bpl.n	80029ea <HAL_PCD_IRQHandler+0x9a>
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	6993      	ldr	r3, [r2, #24]
 8002998:	f023 0310 	bic.w	r3, r3, #16
 800299c:	6193      	str	r3, [r2, #24]
 800299e:	6a2f      	ldr	r7, [r5, #32]
 80029a0:	f3c7 4343 	ubfx	r3, r7, #17, #4
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f007 060f 	and.w	r6, r7, #15
 80029aa:	f040 80fb 	bne.w	8002ba4 <HAL_PCD_IRQHandler+0x254>
 80029ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029b2:	421f      	tst	r7, r3
 80029b4:	d014      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x90>
 80029b6:	231c      	movs	r3, #28
 80029b8:	fb03 4606 	mla	r6, r3, r6, r4
 80029bc:	f3c7 180a 	ubfx	r8, r7, #4, #11
 80029c0:	4642      	mov	r2, r8
 80029c2:	4628      	mov	r0, r5
 80029c4:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 80029c8:	f001 fbd2 	bl	8004170 <USB_ReadPacket>
 80029cc:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
 80029d0:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80029d4:	4442      	add	r2, r8
 80029d6:	4443      	add	r3, r8
 80029d8:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
 80029dc:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	6993      	ldr	r3, [r2, #24]
 80029e4:	f043 0310 	orr.w	r3, r3, #16
 80029e8:	6193      	str	r3, [r2, #24]
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	f001 fc60 	bl	80042b0 <USB_ReadInterrupts>
 80029f0:	0301      	lsls	r1, r0, #12
 80029f2:	f100 80eb 	bmi.w	8002bcc <HAL_PCD_IRQHandler+0x27c>
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	f001 fc5a 	bl	80042b0 <USB_ReadInterrupts>
 80029fc:	0342      	lsls	r2, r0, #13
 80029fe:	d50c      	bpl.n	8002a1a <HAL_PCD_IRQHandler+0xca>
 8002a00:	6820      	ldr	r0, [r4, #0]
 8002a02:	f001 fc61 	bl	80042c8 <USB_ReadDevAllInEpInterrupt>
 8002a06:	4626      	mov	r6, r4
 8002a08:	4681      	mov	r9, r0
 8002a0a:	f04f 0a00 	mov.w	sl, #0
 8002a0e:	f505 6810 	add.w	r8, r5, #2304	; 0x900
 8002a12:	f1b9 0f00 	cmp.w	r9, #0
 8002a16:	f040 813b 	bne.w	8002c90 <HAL_PCD_IRQHandler+0x340>
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	f001 fc48 	bl	80042b0 <USB_ReadInterrupts>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	da0d      	bge.n	8002a40 <HAL_PCD_IRQHandler+0xf0>
 8002a24:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
 8002a32:	f00d fc95 	bl	8010360 <HAL_PCD_ResumeCallback>
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	6953      	ldr	r3, [r2, #20]
 8002a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a3e:	6153      	str	r3, [r2, #20]
 8002a40:	6820      	ldr	r0, [r4, #0]
 8002a42:	f001 fc35 	bl	80042b0 <USB_ReadInterrupts>
 8002a46:	0501      	lsls	r1, r0, #20
 8002a48:	d50b      	bpl.n	8002a62 <HAL_PCD_IRQHandler+0x112>
 8002a4a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002a4e:	07da      	lsls	r2, r3, #31
 8002a50:	d502      	bpl.n	8002a58 <HAL_PCD_IRQHandler+0x108>
 8002a52:	4620      	mov	r0, r4
 8002a54:	f00d fc6c 	bl	8010330 <HAL_PCD_SuspendCallback>
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	6953      	ldr	r3, [r2, #20]
 8002a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a60:	6153      	str	r3, [r2, #20]
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	f001 fc24 	bl	80042b0 <USB_ReadInterrupts>
 8002a68:	04c3      	lsls	r3, r0, #19
 8002a6a:	d536      	bpl.n	8002ada <HAL_PCD_IRQHandler+0x18a>
 8002a6c:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002a70:	2110      	movs	r1, #16
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
 8002a7a:	6820      	ldr	r0, [r4, #0]
 8002a7c:	f001 f94a 	bl	8003d14 <USB_FlushTxFifo>
 8002a80:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8002a84:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8002a88:	f505 6310 	add.w	r3, r5, #2304	; 0x900
 8002a8c:	6862      	ldr	r2, [r4, #4]
 8002a8e:	9800      	ldr	r0, [sp, #0]
 8002a90:	4282      	cmp	r2, r0
 8002a92:	f200 817b 	bhi.w	8002d8c <HAL_PCD_IRQHandler+0x43c>
 8002a96:	69f3      	ldr	r3, [r6, #28]
 8002a98:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a9c:	61f3      	str	r3, [r6, #28]
 8002a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8192 	beq.w	8002dca <HAL_PCD_IRQHandler+0x47a>
 8002aa6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8002aaa:	f043 030b 	orr.w	r3, r3, #11
 8002aae:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
 8002ab2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002ab4:	f043 030b 	orr.w	r3, r3, #11
 8002ab8:	6473      	str	r3, [r6, #68]	; 0x44
 8002aba:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8002abe:	6820      	ldr	r0, [r4, #0]
 8002ac0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ac4:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 8002ac8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002acc:	f001 fc34 	bl	8004338 <USB_EP0_OutStart>
 8002ad0:	6822      	ldr	r2, [r4, #0]
 8002ad2:	6953      	ldr	r3, [r2, #20]
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	6153      	str	r3, [r2, #20]
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	f001 fbe8 	bl	80042b0 <USB_ReadInterrupts>
 8002ae0:	0487      	lsls	r7, r0, #18
 8002ae2:	d516      	bpl.n	8002b12 <HAL_PCD_IRQHandler+0x1c2>
 8002ae4:	6820      	ldr	r0, [r4, #0]
 8002ae6:	f001 fc16 	bl	8004316 <USB_ActivateSetup>
 8002aea:	6820      	ldr	r0, [r4, #0]
 8002aec:	f001 f9d4 	bl	8003e98 <USB_GetDevSpeed>
 8002af0:	60e0      	str	r0, [r4, #12]
 8002af2:	6825      	ldr	r5, [r4, #0]
 8002af4:	f000 fd82 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8002af8:	7b22      	ldrb	r2, [r4, #12]
 8002afa:	4601      	mov	r1, r0
 8002afc:	4628      	mov	r0, r5
 8002afe:	f001 f85f 	bl	8003bc0 <USB_SetTurnaroundTime>
 8002b02:	4620      	mov	r0, r4
 8002b04:	f00d fc01 	bl	801030a <HAL_PCD_ResetCallback>
 8002b08:	6822      	ldr	r2, [r4, #0]
 8002b0a:	6953      	ldr	r3, [r2, #20]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b10:	6153      	str	r3, [r2, #20]
 8002b12:	6820      	ldr	r0, [r4, #0]
 8002b14:	f001 fbcc 	bl	80042b0 <USB_ReadInterrupts>
 8002b18:	0706      	lsls	r6, r0, #28
 8002b1a:	d507      	bpl.n	8002b2c <HAL_PCD_IRQHandler+0x1dc>
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f00d fbf0 	bl	8010302 <HAL_PCD_SOFCallback>
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6953      	ldr	r3, [r2, #20]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	6153      	str	r3, [r2, #20]
 8002b2c:	6820      	ldr	r0, [r4, #0]
 8002b2e:	f001 fbbf 	bl	80042b0 <USB_ReadInterrupts>
 8002b32:	02c5      	lsls	r5, r0, #11
 8002b34:	d508      	bpl.n	8002b48 <HAL_PCD_IRQHandler+0x1f8>
 8002b36:	2100      	movs	r1, #0
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f00d fc19 	bl	8010370 <HAL_PCD_ISOINIncompleteCallback>
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	6953      	ldr	r3, [r2, #20]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	6153      	str	r3, [r2, #20]
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	f001 fbb1 	bl	80042b0 <USB_ReadInterrupts>
 8002b4e:	0280      	lsls	r0, r0, #10
 8002b50:	d508      	bpl.n	8002b64 <HAL_PCD_IRQHandler+0x214>
 8002b52:	2100      	movs	r1, #0
 8002b54:	4620      	mov	r0, r4
 8002b56:	f00d fc07 	bl	8010368 <HAL_PCD_ISOOUTIncompleteCallback>
 8002b5a:	6822      	ldr	r2, [r4, #0]
 8002b5c:	6953      	ldr	r3, [r2, #20]
 8002b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b62:	6153      	str	r3, [r2, #20]
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	f001 fba3 	bl	80042b0 <USB_ReadInterrupts>
 8002b6a:	0041      	lsls	r1, r0, #1
 8002b6c:	d507      	bpl.n	8002b7e <HAL_PCD_IRQHandler+0x22e>
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f00d fc02 	bl	8010378 <HAL_PCD_ConnectCallback>
 8002b74:	6822      	ldr	r2, [r4, #0]
 8002b76:	6953      	ldr	r3, [r2, #20]
 8002b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b7c:	6153      	str	r3, [r2, #20]
 8002b7e:	6820      	ldr	r0, [r4, #0]
 8002b80:	f001 fb96 	bl	80042b0 <USB_ReadInterrupts>
 8002b84:	0742      	lsls	r2, r0, #29
 8002b86:	d50a      	bpl.n	8002b9e <HAL_PCD_IRQHandler+0x24e>
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	685d      	ldr	r5, [r3, #4]
 8002b8c:	076b      	lsls	r3, r5, #29
 8002b8e:	d502      	bpl.n	8002b96 <HAL_PCD_IRQHandler+0x246>
 8002b90:	4620      	mov	r0, r4
 8002b92:	f00d fbf5 	bl	8010380 <HAL_PCD_DisconnectCallback>
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	6853      	ldr	r3, [r2, #4]
 8002b9a:	432b      	orrs	r3, r5
 8002b9c:	6053      	str	r3, [r2, #4]
 8002b9e:	b005      	add	sp, #20
 8002ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	f47f af1b 	bne.w	80029e0 <HAL_PCD_IRQHandler+0x90>
 8002baa:	2208      	movs	r2, #8
 8002bac:	4628      	mov	r0, r5
 8002bae:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002bb2:	f001 fadd 	bl	8004170 <USB_ReadPacket>
 8002bb6:	231c      	movs	r3, #28
 8002bb8:	fb03 4606 	mla	r6, r3, r6, r4
 8002bbc:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8002bc0:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8002bc4:	441f      	add	r7, r3
 8002bc6:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
 8002bca:	e709      	b.n	80029e0 <HAL_PCD_IRQHandler+0x90>
 8002bcc:	6820      	ldr	r0, [r4, #0]
 8002bce:	f001 fb73 	bl	80042b8 <USB_ReadDevAllOutEpInterrupt>
 8002bd2:	2700      	movs	r7, #0
 8002bd4:	4606      	mov	r6, r0
 8002bd6:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8002de0 <HAL_PCD_IRQHandler+0x490>
 8002bda:	f8df a208 	ldr.w	sl, [pc, #520]	; 8002de4 <HAL_PCD_IRQHandler+0x494>
 8002bde:	f505 6b30 	add.w	fp, r5, #2816	; 0xb00
 8002be2:	2e00      	cmp	r6, #0
 8002be4:	f43f af07 	beq.w	80029f6 <HAL_PCD_IRQHandler+0xa6>
 8002be8:	07f3      	lsls	r3, r6, #31
 8002bea:	d544      	bpl.n	8002c76 <HAL_PCD_IRQHandler+0x326>
 8002bec:	b2f9      	uxtb	r1, r7
 8002bee:	6820      	ldr	r0, [r4, #0]
 8002bf0:	9101      	str	r1, [sp, #4]
 8002bf2:	f001 fb71 	bl	80042d8 <USB_ReadDevOutEPInterrupt>
 8002bf6:	f010 0f01 	tst.w	r0, #1
 8002bfa:	4680      	mov	r8, r0
 8002bfc:	9901      	ldr	r1, [sp, #4]
 8002bfe:	d010      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x2d2>
 8002c00:	2201      	movs	r2, #1
 8002c02:	f8cb 2008 	str.w	r2, [fp, #8]
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c0e:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8002c12:	4550      	cmp	r0, sl
 8002c14:	6893      	ldr	r3, [r2, #8]
 8002c16:	d137      	bne.n	8002c88 <HAL_PCD_IRQHandler+0x338>
 8002c18:	0418      	lsls	r0, r3, #16
 8002c1a:	d531      	bpl.n	8002c80 <HAL_PCD_IRQHandler+0x330>
 8002c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c20:	6091      	str	r1, [r2, #8]
 8002c22:	f018 0f08 	tst.w	r8, #8
 8002c26:	d013      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x300>
 8002c28:	2108      	movs	r1, #8
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	f8cb 1008 	str.w	r1, [fp, #8]
 8002c30:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c36:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8002c3a:	4549      	cmp	r1, r9
 8002c3c:	6890      	ldr	r0, [r2, #8]
 8002c3e:	d904      	bls.n	8002c4a <HAL_PCD_IRQHandler+0x2fa>
 8002c40:	0401      	lsls	r1, r0, #16
 8002c42:	bf44      	itt	mi
 8002c44:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 8002c48:	6091      	strmi	r1, [r2, #8]
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f00d fb42 	bl	80102d4 <HAL_PCD_SetupStageCallback>
 8002c50:	f018 0f10 	tst.w	r8, #16
 8002c54:	bf1c      	itt	ne
 8002c56:	2210      	movne	r2, #16
 8002c58:	f8cb 2008 	strne.w	r2, [fp, #8]
 8002c5c:	f018 0f20 	tst.w	r8, #32
 8002c60:	bf1c      	itt	ne
 8002c62:	2220      	movne	r2, #32
 8002c64:	f8cb 2008 	strne.w	r2, [fp, #8]
 8002c68:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8002c6c:	bf1c      	itt	ne
 8002c6e:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8002c72:	f8cb 3008 	strne.w	r3, [fp, #8]
 8002c76:	3701      	adds	r7, #1
 8002c78:	0876      	lsrs	r6, r6, #1
 8002c7a:	f10b 0b20 	add.w	fp, fp, #32
 8002c7e:	e7b0      	b.n	8002be2 <HAL_PCD_IRQHandler+0x292>
 8002c80:	0698      	lsls	r0, r3, #26
 8002c82:	bf44      	itt	mi
 8002c84:	2020      	movmi	r0, #32
 8002c86:	6090      	strmi	r0, [r2, #8]
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f00d fb29 	bl	80102e0 <HAL_PCD_DataOutStageCallback>
 8002c8e:	e7c8      	b.n	8002c22 <HAL_PCD_IRQHandler+0x2d2>
 8002c90:	f019 0f01 	tst.w	r9, #1
 8002c94:	d072      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x42c>
 8002c96:	fa5f fb8a 	uxtb.w	fp, sl
 8002c9a:	4659      	mov	r1, fp
 8002c9c:	6820      	ldr	r0, [r4, #0]
 8002c9e:	f001 fb24 	bl	80042ea <USB_ReadDevInEPInterrupt>
 8002ca2:	07c3      	lsls	r3, r0, #31
 8002ca4:	4607      	mov	r7, r0
 8002ca6:	d510      	bpl.n	8002cca <HAL_PCD_IRQHandler+0x37a>
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 8002cae:	f00a 010f 	and.w	r1, sl, #15
 8002cb2:	fa02 f101 	lsl.w	r1, r2, r1
 8002cb6:	ea23 0301 	bic.w	r3, r3, r1
 8002cba:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f8c8 2008 	str.w	r2, [r8, #8]
 8002cc6:	f00d fb14 	bl	80102f2 <HAL_PCD_DataInStageCallback>
 8002cca:	0738      	lsls	r0, r7, #28
 8002ccc:	bf44      	itt	mi
 8002cce:	2308      	movmi	r3, #8
 8002cd0:	f8c8 3008 	strmi.w	r3, [r8, #8]
 8002cd4:	06f9      	lsls	r1, r7, #27
 8002cd6:	bf44      	itt	mi
 8002cd8:	2310      	movmi	r3, #16
 8002cda:	f8c8 3008 	strmi.w	r3, [r8, #8]
 8002cde:	067a      	lsls	r2, r7, #25
 8002ce0:	bf44      	itt	mi
 8002ce2:	2340      	movmi	r3, #64	; 0x40
 8002ce4:	f8c8 3008 	strmi.w	r3, [r8, #8]
 8002ce8:	07bb      	lsls	r3, r7, #30
 8002cea:	bf44      	itt	mi
 8002cec:	2302      	movmi	r3, #2
 8002cee:	f8c8 3008 	strmi.w	r3, [r8, #8]
 8002cf2:	0638      	lsls	r0, r7, #24
 8002cf4:	d542      	bpl.n	8002d7c <HAL_PCD_IRQHandler+0x42c>
 8002cf6:	e9d6 3114 	ldrd	r3, r1, [r6, #80]	; 0x50
 8002cfa:	4299      	cmp	r1, r3
 8002cfc:	d83e      	bhi.n	8002d7c <HAL_PCD_IRQHandler+0x42c>
 8002cfe:	1a5b      	subs	r3, r3, r1
 8002d00:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	428b      	cmp	r3, r1
 8002d06:	bf28      	it	cs
 8002d08:	460b      	movcs	r3, r1
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	f502 6310 	add.w	r3, r2, #2304	; 0x900
 8002d14:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8002d18:	9201      	str	r2, [sp, #4]
 8002d1a:	9303      	str	r3, [sp, #12]
 8002d1c:	9b03      	ldr	r3, [sp, #12]
 8002d1e:	9a02      	ldr	r2, [sp, #8]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	e9d6 7314 	ldrd	r7, r3, [r6, #80]	; 0x50
 8002d26:	b289      	uxth	r1, r1
 8002d28:	4291      	cmp	r1, r2
 8002d2a:	d325      	bcc.n	8002d78 <HAL_PCD_IRQHandler+0x428>
 8002d2c:	429f      	cmp	r7, r3
 8002d2e:	d80e      	bhi.n	8002d4e <HAL_PCD_IRQHandler+0x3fe>
 8002d30:	2101      	movs	r1, #1
 8002d32:	9b01      	ldr	r3, [sp, #4]
 8002d34:	f00a 020f 	and.w	r2, sl, #15
 8002d38:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8002d3c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	ea23 0302 	bic.w	r3, r3, r2
 8002d48:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8002d4c:	e016      	b.n	8002d7c <HAL_PCD_IRQHandler+0x42c>
 8002d4e:	1aff      	subs	r7, r7, r3
 8002d50:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002d52:	465a      	mov	r2, fp
 8002d54:	429f      	cmp	r7, r3
 8002d56:	bf28      	it	cs
 8002d58:	461f      	movcs	r7, r3
 8002d5a:	1cfb      	adds	r3, r7, #3
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8002d62:	b2bb      	uxth	r3, r7
 8002d64:	9801      	ldr	r0, [sp, #4]
 8002d66:	f001 f941 	bl	8003fec <USB_WritePacket>
 8002d6a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002d6c:	443b      	add	r3, r7
 8002d6e:	64b3      	str	r3, [r6, #72]	; 0x48
 8002d70:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002d72:	443b      	add	r3, r7
 8002d74:	6573      	str	r3, [r6, #84]	; 0x54
 8002d76:	e7d1      	b.n	8002d1c <HAL_PCD_IRQHandler+0x3cc>
 8002d78:	429f      	cmp	r7, r3
 8002d7a:	d9d9      	bls.n	8002d30 <HAL_PCD_IRQHandler+0x3e0>
 8002d7c:	f10a 0a01 	add.w	sl, sl, #1
 8002d80:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8002d84:	361c      	adds	r6, #28
 8002d86:	f108 0820 	add.w	r8, r8, #32
 8002d8a:	e642      	b.n	8002a12 <HAL_PCD_IRQHandler+0xc2>
 8002d8c:	6099      	str	r1, [r3, #8]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	3320      	adds	r3, #32
 8002d92:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002d96:	f843 2c20 	str.w	r2, [r3, #-32]
 8002d9a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002d9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002da2:	f843 2c20 	str.w	r2, [r3, #-32]
 8002da6:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
 8002daa:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8002dae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002db2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8002db6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8002dba:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002dbe:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8002dc2:	9a00      	ldr	r2, [sp, #0]
 8002dc4:	3201      	adds	r2, #1
 8002dc6:	9200      	str	r2, [sp, #0]
 8002dc8:	e660      	b.n	8002a8c <HAL_PCD_IRQHandler+0x13c>
 8002dca:	6973      	ldr	r3, [r6, #20]
 8002dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dd4:	6173      	str	r3, [r6, #20]
 8002dd6:	6933      	ldr	r3, [r6, #16]
 8002dd8:	f043 030b 	orr.w	r3, r3, #11
 8002ddc:	6133      	str	r3, [r6, #16]
 8002dde:	e66c      	b.n	8002aba <HAL_PCD_IRQHandler+0x16a>
 8002de0:	4f54300a 	.word	0x4f54300a
 8002de4:	4f54310a 	.word	0x4f54310a

08002de8 <HAL_PCD_SetAddress>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002dee:	4604      	mov	r4, r0
 8002df0:	2a01      	cmp	r2, #1
 8002df2:	d00b      	beq.n	8002e0c <HAL_PCD_SetAddress+0x24>
 8002df4:	2201      	movs	r2, #1
 8002df6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8002dfa:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
 8002dfe:	6800      	ldr	r0, [r0, #0]
 8002e00:	f001 fa2a 	bl	8004258 <USB_SetDevAddress>
 8002e04:	2000      	movs	r0, #0
 8002e06:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 8002e0a:	bd10      	pop	{r4, pc}
 8002e0c:	2002      	movs	r0, #2
 8002e0e:	e7fc      	b.n	8002e0a <HAL_PCD_SetAddress+0x22>

08002e10 <HAL_PCD_EP_Open>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	241c      	movs	r4, #28
 8002e14:	4605      	mov	r5, r0
 8002e16:	f001 000f 	and.w	r0, r1, #15
 8002e1a:	4344      	muls	r4, r0
 8002e1c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e20:	bf14      	ite	ne
 8002e22:	f104 013c 	addne.w	r1, r4, #60	; 0x3c
 8002e26:	f504 71fe 	addeq.w	r1, r4, #508	; 0x1fc
 8002e2a:	eb05 0604 	add.w	r6, r5, r4
 8002e2e:	bf17      	itett	ne
 8002e30:	2401      	movne	r4, #1
 8002e32:	2400      	moveq	r4, #0
 8002e34:	1949      	addne	r1, r1, r5
 8002e36:	f886 403d 	strbne.w	r4, [r6, #61]	; 0x3d
 8002e3a:	bf04      	itt	eq
 8002e3c:	1949      	addeq	r1, r1, r5
 8002e3e:	f886 41fd 	strbeq.w	r4, [r6, #509]	; 0x1fd
 8002e42:	608a      	str	r2, [r1, #8]
 8002e44:	784a      	ldrb	r2, [r1, #1]
 8002e46:	7008      	strb	r0, [r1, #0]
 8002e48:	70cb      	strb	r3, [r1, #3]
 8002e4a:	b102      	cbz	r2, 8002e4e <HAL_PCD_EP_Open+0x3e>
 8002e4c:	80c8      	strh	r0, [r1, #6]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	bf04      	itt	eq
 8002e52:	2300      	moveq	r3, #0
 8002e54:	710b      	strbeq	r3, [r1, #4]
 8002e56:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d009      	beq.n	8002e72 <HAL_PCD_EP_Open+0x62>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	6828      	ldr	r0, [r5, #0]
 8002e62:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
 8002e66:	f001 f821 	bl	8003eac <USB_ActivateEndpoint>
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	2002      	movs	r0, #2
 8002e74:	e7fc      	b.n	8002e70 <HAL_PCD_EP_Open+0x60>

08002e76 <HAL_PCD_EP_Receive>:
 8002e76:	b538      	push	{r3, r4, r5, lr}
 8002e78:	241c      	movs	r4, #28
 8002e7a:	f001 050f 	and.w	r5, r1, #15
 8002e7e:	436c      	muls	r4, r5
 8002e80:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 8002e84:	4404      	add	r4, r0
 8002e86:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	4401      	add	r1, r0
 8002e8e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
 8002e92:	6800      	ldr	r0, [r0, #0]
 8002e94:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 8002e98:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
 8002e9c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
 8002ea0:	b91d      	cbnz	r5, 8002eaa <HAL_PCD_EP_Receive+0x34>
 8002ea2:	f001 f841 	bl	8003f28 <USB_EP0StartXfer>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	bd38      	pop	{r3, r4, r5, pc}
 8002eaa:	f001 f8af 	bl	800400c <USB_EPStartXfer>
 8002eae:	e7fa      	b.n	8002ea6 <HAL_PCD_EP_Receive+0x30>

08002eb0 <HAL_PCD_EP_Transmit>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	241c      	movs	r4, #28
 8002eb4:	f001 050f 	and.w	r5, r1, #15
 8002eb8:	436c      	muls	r4, r5
 8002eba:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8002ebe:	4404      	add	r4, r0
 8002ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4401      	add	r1, r0
 8002eca:	64a2      	str	r2, [r4, #72]	; 0x48
 8002ecc:	6800      	ldr	r0, [r0, #0]
 8002ece:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002ed2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8002ed6:	b91d      	cbnz	r5, 8002ee0 <HAL_PCD_EP_Transmit+0x30>
 8002ed8:	f001 f826 	bl	8003f28 <USB_EP0StartXfer>
 8002edc:	2000      	movs	r0, #0
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	f001 f894 	bl	800400c <USB_EPStartXfer>
 8002ee4:	e7fa      	b.n	8002edc <HAL_PCD_EP_Transmit+0x2c>

08002ee6 <HAL_PCD_EP_SetStall>:
 8002ee6:	b538      	push	{r3, r4, r5, lr}
 8002ee8:	6843      	ldr	r3, [r0, #4]
 8002eea:	f001 050f 	and.w	r5, r1, #15
 8002eee:	429d      	cmp	r5, r3
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	d82b      	bhi.n	8002f4c <HAL_PCD_EP_SetStall+0x66>
 8002ef4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ef8:	f04f 031c 	mov.w	r3, #28
 8002efc:	d01d      	beq.n	8002f3a <HAL_PCD_EP_SetStall+0x54>
 8002efe:	2201      	movs	r2, #1
 8002f00:	436b      	muls	r3, r5
 8002f02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002f06:	4403      	add	r3, r0
 8002f08:	4401      	add	r1, r0
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f0e:	2301      	movs	r3, #1
 8002f10:	700d      	strb	r5, [r1, #0]
 8002f12:	708b      	strb	r3, [r1, #2]
 8002f14:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d019      	beq.n	8002f50 <HAL_PCD_EP_SetStall+0x6a>
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
 8002f22:	f001 f945 	bl	80041b0 <USB_EPSetStall>
 8002f26:	b925      	cbnz	r5, 8002f32 <HAL_PCD_EP_SetStall+0x4c>
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002f2e:	f001 fa03 	bl	8004338 <USB_EP0_OutStart>
 8002f32:	2000      	movs	r0, #0
 8002f34:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	434b      	muls	r3, r1
 8002f3e:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8002f42:	4403      	add	r3, r0
 8002f44:	4401      	add	r1, r0
 8002f46:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8002f4a:	e7e0      	b.n	8002f0e <HAL_PCD_EP_SetStall+0x28>
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7f3      	b.n	8002f38 <HAL_PCD_EP_SetStall+0x52>
 8002f50:	2002      	movs	r0, #2
 8002f52:	e7f1      	b.n	8002f38 <HAL_PCD_EP_SetStall+0x52>

08002f54 <HAL_PCD_EP_ClrStall>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	6843      	ldr	r3, [r0, #4]
 8002f58:	f001 020f 	and.w	r2, r1, #15
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	4604      	mov	r4, r0
 8002f60:	d825      	bhi.n	8002fae <HAL_PCD_EP_ClrStall+0x5a>
 8002f62:	231c      	movs	r3, #28
 8002f64:	4353      	muls	r3, r2
 8002f66:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f6a:	bf14      	ite	ne
 8002f6c:	f103 013c 	addne.w	r1, r3, #60	; 0x3c
 8002f70:	f503 71fe 	addeq.w	r1, r3, #508	; 0x1fc
 8002f74:	4418      	add	r0, r3
 8002f76:	f04f 0500 	mov.w	r5, #0
 8002f7a:	bf15      	itete	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	1909      	addne	r1, r1, r4
 8002f82:	1909      	addeq	r1, r1, r4
 8002f84:	bf14      	ite	ne
 8002f86:	f880 303d 	strbne.w	r3, [r0, #61]	; 0x3d
 8002f8a:	f880 31fd 	strbeq.w	r3, [r0, #509]	; 0x1fd
 8002f8e:	708d      	strb	r5, [r1, #2]
 8002f90:	700a      	strb	r2, [r1, #0]
 8002f92:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d00b      	beq.n	8002fb2 <HAL_PCD_EP_ClrStall+0x5e>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
 8002fa2:	f001 f930 	bl	8004206 <USB_EPClearStall>
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
 8002fac:	bd38      	pop	{r3, r4, r5, pc}
 8002fae:	2001      	movs	r0, #1
 8002fb0:	e7fc      	b.n	8002fac <HAL_PCD_EP_ClrStall+0x58>
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	e7fa      	b.n	8002fac <HAL_PCD_EP_ClrStall+0x58>

08002fb6 <HAL_PCDEx_SetTxFiFo>:
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	0412      	lsls	r2, r2, #16
 8002fbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002fbe:	b919      	cbnz	r1, 8002fc8 <HAL_PCDEx_SetTxFiFo+0x12>
 8002fc0:	4322      	orrs	r2, r4
 8002fc2:	6282      	str	r2, [r0, #40]	; 0x28
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fca:	1e4d      	subs	r5, r1, #1
 8002fcc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	1c5e      	adds	r6, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	429d      	cmp	r5, r3
 8002fd8:	d805      	bhi.n	8002fe6 <HAL_PCDEx_SetTxFiFo+0x30>
 8002fda:	313f      	adds	r1, #63	; 0x3f
 8002fdc:	4322      	orrs	r2, r4
 8002fde:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002fe2:	6042      	str	r2, [r0, #4]
 8002fe4:	e7ee      	b.n	8002fc4 <HAL_PCDEx_SetTxFiFo+0xe>
 8002fe6:	3340      	adds	r3, #64	; 0x40
 8002fe8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8002ff2:	4633      	mov	r3, r6
 8002ff4:	e7ed      	b.n	8002fd2 <HAL_PCDEx_SetTxFiFo+0x1c>

08002ff6 <HAL_PCDEx_SetRxFiFo>:
 8002ff6:	6803      	ldr	r3, [r0, #0]
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	6259      	str	r1, [r3, #36]	; 0x24
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_RCC_OscConfig>:
 8003000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003004:	4604      	mov	r4, r0
 8003006:	2800      	cmp	r0, #0
 8003008:	d02b      	beq.n	8003062 <HAL_RCC_OscConfig+0x62>
 800300a:	6803      	ldr	r3, [r0, #0]
 800300c:	07db      	lsls	r3, r3, #31
 800300e:	d414      	bmi.n	800303a <HAL_RCC_OscConfig+0x3a>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	079f      	lsls	r7, r3, #30
 8003014:	d462      	bmi.n	80030dc <HAL_RCC_OscConfig+0xdc>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	0719      	lsls	r1, r3, #28
 800301a:	f100 8099 	bmi.w	8003150 <HAL_RCC_OscConfig+0x150>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	075a      	lsls	r2, r3, #29
 8003022:	f100 80c5 	bmi.w	80031b0 <HAL_RCC_OscConfig+0x1b0>
 8003026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003028:	2a00      	cmp	r2, #0
 800302a:	f040 8131 	bne.w	8003290 <HAL_RCC_OscConfig+0x290>
 800302e:	6a23      	ldr	r3, [r4, #32]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 8185 	bne.w	8003340 <HAL_RCC_OscConfig+0x340>
 8003036:	2000      	movs	r0, #0
 8003038:	e029      	b.n	800308e <HAL_RCC_OscConfig+0x8e>
 800303a:	4d91      	ldr	r5, [pc, #580]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800303c:	686b      	ldr	r3, [r5, #4]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b04      	cmp	r3, #4
 8003044:	d007      	beq.n	8003056 <HAL_RCC_OscConfig+0x56>
 8003046:	686b      	ldr	r3, [r5, #4]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b08      	cmp	r3, #8
 800304e:	d10a      	bne.n	8003066 <HAL_RCC_OscConfig+0x66>
 8003050:	686b      	ldr	r3, [r5, #4]
 8003052:	03de      	lsls	r6, r3, #15
 8003054:	d507      	bpl.n	8003066 <HAL_RCC_OscConfig+0x66>
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	039d      	lsls	r5, r3, #14
 800305a:	d5d9      	bpl.n	8003010 <HAL_RCC_OscConfig+0x10>
 800305c:	68a3      	ldr	r3, [r4, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1d6      	bne.n	8003010 <HAL_RCC_OscConfig+0x10>
 8003062:	2001      	movs	r0, #1
 8003064:	e013      	b.n	800308e <HAL_RCC_OscConfig+0x8e>
 8003066:	68a3      	ldr	r3, [r4, #8]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x94>
 800306e:	682b      	ldr	r3, [r5, #0]
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	602b      	str	r3, [r5, #0]
 8003076:	f7fe fc0d 	bl	8001894 <HAL_GetTick>
 800307a:	4606      	mov	r6, r0
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	0398      	lsls	r0, r3, #14
 8003080:	d4c6      	bmi.n	8003010 <HAL_RCC_OscConfig+0x10>
 8003082:	f7fe fc07 	bl	8001894 <HAL_GetTick>
 8003086:	1b80      	subs	r0, r0, r6
 8003088:	2864      	cmp	r0, #100	; 0x64
 800308a:	d9f7      	bls.n	800307c <HAL_RCC_OscConfig+0x7c>
 800308c:	2003      	movs	r0, #3
 800308e:	b002      	add	sp, #8
 8003090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003094:	b99b      	cbnz	r3, 80030be <HAL_RCC_OscConfig+0xbe>
 8003096:	682b      	ldr	r3, [r5, #0]
 8003098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	f7fe fbf5 	bl	8001894 <HAL_GetTick>
 80030aa:	4606      	mov	r6, r0
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	0399      	lsls	r1, r3, #14
 80030b0:	d5ae      	bpl.n	8003010 <HAL_RCC_OscConfig+0x10>
 80030b2:	f7fe fbef 	bl	8001894 <HAL_GetTick>
 80030b6:	1b80      	subs	r0, r0, r6
 80030b8:	2864      	cmp	r0, #100	; 0x64
 80030ba:	d9f7      	bls.n	80030ac <HAL_RCC_OscConfig+0xac>
 80030bc:	e7e6      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 80030be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c2:	682b      	ldr	r3, [r5, #0]
 80030c4:	d103      	bne.n	80030ce <HAL_RCC_OscConfig+0xce>
 80030c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	e7cf      	b.n	800306e <HAL_RCC_OscConfig+0x6e>
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030da:	e7cb      	b.n	8003074 <HAL_RCC_OscConfig+0x74>
 80030dc:	4d68      	ldr	r5, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030de:	686b      	ldr	r3, [r5, #4]
 80030e0:	f013 0f0c 	tst.w	r3, #12
 80030e4:	d007      	beq.n	80030f6 <HAL_RCC_OscConfig+0xf6>
 80030e6:	686b      	ldr	r3, [r5, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d110      	bne.n	8003112 <HAL_RCC_OscConfig+0x112>
 80030f0:	686b      	ldr	r3, [r5, #4]
 80030f2:	03da      	lsls	r2, r3, #15
 80030f4:	d40d      	bmi.n	8003112 <HAL_RCC_OscConfig+0x112>
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	079b      	lsls	r3, r3, #30
 80030fa:	d502      	bpl.n	8003102 <HAL_RCC_OscConfig+0x102>
 80030fc:	6963      	ldr	r3, [r4, #20]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d1af      	bne.n	8003062 <HAL_RCC_OscConfig+0x62>
 8003102:	682b      	ldr	r3, [r5, #0]
 8003104:	69a2      	ldr	r2, [r4, #24]
 8003106:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800310a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800310e:	602b      	str	r3, [r5, #0]
 8003110:	e781      	b.n	8003016 <HAL_RCC_OscConfig+0x16>
 8003112:	6962      	ldr	r2, [r4, #20]
 8003114:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCC_OscConfig+0x284>)
 8003116:	b16a      	cbz	r2, 8003134 <HAL_RCC_OscConfig+0x134>
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f7fe fbba 	bl	8001894 <HAL_GetTick>
 8003120:	4606      	mov	r6, r0
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	079f      	lsls	r7, r3, #30
 8003126:	d4ec      	bmi.n	8003102 <HAL_RCC_OscConfig+0x102>
 8003128:	f7fe fbb4 	bl	8001894 <HAL_GetTick>
 800312c:	1b80      	subs	r0, r0, r6
 800312e:	2802      	cmp	r0, #2
 8003130:	d9f7      	bls.n	8003122 <HAL_RCC_OscConfig+0x122>
 8003132:	e7ab      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f7fe fbad 	bl	8001894 <HAL_GetTick>
 800313a:	4606      	mov	r6, r0
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	0798      	lsls	r0, r3, #30
 8003140:	f57f af69 	bpl.w	8003016 <HAL_RCC_OscConfig+0x16>
 8003144:	f7fe fba6 	bl	8001894 <HAL_GetTick>
 8003148:	1b80      	subs	r0, r0, r6
 800314a:	2802      	cmp	r0, #2
 800314c:	d9f6      	bls.n	800313c <HAL_RCC_OscConfig+0x13c>
 800314e:	e79d      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003150:	69e2      	ldr	r2, [r4, #28]
 8003152:	4e4b      	ldr	r6, [pc, #300]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_RCC_OscConfig+0x284>)
 8003156:	b1e2      	cbz	r2, 8003192 <HAL_RCC_OscConfig+0x192>
 8003158:	2201      	movs	r2, #1
 800315a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800315e:	f7fe fb99 	bl	8001894 <HAL_GetTick>
 8003162:	4605      	mov	r5, r0
 8003164:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003166:	079b      	lsls	r3, r3, #30
 8003168:	d50d      	bpl.n	8003186 <HAL_RCC_OscConfig+0x186>
 800316a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x288>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fbb3 f3f2 	udiv	r3, r3, r2
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	bf00      	nop
 800317a:	9b01      	ldr	r3, [sp, #4]
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <HAL_RCC_OscConfig+0x178>
 8003184:	e74b      	b.n	800301e <HAL_RCC_OscConfig+0x1e>
 8003186:	f7fe fb85 	bl	8001894 <HAL_GetTick>
 800318a:	1b40      	subs	r0, r0, r5
 800318c:	2802      	cmp	r0, #2
 800318e:	d9e9      	bls.n	8003164 <HAL_RCC_OscConfig+0x164>
 8003190:	e77c      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003192:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8003196:	f7fe fb7d 	bl	8001894 <HAL_GetTick>
 800319a:	4605      	mov	r5, r0
 800319c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800319e:	079f      	lsls	r7, r3, #30
 80031a0:	f57f af3d 	bpl.w	800301e <HAL_RCC_OscConfig+0x1e>
 80031a4:	f7fe fb76 	bl	8001894 <HAL_GetTick>
 80031a8:	1b40      	subs	r0, r0, r5
 80031aa:	2802      	cmp	r0, #2
 80031ac:	d9f6      	bls.n	800319c <HAL_RCC_OscConfig+0x19c>
 80031ae:	e76d      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 80031b0:	4d33      	ldr	r5, [pc, #204]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80031b2:	69eb      	ldr	r3, [r5, #28]
 80031b4:	00de      	lsls	r6, r3, #3
 80031b6:	d424      	bmi.n	8003202 <HAL_RCC_OscConfig+0x202>
 80031b8:	2701      	movs	r7, #1
 80031ba:	69eb      	ldr	r3, [r5, #28]
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	61eb      	str	r3, [r5, #28]
 80031c2:	69eb      	ldr	r3, [r5, #28]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	9b00      	ldr	r3, [sp, #0]
 80031cc:	4e2f      	ldr	r6, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x28c>)
 80031ce:	6833      	ldr	r3, [r6, #0]
 80031d0:	05d8      	lsls	r0, r3, #23
 80031d2:	d518      	bpl.n	8003206 <HAL_RCC_OscConfig+0x206>
 80031d4:	6923      	ldr	r3, [r4, #16]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d126      	bne.n	8003228 <HAL_RCC_OscConfig+0x228>
 80031da:	6a2b      	ldr	r3, [r5, #32]
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	622b      	str	r3, [r5, #32]
 80031e2:	f7fe fb57 	bl	8001894 <HAL_GetTick>
 80031e6:	f241 3888 	movw	r8, #5000	; 0x1388
 80031ea:	4606      	mov	r6, r0
 80031ec:	6a2b      	ldr	r3, [r5, #32]
 80031ee:	079a      	lsls	r2, r3, #30
 80031f0:	d53f      	bpl.n	8003272 <HAL_RCC_OscConfig+0x272>
 80031f2:	2f00      	cmp	r7, #0
 80031f4:	f43f af17 	beq.w	8003026 <HAL_RCC_OscConfig+0x26>
 80031f8:	69eb      	ldr	r3, [r5, #28]
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fe:	61eb      	str	r3, [r5, #28]
 8003200:	e711      	b.n	8003026 <HAL_RCC_OscConfig+0x26>
 8003202:	2700      	movs	r7, #0
 8003204:	e7e2      	b.n	80031cc <HAL_RCC_OscConfig+0x1cc>
 8003206:	6833      	ldr	r3, [r6, #0]
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6033      	str	r3, [r6, #0]
 800320e:	f7fe fb41 	bl	8001894 <HAL_GetTick>
 8003212:	4680      	mov	r8, r0
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	05d9      	lsls	r1, r3, #23
 8003218:	d4dc      	bmi.n	80031d4 <HAL_RCC_OscConfig+0x1d4>
 800321a:	f7fe fb3b 	bl	8001894 <HAL_GetTick>
 800321e:	eba0 0008 	sub.w	r0, r0, r8
 8003222:	2864      	cmp	r0, #100	; 0x64
 8003224:	d9f6      	bls.n	8003214 <HAL_RCC_OscConfig+0x214>
 8003226:	e731      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003228:	b9ab      	cbnz	r3, 8003256 <HAL_RCC_OscConfig+0x256>
 800322a:	6a2b      	ldr	r3, [r5, #32]
 800322c:	f241 3888 	movw	r8, #5000	; 0x1388
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	622b      	str	r3, [r5, #32]
 8003236:	6a2b      	ldr	r3, [r5, #32]
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	622b      	str	r3, [r5, #32]
 800323e:	f7fe fb29 	bl	8001894 <HAL_GetTick>
 8003242:	4606      	mov	r6, r0
 8003244:	6a2b      	ldr	r3, [r5, #32]
 8003246:	079b      	lsls	r3, r3, #30
 8003248:	d5d3      	bpl.n	80031f2 <HAL_RCC_OscConfig+0x1f2>
 800324a:	f7fe fb23 	bl	8001894 <HAL_GetTick>
 800324e:	1b80      	subs	r0, r0, r6
 8003250:	4540      	cmp	r0, r8
 8003252:	d9f7      	bls.n	8003244 <HAL_RCC_OscConfig+0x244>
 8003254:	e71a      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003256:	2b05      	cmp	r3, #5
 8003258:	6a2b      	ldr	r3, [r5, #32]
 800325a:	d103      	bne.n	8003264 <HAL_RCC_OscConfig+0x264>
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	622b      	str	r3, [r5, #32]
 8003262:	e7ba      	b.n	80031da <HAL_RCC_OscConfig+0x1da>
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	622b      	str	r3, [r5, #32]
 800326a:	6a2b      	ldr	r3, [r5, #32]
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	e7b6      	b.n	80031e0 <HAL_RCC_OscConfig+0x1e0>
 8003272:	f7fe fb0f 	bl	8001894 <HAL_GetTick>
 8003276:	1b80      	subs	r0, r0, r6
 8003278:	4540      	cmp	r0, r8
 800327a:	d9b7      	bls.n	80031ec <HAL_RCC_OscConfig+0x1ec>
 800327c:	e706      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	42420000 	.word	0x42420000
 8003288:	20000048 	.word	0x20000048
 800328c:	40007000 	.word	0x40007000
 8003290:	4d58      	ldr	r5, [pc, #352]	; (80033f4 <HAL_RCC_OscConfig+0x3f4>)
 8003292:	686b      	ldr	r3, [r5, #4]
 8003294:	03d8      	lsls	r0, r3, #15
 8003296:	d508      	bpl.n	80032aa <HAL_RCC_OscConfig+0x2aa>
 8003298:	686b      	ldr	r3, [r5, #4]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d103      	bne.n	80032aa <HAL_RCC_OscConfig+0x2aa>
 80032a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80032a4:	03d9      	lsls	r1, r3, #15
 80032a6:	f53f aedc 	bmi.w	8003062 <HAL_RCC_OscConfig+0x62>
 80032aa:	2a02      	cmp	r2, #2
 80032ac:	d134      	bne.n	8003318 <HAL_RCC_OscConfig+0x318>
 80032ae:	682b      	ldr	r3, [r5, #0]
 80032b0:	00da      	lsls	r2, r3, #3
 80032b2:	d506      	bpl.n	80032c2 <HAL_RCC_OscConfig+0x2c2>
 80032b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80032b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	4293      	cmp	r3, r2
 80032be:	f47f aed0 	bne.w	8003062 <HAL_RCC_OscConfig+0x62>
 80032c2:	2200      	movs	r2, #0
 80032c4:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <HAL_RCC_OscConfig+0x3f8>)
 80032c6:	669a      	str	r2, [r3, #104]	; 0x68
 80032c8:	f7fe fae4 	bl	8001894 <HAL_GetTick>
 80032cc:	4606      	mov	r6, r0
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	d41b      	bmi.n	800330c <HAL_RCC_OscConfig+0x30c>
 80032d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80032d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80032d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032dc:	4313      	orrs	r3, r2
 80032de:	62eb      	str	r3, [r5, #44]	; 0x2c
 80032e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80032e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032e8:	4313      	orrs	r3, r2
 80032ea:	2201      	movs	r2, #1
 80032ec:	62eb      	str	r3, [r5, #44]	; 0x2c
 80032ee:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_RCC_OscConfig+0x3f8>)
 80032f0:	669a      	str	r2, [r3, #104]	; 0x68
 80032f2:	f7fe facf 	bl	8001894 <HAL_GetTick>
 80032f6:	4606      	mov	r6, r0
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	011f      	lsls	r7, r3, #4
 80032fc:	f53f ae97 	bmi.w	800302e <HAL_RCC_OscConfig+0x2e>
 8003300:	f7fe fac8 	bl	8001894 <HAL_GetTick>
 8003304:	1b80      	subs	r0, r0, r6
 8003306:	2864      	cmp	r0, #100	; 0x64
 8003308:	d9f6      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2f8>
 800330a:	e6bf      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 800330c:	f7fe fac2 	bl	8001894 <HAL_GetTick>
 8003310:	1b80      	subs	r0, r0, r6
 8003312:	2864      	cmp	r0, #100	; 0x64
 8003314:	d9db      	bls.n	80032ce <HAL_RCC_OscConfig+0x2ce>
 8003316:	e6b9      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003318:	2200      	movs	r2, #0
 800331a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_RCC_OscConfig+0x3f8>)
 8003324:	669a      	str	r2, [r3, #104]	; 0x68
 8003326:	f7fe fab5 	bl	8001894 <HAL_GetTick>
 800332a:	4606      	mov	r6, r0
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	0118      	lsls	r0, r3, #4
 8003330:	f57f ae7d 	bpl.w	800302e <HAL_RCC_OscConfig+0x2e>
 8003334:	f7fe faae 	bl	8001894 <HAL_GetTick>
 8003338:	1b80      	subs	r0, r0, r6
 800333a:	2864      	cmp	r0, #100	; 0x64
 800333c:	d9f6      	bls.n	800332c <HAL_RCC_OscConfig+0x32c>
 800333e:	e6a5      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 8003340:	4d2c      	ldr	r5, [pc, #176]	; (80033f4 <HAL_RCC_OscConfig+0x3f4>)
 8003342:	686a      	ldr	r2, [r5, #4]
 8003344:	f002 020c 	and.w	r2, r2, #12
 8003348:	2a08      	cmp	r2, #8
 800334a:	d042      	beq.n	80033d2 <HAL_RCC_OscConfig+0x3d2>
 800334c:	2200      	movs	r2, #0
 800334e:	2b02      	cmp	r3, #2
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_RCC_OscConfig+0x3f8>)
 8003352:	661a      	str	r2, [r3, #96]	; 0x60
 8003354:	d130      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3b8>
 8003356:	f7fe fa9d 	bl	8001894 <HAL_GetTick>
 800335a:	4606      	mov	r6, r0
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	0199      	lsls	r1, r3, #6
 8003360:	d424      	bmi.n	80033ac <HAL_RCC_OscConfig+0x3ac>
 8003362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d109      	bne.n	800337e <HAL_RCC_OscConfig+0x37e>
 800336a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800336c:	6861      	ldr	r1, [r4, #4]
 800336e:	430a      	orrs	r2, r1
 8003370:	62ea      	str	r2, [r5, #44]	; 0x2c
 8003372:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003374:	68e1      	ldr	r1, [r4, #12]
 8003376:	f022 020f 	bic.w	r2, r2, #15
 800337a:	430a      	orrs	r2, r1
 800337c:	62ea      	str	r2, [r5, #44]	; 0x2c
 800337e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003380:	686a      	ldr	r2, [r5, #4]
 8003382:	430b      	orrs	r3, r1
 8003384:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003388:	4313      	orrs	r3, r2
 800338a:	2201      	movs	r2, #1
 800338c:	606b      	str	r3, [r5, #4]
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_RCC_OscConfig+0x3f8>)
 8003390:	661a      	str	r2, [r3, #96]	; 0x60
 8003392:	f7fe fa7f 	bl	8001894 <HAL_GetTick>
 8003396:	4604      	mov	r4, r0
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	019a      	lsls	r2, r3, #6
 800339c:	f53f ae4b 	bmi.w	8003036 <HAL_RCC_OscConfig+0x36>
 80033a0:	f7fe fa78 	bl	8001894 <HAL_GetTick>
 80033a4:	1b00      	subs	r0, r0, r4
 80033a6:	2802      	cmp	r0, #2
 80033a8:	d9f6      	bls.n	8003398 <HAL_RCC_OscConfig+0x398>
 80033aa:	e66f      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 80033ac:	f7fe fa72 	bl	8001894 <HAL_GetTick>
 80033b0:	1b80      	subs	r0, r0, r6
 80033b2:	2802      	cmp	r0, #2
 80033b4:	d9d2      	bls.n	800335c <HAL_RCC_OscConfig+0x35c>
 80033b6:	e669      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 80033b8:	f7fe fa6c 	bl	8001894 <HAL_GetTick>
 80033bc:	4604      	mov	r4, r0
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	f57f ae38 	bpl.w	8003036 <HAL_RCC_OscConfig+0x36>
 80033c6:	f7fe fa65 	bl	8001894 <HAL_GetTick>
 80033ca:	1b00      	subs	r0, r0, r4
 80033cc:	2802      	cmp	r0, #2
 80033ce:	d9f6      	bls.n	80033be <HAL_RCC_OscConfig+0x3be>
 80033d0:	e65c      	b.n	800308c <HAL_RCC_OscConfig+0x8c>
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f43f ae45 	beq.w	8003062 <HAL_RCC_OscConfig+0x62>
 80033d8:	686b      	ldr	r3, [r5, #4]
 80033da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033dc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80033e0:	4291      	cmp	r1, r2
 80033e2:	f47f ae3e 	bne.w	8003062 <HAL_RCC_OscConfig+0x62>
 80033e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f43f ae22 	beq.w	8003036 <HAL_RCC_OscConfig+0x36>
 80033f2:	e636      	b.n	8003062 <HAL_RCC_OscConfig+0x62>
 80033f4:	40021000 	.word	0x40021000
 80033f8:	42420000 	.word	0x42420000

080033fc <HAL_RCC_GetSysClockFreq>:
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	466a      	mov	r2, sp
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003404:	f103 0508 	add.w	r5, r3, #8
 8003408:	4614      	mov	r4, r2
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	3308      	adds	r3, #8
 8003410:	c403      	stmia	r4!, {r0, r1}
 8003412:	42ab      	cmp	r3, r5
 8003414:	4622      	mov	r2, r4
 8003416:	d1f7      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0xc>
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	889b      	ldrh	r3, [r3, #4]
 800341c:	6020      	str	r0, [r4, #0]
 800341e:	80a3      	strh	r3, [r4, #4]
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003422:	ac04      	add	r4, sp, #16
 8003424:	f103 0510 	add.w	r5, r3, #16
 8003428:	4622      	mov	r2, r4
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	3308      	adds	r3, #8
 8003430:	c203      	stmia	r2!, {r0, r1}
 8003432:	42ab      	cmp	r3, r5
 8003434:	4614      	mov	r4, r2
 8003436:	d1f7      	bne.n	8003428 <HAL_RCC_GetSysClockFreq+0x2c>
 8003438:	4f1f      	ldr	r7, [pc, #124]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f003 020c 	and.w	r2, r3, #12
 8003440:	2a08      	cmp	r2, #8
 8003442:	d132      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0xae>
 8003444:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003448:	3220      	adds	r2, #32
 800344a:	446a      	add	r2, sp
 800344c:	03db      	lsls	r3, r3, #15
 800344e:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 8003452:	d527      	bpl.n	80034a4 <HAL_RCC_GetSysClockFreq+0xa8>
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	3320      	adds	r3, #32
 800345e:	446b      	add	r3, sp
 8003460:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003464:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003468:	4c14      	ldr	r4, [pc, #80]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800346a:	d016      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x9e>
 800346c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800346e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003470:	f3c6 1603 	ubfx	r6, r6, #4, #4
 8003474:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8003478:	3002      	adds	r0, #2
 800347a:	fba0 0705 	umull	r0, r7, r0, r5
 800347e:	fba0 0104 	umull	r0, r1, r0, r4
 8003482:	3601      	adds	r6, #1
 8003484:	fba6 2303 	umull	r2, r3, r6, r3
 8003488:	fb04 1107 	mla	r1, r4, r7, r1
 800348c:	f7fd fb7c 	bl	8000b88 <__aeabi_uldivmod>
 8003490:	2d0d      	cmp	r5, #13
 8003492:	d100      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x9a>
 8003494:	0840      	lsrs	r0, r0, #1
 8003496:	b009      	add	sp, #36	; 0x24
 8003498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349a:	fb04 f005 	mul.w	r0, r4, r5
 800349e:	fbb0 f0f3 	udiv	r0, r0, r3
 80034a2:	e7f5      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x94>
 80034a4:	4806      	ldr	r0, [pc, #24]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034a6:	4368      	muls	r0, r5
 80034a8:	e7f5      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x9a>
 80034aa:	4804      	ldr	r0, [pc, #16]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc0>)
 80034ac:	e7f3      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x9a>
 80034ae:	bf00      	nop
 80034b0:	08010a5c 	.word	0x08010a5c
 80034b4:	08010c0e 	.word	0x08010c0e
 80034b8:	40021000 	.word	0x40021000
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	003d0900 	.word	0x003d0900

080034c4 <HAL_RCC_ClockConfig>:
 80034c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c8:	460d      	mov	r5, r1
 80034ca:	4604      	mov	r4, r0
 80034cc:	b910      	cbnz	r0, 80034d4 <HAL_RCC_ClockConfig+0x10>
 80034ce:	2001      	movs	r0, #1
 80034d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d4:	4a44      	ldr	r2, [pc, #272]	; (80035e8 <HAL_RCC_ClockConfig+0x124>)
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	428b      	cmp	r3, r1
 80034de:	d328      	bcc.n	8003532 <HAL_RCC_ClockConfig+0x6e>
 80034e0:	6821      	ldr	r1, [r4, #0]
 80034e2:	078e      	lsls	r6, r1, #30
 80034e4:	d430      	bmi.n	8003548 <HAL_RCC_ClockConfig+0x84>
 80034e6:	07ca      	lsls	r2, r1, #31
 80034e8:	d443      	bmi.n	8003572 <HAL_RCC_ClockConfig+0xae>
 80034ea:	4a3f      	ldr	r2, [pc, #252]	; (80035e8 <HAL_RCC_ClockConfig+0x124>)
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	42ab      	cmp	r3, r5
 80034f4:	d865      	bhi.n	80035c2 <HAL_RCC_ClockConfig+0xfe>
 80034f6:	6822      	ldr	r2, [r4, #0]
 80034f8:	4d3c      	ldr	r5, [pc, #240]	; (80035ec <HAL_RCC_ClockConfig+0x128>)
 80034fa:	f012 0f04 	tst.w	r2, #4
 80034fe:	d16c      	bne.n	80035da <HAL_RCC_ClockConfig+0x116>
 8003500:	0713      	lsls	r3, r2, #28
 8003502:	d506      	bpl.n	8003512 <HAL_RCC_ClockConfig+0x4e>
 8003504:	686b      	ldr	r3, [r5, #4]
 8003506:	6922      	ldr	r2, [r4, #16]
 8003508:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800350c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003510:	606b      	str	r3, [r5, #4]
 8003512:	f7ff ff73 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 8003516:	686b      	ldr	r3, [r5, #4]
 8003518:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <HAL_RCC_ClockConfig+0x12c>)
 800351a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	40d8      	lsrs	r0, r3
 8003522:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <HAL_RCC_ClockConfig+0x130>)
 8003524:	6018      	str	r0, [r3, #0]
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_ClockConfig+0x134>)
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	f7fe f971 	bl	8001810 <HAL_InitTick>
 800352e:	2000      	movs	r0, #0
 8003530:	e7ce      	b.n	80034d0 <HAL_RCC_ClockConfig+0xc>
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	430b      	orrs	r3, r1
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	428b      	cmp	r3, r1
 8003544:	d1c3      	bne.n	80034ce <HAL_RCC_ClockConfig+0xa>
 8003546:	e7cb      	b.n	80034e0 <HAL_RCC_ClockConfig+0x1c>
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_ClockConfig+0x128>)
 800354a:	f011 0f04 	tst.w	r1, #4
 800354e:	bf1e      	ittt	ne
 8003550:	685a      	ldrne	r2, [r3, #4]
 8003552:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003556:	605a      	strne	r2, [r3, #4]
 8003558:	0708      	lsls	r0, r1, #28
 800355a:	bf42      	ittt	mi
 800355c:	685a      	ldrmi	r2, [r3, #4]
 800355e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003562:	605a      	strmi	r2, [r3, #4]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68a0      	ldr	r0, [r4, #8]
 8003568:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800356c:	4302      	orrs	r2, r0
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	e7b9      	b.n	80034e6 <HAL_RCC_ClockConfig+0x22>
 8003572:	6862      	ldr	r2, [r4, #4]
 8003574:	4e1d      	ldr	r6, [pc, #116]	; (80035ec <HAL_RCC_ClockConfig+0x128>)
 8003576:	2a01      	cmp	r2, #1
 8003578:	6833      	ldr	r3, [r6, #0]
 800357a:	d11a      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xee>
 800357c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003580:	d0a5      	beq.n	80034ce <HAL_RCC_ClockConfig+0xa>
 8003582:	6873      	ldr	r3, [r6, #4]
 8003584:	f241 3888 	movw	r8, #5000	; 0x1388
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	4313      	orrs	r3, r2
 800358e:	6073      	str	r3, [r6, #4]
 8003590:	f7fe f980 	bl	8001894 <HAL_GetTick>
 8003594:	4607      	mov	r7, r0
 8003596:	6873      	ldr	r3, [r6, #4]
 8003598:	6862      	ldr	r2, [r4, #4]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035a2:	d0a2      	beq.n	80034ea <HAL_RCC_ClockConfig+0x26>
 80035a4:	f7fe f976 	bl	8001894 <HAL_GetTick>
 80035a8:	1bc0      	subs	r0, r0, r7
 80035aa:	4540      	cmp	r0, r8
 80035ac:	d9f3      	bls.n	8003596 <HAL_RCC_ClockConfig+0xd2>
 80035ae:	2003      	movs	r0, #3
 80035b0:	e78e      	b.n	80034d0 <HAL_RCC_ClockConfig+0xc>
 80035b2:	2a02      	cmp	r2, #2
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
 80035b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035ba:	e7e1      	b.n	8003580 <HAL_RCC_ClockConfig+0xbc>
 80035bc:	f013 0f02 	tst.w	r3, #2
 80035c0:	e7de      	b.n	8003580 <HAL_RCC_ClockConfig+0xbc>
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	f023 0307 	bic.w	r3, r3, #7
 80035c8:	432b      	orrs	r3, r5
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	42ab      	cmp	r3, r5
 80035d4:	f47f af7b 	bne.w	80034ce <HAL_RCC_ClockConfig+0xa>
 80035d8:	e78d      	b.n	80034f6 <HAL_RCC_ClockConfig+0x32>
 80035da:	686b      	ldr	r3, [r5, #4]
 80035dc:	68e1      	ldr	r1, [r4, #12]
 80035de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e2:	430b      	orrs	r3, r1
 80035e4:	606b      	str	r3, [r5, #4]
 80035e6:	e78b      	b.n	8003500 <HAL_RCC_ClockConfig+0x3c>
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08010bf6 	.word	0x08010bf6
 80035f4:	20000048 	.word	0x20000048
 80035f8:	20000050 	.word	0x20000050

080035fc <HAL_RCC_GetHCLKFreq>:
 80035fc:	4b01      	ldr	r3, [pc, #4]	; (8003604 <HAL_RCC_GetHCLKFreq+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000048 	.word	0x20000048

08003608 <HAL_RCC_GetPCLK1Freq>:
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_RCC_GetPCLK1Freq+0x14>)
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x18>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	4a03      	ldr	r2, [pc, #12]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003616:	6810      	ldr	r0, [r2, #0]
 8003618:	40d8      	lsrs	r0, r3
 800361a:	4770      	bx	lr
 800361c:	40021000 	.word	0x40021000
 8003620:	08010c06 	.word	0x08010c06
 8003624:	20000048 	.word	0x20000048

08003628 <HAL_RCCEx_PeriphCLKConfig>:
 8003628:	6803      	ldr	r3, [r0, #0]
 800362a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800362e:	f013 0f01 	tst.w	r3, #1
 8003632:	4605      	mov	r5, r0
 8003634:	4c58      	ldr	r4, [pc, #352]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8003636:	d01f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003638:	69e3      	ldr	r3, [r4, #28]
 800363a:	00d9      	lsls	r1, r3, #3
 800363c:	d447      	bmi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800363e:	2601      	movs	r6, #1
 8003640:	69e3      	ldr	r3, [r4, #28]
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	61e3      	str	r3, [r4, #28]
 8003648:	69e3      	ldr	r3, [r4, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	4f52      	ldr	r7, [pc, #328]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	05da      	lsls	r2, r3, #23
 8003658:	d53b      	bpl.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800365a:	6a23      	ldr	r3, [r4, #32]
 800365c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003660:	d14b      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003662:	6a23      	ldr	r3, [r4, #32]
 8003664:	686a      	ldr	r2, [r5, #4]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	4313      	orrs	r3, r2
 800366c:	6223      	str	r3, [r4, #32]
 800366e:	b11e      	cbz	r6, 8003678 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003670:	69e3      	ldr	r3, [r4, #28]
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	61e3      	str	r3, [r4, #28]
 8003678:	682a      	ldr	r2, [r5, #0]
 800367a:	0791      	lsls	r1, r2, #30
 800367c:	d505      	bpl.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800367e:	6863      	ldr	r3, [r4, #4]
 8003680:	68a9      	ldr	r1, [r5, #8]
 8003682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003686:	430b      	orrs	r3, r1
 8003688:	6063      	str	r3, [r4, #4]
 800368a:	0753      	lsls	r3, r2, #29
 800368c:	d505      	bpl.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800368e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003690:	68e9      	ldr	r1, [r5, #12]
 8003692:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003696:	430b      	orrs	r3, r1
 8003698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800369a:	0717      	lsls	r7, r2, #28
 800369c:	d505      	bpl.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x82>
 800369e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036a0:	692a      	ldr	r2, [r5, #16]
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	4313      	orrs	r3, r2
 80036a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036ac:	039e      	lsls	r6, r3, #14
 80036ae:	d444      	bmi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80036b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036b2:	0358      	lsls	r0, r3, #13
 80036b4:	d441      	bmi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80036b6:	6828      	ldr	r0, [r5, #0]
 80036b8:	f010 0010 	ands.w	r0, r0, #16
 80036bc:	d01a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036be:	6863      	ldr	r3, [r4, #4]
 80036c0:	69ea      	ldr	r2, [r5, #28]
 80036c2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036c6:	4313      	orrs	r3, r2
 80036c8:	2000      	movs	r0, #0
 80036ca:	6063      	str	r3, [r4, #4]
 80036cc:	e012      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036ce:	2600      	movs	r6, #0
 80036d0:	e7bf      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	f7fe f8db 	bl	8001894 <HAL_GetTick>
 80036de:	4680      	mov	r8, r0
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	d4b9      	bmi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036e6:	f7fe f8d5 	bl	8001894 <HAL_GetTick>
 80036ea:	eba0 0008 	sub.w	r0, r0, r8
 80036ee:	2864      	cmp	r0, #100	; 0x64
 80036f0:	d9f6      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80036f2:	2003      	movs	r0, #3
 80036f4:	b002      	add	sp, #8
 80036f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036fa:	686a      	ldr	r2, [r5, #4]
 80036fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003700:	429a      	cmp	r2, r3
 8003702:	d0ae      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003704:	2001      	movs	r0, #1
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003708:	6a23      	ldr	r3, [r4, #32]
 800370a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
 800370e:	2000      	movs	r0, #0
 8003710:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003714:	07df      	lsls	r7, r3, #31
 8003716:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
 800371a:	6221      	str	r1, [r4, #32]
 800371c:	d5a1      	bpl.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800371e:	f7fe f8b9 	bl	8001894 <HAL_GetTick>
 8003722:	f241 3888 	movw	r8, #5000	; 0x1388
 8003726:	4607      	mov	r7, r0
 8003728:	6a23      	ldr	r3, [r4, #32]
 800372a:	0798      	lsls	r0, r3, #30
 800372c:	d499      	bmi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800372e:	f7fe f8b1 	bl	8001894 <HAL_GetTick>
 8003732:	1bc0      	subs	r0, r0, r7
 8003734:	4540      	cmp	r0, r8
 8003736:	d9f7      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003738:	e7db      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	00d9      	lsls	r1, r3, #3
 800373e:	d422      	bmi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	69a9      	ldr	r1, [r5, #24]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	d504      	bpl.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800374a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800374e:	428a      	cmp	r2, r1
 8003750:	d11f      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003758:	430b      	orrs	r3, r1
 800375a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800375c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800375e:	696a      	ldr	r2, [r5, #20]
 8003760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003764:	4313      	orrs	r3, r2
 8003766:	2201      	movs	r2, #1
 8003768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800376c:	671a      	str	r2, [r3, #112]	; 0x70
 800376e:	f7fe f891 	bl	8001894 <HAL_GetTick>
 8003772:	4606      	mov	r6, r0
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	d49d      	bmi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800377a:	f7fe f88b 	bl	8001894 <HAL_GetTick>
 800377e:	1b80      	subs	r0, r0, r6
 8003780:	2864      	cmp	r0, #100	; 0x64
 8003782:	d9f7      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003784:	e7b5      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003788:	696a      	ldr	r2, [r5, #20]
 800378a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800378e:	4293      	cmp	r3, r2
 8003790:	d091      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8003792:	2001      	movs	r0, #1
 8003794:	e7ae      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	42420000 	.word	0x42420000

080037a4 <HAL_TIM_PeriodElapsedCallback>:
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_OC_DelayElapsedCallback>:
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIM_IC_CaptureCallback>:
 80037a8:	4770      	bx	lr

080037aa <HAL_TIM_PWM_PulseFinishedCallback>:
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_TriggerCallback>:
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_IRQHandler>:
 80037ae:	6803      	ldr	r3, [r0, #0]
 80037b0:	b510      	push	{r4, lr}
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	4604      	mov	r4, r0
 80037b6:	0791      	lsls	r1, r2, #30
 80037b8:	d50e      	bpl.n	80037d8 <HAL_TIM_IRQHandler+0x2a>
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	0792      	lsls	r2, r2, #30
 80037be:	d50b      	bpl.n	80037d8 <HAL_TIM_IRQHandler+0x2a>
 80037c0:	f06f 0202 	mvn.w	r2, #2
 80037c4:	611a      	str	r2, [r3, #16]
 80037c6:	2201      	movs	r2, #1
 80037c8:	7702      	strb	r2, [r0, #28]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	079b      	lsls	r3, r3, #30
 80037ce:	d077      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x112>
 80037d0:	f7ff ffea 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 80037d4:	2300      	movs	r3, #0
 80037d6:	7723      	strb	r3, [r4, #28]
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	0750      	lsls	r0, r2, #29
 80037de:	d510      	bpl.n	8003802 <HAL_TIM_IRQHandler+0x54>
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	0751      	lsls	r1, r2, #29
 80037e4:	d50d      	bpl.n	8003802 <HAL_TIM_IRQHandler+0x54>
 80037e6:	f06f 0204 	mvn.w	r2, #4
 80037ea:	611a      	str	r2, [r3, #16]
 80037ec:	2202      	movs	r2, #2
 80037ee:	7722      	strb	r2, [r4, #28]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	4620      	mov	r0, r4
 80037f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037f8:	d068      	beq.n	80038cc <HAL_TIM_IRQHandler+0x11e>
 80037fa:	f7ff ffd5 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 80037fe:	2300      	movs	r3, #0
 8003800:	7723      	strb	r3, [r4, #28]
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	0712      	lsls	r2, r2, #28
 8003808:	d50f      	bpl.n	800382a <HAL_TIM_IRQHandler+0x7c>
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	0710      	lsls	r0, r2, #28
 800380e:	d50c      	bpl.n	800382a <HAL_TIM_IRQHandler+0x7c>
 8003810:	f06f 0208 	mvn.w	r2, #8
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	2204      	movs	r2, #4
 8003818:	7722      	strb	r2, [r4, #28]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4620      	mov	r0, r4
 800381e:	0799      	lsls	r1, r3, #30
 8003820:	d05a      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x12a>
 8003822:	f7ff ffc1 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 8003826:	2300      	movs	r3, #0
 8003828:	7723      	strb	r3, [r4, #28]
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	06d2      	lsls	r2, r2, #27
 8003830:	d510      	bpl.n	8003854 <HAL_TIM_IRQHandler+0xa6>
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	06d0      	lsls	r0, r2, #27
 8003836:	d50d      	bpl.n	8003854 <HAL_TIM_IRQHandler+0xa6>
 8003838:	f06f 0210 	mvn.w	r2, #16
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	2208      	movs	r2, #8
 8003840:	7722      	strb	r2, [r4, #28]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4620      	mov	r0, r4
 8003846:	f413 7f40 	tst.w	r3, #768	; 0x300
 800384a:	d04b      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x136>
 800384c:	f7ff ffac 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 8003850:	2300      	movs	r3, #0
 8003852:	7723      	strb	r3, [r4, #28]
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	07d1      	lsls	r1, r2, #31
 800385a:	d508      	bpl.n	800386e <HAL_TIM_IRQHandler+0xc0>
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	07d2      	lsls	r2, r2, #31
 8003860:	d505      	bpl.n	800386e <HAL_TIM_IRQHandler+0xc0>
 8003862:	f06f 0201 	mvn.w	r2, #1
 8003866:	4620      	mov	r0, r4
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	f7ff ff9b 	bl	80037a4 <HAL_TIM_PeriodElapsedCallback>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	0610      	lsls	r0, r2, #24
 8003874:	d508      	bpl.n	8003888 <HAL_TIM_IRQHandler+0xda>
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	0611      	lsls	r1, r2, #24
 800387a:	d505      	bpl.n	8003888 <HAL_TIM_IRQHandler+0xda>
 800387c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003880:	4620      	mov	r0, r4
 8003882:	611a      	str	r2, [r3, #16]
 8003884:	f000 f973 	bl	8003b6e <HAL_TIMEx_BreakCallback>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	0652      	lsls	r2, r2, #25
 800388e:	d508      	bpl.n	80038a2 <HAL_TIM_IRQHandler+0xf4>
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	0650      	lsls	r0, r2, #25
 8003894:	d505      	bpl.n	80038a2 <HAL_TIM_IRQHandler+0xf4>
 8003896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800389a:	4620      	mov	r0, r4
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	f7ff ff85 	bl	80037ac <HAL_TIM_TriggerCallback>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	0691      	lsls	r1, r2, #26
 80038a8:	d522      	bpl.n	80038f0 <HAL_TIM_IRQHandler+0x142>
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	0692      	lsls	r2, r2, #26
 80038ae:	d51f      	bpl.n	80038f0 <HAL_TIM_IRQHandler+0x142>
 80038b0:	f06f 0220 	mvn.w	r2, #32
 80038b4:	4620      	mov	r0, r4
 80038b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ba:	611a      	str	r2, [r3, #16]
 80038bc:	f000 b956 	b.w	8003b6c <HAL_TIMEx_CommutCallback>
 80038c0:	f7ff ff71 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff ff70 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
 80038ca:	e783      	b.n	80037d4 <HAL_TIM_IRQHandler+0x26>
 80038cc:	f7ff ff6b 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff ff6a 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
 80038d6:	e792      	b.n	80037fe <HAL_TIM_IRQHandler+0x50>
 80038d8:	f7ff ff65 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
 80038dc:	4620      	mov	r0, r4
 80038de:	f7ff ff64 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
 80038e2:	e7a0      	b.n	8003826 <HAL_TIM_IRQHandler+0x78>
 80038e4:	f7ff ff5f 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff ff5e 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
 80038ee:	e7af      	b.n	8003850 <HAL_TIM_IRQHandler+0xa2>
 80038f0:	bd10      	pop	{r4, pc}
	...

080038f4 <TIM_Base_SetConfig>:
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <TIM_Base_SetConfig+0x7c>)
 80038f6:	6803      	ldr	r3, [r0, #0]
 80038f8:	4290      	cmp	r0, r2
 80038fa:	d00e      	beq.n	800391a <TIM_Base_SetConfig+0x26>
 80038fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0x26>
 8003902:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003906:	4290      	cmp	r0, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x26>
 800390a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800390e:	4290      	cmp	r0, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x26>
 8003912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003916:	4290      	cmp	r0, r2
 8003918:	d119      	bne.n	800394e <TIM_Base_SetConfig+0x5a>
 800391a:	684a      	ldr	r2, [r1, #4]
 800391c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003920:	4313      	orrs	r3, r2
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <TIM_Base_SetConfig+0x7c>)
 8003924:	4290      	cmp	r0, r2
 8003926:	d00e      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 8003928:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800392c:	d00b      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 800392e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003932:	4290      	cmp	r0, r2
 8003934:	d007      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 8003936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393a:	4290      	cmp	r0, r2
 800393c:	d003      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 800393e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003942:	4290      	cmp	r0, r2
 8003944:	d103      	bne.n	800394e <TIM_Base_SetConfig+0x5a>
 8003946:	68ca      	ldr	r2, [r1, #12]
 8003948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394c:	4313      	orrs	r3, r2
 800394e:	694a      	ldr	r2, [r1, #20]
 8003950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003954:	4313      	orrs	r3, r2
 8003956:	6003      	str	r3, [r0, #0]
 8003958:	688b      	ldr	r3, [r1, #8]
 800395a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800395c:	680b      	ldr	r3, [r1, #0]
 800395e:	6283      	str	r3, [r0, #40]	; 0x28
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <TIM_Base_SetConfig+0x7c>)
 8003962:	4298      	cmp	r0, r3
 8003964:	bf04      	itt	eq
 8003966:	690b      	ldreq	r3, [r1, #16]
 8003968:	6303      	streq	r3, [r0, #48]	; 0x30
 800396a:	2301      	movs	r3, #1
 800396c:	6143      	str	r3, [r0, #20]
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00

08003974 <HAL_TIM_Base_Init>:
 8003974:	b510      	push	{r4, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	b330      	cbz	r0, 80039c8 <HAL_TIM_Base_Init+0x54>
 800397a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800397e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003982:	b91b      	cbnz	r3, 800398c <HAL_TIM_Base_Init+0x18>
 8003984:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8003988:	f7fd fe88 	bl	800169c <HAL_TIM_Base_MspInit>
 800398c:	2302      	movs	r3, #2
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003994:	1d21      	adds	r1, r4, #4
 8003996:	f7ff ffad 	bl	80038f4 <TIM_Base_SetConfig>
 800399a:	2301      	movs	r3, #1
 800399c:	2000      	movs	r0, #0
 800399e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80039a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80039a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80039b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80039be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80039c6:	bd10      	pop	{r4, pc}
 80039c8:	2001      	movs	r0, #1
 80039ca:	e7fc      	b.n	80039c6 <HAL_TIM_Base_Init+0x52>

080039cc <TIM_ETR_SetConfig>:
 80039cc:	b510      	push	{r4, lr}
 80039ce:	6884      	ldr	r4, [r0, #8]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80039d6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80039da:	4322      	orrs	r2, r4
 80039dc:	6082      	str	r2, [r0, #8]
 80039de:	bd10      	pop	{r4, pc}

080039e0 <HAL_TIM_ConfigClockSource>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039e6:	4604      	mov	r4, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f04f 0002 	mov.w	r0, #2
 80039ee:	d027      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x60>
 80039f0:	2301      	movs	r3, #1
 80039f2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80039fc:	6883      	ldr	r3, [r0, #8]
 80039fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a06:	6083      	str	r3, [r0, #8]
 8003a08:	680b      	ldr	r3, [r1, #0]
 8003a0a:	2b60      	cmp	r3, #96	; 0x60
 8003a0c:	d04d      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xca>
 8003a0e:	d832      	bhi.n	8003a76 <HAL_TIM_ConfigClockSource+0x96>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d062      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xfa>
 8003a14:	d815      	bhi.n	8003a42 <HAL_TIM_ConfigClockSource+0x62>
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x42>
 8003a1a:	d809      	bhi.n	8003a30 <HAL_TIM_ConfigClockSource+0x50>
 8003a1c:	f033 0210 	bics.w	r2, r3, #16
 8003a20:	d108      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x54>
 8003a22:	6882      	ldr	r2, [r0, #8]
 8003a24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f043 0307 	orr.w	r3, r3, #7
 8003a2e:	e020      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x92>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d0f6      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x42>
 8003a34:	2301      	movs	r3, #1
 8003a36:	2000      	movs	r0, #0
 8003a38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003a3c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	2b50      	cmp	r3, #80	; 0x50
 8003a44:	d1f6      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x54>
 8003a46:	684a      	ldr	r2, [r1, #4]
 8003a48:	68ce      	ldr	r6, [r1, #12]
 8003a4a:	6a01      	ldr	r1, [r0, #32]
 8003a4c:	6a05      	ldr	r5, [r0, #32]
 8003a4e:	f021 010a 	bic.w	r1, r1, #10
 8003a52:	f025 0501 	bic.w	r5, r5, #1
 8003a56:	6205      	str	r5, [r0, #32]
 8003a58:	6983      	ldr	r3, [r0, #24]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a60:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8003a64:	6183      	str	r3, [r0, #24]
 8003a66:	6202      	str	r2, [r0, #32]
 8003a68:	6883      	ldr	r3, [r0, #8]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003a72:	6083      	str	r3, [r0, #8]
 8003a74:	e7de      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x54>
 8003a76:	2b70      	cmp	r3, #112	; 0x70
 8003a78:	d00c      	beq.n	8003a94 <HAL_TIM_ConfigClockSource+0xb4>
 8003a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7e:	d1d9      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x54>
 8003a80:	68cb      	ldr	r3, [r1, #12]
 8003a82:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a86:	f7ff ffa1 	bl	80039cc <TIM_ETR_SetConfig>
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	6893      	ldr	r3, [r2, #8]
 8003a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a92:	e008      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0xc6>
 8003a94:	68cb      	ldr	r3, [r1, #12]
 8003a96:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a9a:	f7ff ff97 	bl	80039cc <TIM_ETR_SetConfig>
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6893      	ldr	r3, [r2, #8]
 8003aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa6:	6093      	str	r3, [r2, #8]
 8003aa8:	e7c4      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x54>
 8003aaa:	684d      	ldr	r5, [r1, #4]
 8003aac:	68ce      	ldr	r6, [r1, #12]
 8003aae:	6a01      	ldr	r1, [r0, #32]
 8003ab0:	f021 0110 	bic.w	r1, r1, #16
 8003ab4:	6201      	str	r1, [r0, #32]
 8003ab6:	6982      	ldr	r2, [r0, #24]
 8003ab8:	6a03      	ldr	r3, [r0, #32]
 8003aba:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8003abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003ac6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
 8003aca:	6182      	str	r2, [r0, #24]
 8003acc:	6203      	str	r3, [r0, #32]
 8003ace:	6883      	ldr	r3, [r0, #8]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003ad8:	e7cb      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x92>
 8003ada:	684a      	ldr	r2, [r1, #4]
 8003adc:	68ce      	ldr	r6, [r1, #12]
 8003ade:	6a01      	ldr	r1, [r0, #32]
 8003ae0:	6a05      	ldr	r5, [r0, #32]
 8003ae2:	f021 010a 	bic.w	r1, r1, #10
 8003ae6:	f025 0501 	bic.w	r5, r5, #1
 8003aea:	6205      	str	r5, [r0, #32]
 8003aec:	6983      	ldr	r3, [r0, #24]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8003af8:	6183      	str	r3, [r0, #24]
 8003afa:	6202      	str	r2, [r0, #32]
 8003afc:	6883      	ldr	r3, [r0, #8]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003b06:	e7b4      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x92>

08003b08 <HAL_TIMEx_MasterConfigSynchronization>:
 8003b08:	b530      	push	{r4, r5, lr}
 8003b0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b0e:	4602      	mov	r2, r0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f04f 0002 	mov.w	r0, #2
 8003b16:	d026      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b18:	6813      	ldr	r3, [r2, #0]
 8003b1a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8003b1e:	685c      	ldr	r4, [r3, #4]
 8003b20:	680d      	ldr	r5, [r1, #0]
 8003b22:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8003b26:	432c      	orrs	r4, r5
 8003b28:	6898      	ldr	r0, [r3, #8]
 8003b2a:	605c      	str	r4, [r3, #4]
 8003b2c:	4c0e      	ldr	r4, [pc, #56]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d00b      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003b38:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003b40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	d003      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003b48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003b50:	6849      	ldr	r1, [r1, #4]
 8003b52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003b56:	4301      	orrs	r1, r0
 8003b58:	6099      	str	r1, [r3, #8]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8003b62:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
 8003b66:	bd30      	pop	{r4, r5, pc}
 8003b68:	40012c00 	.word	0x40012c00

08003b6c <HAL_TIMEx_CommutCallback>:
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIMEx_BreakCallback>:
 8003b6e:	4770      	bx	lr

08003b70 <USB_CoreInit>:
 8003b70:	b084      	sub	sp, #16
 8003b72:	b510      	push	{r4, lr}
 8003b74:	4604      	mov	r4, r0
 8003b76:	a803      	add	r0, sp, #12
 8003b78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003b7c:	68e3      	ldr	r3, [r4, #12]
 8003b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b82:	60e3      	str	r3, [r4, #12]
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <USB_CoreInit+0x4c>)
 8003b86:	3b01      	subs	r3, #1
 8003b88:	d015      	beq.n	8003bb6 <USB_CoreInit+0x46>
 8003b8a:	6922      	ldr	r2, [r4, #16]
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	dafa      	bge.n	8003b86 <USB_CoreInit+0x16>
 8003b90:	6923      	ldr	r3, [r4, #16]
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6123      	str	r3, [r4, #16]
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <USB_CoreInit+0x4c>)
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	d00b      	beq.n	8003bb6 <USB_CoreInit+0x46>
 8003b9e:	6920      	ldr	r0, [r4, #16]
 8003ba0:	f010 0001 	ands.w	r0, r0, #1
 8003ba4:	d1f9      	bne.n	8003b9a <USB_CoreInit+0x2a>
 8003ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	63a3      	str	r3, [r4, #56]	; 0x38
 8003bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb2:	b004      	add	sp, #16
 8003bb4:	4770      	bx	lr
 8003bb6:	2003      	movs	r0, #3
 8003bb8:	e7f5      	b.n	8003ba6 <USB_CoreInit+0x36>
 8003bba:	bf00      	nop
 8003bbc:	00030d41 	.word	0x00030d41

08003bc0 <USB_SetTurnaroundTime>:
 8003bc0:	2a02      	cmp	r2, #2
 8003bc2:	d14a      	bne.n	8003c5a <USB_SetTurnaroundTime+0x9a>
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <USB_SetTurnaroundTime+0xa4>)
 8003bc6:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <USB_SetTurnaroundTime+0xa8>)
 8003bc8:	440b      	add	r3, r1
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d939      	bls.n	8003c42 <USB_SetTurnaroundTime+0x82>
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <USB_SetTurnaroundTime+0xac>)
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <USB_SetTurnaroundTime+0xb0>)
 8003bd2:	440b      	add	r3, r1
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d936      	bls.n	8003c46 <USB_SetTurnaroundTime+0x86>
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <USB_SetTurnaroundTime+0xb4>)
 8003bda:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8003bde:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d931      	bls.n	8003c4a <USB_SetTurnaroundTime+0x8a>
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <USB_SetTurnaroundTime+0xb8>)
 8003be8:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8003bec:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d32c      	bcc.n	8003c4e <USB_SetTurnaroundTime+0x8e>
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <USB_SetTurnaroundTime+0xbc>)
 8003bf6:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <USB_SetTurnaroundTime+0xc0>)
 8003bf8:	440b      	add	r3, r1
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d929      	bls.n	8003c52 <USB_SetTurnaroundTime+0x92>
 8003bfe:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <USB_SetTurnaroundTime+0xc4>)
 8003c00:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <USB_SetTurnaroundTime+0xc8>)
 8003c02:	440b      	add	r3, r1
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d326      	bcc.n	8003c56 <USB_SetTurnaroundTime+0x96>
 8003c08:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <USB_SetTurnaroundTime+0xcc>)
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <USB_SetTurnaroundTime+0xd0>)
 8003c0c:	440b      	add	r3, r1
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d323      	bcc.n	8003c5a <USB_SetTurnaroundTime+0x9a>
 8003c12:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <USB_SetTurnaroundTime+0xd4>)
 8003c14:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8003c18:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d31e      	bcc.n	8003c5e <USB_SetTurnaroundTime+0x9e>
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <USB_SetTurnaroundTime+0xd8>)
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <USB_SetTurnaroundTime+0xdc>)
 8003c24:	440b      	add	r3, r1
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bf34      	ite	cc
 8003c2a:	2307      	movcc	r3, #7
 8003c2c:	2306      	movcs	r3, #6
 8003c2e:	68c2      	ldr	r2, [r0, #12]
 8003c30:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003c34:	60c2      	str	r2, [r0, #12]
 8003c36:	68c2      	ldr	r2, [r0, #12]
 8003c38:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8003c3c:	60c3      	str	r3, [r0, #12]
 8003c3e:	2000      	movs	r0, #0
 8003c40:	4770      	bx	lr
 8003c42:	230f      	movs	r3, #15
 8003c44:	e7f3      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c46:	230e      	movs	r3, #14
 8003c48:	e7f1      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c4a:	230d      	movs	r3, #13
 8003c4c:	e7ef      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	e7ed      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c52:	230b      	movs	r3, #11
 8003c54:	e7eb      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c56:	230a      	movs	r3, #10
 8003c58:	e7e9      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c5a:	2309      	movs	r3, #9
 8003c5c:	e7e7      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c5e:	2308      	movs	r3, #8
 8003c60:	e7e5      	b.n	8003c2e <USB_SetTurnaroundTime+0x6e>
 8003c62:	bf00      	nop
 8003c64:	ff275340 	.word	0xff275340
 8003c68:	000c34ff 	.word	0x000c34ff
 8003c6c:	ff1b1e40 	.word	0xff1b1e40
 8003c70:	000f423f 	.word	0x000f423f
 8003c74:	00124f7f 	.word	0x00124f7f
 8003c78:	0013d620 	.word	0x0013d620
 8003c7c:	fee5b660 	.word	0xfee5b660
 8003c80:	0016e35f 	.word	0x0016e35f
 8003c84:	feced300 	.word	0xfeced300
 8003c88:	001b7740 	.word	0x001b7740
 8003c8c:	feb35bc0 	.word	0xfeb35bc0
 8003c90:	002191c0 	.word	0x002191c0
 8003c94:	00387520 	.word	0x00387520
 8003c98:	fe5954e0 	.word	0xfe5954e0
 8003c9c:	00419ce0 	.word	0x00419ce0

08003ca0 <USB_EnableGlobalInt>:
 8003ca0:	6883      	ldr	r3, [r0, #8]
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6083      	str	r3, [r0, #8]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4770      	bx	lr

08003cac <USB_DisableGlobalInt>:
 8003cac:	6883      	ldr	r3, [r0, #8]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6083      	str	r3, [r0, #8]
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4770      	bx	lr

08003cb8 <USB_SetCurrentMode>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	68c3      	ldr	r3, [r0, #12]
 8003cbc:	2901      	cmp	r1, #1
 8003cbe:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	60c3      	str	r3, [r0, #12]
 8003cc8:	d10f      	bne.n	8003cea <USB_SetCurrentMode+0x32>
 8003cca:	2400      	movs	r4, #0
 8003ccc:	68c3      	ldr	r3, [r0, #12]
 8003cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cd2:	60c3      	str	r3, [r0, #12]
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f7fd fde3 	bl	80018a0 <HAL_Delay>
 8003cda:	696b      	ldr	r3, [r5, #20]
 8003cdc:	3401      	adds	r4, #1
 8003cde:	07d9      	lsls	r1, r3, #31
 8003ce0:	d413      	bmi.n	8003d0a <USB_SetCurrentMode+0x52>
 8003ce2:	2c32      	cmp	r4, #50	; 0x32
 8003ce4:	d1f6      	bne.n	8003cd4 <USB_SetCurrentMode+0x1c>
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	bd38      	pop	{r3, r4, r5, pc}
 8003cea:	2900      	cmp	r1, #0
 8003cec:	d1fb      	bne.n	8003ce6 <USB_SetCurrentMode+0x2e>
 8003cee:	68c3      	ldr	r3, [r0, #12]
 8003cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cf4:	60c3      	str	r3, [r0, #12]
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fd fdd2 	bl	80018a0 <HAL_Delay>
 8003cfc:	696b      	ldr	r3, [r5, #20]
 8003cfe:	3401      	adds	r4, #1
 8003d00:	07da      	lsls	r2, r3, #31
 8003d02:	d502      	bpl.n	8003d0a <USB_SetCurrentMode+0x52>
 8003d04:	2c32      	cmp	r4, #50	; 0x32
 8003d06:	d1f6      	bne.n	8003cf6 <USB_SetCurrentMode+0x3e>
 8003d08:	e7ed      	b.n	8003ce6 <USB_SetCurrentMode+0x2e>
 8003d0a:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8003d0e:	4258      	negs	r0, r3
 8003d10:	4158      	adcs	r0, r3
 8003d12:	e7e9      	b.n	8003ce8 <USB_SetCurrentMode+0x30>

08003d14 <USB_FlushTxFifo>:
 8003d14:	4602      	mov	r2, r0
 8003d16:	0189      	lsls	r1, r1, #6
 8003d18:	f041 0120 	orr.w	r1, r1, #32
 8003d1c:	6101      	str	r1, [r0, #16]
 8003d1e:	4905      	ldr	r1, [pc, #20]	; (8003d34 <USB_FlushTxFifo+0x20>)
 8003d20:	3901      	subs	r1, #1
 8003d22:	d004      	beq.n	8003d2e <USB_FlushTxFifo+0x1a>
 8003d24:	6910      	ldr	r0, [r2, #16]
 8003d26:	f010 0020 	ands.w	r0, r0, #32
 8003d2a:	d1f9      	bne.n	8003d20 <USB_FlushTxFifo+0xc>
 8003d2c:	4770      	bx	lr
 8003d2e:	2003      	movs	r0, #3
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	00030d41 	.word	0x00030d41

08003d38 <USB_FlushRxFifo>:
 8003d38:	2310      	movs	r3, #16
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4905      	ldr	r1, [pc, #20]	; (8003d54 <USB_FlushRxFifo+0x1c>)
 8003d3e:	6103      	str	r3, [r0, #16]
 8003d40:	3901      	subs	r1, #1
 8003d42:	d004      	beq.n	8003d4e <USB_FlushRxFifo+0x16>
 8003d44:	6910      	ldr	r0, [r2, #16]
 8003d46:	f010 0010 	ands.w	r0, r0, #16
 8003d4a:	d1f9      	bne.n	8003d40 <USB_FlushRxFifo+0x8>
 8003d4c:	4770      	bx	lr
 8003d4e:	2003      	movs	r0, #3
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	00030d41 	.word	0x00030d41

08003d58 <USB_SetDevSpeed>:
 8003d58:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d5c:	4319      	orrs	r1, r3
 8003d5e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
 8003d62:	2000      	movs	r0, #0
 8003d64:	4770      	bx	lr
	...

08003d68 <USB_DevInit>:
 8003d68:	b084      	sub	sp, #16
 8003d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	4604      	mov	r4, r0
 8003d70:	a807      	add	r0, sp, #28
 8003d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003d76:	2300      	movs	r3, #0
 8003d78:	460f      	mov	r7, r1
 8003d7a:	4698      	mov	r8, r3
 8003d7c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003d80:	3301      	adds	r3, #1
 8003d82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	f8c2 8004 	str.w	r8, [r2, #4]
 8003d8c:	d1f6      	bne.n	8003d7c <USB_DevInit+0x14>
 8003d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d90:	2103      	movs	r1, #3
 8003d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d96:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d98:	f8c4 8e00 	str.w	r8, [r4, #3584]	; 0xe00
 8003d9c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003da0:	4620      	mov	r0, r4
 8003da2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8003da6:	f7ff ffd7 	bl	8003d58 <USB_SetDevSpeed>
 8003daa:	2110      	movs	r1, #16
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff ffb1 	bl	8003d14 <USB_FlushTxFifo>
 8003db2:	4605      	mov	r5, r0
 8003db4:	4620      	mov	r0, r4
 8003db6:	f7ff ffbf 	bl	8003d38 <USB_FlushRxFifo>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4328      	orrs	r0, r5
 8003dbe:	b2c0      	uxtb	r0, r0
 8003dc0:	3800      	subs	r0, #0
 8003dc2:	bf18      	it	ne
 8003dc4:	2001      	movne	r0, #1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8003dcc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8003dd0:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003dd4:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8003dd8:	f8c6 8010 	str.w	r8, [r6, #16]
 8003ddc:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003de0:	f8c6 8014 	str.w	r8, [r6, #20]
 8003de4:	f8c6 801c 	str.w	r8, [r6, #28]
 8003de8:	42ba      	cmp	r2, r7
 8003dea:	d12f      	bne.n	8003e4c <USB_DevInit+0xe4>
 8003dec:	2200      	movs	r2, #0
 8003dee:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8003df2:	4611      	mov	r1, r2
 8003df4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8003df8:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003dfc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003e00:	42ba      	cmp	r2, r7
 8003e02:	d135      	bne.n	8003e70 <USB_DevInit+0x108>
 8003e04:	6933      	ldr	r3, [r6, #16]
 8003e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0a:	6133      	str	r3, [r6, #16]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61a3      	str	r3, [r4, #24]
 8003e10:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003e14:	6163      	str	r3, [r4, #20]
 8003e16:	69a3      	ldr	r3, [r4, #24]
 8003e18:	f043 0310 	orr.w	r3, r3, #16
 8003e1c:	61a3      	str	r3, [r4, #24]
 8003e1e:	69a2      	ldr	r2, [r4, #24]
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <USB_DevInit+0x12c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61a3      	str	r3, [r4, #24]
 8003e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e28:	b11b      	cbz	r3, 8003e32 <USB_DevInit+0xca>
 8003e2a:	69a3      	ldr	r3, [r4, #24]
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	61a3      	str	r3, [r4, #24]
 8003e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf01      	itttt	eq
 8003e38:	69a3      	ldreq	r3, [r4, #24]
 8003e3a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003e3e:	f043 0304 	orreq.w	r3, r3, #4
 8003e42:	61a3      	streq	r3, [r4, #24]
 8003e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	b004      	add	sp, #16
 8003e4a:	4770      	bx	lr
 8003e4c:	f8d3 8000 	ldr.w	r8, [r3]
 8003e50:	f1b8 0f00 	cmp.w	r8, #0
 8003e54:	da0a      	bge.n	8003e6c <USB_DevInit+0x104>
 8003e56:	b93a      	cbnz	r2, 8003e68 <USB_DevInit+0x100>
 8003e58:	f8c3 c000 	str.w	ip, [r3]
 8003e5c:	6119      	str	r1, [r3, #16]
 8003e5e:	3201      	adds	r2, #1
 8003e60:	f8c3 e008 	str.w	lr, [r3, #8]
 8003e64:	3320      	adds	r3, #32
 8003e66:	e7bf      	b.n	8003de8 <USB_DevInit+0x80>
 8003e68:	601d      	str	r5, [r3, #0]
 8003e6a:	e7f7      	b.n	8003e5c <USB_DevInit+0xf4>
 8003e6c:	6019      	str	r1, [r3, #0]
 8003e6e:	e7f5      	b.n	8003e5c <USB_DevInit+0xf4>
 8003e70:	f8d3 8000 	ldr.w	r8, [r3]
 8003e74:	f1b8 0f00 	cmp.w	r8, #0
 8003e78:	da0a      	bge.n	8003e90 <USB_DevInit+0x128>
 8003e7a:	b93a      	cbnz	r2, 8003e8c <USB_DevInit+0x124>
 8003e7c:	f8c3 c000 	str.w	ip, [r3]
 8003e80:	6119      	str	r1, [r3, #16]
 8003e82:	3201      	adds	r2, #1
 8003e84:	f8c3 e008 	str.w	lr, [r3, #8]
 8003e88:	3320      	adds	r3, #32
 8003e8a:	e7b9      	b.n	8003e00 <USB_DevInit+0x98>
 8003e8c:	601d      	str	r5, [r3, #0]
 8003e8e:	e7f7      	b.n	8003e80 <USB_DevInit+0x118>
 8003e90:	6019      	str	r1, [r3, #0]
 8003e92:	e7f5      	b.n	8003e80 <USB_DevInit+0x118>
 8003e94:	803c3800 	.word	0x803c3800

08003e98 <USB_GetDevSpeed>:
 8003e98:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003e9c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003ea0:	f013 0f02 	tst.w	r3, #2
 8003ea4:	bf14      	ite	ne
 8003ea6:	2002      	movne	r0, #2
 8003ea8:	200f      	moveq	r0, #15
 8003eaa:	4770      	bx	lr

08003eac <USB_ActivateEndpoint>:
 8003eac:	b530      	push	{r4, r5, lr}
 8003eae:	2401      	movs	r4, #1
 8003eb0:	780d      	ldrb	r5, [r1, #0]
 8003eb2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003eb6:	f005 030f 	and.w	r3, r5, #15
 8003eba:	409c      	lsls	r4, r3
 8003ebc:	784b      	ldrb	r3, [r1, #1]
 8003ebe:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	69d3      	ldr	r3, [r2, #28]
 8003ec6:	d118      	bne.n	8003efa <USB_ActivateEndpoint+0x4e>
 8003ec8:	431c      	orrs	r4, r3
 8003eca:	61d4      	str	r4, [r2, #28]
 8003ecc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003ed0:	041a      	lsls	r2, r3, #16
 8003ed2:	d410      	bmi.n	8003ef6 <USB_ActivateEndpoint+0x4a>
 8003ed4:	688a      	ldr	r2, [r1, #8]
 8003ed6:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8003eda:	f3c2 030a 	ubfx	r3, r2, #0, #11
 8003ede:	78ca      	ldrb	r2, [r1, #3]
 8003ee0:	4323      	orrs	r3, r4
 8003ee2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003ee6:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	bd30      	pop	{r4, r5, pc}
 8003efa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003efe:	61d4      	str	r4, [r2, #28]
 8003f00:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	d4f6      	bmi.n	8003ef6 <USB_ActivateEndpoint+0x4a>
 8003f08:	688b      	ldr	r3, [r1, #8]
 8003f0a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f12:	4313      	orrs	r3, r2
 8003f14:	78ca      	ldrb	r2, [r1, #3]
 8003f16:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f22:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003f26:	e7e6      	b.n	8003ef6 <USB_ActivateEndpoint+0x4a>

08003f28 <USB_EP0StartXfer>:
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	784b      	ldrb	r3, [r1, #1]
 8003f2c:	780d      	ldrb	r5, [r1, #0]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	694e      	ldr	r6, [r1, #20]
 8003f32:	4f2c      	ldr	r7, [pc, #176]	; (8003fe4 <USB_EP0StartXfer+0xbc>)
 8003f34:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8003fe8 <USB_EP0StartXfer+0xc0>
 8003f38:	eb00 1445 	add.w	r4, r0, r5, lsl #5
 8003f3c:	d134      	bne.n	8003fa8 <USB_EP0StartXfer+0x80>
 8003f3e:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	b9e6      	cbnz	r6, 8003f80 <USB_EP0StartXfer+0x58>
 8003f46:	403a      	ands	r2, r7
 8003f48:	611a      	str	r2, [r3, #16]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	ea02 020c 	and.w	r2, r2, ip
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f62:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8003f66:	694b      	ldr	r3, [r1, #20]
 8003f68:	b143      	cbz	r3, 8003f7c <USB_EP0StartXfer+0x54>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003f70:	f005 050f 	and.w	r5, r5, #15
 8003f74:	40ab      	lsls	r3, r5
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f80:	ea02 020c 	and.w	r2, r2, ip
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	403a      	ands	r2, r7
 8003f8a:	611a      	str	r2, [r3, #16]
 8003f8c:	688a      	ldr	r2, [r1, #8]
 8003f8e:	42b2      	cmp	r2, r6
 8003f90:	bf38      	it	cc
 8003f92:	614a      	strcc	r2, [r1, #20]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f9a:	611a      	str	r2, [r3, #16]
 8003f9c:	694a      	ldr	r2, [r1, #20]
 8003f9e:	691e      	ldr	r6, [r3, #16]
 8003fa0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003fa4:	4332      	orrs	r2, r6
 8003fa6:	e7d7      	b.n	8003f58 <USB_EP0StartXfer+0x30>
 8003fa8:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8003fac:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003fb0:	ea02 020c 	and.w	r2, r2, ip
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	403a      	ands	r2, r7
 8003fba:	611a      	str	r2, [r3, #16]
 8003fbc:	688a      	ldr	r2, [r1, #8]
 8003fbe:	b106      	cbz	r6, 8003fc2 <USB_EP0StartXfer+0x9a>
 8003fc0:	614a      	str	r2, [r1, #20]
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003fc8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8003fcc:	6119      	str	r1, [r3, #16]
 8003fce:	6919      	ldr	r1, [r3, #16]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	611a      	str	r2, [r3, #16]
 8003fd4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003fd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fdc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8003fe0:	e7cc      	b.n	8003f7c <USB_EP0StartXfer+0x54>
 8003fe2:	bf00      	nop
 8003fe4:	e007ffff 	.word	0xe007ffff
 8003fe8:	fff80000 	.word	0xfff80000

08003fec <USB_WritePacket>:
 8003fec:	3303      	adds	r3, #3
 8003fee:	3201      	adds	r2, #1
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003ff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	d101      	bne.n	8004002 <USB_WritePacket+0x16>
 8003ffe:	2000      	movs	r0, #0
 8004000:	4770      	bx	lr
 8004002:	f851 2b04 	ldr.w	r2, [r1], #4
 8004006:	6002      	str	r2, [r0, #0]
 8004008:	e7f7      	b.n	8003ffa <USB_WritePacket+0xe>
	...

0800400c <USB_EPStartXfer>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	784c      	ldrb	r4, [r1, #1]
 8004010:	780a      	ldrb	r2, [r1, #0]
 8004012:	2c01      	cmp	r4, #1
 8004014:	694b      	ldr	r3, [r1, #20]
 8004016:	78ce      	ldrb	r6, [r1, #3]
 8004018:	4f52      	ldr	r7, [pc, #328]	; (8004164 <USB_EPStartXfer+0x158>)
 800401a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8004168 <USB_EPStartXfer+0x15c>
 800401e:	eb00 1542 	add.w	r5, r0, r2, lsl #5
 8004022:	d15f      	bne.n	80040e4 <USB_EPStartXfer+0xd8>
 8004024:	f505 6410 	add.w	r4, r5, #2304	; 0x900
 8004028:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800402c:	b9f3      	cbnz	r3, 800406c <USB_EPStartXfer+0x60>
 800402e:	ea0e 0707 	and.w	r7, lr, r7
 8004032:	6127      	str	r7, [r4, #16]
 8004034:	6927      	ldr	r7, [r4, #16]
 8004036:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800403a:	6127      	str	r7, [r4, #16]
 800403c:	6927      	ldr	r7, [r4, #16]
 800403e:	ea07 070c 	and.w	r7, r7, ip
 8004042:	6127      	str	r7, [r4, #16]
 8004044:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8004048:	2e01      	cmp	r6, #1
 800404a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800404e:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8004052:	d035      	beq.n	80040c0 <USB_EPStartXfer+0xb4>
 8004054:	b143      	cbz	r3, 8004068 <USB_EPStartXfer+0x5c>
 8004056:	f002 010f 	and.w	r1, r2, #15
 800405a:	2201      	movs	r2, #1
 800405c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8004060:	408a      	lsls	r2, r1
 8004062:	431a      	orrs	r2, r3
 8004064:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8004068:	2000      	movs	r0, #0
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406c:	ea0e 0c0c 	and.w	ip, lr, ip
 8004070:	f8c4 c010 	str.w	ip, [r4, #16]
 8004074:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004078:	2e01      	cmp	r6, #1
 800407a:	ea0c 0707 	and.w	r7, ip, r7
 800407e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004082:	6127      	str	r7, [r4, #16]
 8004084:	eb0c 0703 	add.w	r7, ip, r3
 8004088:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800408c:	fbb7 fcfc 	udiv	ip, r7, ip
 8004090:	4f36      	ldr	r7, [pc, #216]	; (800416c <USB_EPStartXfer+0x160>)
 8004092:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8004096:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800409a:	ea47 070e 	orr.w	r7, r7, lr
 800409e:	6127      	str	r7, [r4, #16]
 80040a0:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80040a4:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80040a8:	ea47 070c 	orr.w	r7, r7, ip
 80040ac:	6127      	str	r7, [r4, #16]
 80040ae:	d1c9      	bne.n	8004044 <USB_EPStartXfer+0x38>
 80040b0:	6927      	ldr	r7, [r4, #16]
 80040b2:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 80040b6:	6127      	str	r7, [r4, #16]
 80040b8:	6927      	ldr	r7, [r4, #16]
 80040ba:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80040be:	e7c0      	b.n	8004042 <USB_EPStartXfer+0x36>
 80040c0:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80040c4:	68c9      	ldr	r1, [r1, #12]
 80040c6:	f414 7f80 	tst.w	r4, #256	; 0x100
 80040ca:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	bf0c      	ite	eq
 80040d2:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 80040d6:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 80040da:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 80040de:	f7ff ff85 	bl	8003fec <USB_WritePacket>
 80040e2:	e7c1      	b.n	8004068 <USB_EPStartXfer+0x5c>
 80040e4:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
 80040e8:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
 80040ec:	ea04 040c 	and.w	r4, r4, ip
 80040f0:	6114      	str	r4, [r2, #16]
 80040f2:	6914      	ldr	r4, [r2, #16]
 80040f4:	6889      	ldr	r1, [r1, #8]
 80040f6:	403c      	ands	r4, r7
 80040f8:	6114      	str	r4, [r2, #16]
 80040fa:	b9f3      	cbnz	r3, 800413a <USB_EPStartXfer+0x12e>
 80040fc:	6913      	ldr	r3, [r2, #16]
 80040fe:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8004102:	4319      	orrs	r1, r3
 8004104:	6111      	str	r1, [r2, #16]
 8004106:	6913      	ldr	r3, [r2, #16]
 8004108:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	2e01      	cmp	r6, #1
 8004110:	d10c      	bne.n	800412c <USB_EPStartXfer+0x120>
 8004112:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004116:	f413 7f80 	tst.w	r3, #256	; 0x100
 800411a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800411e:	bf0c      	ite	eq
 8004120:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004124:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8004128:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800412c:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8004130:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004134:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8004138:	e796      	b.n	8004068 <USB_EPStartXfer+0x5c>
 800413a:	440b      	add	r3, r1
 800413c:	3b01      	subs	r3, #1
 800413e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004142:	4f0a      	ldr	r7, [pc, #40]	; (800416c <USB_EPStartXfer+0x160>)
 8004144:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8004148:	b29c      	uxth	r4, r3
 800414a:	4361      	muls	r1, r4
 800414c:	ea07 43c3 	and.w	r3, r7, r3, lsl #19
 8004150:	ea43 030c 	orr.w	r3, r3, ip
 8004154:	6113      	str	r3, [r2, #16]
 8004156:	6913      	ldr	r3, [r2, #16]
 8004158:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800415c:	4319      	orrs	r1, r3
 800415e:	6111      	str	r1, [r2, #16]
 8004160:	e7d5      	b.n	800410e <USB_EPStartXfer+0x102>
 8004162:	bf00      	nop
 8004164:	e007ffff 	.word	0xe007ffff
 8004168:	fff80000 	.word	0xfff80000
 800416c:	1ff80000 	.word	0x1ff80000

08004170 <USB_ReadPacket>:
 8004170:	4603      	mov	r3, r0
 8004172:	b570      	push	{r4, r5, r6, lr}
 8004174:	2400      	movs	r4, #0
 8004176:	0890      	lsrs	r0, r2, #2
 8004178:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
 800417c:	f002 0203 	and.w	r2, r2, #3
 8004180:	4284      	cmp	r4, r0
 8004182:	d310      	bcc.n	80041a6 <USB_ReadPacket+0x36>
 8004184:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8004188:	b162      	cbz	r2, 80041a4 <USB_ReadPacket+0x34>
 800418a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418e:	681c      	ldr	r4, [r3, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	fa24 f101 	lsr.w	r1, r4, r1
 8004198:	54c1      	strb	r1, [r0, r3]
 800419a:	3301      	adds	r3, #1
 800419c:	b299      	uxth	r1, r3
 800419e:	428a      	cmp	r2, r1
 80041a0:	d1f7      	bne.n	8004192 <USB_ReadPacket+0x22>
 80041a2:	4410      	add	r0, r2
 80041a4:	bd70      	pop	{r4, r5, r6, pc}
 80041a6:	682e      	ldr	r6, [r5, #0]
 80041a8:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
 80041ac:	3401      	adds	r4, #1
 80041ae:	e7e7      	b.n	8004180 <USB_ReadPacket+0x10>

080041b0 <USB_EPSetStall>:
 80041b0:	784a      	ldrb	r2, [r1, #1]
 80041b2:	780b      	ldrb	r3, [r1, #0]
 80041b4:	2a01      	cmp	r2, #1
 80041b6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80041ba:	d112      	bne.n	80041e2 <USB_EPSetStall+0x32>
 80041bc:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	db06      	blt.n	80041d2 <USB_EPSetStall+0x22>
 80041c4:	b12b      	cbz	r3, 80041d2 <USB_EPSetStall+0x22>
 80041c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80041ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80041d2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80041d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041da:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80041de:	2000      	movs	r0, #0
 80041e0:	4770      	bx	lr
 80041e2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	db06      	blt.n	80041f8 <USB_EPSetStall+0x48>
 80041ea:	b12b      	cbz	r3, 80041f8 <USB_EPSetStall+0x48>
 80041ec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80041f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041f4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80041f8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80041fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004200:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004204:	e7eb      	b.n	80041de <USB_EPSetStall+0x2e>

08004206 <USB_EPClearStall>:
 8004206:	780b      	ldrb	r3, [r1, #0]
 8004208:	784a      	ldrb	r2, [r1, #1]
 800420a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800420e:	78cb      	ldrb	r3, [r1, #3]
 8004210:	2a01      	cmp	r2, #1
 8004212:	f1a3 0302 	sub.w	r3, r3, #2
 8004216:	b2db      	uxtb	r3, r3
 8004218:	d10f      	bne.n	800423a <USB_EPClearStall+0x34>
 800421a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800421e:	2b01      	cmp	r3, #1
 8004220:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004224:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8004228:	d805      	bhi.n	8004236 <USB_EPClearStall+0x30>
 800422a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004232:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004236:	2000      	movs	r0, #0
 8004238:	4770      	bx	lr
 800423a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800423e:	2b01      	cmp	r3, #1
 8004240:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004244:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
 8004248:	bf9e      	ittt	ls
 800424a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800424e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8004252:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8004256:	e7ee      	b.n	8004236 <USB_EPClearStall+0x30>

08004258 <USB_SetDevAddress>:
 8004258:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800425c:	0109      	lsls	r1, r1, #4
 800425e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004262:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8004266:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800426a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800426e:	4319      	orrs	r1, r3
 8004270:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
 8004274:	2000      	movs	r0, #0
 8004276:	4770      	bx	lr

08004278 <USB_DevConnect>:
 8004278:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800427c:	f023 0303 	bic.w	r3, r3, #3
 8004280:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
 8004284:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004288:	f023 0302 	bic.w	r3, r3, #2
 800428c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 8004290:	2000      	movs	r0, #0
 8004292:	4770      	bx	lr

08004294 <USB_DevDisconnect>:
 8004294:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004298:	f023 0303 	bic.w	r3, r3, #3
 800429c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
 80042a0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 80042ac:	2000      	movs	r0, #0
 80042ae:	4770      	bx	lr

080042b0 <USB_ReadInterrupts>:
 80042b0:	6942      	ldr	r2, [r0, #20]
 80042b2:	6980      	ldr	r0, [r0, #24]
 80042b4:	4010      	ands	r0, r2
 80042b6:	4770      	bx	lr

080042b8 <USB_ReadDevAllOutEpInterrupt>:
 80042b8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80042bc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80042c0:	69c0      	ldr	r0, [r0, #28]
 80042c2:	4018      	ands	r0, r3
 80042c4:	0c00      	lsrs	r0, r0, #16
 80042c6:	4770      	bx	lr

080042c8 <USB_ReadDevAllInEpInterrupt>:
 80042c8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80042cc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80042d0:	69c0      	ldr	r0, [r0, #28]
 80042d2:	4018      	ands	r0, r3
 80042d4:	b280      	uxth	r0, r0
 80042d6:	4770      	bx	lr

080042d8 <USB_ReadDevOutEPInterrupt>:
 80042d8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80042dc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80042e0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
 80042e4:	6940      	ldr	r0, [r0, #20]
 80042e6:	4010      	ands	r0, r2
 80042e8:	4770      	bx	lr

080042ea <USB_ReadDevInEPInterrupt>:
 80042ea:	b510      	push	{r4, lr}
 80042ec:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
 80042f0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80042f4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80042f8:	f001 010f 	and.w	r1, r1, #15
 80042fc:	40cb      	lsrs	r3, r1
 80042fe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	6880      	ldr	r0, [r0, #8]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	4323      	orrs	r3, r4
 800430a:	4018      	ands	r0, r3
 800430c:	bd10      	pop	{r4, pc}

0800430e <USB_GetMode>:
 800430e:	6940      	ldr	r0, [r0, #20]
 8004310:	f000 0001 	and.w	r0, r0, #1
 8004314:	4770      	bx	lr

08004316 <USB_ActivateSetup>:
 8004316:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800431a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800431e:	f023 0307 	bic.w	r3, r3, #7
 8004322:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004326:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 8004332:	2000      	movs	r0, #0
 8004334:	4770      	bx	lr
	...

08004338 <USB_EP0_OutStart>:
 8004338:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <USB_EP0_OutStart+0x34>)
 800433c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004340:	4291      	cmp	r1, r2
 8004342:	d903      	bls.n	800434c <USB_EP0_OutStart+0x14>
 8004344:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004348:	2a00      	cmp	r2, #0
 800434a:	db0d      	blt.n	8004368 <USB_EP0_OutStart+0x30>
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004356:	611a      	str	r2, [r3, #16]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	f042 0218 	orr.w	r2, r2, #24
 800435e:	611a      	str	r2, [r3, #16]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8004366:	611a      	str	r2, [r3, #16]
 8004368:	2000      	movs	r0, #0
 800436a:	4770      	bx	lr
 800436c:	4f54300a 	.word	0x4f54300a

08004370 <_Z13N2kHasElapsedmmm>:
// Input:
//   - Start    Start time
//   - Elapsed  How much should be elapsed from start
//   - Now      Compare (current) time, optional, default N2kMillis() 
// Return true, when Now>Start+Elapsed
inline bool N2kHasElapsed(uint32_t Start, uint32_t Elapsed, uint32_t Now=N2kMillis()) { 
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  return Now-(Start+Elapsed)<LONG_MAX; 
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800438a:	4293      	cmp	r3, r2
 800438c:	bf34      	ite	cc
 800438e:	2301      	movcc	r3, #1
 8004390:	2300      	movcs	r3, #0
 8004392:	b2db      	uxtb	r3, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <_ZN9tNMEA200018tDeviceInformationC1Ev>:
    } tUnionDeviceInformation;

    tUnionDeviceInformation DeviceInformation;

  public:
    tDeviceInformation() { DeviceInformation.Name=0; }
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9c1 2300 	strd	r2, r3, [r1]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>:
    void SetUniqueNumber(uint32_t _UniqueNumber) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0xffe00000) | (_UniqueNumber&0x1fffff); }
    uint32_t GetUniqueNumber() const { return DeviceInformation.UnicNumberAndManCode&0x1fffff; }
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>:
    void SetManufacturerCode(uint16_t _ManufacturerCode) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0x1fffff) | (((unsigned long)(_ManufacturerCode&0x7ff))<<21); }
    uint16_t GetManufacturerCode() const { return DeviceInformation.UnicNumberAndManCode>>21; }
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	0d5b      	lsrs	r3, r3, #21
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>:
    void SetIndustryGroup(unsigned char _IndustryGroup) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0x0f) | (_IndustryGroup<<4) | 0x80; }
    unsigned char GetIndustryGroup() const { return (DeviceInformation.IndustryGroupAndSystemInstance>>4) & 0x07; }
    void SetSystemInstance(unsigned char _SystemInstance) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0xf0) | (_SystemInstance&0x0f); }
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }

    uint64_t GetName() const { return DeviceInformation.Name; }
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <_ZN9tNMEA200011IsBroadcastEh>:
        if (v) { ForwardMode |= HandleModeBit_OnlyKnownMessages;  } else { ForwardMode &= ~HandleModeBit_OnlyKnownMessages; }
      }

    void SetDebugMode(tDebugMode _dbMode);

    static bool IsBroadcast(unsigned char Source) { return Source==0xff; }
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	71fb      	strb	r3, [r7, #7]
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
	...

08004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>:
#include "NMEA2000.h"

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
tN2kGroupFunctionHandler::tN2kGroupFunctionHandler(tNMEA2000 *_pNMEA2000, unsigned long _PGN)  {
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m+0x40>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]
  pNext=0;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
  pNMEA2000=_pNMEA2000;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	611a      	str	r2, [r3, #16]
  PGN=_PGN;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]
  Proprietary=tNMEA2000::IsProprietaryMessage(PGN);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f004 fcf7 	bl	8008e4c <_ZN9tNMEA200020IsProprietaryMessageEm>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	731a      	strb	r2, [r3, #12]
}
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08010c28 	.word	0x08010c28

08004474 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Handle(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	b08f      	sub	sp, #60	; 0x3c
 8004478:	af04      	add	r7, sp, #16
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  if ( PGN!=PGNForGroupFunction && PGN!=0 ) return false;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d005      	beq.n	800449a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 8004496:	2300      	movs	r3, #0
 8004498:	e126      	b.n	80046e8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x274>

  bool handled=false;
 800449a:	2300      	movs	r3, #0
 800449c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t ManufacturerCode;
  uint8_t IndustryGroup;
  uint8_t UniqueID;
  uint8_t NumberOfSelectionPairs;
  uint8_t NumberOfParameterPairs;
  bool Propr=(PGN!=0?Proprietary:tNMEA2000::IsProprietaryMessage(PGNForGroupFunction));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x44>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	7b1b      	ldrb	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e008      	b.n	80044ca <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x56>
 80044b8:	6838      	ldr	r0, [r7, #0]
 80044ba:	f004 fcc7 	bl	8008e4c <_ZN9tNMEA200020IsProprietaryMessageEm>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  switch (GroupFunctionCode) {
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	f200 8107 	bhi.w	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	080044f9 	.word	0x080044f9
 80044e0:	0800453b 	.word	0x0800453b
 80044e4:	0800458d 	.word	0x0800458d
 80044e8:	080045cf 	.word	0x080045cf
 80044ec:	08004649 	.word	0x08004649
 80044f0:	08004651 	.word	0x08004651
 80044f4:	080046cb 	.word	0x080046cb
    case N2kgfc_Request:
      uint32_t TransmissionInterval;
      uint16_t TransmissionIntervalOffset;

        if (ParseRequestParams(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs)) {
 80044f8:	f107 0320 	add.w	r3, r7, #32
 80044fc:	f107 021a 	add.w	r2, r7, #26
 8004500:	f107 011c 	add.w	r1, r7, #28
 8004504:	68b8      	ldr	r0, [r7, #8]
 8004506:	f000 fab3 	bl	8004a70 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80e0 	beq.w	80046d2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
          handled=HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3304      	adds	r3, #4
 8004518:	681c      	ldr	r4, [r3, #0]
 800451a:	69f9      	ldr	r1, [r7, #28]
 800451c:	8b78      	ldrh	r0, [r7, #26]
 800451e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004524:	9201      	str	r2, [sp, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4603      	mov	r3, r0
 800452a:	460a      	mov	r2, r1
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	47a0      	blx	r4
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 8004538:	e0cb      	b.n	80046d2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
    case N2kgfc_Command:
      uint8_t PrioritySetting;

        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	7b5b      	ldrb	r3, [r3, #13]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff65 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0xde>
          handled=true;  // We can mark this handled, since command is not allowed to broadcast.
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
          }
        }
      break;
 8004550:	e0c1      	b.n	80046d6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
 8004552:	f107 0220 	add.w	r2, r7, #32
 8004556:	f107 0319 	add.w	r3, r7, #25
 800455a:	4619      	mov	r1, r3
 800455c:	68b8      	ldr	r0, [r7, #8]
 800455e:	f000 fad7 	bl	8004b10 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80b6 	beq.w	80046d6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	681c      	ldr	r4, [r3, #0]
 8004572:	7e7a      	ldrb	r2, [r7, #25]
 8004574:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	460b      	mov	r3, r1
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	47a0      	blx	r4
 8004584:	4603      	mov	r3, r0
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800458a:	e0a4      	b.n	80046d6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
    case N2kgfc_Acknowledge:
      tN2kGroupFunctionPGNErrorCode PGNErrorCode;
      tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode;

        if (ParseAcknowledgeParams(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs)) {
 800458c:	f107 0320 	add.w	r3, r7, #32
 8004590:	f107 0217 	add.w	r2, r7, #23
 8004594:	f107 0118 	add.w	r1, r7, #24
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f000 fafb 	bl	8004b94 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 809a 	beq.w	80046da <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
          handled=HandleAcknowledge(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs,iDev);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	681c      	ldr	r4, [r3, #0]
 80045ae:	7e39      	ldrb	r1, [r7, #24]
 80045b0:	7df8      	ldrb	r0, [r7, #23]
 80045b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b8:	9201      	str	r2, [sp, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4603      	mov	r3, r0
 80045be:	460a      	mov	r2, r1
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	47a0      	blx	r4
 80045c6:	4603      	mov	r3, r0
 80045c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 80045cc:	e085      	b.n	80046da <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
    case N2kgfc_Read:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	7b5b      	ldrb	r3, [r3, #13]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff1b 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x172>
          handled=true;  // We can mark this handled, since read is not allowed to broadcast.
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 80045e4:	e07b      	b.n	80046de <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 80045e6:	f107 0022 	add.w	r0, r7, #34	; 0x22
 80045ea:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80045ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80045f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045f6:	9302      	str	r3, [sp, #8]
 80045f8:	f107 0320 	add.w	r3, r7, #32
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	4603      	mov	r3, r0
 8004606:	68b8      	ldr	r0, [r7, #8]
 8004608:	f000 faf8 	bl	8004bfc <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d065      	beq.n	80046de <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3310      	adds	r3, #16
 8004618:	681c      	ldr	r4, [r3, #0]
 800461a:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 800461c:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8004620:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004624:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004628:	f897 1020 	ldrb.w	r1, [r7, #32]
 800462c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800462e:	9003      	str	r0, [sp, #12]
 8004630:	9102      	str	r1, [sp, #8]
 8004632:	9201      	str	r2, [sp, #4]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4633      	mov	r3, r6
 8004638:	462a      	mov	r2, r5
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	47a0      	blx	r4
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004646:	e04a      	b.n	80046de <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
    case N2kgfc_ReadReply:
      handled=true;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800464e:	e049      	b.n	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
    case N2kgfc_Write:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	7b5b      	ldrb	r3, [r3, #13]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff feda 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x1f4>
          handled=true;  // We can mark this handled, since write is not allowed to broadcast.
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 8004666:	e03c      	b.n	80046e2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 8004668:	f107 0022 	add.w	r0, r7, #34	; 0x22
 800466c:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8004670:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004678:	9302      	str	r3, [sp, #8]
 800467a:	f107 0320 	add.w	r3, r7, #32
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	4603      	mov	r3, r0
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f000 fab7 	bl	8004bfc <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d026      	beq.n	80046e2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3318      	adds	r3, #24
 800469a:	681c      	ldr	r4, [r3, #0]
 800469c:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 800469e:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 80046a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80046a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80046aa:	f897 1020 	ldrb.w	r1, [r7, #32]
 80046ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80046b0:	9003      	str	r0, [sp, #12]
 80046b2:	9102      	str	r1, [sp, #8]
 80046b4:	9201      	str	r2, [sp, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	4633      	mov	r3, r6
 80046ba:	462a      	mov	r2, r5
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	47a0      	blx	r4
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80046c8:	e00b      	b.n	80046e2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
    case N2kgfc_WriteReply:
      handled=true;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80046d0:	e008      	b.n	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80046d2:	bf00      	nop
 80046d4:	e006      	b.n	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80046d6:	bf00      	nop
 80046d8:	e004      	b.n	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80046e2:	bf00      	nop

  }

  return handled;
 80046e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	372c      	adds	r7, #44	; 0x2c
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046f0 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt>:
                              bool UseIntervalLimits,
                              uint32_t IntervalMax,
                              uint32_t IntervalMin,
                              bool UseOffsetLimits,
                              uint16_t OffsetMax
                              ) {
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	460b      	mov	r3, r1
 8004700:	80fb      	strh	r3, [r7, #6]
 8004702:	4613      	mov	r3, r2
 8004704:	717b      	strb	r3, [r7, #5]
           // happy, we accept also 0 offset
           (TransmissionIntervalOffset==0xffff
            || TransmissionIntervalOffset==0
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
           )
           ?
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470c:	d014      	beq.n	8004738 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0xFFFFFFFE  // Restore default
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f113 0f02 	cmn.w	r3, #2
 8004714:	d010      	beq.n	8004738 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0           // Turn off
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || ( UseIntervalLimits && TransmissionInterval>=IntervalMin && TransmissionInterval<=IntervalMax)
 800471c:	797b      	ldrb	r3, [r7, #5]
 800471e:	f083 0301 	eor.w	r3, r3, #1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11a      	bne.n	800475e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	429a      	cmp	r2, r3
 800472e:	d316      	bcc.n	800475e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	429a      	cmp	r2, r3
 8004736:	d812      	bhi.n	800475e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
           ?
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || TransmissionIntervalOffset==0
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
 8004748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800474c:	f083 0301 	eor.w	r3, r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800475a:	429a      	cmp	r2, r3
 800475c:	d901      	bls.n	8004762 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
           ?
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x74>
 8004762:	2300      	movs	r3, #0
          N2kgfTPec_Acknowledge:
          N2kgfTPec_TransmitIntervalOrPriorityNotSupported);
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800476e:	b5b0      	push	{r4, r5, r7, lr}
 8004770:	b08a      	sub	sp, #40	; 0x28
 8004772:	af04      	add	r7, sp, #16
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	807b      	strh	r3, [r7, #2]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691c      	ldr	r4, [r3, #16]
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f000 f944 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8004786:	4603      	mov	r3, r0
 8004788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478a:	4619      	mov	r1, r3
 800478c:	4620      	mov	r0, r4
 800478e:	f004 ff77 	bl	8009680 <_ZN9tNMEA20007IsTxPGNEmi>
 8004792:	4603      	mov	r3, r0
 8004794:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681c      	ldr	r4, [r3, #0]
 800479c:	887a      	ldrh	r2, [r7, #2]
 800479e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	2300      	movs	r3, #0
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	2332      	movs	r3, #50	; 0x32
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	f06f 030f 	mvn.w	r3, #15
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	47a0      	blx	r4
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_PGNTemporarilyNotAvailable:N2kgfPGNec_PGNNotSupported);
 80047be:	7d7b      	ldrb	r3, [r7, #21]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5a>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e000      	b.n	80047ca <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5c>
 80047c8:	2301      	movs	r3, #1
 80047ca:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 80047cc:	2300      	movs	r3, #0
 80047ce:	753b      	strb	r3, [r7, #20]

    if ( PGNec==N2kgfPGNec_PGNNotSupported ) TORec=N2kgfTPec_Acknowledge; // Always acknoledge for unknown PGN.
 80047d0:	7dbb      	ldrb	r3, [r7, #22]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x6c>
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
    if ( PGNec==N2kgfPGNec_PGNTemporarilyNotAvailable ) {
 80047da:	7dbb      	ldrb	r3, [r7, #22]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d107      	bne.n	80047f0 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      if ( TORec==N2kgfTPec_TransmitIntervalOrPriorityNotSupported ) { // Acknowledge PGN for known PGN but for invalid priority
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x7e>
        PGNec=N2kgfPGNec_Acknowledge;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75bb      	strb	r3, [r7, #22]
 80047ea:	e001      	b.n	80047f0 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      } else {
        TORec=N2kgfTPec_Acknowledge; //N2kgfTPec_RequestNotSupported;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
      }
    }

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	7b5b      	ldrb	r3, [r3, #13]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fe0a 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f083 0301 	eor.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0xc6>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	691c      	ldr	r4, [r3, #16]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	7b1d      	ldrb	r5, [r3, #12]
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f000 f8fd 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8004814:	4602      	mov	r2, r0
 8004816:	7d3b      	ldrb	r3, [r7, #20]
 8004818:	9303      	str	r3, [sp, #12]
 800481a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800481e:	9302      	str	r3, [sp, #8]
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	7dbb      	ldrb	r3, [r7, #22]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482c:	4629      	mov	r1, r5
 800482e:	4620      	mov	r0, r4
 8004830:	f000 faaa 	bl	8004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      PGNec,
                      TORec,
                      NumberOfParameterPairs, PARec);
    }

    return true;
 8004834:	2301      	movs	r3, #1
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bdb0      	pop	{r4, r5, r7, pc}

0800483e <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t  NumberOfParameterPairs, int iDev) {
 800483e:	b5b0      	push	{r4, r5, r7, lr}
 8004840:	b08a      	sub	sp, #40	; 0x28
 8004842:	af04      	add	r7, sp, #16
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	4611      	mov	r1, r2
 800484a:	461a      	mov	r2, r3
 800484c:	460b      	mov	r3, r1
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	4613      	mov	r3, r2
 8004852:	71bb      	strb	r3, [r7, #6]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	691c      	ldr	r4, [r3, #16]
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	f000 f8d8 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800485e:	4603      	mov	r3, r0
 8004860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004862:	4619      	mov	r1, r3
 8004864:	4620      	mov	r0, r4
 8004866:	f004 ff0b 	bl	8009680 <_ZN9tNMEA20007IsTxPGNEmi>
 800486a:	4603      	mov	r3, r0
 800486c:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_Acknowledge:N2kgfPGNec_PGNNotSupported);
 800486e:	7dbb      	ldrb	r3, [r7, #22]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3a>
 8004874:	2300      	movs	r3, #0
 8004876:	e000      	b.n	800487a <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3c>
 8004878:	2301      	movs	r3, #1
 800487a:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=N2kgfTPec_Acknowledge;
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 8004880:	2300      	movs	r3, #0
 8004882:	753b      	strb	r3, [r7, #20]

		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) TORec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d105      	bne.n	8004896 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	2b0f      	cmp	r3, #15
 800488e:	d102      	bne.n	8004896 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	2b09      	cmp	r3, #9
 8004894:	d001      	beq.n	800489a <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x5c>
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]

    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691c      	ldr	r4, [r3, #16]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	7b1d      	ldrb	r5, [r3, #12]
 80048a2:	68b8      	ldr	r0, [r7, #8]
 80048a4:	f000 f8b3 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 80048a8:	4602      	mov	r2, r0
 80048aa:	7d3b      	ldrb	r3, [r7, #20]
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	79bb      	ldrb	r3, [r7, #6]
 80048b0:	9302      	str	r3, [sp, #8]
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	7d7b      	ldrb	r3, [r7, #21]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	4629      	mov	r1, r5
 80048c0:	4620      	mov	r0, r4
 80048c2:	f000 fa61 	bl	8004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    TORec,
                    NumberOfParameterPairs, PARec);

    return true;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bdb0      	pop	{r4, r5, r7, pc}

080048d0 <_ZN24tN2kGroupFunctionHandler17HandleAcknowledgeERK7tN2kMsg29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodehi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleAcknowledge(const tN2kMsg &/*N2kMsg*/,
                                   tN2kGroupFunctionPGNErrorCode /*PGNErrorCode*/,
                                   tN2kGroupFunctionTransmissionOrPriorityErrorCode /*TransmissionOrPriorityErrorCode*/,
                                   uint8_t /*ParameterCount*/,
                                   int /*iDev*/) {
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	460b      	mov	r3, r1
 80048e0:	71fb      	strb	r3, [r7, #7]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71bb      	strb	r3, [r7, #6]
    // As default, simply return true meaning that received acknowledge has been handled.
    return true;
 80048e6:	2301      	movs	r3, #1
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 80048f2:	b5b0      	push	{r4, r5, r7, lr}
 80048f4:	b08a      	sub	sp, #40	; 0x28
 80048f6:	af04      	add	r7, sp, #16
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	4611      	mov	r1, r2
 80048fe:	461a      	mov	r2, r3
 8004900:	460b      	mov	r3, r1
 8004902:	80fb      	strh	r3, [r7, #6]
 8004904:	4613      	mov	r3, r2
 8004906:	717b      	strb	r3, [r7, #5]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691c      	ldr	r4, [r3, #16]
 800490c:	68b8      	ldr	r0, [r7, #8]
 800490e:	f000 f87e 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8004912:	4603      	mov	r3, r0
 8004914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004916:	4619      	mov	r1, r3
 8004918:	4620      	mov	r0, r4
 800491a:	f004 feb1 	bl	8009680 <_ZN9tNMEA20007IsTxPGNEmi>
 800491e:	4603      	mov	r3, r0
 8004920:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3a>
 8004928:	2306      	movs	r3, #6
 800492a:	e000      	b.n	800492e <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3c>
 800492c:	2301      	movs	r3, #1
 800492e:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691c      	ldr	r4, [r3, #16]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	7b1d      	ldrb	r5, [r3, #12]
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f000 f868 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800493e:	4602      	mov	r2, r0
 8004940:	2300      	movs	r3, #0
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	2300      	movs	r3, #0
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	7dbb      	ldrb	r3, [r7, #22]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004956:	4629      	mov	r1, r5
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fa15 	bl	8004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);
    return true;
 800495e:	2301      	movs	r3, #1
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bdb0      	pop	{r4, r5, r7, pc}

08004968 <_ZN24tN2kGroupFunctionHandler21HandleReadFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleReadFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
    return true;
 8004974:	2301      	movs	r3, #1
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 8004980:	b5b0      	push	{r4, r5, r7, lr}
 8004982:	b08a      	sub	sp, #40	; 0x28
 8004984:	af04      	add	r7, sp, #16
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	4611      	mov	r1, r2
 800498c:	461a      	mov	r2, r3
 800498e:	460b      	mov	r3, r1
 8004990:	80fb      	strh	r3, [r7, #6]
 8004992:	4613      	mov	r3, r2
 8004994:	717b      	strb	r3, [r7, #5]
    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691c      	ldr	r4, [r3, #16]
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f000 f837 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 80049a0:	4603      	mov	r3, r0
 80049a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049a4:	4619      	mov	r1, r3
 80049a6:	4620      	mov	r0, r4
 80049a8:	f004 fe6a 	bl	8009680 <_ZN9tNMEA20007IsTxPGNEmi>
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3a>
 80049b6:	2306      	movs	r3, #6
 80049b8:	e000      	b.n	80049bc <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3c>
 80049ba:	2301      	movs	r3, #1
 80049bc:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691c      	ldr	r4, [r3, #16]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	7b1d      	ldrb	r5, [r3, #12]
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	f000 f821 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 80049cc:	4602      	mov	r2, r0
 80049ce:	2300      	movs	r3, #0
 80049d0:	9303      	str	r3, [sp, #12]
 80049d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	2300      	movs	r3, #0
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	7dbb      	ldrb	r3, [r7, #22]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e4:	4629      	mov	r1, r5
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 f9ce 	bl	8004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);

    return true;
 80049ec:	2301      	movs	r3, #1
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bdb0      	pop	{r4, r5, r7, pc}

080049f6 <_ZN24tN2kGroupFunctionHandler22HandleWriteFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleWriteFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
    return true;
 8004a02:	2301      	movs	r3, #1
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>:

// Static functions for PGN 126208 handling
//*****************************************************************************
unsigned long tN2kGroupFunctionHandler::GetPGNForGroupFunction(const tN2kMsg &N2kMsg) {
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  int Index=1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
  return N2kMsg.Get3ByteUInt(Index);
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f002 fa7a 	bl	8006f1e <_ZNK7tN2kMsg12Get3ByteUIntERim>
 8004a2a:	4603      	mov	r3, r0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Parse(const tN2kMsg &N2kMsg,
                            tN2kGroupFunctionCode &GroupFunctionCode,
                            unsigned long &PGNForGroupFunction) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x38>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d001      	beq.n	8004a4e <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x1a>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e00a      	b.n	8004a64 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x30>

  GroupFunctionCode=(tN2kGroupFunctionCode)(N2kMsg.Data[0]);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	7d1a      	ldrb	r2, [r3, #20]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	701a      	strb	r2, [r3, #0]
  PGNForGroupFunction=GetPGNForGroupFunction(N2kMsg);
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ffd9 	bl	8004a0e <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]

  return true;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	0001ed00 	.word	0x0001ed00

08004a70 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseRequestParams(const tN2kMsg &N2kMsg,
                               uint32_t &TransmissionInterval,
                               uint16_t &TransmissionIntervalOffset,
                               uint8_t  &NumberOfParameterPairs) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x6c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d001      	beq.n	8004a8c <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x1c>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e023      	b.n	8004ad4 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x64>
  int Index=N2kgf_OffsetToParams;
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	617b      	str	r3, [r7, #20]
  TransmissionInterval=N2kMsg.Get4ByteUInt(Index);
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a98:	4619      	mov	r1, r3
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f002 fa59 	bl	8006f52 <_ZNK7tN2kMsg12Get4ByteUIntERim>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	601a      	str	r2, [r3, #0]
  TransmissionIntervalOffset=N2kMsg.Get2ByteUInt(Index);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aae:	4619      	mov	r1, r3
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f002 fa19 	bl	8006ee8 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	801a      	strh	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f002 f9f5 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	701a      	strb	r2, [r3, #0]

  return true;
 8004ad2:	2301      	movs	r3, #1
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	0001ed00 	.word	0x0001ed00

08004ae0 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseRequestPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x2c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d001      	beq.n	8004af8 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x18>
 8004af4:	2300      	movs	r3, #0
 8004af6:	e003      	b.n	8004b00 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToRequestPairParameters;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	220b      	movs	r2, #11
 8004afc:	601a      	str	r2, [r3, #0]

  return true;
 8004afe:	2301      	movs	r3, #1
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	0001ed00 	.word	0x0001ed00

08004b10 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseCommandParams(const tN2kMsg &N2kMsg,
                               uint8_t &PrioritySetting,
                               uint8_t &NumberOfParameterPairs) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x50>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d001      	beq.n	8004b2a <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x1a>
 8004b26:	2300      	movs	r3, #0
 8004b28:	e016      	b.n	8004b58 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x48>
  int Index=N2kgf_OffsetToParams;
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	617b      	str	r3, [r7, #20]
  PrioritySetting=N2kMsg.GetByte(Index);
 8004b2e:	f107 0314 	add.w	r3, r7, #20
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f002 f9bd 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8004b42:	f107 0314 	add.w	r3, r7, #20
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f002 f9b3 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	701a      	strb	r2, [r3, #0]

  return true;
 8004b56:	2301      	movs	r3, #1
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	0001ed00 	.word	0x0001ed00

08004b64 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseCommandPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x2c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d001      	beq.n	8004b7c <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x18>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e003      	b.n	8004b84 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToCommandPairParameters;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2206      	movs	r2, #6
 8004b80:	601a      	str	r2, [r3, #0]

  return true;
 8004b82:	2301      	movs	r3, #1
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	0001ed00 	.word	0x0001ed00

08004b94 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseAcknowledgeParams(const tN2kMsg &N2kMsg,
                               tN2kGroupFunctionPGNErrorCode &PGNErrorCode,
                               tN2kGroupFunctionTransmissionOrPriorityErrorCode &TransmissionOrPriorityErrorCode,
                               uint8_t &NumberOfParameterPairs) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  PGNErrorCode=N2kgfPGNec_PGNNotSupported;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=0;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a0f      	ldr	r2, [pc, #60]	; (8004bf8 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x64>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d001      	beq.n	8004bc2 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x2e>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e015      	b.n	8004bee <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x5a>
  int Index=N2kgf_OffsetToParams;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	613b      	str	r3, [r7, #16]
  uint8_t b=N2kMsg.GetByte(Index);
 8004bc6:	f107 0310 	add.w	r3, r7, #16
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f002 f971 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]
  PGNErrorCode=(tN2kGroupFunctionPGNErrorCode)(b&0x0f);
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=(tN2kGroupFunctionTransmissionOrPriorityErrorCode)(b>>4);
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	701a      	strb	r2, [r3, #0]

  return true;
 8004bec:	2301      	movs	r3, #1
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	0001ed00 	.word	0x0001ed00

08004bfc <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>:
                               uint16_t &ManufacturerCode,
                               uint8_t &IndustryGroup,
                               uint8_t &UniqueID,
                               uint8_t &NumberOfSelectionPairs,
                               uint8_t &NumberOfParameterPairs,
                               bool Proprietary) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d001      	beq.n	8004c18 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x1c>
 8004c14:	2300      	movs	r3, #0
 8004c16:	e041      	b.n	8004c9c <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa0>
  int Index=N2kgf_OffsetToParams;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	613b      	str	r3, [r7, #16]
  ManufacturerCode=0xffff; // We need here information is PGN proprietary or not
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c22:	801a      	strh	r2, [r3, #0]
  IndustryGroup=0xff;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	22ff      	movs	r2, #255	; 0xff
 8004c28:	701a      	strb	r2, [r3, #0]
  if ( Proprietary ) {
 8004c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d015      	beq.n	8004c5e <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x62>
    uint16_t ProprietaryInfo=N2kMsg.Get2ByteUInt(Index);
 8004c32:	f107 0310 	add.w	r3, r7, #16
 8004c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f002 f953 	bl	8006ee8 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8004c42:	4603      	mov	r3, r0
 8004c44:	82fb      	strh	r3, [r7, #22]
    ManufacturerCode=ProprietaryInfo & 0x07ff;
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	801a      	strh	r2, [r3, #0]
    IndustryGroup=(ProprietaryInfo>>13) &0x07;
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	0b5b      	lsrs	r3, r3, #13
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	701a      	strb	r2, [r3, #0]
  }
  UniqueID=N2kMsg.GetByte(Index);
 8004c5e:	f107 0310 	add.w	r3, r7, #16
 8004c62:	4619      	mov	r1, r3
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f002 f925 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	701a      	strb	r2, [r3, #0]
  NumberOfSelectionPairs=N2kMsg.GetByte(Index);
 8004c72:	f107 0310 	add.w	r3, r7, #16
 8004c76:	4619      	mov	r1, r3
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f002 f91b 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f002 f911 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	701a      	strb	r2, [r3, #0]

  return true;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	0001ed00 	.word	0x0001ed00

08004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>:

//*****************************************************************************
void tN2kGroupFunctionHandler::SetStartAcknowledge(tN2kMsg &N2kMsg, unsigned char Destination, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	72fb      	strb	r3, [r7, #11]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	72bb      	strb	r3, [r7, #10]
  N2kMsg.Clear();
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	4798      	blx	r3
	N2kMsg.SetPGN(126208L);
 8004cc6:	4914      	ldr	r1, [pc, #80]	; (8004d18 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh+0x70>)
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f001 ff83 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=3;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	711a      	strb	r2, [r3, #4]
  N2kMsg.Destination=Destination;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	7afa      	ldrb	r2, [r7, #11]
 8004cd8:	735a      	strb	r2, [r3, #13]
	N2kMsg.AddByte(N2kgfc_Acknowledge);
 8004cda:	2102      	movs	r1, #2
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f002 f8b9 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f002 f87d 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
  N2kMsg.AddByte(PGNErrorCode | TransmissionOrPriorityErrorCode<<4);
 8004cec:	7e3b      	ldrb	r3, [r7, #24]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	b25a      	sxtb	r2, r3
 8004cf2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f002 f8a8 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NumberOfParameterPairs);
 8004d04:	7f3b      	ldrb	r3, [r7, #28]
 8004d06:	4619      	mov	r1, r3
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f002 f8a3 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	0001ed00 	.word	0x0001ed00

08004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>:
}

//*****************************************************************************
void tN2kGroupFunctionHandler::AddAcknowledgeParameter(tN2kMsg &N2kMsg,
                                         uint8_t ParameterPairIndex,
                                         tN2kGroupFunctionParameterErrorCode ErrorCode) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	70bb      	strb	r3, [r7, #2]
  if ( ((ParameterPairIndex % 2) == 0) && (N2kMsg.DataLen>0) ) {
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd08      	ble.n	8004d50 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
    N2kMsg.AddByte((uint8_t)(ErrorCode) | 0x0f << 4);
 8004d3e:	78bb      	ldrb	r3, [r7, #2]
 8004d40:	f063 030f 	orn	r3, r3, #15
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f002 f883 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 8004d4e:	e017      	b.n	8004d80 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x64>
  } else {
    // Should actually add AddBits to N2kMsg
    N2kMsg.Data[N2kMsg.DataLen-1]=(N2kMsg.Data[N2kMsg.DataLen-1] & 0x0f) | ((uint8_t)(ErrorCode) << 4);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	7d1b      	ldrb	r3, [r3, #20]
 8004d5c:	b25b      	sxtb	r3, r3
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	b25a      	sxtb	r2, r3
 8004d64:	78bb      	ldrb	r3, [r7, #2]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	b25a      	sxtb	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b2d1      	uxtb	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	751a      	strb	r2, [r3, #20]
  }
}
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>:
//*****************************************************************************
void tN2kGroupFunctionHandler::SendAcknowledge(tNMEA2000 *pNMEA2000, unsigned char Destination, int iDev, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs,
                                         tN2kGroupFunctionParameterErrorCode ParameterErrorCodeForAll) {
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b0c7      	sub	sp, #284	; 0x11c
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8004d92:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8004d96:	6020      	str	r0, [r4, #0]
 8004d98:	4608      	mov	r0, r1
 8004d9a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8004d9e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8004da2:	600a      	str	r2, [r1, #0]
 8004da4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004da8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004db2:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8004db6:	4602      	mov	r2, r0
 8004db8:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kRMsg;
 8004dba:	f107 0010 	add.w	r0, r7, #16
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2206      	movs	r2, #6
 8004dc6:	210f      	movs	r1, #15
 8004dc8:	f001 fed2 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

    // As default we respond with not supported.
    SetStartAcknowledge(N2kRMsg,Destination,PGN,
 8004dcc:	f897 4120 	ldrb.w	r4, [r7, #288]	; 0x120
 8004dd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dd4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8004dd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ddc:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8004de0:	7819      	ldrb	r1, [r3, #0]
 8004de2:	f107 0010 	add.w	r0, r7, #16
 8004de6:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4623      	mov	r3, r4
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	f7ff ff57 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        PGNErrorCode,
                        TransmissionOrPriorityErrorCode,
                        NumberOfParameterPairs);
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004e00:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8004e04:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d20e      	bcs.n	8004e2a <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0xa2>
      AddAcknowledgeParameter(N2kRMsg,ParamIndex,ParameterErrorCodeForAll);
 8004e0c:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 8004e10:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff7f 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 8004e1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004e22:	3301      	adds	r3, #1
 8004e24:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004e28:	e7ea      	b.n	8004e00 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0x78>
    }
    pNMEA2000->SendMsg(N2kRMsg,iDev);
 8004e2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e2e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8004e32:	f107 0110 	add.w	r1, r7, #16
 8004e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	f005 fd1b 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
}
 8004e46:	bf00      	nop
 8004e48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}

08004e50 <_ZNK7tN2kMsg11IsTPMessageEv>:
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
protected:
  bool TPMessage;
public:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
  bool IsTPMessage() const { return TPMessage; }
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>:
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
        Match=false;
      } else ErrorCode=N2kgfpec_Acknowledge;
    }

    void MatchRequestField(const char * FieldVal, const char * MatchVal, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
    {
      Match&=(strcmp(FieldVal,MatchVal)==0);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	461c      	mov	r4, r3
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	68b8      	ldr	r0, [r7, #8]
 8004e80:	f7fb f9d2 	bl	8000228 <strcmp>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4023      	ands	r3, r4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	701a      	strb	r2, [r3, #0]
      ErrorCode = ( Match ? N2kgfpec_Acknowledge : N2kgfpec_RequestOrCommandParameterOutOfRange );
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x44>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	e000      	b.n	8004eae <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x46>
 8004eac:	2203      	movs	r2, #3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	701a      	strb	r2, [r3, #0]
    }
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}

08004eba <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>:
    unsigned char GetDeviceInstanceLower() const { return DeviceInformation.DeviceInstance & 0x07; }
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>:
    unsigned char GetDeviceInstanceUpper() const { return (DeviceInformation.DeviceInstance>>3) & 0x1f; }
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	791b      	ldrb	r3, [r3, #4]
 8004ee2:	08db      	lsrs	r3, r3, #3
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>:
    unsigned char GetDeviceFunction() const { return DeviceInformation.DeviceFunction; }
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	795b      	ldrb	r3, [r3, #5]
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>:
    unsigned char GetDeviceClass() const { return DeviceInformation.DeviceClass>>1; }
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	799b      	ldrb	r3, [r3, #6]
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>:
    unsigned char GetIndustryGroup() const { return (DeviceInformation.IndustryGroupAndSystemInstance>>4) & 0x07; }
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	79db      	ldrb	r3, [r3, #7]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>:
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	79db      	ldrb	r3, [r3, #7]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <_ZN9tNMEA200020GetDeviceInformationEi>:
    const tDeviceInformation GetDeviceInformation(int iDev=0) { if (iDev<0 || iDev>=DeviceCount) return tDeviceInformation(); return Devices[iDev].DeviceInformation; }
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	db04      	blt.n	8004f78 <_ZN9tNMEA200020GetDeviceInformationEi+0x1c>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	db03      	blt.n	8004f80 <_ZN9tNMEA200020GetDeviceInformationEi+0x24>
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff fa10 	bl	800439e <_ZN9tNMEA200018tDeviceInformationC1Ev>
 8004f7e:	e00c      	b.n	8004f9a <_ZN9tNMEA200020GetDeviceInformationEi+0x3e>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	68f9      	ldr	r1, [r7, #12]
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	e9c1 2300 	strd	r2, r3, [r1]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN60928::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	b0d0      	sub	sp, #320	; 0x140
 8004fa8:	af04      	add	r7, sp, #16
 8004faa:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8004fae:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8004fb2:	6020      	str	r0, [r4, #0]
 8004fb4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fb8:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8004fbc:	6001      	str	r1, [r0, #0]
 8004fbe:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8004fc2:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8004fc6:	600a      	str	r2, [r1, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004fd2:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8004fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681c      	ldr	r4, [r3, #0]
 8004fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8004ffe:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005002:	9303      	str	r3, [sp, #12]
 8005004:	2300      	movs	r3, #0
 8005006:	9302      	str	r3, [sp, #8]
 8005008:	2332      	movs	r3, #50	; 0x32
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	f06f 030f 	mvn.w	r3, #15
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	6809      	ldr	r1, [r1, #0]
 8005016:	47a0      	blx	r4
 8005018:	4603      	mov	r3, r0
 800501a:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
  bool MatchFilter=true;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  tN2kMsg N2kRMsg;
 8005024:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005028:	2300      	movs	r3, #0
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	2206      	movs	r2, #6
 8005030:	210f      	movs	r1, #15
 8005032:	f001 fd9d 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	7b19      	ldrb	r1, [r3, #12]
 8005042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005046:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005052:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	f7ff fe22 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // Always acknoledge for mandatory PGN
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	7b1a      	ldrb	r2, [r3, #12]
 8005070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005078:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800507a:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 81d7 	beq.w	8005432 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
    int i;
    int Index;
    uint8_t field;
    tNMEA2000::tDeviceInformation DI=pNMEA2000->GetDeviceInformation(iDev);
 8005084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005088:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6919      	ldr	r1, [r3, #16]
 8005090:	f107 0318 	add.w	r3, r7, #24
 8005094:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ff5f 	bl	8004f5c <_ZN9tNMEA200020GetDeviceInformationEi>
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 800509e:	2300      	movs	r3, #0
 80050a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

    StartParseRequestPairParameters(N2kMsg,Index);
 80050a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050b0:	4611      	mov	r1, r2
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	f7ff fd14 	bl	8004ae0 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050be:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80050c2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80050c6:	429a      	cmp	r2, r3
 80050c8:	da14      	bge.n	80050f4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10e      	bne.n	80050f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x14c>
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	7b5b      	ldrb	r3, [r3, #13]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff f995 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x152>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 819b 	beq.w	8005432 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
      if ( !FoundInvalidField) {
 80050fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 817a 	beq.w	8005400 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x45c>
        field=N2kMsg.GetByte(Index);
 800510c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005118:	4611      	mov	r1, r2
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	f001 feca 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        switch (field) {
 8005126:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 800512a:	3b01      	subs	r3, #1
 800512c:	2b09      	cmp	r3, #9
 800512e:	f200 815a 	bhi.w	80053e6 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x442>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x194>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005161 	.word	0x08005161
 800513c:	080051a7 	.word	0x080051a7
 8005140:	080051f3 	.word	0x080051f3
 8005144:	0800523b 	.word	0x0800523b
 8005148:	08005283 	.word	0x08005283
 800514c:	080052cb 	.word	0x080052cb
 8005150:	080052ed 	.word	0x080052ed
 8005154:	08005335 	.word	0x08005335
 8005158:	0800537d 	.word	0x0800537d
 800515c:	080053c5 	.word	0x080053c5
          case N2kPGN60928_UniqueNumber_field:
            MatchRequestField(N2kMsg.Get3ByteUInt(Index),(uint32_t)DI.GetUniqueNumber(),(uint32_t)0x001fffff,MatchFilter,FieldErrorCode);
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005168:	681c      	ldr	r4, [r3, #0]
 800516a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	f001 fecf 	bl	8006f1e <_ZNK7tN2kMsg12Get3ByteUIntERim>
 8005180:	4605      	mov	r5, r0
 8005182:	f107 0318 	add.w	r3, r7, #24
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f91a 	bl	80043c0 <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>
 800518c:	4602      	mov	r2, r0
 800518e:	f107 0317 	add.w	r3, r7, #23
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	f207 1327 	addw	r3, r7, #295	; 0x127
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	4bc7      	ldr	r3, [pc, #796]	; (80054b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x514>)
 800519c:	4629      	mov	r1, r5
 800519e:	4620      	mov	r0, r4
 80051a0:	f001 fac8 	bl	8006734 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80051a4:	e132      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ManufacturerCode_field:
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),DI.GetManufacturerCode(),(uint16_t)0x07ff,MatchFilter,FieldErrorCode);
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051ae:	681c      	ldr	r4, [r3, #0]
 80051b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	f001 fe91 	bl	8006ee8 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 80051c6:	4603      	mov	r3, r0
 80051c8:	461d      	mov	r5, r3
 80051ca:	f107 0318 	add.w	r3, r7, #24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff f903 	bl	80043da <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	f107 0317 	add.w	r3, r7, #23
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	f207 1327 	addw	r3, r7, #295	; 0x127
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80051e8:	4629      	mov	r1, r5
 80051ea:	4620      	mov	r0, r4
 80051ec:	f001 fabe 	bl	800676c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80051f0:	e10c      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceLower_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceLower(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051fa:	681c      	ldr	r4, [r3, #0]
 80051fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005204:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005208:	4611      	mov	r1, r2
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	f001 fe52 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005210:	4603      	mov	r3, r0
 8005212:	461d      	mov	r5, r3
 8005214:	f107 0318 	add.w	r3, r7, #24
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fe4e 	bl	8004eba <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	f107 0317 	add.w	r3, r7, #23
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	f207 1327 	addw	r3, r7, #295	; 0x127
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2307      	movs	r3, #7
 8005230:	4629      	mov	r1, r5
 8005232:	4620      	mov	r0, r4
 8005234:	f001 fabd 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005238:	e0e8      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceUpper_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceUpper(),(uint8_t)0x1f,MatchFilter,FieldErrorCode);
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005242:	681c      	ldr	r4, [r3, #0]
 8005244:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005250:	4611      	mov	r1, r2
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f001 fe2e 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005258:	4603      	mov	r3, r0
 800525a:	461d      	mov	r5, r3
 800525c:	f107 0318 	add.w	r3, r7, #24
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fe38 	bl	8004ed6 <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	f107 0317 	add.w	r3, r7, #23
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	f207 1327 	addw	r3, r7, #295	; 0x127
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	231f      	movs	r3, #31
 8005278:	4629      	mov	r1, r5
 800527a:	4620      	mov	r0, r4
 800527c:	f001 fa99 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005280:	e0c4      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceFunction_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceFunction(),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800528a:	681c      	ldr	r4, [r3, #0]
 800528c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005298:	4611      	mov	r1, r2
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	f001 fe0a 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461d      	mov	r5, r3
 80052a4:	f107 0318 	add.w	r3, r7, #24
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fe21 	bl	8004ef0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	f107 0317 	add.w	r3, r7, #23
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	f207 1327 	addw	r3, r7, #295	; 0x127
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	23ff      	movs	r3, #255	; 0xff
 80052c0:	4629      	mov	r1, r5
 80052c2:	4620      	mov	r0, r4
 80052c4:	f001 fa75 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80052c8:	e0a0      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_Reserved_field:
            N2kMsg.GetByte(Index);
 80052ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80052ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052d6:	4611      	mov	r1, r2
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f001 fdeb 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 80052de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
            break;
 80052ea:	e08f      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceClass_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceClass(),(uint8_t)0x7f,MatchFilter,FieldErrorCode);
 80052ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80052f4:	681c      	ldr	r4, [r3, #0]
 80052f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80052fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005302:	4611      	mov	r1, r2
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	f001 fdd5 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 800530a:	4603      	mov	r3, r0
 800530c:	461d      	mov	r5, r3
 800530e:	f107 0318 	add.w	r3, r7, #24
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fdf7 	bl	8004f06 <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>
 8005318:	4603      	mov	r3, r0
 800531a:	461a      	mov	r2, r3
 800531c:	f107 0317 	add.w	r3, r7, #23
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	f207 1327 	addw	r3, r7, #295	; 0x127
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	237f      	movs	r3, #127	; 0x7f
 800532a:	4629      	mov	r1, r5
 800532c:	4620      	mov	r0, r4
 800532e:	f001 fa40 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005332:	e06b      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_SystemInstance_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetSystemInstance(),(uint8_t)0x0f,MatchFilter,FieldErrorCode);
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800533c:	681c      	ldr	r4, [r3, #0]
 800533e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800534a:	4611      	mov	r1, r2
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f001 fdb1 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005352:	4603      	mov	r3, r0
 8005354:	461d      	mov	r5, r3
 8005356:	f107 0318 	add.w	r3, r7, #24
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fdf0 	bl	8004f40 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	f107 0317 	add.w	r3, r7, #23
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	f207 1327 	addw	r3, r7, #295	; 0x127
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	230f      	movs	r3, #15
 8005372:	4629      	mov	r1, r5
 8005374:	4620      	mov	r0, r4
 8005376:	f001 fa1c 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800537a:	e047      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_IndustryGroup_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetIndustryGroup(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005384:	681c      	ldr	r4, [r3, #0]
 8005386:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005392:	4611      	mov	r1, r2
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	f001 fd8d 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 800539a:	4603      	mov	r3, r0
 800539c:	461d      	mov	r5, r3
 800539e:	f107 0318 	add.w	r3, r7, #24
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fdbc 	bl	8004f20 <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	f107 0317 	add.w	r3, r7, #23
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	f207 1327 	addw	r3, r7, #295	; 0x127
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2307      	movs	r3, #7
 80053ba:	4629      	mov	r1, r5
 80053bc:	4620      	mov	r0, r4
 80053be:	f001 f9f8 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80053c2:	e023      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ISOSelfConfigurable_field:
            N2kMsg.GetByte(Index);
 80053c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80053c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053d0:	4611      	mov	r1, r2
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	f001 fd6e 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 80053d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053dc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
            break;
 80053e4:	e012      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 80053e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ea:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            FoundInvalidField=true;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 80053fe:	e005      	b.n	800540c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 8005400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005404:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 800540c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005410:	b2d9      	uxtb	r1, r3
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fc7b 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8005426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542a:	3301      	adds	r3, #1
 800542c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005430:	e645      	b.n	80050be <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x11a>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 800543a:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a4>
 8005446:	2300      	movs	r3, #0
 8005448:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 800544c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01c      	beq.n	8005494 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4f0>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	7b5b      	ldrb	r3, [r3, #13]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe ffd1 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800546c:	4603      	mov	r3, r0
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d019      	beq.n	80054ac <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005488:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800548c:	4618      	mov	r0, r3
 800548e:	f005 f9f5 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8005492:	e00b      	b.n	80054ac <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
  } else {
    // Send delayed - there was problems with test tool with too fast response.
    pNMEA2000->SendIsoAddressClaim(0xff,iDev,2);
 8005494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005498:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6918      	ldr	r0, [r3, #16]
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80054a6:	21ff      	movs	r1, #255	; 0xff
 80054a8:	f007 fac6 	bl	800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
  }

  return true;
 80054ac:	2301      	movs	r3, #1
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bdb0      	pop	{r4, r5, r7, pc}
 80054b8:	001fffff 	.word	0x001fffff

080054bc <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 60928 can be used to set Device Instance Lower, Device Instance Upper and System Instance
// values on device name. They all are in padded to one byte.
bool tN2kGroupFunctionHandlerForPGN60928::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b0cb      	sub	sp, #300	; 0x12c
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80054c6:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80054ca:	6020      	str	r0, [r4, #0]
 80054cc:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80054d0:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80054d4:	6001      	str	r1, [r0, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054dc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054e6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80054ea:	460a      	mov	r2, r1
 80054ec:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  uint8_t DILower=0xff;
 80054ee:	23ff      	movs	r3, #255	; 0xff
 80054f0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  uint8_t DIUpper=0xff;
 80054f4:	23ff      	movs	r3, #255	; 0xff
 80054f6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
  uint8_t SI=0xff;
 80054fa:	23ff      	movs	r3, #255	; 0xff
 80054fc:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  tN2kGroupFunctionParameterErrorCode PARec;
  tN2kMsg N2kRMsg;
 8005506:	f107 0014 	add.w	r0, r7, #20
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	2206      	movs	r2, #6
 8005512:	210f      	movs	r1, #15
 8005514:	f001 fb2c 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8005518:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800551c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	7b19      	ldrb	r1, [r3, #12]
 8005524:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005528:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	f107 0014 	add.w	r0, r7, #20
 8005534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005538:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	f7ff fbae 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    if (PrioritySetting!=8) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800554c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005550:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b08      	cmp	r3, #8
 8005558:	d002      	beq.n	8005560 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xa4>
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    StartParseCommandPairParameters(N2kMsg,Index);
 8005560:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005564:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005568:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800556c:	4611      	mov	r1, r2
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	f7ff faf8 	bl	8004b64 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800557a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800557e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005588:	429a      	cmp	r2, r3
 800558a:	da5d      	bge.n	8005648 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x18c>
      field=N2kMsg.GetByte(Index);
 800558c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005590:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005594:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005598:	4611      	mov	r1, r2
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	f001 fc8a 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      PARec=N2kgfpec_Acknowledge;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      switch (field) {
 80055ac:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d026      	beq.n	8005602 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x146>
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	dc34      	bgt.n	8005622 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d002      	beq.n	80055c2 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x106>
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d010      	beq.n	80055e2 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x126>
 80055c0:	e02f      	b.n	8005622 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
        case N2kPGN60928_DeviceInstanceLower_field:
          DILower=N2kMsg.GetByte(Index) & 0x7;
 80055c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055ce:	4611      	mov	r1, r2
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	f001 fc6f 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
          break;
 80055e0:	e022      	b.n	8005628 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_DeviceInstanceUpper_field:
          DIUpper=N2kMsg.GetByte(Index) & 0x1f;
 80055e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055ee:	4611      	mov	r1, r2
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	f001 fc5f 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
          break;
 8005600:	e012      	b.n	8005628 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_SystemInstance_field:
          SI=N2kMsg.GetByte(Index) & 0x0f;
 8005602:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005606:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800560a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800560e:	4611      	mov	r1, r2
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f001 fc4f 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005616:	4603      	mov	r3, r0
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
          break;
 8005620:	e002      	b.n	8005628 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        default:
          PARec=N2kgfpec_InvalidRequestOrCommandParameterField;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      }

      AddAcknowledgeParameter(N2kRMsg,i,PARec);
 8005628:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800562c:	b2d9      	uxtb	r1, r3
 800562e:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fb70 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 800563c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005640:	3301      	adds	r3, #1
 8005642:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005646:	e798      	b.n	800557a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xbe>
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 8005648:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800564c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f107 0114 	add.w	r1, r7, #20
 8005658:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800565c:	4618      	mov	r0, r3
 800565e:	f005 f90d 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    pNMEA2000->SetDeviceInformationInstances(DILower,DIUpper,SI,iDev);
 8005662:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005666:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6918      	ldr	r0, [r3, #16]
 800566e:	f897 4119 	ldrb.w	r4, [r7, #281]	; 0x119
 8005672:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 8005676:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 800567a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4623      	mov	r3, r4
 8005682:	f004 fab3 	bl	8009bec <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>

    return true;
 8005686:	2301      	movs	r3, #1
}
 8005688:	4618      	mov	r0, r3
 800568a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}

08005692 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126464::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8005692:	b590      	push	{r4, r7, lr}
 8005694:	b0cd      	sub	sp, #308	; 0x134
 8005696:	af04      	add	r7, sp, #16
 8005698:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800569c:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80056a0:	6020      	str	r0, [r4, #0]
 80056a2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80056a6:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80056aa:	6001      	str	r1, [r0, #0]
 80056ac:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80056b0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80056b4:	600a      	str	r2, [r1, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056bc:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80056c0:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 80056c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681c      	ldr	r4, [r3, #0]
 80056da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056de:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056e8:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 80056ec:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80056f0:	9303      	str	r3, [sp, #12]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9302      	str	r3, [sp, #8]
 80056f6:	2332      	movs	r3, #50	; 0x32
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	f06f 030f 	mvn.w	r3, #15
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2300      	movs	r3, #0
 8005702:	6809      	ldr	r1, [r1, #0]
 8005704:	47a0      	blx	r4
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  bool MatchFilter=true;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t RespondTxRx=0xff;
 8005712:	23ff      	movs	r3, #255	; 0xff
 8005714:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  tN2kMsg N2kRMsg;
 8005718:	f107 0014 	add.w	r0, r7, #20
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	2206      	movs	r2, #6
 8005724:	210f      	movs	r1, #15
 8005726:	f001 fa23 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800572a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800572e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	7b19      	ldrb	r1, [r3, #12]
 8005736:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800573a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	f107 0014 	add.w	r0, r7, #20
 8005746:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	f7ff faa8 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8005758:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800575c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	7b1a      	ldrb	r2, [r3, #12]
 8005764:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005768:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800576c:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800576e:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8083 	beq.w	800587e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 8005778:	2300      	movs	r3, #0
 800577a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    StartParseRequestPairParameters(N2kMsg,Index);
 800577e:	f107 0210 	add.w	r2, r7, #16
 8005782:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005786:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800578a:	4611      	mov	r1, r2
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f7ff f9a7 	bl	8004ae0 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005798:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800579c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80057a0:	429a      	cmp	r2, r3
 80057a2:	da14      	bge.n	80057ce <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 80057a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10e      	bne.n	80057ca <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x138>
 80057ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	7b5b      	ldrb	r3, [r3, #13]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fe28 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80057be:	4603      	mov	r3, r0
 80057c0:	f083 0301 	eor.w	r3, r3, #1
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13e>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d054      	beq.n	800587e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
      if ( !FoundInvalidField) {
 80057d4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d03a      	beq.n	8005858 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1c6>
        field=N2kMsg.GetByte(Index);
 80057e2:	f107 0210 	add.w	r2, r7, #16
 80057e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057ee:	4611      	mov	r1, r2
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	f001 fb5f 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
        switch (field) {
 80057fc:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8005800:	2b01      	cmp	r3, #1
 8005802:	d11f      	bne.n	8005844 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1b2>
          case 1: // Selection of Tx or Rx
            RespondTxRx=N2kMsg.GetByte(Index);
 8005804:	f107 0210 	add.w	r2, r7, #16
 8005808:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800580c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005810:	4611      	mov	r1, r2
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	f001 fb4e 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
            if ( RespondTxRx==N2kpgnl_transmit || RespondTxRx==N2kpgnl_receive ) {
 800581e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x19c>
 8005826:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800582a:	2b01      	cmp	r3, #1
 800582c:	d103      	bne.n	8005836 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1a4>
              FieldErrorCode=N2kgfpec_Acknowledge;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            } else {
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
              MatchFilter=false;
            }
            break;
 8005834:	e013      	b.n	800585e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8005836:	2303      	movs	r3, #3
 8005838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
              MatchFilter=false;
 800583c:	2300      	movs	r3, #0
 800583e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005842:	e00c      	b.n	800585e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            MatchFilter=false;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            FoundInvalidField=true;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005856:	e002      	b.n	800585e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 800585e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005862:	b2d9      	uxtb	r1, r3
 8005864:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fa55 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8005872:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800587c:	e78c      	b.n	8005798 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x106>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 800587e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 8005886:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x202>
 8005892:	2300      	movs	r3, #0
 8005894:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8005898:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800589c:	f083 0301 	eor.w	r3, r3, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01c      	beq.n	80058e0 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x24e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 80058a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	7b5b      	ldrb	r3, [r3, #13]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe fdab 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d072      	beq.n	80059aa <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 80058c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f107 0114 	add.w	r1, r7, #20
 80058d4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 ffcf 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80058de:	e064      	b.n	80059aa <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 80058e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	7b1b      	ldrb	r3, [r3, #12]
 80058ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 80058f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f7ff faa9 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 8005904:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005908:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	7b5b      	ldrb	r3, [r3, #13]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fd7c 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x290>
 8005920:	2300      	movs	r3, #0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2a4>
 8005926:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800592a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	7b5b      	ldrb	r3, [r3, #13]
 8005932:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 8005936:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2b4>
 800593e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005942:	2bff      	cmp	r3, #255	; 0xff
 8005944:	d114      	bne.n	8005970 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2de>
 8005946:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800594a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691c      	ldr	r4, [r3, #16]
 8005952:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005956:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	f7ff fa78 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 8005960:	4603      	mov	r3, r0
 8005962:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8005966:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800596a:	4620      	mov	r0, r4
 800596c:	f007 f916 	bl	800cb9c <_ZN9tNMEA200013SendTxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 8005970:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005974:	2b01      	cmp	r3, #1
 8005976:	d003      	beq.n	8005980 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2ee>
 8005978:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800597c:	2bff      	cmp	r3, #255	; 0xff
 800597e:	d114      	bne.n	80059aa <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 8005980:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005984:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691c      	ldr	r4, [r3, #16]
 800598c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005990:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	f7ff fa5b 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 800599a:	4603      	mov	r3, r0
 800599c:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 80059a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80059a4:	4620      	mov	r0, r4
 80059a6:	f007 fa0f 	bl	800cdc8 <_ZN9tNMEA200013SendRxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(N2kMsg.Source,iDev);
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(N2kMsg.Source,iDev);
#endif
  }

  return true;
 80059aa:	2301      	movs	r3, #1
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}
	...

080059b8 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126996::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	b0d5      	sub	sp, #340	; 0x154
 80059be:	af04      	add	r7, sp, #16
 80059c0:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 80059c4:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
 80059c8:	6030      	str	r0, [r6, #0]
 80059ca:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80059ce:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80059d2:	6001      	str	r1, [r0, #0]
 80059d4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80059d8:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80059dc:	600a      	str	r2, [r1, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80059e4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80059e8:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 80059ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80059ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80059f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681e      	ldr	r6, [r3, #0]
 8005a02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a06:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a10:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8005a14:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	2332      	movs	r3, #50	; 0x32
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	f06f 030f 	mvn.w	r3, #15
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6809      	ldr	r1, [r1, #0]
 8005a2c:	47b0      	blx	r6
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  bool MatchFilter=true;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
  tN2kMsg N2kRMsg;
 8005a3a:	f107 0020 	add.w	r0, r7, #32
 8005a3e:	2300      	movs	r3, #0
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2300      	movs	r3, #0
 8005a44:	2206      	movs	r2, #6
 8005a46:	210f      	movs	r1, #15
 8005a48:	f001 f892 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8005a4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	7b19      	ldrb	r1, [r3, #12]
 8005a58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	f107 0020 	add.w	r0, r7, #32
 8005a68:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	f7ff f917 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8005a7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	7b1a      	ldrb	r2, [r3, #12]
 8005a86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005a8e:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 8005a90:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8254 	beq.w	8005f42 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x58a>
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
    }
 8005a9a:	466b      	mov	r3, sp
 8005a9c:	461e      	mov	r6, r3
    bool FoundInvalidField=false;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    size_t strSize=Max_N2kProductInfoStrLen;
 8005aa4:	2321      	movs	r3, #33	; 0x21
 8005aa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    char Query[strSize];
 8005aaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005aae:	1e59      	subs	r1, r3, #1
 8005ab0:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	2200      	movs	r2, #0
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	00c3      	lsls	r3, r0, #3
 8005aca:	6838      	ldr	r0, [r7, #0]
 8005acc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005ad0:	6838      	ldr	r0, [r7, #0]
 8005ad2:	00c2      	lsls	r2, r0, #3
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	2200      	movs	r2, #0
 8005ada:	469a      	mov	sl, r3
 8005adc:	4693      	mov	fp, r2
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af2:	460b      	mov	r3, r1
 8005af4:	3301      	adds	r3, #1
 8005af6:	3307      	adds	r3, #7
 8005af8:	08db      	lsrs	r3, r3, #3
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	ebad 0d03 	sub.w	sp, sp, r3
 8005b00:	ab04      	add	r3, sp, #16
 8005b02:	3300      	adds	r3, #0
 8005b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    char CurVal[strSize];
 8005b08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b0c:	1e59      	subs	r1, r3, #1
 8005b0e:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8005b12:	460b      	mov	r3, r1
 8005b14:	3301      	adds	r3, #1
 8005b16:	2200      	movs	r2, #0
 8005b18:	4698      	mov	r8, r3
 8005b1a:	4691      	mov	r9, r2
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b30:	460b      	mov	r3, r1
 8005b32:	3301      	adds	r3, #1
 8005b34:	2200      	movs	r2, #0
 8005b36:	461c      	mov	r4, r3
 8005b38:	4615      	mov	r5, r2
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	00eb      	lsls	r3, r5, #3
 8005b44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b48:	00e2      	lsls	r2, r4, #3
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	3307      	adds	r3, #7
 8005b50:	08db      	lsrs	r3, r3, #3
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	ebad 0d03 	sub.w	sp, sp, r3
 8005b58:	ab04      	add	r3, sp, #16
 8005b5a:	3300      	adds	r3, #0
 8005b5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    StartParseRequestPairParameters(N2kMsg,Index);
 8005b60:	f107 021c 	add.w	r2, r7, #28
 8005b64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	f7fe ffb6 	bl	8004ae0 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005b7a:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8005b7e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005b82:	429a      	cmp	r2, r3
 8005b84:	da14      	bge.n	8005bb0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 8005b86:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10e      	bne.n	8005bac <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f4>
 8005b8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	7b5b      	ldrb	r3, [r3, #13]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fc37 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f083 0301 	eor.w	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1fa>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 81c4 	beq.w	8005f40 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x588>
      if ( !FoundInvalidField) {
 8005bb8:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 81a3 	beq.w	8005f0e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x556>
        field=N2kMsg.GetByte(Index);
 8005bc8:	f107 021c 	add.w	r2, r7, #28
 8005bcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	f001 f96c 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        switch (field) {
 8005be2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005be6:	3b01      	subs	r3, #1
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	f200 8183 	bhi.w	8005ef4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x53c>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x23c>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c6d 	.word	0x08005c6d
 8005bfc:	08005cc5 	.word	0x08005cc5
 8005c00:	08005d27 	.word	0x08005d27
 8005c04:	08005d89 	.word	0x08005d89
 8005c08:	08005deb 	.word	0x08005deb
 8005c0c:	08005e4d 	.word	0x08005e4d
 8005c10:	08005ea1 	.word	0x08005ea1
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetN2kVersion(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 8005c14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	f107 011c 	add.w	r1, r7, #28
 8005c22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	f001 f95a 	bl	8006ee8 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461d      	mov	r5, r3
 8005c38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f003 fdcd 	bl	80097e8 <_ZNK9tNMEA200013GetN2kVersionEi>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	f107 031b 	add.w	r3, r7, #27
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c62:	4629      	mov	r1, r5
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 fd81 	bl	800676c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005c6a:	e156      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetProductCode(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 8005c6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c74:	681c      	ldr	r4, [r3, #0]
 8005c76:	f107 011c 	add.w	r1, r7, #28
 8005c7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	f001 f92e 	bl	8006ee8 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461d      	mov	r5, r3
 8005c90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f003 fdc2 	bl	800982a <_ZNK9tNMEA200014GetProductCodeEi>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f107 031b 	add.w	r3, r7, #27
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fd55 	bl	800676c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005cc2:	e12a      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelID_len,0xff,Index);
 8005cc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cc8:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8005ccc:	f107 031c 	add.w	r3, r7, #28
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	23ff      	movs	r3, #255	; 0xff
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005cdc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005ce0:	6800      	ldr	r0, [r0, #0]
 8005ce2:	f001 f96e 	bl	8006fc2 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8005ce6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6918      	ldr	r0, [r3, #16]
 8005cf2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005cf6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005cfa:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005cfe:	f003 fdb5 	bl	800986c <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8005d02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8005d10:	f107 031b 	add.w	r3, r7, #27
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005d1c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005d20:	f7ff f8a2 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005d24:	e0f9      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kSwCode_len,0xff,Index);
 8005d26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d2a:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8005d2e:	f107 031c 	add.w	r3, r7, #28
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	23ff      	movs	r3, #255	; 0xff
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	2320      	movs	r3, #32
 8005d3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005d3e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005d42:	6800      	ldr	r0, [r0, #0]
 8005d44:	f001 f93d 	bl	8006fc2 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8005d48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6918      	ldr	r0, [r3, #16]
 8005d54:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d58:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d5c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005d60:	f003 fd84 	bl	800986c <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8005d64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8005d72:	f107 031b 	add.w	r3, r7, #27
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005d7e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005d82:	f7ff f871 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005d86:	e0c8      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelVersion_len,0xff,Index);
 8005d88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d8c:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8005d90:	f107 031c 	add.w	r3, r7, #28
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	23ff      	movs	r3, #255	; 0xff
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005da0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005da4:	6800      	ldr	r0, [r0, #0]
 8005da6:	f001 f90c 	bl	8006fc2 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8005daa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6918      	ldr	r0, [r3, #16]
 8005db6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005dba:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005dbe:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005dc2:	f003 fd53 	bl	800986c <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8005dc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8005dd4:	f107 031b 	add.w	r3, r7, #27
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005de0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005de4:	f7ff f840 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005de8:	e097      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelSerialCode_len,0xff,Index);
 8005dea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005dee:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8005df2:	f107 031c 	add.w	r3, r7, #28
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	23ff      	movs	r3, #255	; 0xff
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005e02:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	f001 f8db 	bl	8006fc2 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8005e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6918      	ldr	r0, [r3, #16]
 8005e18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005e20:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005e24:	f003 fd22 	bl	800986c <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8005e28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8005e36:	f107 031b 	add.w	r3, r7, #27
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005e42:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005e46:	f7ff f80f 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005e4a:	e066      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetCertificationLevel(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 8005e4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e54:	681c      	ldr	r4, [r3, #0]
 8005e56:	f107 021c 	add.w	r2, r7, #28
 8005e5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e62:	4611      	mov	r1, r2
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f001 f825 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461d      	mov	r5, r3
 8005e6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 fd28 	bl	80098d4 <_ZNK9tNMEA200021GetCertificationLevelEi>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	f107 031b 	add.w	r3, r7, #27
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	23ff      	movs	r3, #255	; 0xff
 8005e96:	4629      	mov	r1, r5
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fc8a 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005e9e:	e03c      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetLoadEquivalency(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 8005ea0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	f107 021c 	add.w	r2, r7, #28
 8005eae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f000 fffb 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	461d      	mov	r5, r3
 8005ec2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f003 fd21 	bl	800991a <_ZNK9tNMEA200018GetLoadEquivalencyEi>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	f107 031b 	add.w	r3, r7, #27
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	23ff      	movs	r3, #255	; 0xff
 8005eea:	4629      	mov	r1, r5
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 fc60 	bl	80067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8005ef2:	e012      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8005ef4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ef8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
            FoundInvalidField=true;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8005f0c:	e005      	b.n	8005f1a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 8005f0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f12:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f16:	2202      	movs	r2, #2
 8005f18:	701a      	strb	r2, [r3, #0]
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 8005f1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f1e:	b2d9      	uxtb	r1, r3
 8005f20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f24:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	f107 0320 	add.w	r3, r7, #32
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fef4 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8005f34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005f3e:	e61c      	b.n	8005b7a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1c2>
 8005f40:	46b5      	mov	sp, r6
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8005f42:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 8005f4a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5a0>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8005f5c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005f60:	f083 0301 	eor.w	r3, r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01c      	beq.n	8005fa4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5ec>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 8005f6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	7b5b      	ldrb	r3, [r3, #13]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fa49 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f083 0301 	eor.w	r3, r3, #1
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d04d      	beq.n	8006024 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
 8005f88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f107 0120 	add.w	r1, r7, #32
 8005f98:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f004 fc6d 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8005fa2:	e03f      	b.n	8006024 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 8005fa4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	7b1b      	ldrb	r3, [r3, #12]
 8005fb0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 8005fb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	f7fe ff47 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00d      	beq.n	8005fe4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 8005fc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	7b5b      	ldrb	r3, [r3, #13]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fa1a 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62e>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x642>
 8005fea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	7b5b      	ldrb	r3, [r3, #13]
 8005ff6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    pNMEA2000->SendProductInformation(dest,iDev,N2kMsg.IsTPMessage());
 8005ffa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691c      	ldr	r4, [r3, #16]
 8006006:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	f7fe ff1e 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 8006014:	4603      	mov	r3, r0
 8006016:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 800601a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800601e:	4620      	mov	r0, r4
 8006020:	f007 f8d2 	bl	800d1c8 <_ZN9tNMEA200022SendProductInformationEhib>
#else
    pNMEA2000->SendProductInformation(iDev);
#endif
  }

  return true;
 8006024:	2301      	movs	r3, #1
}
 8006026:	4618      	mov	r0, r3
 8006028:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800602c:	46bd      	mov	sp, r7
 800602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006032:	bf00      	nop

08006034 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126998::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b0f3      	sub	sp, #460	; 0x1cc
 8006038:	af04      	add	r7, sp, #16
 800603a:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 800603e:	f5a4 74d6 	sub.w	r4, r4, #428	; 0x1ac
 8006042:	6020      	str	r0, [r4, #0]
 8006044:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8006048:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800604c:	6001      	str	r1, [r0, #0]
 800604e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8006052:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 8006056:	600a      	str	r2, [r1, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800605e:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 8006062:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8006064:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006068:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006072:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681c      	ldr	r4, [r3, #0]
 800607c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006080:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800608a:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 800608e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006092:	9303      	str	r3, [sp, #12]
 8006094:	2300      	movs	r3, #0
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	2332      	movs	r3, #50	; 0x32
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	f06f 030f 	mvn.w	r3, #15
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	2300      	movs	r3, #0
 80060a4:	6809      	ldr	r1, [r1, #0]
 80060a6:	47a0      	blx	r4
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
  bool MatchFilter=true;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
  tN2kMsg N2kRMsg;
 80060b4:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80060b8:	2300      	movs	r3, #0
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2300      	movs	r3, #0
 80060be:	2206      	movs	r2, #6
 80060c0:	210f      	movs	r1, #15
 80060c2:	f000 fd55 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 80060c6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80060ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	7b19      	ldrb	r1, [r3, #12]
 80060d2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80060d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80060e2:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	f7fe fdda 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 80060f4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80060f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	7b1a      	ldrb	r2, [r3, #12]
 8006100:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800610a:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8109 	beq.w	8006326 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 8006114:	2300      	movs	r3, #0
 8006116:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
    char Query[Max_N2kConfigurationInfoField_len];
    char CurVal[Max_N2kConfigurationInfoField_len];
    size_t QueryStrSize;

    StartParseRequestPairParameters(N2kMsg,Index);
 800611a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800611e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006122:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006126:	4611      	mov	r1, r2
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	f7fe fcd9 	bl	8004ae0 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8006134:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8006138:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800613c:	429a      	cmp	r2, r3
 800613e:	da14      	bge.n	800616a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 8006140:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10e      	bne.n	8006166 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x132>
 8006148:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800614c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	7b5b      	ldrb	r3, [r3, #13]
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe f95a 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800615a:	4603      	mov	r3, r0
 800615c:	f083 0301 	eor.w	r3, r3, #1
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x138>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 80da 	beq.w	8006326 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
      if ( !FoundInvalidField) {
 8006172:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8006176:	f083 0301 	eor.w	r3, r3, #1
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80b9 	beq.w	80062f4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2c0>
        field=N2kMsg.GetByte(Index);
 8006182:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006186:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800618a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800618e:	4611      	mov	r1, r2
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f000 fe8f 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
        switch (field) {
 800619c:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d069      	beq.n	8006278 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x244>
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	f300 8098 	bgt.w	80062da <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d002      	beq.n	80061b4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x180>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d031      	beq.n	8006216 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x1e2>
 80061b2:	e092      	b.n	80062da <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
          case N2kPGN126998_InstallationDescription1_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 80061b4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061bc:	2247      	movs	r2, #71	; 0x47
 80061be:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 80061c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80061c4:	f107 0214 	add.w	r2, r7, #20
 80061c8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80061cc:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 80061d0:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 80061d4:	6800      	ldr	r0, [r0, #0]
 80061d6:	f000 ff74 	bl	80070c2 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription1(CurVal,Max_N2kConfigurationInfoField_len);
 80061da:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80061ea:	2247      	movs	r2, #71	; 0x47
 80061ec:	4618      	mov	r0, r3
 80061ee:	f003 fc33 	bl	8009a58 <_ZN9tNMEA200027GetInstallationDescription1EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 80061f2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 8006200:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006204:	f107 0114 	add.w	r1, r7, #20
 8006208:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	4623      	mov	r3, r4
 8006210:	f7fe fe2a 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8006214:	e074      	b.n	8006300 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_InstallationDescription2_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 8006216:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800621a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800621e:	2247      	movs	r2, #71	; 0x47
 8006220:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 8006222:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006226:	f107 0214 	add.w	r2, r7, #20
 800622a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800622e:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8006232:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	f000 ff43 	bl	80070c2 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription2(CurVal,Max_N2kConfigurationInfoField_len);
 800623c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006240:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800624c:	2247      	movs	r2, #71	; 0x47
 800624e:	4618      	mov	r0, r3
 8006250:	f003 fc1f 	bl	8009a92 <_ZN9tNMEA200027GetInstallationDescription2EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8006254:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006258:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 8006262:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006266:	f107 0114 	add.w	r1, r7, #20
 800626a:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4623      	mov	r3, r4
 8006272:	f7fe fdf9 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8006276:	e043      	b.n	8006300 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_ManufacturerInformation_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 8006278:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800627c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006280:	2247      	movs	r2, #71	; 0x47
 8006282:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 8006284:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006288:	f107 0214 	add.w	r2, r7, #20
 800628c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006290:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8006294:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 8006298:	6800      	ldr	r0, [r0, #0]
 800629a:	f000 ff12 	bl	80070c2 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetManufacturerInformation(CurVal,Max_N2kConfigurationInfoField_len);
 800629e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80062a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80062ae:	2247      	movs	r2, #71	; 0x47
 80062b0:	4618      	mov	r0, r3
 80062b2:	f003 fc0b 	bl	8009acc <_ZN9tNMEA200026GetManufacturerInformationEPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 80062b6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80062ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 80062c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80062c8:	f107 0114 	add.w	r1, r7, #20
 80062cc:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4623      	mov	r3, r4
 80062d4:	f7fe fdc8 	bl	8004e68 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80062d8:	e012      	b.n	8006300 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 80062da:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80062de:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
            FoundInvalidField=true;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 80062f2:	e005      	b.n	8006300 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 80062f4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80062f8:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80062fc:	2202      	movs	r2, #2
 80062fe:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 8006300:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8006304:	b2d9      	uxtb	r1, r3
 8006306:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800630a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fd01 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800631a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8006324:	e706      	b.n	8006134 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x100>
    }

  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8006326:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 800632e:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x308>
 800633a:	2300      	movs	r3, #0
 800633c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8006340:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006344:	f083 0301 	eor.w	r3, r3, #1
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01c      	beq.n	8006388 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x354>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800634e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006352:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	7b5b      	ldrb	r3, [r3, #13]
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe f857 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 8006360:	4603      	mov	r3, r0
 8006362:	f083 0301 	eor.w	r3, r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d04d      	beq.n	8006408 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
 800636c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8006370:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800637c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8006380:	4618      	mov	r0, r3
 8006382:	f004 fa7b 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8006386:	e03f      	b.n	8006408 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 8006388:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800638c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	7b1b      	ldrb	r3, [r3, #12]
 8006394:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 8006398:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800639c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	f7fe fd55 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 80063ac:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80063b0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	7b5b      	ldrb	r3, [r3, #13]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe f828 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x396>
 80063c8:	2300      	movs	r3, #0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3aa>
 80063ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80063d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	7b5b      	ldrb	r3, [r3, #13]
 80063da:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    pNMEA2000->SendConfigurationInformation(dest,iDev,N2kMsg.IsTPMessage());
 80063de:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80063e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691c      	ldr	r4, [r3, #16]
 80063ea:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80063ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	f7fe fd2c 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f897 11b2 	ldrb.w	r1, [r7, #434]	; 0x1b2
 80063fe:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8006402:	4620      	mov	r0, r4
 8006404:	f007 f878 	bl	800d4f8 <_ZN9tNMEA200028SendConfigurationInformationEhib>
#else
    pNMEA2000->SendConfigurationInformation(iDev);
#endif
  }

  return true;
 8006408:	2301      	movs	r3, #1
}
 800640a:	4618      	mov	r0, r3
 800640c:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 126998 can be used to set installation description 1 and 2 fields
bool tN2kGroupFunctionHandlerForPGN126998::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b0dd      	sub	sp, #372	; 0x174
 8006418:	af02      	add	r7, sp, #8
 800641a:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800641e:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 8006422:	6020      	str	r0, [r4, #0]
 8006424:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8006428:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800642c:	6001      	str	r1, [r0, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006434:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800643e:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8006442:	460a      	mov	r2, r1
 8006444:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  size_t InstallationDescriptionSize;
  char InstallationDescription[Max_N2kConfigurationInfoField_len];
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 8006446:	2300      	movs	r3, #0
 8006448:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
  tN2kMsg N2kRMsg;
 800644c:	f107 0014 	add.w	r0, r7, #20
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	2206      	movs	r2, #6
 8006458:	210f      	movs	r1, #15
 800645a:	f000 fb89 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

 		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) pec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800645e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006462:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d10d      	bne.n	8006488 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 800646c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006470:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b0f      	cmp	r3, #15
 8006478:	d106      	bne.n	8006488 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 800647a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800647e:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b09      	cmp	r3, #9
 8006486:	d002      	beq.n	800648e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x7a>
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800648e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006492:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	7b19      	ldrb	r1, [r3, #12]
 800649a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800649e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	f107 0014 	add.w	r0, r7, #20
 80064aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80064ae:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	2300      	movs	r3, #0
 80064be:	f7fe fbf3 	bl	8004ca8 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    StartParseCommandPairParameters(N2kMsg,Index);
 80064c2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80064c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80064ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80064ce:	4611      	mov	r1, r2
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	f7fe fb47 	bl	8004b64 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80064dc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80064e0:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80064ea:	429a      	cmp	r2, r3
 80064ec:	da6e      	bge.n	80065cc <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1b8>
      field=N2kMsg.GetByte(Index);
 80064ee:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80064f2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80064f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80064fa:	4611      	mov	r1, r2
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	f000 fcd9 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
      switch (field) {
 8006508:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 800650c:	2b01      	cmp	r3, #1
 800650e:	d002      	beq.n	8006516 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x102>
 8006510:	2b02      	cmp	r3, #2
 8006512:	d026      	beq.n	8006562 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x14e>
 8006514:	e04b      	b.n	80065ae <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x19a>
        case 1: // Installation description 1
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 8006516:	2347      	movs	r3, #71	; 0x47
 8006518:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 800651c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8006520:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006524:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8006528:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800652c:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8006530:	6800      	ldr	r0, [r0, #0]
 8006532:	f000 fdc6 	bl	80070c2 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription1(InstallationDescription);
 8006536:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800653a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f003 fa44 	bl	80099d6 <_ZN9tNMEA200027SetInstallationDescription1EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 800654e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006552:	b2d9      	uxtb	r1, r3
 8006554:	f107 0314 	add.w	r3, r7, #20
 8006558:	2200      	movs	r2, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fbde 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 8006560:	e02e      	b.n	80065c0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        case 2:  // Installation description 2
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 8006562:	2347      	movs	r3, #71	; 0x47
 8006564:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 8006568:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800656c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006570:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8006574:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8006578:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800657c:	6800      	ldr	r0, [r0, #0]
 800657e:	f000 fda0 	bl	80070c2 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription2(InstallationDescription);
 8006582:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006586:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f003 fa3e 	bl	8009a16 <_ZN9tNMEA200027SetInstallationDescription2EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 800659a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800659e:	b2d9      	uxtb	r1, r3
 80065a0:	f107 0314 	add.w	r3, r7, #20
 80065a4:	2200      	movs	r2, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe fbb8 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 80065ac:	e008      	b.n	80065c0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        default:
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_InvalidRequestOrCommandParameterField);
 80065ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80065b2:	b2d9      	uxtb	r1, r3
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	2201      	movs	r2, #1
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fbae 	bl	8004d1c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 80065c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80065c4:	3301      	adds	r3, #1
 80065c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80065ca:	e787      	b.n	80064dc <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0xc8>
      }
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 80065cc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80065d0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f107 0114 	add.w	r1, r7, #20
 80065dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80065e0:	4618      	mov	r0, r3
 80065e2:	f004 f94b 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

    return true;
 80065e6:	2301      	movs	r3, #1
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd90      	pop	{r4, r7, pc}

080065f2 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi>:
// Heartbeat settings
bool tN2kGroupFunctionHandlerForPGN126993::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 80065f2:	b590      	push	{r4, r7, lr}
 80065f4:	b08b      	sub	sp, #44	; 0x2c
 80065f6:	af04      	add	r7, sp, #16
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	807b      	strh	r3, [r7, #2]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec = GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset,true,60000U,1000U,true,6000U);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681c      	ldr	r4, [r3, #0]
 8006608:	887a      	ldrh	r2, [r7, #2]
 800660a:	f241 7370 	movw	r3, #6000	; 0x1770
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	2301      	movs	r3, #1
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2301      	movs	r3, #1
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	47a0      	blx	r4
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]
  // Turn off is not allowed for heartbeat.
  if ( TransmissionInterval==0 ) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x42>
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
  
  if ( NumberOfParameterPairs==0 ) { // According to doc, there should not be any parameter pairs defined
 8006634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	d158      	bne.n	80066ee <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xfc>
    if ( TransmissionInterval==0xffffffff && TransmissionIntervalOffset==0xffff ) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006642:	d112      	bne.n	800666a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800664a:	4293      	cmp	r3, r2
 800664c:	d10d      	bne.n	800666a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
      // Request for 126993 with 0xffffffff and 0xffff is prohibited so use default reponse.
      return tN2kGroupFunctionHandler::HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	887a      	ldrh	r2, [r7, #2]
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	f7fe f884 	bl	800476e <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>
 8006666:	4603      	mov	r3, r0
 8006668:	e060      	b.n	800672c <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x13a>
    }
    if ( pec==N2kgfTPec_Acknowledge ) {
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d120      	bne.n	80066b2 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xc0>
      // Request specification with offset is confusing and there is no clear explanation. So to keep
      // test tool happy, we respond always immediately and set offset, if it is >0
      uint32_t Offset=TransmissionIntervalOffset;
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	613b      	str	r3, [r7, #16]
      Offset=(Offset==0xffff || Offset==0?0xffffffff:Offset*10); // Offset comes in 10 ms, convert to ms.
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800667a:	4293      	cmp	r3, r2
 800667c:	d008      	beq.n	8006690 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	e001      	b.n	8006694 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xa2>
 8006690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006694:	613b      	str	r3, [r7, #16]
      pNMEA2000->SetHeartbeatIntervalAndOffset(TransmissionInterval,Offset,iDev);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6918      	ldr	r0, [r3, #16]
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	f003 fe4e 	bl	800a340 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
      pNMEA2000->SendHeartbeat(iDev);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066aa:	4618      	mov	r0, r3
 80066ac:	f003 fefe 	bl	800a4ac <_ZN9tNMEA200013SendHeartbeatEi>
 80066b0:	e03b      	b.n	800672a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    } else if (!tNMEA2000::IsBroadcast(N2kMsg.Destination)) {
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	7b5b      	ldrb	r3, [r3, #13]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd fea9 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80066bc:	4603      	mov	r3, r0
 80066be:	f083 0301 	eor.w	r3, r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d030      	beq.n	800672a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000, N2kMsg.Source, iDev, PGN, N2kgfPGNec_Acknowledge, pec);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6918      	ldr	r0, [r3, #16]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	7b19      	ldrb	r1, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	2300      	movs	r3, #0
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	2300      	movs	r3, #0
 80066da:	9302      	str	r3, [sp, #8]
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e8:	f7fe fb4e 	bl	8004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
 80066ec:	e01d      	b.n	800672a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    }
  } else {
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7b5b      	ldrb	r3, [r3, #13]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fd fe8b 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f083 0301 	eor.w	r3, r3, #1
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d012      	beq.n	800672a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,PGN,
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6918      	ldr	r0, [r3, #16]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	7b19      	ldrb	r1, [r3, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	2305      	movs	r3, #5
 8006712:	9303      	str	r3, [sp, #12]
 8006714:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006718:	9302      	str	r3, [sp, #8]
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	2300      	movs	r3, #0
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	4613      	mov	r3, r2
 8006724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006726:	f7fe fb2f 	bl	8004d88 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      N2kgfPGNec_Acknowledge,
                      pec, //N2kgfTPec_TransmitIntervalOrPriorityNotSupported,
                      NumberOfParameterPairs, N2kgfpec_RequestOrCommandNotSupported);
    }
  }
  return true;
 800672a:	2301      	movs	r3, #1
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
      if ( (FieldVal&Mask)!=MatchVal ) {
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4013      	ands	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d006      	beq.n	800675c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x28>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2203      	movs	r2, #3
 8006752:	701a      	strb	r2, [r3, #0]
        Match=false;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
    }
 800675a:	e002      	b.n	8006762 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x2e>
      } else ErrorCode=N2kgfpec_Acknowledge;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
    }
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	461a      	mov	r2, r3
 800677a:	4603      	mov	r3, r0
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	460b      	mov	r3, r1
 8006780:	813b      	strh	r3, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
      if ( (FieldVal&Mask)!=MatchVal ) {
 8006786:	897a      	ldrh	r2, [r7, #10]
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	4013      	ands	r3, r2
 800678c:	b29b      	uxth	r3, r3
 800678e:	893a      	ldrh	r2, [r7, #8]
 8006790:	429a      	cmp	r2, r3
 8006792:	d006      	beq.n	80067a2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2203      	movs	r2, #3
 8006798:	701a      	strb	r2, [r3, #0]
        Match=false;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
    }
 80067a0:	e002      	b.n	80067a8 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2200      	movs	r2, #0
 80067a6:	701a      	strb	r2, [r3, #0]
    }
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr

080067b2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	4608      	mov	r0, r1
 80067bc:	4611      	mov	r1, r2
 80067be:	461a      	mov	r2, r3
 80067c0:	4603      	mov	r3, r0
 80067c2:	70fb      	strb	r3, [r7, #3]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70bb      	strb	r3, [r7, #2]
 80067c8:	4613      	mov	r3, r2
 80067ca:	707b      	strb	r3, [r7, #1]
      if ( (FieldVal&Mask)!=MatchVal ) {
 80067cc:	78fa      	ldrb	r2, [r7, #3]
 80067ce:	787b      	ldrb	r3, [r7, #1]
 80067d0:	4013      	ands	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	78ba      	ldrb	r2, [r7, #2]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d006      	beq.n	80067e8 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2203      	movs	r2, #3
 80067de:	701a      	strb	r2, [r3, #0]
        Match=false;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
    }
 80067e6:	e002      	b.n	80067ee <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
    }
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>:

//*****************************************************************************
// DC Detailed Status
//
void SetN2kPGN127506(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     uint8_t StateOfCharge, uint8_t StateOfHealth, double TimeRemaining, double RippleVoltage, double Capacity) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	4603      	mov	r3, r0
 8006808:	70fb      	strb	r3, [r7, #3]
 800680a:	460b      	mov	r3, r1
 800680c:	70bb      	strb	r3, [r7, #2]
 800680e:	4613      	mov	r3, r2
 8006810:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127506L);
 8006812:	492f      	ldr	r1, [pc, #188]	; (80068d0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd8>)
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9dd 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2206      	movs	r2, #6
 800681e:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(SID);
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb15 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(DCInstance);
 800682a:	78bb      	ldrb	r3, [r7, #2]
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb10 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte((unsigned char)DCType);
 8006834:	787b      	ldrb	r3, [r7, #1]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb0b 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfCharge);
 800683e:	7c3b      	ldrb	r3, [r7, #16]
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fb06 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfHealth);
 8006848:	7d3b      	ldrb	r3, [r7, #20]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fb01 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(TimeRemaining,60);
 8006852:	a319      	add	r3, pc, #100	; (adr r3, 80068b8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xdc>)
 8006862:	e9cd 2300 	strd	r2, r3, [sp]
 8006866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa44 	bl	8006cf8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(RippleVoltage,0.001);
 8006870:	a311      	add	r3, pc, #68	; (adr r3, 80068b8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800687a:	a311      	add	r3, pc, #68	; (adr r3, 80068c0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc8>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	e9cd 2300 	strd	r2, r3, [sp]
 8006884:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fa35 	bl	8006cf8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(Capacity,3600);
 800688e:	a30a      	add	r3, pc, #40	; (adr r3, 80068b8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006898:	a30b      	add	r3, pc, #44	; (adr r3, 80068c8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd0>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	e9cd 2300 	strd	r2, r3, [sp]
 80068a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa26 	bl	8006cf8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	f3af 8000 	nop.w
 80068b8:	00000000 	.word	0x00000000
 80068bc:	c1cdcd65 	.word	0xc1cdcd65
 80068c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80068c4:	3f50624d 	.word	0x3f50624d
 80068c8:	00000000 	.word	0x00000000
 80068cc:	40ac2000 	.word	0x40ac2000
 80068d0:	0001f212 	.word	0x0001f212
 80068d4:	404e0000 	.word	0x404e0000

080068d8 <_Z15SetN2kPGN127508R7tN2kMsghdddh>:

//*****************************************************************************
// Battery Status
// Temperatures should be in Kelvins
void SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent,
                     double BatteryTemperature, unsigned char SID) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af04      	add	r7, sp, #16
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	e9c7 2300 	strd	r2, r3, [r7]
 80068e4:	460b      	mov	r3, r1
 80068e6:	72fb      	strb	r3, [r7, #11]
    N2kMsg.SetPGN(127508L);
 80068e8:	4927      	ldr	r1, [pc, #156]	; (8006988 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xb0>)
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f972 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2206      	movs	r2, #6
 80068f4:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatteryInstance);
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	4619      	mov	r1, r3
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 faaa 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteDouble(BatteryVoltage,0.01);
 8006900:	a31b      	add	r3, pc, #108	; (adr r3, 8006970 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800690a:	a31b      	add	r3, pc, #108	; (adr r3, 8006978 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	e9cd 2300 	strd	r2, r3, [sp]
 8006914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f9c3 	bl	8006ca4 <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteDouble(BatteryCurrent,0.1);
 800691e:	a314      	add	r3, pc, #80	; (adr r3, 8006970 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006928:	a315      	add	r3, pc, #84	; (adr r3, 8006980 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa8>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	e9cd 2300 	strd	r2, r3, [sp]
 8006932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f9b4 	bl	8006ca4 <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteUDouble(BatteryTemperature,0.01);
 800693c:	a30c      	add	r3, pc, #48	; (adr r3, 8006970 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006946:	a30c      	add	r3, pc, #48	; (adr r3, 8006978 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	e9cd 2300 	strd	r2, r3, [sp]
 8006950:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f9cf 	bl	8006cf8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte(SID);
 800695a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800695e:	4619      	mov	r1, r3
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fa77 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	00000000 	.word	0x00000000
 8006974:	c1cdcd65 	.word	0xc1cdcd65
 8006978:	47ae147b 	.word	0x47ae147b
 800697c:	3f847ae1 	.word	0x3f847ae1
 8006980:	9999999a 	.word	0x9999999a
 8006984:	3fb99999 	.word	0x3fb99999
 8006988:	0001f214 	.word	0x0001f214
 800698c:	00000000 	.word	0x00000000

08006990 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:

//*****************************************************************************
// Battery Configuration Status
void SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af04      	add	r7, sp, #16
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	70fb      	strb	r3, [r7, #3]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70bb      	strb	r3, [r7, #2]
 80069a6:	4613      	mov	r3, r2
 80069a8:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127513L);
 80069aa:	4949      	ldr	r1, [pc, #292]	; (8006ad0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x140>)
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f911 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2206      	movs	r2, #6
 80069b6:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatInstance);
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa49 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xc0 | ((SupportsEqual & 0x03) << 4) | (BatType & 0x0f)); // BatType (4 bit), SupportsEqual (2 bit), Reserved (2 bit)
 80069c2:	787b      	ldrb	r3, [r7, #1]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	b25b      	sxtb	r3, r3
 80069c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80069d2:	b25a      	sxtb	r2, r3
 80069d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	4313      	orrs	r3, r2
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa34 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte( ((BatChemistry & 0x0f) << 4) | (BatNominalVoltage & 0x0f) ); // BatNominalVoltage (4 bit), BatChemistry (4 bit)
 80069ec:	7d3b      	ldrb	r3, [r7, #20]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	b25a      	sxtb	r2, r3
 80069f2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	b25b      	sxtb	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa25 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(BatCapacity,3600);
 8006a0a:	a329      	add	r3, pc, #164	; (adr r3, 8006ab0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x120>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a14:	a328      	add	r3, pc, #160	; (adr r3, 8006ab8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x128>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	e9cd 2300 	strd	r2, r3, [sp]
 8006a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f968 	bl	8006cf8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)BatTemperatureCoefficient);
 8006a28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa10 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    PeukertExponent-=1; // Is this right or not I am not yet sure!
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	4b26      	ldr	r3, [pc, #152]	; (8006ad4 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x144>)
 8006a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a3e:	f7f9 fc09 	bl	8000254 <__aeabi_dsub>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (PeukertExponent<0 || PeukertExponent>0.504) { N2kMsg.AddByte(0xff); } else { N2kMsg.Add1ByteUDouble(PeukertExponent,0.002,-1); }
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a56:	f7fa f827 	bl	8000aa8 <__aeabi_dcmplt>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xe4>
 8006a60:	a317      	add	r3, pc, #92	; (adr r3, 8006ac0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x130>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a6a:	f7fa f83b 	bl	8000ae4 <__aeabi_dcmpgt>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xee>
 8006a74:	21ff      	movs	r1, #255	; 0xff
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9ec 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 8006a7c:	e00e      	b.n	8006a9c <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x10c>
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x148>)
 8006a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a88:	a30f      	add	r3, pc, #60	; (adr r3, 8006ac8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x138>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	e9cd 2300 	strd	r2, r3, [sp]
 8006a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f958 	bl	8006d4c <_ZN7tN2kMsg15Add1ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)ChargeEfficiencyFactor);
 8006a9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9d6 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
}
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	c1cdcd65 	.word	0xc1cdcd65
 8006ab8:	00000000 	.word	0x00000000
 8006abc:	40ac2000 	.word	0x40ac2000
 8006ac0:	9ba5e354 	.word	0x9ba5e354
 8006ac4:	3fe020c4 	.word	0x3fe020c4
 8006ac8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006acc:	3f60624d 	.word	0x3f60624d
 8006ad0:	0001f219 	.word	0x0001f219
 8006ad4:	3ff00000 	.word	0x3ff00000
 8006ad8:	bff00000 	.word	0xbff00000

08006adc <_ZNK7tN2kMsg7IsValidEv>:
  void SetPGN(unsigned long _PGN);
  void ForceSource(unsigned char _Source) const { Source=_Source; }
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; } // We can send to specified destination only for PGN:s low byte=0
  void Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination=0xff);
  virtual void Clear();
  bool IsValid() const { return (PGN!=0 && DataLen>0); }
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dd01      	ble.n	8006af8 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <_ZNK7tN2kMsg7IsValidEv+0x1e>
 8006af8:	2300      	movs	r3, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <round>:

//*****************************************************************************
// On Arduino round() is a macro, hence the definition check. On other systems
// it is a function that may or may not be implemented so we do it ourselves.
#if !defined(round)
double round(double val) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	e9c7 0100 	strd	r0, r1, [r7]
  return val >= 0
      ? floor(val + 0.5)
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b1a:	f7f9 ffd9 	bl	8000ad0 <__aeabi_dcmpge>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00f      	beq.n	8006b44 <round+0x40>
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <round+0x68>)
 8006b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b2e:	f7f9 fb93 	bl	8000258 <__adddf3>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4610      	mov	r0, r2
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f009 fd6d 	bl	8010618 <floor>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
      : ceil(val - 0.5);
 8006b42:	e00e      	b.n	8006b62 <round+0x5e>
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <round+0x68>)
 8006b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b4e:	f7f9 fb81 	bl	8000254 <__aeabi_dsub>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f009 fcdd 	bl	8010518 <ceil>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
}
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	3fe00000 	.word	0x3fe00000

08006b70 <_ZN7tN2kMsgC1Ehhmi>:
#endif

//*****************************************************************************
tN2kMsg::tN2kMsg(unsigned char _Source, unsigned char _Priority, unsigned long _PGN, int _DataLen) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	72fb      	strb	r3, [r7, #11]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	72bb      	strb	r3, [r7, #10]
 8006b82:	4a13      	ldr	r2, [pc, #76]	; (8006bd0 <_ZN7tN2kMsgC1Ehhmi+0x60>)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]
  Init(_Priority,_PGN,_Source,255);
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	7ab9      	ldrb	r1, [r7, #10]
 8006b8c:	22ff      	movs	r2, #255	; 0xff
 8006b8e:	9200      	str	r2, [sp, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f839 	bl	8006c0a <_ZN7tN2kMsg4InitEhmhh>
  if ( _DataLen>0 && _DataLen<MaxDataLen ) DataLen=_DataLen;
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dd05      	ble.n	8006baa <_ZN7tN2kMsgC1Ehhmi+0x3a>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2bde      	cmp	r3, #222	; 0xde
 8006ba2:	dc02      	bgt.n	8006baa <_ZN7tN2kMsgC1Ehhmi+0x3a>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	611a      	str	r2, [r3, #16]
  ResetData();
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f852 	bl	8006c54 <_ZN7tN2kMsg9ResetDataEv>
  if ( PGN!=0 ) MsgTime=N2kMillis();
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <_ZN7tN2kMsgC1Ehhmi+0x54>
 8006bb8:	f001 f8bc 	bl	8007d34 <_Z9N2kMillisv>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	08010d30 	.word	0x08010d30

08006bd4 <_ZN7tN2kMsg6SetPGNEm>:

//*****************************************************************************
void tN2kMsg::SetPGN(unsigned long _PGN) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  Clear();
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
  if ( PGN==0 ) PGN=_PGN;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <_ZN7tN2kMsg6SetPGNEm+0x22>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	609a      	str	r2, [r3, #8]
  MsgTime=N2kMillis();
 8006bf6:	f001 f89d 	bl	8007d34 <_Z9N2kMillisv>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <_ZN7tN2kMsg4InitEhmhh>:

//*****************************************************************************
void tN2kMsg::Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination) {
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	461a      	mov	r2, r3
 8006c16:	460b      	mov	r3, r1
 8006c18:	72fb      	strb	r3, [r7, #11]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	72bb      	strb	r3, [r7, #10]
  DataLen=0;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	611a      	str	r2, [r3, #16]
  Priority=_Priority & 0x7;
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	711a      	strb	r2, [r3, #4]
  SetPGN(_PGN);
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ffce 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  Source=_Source;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	7aba      	ldrb	r2, [r7, #10]
 8006c3c:	731a      	strb	r2, [r3, #12]
  Destination=_Destination;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	7e3a      	ldrb	r2, [r7, #24]
 8006c42:	735a      	strb	r2, [r3, #13]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
  TPMessage=false;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
#endif
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <_ZN7tN2kMsg9ResetDataEv>:

//*****************************************************************************
void tN2kMsg::ResetData() {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  if ( DataLen>0 ) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dd08      	ble.n	8006c76 <_ZN7tN2kMsg9ResetDataEv+0x22>
    memset(Data,0xff,DataLen);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f103 0014 	add.w	r0, r3, #20
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	21ff      	movs	r1, #255	; 0xff
 8006c72:	f009 fda1 	bl	80107b8 <memset>
  }
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <_ZN7tN2kMsg5ClearEv>:

//*****************************************************************************
void tN2kMsg::Clear() {
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  PGN=0;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	609a      	str	r2, [r3, #8]
  DataLen=0;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	611a      	str	r2, [r3, #16]
  MsgTime=0;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <_ZN7tN2kMsg14Add2ByteDoubleEddd>:
    SetBuf3ByteInt(0x7fffff,DataLen,Data);
  }
}

//*****************************************************************************
void tN2kMsg::Add2ByteDouble(double v, double precision, double UndefVal) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 8006cb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb8:	f7f9 feec 	bl	8000a94 <__aeabi_dcmpeq>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10c      	bne.n	8006cdc <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x38>
    SetBuf2ByteDouble(v,precision,DataLen,Data);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	3214      	adds	r2, #20
 8006cca:	9201      	str	r2, [sp, #4]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd6:	f000 fa6f 	bl	80071b8 <_Z17SetBuf2ByteDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
  }
}
 8006cda:	e009      	b.n	8006cf0 <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f103 0110 	add.w	r1, r3, #16
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8006cec:	f000 fb46 	bl	800737c <_Z15SetBuf2ByteUInttRiPh>
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>:

//*****************************************************************************
void tN2kMsg::Add2ByteUDouble(double v, double precision, double UndefVal) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 8006d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d0c:	f7f9 fec2 	bl	8000a94 <__aeabi_dcmpeq>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10c      	bne.n	8006d30 <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x38>
    SetBuf2ByteUDouble(v,precision,DataLen,Data);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3310      	adds	r3, #16
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	3214      	adds	r2, #20
 8006d1e:	9201      	str	r2, [sp, #4]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2a:	f000 fa8d 	bl	8007248 <_Z18SetBuf2ByteUDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
  }
}
 8006d2e:	e009      	b.n	8006d44 <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f103 0110 	add.w	r1, r3, #16
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3314      	adds	r3, #20
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006d40:	f000 fb1c 	bl	800737c <_Z15SetBuf2ByteUInttRiPh>
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZN7tN2kMsg15Add1ByteUDoubleEddd>:
    AddByte(N2kInt8NA);
  }
}

//*****************************************************************************
void tN2kMsg::Add1ByteUDouble(double v, double precision, double UndefVal) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 8006d58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d60:	f7f9 fe98 	bl	8000a94 <__aeabi_dcmpeq>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10c      	bne.n	8006d84 <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x38>
    SetBuf1ByteUDouble(v,precision,DataLen,Data);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3310      	adds	r3, #16
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	3214      	adds	r2, #20
 8006d72:	9201      	str	r2, [sp, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d7e:	f000 faa7 	bl	80072d0 <_Z18SetBuf1ByteUDoubleddRiPh>
  } else {
    AddByte(N2kUInt8NA);
  }
}
 8006d82:	e003      	b.n	8006d8c <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x40>
    AddByte(N2kUInt8NA);
 8006d84:	21ff      	movs	r1, #255	; 0xff
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f864 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <_ZN7tN2kMsg11Add2ByteIntEs>:

//*****************************************************************************
void tN2kMsg::Add2ByteInt(int16_t v) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteInt(v,DataLen,Data);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f103 0110 	add.w	r1, r3, #16
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f103 0214 	add.w	r2, r3, #20
 8006dac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fad1 	bl	8007358 <_Z14SetBuf2ByteIntsRiPh>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>:

//*****************************************************************************
void tN2kMsg::Add2ByteUInt(uint16_t v) {
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteUInt(v,DataLen,Data);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 0110 	add.w	r1, r3, #16
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f103 0214 	add.w	r2, r3, #20
 8006dd6:	887b      	ldrh	r3, [r7, #2]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 facf 	bl	800737c <_Z15SetBuf2ByteUInttRiPh>
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <_ZN7tN2kMsg11Add3ByteIntEl>:

//*****************************************************************************
void tN2kMsg::Add3ByteInt(int32_t v) {
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  SetBuf3ByteInt(v,DataLen,Data);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f103 0110 	add.w	r1, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3314      	adds	r3, #20
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6838      	ldr	r0, [r7, #0]
 8006dfe:	f000 face 	bl	800739e <_Z14SetBuf3ByteIntlRiPh>
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <_ZN7tN2kMsg12Add4ByteUIntEm>:

//*****************************************************************************
void tN2kMsg::Add4ByteUInt(uint32_t v) {
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  SetBuf4ByteUInt(v,DataLen,Data);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0110 	add.w	r1, r3, #16
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6838      	ldr	r0, [r7, #0]
 8006e22:	f000 facc 	bl	80073be <_Z15SetBuf4ByteUIntmRiPh>
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <_ZN7tN2kMsg9AddUInt64Ey>:

//*****************************************************************************
void tN2kMsg::AddUInt64(uint64_t v) {
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	e9c7 2300 	strd	r2, r3, [r7]
  SetBufUInt64(v,DataLen,Data);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f103 0210 	add.w	r2, r3, #16
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3314      	adds	r3, #20
 8006e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e48:	f000 fac9 	bl	80073de <_Z12SetBufUInt64yRiPh>
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_ZN7tN2kMsg7AddByteEh>:

//*****************************************************************************
void tN2kMsg::AddByte(unsigned char v) {
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  Data[DataLen]=v; DataLen++;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	751a      	strb	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	611a      	str	r2, [r3, #16]
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <_ZN7tN2kMsg6AddStrEPKcib>:

//*****************************************************************************
void tN2kMsg::AddStr(const char *str, int len, bool UsePgm) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	70fb      	strb	r3, [r7, #3]
  SetBufStr(str,len,DataLen,Data,UsePgm,0xff);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f103 0210 	add.w	r2, r3, #16
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f103 0114 	add.w	r1, r3, #20
 8006e9a:	23ff      	movs	r3, #255	; 0xff
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	68b8      	ldr	r0, [r7, #8]
 8006ea8:	f000 faac 	bl	8007404 <_Z9SetBufStrPKciRiPhbh>
}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <_ZNK7tN2kMsg7GetByteERi>:
    DataLen+=bufLen;
  }
}

//*****************************************************************************
unsigned char tN2kMsg::GetByte(int &Index) const {
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  if (Index<DataLen) {
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	da08      	bge.n	8006edc <_ZNK7tN2kMsg7GetByteERi+0x28>
    return Data[Index++];
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	6011      	str	r1, [r2, #0]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	7d1b      	ldrb	r3, [r3, #20]
 8006eda:	e000      	b.n	8006ede <_ZNK7tN2kMsg7GetByteERi+0x2a>
  } else return 0xff;
 8006edc:	23ff      	movs	r3, #255	; 0xff
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <_ZNK7tN2kMsg12Get2ByteUIntERit>:
    return GetBuf2ByteInt(Index,Data);
  } else return def;
}

//*****************************************************************************
uint16_t tN2kMsg::Get2ByteUInt(int &Index, uint16_t def) const {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  if (Index+2<=DataLen) {
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	da07      	bge.n	8006f14 <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2c>
    return GetBuf2ByteUInt(Index,Data);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3314      	adds	r3, #20
 8006f08:	4619      	mov	r1, r3
 8006f0a:	68b8      	ldr	r0, [r7, #8]
 8006f0c:	f000 f914 	bl	8007138 <_Z15GetBuf2ByteUIntRiPKh>
 8006f10:	4603      	mov	r3, r0
 8006f12:	e000      	b.n	8006f16 <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2e>
  } else return def;
 8006f14:	88fb      	ldrh	r3, [r7, #6]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <_ZNK7tN2kMsg12Get3ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get3ByteUInt(int &Index, uint32_t def) const {
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  if (Index+3<=DataLen) {
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	da07      	bge.n	8006f48 <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2a>
    return GetBuf3ByteUInt(Index,Data);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3314      	adds	r3, #20
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f000 f909 	bl	8007156 <_Z15GetBuf3ByteUIntRiPKh>
 8006f44:	4603      	mov	r3, r0
 8006f46:	e000      	b.n	8006f4a <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2c>
  } else return def;
 8006f48:	687b      	ldr	r3, [r7, #4]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <_ZNK7tN2kMsg12Get4ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get4ByteUInt(int &Index, uint32_t def) const {
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
  if (Index+4<=DataLen) {
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1cda      	adds	r2, r3, #3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	da07      	bge.n	8006f7c <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2a>
    return GetBuf4ByteUInt(Index,Data);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3314      	adds	r3, #20
 8006f70:	4619      	mov	r1, r3
 8006f72:	68b8      	ldr	r0, [r7, #8]
 8006f74:	f000 f8fe 	bl	8007174 <_Z15GetBuf4ByteUIntRiPKh>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	e000      	b.n	8006f7e <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2c>
  } else return def;
 8006f7c:	687b      	ldr	r3, [r7, #4]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <_ZNK7tN2kMsg9GetUInt64ERiy>:

//*****************************************************************************
uint64_t tN2kMsg::GetUInt64(int &Index, uint64_t def) const {
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	e9c7 2300 	strd	r2, r3, [r7]
  if (Index+8<=DataLen) {
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	1dda      	adds	r2, r3, #7
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	da08      	bge.n	8006fb4 <_ZNK7tN2kMsg9GetUInt64ERiy+0x2e>
    return GetBuf8ByteUInt(Index,Data);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3314      	adds	r3, #20
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	68b8      	ldr	r0, [r7, #8]
 8006faa:	f000 f8f2 	bl	8007192 <_Z15GetBuf8ByteUIntRiPKh>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	e001      	b.n	8006fb8 <_ZNK7tN2kMsg9GetUInt64ERiy+0x32>
  } else return def;
 8006fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <_ZNK7tN2kMsg6GetStrEjPcjhRi>:
    return true;
  } else return false;
}

//*****************************************************************************
bool tN2kMsg::GetStr(size_t StrBufSize, char *StrBuf, size_t Length, unsigned char nulChar, int &Index) const {
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b088      	sub	sp, #32
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	603b      	str	r3, [r7, #0]
  unsigned char vb;
  bool nullReached = false;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	77fb      	strb	r3, [r7, #31]
  if ( StrBufSize==0 || StrBuf==0 ) {
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x1e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d109      	bne.n	8006ff4 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x32>
    Index+=Length;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	4413      	add	r3, r2
 8006fea:	461a      	mov	r2, r3
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	601a      	str	r2, [r3, #0]
    return true;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e062      	b.n	80070ba <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  }
  StrBuf[0] = '\0';
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
  if ((size_t)Index+Length<=(size_t)DataLen) {
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	4413      	add	r3, r2
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	6912      	ldr	r2, [r2, #16]
 8007008:	4293      	cmp	r3, r2
 800700a:	d855      	bhi.n	80070b8 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf6>
    size_t i;
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d22f      	bcs.n	8007078 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	429a      	cmp	r2, r3
 8007020:	d22a      	bcs.n	8007078 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
      vb = GetByte(Index);
 8007022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff45 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]
      if (! nullReached) {
 800702e:	7ffb      	ldrb	r3, [r7, #31]
 8007030:	f083 0301 	eor.w	r3, r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d015      	beq.n	8007066 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xa4>
        if (vb == 0x00 || vb == nulChar ) {
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x88>
 8007040:	7dfa      	ldrb	r2, [r7, #23]
 8007042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007046:	429a      	cmp	r2, r3
 8007048:	d107      	bne.n	800705a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x98>
          nullReached = true; // either null or '@' (AIS null character)
 800704a:	2301      	movs	r3, #1
 800704c:	77fb      	strb	r3, [r7, #31]
          StrBuf[i] = '\0';
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	4413      	add	r3, r2
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e00a      	b.n	8007070 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        } else {
          StrBuf[i] = vb;
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	4413      	add	r3, r2
 8007060:	7dfa      	ldrb	r2, [r7, #23]
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e004      	b.n	8007070 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        }
      } else {
        StrBuf[i] = '\0';
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	4413      	add	r3, r2
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	3301      	adds	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e7cb      	b.n	8007010 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x4e>
      }
    }
    StrBuf[i] = '\0';
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	4413      	add	r3, r2
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
    for (;i<Length;i++) GetByte(Index);  // Stopped by buffer size, so read out bytes from message
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d207      	bcs.n	800709a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
 800708a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff ff11 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	3301      	adds	r3, #1
 8007096:	61bb      	str	r3, [r7, #24]
 8007098:	e7f3      	b.n	8007082 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xc0>
    for (;i<StrBufSize;i++) StrBuf[i] = '\0';  // Stopped by length, fill buffer with 0
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d208      	bcs.n	80070b4 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf2>
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	4413      	add	r3, r2
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	3301      	adds	r3, #1
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e7f2      	b.n	800709a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
    return true;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  } else return false;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <_ZNK7tN2kMsg9GetVarStrERjPcRi>:

//*****************************************************************************
bool tN2kMsg::GetVarStr(size_t &StrBufSize, char *StrBuf, int &Index) const {
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b088      	sub	sp, #32
 80070c6:	af02      	add	r7, sp, #8
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	603b      	str	r3, [r7, #0]
  size_t Len=GetByte(Index)-2;
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff feee 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80070d8:	4603      	mov	r3, r0
 80070da:	3b02      	subs	r3, #2
 80070dc:	617b      	str	r3, [r7, #20]
  uint8_t Type=GetByte(Index);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fee7 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 80070e6:	4603      	mov	r3, r0
 80070e8:	74fb      	strb	r3, [r7, #19]
  if ( Type!=0x01 ) { StrBufSize=0; return false; }
 80070ea:	7cfb      	ldrb	r3, [r7, #19]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d004      	beq.n	80070fa <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x38>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	e01a      	b.n	8007130 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x6e>
  if ( StrBuf!=0 ) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x56>
    GetStr(StrBufSize,StrBuf,Len,0xff,Index);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	23ff      	movs	r3, #255	; 0xff
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff ff56 	bl	8006fc2 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
 8007116:	e007      	b.n	8007128 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x66>
  } else {
    Index+=Len; // Just pass this string
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	4413      	add	r3, r2
 8007122:	461a      	mov	r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	601a      	str	r2, [r3, #0]
  }
  StrBufSize=Len;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	601a      	str	r2, [r3, #0]
  return true;
 800712e:	2301      	movs	r3, #1
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <_Z15GetBuf2ByteUIntRiPKh>:
int16_t GetBuf2ByteInt(int &index, const unsigned char *buf) {
  return GetBuf<int16_t>(2, index, buf);
}

//*****************************************************************************
uint16_t GetBuf2ByteUInt(int &index, const unsigned char *buf) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  return GetBuf<uint16_t>(2, index, buf);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	2002      	movs	r0, #2
 8007148:	f000 fc86 	bl	8007a58 <_Z6GetBufItET_jRiPKh>
 800714c:	4603      	mov	r3, r0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <_Z15GetBuf3ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf3ByteUInt(int &index, const unsigned char *buf) {
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(3, index, buf);
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	2003      	movs	r0, #3
 8007166:	f000 fc97 	bl	8007a98 <_Z6GetBufImET_jRiPKh>
 800716a:	4603      	mov	r3, r0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <_Z15GetBuf4ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf4ByteUInt(int &index, const unsigned char *buf) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(4, index, buf);
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	2004      	movs	r0, #4
 8007184:	f000 fc88 	bl	8007a98 <_Z6GetBufImET_jRiPKh>
 8007188:	4603      	mov	r3, r0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <_Z15GetBuf8ByteUIntRiPKh>:

//*****************************************************************************
uint64_t GetBuf8ByteUInt(int &index, const unsigned char *buf) {
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  return GetBuf<uint64_t>(8, index, buf);
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	2008      	movs	r0, #8
 80071a2:	f000 fc99 	bl	8007ad8 <_Z6GetBufIyET_jRiPKh>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
}
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	0000      	movs	r0, r0
	...

080071b8 <_Z17SetBuf2ByteDoubleddRiPh>:

  return vl * precision;
}

//*****************************************************************************
void SetBuf2ByteDouble(double v, double precision, int &index, unsigned char *buf) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80071c2:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 80071c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071ce:	f7f9 fb23 	bl	8000818 <__aeabi_ddiv>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	f7ff fc93 	bl	8006b04 <round>
 80071de:	e9c7 0106 	strd	r0, r1, [r7, #24]
  int16_t vi = (vd>=N2kInt16Min && vd<N2kInt16OR)?(int16_t)vd:N2kInt16OR;
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	4b16      	ldr	r3, [pc, #88]	; (8007240 <_Z17SetBuf2ByteDoubleddRiPh+0x88>)
 80071e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071ec:	f7f9 fc70 	bl	8000ad0 <__aeabi_dcmpge>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d010      	beq.n	8007218 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 80071f6:	a310      	add	r3, pc, #64	; (adr r3, 8007238 <_Z17SetBuf2ByteDoubleddRiPh+0x80>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007200:	f7f9 fc52 	bl	8000aa8 <__aeabi_dcmplt>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d006      	beq.n	8007218 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800720a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800720e:	f7f9 fc73 	bl	8000af8 <__aeabi_d2iz>
 8007212:	4603      	mov	r3, r0
 8007214:	b21b      	sxth	r3, r3
 8007216:	e001      	b.n	800721c <_Z17SetBuf2ByteDoubleddRiPh+0x64>
 8007218:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800721c:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800721e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007226:	2102      	movs	r1, #2
 8007228:	f000 fc7c 	bl	8007b24 <_Z6SetBufIsEvT_jRiPh>
}
 800722c:	bf00      	nop
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	f3af 8000 	nop.w
 8007238:	00000000 	.word	0x00000000
 800723c:	40dfff80 	.word	0x40dfff80
 8007240:	c0e00000 	.word	0xc0e00000
 8007244:	00000000 	.word	0x00000000

08007248 <_Z18SetBuf2ByteUDoubleddRiPh>:

//*****************************************************************************
void SetBuf2ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007252:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 8007256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800725e:	f7f9 fadb 	bl	8000818 <__aeabi_ddiv>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4610      	mov	r0, r2
 8007268:	4619      	mov	r1, r3
 800726a:	f7ff fc4b 	bl	8006b04 <round>
 800726e:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint16_t vi = (vd>=0 && vd<N2kUInt16OR)?(uint16_t)vd:N2kUInt16OR;
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800727e:	f7f9 fc27 	bl	8000ad0 <__aeabi_dcmpge>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d010      	beq.n	80072aa <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 8007288:	a30f      	add	r3, pc, #60	; (adr r3, 80072c8 <_Z18SetBuf2ByteUDoubleddRiPh+0x80>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007292:	f7f9 fc09 	bl	8000aa8 <__aeabi_dcmplt>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d006      	beq.n	80072aa <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800729c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072a0:	f7f9 fc52 	bl	8000b48 <__aeabi_d2uiz>
 80072a4:	4603      	mov	r3, r0
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	e001      	b.n	80072ae <_Z18SetBuf2ByteUDoubleddRiPh+0x66>
 80072aa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80072ae:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 80072b0:	8af8      	ldrh	r0, [r7, #22]
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b6:	2102      	movs	r1, #2
 80072b8:	f000 fc53 	bl	8007b62 <_Z6SetBufItEvT_jRiPh>
}
 80072bc:	bf00      	nop
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	f3af 8000 	nop.w
 80072c8:	00000000 	.word	0x00000000
 80072cc:	40efffc0 	.word	0x40efffc0

080072d0 <_Z18SetBuf1ByteUDoubleddRiPh>:
  int8_t vi = (vd>=N2kInt8Min && vd<N2kInt8OR)?(int8_t)vd:N2kInt8OR;
  SetBuf(vi, 1, index, buf);
}

//*****************************************************************************
void SetBuf1ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80072da:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 80072de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072e6:	f7f9 fa97 	bl	8000818 <__aeabi_ddiv>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7ff fc07 	bl	8006b04 <round>
 80072f6:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint8_t vi = (vd>=0 && vd<N2kUInt8OR)?(uint8_t)vd:N2kUInt8OR;
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007306:	f7f9 fbe3 	bl	8000ad0 <__aeabi_dcmpge>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 8007310:	a30f      	add	r3, pc, #60	; (adr r3, 8007350 <_Z18SetBuf1ByteUDoubleddRiPh+0x80>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800731a:	f7f9 fbc5 	bl	8000aa8 <__aeabi_dcmplt>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d006      	beq.n	8007332 <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 8007324:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007328:	f7f9 fc0e 	bl	8000b48 <__aeabi_d2uiz>
 800732c:	4603      	mov	r3, r0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	e000      	b.n	8007334 <_Z18SetBuf1ByteUDoubleddRiPh+0x64>
 8007332:	23fe      	movs	r3, #254	; 0xfe
 8007334:	75fb      	strb	r3, [r7, #23]
  SetBuf(vi, 1, index, buf);
 8007336:	7df8      	ldrb	r0, [r7, #23]
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800733c:	2101      	movs	r1, #1
 800733e:	f000 fc2f 	bl	8007ba0 <_Z6SetBufIhEvT_jRiPh>
}
 8007342:	bf00      	nop
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w
 8007350:	00000000 	.word	0x00000000
 8007354:	406fc000 	.word	0x406fc000

08007358 <_Z14SetBuf2ByteIntsRiPh>:

//*****************************************************************************
void SetBuf2ByteInt(int16_t v, int &index, unsigned char *buf) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 8007366:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	2102      	movs	r1, #2
 8007370:	f000 fbd8 	bl	8007b24 <_Z6SetBufIsEvT_jRiPh>
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <_Z15SetBuf2ByteUInttRiPh>:

//*****************************************************************************
void SetBuf2ByteUInt(uint16_t v, int &index, unsigned char *buf) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800738a:	89f8      	ldrh	r0, [r7, #14]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	2102      	movs	r1, #2
 8007392:	f000 fbe6 	bl	8007b62 <_Z6SetBufItEvT_jRiPh>
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <_Z14SetBuf3ByteIntlRiPh>:

//*****************************************************************************
void SetBuf3ByteInt(int32_t v, int &index, unsigned char *buf) {
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  SetBuf(v, 3, index, buf);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	2103      	movs	r1, #3
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fb15 	bl	80079e0 <_Z6SetBufIlEvT_jRiPh>
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <_Z15SetBuf4ByteUIntmRiPh>:

//*****************************************************************************
void SetBuf4ByteUInt(uint32_t v, int &index, unsigned char *buf) {
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
  SetBuf(v, 4, index, buf);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	2104      	movs	r1, #4
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fb23 	bl	8007a1c <_Z6SetBufImEvT_jRiPh>
}
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <_Z12SetBufUInt64yRiPh>:

//*****************************************************************************
void SetBufUInt64(uint64_t v, int &index, unsigned char *buf) {
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af02      	add	r7, sp, #8
 80073e4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	603b      	str	r3, [r7, #0]
  SetBuf(v, 8, index, buf);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2208      	movs	r2, #8
 80073f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073f8:	f000 fbf1 	bl	8007bde <_Z6SetBufIyEvT_jRiPh>
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_Z9SetBufStrPKciRiPhbh>:

//*****************************************************************************
void SetBufStr(const char *str, int len, int &index, unsigned char *buf, bool UsePgm, unsigned char fillChar) {
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
  int i=0;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  if ( UsePgm ) {
 8007416:	f897 3020 	ldrb.w	r3, [r7, #32]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01c      	beq.n	8007458 <_Z9SetBufStrPKciRiPhbh+0x54>
    for (; i<len && str[i]!=0; i++, index++) {
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	da35      	bge.n	8007492 <_Z9SetBufStrPKciRiPhbh+0x8e>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02f      	beq.n	8007492 <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=pgm_read_byte(&(str[i]));
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	441a      	add	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4619      	mov	r1, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	440b      	add	r3, r1
 8007442:	7812      	ldrb	r2, [r2, #0]
 8007444:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	3301      	adds	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e7e2      	b.n	800741e <_Z9SetBufStrPKciRiPhbh+0x1a>
    }
  } else {
    for (; i<len && str[i]!=0; i++, index++) {
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	da18      	bge.n	8007492 <_Z9SetBufStrPKciRiPhbh+0x8e>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d012      	beq.n	8007492 <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=str[i];
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	441a      	add	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4619      	mov	r1, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	440b      	add	r3, r1
 800747c:	7812      	ldrb	r2, [r2, #0]
 800747e:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	3301      	adds	r3, #1
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	e7e2      	b.n	8007458 <_Z9SetBufStrPKciRiPhbh+0x54>
    }
  }
  for (; i<len; i++, index++) {
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	da10      	bge.n	80074bc <_Z9SetBufStrPKciRiPhbh+0xb8>
    buf[index]=fillChar;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80074a8:	701a      	strb	r2, [r3, #0]
  for (; i<len; i++, index++) {
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	3301      	adds	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e7ea      	b.n	8007492 <_Z9SetBufStrPKciRiPhbh+0x8e>
  }
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	4770      	bx	lr
	...

080074c8 <_Z8PrintBufP9N2kStreamhPKhb>:

//*****************************************************************************
void PrintBuf(N2kStream *port, unsigned char len, const unsigned char *pData, bool AddLF) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	461a      	mov	r2, r3
 80074d4:	460b      	mov	r3, r1
 80074d6:	72fb      	strb	r3, [r7, #11]
 80074d8:	4613      	mov	r3, r2
 80074da:	72bb      	strb	r3, [r7, #10]
  if (port==0) return;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d021      	beq.n	8007526 <_Z8PrintBufP9N2kStreamhPKhb+0x5e>

  for(int i = 0; i<len; i++) {
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	da13      	bge.n	8007516 <_Z8PrintBufP9N2kStreamhPKhb+0x4e>
    if (i>0) { port->print(F(",")); };
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dd03      	ble.n	80074fc <_Z8PrintBufP9N2kStreamhPKhb+0x34>
 80074f4:	490e      	ldr	r1, [pc, #56]	; (8007530 <_Z8PrintBufP9N2kStreamhPKhb+0x68>)
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fb8f 	bl	8007c1a <_ZN9N2kStream5printEPKc>
    // Print bytes as hex.
    port->print(pData[i], 16);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2210      	movs	r2, #16
 8007506:	4619      	mov	r1, r3
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fba3 	bl	8007c54 <_ZN9N2kStream5printEih>
  for(int i = 0; i<len; i++) {
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	3301      	adds	r3, #1
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e7e7      	b.n	80074e6 <_Z8PrintBufP9N2kStreamhPKhb+0x1e>
  }

  if (AddLF) port->println(F(""));
 8007516:	7abb      	ldrb	r3, [r7, #10]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
 800751c:	4905      	ldr	r1, [pc, #20]	; (8007534 <_Z8PrintBufP9N2kStreamhPKhb+0x6c>)
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fbd8 	bl	8007cd4 <_ZN9N2kStream7printlnEPKc>
 8007524:	e000      	b.n	8007528 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
  if (port==0) return;
 8007526:	bf00      	nop
}
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	08010a6c 	.word	0x08010a6c
 8007534:	08010a70 	.word	0x08010a70

08007538 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>:

//*****************************************************************************
void tN2kMsg::Print(N2kStream *port, bool NoData) const {
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
  if (port==0 || !IsValid()) return;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x26>
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fac5 	bl	8006adc <_ZNK7tN2kMsg7IsValidEv>
 8007552:	4603      	mov	r3, r0
 8007554:	f083 0301 	eor.w	r3, r3, #1
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2a>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2c>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d15b      	bne.n	8007620 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xe8>
  port->print(N2kMillis()); port->print(F(" : "));
 8007568:	f000 fbe4 	bl	8007d34 <_Z9N2kMillisv>
 800756c:	4603      	mov	r3, r0
 800756e:	220a      	movs	r2, #10
 8007570:	4619      	mov	r1, r3
 8007572:	68b8      	ldr	r0, [r7, #8]
 8007574:	f000 fb6e 	bl	8007c54 <_ZN9N2kStream5printEih>
 8007578:	492b      	ldr	r1, [pc, #172]	; (8007628 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf0>)
 800757a:	68b8      	ldr	r0, [r7, #8]
 800757c:	f000 fb4d 	bl	8007c1a <_ZN9N2kStream5printEPKc>
  port->print(F("Pri:")); port->print(Priority);
 8007580:	492a      	ldr	r1, [pc, #168]	; (800762c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf4>)
 8007582:	68b8      	ldr	r0, [r7, #8]
 8007584:	f000 fb49 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	791b      	ldrb	r3, [r3, #4]
 800758c:	220a      	movs	r2, #10
 800758e:	4619      	mov	r1, r3
 8007590:	68b8      	ldr	r0, [r7, #8]
 8007592:	f000 fb5f 	bl	8007c54 <_ZN9N2kStream5printEih>
  port->print(F(" PGN:")); port->print(PGN);
 8007596:	4926      	ldr	r1, [pc, #152]	; (8007630 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf8>)
 8007598:	68b8      	ldr	r0, [r7, #8]
 800759a:	f000 fb3e 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	220a      	movs	r2, #10
 80075a4:	4619      	mov	r1, r3
 80075a6:	68b8      	ldr	r0, [r7, #8]
 80075a8:	f000 fb54 	bl	8007c54 <_ZN9N2kStream5printEih>
  port->print(F(" Source:")); port->print(Source);
 80075ac:	4921      	ldr	r1, [pc, #132]	; (8007634 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xfc>)
 80075ae:	68b8      	ldr	r0, [r7, #8]
 80075b0:	f000 fb33 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7b1b      	ldrb	r3, [r3, #12]
 80075b8:	220a      	movs	r2, #10
 80075ba:	4619      	mov	r1, r3
 80075bc:	68b8      	ldr	r0, [r7, #8]
 80075be:	f000 fb49 	bl	8007c54 <_ZN9N2kStream5printEih>
  port->print(F(" Dest:")); port->print(Destination);
 80075c2:	491d      	ldr	r1, [pc, #116]	; (8007638 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x100>)
 80075c4:	68b8      	ldr	r0, [r7, #8]
 80075c6:	f000 fb28 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	7b5b      	ldrb	r3, [r3, #13]
 80075ce:	220a      	movs	r2, #10
 80075d0:	4619      	mov	r1, r3
 80075d2:	68b8      	ldr	r0, [r7, #8]
 80075d4:	f000 fb3e 	bl	8007c54 <_ZN9N2kStream5printEih>
  port->print(F(" Len:")); port->print(DataLen);
 80075d8:	4918      	ldr	r1, [pc, #96]	; (800763c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x104>)
 80075da:	68b8      	ldr	r0, [r7, #8]
 80075dc:	f000 fb1d 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	220a      	movs	r2, #10
 80075e6:	4619      	mov	r1, r3
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f000 fb33 	bl	8007c54 <_ZN9N2kStream5printEih>
  if (!NoData) {
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	f083 0301 	eor.w	r3, r3, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xde>
    port->print(F(" Data:"));
 80075fa:	4911      	ldr	r1, [pc, #68]	; (8007640 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x108>)
 80075fc:	68b8      	ldr	r0, [r7, #8]
 80075fe:	f000 fb0c 	bl	8007c1a <_ZN9N2kStream5printEPKc>
    PrintBuf(port,DataLen,Data);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	b2d9      	uxtb	r1, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f103 0214 	add.w	r2, r3, #20
 800760e:	2300      	movs	r3, #0
 8007610:	68b8      	ldr	r0, [r7, #8]
 8007612:	f7ff ff59 	bl	80074c8 <_Z8PrintBufP9N2kStreamhPKhb>
  }
  port->println(F(""));
 8007616:	490b      	ldr	r1, [pc, #44]	; (8007644 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x10c>)
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	f000 fb5b 	bl	8007cd4 <_ZN9N2kStream7printlnEPKc>
 800761e:	e000      	b.n	8007622 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xea>
  if (port==0 || !IsValid()) return;
 8007620:	bf00      	nop
}
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	08010a74 	.word	0x08010a74
 800762c:	08010a78 	.word	0x08010a78
 8007630:	08010a80 	.word	0x08010a80
 8007634:	08010a88 	.word	0x08010a88
 8007638:	08010a94 	.word	0x08010a94
 800763c:	08010a9c 	.word	0x08010a9c
 8007640:	08010aa4 	.word	0x08010aa4
 8007644:	08010a70 	.word	0x08010a70

08007648 <_Z19AddByteEscapedToBufhRhPhRi>:

//*****************************************************************************
void AddByteEscapedToBuf(unsigned char byteToAdd, uint8_t &idx, unsigned char *buf, int &byteSum)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]
  buf[idx++]=byteToAdd;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	b2d1      	uxtb	r1, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	7011      	strb	r1, [r2, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	7bfa      	ldrb	r2, [r7, #15]
 800766c:	701a      	strb	r2, [r3, #0]
  byteSum+=byteToAdd;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	441a      	add	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	601a      	str	r2, [r3, #0]

  if (byteToAdd == Escape) {
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2b10      	cmp	r3, #16
 800767e:	d10a      	bne.n	8007696 <_Z19AddByteEscapedToBufhRhPhRi+0x4e>
    buf[idx++]=Escape;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	b2d1      	uxtb	r1, r2
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	7011      	strb	r1, [r2, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	2210      	movs	r2, #16
 8007694:	701a      	strb	r2, [r3, #0]
  }
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>:

//*****************************************************************************
// Actisense Format:
// <10><02><93><length (1)><priority (1)><PGN (3)><destination (1)><source (1)><time (4)><len (1)><data (len)><CRC (1)><10><03>
void tN2kMsg::SendInActisenseFormat(N2kStream *port) const {
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b0ed      	sub	sp, #436	; 0x1b4
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80076ae:	6018      	str	r0, [r3, #0]
 80076b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80076b8:	6019      	str	r1, [r3, #0]
  unsigned long _PGN=PGN;
 80076ba:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  unsigned long _MsgTime=MsgTime;
 80076ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  uint8_t msgIdx=0;
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
  int byteSum = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  uint8_t CheckSum;
  unsigned char ActisenseMsgBuf[MaxActisenseMsgBuf];

  if (port==0 || !IsValid()) return;
 80076e8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x70>
 80076f6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076fa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	f7ff f9ec 	bl	8006adc <_ZNK7tN2kMsg7IsValidEv>
 8007704:	4603      	mov	r3, r0
 8007706:	f083 0301 	eor.w	r3, r3, #1
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x74>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x76>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 815d 	bne.w	80079d6 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x336>
  // Serial.print("freeMemory()="); Serial.println(freeMemory());

  ActisenseMsgBuf[msgIdx++]=Escape;
 800771c:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 8007728:	461a      	mov	r2, r3
 800772a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800772e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8007732:	2110      	movs	r1, #16
 8007734:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++]=StartOfText;
 8007736:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 8007742:	461a      	mov	r2, r3
 8007744:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007748:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800774c:	2102      	movs	r1, #2
 800774e:	5499      	strb	r1, [r3, r2]
  AddByteEscapedToBuf(MsgTypeN2k,msgIdx,ActisenseMsgBuf,byteSum);
 8007750:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007754:	f107 020c 	add.w	r2, r7, #12
 8007758:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800775c:	2093      	movs	r0, #147	; 0x93
 800775e:	f7ff ff73 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen+11,msgIdx,ActisenseMsgBuf,byteSum); //length does not include escaped chars
 8007762:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007766:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	330b      	adds	r3, #11
 8007772:	b2d8      	uxtb	r0, r3
 8007774:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007778:	f107 020c 	add.w	r2, r7, #12
 800777c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 8007780:	f7ff ff62 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Priority,msgIdx,ActisenseMsgBuf,byteSum);
 8007784:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007788:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	7918      	ldrb	r0, [r3, #4]
 8007790:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007794:	f107 020c 	add.w	r2, r7, #12
 8007798:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800779c:	f7ff ff54 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 80077a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077a4:	b2d8      	uxtb	r0, r3
 80077a6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80077aa:	f107 020c 	add.w	r2, r7, #12
 80077ae:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 80077b2:	f7ff ff49 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
 80077b6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 80077c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077c4:	b2d8      	uxtb	r0, r3
 80077c6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80077ca:	f107 020c 	add.w	r2, r7, #12
 80077ce:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 80077d2:	f7ff ff39 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
 80077d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077da:	0a1b      	lsrs	r3, r3, #8
 80077dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 80077e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077e4:	b2d8      	uxtb	r0, r3
 80077e6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80077ea:	f107 020c 	add.w	r2, r7, #12
 80077ee:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 80077f2:	f7ff ff29 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Destination,msgIdx,ActisenseMsgBuf,byteSum);
 80077f6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80077fa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	7b58      	ldrb	r0, [r3, #13]
 8007802:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007806:	f107 020c 	add.w	r2, r7, #12
 800780a:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800780e:	f7ff ff1b 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Source,msgIdx,ActisenseMsgBuf,byteSum);
 8007812:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007816:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	7b18      	ldrb	r0, [r3, #12]
 800781e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007822:	f107 020c 	add.w	r2, r7, #12
 8007826:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800782a:	f7ff ff0d 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  // Time?
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800782e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007832:	b2d8      	uxtb	r0, r3
 8007834:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007838:	f107 020c 	add.w	r2, r7, #12
 800783c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 8007840:	f7ff ff02 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
 8007844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007848:	0a1b      	lsrs	r3, r3, #8
 800784a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800784e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007852:	b2d8      	uxtb	r0, r3
 8007854:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007858:	f107 020c 	add.w	r2, r7, #12
 800785c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 8007860:	f7ff fef2 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
 8007864:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800786e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007872:	b2d8      	uxtb	r0, r3
 8007874:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007878:	f107 020c 	add.w	r2, r7, #12
 800787c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 8007880:	f7ff fee2 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
 8007884:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007888:	0a1b      	lsrs	r3, r3, #8
 800788a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800788e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007892:	b2d8      	uxtb	r0, r3
 8007894:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007898:	f107 020c 	add.w	r2, r7, #12
 800789c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 80078a0:	f7ff fed2 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen,msgIdx,ActisenseMsgBuf,byteSum);
 80078a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80078a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	b2d8      	uxtb	r0, r3
 80078b2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80078b6:	f107 020c 	add.w	r2, r7, #12
 80078ba:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 80078be:	f7ff fec3 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>


  for (int i = 0; i < DataLen; i++) AddByteEscapedToBuf(Data[i],msgIdx,ActisenseMsgBuf,byteSum);
 80078c2:	2300      	movs	r3, #0
 80078c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80078c8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80078cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80078d8:	429a      	cmp	r2, r3
 80078da:	da17      	bge.n	800790c <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x26c>
 80078dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80078e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80078ea:	4413      	add	r3, r2
 80078ec:	3314      	adds	r3, #20
 80078ee:	7818      	ldrb	r0, [r3, #0]
 80078f0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80078f4:	f107 020c 	add.w	r2, r7, #12
 80078f8:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 80078fc:	f7ff fea4 	bl	8007648 <_Z19AddByteEscapedToBufhRhPhRi>
 8007900:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007904:	3301      	adds	r3, #1
 8007906:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800790a:	e7dd      	b.n	80078c8 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x228>
  byteSum %= 256;
 800790c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007910:	425a      	negs	r2, r3
 8007912:	b2db      	uxtb	r3, r3
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	bf58      	it	pl
 8007918:	4253      	negpl	r3, r2
 800791a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

  CheckSum = (uint8_t)((byteSum == 0) ? 0 : (256 - byteSum));
 800791e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x292>
 8007926:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800792a:	b2db      	uxtb	r3, r3
 800792c:	425b      	negs	r3, r3
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e000      	b.n	8007934 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x294>
 8007932:	2300      	movs	r3, #0
 8007934:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
  ActisenseMsgBuf[msgIdx++]=CheckSum;
 8007938:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 8007944:	4619      	mov	r1, r3
 8007946:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800794a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800794e:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 8007952:	545a      	strb	r2, [r3, r1]
  if (CheckSum==Escape) ActisenseMsgBuf[msgIdx++]=CheckSum;
 8007954:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8007958:	2b10      	cmp	r3, #16
 800795a:	d10d      	bne.n	8007978 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x2d8>
 800795c:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 8007968:	4619      	mov	r1, r3
 800796a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800796e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8007972:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 8007976:	545a      	strb	r2, [r3, r1]

  ActisenseMsgBuf[msgIdx++] = Escape;
 8007978:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 8007984:	461a      	mov	r2, r3
 8007986:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800798a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800798e:	2110      	movs	r1, #16
 8007990:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++] = EndOfText;
 8007992:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800799e:	461a      	mov	r2, r3
 80079a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80079a4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80079a8:	2103      	movs	r1, #3
 80079aa:	5499      	strb	r1, [r3, r2]

//  if ( port->availableForWrite()>msgIdx ) {  // 16.7.2017 did not work yet
    port->write(ActisenseMsgBuf,msgIdx);
 80079ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80079b0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 80079c0:	4614      	mov	r4, r2
 80079c2:	f107 010c 	add.w	r1, r7, #12
 80079c6:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80079ca:	f5a2 70d8 	sub.w	r0, r2, #432	; 0x1b0
 80079ce:	4622      	mov	r2, r4
 80079d0:	6800      	ldr	r0, [r0, #0]
 80079d2:	4798      	blx	r3
 80079d4:	e000      	b.n	80079d8 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x338>
  if (port==0 || !IsValid()) return;
 80079d6:	bf00      	nop
//  }
    //Serial.print("Actisense data:");
    //PrintBuf(msgIdx,ActisenseMsgBuf);
    //Serial.print("\r\n");
}
 80079d8:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd90      	pop	{r4, r7, pc}

080079e0 <_Z6SetBufIlEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	4413      	add	r3, r2
 80079f8:	f107 010c 	add.w	r1, r7, #12
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f008 fecc 	bl	801079c <memcpy>
  index += len;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <_Z6SetBufImEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	4413      	add	r3, r2
 8007a34:	f107 010c 	add.w	r1, r7, #12
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f008 feae 	bl	801079c <memcpy>
  index += len;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <_Z6GetBufItET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  T v{0};
 8007a64:	2300      	movs	r3, #0
 8007a66:	82fb      	strh	r3, [r7, #22]
  memcpy(&v, &buf[index], len);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	1899      	adds	r1, r3, r2
 8007a72:	f107 0316 	add.w	r3, r7, #22
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f008 fe8f 	bl	801079c <memcpy>
  index += len;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	601a      	str	r2, [r3, #0]
  return v;
 8007a8e:	8afb      	ldrh	r3, [r7, #22]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <_Z6GetBufImET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  T v{0};
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	617b      	str	r3, [r7, #20]
  memcpy(&v, &buf[index], len);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	1899      	adds	r1, r3, r2
 8007ab2:	f107 0314 	add.w	r3, r7, #20
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f008 fe6f 	bl	801079c <memcpy>
  index += len;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	601a      	str	r2, [r3, #0]
  return v;
 8007ace:	697b      	ldr	r3, [r7, #20]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <_Z6GetBufIyET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  T v{0};
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  memcpy(&v, &buf[index], len);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	1899      	adds	r1, r3, r2
 8007afa:	f107 0310 	add.w	r3, r7, #16
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f008 fe4b 	bl	801079c <memcpy>
  index += len;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	601a      	str	r2, [r3, #0]
  return v;
 8007b16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <_Z6SetBufIsEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	4603      	mov	r3, r0
 8007b32:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f107 010e 	add.w	r1, r7, #14
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f008 fe29 	bl	801079c <memcpy>
  index += len;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4413      	add	r3, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <_Z6SetBufItEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
 8007b6e:	4603      	mov	r3, r0
 8007b70:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f107 010e 	add.w	r1, r7, #14
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f008 fe0a 	bl	801079c <memcpy>
  index += len;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	461a      	mov	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <_Z6SetBufIhEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
  memcpy(&buf[index], &v, len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f107 010f 	add.w	r1, r7, #15
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f008 fdeb 	bl	801079c <memcpy>
  index += len;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4413      	add	r3, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <_Z6SetBufIyEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f107 0108 	add.w	r1, r7, #8
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f008 fdcd 	bl	801079c <memcpy>
  index += len;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZN9N2kStream5printEPKc>:
#include <string.h>

#ifdef ARDUINO
// Arduino uses its own implementation.
#else
size_t N2kStream::print(const char *str) {
 8007c1a:	b590      	push	{r4, r7, lr}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
   if(str == 0)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <_ZN9N2kStream5printEPKc+0x14>
      return 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e00d      	b.n	8007c4a <_ZN9N2kStream5printEPKc+0x30>

   return write(reinterpret_cast<const uint8_t*>(str), strlen(str));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	681c      	ldr	r4, [r3, #0]
 8007c36:	6838      	ldr	r0, [r7, #0]
 8007c38:	f7f8 fb00 	bl	800023c <strlen>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	47a0      	blx	r4
 8007c46:	4603      	mov	r3, r0
 8007c48:	bf00      	nop
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd90      	pop	{r4, r7, pc}
	...

08007c54 <_ZN9N2kStream5printEih>:
   return print(str) + print("\r\n");
}
#endif


size_t N2kStream::print(int val, uint8_t radix) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	; 0x38
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]

   if(val == 0) {
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <_ZN9N2kStream5printEih+0x28>
      // 0 is always 0 regardless of radix.
      return write(reinterpret_cast<const uint8_t*>("0"), 1);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4916      	ldr	r1, [pc, #88]	; (8007ccc <_ZN9N2kStream5printEih+0x78>)
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	4798      	blx	r3
 8007c78:	4603      	mov	r3, r0
 8007c7a:	e023      	b.n	8007cc4 <_ZN9N2kStream5printEih+0x70>
   }

   // Enough for binary representation.
   char buf[8 * sizeof(val) + 1];
   char *ptr = &buf[sizeof(buf) - 1];
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	3320      	adds	r3, #32
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
   *ptr = '\0';
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]

   do {
      *--ptr="0123456789abcdef"[val % radix];
 8007c8a:	79fa      	ldrb	r2, [r7, #7]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8007c92:	fb01 f202 	mul.w	r2, r1, r2
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9a:	3a01      	subs	r2, #1
 8007c9c:	637a      	str	r2, [r7, #52]	; 0x34
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <_ZN9N2kStream5printEih+0x7c>)
 8007ca0:	5cd2      	ldrb	r2, [r2, r3]
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	701a      	strb	r2, [r3, #0]
      val /= radix;
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8007cae:	60bb      	str	r3, [r7, #8]
   } while(val != 0);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d000      	beq.n	8007cb8 <_ZN9N2kStream5printEih+0x64>
   do {
 8007cb6:	e7e8      	b.n	8007c8a <_ZN9N2kStream5printEih+0x36>

   return print(ptr);
 8007cb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ffad 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	bf00      	nop
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3738      	adds	r7, #56	; 0x38
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	08010aac 	.word	0x08010aac
 8007cd0:	08010ab0 	.word	0x08010ab0

08007cd4 <_ZN9N2kStream7printlnEPKc>:

size_t N2kStream::println(const char *str) {
 8007cd4:	b590      	push	{r4, r7, lr}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
   return print(str) + print("\r\n");
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff ff9a 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4904      	ldr	r1, [pc, #16]	; (8007cfc <_ZN9N2kStream7printlnEPKc+0x28>)
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff95 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4423      	add	r3, r4
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd90      	pop	{r4, r7, pc}
 8007cfc:	08010ac4 	.word	0x08010ac4

08007d00 <_ZN9N2kStream7printlnEih>:

size_t N2kStream::println(int val, uint8_t radix) {
 8007d00:	b590      	push	{r4, r7, lr}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	71fb      	strb	r3, [r7, #7]
   return print(val, radix) + print("\r\n");
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	461a      	mov	r2, r3
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff ff9d 	bl	8007c54 <_ZN9N2kStream5printEih>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4904      	ldr	r1, [pc, #16]	; (8007d30 <_ZN9N2kStream7printlnEih+0x30>)
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ff7b 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4423      	add	r3, r4
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd90      	pop	{r4, r7, pc}
 8007d30:	08010ac4 	.word	0x08010ac4

08007d34 <_Z9N2kMillisv>:
  #else
    extern "C" {
    // Current uptime in milliseconds. Must be implemented by application.
    extern uint32_t millis();
    }
    uint32_t N2kMillis() { return millis(); }
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	f007 f91a 	bl	800ef70 <millis>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <_Z11N2kMillis64v>:
  #endif

  uint64_t N2kMillis64() {
 8007d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
    static uint32_t RollCount=0;
    static uint32_t LastRead=0;
    uint32_t Now=millis();
 8007d4c:	f007 f910 	bl	800ef70 <millis>
 8007d50:	6078      	str	r0, [r7, #4]
    if ( LastRead>Now ) RollCount++;
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <_Z11N2kMillis64v+0x60>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d204      	bcs.n	8007d66 <_Z11N2kMillis64v+0x22>
 8007d5c:	4b12      	ldr	r3, [pc, #72]	; (8007da8 <_Z11N2kMillis64v+0x64>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	4a11      	ldr	r2, [pc, #68]	; (8007da8 <_Z11N2kMillis64v+0x64>)
 8007d64:	6013      	str	r3, [r2, #0]
    LastRead=Now;
 8007d66:	4a0f      	ldr	r2, [pc, #60]	; (8007da4 <_Z11N2kMillis64v+0x60>)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6013      	str	r3, [r2, #0]
    return ((uint64_t)RollCount)<<32 | Now;
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <_Z11N2kMillis64v+0x64>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2200      	movs	r2, #0
 8007d72:	469a      	mov	sl, r3
 8007d74:	4693      	mov	fp, r2
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	4653      	mov	r3, sl
 8007d80:	2200      	movs	r2, #0
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	2000      	movs	r0, #0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4605      	mov	r5, r0
 8007d8a:	ea42 0804 	orr.w	r8, r2, r4
 8007d8e:	ea43 0905 	orr.w	r9, r3, r5
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
  }
 8007d96:	4610      	mov	r0, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007da2:	bf00      	nop
 8007da4:	20000364 	.word	0x20000364
 8007da8:	20000360 	.word	0x20000360

08007dac <_ZN13tN2kScheduler3NowEv>:
#endif

#if !defined(N2kUse64bitSchedulerTime)
// *****************************************************************************
tN2kSchedulerTime tN2kScheduler::Now() {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  return N2kMillis();
 8007db4:	f7ff ffbe 	bl	8007d34 <_Z9N2kMillisv>
 8007db8:	4603      	mov	r3, r0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr

08007de0 <_ZNK7tN2kMsg11ForceSourceEh>:
  void ForceSource(unsigned char _Source) const { Source=_Source; }
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	731a      	strb	r2, [r3, #12]
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <_ZNK7tN2kMsg16CheckDestinationEv>:
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; } // We can send to specified destination only for PGN:s low byte=0
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <_ZNK7tN2kMsg16CheckDestinationEv+0x18>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	735a      	strb	r2, [r3, #13]
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr

08007e1e <_ZN10tN2kCANMsgC1Ev>:
#include <N2kMsg.h>

class tN2kCANMsg
{
public:
  tN2kCANMsg()
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af02      	add	r7, sp, #8
 8007e24:	6078      	str	r0, [r7, #4]
    : Ready(false),FreeMsg(true),SystemMessage(false), KnownMessage(false) 
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      ,TPRequireCTS(false), TPMaxPackets(0) 
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2206      	movs	r2, #6
 8007e30:	210f      	movs	r1, #15
 8007e32:	f7fe fe9d 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
#endif
    {
	  N2kMsg.Clear();
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe ff08 	bl	8006c7e <_ZN7tN2kMsg5ClearEv>
  }
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <_ZN10tN2kCANMsg11FreeMessageEv>:
#endif
  unsigned char LastFrame; // Last received frame sequence number on fast packets or multi packet
  unsigned char CopiedLen;
  
public:
  void FreeMessage() { 
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
    FreeMsg=true; Ready=false; SystemMessage=false; 
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    TPMaxPackets=0; TPRequireCTS=false; 
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
#endif
    N2kMsg.Clear(); N2kMsg.Source=0; 
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fee7 	bl	8006c7e <_ZN7tN2kMsg5ClearEv>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	731a      	strb	r2, [r3, #12]
  }  
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <_Z15N2kIsTimeBeforemm>:
inline bool N2kIsTimeBefore(uint32_t T1, uint32_t T2) { return (T2-T1)<LONG_MAX; }
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf34      	ite	cc
 8007ed6:	2301      	movcc	r3, #1
 8007ed8:	2300      	movcs	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr

08007ee6 <_ZN17tN2kSyncSchedulerC1Ebmm>:
  static uint64_t SyncOffset;
  uint64_t NextTime;
  uint32_t Offset;  // Offset to syncronize with others
  uint32_t Period; 
public:
  tN2kSyncScheduler(bool Enable=false, uint32_t _Period=0, uint32_t _Offset=0) { 
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	72fb      	strb	r3, [r7, #11]
    Offset=_Offset; Period=_Period; 
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	60da      	str	r2, [r3, #12]
    if ( Enable ) {
 8007f02:	7afb      	ldrb	r3, [r7, #11]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <_ZN17tN2kSyncSchedulerC1Ebmm+0x2a>
      UpdateNextTime();
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7f9 f903 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 8007f0e:	e002      	b.n	8007f16 <_ZN17tN2kSyncSchedulerC1Ebmm+0x30>
    } else {
      Disable();
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f805 	bl	8007f20 <_ZN17tN2kSyncScheduler7DisableEv>
    }
  }
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <_ZN17tN2kSyncScheduler7DisableEv>:

  inline void Disable() { NextTime=N2kScheduler64Disabled; }
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f32:	e9c1 2300 	strd	r2, r3, [r1]
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr

08007f40 <_ZN17tN2kSyncScheduler6IsTimeEv>:
  inline bool IsDisabled() const { return NextTime==N2kScheduler64Disabled; }
  inline bool IsEnabled() const { return NextTime!=N2kScheduler64Disabled; }

  inline bool IsTime() { return N2kMillis64()>NextTime; }
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	f7ff fefc 	bl	8007d44 <_Z11N2kMillis64v>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	4282      	cmp	r2, r0
 8007f54:	418b      	sbcs	r3, r1
 8007f56:	bf34      	ite	cc
 8007f58:	2301      	movcc	r3, #1
 8007f5a:	2300      	movcs	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>:
  inline uint64_t Remaining() { return IsTime()?0:NextTime-N2kMillis64(); }

  void SetPeriod(uint32_t _Period) { Period=_Period; if ( Period<1 ) Period=1; UpdateNextTime(); }
  void SetOffset(uint32_t _Offset) { Offset=_Offset; UpdateNextTime(); }
  void SetPeriodAndOffset(uint32_t _Period, uint32_t _Offset) { 
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
    Period=_Period; 
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	60da      	str	r2, [r3, #12]
    Offset=_Offset;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	609a      	str	r2, [r3, #8]
    if ( Period==0 ) Disable(); 
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm+0x26>
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff ffca 	bl	8007f20 <_ZN17tN2kSyncScheduler7DisableEv>
    UpdateNextTime(); 
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7f9 f8c1 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  }
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <_ZNK17tN2kSyncScheduler9GetOffsetEv>:
  uint32_t GetOffset() const { return Offset; }
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>:
  uint32_t GetPeriod() const { return Period; }
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr
	...

08007fc8 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>:
      uint64_t n=(now-(Offset+SyncOffset))/Period;
      NextTime=SyncOffset+Offset+(n+1)*Period;
    }
  }

  static void SetSyncOffset() { SyncOffset=N2kMillis64(); }
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	f7ff feba 	bl	8007d44 <_Z11N2kMillis64v>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4902      	ldr	r1, [pc, #8]	; (8007fe0 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv+0x18>)
 8007fd6:	e9c1 2300 	strd	r2, r3, [r1]
 8007fda:	bf00      	nop
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000358 	.word	0x20000358

08007fe4 <_ZN13tN2kSchedulerC1Em>:
  tN2kSchedulerTime NextTime;
  #if !defined(N2kUse64bitSchedulerTime)
  tN2kSchedulerTime Now();
  #endif
public:
  tN2kScheduler(tN2kSchedulerTime _NextTime=N2kSchedulerDisabled) : NextTime(_NextTime) { }
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <_ZN13tN2kScheduler7DisableEv>:
  void Disable() { 
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
    NextTime=N2kSchedulerDisabled; 
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800800e:	601a      	str	r2, [r3, #0]
  }
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <_ZNK13tN2kScheduler10IsDisabledEv>:
  bool IsDisabled() const { return NextTime==N2kSchedulerDisabled; }
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800802a:	bf0c      	ite	eq
 800802c:	2301      	moveq	r3, #1
 800802e:	2300      	movne	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <_ZNK13tN2kScheduler9IsEnabledEv>:
  bool IsEnabled() const { return NextTime!=N2kSchedulerDisabled; }
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800804c:	bf14      	ite	ne
 800804e:	2301      	movne	r3, #1
 8008050:	2300      	moveq	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <_ZNK13tN2kScheduler6IsTimeEv>:
  bool IsTime() const {
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
    #if defined(N2kUse64bitSchedulerTime)
    return N2kMillis64()>NextTime;
    #else
    return !IsDisabled() && ( N2kMillis()-NextTime<LONG_MAX );
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff ffd7 	bl	800801a <_ZNK13tN2kScheduler10IsDisabledEv>
 800806c:	4603      	mov	r3, r0
 800806e:	f083 0301 	eor.w	r3, r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 8008078:	f7ff fe5c 	bl	8007d34 <_Z9N2kMillisv>
 800807c:	4602      	mov	r2, r0
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008088:	4293      	cmp	r3, r2
 800808a:	d201      	bcs.n	8008090 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 800808c:	2301      	movs	r3, #1
 800808e:	e000      	b.n	8008092 <_ZNK13tN2kScheduler6IsTimeEv+0x34>
 8008090:	2300      	movs	r3, #0
    #endif
  }
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <_ZN13tN2kScheduler7FromNowEm>:
  void FromNow(uint32_t _Add) {
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
    #if defined(N2kUse64bitSchedulerTime)
    NextTime=N2kMillis64()+_Add;
    #else
    NextTime=Now()+_Add;
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fe81 	bl	8007dac <_ZN13tN2kScheduler3NowEv>
 80080aa:	4602      	mov	r2, r0
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	441a      	add	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
    if ( NextTime==N2kSchedulerDisabled ) NextTime=0; // Roll over
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080bc:	d102      	bne.n	80080c4 <_ZN13tN2kScheduler7FromNowEm+0x2a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
    #endif
  }
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>:
    void SetUniqueNumber(uint32_t _UniqueNumber) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0xffe00000) | (_UniqueNumber&0x1fffff); }
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	0d5b      	lsrs	r3, r3, #21
 80080dc:	055b      	lsls	r3, r3, #21
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	f3c2 0214 	ubfx	r2, r2, #0, #21
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>:
    void SetManufacturerCode(uint16_t _ManufacturerCode) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0x1fffff) | (((unsigned long)(_ManufacturerCode&0x7ff))<<21); }
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	807b      	strh	r3, [r7, #2]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f3c3 0214 	ubfx	r2, r3, #0, #21
 8008108:	887b      	ldrh	r3, [r7, #2]
 800810a:	055b      	lsls	r3, r3, #21
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>:
    void SetDeviceInstance(unsigned char _DeviceInstance) { DeviceInformation.DeviceInstance=_DeviceInstance; }
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	711a      	strb	r2, [r3, #4]
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr

08008138 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>:
    unsigned char GetDeviceInstance() const { return DeviceInformation.DeviceInstance; }
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	791b      	ldrb	r3, [r3, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr

0800814e <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>:
    void SetDeviceFunction(unsigned char _DeviceFunction) { DeviceInformation.DeviceFunction=_DeviceFunction; }
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	715a      	strb	r2, [r3, #5]
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr

0800816a <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>:
    void SetDeviceClass(unsigned char _DeviceClass) { DeviceInformation.DeviceClass=((_DeviceClass&0x7f)<<1); }
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	719a      	strb	r2, [r3, #6]
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>:
    void SetIndustryGroup(unsigned char _IndustryGroup) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0x0f) | (_IndustryGroup<<4) | 0x80; }
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	79db      	ldrb	r3, [r3, #7]
 800819a:	b25b      	sxtb	r3, r3
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	b25a      	sxtb	r2, r3
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	b25b      	sxtb	r3, r3
 80081a8:	4313      	orrs	r3, r2
 80081aa:	b25b      	sxtb	r3, r3
 80081ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	71da      	strb	r2, [r3, #7]
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	bc80      	pop	{r7}
 80081c0:	4770      	bx	lr

080081c2 <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>:
    void SetSystemInstance(unsigned char _SystemInstance) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0xf0) | (_SystemInstance&0x0f); }
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	79db      	ldrb	r3, [r3, #7]
 80081d2:	f023 030f 	bic.w	r3, r3, #15
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	f003 030f 	and.w	r3, r3, #15
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	4313      	orrs	r3, r2
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	71da      	strb	r2, [r3, #7]
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr

080081f2 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>:
      inline unsigned long GetPGN() const { return PGN; }
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	4618      	mov	r0, r3
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <_ZN9tNMEA200015tInternalDeviceC1Ev>:
    tInternalDevice() {
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4618      	mov	r0, r3
 8008214:	f7fc f8c3 	bl	800439e <_ZN9tNMEA200018tDeviceInformationC1Ev>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3314      	adds	r3, #20
 800821c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fedf 	bl	8007fe4 <_ZN13tN2kSchedulerC1Em>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3318      	adds	r3, #24
 800822a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fed8 	bl	8007fe4 <_ZN13tN2kSchedulerC1Em>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	331c      	adds	r3, #28
 8008238:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fed1 	bl	8007fe4 <_ZN13tN2kSchedulerC1Em>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3320      	adds	r3, #32
 8008246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff feca 	bl	8007fe4 <_ZN13tN2kSchedulerC1Em>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008256:	2300      	movs	r3, #0
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	2206      	movs	r2, #6
 800825e:	210f      	movs	r1, #15
 8008260:	f7fe fc86 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800826a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff feb8 	bl	8007fe4 <_ZN13tN2kSchedulerC1Em>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	f7ff fe31 	bl	8007ee6 <_ZN17tN2kSyncSchedulerC1Ebmm>
      N2kSource=0;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      HasPendingInformation=false;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      ProductInformation=0; LocalProductInformation=0; ManufacturerSerialCode=0;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	60da      	str	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	611a      	str	r2, [r3, #16]
      AddressClaimEndSource=N2kMaxCanBusAddress; //GetNextAddressFromBeginning=true;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	22fb      	movs	r2, #251	; 0xfb
 80082aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      TransmitMessages=0; ReceiveMessages=0;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	625a      	str	r2, [r3, #36]	; 0x24
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
      PGNSequenceCounters=0; MaxPGNSequenceCounters=0;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
      NextDTSequence=0;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      HeartbeatSequence=0;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    }
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>:
    void SetPendingIsoAddressClaim(unsigned long FromNow=2) { PendingIsoAddressClaim.FromNow(FromNow); HasPendingInformation=true; }
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3314      	adds	r3, #20
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff fed2 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>:
    bool QueryPendingIsoAddressClaim() { return PendingIsoAddressClaim.IsTime(); }
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3314      	adds	r3, #20
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff fea3 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 8008318:	4603      	mov	r3, r0
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>:
    void ClearPendingIsoAddressClaim() { PendingIsoAddressClaim.Disable(); UpdateHasPendingInformation(); }
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3314      	adds	r3, #20
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fe66 	bl	8008000 <_ZN13tN2kScheduler7DisableEv>
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f895 	bl	8008464 <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>:
    void SetPendingProductInformation() { PendingProductInformation.FromNow(187+N2kSource*8); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 8008342:	b580      	push	{r7, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f103 0218 	add.w	r2, r3, #24
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	33bb      	adds	r3, #187	; 0xbb
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7ff fe9c 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>:
    void ClearPendingProductInformation() { PendingProductInformation.Disable(); UpdateHasPendingInformation(); }
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3318      	adds	r3, #24
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fe3e 	bl	8008000 <_ZN13tN2kScheduler7DisableEv>
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f86d 	bl	8008464 <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>:
    bool QueryPendingProductInformation() { return PendingProductInformation.IsTime(); }
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3318      	adds	r3, #24
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fe5d 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>:
    void SetPendingConfigurationInformation() { PendingConfigurationInformation.FromNow(187+N2kSource*10); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f103 021c 	add.w	r2, r3, #28
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80083c2:	4619      	mov	r1, r3
 80083c4:	460b      	mov	r3, r1
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	33bb      	adds	r3, #187	; 0xbb
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7ff fe62 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>:
    void ClearPendingConfigurationInformation() { PendingConfigurationInformation.Disable(); UpdateHasPendingInformation(); }
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	331c      	adds	r3, #28
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff fe04 	bl	8008000 <_ZN13tN2kScheduler7DisableEv>
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f833 	bl	8008464 <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>:
    bool QueryPendingConfigurationInformation() { return PendingConfigurationInformation.IsTime(); }
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	331c      	adds	r3, #28
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fe23 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 8008418:	4603      	mov	r3, r0
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>:
    void UpdateAddressClaimEndSource() {
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
      AddressClaimEndSource=N2kSource;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x30>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008446:	3b01      	subs	r3, #1
 8008448:	b2da      	uxtb	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8008450:	e003      	b.n	800845a <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x38>
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	22fb      	movs	r2, #251	; 0xfb
 8008456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>:
    void UpdateHasPendingInformation() {
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3314      	adds	r3, #20
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fde3 	bl	800803c <_ZNK13tN2kScheduler9IsEnabledEv>
 8008476:	4603      	mov	r3, r0
 8008478:	461c      	mov	r4, r3
                            | PendingProductInformation.IsEnabled()
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3318      	adds	r3, #24
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff fddc 	bl	800803c <_ZNK13tN2kScheduler9IsEnabledEv>
 8008484:	4603      	mov	r3, r0
 8008486:	4323      	orrs	r3, r4
 8008488:	b2dc      	uxtb	r4, r3
                            | PendingConfigurationInformation.IsEnabled()
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	331c      	adds	r3, #28
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff fdd4 	bl	800803c <_ZNK13tN2kScheduler9IsEnabledEv>
 8008494:	4603      	mov	r3, r0
 8008496:	4323      	orrs	r3, r4
 8008498:	b2dc      	uxtb	r4, r3
                            | NextDTSendTime.IsEnabled()
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff fdcb 	bl	800803c <_ZNK13tN2kScheduler9IsEnabledEv>
 80084a6:	4603      	mov	r3, r0
 80084a8:	4323      	orrs	r3, r4
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	bf14      	ite	ne
 80084b0:	2301      	movne	r3, #1
 80084b2:	2300      	moveq	r3, #0
 80084b4:	b2da      	uxtb	r2, r3
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <_ZN9tNMEA200013IsInitializedEv>:
    bool IsInitialized() { return (N2kCANMsgBuf!=0); }
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	bf14      	ite	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	2300      	moveq	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <_ZNK9tNMEA200014ForwardEnabledEv>:
    bool ForwardEnabled() const { return ((ForwardMode&FwdModeBit_EnableForward)>0 && (N2kMode!=N2km_SendOnly)); }
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	795b      	ldrb	r3, [r3, #5]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d001      	beq.n	8008504 <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <_ZNK9tNMEA200014ForwardEnabledEv+0x22>
 8008504:	2300      	movs	r3, #0
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <_ZNK9tNMEA200021ForwardSystemMessagesEv>:
    bool ForwardSystemMessages() const { return ((ForwardMode&FwdModeBit_SystemMessages)>0); }
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	bf14      	ite	ne
 8008524:	2301      	movne	r3, #1
 8008526:	2300      	moveq	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>:
    bool ForwardOnlyKnownMessages() const { return ((ForwardMode&FwdModeBit_OnlyKnownMessages)>0); }
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr

08008558 <_ZNK9tNMEA200018ForwardOwnMessagesEv>:
    bool ForwardOwnMessages() const { return ((ForwardMode&FwdModeBit_OwnMessages)>0); }
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	bf14      	ite	ne
 800856c:	2301      	movne	r3, #1
 800856e:	2300      	moveq	r3, #0
 8008570:	b2db      	uxtb	r3, r3
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr

0800857c <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>:
    bool HandleOnlyKnownMessages() const { return ((ForwardMode&HandleModeBit_OnlyKnownMessages)>0); }
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <_ZN9tNMEA200012IsActiveNodeEv>:
    bool IsActiveNode() { return (N2kMode==N2km_NodeOnly || N2kMode==N2km_ListenAndNode); }
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	795b      	ldrb	r3, [r3, #5]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d003      	beq.n	80085b8 <_ZN9tNMEA200012IsActiveNodeEv+0x18>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	795b      	ldrb	r3, [r3, #5]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d101      	bne.n	80085bc <_ZN9tNMEA200012IsActiveNodeEv+0x1c>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <_ZN9tNMEA200012IsActiveNodeEv+0x1e>
 80085bc:	2300      	movs	r3, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr

080085c8 <_ZNK9tNMEA200013IsValidDeviceEi>:
    bool IsValidDevice(int iDev) const { return (iDev>=0 && iDev<DeviceCount ); }
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	db06      	blt.n	80085e6 <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	da01      	bge.n	80085e6 <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <_ZNK9tNMEA200013IsValidDeviceEi+0x20>
 80085e6:	2300      	movs	r3, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr

080085f2 <_ZNK9tNMEA200013IsReadyToSendEv>:
    bool IsReadyToSend() const {
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7e1b      	ldrb	r3, [r3, #24]
               (N2kMode!=N2km_SendOnly) &&
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d003      	beq.n	800860a <_ZNK9tNMEA200013IsReadyToSendEv+0x18>
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00d      	beq.n	8008626 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenOnly) &&
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	795b      	ldrb	r3, [r3, #5]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_SendOnly) &&
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_ListenOnly) &&
 8008616:	2b03      	cmp	r3, #3
 8008618:	d005      	beq.n	8008626 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenAndSend)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_SendOnly) &&
 800861e:	2b04      	cmp	r3, #4
 8008620:	d001      	beq.n	8008626 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <_ZNK9tNMEA200013IsReadyToSendEv+0x36>
 8008626:	2300      	movs	r3, #0
    }
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt>:
    virtual void SetN2kCANSendFrameBufSize(const uint16_t _MaxCANSendFrames) { if ( !IsInitialized() ) { MaxCANSendFrames=_MaxCANSendFrames; }; }
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	807b      	strh	r3, [r7, #2]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff ff40 	bl	80084c4 <_ZN9tNMEA200013IsInitializedEv>
 8008644:	4603      	mov	r3, r0
 8008646:	f083 0301 	eor.w	r3, r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt+0x26>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	887a      	ldrh	r2, [r7, #2]
 8008654:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt>:
    virtual void SetN2kCANReceiveFrameBufSize(const uint16_t _MaxCANReceiveFrames) { if ( !IsInitialized() ) MaxCANReceiveFrames=_MaxCANReceiveFrames; }
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	807b      	strh	r3, [r7, #2]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff ff29 	bl	80084c4 <_ZN9tNMEA200013IsInitializedEv>
 8008672:	4603      	mov	r3, r0
 8008674:	f083 0301 	eor.w	r3, r3, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt+0x26>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	887a      	ldrh	r2, [r7, #2]
 8008682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <_ZN9tNMEA200013EnableForwardEb>:
    void EnableForward(bool v=true) {
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d006      	beq.n	80086ae <_ZN9tNMEA200013EnableForwardEb+0x20>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f043 0201 	orr.w	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	609a      	str	r2, [r3, #8]
    }
 80086ac:	e005      	b.n	80086ba <_ZN9tNMEA200013EnableForwardEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f023 0201 	bic.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	609a      	str	r2, [r3, #8]
    }
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <_ZN9tNMEA200024SetForwardSystemMessagesEb>:
    void SetForwardSystemMessages(bool v=true) {
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d006      	beq.n	80086e4 <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x20>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f043 0202 	orr.w	r2, r3, #2
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	609a      	str	r2, [r3, #8]
      }
 80086e2:	e005      	b.n	80086f0 <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f023 0202 	bic.w	r2, r3, #2
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	609a      	str	r2, [r3, #8]
      }
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <_ZN9tNMEA200021SetForwardOwnMessagesEb>:
    void SetForwardOwnMessages(bool v=true) {
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d006      	beq.n	800871a <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x20>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f043 0208 	orr.w	r2, r3, #8
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	609a      	str	r2, [r3, #8]
      }
 8008718:	e005      	b.n	8008726 <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f023 0208 	bic.w	r2, r3, #8
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	609a      	str	r2, [r3, #8]
      }
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>:
};

//*****************************************************************************
// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN);
inline void SetN2kPGNISOAcknowledgement(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	607b      	str	r3, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	72fb      	strb	r3, [r7, #11]
 800873e:	4613      	mov	r3, r2
 8008740:	72bb      	strb	r3, [r7, #10]
  SetN2kPGN59392(N2kMsg,Control,GroupFunction,PGN);
 8008742:	7aba      	ldrb	r2, [r7, #10]
 8008744:	7af9      	ldrb	r1, [r7, #11]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f005 fe40 	bl	800e3ce <_Z14SetN2kPGN59392R7tN2kMsghhm>
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <_Z21SetN2kISOAddressClaimR7tN2kMsgy>:
                   ) {
  SetN2kPGN60928(N2kMsg, UniqueNumber, ManufacturerCode, DeviceFunction, DeviceClass,
                 DeviceInstance, SystemInstance, IndustryGroup);
}

inline void SetN2kISOAddressClaim(tN2kMsg &N2kMsg, uint64_t Name) {
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	e9c7 2300 	strd	r2, r3, [r7]
  SetN2kPGN60928(N2kMsg, Name);
 8008762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f005 fe61 	bl	800e42e <_Z14SetN2kPGN60928R7tN2kMsgy>
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>:
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1);

inline void SetN2kProductInformation(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af06      	add	r7, sp, #24
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  SetN2kPGN126996(N2kMsg,N2kVersion,ProductCode,
 8008782:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	9302      	str	r3, [sp, #8]
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f005 fe5b 	bl	800e45c <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>
                  ModelID,SwCode,ModelVersion,ModelSerialCode,
                  CertificationLevel,LoadEquivalency);
}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>:

inline void SetN2kConfigurationInformation(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1=0,
                     const char *InstallationDescription2=0,
                     bool UsePgm=false) {
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b086      	sub	sp, #24
 80087b2:	af02      	add	r7, sp, #8
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	603b      	str	r3, [r7, #0]
  SetN2kPGN126998(N2kMsg,
 80087bc:	7e3b      	ldrb	r3, [r7, #24]
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f005 feba 	bl	800e540 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>
                  ManufacturerInformation,
                  InstallationDescription1,
                  InstallationDescription2,
                  UsePgm);
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>:
  SetN2kPGN59904(N2kMsg,Destination,RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN);

inline bool ParseN2kPGNISORequest(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  return ParseN2kPGN59904(N2kMsg, RequestedPGN);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f005 ff55 	bl	800e690 <_Z16ParseN2kPGN59904RK7tN2kMsgRm>
 80087e6:	4603      	mov	r3, r0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <_Z12SetHeartbeatR7tN2kMsgmh>:
//  - sequence counter - set to 0xff for testing purposes
//			/ Output:
//  - N2kMsg NMEA2000 message ready to be send.
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter);

inline void SetHeartbeat(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
	SetN2kPGN126993(N2kMsg, timeInterval_ms, sequenceCounter);
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	461a      	mov	r2, r3
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f005 ff71 	bl	800e6ec <_Z15SetN2kPGN126993R7tN2kMsgmh>
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN60928(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,60928L) {}
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f44f 426e 	mov.w	r2, #60928	; 0xee00
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f7fb fe02 	bl	8004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800882c:	4a03      	ldr	r2, [pc, #12]	; (800883c <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000+0x28>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	08010d04 	.word	0x08010d04

08008840 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126464(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126464L) {}
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f44f 32f7 	mov.w	r2, #126464	; 0x1ee00
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7fb fdec 	bl	8004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 8008858:	4a03      	ldr	r2, [pc, #12]	; (8008868 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000+0x28>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	08010cd8 	.word	0x08010cd8

0800886c <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126993(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126993L) {}
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a06      	ldr	r2, [pc, #24]	; (8008894 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x28>)
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7fb fdd7 	bl	8004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 8008882:	4a05      	ldr	r2, [pc, #20]	; (8008898 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x2c>)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	0001f011 	.word	0x0001f011
 8008898:	08010cac 	.word	0x08010cac

0800889c <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126996(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126996L) {}
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a06      	ldr	r2, [pc, #24]	; (80088c4 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x28>)
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fb fdbf 	bl	8004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 80088b2:	4a05      	ldr	r2, [pc, #20]	; (80088c8 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x2c>)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	0001f014 	.word	0x0001f014
 80088c8:	08010c80 	.word	0x08010c80

080088cc <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126998(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126998L) {}
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a06      	ldr	r2, [pc, #24]	; (80088f4 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x28>)
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fb fda7 	bl	8004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 80088e2:	4a05      	ldr	r2, [pc, #20]	; (80088f8 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x2c>)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	0001f016 	.word	0x0001f016
 80088f8:	08010c54 	.word	0x08010c54

080088fc <_Z26IsSingleFrameSystemMessagem>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
                                       126208L, /* NMEA Request/Command/Acknowledge group function */
#endif
                                       0};

bool IsSingleFrameSystemMessage(unsigned long PGN) {
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800890a:	d01b      	beq.n	8008944 <_Z26IsSingleFrameSystemMessagem+0x48>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8008912:	d819      	bhi.n	8008948 <_Z26IsSingleFrameSystemMessagem+0x4c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800891a:	d013      	beq.n	8008944 <_Z26IsSingleFrameSystemMessagem+0x48>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 8008922:	d811      	bhi.n	8008948 <_Z26IsSingleFrameSystemMessagem+0x4c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800892a:	d00b      	beq.n	8008944 <_Z26IsSingleFrameSystemMessagem+0x48>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 8008932:	d809      	bhi.n	8008948 <_Z26IsSingleFrameSystemMessagem+0x4c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 800893a:	d003      	beq.n	8008944 <_Z26IsSingleFrameSystemMessagem+0x48>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 8008942:	d101      	bne.n	8008948 <_Z26IsSingleFrameSystemMessagem+0x4c>
                                      case  59392L: /* ISO Acknowledgement */
                                      case   TP_DT: /* Multi packet data transfer, TP.DT */
                                      case   TP_CM: /* Multi packet connection management, TP.CM */
                                      case  59904L: /* ISO Request */
                                      case  60928L: /* ISO Address Claim */
                                      return true;
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <_Z26IsSingleFrameSystemMessagem+0x4e>
                                  }
                                  return false;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	bc80      	pop	{r7}
 8008952:	4770      	bx	lr

08008954 <_Z25IsFastPacketSystemMessagem>:

bool IsFastPacketSystemMessage(unsigned long PGN) {
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 8008962:	4293      	cmp	r3, r2
 8008964:	d003      	beq.n	800896e <_Z25IsFastPacketSystemMessagem+0x1a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a05      	ldr	r2, [pc, #20]	; (8008980 <_Z25IsFastPacketSystemMessagem+0x2c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d101      	bne.n	8008972 <_Z25IsFastPacketSystemMessagem+0x1e>
                                      case  65240L: /* Commanded Address*/
                                      case 126208L: /* NMEA Request/Command/Acknowledge group function */
                                      return true;
 800896e:	2301      	movs	r3, #1
 8008970:	e000      	b.n	8008974 <_Z25IsFastPacketSystemMessagem+0x20>
                                  }
                                  return false;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	0001ed00 	.word	0x0001ed00

08008984 <_Z27IsDefaultSingleFrameMessagem>:

bool IsDefaultSingleFrameMessage(unsigned long PGN) {
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a57      	ldr	r2, [pc, #348]	; (8008aec <_Z27IsDefaultSingleFrameMessagem+0x168>)
 8008990:	4293      	cmp	r3, r2
 8008992:	f000 80a2 	beq.w	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a54      	ldr	r2, [pc, #336]	; (8008aec <_Z27IsDefaultSingleFrameMessagem+0x168>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f200 809f 	bhi.w	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a53      	ldr	r2, [pc, #332]	; (8008af0 <_Z27IsDefaultSingleFrameMessagem+0x16c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	f200 809a 	bhi.w	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a51      	ldr	r2, [pc, #324]	; (8008af4 <_Z27IsDefaultSingleFrameMessagem+0x170>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d234      	bcs.n	8008a1c <_Z27IsDefaultSingleFrameMessagem+0x98>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a50      	ldr	r2, [pc, #320]	; (8008af8 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	f000 808f 	beq.w	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a4e      	ldr	r2, [pc, #312]	; (8008af8 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	f200 808c 	bhi.w	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a4c      	ldr	r2, [pc, #304]	; (8008afc <_Z27IsDefaultSingleFrameMessagem+0x178>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	f200 8087 	bhi.w	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f5b3 3ffc 	cmp.w	r3, #129024	; 0x1f800
 80089d6:	f200 8080 	bhi.w	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a48      	ldr	r2, [pc, #288]	; (8008b00 <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d07b      	beq.n	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a46      	ldr	r2, [pc, #280]	; (8008b00 <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d879      	bhi.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a45      	ldr	r2, [pc, #276]	; (8008b04 <_Z27IsDefaultSingleFrameMessagem+0x180>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d073      	beq.n	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a43      	ldr	r2, [pc, #268]	; (8008b04 <_Z27IsDefaultSingleFrameMessagem+0x180>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d871      	bhi.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a42      	ldr	r2, [pc, #264]	; (8008b08 <_Z27IsDefaultSingleFrameMessagem+0x184>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d86d      	bhi.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 8008a08:	d21a      	bcs.n	8008a40 <_Z27IsDefaultSingleFrameMessagem+0xbc>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a3f      	ldr	r2, [pc, #252]	; (8008b0c <_Z27IsDefaultSingleFrameMessagem+0x188>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d85a      	bhi.n	8008ac8 <_Z27IsDefaultSingleFrameMessagem+0x144>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a3e      	ldr	r2, [pc, #248]	; (8008b10 <_Z27IsDefaultSingleFrameMessagem+0x18c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d25f      	bcs.n	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 8008a1a:	e060      	b.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 8008a22:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8008a26:	2201      	movs	r2, #1
 8008a28:	409a      	lsls	r2, r3
 8008a2a:	f240 53f1 	movw	r3, #1521	; 0x5f1
 8008a2e:	4013      	ands	r3, r2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bf14      	ite	ne
 8008a34:	2301      	movne	r3, #1
 8008a36:	2300      	moveq	r3, #0
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d14d      	bne.n	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 8008a3e:	e04e      	b.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f5a3 33f9 	sub.w	r3, r3, #127488	; 0x1f200
 8008a46:	2b14      	cmp	r3, #20
 8008a48:	d849      	bhi.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8008a4a:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <_Z27IsDefaultSingleFrameMessagem+0xcc>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008adb 	.word	0x08008adb
 8008a54:	08008adf 	.word	0x08008adf
 8008a58:	08008adf 	.word	0x08008adf
 8008a5c:	08008adf 	.word	0x08008adf
 8008a60:	08008adf 	.word	0x08008adf
 8008a64:	08008adb 	.word	0x08008adb
 8008a68:	08008adf 	.word	0x08008adf
 8008a6c:	08008adf 	.word	0x08008adf
 8008a70:	08008adf 	.word	0x08008adf
 8008a74:	08008adf 	.word	0x08008adf
 8008a78:	08008adf 	.word	0x08008adf
 8008a7c:	08008adf 	.word	0x08008adf
 8008a80:	08008adf 	.word	0x08008adf
 8008a84:	08008adb 	.word	0x08008adb
 8008a88:	08008adf 	.word	0x08008adf
 8008a8c:	08008adf 	.word	0x08008adf
 8008a90:	08008adf 	.word	0x08008adf
 8008a94:	08008adb 	.word	0x08008adb
 8008a98:	08008adf 	.word	0x08008adf
 8008a9c:	08008adf 	.word	0x08008adf
 8008aa0:	08008adb 	.word	0x08008adb
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 8008aaa:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8008aae:	2201      	movs	r2, #1
 8008ab0:	409a      	lsls	r2, r3
 8008ab2:	f241 0361 	movw	r3, #4193	; 0x1061
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bf14      	ite	ne
 8008abc:	2301      	movne	r3, #1
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <_Z27IsDefaultSingleFrameMessagem+0x156>
 8008ac6:	e00a      	b.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <_Z27IsDefaultSingleFrameMessagem+0x190>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d806      	bhi.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <_Z27IsDefaultSingleFrameMessagem+0x194>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d2e5      	bcs.n	8008aa4 <_Z27IsDefaultSingleFrameMessagem+0x120>
 8008ad8:	e001      	b.n	8008ade <_Z27IsDefaultSingleFrameMessagem+0x15a>
                                      case 130312L: // Temperature, pri=5, period=2000
                                      case 130313L: // Humidity, pri=5, period=2000
                                      case 130314L: // Pressure, pri=5, period=2000
                                      case 130316L: // Temperature extended range, pri=5, period=NA
                                      case 130576L: // Small Craft Status (Trim Tab position), pri=2, period=200
                                      return true;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <_Z27IsDefaultSingleFrameMessagem+0x15c>
                                  }
                                  return false;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	0001fe10 	.word	0x0001fe10
 8008af0:	0001fd0c 	.word	0x0001fd0c
 8008af4:	0001fd02 	.word	0x0001fd02
 8008af8:	0001f903 	.word	0x0001f903
 8008afc:	0001f802 	.word	0x0001f802
 8008b00:	0001f50b 	.word	0x0001f50b
 8008b04:	0001f503 	.word	0x0001f503
 8008b08:	0001f214 	.word	0x0001f214
 8008b0c:	0001f011 	.word	0x0001f011
 8008b10:	0001f010 	.word	0x0001f010
 8008b14:	0001f119 	.word	0x0001f119
 8008b18:	0001f10d 	.word	0x0001f10d

08008b1c <_Z28IsMandatoryFastPacketMessagem>:

bool IsMandatoryFastPacketMessage(unsigned long PGN) {
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a0b      	ldr	r2, [pc, #44]	; (8008b54 <_Z28IsMandatoryFastPacketMessagem+0x38>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00b      	beq.n	8008b44 <_Z28IsMandatoryFastPacketMessagem+0x28>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a09      	ldr	r2, [pc, #36]	; (8008b54 <_Z28IsMandatoryFastPacketMessagem+0x38>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d809      	bhi.n	8008b48 <_Z28IsMandatoryFastPacketMessagem+0x2c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 8008b3a:	d003      	beq.n	8008b44 <_Z28IsMandatoryFastPacketMessagem+0x28>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a06      	ldr	r2, [pc, #24]	; (8008b58 <_Z28IsMandatoryFastPacketMessagem+0x3c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d101      	bne.n	8008b48 <_Z28IsMandatoryFastPacketMessagem+0x2c>
                                      case 126464L: // PGN List (Transmit and Receive), pri=6, period=NA
                                      case 126996L: // Product information, pri=6, period=NA
                                      case 126998L: // Configuration information, pri=6, period=NA
                                      return true;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e000      	b.n	8008b4a <_Z28IsMandatoryFastPacketMessagem+0x2e>
                                  }
                                  return false;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr
 8008b54:	0001f016 	.word	0x0001f016
 8008b58:	0001f014 	.word	0x0001f014

08008b5c <_Z26IsDefaultFastPacketMessagem>:

bool IsDefaultFastPacketMessage(unsigned long PGN) {
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a91      	ldr	r2, [pc, #580]	; (8008dac <_Z26IsDefaultFastPacketMessagem+0x250>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	f200 8119 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a8f      	ldr	r2, [pc, #572]	; (8008db0 <_Z26IsDefaultFastPacketMessagem+0x254>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	f080 8112 	bcs.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a8e      	ldr	r2, [pc, #568]	; (8008db4 <_Z26IsDefaultFastPacketMessagem+0x258>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	f000 810d 	beq.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a8b      	ldr	r2, [pc, #556]	; (8008db4 <_Z26IsDefaultFastPacketMessagem+0x258>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	f200 810a 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a8a      	ldr	r2, [pc, #552]	; (8008db8 <_Z26IsDefaultFastPacketMessagem+0x25c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	f200 8105 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a88      	ldr	r2, [pc, #544]	; (8008dbc <_Z26IsDefaultFastPacketMessagem+0x260>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	f080 80fe 	bcs.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a87      	ldr	r2, [pc, #540]	; (8008dc0 <_Z26IsDefaultFastPacketMessagem+0x264>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	f200 80fb 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a85      	ldr	r2, [pc, #532]	; (8008dc4 <_Z26IsDefaultFastPacketMessagem+0x268>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d261      	bcs.n	8008c76 <_Z26IsDefaultFastPacketMessagem+0x11a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a84      	ldr	r2, [pc, #528]	; (8008dc8 <_Z26IsDefaultFastPacketMessagem+0x26c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	f200 80f2 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a83      	ldr	r2, [pc, #524]	; (8008dcc <_Z26IsDefaultFastPacketMessagem+0x270>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	f080 80eb 	bcs.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a81      	ldr	r2, [pc, #516]	; (8008dd0 <_Z26IsDefaultFastPacketMessagem+0x274>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	f200 80e8 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a80      	ldr	r2, [pc, #512]	; (8008dd4 <_Z26IsDefaultFastPacketMessagem+0x278>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d25f      	bcs.n	8008c98 <_Z26IsDefaultFastPacketMessagem+0x13c>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a7f      	ldr	r2, [pc, #508]	; (8008dd8 <_Z26IsDefaultFastPacketMessagem+0x27c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	f200 80df 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a7d      	ldr	r2, [pc, #500]	; (8008ddc <_Z26IsDefaultFastPacketMessagem+0x280>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	f080 80d8 	bcs.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a7c      	ldr	r2, [pc, #496]	; (8008de0 <_Z26IsDefaultFastPacketMessagem+0x284>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	f200 80d5 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a7a      	ldr	r2, [pc, #488]	; (8008de4 <_Z26IsDefaultFastPacketMessagem+0x288>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	f080 80ce 	bcs.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a79      	ldr	r2, [pc, #484]	; (8008de8 <_Z26IsDefaultFastPacketMessagem+0x28c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	f200 80cb 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a77      	ldr	r2, [pc, #476]	; (8008dec <_Z26IsDefaultFastPacketMessagem+0x290>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d272      	bcs.n	8008cf8 <_Z26IsDefaultFastPacketMessagem+0x19c>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a76      	ldr	r2, [pc, #472]	; (8008df0 <_Z26IsDefaultFastPacketMessagem+0x294>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f000 80c0 	beq.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a74      	ldr	r2, [pc, #464]	; (8008df0 <_Z26IsDefaultFastPacketMessagem+0x294>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	f200 80bd 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a72      	ldr	r2, [pc, #456]	; (8008df4 <_Z26IsDefaultFastPacketMessagem+0x298>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f000 80b6 	beq.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a70      	ldr	r2, [pc, #448]	; (8008df4 <_Z26IsDefaultFastPacketMessagem+0x298>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	f200 80b3 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a6e      	ldr	r2, [pc, #440]	; (8008df8 <_Z26IsDefaultFastPacketMessagem+0x29c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	f200 80ae 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 8008c4a:	d865      	bhi.n	8008d18 <_Z26IsDefaultFastPacketMessagem+0x1bc>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a6b      	ldr	r2, [pc, #428]	; (8008dfc <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	f000 80a3 	beq.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a68      	ldr	r2, [pc, #416]	; (8008dfc <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	f200 80a0 	bhi.w	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a67      	ldr	r2, [pc, #412]	; (8008e00 <_Z26IsDefaultFastPacketMessagem+0x2a4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	f200 8095 	bhi.w	8008d94 <_Z26IsDefaultFastPacketMessagem+0x238>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <_Z26IsDefaultFastPacketMessagem+0x2a8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f080 8094 	bcs.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008c74:	e094      	b.n	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 8008c7c:	3b04      	subs	r3, #4
 8008c7e:	2201      	movs	r2, #1
 8008c80:	409a      	lsls	r2, r3
 8008c82:	4b61      	ldr	r3, [pc, #388]	; (8008e08 <_Z26IsDefaultFastPacketMessagem+0x2ac>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bf14      	ite	ne
 8008c8a:	2301      	movne	r3, #1
 8008c8c:	2300      	moveq	r3, #0
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 8083 	bne.w	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008c96:	e083      	b.n	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f5a3 33fd 	sub.w	r3, r3, #129536	; 0x1fa00
 8008c9e:	3b02      	subs	r3, #2
 8008ca0:	2b12      	cmp	r3, #18
 8008ca2:	d87d      	bhi.n	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <_Z26IsDefaultFastPacketMessagem+0x150>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008d9d 	.word	0x08008d9d
 8008cb0:	08008da1 	.word	0x08008da1
 8008cb4:	08008d9d 	.word	0x08008d9d
 8008cb8:	08008d9d 	.word	0x08008d9d
 8008cbc:	08008d9d 	.word	0x08008d9d
 8008cc0:	08008da1 	.word	0x08008da1
 8008cc4:	08008da1 	.word	0x08008da1
 8008cc8:	08008d9d 	.word	0x08008d9d
 8008ccc:	08008da1 	.word	0x08008da1
 8008cd0:	08008d9d 	.word	0x08008d9d
 8008cd4:	08008da1 	.word	0x08008da1
 8008cd8:	08008d9d 	.word	0x08008d9d
 8008cdc:	08008da1 	.word	0x08008da1
 8008ce0:	08008d9d 	.word	0x08008d9d
 8008ce4:	08008da1 	.word	0x08008da1
 8008ce8:	08008da1 	.word	0x08008da1
 8008cec:	08008da1 	.word	0x08008da1
 8008cf0:	08008da1 	.word	0x08008da1
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 8008cfe:	3b05      	subs	r3, #5
 8008d00:	2201      	movs	r2, #1
 8008d02:	409a      	lsls	r2, r3
 8008d04:	4b41      	ldr	r3, [pc, #260]	; (8008e0c <_Z26IsDefaultFastPacketMessagem+0x2b0>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bf14      	ite	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	2300      	moveq	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d142      	bne.n	8008d9c <_Z26IsDefaultFastPacketMessagem+0x240>
 8008d16:	e043      	b.n	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f1a3 1301 	sub.w	r3, r3, #65537	; 0x10001
 8008d1e:	f5a3 4372 	sub.w	r3, r3, #61952	; 0xf200
 8008d22:	2b19      	cmp	r3, #25
 8008d24:	d83c      	bhi.n	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
 8008d26:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <_Z26IsDefaultFastPacketMessagem+0x1d0>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d9d 	.word	0x08008d9d
 8008d30:	08008da1 	.word	0x08008da1
 8008d34:	08008da1 	.word	0x08008da1
 8008d38:	08008da1 	.word	0x08008da1
 8008d3c:	08008da1 	.word	0x08008da1
 8008d40:	08008da1 	.word	0x08008da1
 8008d44:	08008da1 	.word	0x08008da1
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008d9d 	.word	0x08008d9d
 8008d50:	08008d9d 	.word	0x08008d9d
 8008d54:	08008da1 	.word	0x08008da1
 8008d58:	08008da1 	.word	0x08008da1
 8008d5c:	08008da1 	.word	0x08008da1
 8008d60:	08008da1 	.word	0x08008da1
 8008d64:	08008d9d 	.word	0x08008d9d
 8008d68:	08008d9d 	.word	0x08008d9d
 8008d6c:	08008da1 	.word	0x08008da1
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	08008d9d 	.word	0x08008d9d
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008d9d 	.word	0x08008d9d
 8008d80:	08008d9d 	.word	0x08008d9d
 8008d84:	08008d9d 	.word	0x08008d9d
 8008d88:	08008d9d 	.word	0x08008d9d
 8008d8c:	08008d9d 	.word	0x08008d9d
 8008d90:	08008d9d 	.word	0x08008d9d
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a1e      	ldr	r2, [pc, #120]	; (8008e10 <_Z26IsDefaultFastPacketMessagem+0x2b4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d101      	bne.n	8008da0 <_Z26IsDefaultFastPacketMessagem+0x244>
                                      case 130323L: // Meteorological Station Data, pri=6, period=1000
                                      case 130324L: // Moored Buoy Station Data, pri=6, period=1000
                                      case 130567L: // Watermaker Input Setting and Status, pri=6, period=2500
                                      case 130577L: // Direction Data PGN, pri=3, period=1000
                                      case 130578L: // Vessel Speed Components, pri=2, period=250
                                      return true;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <_Z26IsDefaultFastPacketMessagem+0x246>
                                  }
                                  return false;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr
 8008dac:	0001fe12 	.word	0x0001fe12
 8008db0:	0001fe11 	.word	0x0001fe11
 8008db4:	0001fe07 	.word	0x0001fe07
 8008db8:	0001fd14 	.word	0x0001fd14
 8008dbc:	0001fd10 	.word	0x0001fd10
 8008dc0:	0001fc1a 	.word	0x0001fc1a
 8008dc4:	0001fc04 	.word	0x0001fc04
 8008dc8:	0001fb15 	.word	0x0001fb15
 8008dcc:	0001fb00 	.word	0x0001fb00
 8008dd0:	0001fa14 	.word	0x0001fa14
 8008dd4:	0001fa02 	.word	0x0001fa02
 8008dd8:	0001f916 	.word	0x0001f916
 8008ddc:	0001f915 	.word	0x0001f915
 8008de0:	0001f905 	.word	0x0001f905
 8008de4:	0001f904 	.word	0x0001f904
 8008de8:	0001f815 	.word	0x0001f815
 8008dec:	0001f805 	.word	0x0001f805
 8008df0:	0001f608 	.word	0x0001f608
 8008df4:	0001f513 	.word	0x0001f513
 8008df8:	0001f21a 	.word	0x0001f21a
 8008dfc:	0001f105 	.word	0x0001f105
 8008e00:	0001f00c 	.word	0x0001f00c
 8008e04:	0001f007 	.word	0x0001f007
 8008e08:	007ff307 	.word	0x007ff307
 8008e0c:	00019e01 	.word	0x00019e01
 8008e10:	0001f101 	.word	0x0001f101

08008e14 <_Z30IsProprietaryFastPacketMessagem>:

bool IsProprietaryFastPacketMessage(unsigned long PGN) {
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  return ( PGN==126720L ) || ( 130816L<=PGN && PGN<=131071L );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a09      	ldr	r2, [pc, #36]	; (8008e44 <_Z30IsProprietaryFastPacketMessagem+0x30>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <_Z30IsProprietaryFastPacketMessagem+0x20>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a08      	ldr	r2, [pc, #32]	; (8008e48 <_Z30IsProprietaryFastPacketMessagem+0x34>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d905      	bls.n	8008e38 <_Z30IsProprietaryFastPacketMessagem+0x24>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e32:	d201      	bcs.n	8008e38 <_Z30IsProprietaryFastPacketMessagem+0x24>
 8008e34:	2301      	movs	r3, #1
 8008e36:	e000      	b.n	8008e3a <_Z30IsProprietaryFastPacketMessagem+0x26>
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr
 8008e44:	0001ef00 	.word	0x0001ef00
 8008e48:	0001feff 	.word	0x0001feff

08008e4c <_ZN9tNMEA200020IsProprietaryMessageEm>:

bool tNMEA2000::IsProprietaryMessage(unsigned long PGN) {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  return IsProprietaryFastPacketMessage(PGN) || ( PGN==61184L ) || ( 65280L<=PGN && PGN<=65535L );
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff ffdd 	bl	8008e14 <_Z30IsProprietaryFastPacketMessagem>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f5b3 4f6f 	cmp.w	r3, #61184	; 0xef00
 8008e66:	d007      	beq.n	8008e78 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8008e6e:	d305      	bcc.n	8008e7c <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d201      	bcs.n	8008e7c <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e000      	b.n	8008e7e <_ZN9tNMEA200020IsProprietaryMessageEm+0x32>
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>:
  size_t i=0;
  for (; i<MaxLen; i++) buf[i]=0;
}

//*****************************************************************************
void tNMEA2000::SetCharBuf(const char *str, size_t MaxLen, char *buf) {
 8008e86:	b480      	push	{r7}
 8008e88:	b087      	sub	sp, #28
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d036      	beq.n	8008f06 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d033      	beq.n	8008f06 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
  if ( str==0 ) { buf[0]=0; return; }
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d103      	bne.n	8008eac <_ZN9tNMEA200010SetCharBufEPKcjPc+0x26>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e02d      	b.n	8008f08 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  size_t i=0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
  for (; i<MaxLen-1 && str[i]!=0; i++) buf[i]=str[i];
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d211      	bcs.n	8008ede <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	441a      	add	r2, r3
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	440b      	add	r3, r1
 8008ed2:	7812      	ldrb	r2, [r2, #0]
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	e7e8      	b.n	8008eb0 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d208      	bcs.n	8008ef8 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x72>
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	4413      	add	r3, r2
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	e7f2      	b.n	8008ede <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
  buf[MaxLen-1]=0; // Force null termination
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4413      	add	r3, r2
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e000      	b.n	8008f08 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8008f06:	bf00      	nop
}
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <_ZN9tNMEA2000C1Ev>:
  ClearCharBuf(MaxLen,buf);
  if (str) SetCharBuf(str,MaxLen,buf);
}

//*****************************************************************************
tNMEA2000::tNMEA2000() {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	4a41      	ldr	r2, [pc, #260]	; (8009020 <_ZN9tNMEA2000C1Ev+0x110>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3314      	adds	r3, #20
 8008f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff f85c 	bl	8007fe4 <_ZN13tN2kSchedulerC1Em>

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  pGroupFunctionHandlers=0;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	665a      	str	r2, [r3, #100]	; 0x64
#endif
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  InstallationDescriptionChanged=false;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
#endif
  ForwardStream=0;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	60da      	str	r2, [r3, #12]

  for (int i=0; i<N2kMessageGroups; i++) {SingleFrameMessages[i]=0; FastPacketMessages[i]=0;}
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	dc11      	bgt.n	8008f6e <_ZN9tNMEA2000C1Ev+0x5e>
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	2200      	movs	r2, #0
 8008f56:	605a      	str	r2, [r3, #4]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	330e      	adds	r3, #14
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e7ea      	b.n	8008f44 <_ZN9tNMEA2000C1Ev+0x34>

  N2kCANMsgBuf=0;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	645a      	str	r2, [r3, #68]	; 0x44
  MaxN2kCANMsgs=0;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  MaxCANSendFrames=40;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2228      	movs	r2, #40	; 0x28
 8008f80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  MaxCANReceiveFrames=0; // Use driver default
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  CANSendFrameBuf=0;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	64da      	str	r2, [r3, #76]	; 0x4c

  OnOpen=0;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	659a      	str	r2, [r3, #88]	; 0x58
  MsgHandler=0;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	65da      	str	r2, [r3, #92]	; 0x5c
  MsgHandlers=0;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	611a      	str	r2, [r3, #16]
  ISORqstHandler=0;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	661a      	str	r2, [r3, #96]	; 0x60

  OpenScheduler.FromNow(0);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3314      	adds	r3, #20
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff f872 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
  OpenState=os_None;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	761a      	strb	r2, [r3, #24]
  AddressChanged=false;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	765a      	strb	r2, [r3, #25]
  DeviceInformationChanged=false;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	769a      	strb	r2, [r3, #26]
  dbMode=dm_None;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	711a      	strb	r2, [r3, #4]
  N2kMode=N2km_ListenOnly;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	715a      	strb	r2, [r3, #5]
  ForwardType=fwdt_Actisense;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	719a      	strb	r2, [r3, #6]
  ForwardMode=0;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	609a      	str	r2, [r3, #8]
  EnableForward();
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff fb53 	bl	800868e <_ZN9tNMEA200013EnableForwardEb>
  SetForwardSystemMessages();
 8008fe8:	2101      	movs	r1, #1
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fb6a 	bl	80086c4 <_ZN9tNMEA200024SetForwardSystemMessagesEb>
  SetForwardOwnMessages();
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff fb81 	bl	80086fa <_ZN9tNMEA200021SetForwardOwnMessagesEb>
  LocalConfigurationInformationData=0;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	625a      	str	r2, [r3, #36]	; 0x24
  SetProgmemConfigurationInformation(DefManufacturerInformation,
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <_ZN9tNMEA2000C1Ev+0x114>)
 8009000:	4a09      	ldr	r2, [pc, #36]	; (8009028 <_ZN9tNMEA2000C1Ev+0x118>)
 8009002:	490a      	ldr	r1, [pc, #40]	; (800902c <_ZN9tNMEA2000C1Ev+0x11c>)
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f959 	bl	80092bc <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
                                     DefInstallationDescription1,
                                     DefInstallationDescription2);
  Devices=0;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	61da      	str	r2, [r3, #28]
  DeviceCount=1;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	08010e58 	.word	0x08010e58
 8009024:	08010e4c 	.word	0x08010e4c
 8009028:	08010e48 	.word	0x08010e48
 800902c:	08010e0c 	.word	0x08010e0c

08009030 <_ZN9tNMEA200011InitDevicesEv>:
  // Note that we can set this only before any initialization. Limit count to 10.
  if ( Devices==0 && _DeviceCount>=1 && _DeviceCount<10 ) DeviceCount=_DeviceCount;
}

//*****************************************************************************
void tNMEA2000::InitDevices() {
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b089      	sub	sp, #36	; 0x24
 8009034:	af04      	add	r7, sp, #16
 8009036:	6078      	str	r0, [r7, #4]
  if ( Devices==0 ) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d164      	bne.n	800910a <_ZN9tNMEA200011InitDevicesEv+0xda>
    N2kDbgln("Init devices");
    Devices=new tInternalDevice[DeviceCount];
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	461c      	mov	r4, r3
 8009046:	4b33      	ldr	r3, [pc, #204]	; (8009114 <_ZN9tNMEA200011InitDevicesEv+0xe4>)
 8009048:	429c      	cmp	r4, r3
 800904a:	d804      	bhi.n	8009056 <_ZN9tNMEA200011InitDevicesEv+0x26>
 800904c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8009050:	fb04 f303 	mul.w	r3, r4, r3
 8009054:	e001      	b.n	800905a <_ZN9tNMEA200011InitDevicesEv+0x2a>
 8009056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800905a:	4618      	mov	r0, r3
 800905c:	f007 fa38 	bl	80104d0 <_Znaj>
 8009060:	4603      	mov	r3, r0
 8009062:	461e      	mov	r6, r3
 8009064:	4635      	mov	r5, r6
 8009066:	1e63      	subs	r3, r4, #1
 8009068:	461c      	mov	r4, r3
 800906a:	2c00      	cmp	r4, #0
 800906c:	db06      	blt.n	800907c <_ZN9tNMEA200011InitDevicesEv+0x4c>
 800906e:	4628      	mov	r0, r5
 8009070:	f7ff f8ca 	bl	8008208 <_ZN9tNMEA200015tInternalDeviceC1Ev>
 8009074:	f505 75ac 	add.w	r5, r5, #344	; 0x158
 8009078:	3c01      	subs	r4, #1
 800907a:	e7f6      	b.n	800906a <_ZN9tNMEA200011InitDevicesEv+0x3a>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	61de      	str	r6, [r3, #28]
    MaxCANSendFrames*=DeviceCount; // We need bigger buffer for sending all information
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6a12      	ldr	r2, [r2, #32]
 800908a:	b292      	uxth	r2, r2
 800908c:	fb02 f303 	mul.w	r3, r2, r3
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
//    for (int i=0; i<DeviceCount; i++) Devices[i].tDevice();
    // We set default device information here.
    Devices[0].LocalProductInformation=0;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	2200      	movs	r2, #0
 800909e:	60da      	str	r2, [r3, #12]
    Devices[0].ProductInformation=&DefProductInformation;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	4a1c      	ldr	r2, [pc, #112]	; (8009118 <_ZN9tNMEA200011InitDevicesEv+0xe8>)
 80090a6:	609a      	str	r2, [r3, #8]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	da29      	bge.n	800910a <_ZN9tNMEA200011InitDevicesEv+0xda>
      SetDeviceInformation(1+i, // 21 bit resolution, max 2097151. Each device from same manufacturer should have unique number.
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3301      	adds	r3, #1
 80090ba:	4619      	mov	r1, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	2304      	movs	r3, #4
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	2319      	movs	r3, #25
 80090cc:	2282      	movs	r2, #130	; 0x82
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fd19 	bl	8009b06 <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                           25, // Inter/Intranetwork Device. See codes on http://www.nmea.org/Assets/20120726%20nmea%202000%20class%20&%20function%20codes%20v%202.00.pdf
                           2046,  // Maximum 2046. See the list of codes on http://www.nmea.org/Assets/20121020%20nmea%202000%20registration%20list.pdf
                           4,  // Marine
                           i
                          );
      if ( i>0 ) {
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dd13      	ble.n	8009102 <_ZN9tNMEA200011InitDevicesEv+0xd2>
        Devices[i].LocalProductInformation=0;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69da      	ldr	r2, [r3, #28]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80090e4:	fb01 f303 	mul.w	r3, r1, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	60da      	str	r2, [r3, #12]
        Devices[i].ProductInformation=0;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80090f8:	fb01 f303 	mul.w	r3, r1, r3
 80090fc:	4413      	add	r3, r2
 80090fe:	2200      	movs	r2, #0
 8009100:	609a      	str	r2, [r3, #8]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e7d0      	b.n	80090ac <_ZN9tNMEA200011InitDevicesEv+0x7c>
      }
    }
  }
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009112:	bf00      	nop
 8009114:	005f417d 	.word	0x005f417d
 8009118:	08010d80 	.word	0x08010d80

0800911c <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>:

//*****************************************************************************
void tNMEA2000::SetProductInformation(const tProductInformation *_ProductInformation, int iDev) {
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fa4c 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 8009130:	4603      	mov	r3, r0
 8009132:	f083 0301 	eor.w	r3, r3, #1
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d13f      	bne.n	80091bc <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa0>
  InitDevices();
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff ff77 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].ProductInformation=_ProductInformation;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	69da      	ldr	r2, [r3, #28]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	4413      	add	r3, r2
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	609a      	str	r2, [r3, #8]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=Devices[iDev].LocalProductInformation;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	69da      	ldr	r2, [r3, #28]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	4413      	add	r3, r2
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d111      	bne.n	8009190 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0x74>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	441a      	add	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	69d9      	ldr	r1, [r3, #28]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8009186:	fb00 f303 	mul.w	r3, r0, r3
 800918a:	440b      	add	r3, r1
 800918c:	68d2      	ldr	r2, [r2, #12]
 800918e:	609a      	str	r2, [r3, #8]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=&DefProductInformation;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	69da      	ldr	r2, [r3, #28]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10b      	bne.n	80091be <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	69da      	ldr	r2, [r3, #28]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	4a03      	ldr	r2, [pc, #12]	; (80091c4 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa8>)
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	e000      	b.n	80091be <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
  if ( !IsValidDevice(iDev) ) return;
 80091bc:	bf00      	nop
}
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	08010d80 	.word	0x08010d80

080091c8 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>:
}

//*****************************************************************************
void tNMEA2000::SetConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d004      	beq.n	80091e8 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x20>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f007 fad2 	bl	801078c <free>
  LocalConfigurationInformationData=0;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24

  size_t ManInfoLen=(ManufacturerInformation?strlen(ManufacturerInformation)+1:0);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x38>
 80091f4:	68b8      	ldr	r0, [r7, #8]
 80091f6:	f7f7 f821 	bl	800023c <strlen>
 80091fa:	4603      	mov	r3, r0
 80091fc:	3301      	adds	r3, #1
 80091fe:	e000      	b.n	8009202 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x3a>
 8009200:	2300      	movs	r3, #0
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  size_t InstDesc1Len=Max_N2kConfigurationInfoField_len;
 8009204:	2347      	movs	r3, #71	; 0x47
 8009206:	623b      	str	r3, [r7, #32]
  size_t InstDesc2Len=Max_N2kConfigurationInfoField_len;
 8009208:	2347      	movs	r3, #71	; 0x47
 800920a:	61fb      	str	r3, [r7, #28]
#else
  size_t InstDesc1Len=(InstallationDescription1?strlen(InstallationDescription1)+1:0);
  size_t InstDesc2Len=(InstallationDescription2?strlen(InstallationDescription2)+1:0);
#endif

  if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	2b47      	cmp	r3, #71	; 0x47
 8009210:	d901      	bls.n	8009216 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x4e>
 8009212:	2347      	movs	r3, #71	; 0x47
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
  if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	2b47      	cmp	r3, #71	; 0x47
 800921a:	d901      	bls.n	8009220 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x58>
 800921c:	2347      	movs	r3, #71	; 0x47
 800921e:	623b      	str	r3, [r7, #32]
  if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	2b47      	cmp	r3, #71	; 0x47
 8009224:	d901      	bls.n	800922a <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x62>
 8009226:	2347      	movs	r3, #71	; 0x47
 8009228:	61fb      	str	r3, [r7, #28]

  size_t TotalSize=ManInfoLen+InstDesc1Len+InstDesc2Len;
 800922a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	4413      	add	r3, r2
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	61bb      	str	r3, [r7, #24]
  void *mem=(TotalSize>0?malloc(TotalSize):0);
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x7e>
 800923c:	69b8      	ldr	r0, [r7, #24]
 800923e:	f007 fa9d 	bl	801077c <malloc>
 8009242:	4603      	mov	r3, r0
 8009244:	e000      	b.n	8009248 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x80>
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

  LocalConfigurationInformationData=(char*)mem;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	625a      	str	r2, [r3, #36]	; 0x24
  char *Info=LocalConfigurationInformationData;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription1,InstDesc1Len,Info);
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	6a39      	ldr	r1, [r7, #32]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe13 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa2>
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	e000      	b.n	800926c <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa4>
 800926a:	2300      	movs	r3, #0
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	62d3      	str	r3, [r2, #44]	; 0x2c
  Info+=InstDesc1Len;
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	4413      	add	r3, r2
 8009276:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription2,InstDesc2Len,Info);
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	69f9      	ldr	r1, [r7, #28]
 800927c:	6838      	ldr	r0, [r7, #0]
 800927e:	f7ff fe02 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc4>
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	e000      	b.n	800928e <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc6>
 800928c:	2300      	movs	r3, #0
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	6313      	str	r3, [r2, #48]	; 0x30
  Info+=InstDesc2Len;
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	613b      	str	r3, [r7, #16]

  SetCharBuf(ManufacturerInformation,ManInfoLen,Info);
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800929e:	68b8      	ldr	r0, [r7, #8]
 80092a0:	f7ff fdf1 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.ManufacturerInformation=(ManufacturerInformation?Info:0);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe6>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	e000      	b.n	80092b0 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe8>
 80092ae:	2300      	movs	r3, #0
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80092b4:	bf00      	nop
 80092b6:	3728      	adds	r7, #40	; 0x28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>:

//*****************************************************************************
void tNMEA2000::SetProgmemConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d004      	beq.n	80092dc <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_+0x20>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	4618      	mov	r0, r3
 80092d8:	f007 fa58 	bl	801078c <free>
  LocalConfigurationInformationData=0;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24
  ConfigurationInformation.ManufacturerInformation=ManufacturerInformation;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	629a      	str	r2, [r3, #40]	; 0x28
  ConfigurationInformation.InstallationDescription1=InstallationDescription1;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	62da      	str	r2, [r3, #44]	; 0x2c
  ConfigurationInformation.InstallationDescription2=InstallationDescription2;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>:

//*****************************************************************************
size_t tNMEA2000::GetFastPacketTxPGNCount(int iDev) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  if ( !IsValidDevice(iDev) ) return 0;
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff f95d 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800930e:	4603      	mov	r3, r0
 8009310:	f083 0301 	eor.w	r3, r3, #1
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x22>
 800931a:	2300      	movs	r3, #0
 800931c:	e050      	b.n	80093c0 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc4>
  unsigned long ListPGN;
  size_t FPTxPGNCount=0;
 800931e:	2300      	movs	r3, #0
 8009320:	617b      	str	r3, [r7, #20]

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	4a28      	ldr	r2, [pc, #160]	; (80093c8 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xcc>)
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bf14      	ite	ne
 8009336:	2301      	movne	r3, #1
 8009338:	2300      	moveq	r3, #0
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00d      	beq.n	800935c <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x60>
    if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fc7c 	bl	800ac40 <_ZN9tNMEA200015IsFastPacketPGNEm>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x58>
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	3301      	adds	r3, #1
 8009352:	617b      	str	r3, [r7, #20]
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	3301      	adds	r3, #1
 8009358:	613b      	str	r3, [r7, #16]
 800935a:	e7e4      	b.n	8009326 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x2a>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009366:	fb01 f303 	mul.w	r3, r1, r3
 800936a:	4413      	add	r3, r2
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2b00      	cmp	r3, #0
 8009370:	d025      	beq.n	80093be <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69da      	ldr	r2, [r3, #28]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	4413      	add	r3, r2
 8009386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60bb      	str	r3, [r7, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	bf14      	ite	ne
 8009398:	2301      	movne	r3, #1
 800939a:	2300      	moveq	r3, #0
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00d      	beq.n	80093be <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
      if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fc4b 	bl	800ac40 <_ZN9tNMEA200015IsFastPacketPGNEm>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xba>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	3301      	adds	r3, #1
 80093b4:	617b      	str	r3, [r7, #20]
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e7db      	b.n	8009376 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x7a>
    }
  }

  return FPTxPGNCount;
 80093be:	697b      	ldr	r3, [r7, #20]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	08010d34 	.word	0x08010d34

080093cc <_ZN9tNMEA200018GetSequenceCounterEmi>:

//*****************************************************************************
int tNMEA2000::GetSequenceCounter(unsigned long PGN, int iDev) {
 80093cc:	b590      	push	{r4, r7, lr}
 80093ce:	b089      	sub	sp, #36	; 0x24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7ff f8f4 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f083 0301 	eor.w	r3, r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <_ZN9tNMEA200018GetSequenceCounterEmi+0x24>
 80093ec:	2300      	movs	r3, #0
 80093ee:	e0f9      	b.n	80095e4 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>

  if ( Devices[iDev].PGNSequenceCounters==0 ) { // Sequence counters has not yet been initialized
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	69da      	ldr	r2, [r3, #28]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80093fa:	fb01 f303 	mul.w	r3, r1, r3
 80093fe:	4413      	add	r3, r2
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d14c      	bne.n	80094a0 <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
    Devices[iDev].MaxPGNSequenceCounters=GetFastPacketTxPGNCount(iDev)+1; // Reserve 1 for undefined PGNs
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff ff77 	bl	80092fc <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>
 800940e:	4601      	mov	r1, r0
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800941a:	fb00 f303 	mul.w	r3, r0, r3
 800941e:	4413      	add	r3, r2
 8009420:	1c4a      	adds	r2, r1, #1
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
    Devices[iDev].PGNSequenceCounters=new unsigned long[Devices[iDev].MaxPGNSequenceCounters];
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800942e:	fb01 f303 	mul.w	r3, r1, r3
 8009432:	4413      	add	r3, r2
 8009434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009436:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800943a:	4293      	cmp	r3, r2
 800943c:	d201      	bcs.n	8009442 <_ZN9tNMEA200018GetSequenceCounterEmi+0x76>
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	e001      	b.n	8009446 <_ZN9tNMEA200018GetSequenceCounterEmi+0x7a>
 8009442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	69d1      	ldr	r1, [r2, #28]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8009450:	fb00 f202 	mul.w	r2, r0, r2
 8009454:	188c      	adds	r4, r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f007 f83a 	bl	80104d0 <_Znaj>
 800945c:	4603      	mov	r3, r0
 800945e:	62e3      	str	r3, [r4, #44]	; 0x2c
    for ( size_t i=0; i<Devices[iDev].MaxPGNSequenceCounters; i++ ) Devices[iDev].PGNSequenceCounters[i]=0;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800946e:	fb01 f303 	mul.w	r3, r1, r3
 8009472:	4413      	add	r3, r2
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	69fa      	ldr	r2, [r7, #28]
 8009478:	429a      	cmp	r2, r3
 800947a:	d211      	bcs.n	80094a0 <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	69da      	ldr	r2, [r3, #28]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009486:	fb01 f303 	mul.w	r3, r1, r3
 800948a:	4413      	add	r3, r2
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	3301      	adds	r3, #1
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	e7e1      	b.n	8009464 <_ZN9tNMEA200018GetSequenceCounterEmi+0x98>
  }
  if ( Devices[iDev].PGNSequenceCounters==0 ) return 0; // Should not be. Only in case of memory allocation problem.
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <_ZN9tNMEA200018GetSequenceCounterEmi+0xee>
 80094b6:	2300      	movs	r3, #0
 80094b8:	e094      	b.n	80095e4 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  size_t last=Devices[iDev].MaxPGNSequenceCounters-1;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	69da      	ldr	r2, [r3, #28]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80094c4:	fb01 f303 	mul.w	r3, r1, r3
 80094c8:	4413      	add	r3, r2
 80094ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094cc:	3b01      	subs	r3, #1
 80094ce:	613b      	str	r3, [r7, #16]
  unsigned long sc;
  for ( size_t i=0; i<last; i++ ) {
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d25e      	bcs.n	800959a <_ZN9tNMEA200018GetSequenceCounterEmi+0x1ce>
    if ( Devices[iDev].PGNSequenceCounters[i]==0 ) { // Empty place, use this
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	69da      	ldr	r2, [r3, #28]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80094e6:	fb01 f303 	mul.w	r3, r1, r3
 80094ea:	4413      	add	r3, r2
 80094ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10f      	bne.n	800951a <_ZN9tNMEA200018GetSequenceCounterEmi+0x14e>
      Devices[iDev].PGNSequenceCounters[i]=PGN;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	69da      	ldr	r2, [r3, #28]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009504:	fb01 f303 	mul.w	r3, r1, r3
 8009508:	4413      	add	r3, r2
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	601a      	str	r2, [r3, #0]
      return 0; // Start from sequence 0
 8009516:	2300      	movs	r3, #0
 8009518:	e064      	b.n	80095e4 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
    }
    if ( (Devices[iDev].PGNSequenceCounters[i]&0x00ffffff) == PGN ) { // Found counter, use it
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	69da      	ldr	r2, [r3, #28]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	4413      	add	r3, r2
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	429a      	cmp	r2, r3
 800953c:	d129      	bne.n	8009592 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1c6>
      sc=Devices[iDev].PGNSequenceCounters[i]>>24;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	69da      	ldr	r2, [r3, #28]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	4413      	add	r3, r2
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	0e1b      	lsrs	r3, r3, #24
 800955a:	61bb      	str	r3, [r7, #24]
      sc++; if (sc>7) sc=0; // Get next counter
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	3301      	adds	r3, #1
 8009560:	61bb      	str	r3, [r7, #24]
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b07      	cmp	r3, #7
 8009566:	d901      	bls.n	800956c <_ZN9tNMEA200018GetSequenceCounterEmi+0x1a0>
 8009568:	2300      	movs	r3, #0
 800956a:	61bb      	str	r3, [r7, #24]
      Devices[iDev].PGNSequenceCounters[i]=PGN | (sc << 24);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	0619      	lsls	r1, r3, #24
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	69da      	ldr	r2, [r3, #28]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800957a:	fb00 f303 	mul.w	r3, r0, r3
 800957e:	4413      	add	r3, r2
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	430a      	orrs	r2, r1
 800958c:	601a      	str	r2, [r3, #0]
      return sc;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	e028      	b.n	80095e4 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  for ( size_t i=0; i<last; i++ ) {
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	3301      	adds	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	e79c      	b.n	80094d4 <_ZN9tNMEA200018GetSequenceCounterEmi+0x108>
    }
  }
  // PGN counter not found, so use common
  sc=Devices[iDev].PGNSequenceCounters[last];
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	69da      	ldr	r2, [r3, #28]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	4413      	add	r3, r2
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	61bb      	str	r3, [r7, #24]
  sc++; if (sc>7) sc=0;
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	3301      	adds	r3, #1
 80095ba:	61bb      	str	r3, [r7, #24]
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	2b07      	cmp	r3, #7
 80095c0:	d901      	bls.n	80095c6 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1fa>
 80095c2:	2300      	movs	r3, #0
 80095c4:	61bb      	str	r3, [r7, #24]
  Devices[iDev].PGNSequenceCounters[last]=sc;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	69da      	ldr	r2, [r3, #28]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	601a      	str	r2, [r3, #0]
  return sc;
 80095e2:	69bb      	ldr	r3, [r7, #24]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3724      	adds	r7, #36	; 0x24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}

080095ec <_Z17CopyProgmemStringPKcjPc>:

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
void CopyProgmemString(const char *str, size_t MaxLen, char *buf) {
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d03a      	beq.n	8009674 <_Z17CopyProgmemStringPKcjPc+0x88>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d037      	beq.n	8009674 <_Z17CopyProgmemStringPKcjPc+0x88>
  if ( str==0 ) { buf[0]=0; return; }
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <_Z17CopyProgmemStringPKcjPc+0x26>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	701a      	strb	r2, [r3, #0]
 8009610:	e031      	b.n	8009676 <_Z17CopyProgmemStringPKcjPc+0x8a>
  size_t i=0;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
  char c;
  for (; i<MaxLen-1 && (c=pgm_read_byte(&(str[i])))!=0; i++) buf[i]=c;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3b01      	subs	r3, #1
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	429a      	cmp	r2, r3
 800961e:	d209      	bcs.n	8009634 <_Z17CopyProgmemStringPKcjPc+0x48>
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	4413      	add	r3, r2
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	74fb      	strb	r3, [r7, #19]
 800962a:	7cfb      	ldrb	r3, [r7, #19]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <_Z17CopyProgmemStringPKcjPc+0x48>
 8009630:	2301      	movs	r3, #1
 8009632:	e000      	b.n	8009636 <_Z17CopyProgmemStringPKcjPc+0x4a>
 8009634:	2300      	movs	r3, #0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <_Z17CopyProgmemStringPKcjPc+0x60>
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	4413      	add	r3, r2
 8009640:	7cfa      	ldrb	r2, [r7, #19]
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	3301      	adds	r3, #1
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e7e4      	b.n	8009616 <_Z17CopyProgmemStringPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	429a      	cmp	r2, r3
 8009652:	d208      	bcs.n	8009666 <_Z17CopyProgmemStringPKcjPc+0x7a>
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	4413      	add	r3, r2
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	3301      	adds	r3, #1
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e7f2      	b.n	800964c <_Z17CopyProgmemStringPKcjPc+0x60>
  buf[MaxLen-1]=0; // Force null termination
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	3b01      	subs	r3, #1
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e000      	b.n	8009676 <_Z17CopyProgmemStringPKcjPc+0x8a>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8009674:	bf00      	nop
}
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr
	...

08009680 <_ZN9tNMEA20007IsTxPGNEmi>:

//*****************************************************************************
bool tNMEA2000::IsTxPGN(unsigned long PGN, int iDev) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7fe ff9a 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 8009694:	4603      	mov	r3, r0
 8009696:	f083 0301 	eor.w	r3, r3, #1
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <_ZN9tNMEA20007IsTxPGNEmi+0x24>
 80096a0:	2300      	movs	r3, #0
 80096a2:	e046      	b.n	8009732 <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  unsigned long ListPGN;

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 80096a4:	2300      	movs	r3, #0
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	4a24      	ldr	r2, [pc, #144]	; (800973c <_ZN9tNMEA20007IsTxPGNEmi+0xbc>)
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b0:	617b      	str	r3, [r7, #20]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bf14      	ite	ne
 80096b8:	2301      	movne	r3, #1
 80096ba:	2300      	moveq	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d009      	beq.n	80096d6 <_ZN9tNMEA20007IsTxPGNEmi+0x56>
    if ( ListPGN==PGN ) return true;
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d101      	bne.n	80096ce <_ZN9tNMEA20007IsTxPGNEmi+0x4e>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e031      	b.n	8009732 <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	3301      	adds	r3, #1
 80096d2:	61fb      	str	r3, [r7, #28]
 80096d4:	e7e8      	b.n	80096a8 <_ZN9tNMEA20007IsTxPGNEmi+0x28>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	69da      	ldr	r2, [r3, #28]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80096e0:	fb01 f303 	mul.w	r3, r1, r3
 80096e4:	4413      	add	r3, r2
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d021      	beq.n	8009730 <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	69da      	ldr	r2, [r3, #28]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf14      	ite	ne
 8009712:	2301      	movne	r3, #1
 8009714:	2300      	moveq	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d009      	beq.n	8009730 <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
      if ( ListPGN==PGN ) return true;
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	429a      	cmp	r2, r3
 8009722:	d101      	bne.n	8009728 <_ZN9tNMEA20007IsTxPGNEmi+0xa8>
 8009724:	2301      	movs	r3, #1
 8009726:	e004      	b.n	8009732 <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	3301      	adds	r3, #1
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	e7df      	b.n	80096f0 <_ZN9tNMEA20007IsTxPGNEmi+0x70>
    }
  }
  return false;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	08010d34 	.word	0x08010d34

08009740 <_ZNK9tNMEA200021GetProductInformationEiRb>:

//*****************************************************************************
const tNMEA2000::tProductInformation * tNMEA2000::GetProductInformation(int iDev, bool &IsProgMem) const {
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f7fe ff3a 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 8009754:	4603      	mov	r3, r0
 8009756:	f083 0301 	eor.w	r3, r3, #1
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <_ZNK9tNMEA200021GetProductInformationEiRb+0x24>
 8009760:	2300      	movs	r3, #0
 8009762:	e03d      	b.n	80097e0 <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
  int iPIDev=iDev;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	617b      	str	r3, [r7, #20]

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009772:	fb01 f303 	mul.w	r3, r1, r3
 8009776:	4413      	add	r3, r2
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <_ZNK9tNMEA200021GetProductInformationEiRb+0x42>
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]
    if ( Devices[iPIDev].ProductInformation==0 ) return 0; // Can not do anything.
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	69da      	ldr	r2, [r3, #28]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800978c:	fb01 f303 	mul.w	r3, r1, r3
 8009790:	4413      	add	r3, r2
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <_ZNK9tNMEA200021GetProductInformationEiRb+0x5c>
 8009798:	2300      	movs	r3, #0
 800979a:	e021      	b.n	80097e0 <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
    IsProgMem = (Devices[iPIDev].ProductInformation!=Devices[iPIDev].LocalProductInformation );
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80097a6:	fb01 f303 	mul.w	r3, r1, r3
 80097aa:	4413      	add	r3, r2
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	69d9      	ldr	r1, [r3, #28]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80097b8:	fb00 f303 	mul.w	r3, r0, r3
 80097bc:	440b      	add	r3, r1
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	bf14      	ite	ne
 80097c4:	2301      	movne	r3, #1
 80097c6:	2300      	moveq	r3, #0
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	701a      	strb	r2, [r3, #0]
    return Devices[iPIDev].ProductInformation;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	69da      	ldr	r2, [r3, #28]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80097d8:	fb01 f303 	mul.w	r3, r1, r3
 80097dc:	4413      	add	r3, r2
 80097de:	689b      	ldr	r3, [r3, #8]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZNK9tNMEA200013GetN2kVersionEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetN2kVersion(int iDev) const {
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 80097f2:	f107 030b 	add.w	r3, r7, #11
 80097f6:	461a      	mov	r2, r3
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff ffa0 	bl	8009740 <_ZNK9tNMEA200021GetProductInformationEiRb>
 8009800:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <_ZNK9tNMEA200013GetN2kVersionEi+0x24>
 8009808:	2300      	movs	r3, #0
 800980a:	e00a      	b.n	8009822 <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>

  if ( !IsProgMem ) {
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	f083 0301 	eor.w	r3, r3, #1
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <_ZNK9tNMEA200013GetN2kVersionEi+0x36>
    return ProductInformation->N2kVersion;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	e001      	b.n	8009822 <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->N2kVersion);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	881b      	ldrh	r3, [r3, #0]
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <_ZNK9tNMEA200014GetProductCodeEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetProductCode(int iDev) const {
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 8009834:	f107 030b 	add.w	r3, r7, #11
 8009838:	461a      	mov	r2, r3
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff ff7f 	bl	8009740 <_ZNK9tNMEA200021GetProductInformationEiRb>
 8009842:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <_ZNK9tNMEA200014GetProductCodeEi+0x24>
 800984a:	2300      	movs	r3, #0
 800984c:	e00a      	b.n	8009864 <_ZNK9tNMEA200014GetProductCodeEi+0x3a>

  if ( !IsProgMem ) {
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	f083 0301 	eor.w	r3, r3, #1
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <_ZNK9tNMEA200014GetProductCodeEi+0x36>
    return ProductInformation->ProductCode;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	885b      	ldrh	r3, [r3, #2]
 800985e:	e001      	b.n	8009864 <_ZNK9tNMEA200014GetProductCodeEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->ProductCode);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	885b      	ldrh	r3, [r3, #2]
  }
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <_ZNK9tNMEA200010GetModelIDEPcji>:

//*****************************************************************************
void tNMEA2000::GetModelID(char *buf, size_t max_len, int iDev) const {
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
  if ( max_len==0 ) return;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d023      	beq.n	80098c8 <_ZNK9tNMEA200010GetModelIDEPcji+0x5c>
  buf[0]=0;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 8009886:	f107 0313 	add.w	r3, r7, #19
 800988a:	461a      	mov	r2, r3
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7ff ff56 	bl	8009740 <_ZNK9tNMEA200021GetProductInformationEiRb>
 8009894:	6178      	str	r0, [r7, #20]

  if ( ProductInformation==0 ) return;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d017      	beq.n	80098cc <_ZNK9tNMEA200010GetModelIDEPcji+0x60>

  if ( !IsProgMem ) {
 800989c:	7cfb      	ldrb	r3, [r7, #19]
 800989e:	f083 0301 	eor.w	r3, r3, #1
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <_ZNK9tNMEA200010GetModelIDEPcji+0x4c>
    SetCharBuf(ProductInformation->N2kModelID,max_len,buf);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3304      	adds	r3, #4
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff fae8 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
 80098b6:	e00a      	b.n	80098ce <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  } else {
    CopyProgmemString(ProductInformation->N2kModelID,max_len,buf);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	3304      	adds	r3, #4
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fe93 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
 80098c6:	e002      	b.n	80098ce <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( max_len==0 ) return;
 80098c8:	bf00      	nop
 80098ca:	e000      	b.n	80098ce <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( ProductInformation==0 ) return;
 80098cc:	bf00      	nop
  }
}
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <_ZNK9tNMEA200021GetCertificationLevelEi>:
    CopyProgmemString(ProductInformation->N2kModelSerialCode,max_len,buf);
  }
}

//*****************************************************************************
unsigned char tNMEA2000::GetCertificationLevel(int iDev) const {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 80098de:	f107 030b 	add.w	r3, r7, #11
 80098e2:	461a      	mov	r2, r3
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff ff2a 	bl	8009740 <_ZNK9tNMEA200021GetProductInformationEiRb>
 80098ec:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <_ZNK9tNMEA200021GetCertificationLevelEi+0x24>
 80098f4:	2300      	movs	r3, #0
 80098f6:	e00c      	b.n	8009912 <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>

  if ( !IsProgMem ) {
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	f083 0301 	eor.w	r3, r3, #1
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <_ZNK9tNMEA200021GetCertificationLevelEi+0x38>
    return ProductInformation->CertificationLevel;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800990a:	e002      	b.n	8009912 <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->CertificationLevel);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <_ZNK9tNMEA200018GetLoadEquivalencyEi>:

//*****************************************************************************
unsigned char tNMEA2000::GetLoadEquivalency(int iDev) const {
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 8009924:	f107 030b 	add.w	r3, r7, #11
 8009928:	461a      	mov	r2, r3
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ff07 	bl	8009740 <_ZNK9tNMEA200021GetProductInformationEiRb>
 8009932:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x24>
 800993a:	2300      	movs	r3, #0
 800993c:	e00c      	b.n	8009958 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>

  if ( !IsProgMem ) {
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	f083 0301 	eor.w	r3, r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x38>
    return ProductInformation->LoadEquivalency;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009950:	e002      	b.n	8009958 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->LoadEquivalency);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
  }
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>:

//*****************************************************************************
void tNMEA2000::CopyProgmemConfigurationInformationToLocal() {
 8009960:	b580      	push	{r7, lr}
 8009962:	b096      	sub	sp, #88	; 0x58
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  if ( LocalConfigurationInformationData==0 ) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d12e      	bne.n	80099ce <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv+0x6e>
    char Buf[Max_N2kConfigurationInfoField_len];
    const char *ID1=ConfigurationInformation.InstallationDescription1;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	657b      	str	r3, [r7, #84]	; 0x54
    const char *ID2=ConfigurationInformation.InstallationDescription2;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997a:	653b      	str	r3, [r7, #80]	; 0x50
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,Max_N2kConfigurationInfoField_len,Buf);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009980:	f107 0208 	add.w	r2, r7, #8
 8009984:	2147      	movs	r1, #71	; 0x47
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff fe30 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
    SetConfigurationInformation(Buf);
 800998c:	f107 0108 	add.w	r1, r7, #8
 8009990:	2300      	movs	r3, #0
 8009992:	2200      	movs	r2, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff fc17 	bl	80091c8 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>
    CopyProgmemString(ID1,Max_N2kConfigurationInfoField_len,Buf);
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	461a      	mov	r2, r3
 80099a0:	2147      	movs	r1, #71	; 0x47
 80099a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099a4:	f7ff fe22 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription1(Buf);
 80099a8:	f107 0308 	add.w	r3, r7, #8
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f811 	bl	80099d6 <_ZN9tNMEA200027SetInstallationDescription1EPKc>
    CopyProgmemString(ID2,Max_N2kConfigurationInfoField_len,Buf);
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	461a      	mov	r2, r3
 80099ba:	2147      	movs	r1, #71	; 0x47
 80099bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80099be:	f7ff fe15 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription2(Buf);
 80099c2:	f107 0308 	add.w	r3, r7, #8
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f824 	bl	8009a16 <_ZN9tNMEA200027SetInstallationDescription2EPKc>
  }
}
 80099ce:	bf00      	nop
 80099d0:	3758      	adds	r7, #88	; 0x58
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZN9tNMEA200027SetInstallationDescription1EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription1(const char *InstallationDescription1) {
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7ff ffbd 	bl	8009960 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  // Get pointer to local InstallationDescription1, which is after
  char *Info=LocalConfigurationInformationData;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription1,Max_N2kConfigurationInfoField_len,Info);
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	2147      	movs	r1, #71	; 0x47
 80099f0:	6838      	ldr	r0, [r7, #0]
 80099f2:	f7ff fa48 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2a>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	e000      	b.n	8009a02 <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2c>
 8009a00:	2300      	movs	r3, #0
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	62d3      	str	r3, [r2, #44]	; 0x2c
  InstallationDescriptionChanged=true;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8009a0e:	bf00      	nop
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <_ZN9tNMEA200027SetInstallationDescription2EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription2(const char *InstallationDescription2) {
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff ff9d 	bl	8009960 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  char *Info=LocalConfigurationInformationData+Max_N2kConfigurationInfoField_len;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	3347      	adds	r3, #71	; 0x47
 8009a2c:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription2,Max_N2kConfigurationInfoField_len,Info);
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	2147      	movs	r1, #71	; 0x47
 8009a32:	6838      	ldr	r0, [r7, #0]
 8009a34:	f7ff fa27 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2c>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	e000      	b.n	8009a44 <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2e>
 8009a42:	2300      	movs	r3, #0
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6313      	str	r3, [r2, #48]	; 0x30
  InstallationDescriptionChanged=true;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8009a50:	bf00      	nop
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <_ZN9tNMEA200027GetInstallationDescription1EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription1(char *buf, size_t max_len) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription1,max_len,buf);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fa06 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
  }
}
 8009a7a:	e006      	b.n	8009a8a <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fdb1 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
}
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <_ZN9tNMEA200027GetInstallationDescription2EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription2(char *buf, size_t max_len) {
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription2,max_len,buf);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff f9e9 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
  }
}
 8009ab4:	e006      	b.n	8009ac4 <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fd94 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
}
 8009ac4:	bf00      	nop
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZN9tNMEA200026GetManufacturerInformationEPcj>:

//*****************************************************************************
void tNMEA2000::GetManufacturerInformation(char *buf, size_t max_len) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d007      	beq.n	8009af0 <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x24>
    SetCharBuf(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff f9cc 	bl	8008e86 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
  }
}
 8009aee:	e006      	b.n	8009afe <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x32>
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff fd77 	bl	80095ec <_Z17CopyProgmemStringPKcjPc>
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <_ZN9tNMEA200020SetDeviceInformationEmhhthi>:
                                     unsigned char _DeviceFunction,
                                     unsigned char _DeviceClass,
                                     uint16_t _ManufacturerCode,
                                     unsigned char _IndustryGroup,
                                     int iDev
                                     ) {
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	4611      	mov	r1, r2
 8009b12:	461a      	mov	r2, r3
 8009b14:	460b      	mov	r3, r1
 8009b16:	71fb      	strb	r3, [r7, #7]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	71bb      	strb	r3, [r7, #6]
   if ( !IsValidDevice(iDev) ) return;
 8009b1c:	6a39      	ldr	r1, [r7, #32]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7fe fd52 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f083 0301 	eor.w	r3, r3, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d159      	bne.n	8009be4 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xde>
   InitDevices();
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff fa7d 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>
   if (_ManufacturerCode!=0xffff) Devices[iDev].DeviceInformation.SetManufacturerCode(_ManufacturerCode);
 8009b36:	8b3b      	ldrh	r3, [r7, #24]
 8009b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00d      	beq.n	8009b5c <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x56>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	69da      	ldr	r2, [r3, #28]
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	4413      	add	r3, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	8b3b      	ldrh	r3, [r7, #24]
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fe facc 	bl	80080f4 <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>
   if (_UniqueNumber!=0xffffffff) Devices[iDev].DeviceInformation.SetUniqueNumber(_UniqueNumber);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b62:	d00b      	beq.n	8009b7c <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x76>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	69da      	ldr	r2, [r3, #28]
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009b6e:	fb01 f303 	mul.w	r3, r1, r3
 8009b72:	4413      	add	r3, r2
 8009b74:	68b9      	ldr	r1, [r7, #8]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe faa8 	bl	80080cc <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>
   if (_DeviceFunction!=0xff) Devices[iDev].DeviceInformation.SetDeviceFunction(_DeviceFunction);
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	2bff      	cmp	r3, #255	; 0xff
 8009b80:	d00d      	beq.n	8009b9e <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x98>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	69da      	ldr	r2, [r3, #28]
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009b8c:	fb01 f303 	mul.w	r3, r1, r3
 8009b90:	4413      	add	r3, r2
 8009b92:	461a      	mov	r2, r3
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	4619      	mov	r1, r3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	f7fe fad8 	bl	800814e <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>
   if (_DeviceClass!=0xff) Devices[iDev].DeviceInformation.SetDeviceClass(_DeviceClass);
 8009b9e:	79bb      	ldrb	r3, [r7, #6]
 8009ba0:	2bff      	cmp	r3, #255	; 0xff
 8009ba2:	d00d      	beq.n	8009bc0 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xba>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	79bb      	ldrb	r3, [r7, #6]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fad5 	bl	800816a <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>
   if (_IndustryGroup!=0xff) Devices[iDev].DeviceInformation.SetIndustryGroup(_IndustryGroup);
 8009bc0:	7f3b      	ldrb	r3, [r7, #28]
 8009bc2:	2bff      	cmp	r3, #255	; 0xff
 8009bc4:	d00f      	beq.n	8009be6 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	69da      	ldr	r2, [r3, #28]
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	7f3b      	ldrb	r3, [r7, #28]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe fad4 	bl	800818a <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>
 8009be2:	e000      	b.n	8009be6 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
   if ( !IsValidDevice(iDev) ) return;
 8009be4:	bf00      	nop
}
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>:
void tNMEA2000::SetDeviceInformationInstances(
                              uint8_t _DeviceInstanceLower,
                              uint8_t _DeviceInstanceUpper,
                              uint8_t _SystemInstance,
                              int iDev
                              ) {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	70fb      	strb	r3, [r7, #3]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70bb      	strb	r3, [r7, #2]
 8009c02:	4613      	mov	r3, r2
 8009c04:	707b      	strb	r3, [r7, #1]
  if ( !IsValidDevice(iDev) ) return;
 8009c06:	69b9      	ldr	r1, [r7, #24]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7fe fcdd 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f083 0301 	eor.w	r3, r3, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f040 808a 	bne.w	8009d30 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x144>

  InitDevices();
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff fa07 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>
  uint8_t DeviceInstance=Devices[iDev].DeviceInformation.GetDeviceInstance();
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69da      	ldr	r2, [r3, #28]
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	4413      	add	r3, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fa80 	bl	8008138 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]

  if (_DeviceInstanceLower!=0xff ) {
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	2bff      	cmp	r3, #255	; 0xff
 8009c40:	d00c      	beq.n	8009c5c <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x70>
    DeviceInstance=( (DeviceInstance & ~0x07) | (_DeviceInstanceLower & 0x07) );
 8009c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c46:	f023 0307 	bic.w	r3, r3, #7
 8009c4a:	b25a      	sxtb	r2, r3
 8009c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	b25b      	sxtb	r3, r3
 8009c56:	4313      	orrs	r3, r2
 8009c58:	b25b      	sxtb	r3, r3
 8009c5a:	73fb      	strb	r3, [r7, #15]
  }
  if (_DeviceInstanceUpper!=0xff ) {
 8009c5c:	78bb      	ldrb	r3, [r7, #2]
 8009c5e:	2bff      	cmp	r3, #255	; 0xff
 8009c60:	d00a      	beq.n	8009c78 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x8c>
    DeviceInstance=( (DeviceInstance & ~0xF8) | ((_DeviceInstanceUpper&0x1f)<<3) );
 8009c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	b25a      	sxtb	r2, r3
 8009c6c:	78bb      	ldrb	r3, [r7, #2]
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	b25b      	sxtb	r3, r3
 8009c72:	4313      	orrs	r3, r2
 8009c74:	b25b      	sxtb	r3, r3
 8009c76:	73fb      	strb	r3, [r7, #15]
  }

  if ( Devices[iDev].DeviceInformation.GetDeviceInstance()!=DeviceInstance) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fa55 	bl	8008138 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	461a      	mov	r2, r3
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	4293      	cmp	r3, r2
 8009c96:	bf14      	ite	ne
 8009c98:	2301      	movne	r3, #1
 8009c9a:	2300      	moveq	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d010      	beq.n	8009cc4 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0xd8>
    Devices[iDev].DeviceInformation.SetDeviceInstance(DeviceInstance);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69da      	ldr	r2, [r3, #28]
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f7fe fa2f 	bl	800811c <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
    DeviceInformationChanged=true;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	769a      	strb	r2, [r3, #26]
  }

  if (_SystemInstance!=0xff && Devices[iDev].DeviceInformation.GetSystemInstance()!=_SystemInstance) {
 8009cc4:	787b      	ldrb	r3, [r7, #1]
 8009cc6:	2bff      	cmp	r3, #255	; 0xff
 8009cc8:	d011      	beq.n	8009cee <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x102>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	69da      	ldr	r2, [r3, #28]
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009cd4:	fb01 f303 	mul.w	r3, r1, r3
 8009cd8:	4413      	add	r3, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fb f930 	bl	8004f40 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	787b      	ldrb	r3, [r7, #1]
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d001      	beq.n	8009cee <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x102>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x104>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d010      	beq.n	8009d16 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x12a>
    Devices[iDev].DeviceInformation.SetSystemInstance(_SystemInstance);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	69da      	ldr	r2, [r3, #28]
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009cfe:	fb01 f303 	mul.w	r3, r1, r3
 8009d02:	4413      	add	r3, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	787b      	ldrb	r3, [r7, #1]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fe fa59 	bl	80081c2 <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>
    DeviceInformationChanged=true;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	769a      	strb	r2, [r3, #26]
  }

  // Send delayed. Had problems with some devices with too fast response.
  if ( IsReadyToSend() ) SendIsoAddressClaim(0xff,iDev,2);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7fe fc6b 	bl	80085f2 <_ZNK9tNMEA200013IsReadyToSendEv>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x146>
 8009d22:	2302      	movs	r3, #2
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	21ff      	movs	r1, #255	; 0xff
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f002 fe85 	bl	800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 8009d2e:	e000      	b.n	8009d32 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x146>
  if ( !IsValidDevice(iDev) ) return;
 8009d30:	bf00      	nop
}
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>:
void tNMEA2000::ExtendFastPacketMessages(const unsigned long *_FastPacketMessages) {
  FastPacketMessages[1]=_FastPacketMessages;
}

//*****************************************************************************
void tNMEA2000::ExtendTransmitMessages(const unsigned long *_Messages, int iDev) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7fe fc3e 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f083 0301 	eor.w	r3, r3, #1
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10d      	bne.n	8009d74 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3c>
  InitDevices();
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff f969 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].TransmitMessages=_Messages;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	69da      	ldr	r2, [r3, #28]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009d68:	fb01 f303 	mul.w	r3, r1, r3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24
 8009d72:	e000      	b.n	8009d76 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3e>
  if ( !IsValidDevice(iDev) ) return;
 8009d74:	bf00      	nop
}
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>:
  InitDevices();
  Devices[iDev].ReceiveMessages=_Messages;
}

//*****************************************************************************
void tNMEA2000::SetMode(tN2kMode _N2kMode, uint8_t _N2kSource) {
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	70bb      	strb	r3, [r7, #2]
  InitDevices();
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff f94f 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>
  N2kMode=_N2kMode;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	78fa      	ldrb	r2, [r7, #3]
 8009d96:	715a      	strb	r2, [r3, #5]
  for (int i=0; i<DeviceCount; i++) {
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	da1d      	bge.n	8009de2 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x66>
    Devices[i].N2kSource=_N2kSource+i;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	b2d9      	uxtb	r1, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69da      	ldr	r2, [r3, #28]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8009db4:	fb00 f303 	mul.w	r3, r0, r3
 8009db8:	4413      	add	r3, r2
 8009dba:	78ba      	ldrb	r2, [r7, #2]
 8009dbc:	440a      	add	r2, r1
 8009dbe:	b2d2      	uxtb	r2, r2
 8009dc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    Devices[i].UpdateAddressClaimEndSource();
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009dce:	fb01 f303 	mul.w	r3, r1, r3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe fb24 	bl	8008422 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
  for (int i=0; i<DeviceCount; i++) {
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e7dc      	b.n	8009d9c <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x20>
  }
  AddressChanged=false;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	765a      	strb	r2, [r3, #25]
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <_ZN9tNMEA200019InitCANFrameBuffersEv>:

//*****************************************************************************
void tNMEA2000::InitCANFrameBuffers() {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
    if ( CANSendFrameBuf==0 && !IsInitialized() ) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe fb5f 	bl	80084c4 <_ZN9tNMEA200013IsInitializedEv>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f083 0301 	eor.w	r3, r3, #1
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x28>
 8009e16:	2300      	movs	r3, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01d      	beq.n	8009e58 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x68>
      if ( MaxCANSendFrames>0 ) CANSendFrameBuf = new tCANSendFrame[MaxCANSendFrames];
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d010      	beq.n	8009e48 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x58>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e30:	d201      	bcs.n	8009e36 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x46>
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	e001      	b.n	8009e3a <_ZN9tNMEA200019InitCANFrameBuffersEv+0x4a>
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f006 fb48 	bl	80104d0 <_Znaj>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	64da      	str	r2, [r3, #76]	; 0x4c
      N2kDbg("Initialize frame buffer. Size: "); N2kDbg(MaxCANSendFrames); N2kDbg(", address:"); N2kDbgln((uint32_t)CANSendFrameBuf);
      CANSendFrameBufferWrite=0;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      CANSendFrameBufferRead=0;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    }

    // Receive buffer has sense only with interrupt handling. So it must be handled on inherited class.
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <_ZN9tNMEA20004OpenEv>:

//*****************************************************************************
bool tNMEA2000::Open() {
 8009e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e62:	b089      	sub	sp, #36	; 0x24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  if ( OpenState==os_Open ) return true;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	7e1b      	ldrb	r3, [r3, #24]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d101      	bne.n	8009e74 <_ZN9tNMEA20004OpenEv+0x14>
 8009e70:	2301      	movs	r3, #1
 8009e72:	e143      	b.n	800a0fc <_ZN9tNMEA20004OpenEv+0x29c>

  if ( OpenState==os_None ) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7e1b      	ldrb	r3, [r3, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f040 80a2 	bne.w	8009fc2 <_ZN9tNMEA20004OpenEv+0x162>
    InitCANFrameBuffers();
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	330c      	adds	r3, #12
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	4798      	blx	r3
    InitDevices();
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff f8d0 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>

    if ( N2kCANMsgBuf==0 ) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f040 8091 	bne.w	8009fbc <_ZN9tNMEA20004OpenEv+0x15c>
      if ( MaxN2kCANMsgs==0 ) MaxN2kCANMsgs=5;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <_ZN9tNMEA20004OpenEv+0x4c>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      N2kCANMsgBuf = new tN2kCANMsg[MaxN2kCANMsgs];
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009eb2:	461c      	mov	r4, r3
 8009eb4:	4b93      	ldr	r3, [pc, #588]	; (800a104 <_ZN9tNMEA20004OpenEv+0x2a4>)
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	d804      	bhi.n	8009ec4 <_ZN9tNMEA20004OpenEv+0x64>
 8009eba:	4623      	mov	r3, r4
 8009ebc:	019b      	lsls	r3, r3, #6
 8009ebe:	4423      	add	r3, r4
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	e001      	b.n	8009ec8 <_ZN9tNMEA20004OpenEv+0x68>
 8009ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f006 fb01 	bl	80104d0 <_Znaj>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	461e      	mov	r6, r3
 8009ed2:	4635      	mov	r5, r6
 8009ed4:	1e63      	subs	r3, r4, #1
 8009ed6:	461c      	mov	r4, r3
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	db06      	blt.n	8009eea <_ZN9tNMEA20004OpenEv+0x8a>
 8009edc:	4628      	mov	r0, r5
 8009ede:	f7fd ff9e 	bl	8007e1e <_ZN10tN2kCANMsgC1Ev>
 8009ee2:	f505 7582 	add.w	r5, r5, #260	; 0x104
 8009ee6:	3c01      	subs	r4, #1
 8009ee8:	e7f6      	b.n	8009ed8 <_ZN9tNMEA20004OpenEv+0x78>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	645e      	str	r6, [r3, #68]	; 0x44
      for (int i=0; i<MaxN2kCANMsgs; i++) N2kCANMsgBuf[i].FreeMessage();
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009ef8:	461a      	mov	r2, r3
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4293      	cmp	r3, r2
 8009efe:	da0e      	bge.n	8009f1e <_ZN9tNMEA20004OpenEv+0xbe>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	4613      	mov	r3, r2
 8009f08:	019b      	lsls	r3, r3, #6
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	440b      	add	r3, r1
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fd ffb1 	bl	8007e78 <_ZN10tN2kCANMsg11FreeMessageEv>
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	e7e9      	b.n	8009ef2 <_ZN9tNMEA20004OpenEv+0x92>

      #if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
      // On first open try add also default group function handlers
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN60928(this)); // NAME handler
 8009f1e:	2014      	movs	r0, #20
 8009f20:	f006 fac5 	bl	80104ae <_Znwj>
 8009f24:	4603      	mov	r3, r0
 8009f26:	461c      	mov	r4, r3
 8009f28:	6879      	ldr	r1, [r7, #4]
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7fe fc72 	bl	8008814 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>
 8009f30:	4621      	mov	r1, r4
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f004 fa12 	bl	800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126464(this)); // Rx/Tx list handler
 8009f38:	2014      	movs	r0, #20
 8009f3a:	f006 fab8 	bl	80104ae <_Znwj>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	461c      	mov	r4, r3
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7fe fc7b 	bl	8008840 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f004 fa05 	bl	800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #if !defined(N2K_NO_HEARTBEAT_SUPPORT)
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126993(this)); // Heartbeat handler
 8009f52:	2014      	movs	r0, #20
 8009f54:	f006 faab 	bl	80104ae <_Znwj>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	461c      	mov	r4, r3
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7fe fc84 	bl	800886c <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>
 8009f64:	4621      	mov	r1, r4
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f004 f9f8 	bl	800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126996(this)); // Product information
 8009f6c:	2014      	movs	r0, #20
 8009f6e:	f006 fa9e 	bl	80104ae <_Znwj>
 8009f72:	4603      	mov	r3, r0
 8009f74:	461c      	mov	r4, r3
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7fe fc8f 	bl	800889c <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f004 f9eb 	bl	800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126998(this)); // Configuration information handler
 8009f86:	2014      	movs	r0, #20
 8009f88:	f006 fa91 	bl	80104ae <_Znwj>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461c      	mov	r4, r3
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7fe fc9a 	bl	80088cc <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f004 f9de 	bl	800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandler(this,0)); // Default handler at last
 8009fa0:	2014      	movs	r0, #20
 8009fa2:	f006 fa84 	bl	80104ae <_Znwj>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	461c      	mov	r4, r3
 8009faa:	2200      	movs	r2, #0
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7fa fa3e 	bl	8004430 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f004 f9d0 	bl	800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
    }
    OpenState=os_OpenCAN;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	761a      	strb	r2, [r3, #24]
  }

  if ( OpenState==os_OpenCAN ) {
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7e1b      	ldrb	r3, [r3, #24]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d155      	bne.n	800a076 <_ZN9tNMEA20004OpenEv+0x216>
    if ( !OpenScheduler.IsTime() ) return false;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3314      	adds	r3, #20
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe f845 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f083 0301 	eor.w	r3, r3, #1
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <_ZN9tNMEA20004OpenEv+0x184>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e08b      	b.n	800a0fc <_ZN9tNMEA20004OpenEv+0x29c>
    bool Notify=( (ForwardStream!=0) && (ForwardType==tNMEA2000::fwdt_Text) );
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d005      	beq.n	8009ff8 <_ZN9tNMEA20004OpenEv+0x198>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	799b      	ldrb	r3, [r3, #6]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <_ZN9tNMEA20004OpenEv+0x198>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <_ZN9tNMEA20004OpenEv+0x19a>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	76fb      	strb	r3, [r7, #27]
    if ( (dbMode!=dm_None) || CANOpen() ) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	791b      	ldrb	r3, [r3, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d108      	bne.n	800a016 <_ZN9tNMEA20004OpenEv+0x1b6>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3304      	adds	r3, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	4798      	blx	r3
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <_ZN9tNMEA20004OpenEv+0x1ba>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <_ZN9tNMEA20004OpenEv+0x1bc>
 800a01a:	2300      	movs	r3, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d012      	beq.n	800a046 <_ZN9tNMEA20004OpenEv+0x1e6>
      OpenState=os_WaitOpen;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	761a      	strb	r2, [r3, #24]
      OpenScheduler.FromNow(200);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3314      	adds	r3, #20
 800a02a:	21c8      	movs	r1, #200	; 0xc8
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe f834 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device ready"));
 800a032:	7efb      	ldrb	r3, [r7, #27]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d016      	beq.n	800a066 <_ZN9tNMEA20004OpenEv+0x206>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	4932      	ldr	r1, [pc, #200]	; (800a108 <_ZN9tNMEA20004OpenEv+0x2a8>)
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fd fe48 	bl	8007cd4 <_ZN9N2kStream7printlnEPKc>
 800a044:	e00f      	b.n	800a066 <_ZN9tNMEA20004OpenEv+0x206>
    } else { // Open failed, delay next open
      OpenScheduler.FromNow(1000);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3314      	adds	r3, #20
 800a04a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe f823 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device failed to open"));
 800a054:	7efb      	ldrb	r3, [r7, #27]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <_ZN9tNMEA20004OpenEv+0x206>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	492b      	ldr	r1, [pc, #172]	; (800a10c <_ZN9tNMEA20004OpenEv+0x2ac>)
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd fe37 	bl	8007cd4 <_ZN9N2kStream7printlnEPKc>
    }
    return OpenState==os_WaitOpen;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7e1b      	ldrb	r3, [r3, #24]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	bf0c      	ite	eq
 800a06e:	2301      	moveq	r3, #1
 800a070:	2300      	movne	r3, #0
 800a072:	b2db      	uxtb	r3, r3
 800a074:	e042      	b.n	800a0fc <_ZN9tNMEA20004OpenEv+0x29c>
  }

  // There were problems with some CAN controllers start sending immediately after
  // Initialization so we start sending delayed.
  if ( OpenState==os_WaitOpen && OpenScheduler.IsTime() ) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	7e1b      	ldrb	r3, [r3, #24]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d109      	bne.n	800a092 <_ZN9tNMEA20004OpenEv+0x232>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3314      	adds	r3, #20
 800a082:	4618      	mov	r0, r3
 800a084:	f7fd ffeb 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <_ZN9tNMEA20004OpenEv+0x232>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <_ZN9tNMEA20004OpenEv+0x234>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d018      	beq.n	800a0ca <_ZN9tNMEA20004OpenEv+0x26a>
    OpenState=os_Open;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2203      	movs	r2, #3
 800a09c:	761a      	strb	r2, [r3, #24]
    StartAddressClaim();
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f003 fd32 	bl	800db08 <_ZN9tNMEA200017StartAddressClaimEv>
    tN2kSyncScheduler::SetSyncOffset();
 800a0a4:	f7fd ff90 	bl	8007fc8 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>
    if ( OnOpen!=0 ) OnOpen();
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <_ZN9tNMEA20004OpenEv+0x256>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b4:	4798      	blx	r3
    SetHeartbeatIntervalAndOffset(DefaultHeartbeatInterval,10000); // Init default hearbeat interval and offset.
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ba:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0be:	f64e 2160 	movw	r1, #60000	; 0xea60
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f93c 	bl	800a340 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
 800a0c8:	e011      	b.n	800a0ee <_ZN9tNMEA20004OpenEv+0x28e>
  } else {
    unsigned long canId;
    unsigned char len = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    while ( CANGetFrame(canId,len,buf) );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	681c      	ldr	r4, [r3, #0]
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	f107 0213 	add.w	r2, r7, #19
 800a0de:	f107 0114 	add.w	r1, r7, #20
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	47a0      	blx	r4
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d000      	beq.n	800a0ee <_ZN9tNMEA20004OpenEv+0x28e>
 800a0ec:	e7ef      	b.n	800a0ce <_ZN9tNMEA20004OpenEv+0x26e>
  }

  // For compatibility return true, when final open is waiting.
  return OpenState>=os_WaitOpen;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	7e1b      	ldrb	r3, [r3, #24]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	bf8c      	ite	hi
 800a0f6:	2301      	movhi	r3, #1
 800a0f8:	2300      	movls	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3724      	adds	r7, #36	; 0x24
 800a100:	46bd      	mov	sp, r7
 800a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a104:	007e07e0 	.word	0x007e07e0
 800a108:	08010ac8 	.word	0x08010ac8
 800a10c:	08010adc 	.word	0x08010adc

0800a110 <_Z10CanIdToN2kmRhRmS_S_>:
void tNMEA2000::Restart() {
  StartAddressClaim();
}

//*****************************************************************************
void CanIdToN2k(unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst) {
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
  unsigned char CanIdPF = (unsigned char) (id >> 16);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	0c1b      	lsrs	r3, r3, #16
 800a122:	75fb      	strb	r3, [r7, #23]
  unsigned char CanIdPS = (unsigned char) (id >> 8);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	0a1b      	lsrs	r3, r3, #8
 800a128:	75bb      	strb	r3, [r7, #22]
  unsigned char CanIdDP = (unsigned char) (id >> 24) & 1;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	0e1b      	lsrs	r3, r3, #24
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	757b      	strb	r3, [r7, #21]

    src = (unsigned char) id >> 0;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	701a      	strb	r2, [r3, #0]
    prio = (unsigned char) ((id >> 26) & 0x7);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	0e9b      	lsrs	r3, r3, #26
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f003 0307 	and.w	r3, r3, #7
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	701a      	strb	r2, [r3, #0]

    if (CanIdPF < 240) {
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2bef      	cmp	r3, #239	; 0xef
 800a152:	d80a      	bhi.n	800a16a <_Z10CanIdToN2kmRhRmS_S_+0x5a>
      /* PDU1 format, the PS contains the destination address */
        dst = CanIdPS;
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	7dba      	ldrb	r2, [r7, #22]
 800a158:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8);
 800a15a:	7d7b      	ldrb	r3, [r7, #21]
 800a15c:	041a      	lsls	r2, r3, #16
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	431a      	orrs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]
    } else {
      /* PDU2 format, the destination is implied global and the PGN is extended */
        dst = 0xff;
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
    }
}
 800a168:	e00b      	b.n	800a182 <_Z10CanIdToN2kmRhRmS_S_+0x72>
        dst = 0xff;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	22ff      	movs	r2, #255	; 0xff
 800a16e:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
 800a170:	7d7b      	ldrb	r3, [r7, #21]
 800a172:	041a      	lsls	r2, r3, #16
 800a174:	7dfb      	ldrb	r3, [r7, #23]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	431a      	orrs	r2, r3
 800a17a:	7dbb      	ldrb	r3, [r7, #22]
 800a17c:	431a      	orrs	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	371c      	adds	r7, #28
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr

0800a18c <_Z10N2ktoCanIDhmmh>:

//*****************************************************************************
unsigned long N2ktoCanID(unsigned char priority, unsigned long PGN, unsigned long Source, unsigned char Destination) {
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
 800a196:	461a      	mov	r2, r3
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
 800a19c:	4613      	mov	r3, r2
 800a19e:	73bb      	strb	r3, [r7, #14]
  unsigned char CanIdPF = (unsigned char) (PGN >> 8);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	0a1b      	lsrs	r3, r3, #8
 800a1a4:	75fb      	strb	r3, [r7, #23]

  if (CanIdPF < 240) {  // PDU1 format
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	2bef      	cmp	r3, #239	; 0xef
 800a1aa:	d812      	bhi.n	800a1d2 <_Z10N2ktoCanIDhmmh+0x46>
     if ( (PGN & 0xff) != 0 ) return 0;  // for PDU1 format PGN lowest byte has to be 0 for the destination.
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <_Z10N2ktoCanIDhmmh+0x2c>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	e015      	b.n	800a1e4 <_Z10N2ktoCanIDhmmh+0x58>
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | ((unsigned long)Destination)<<8 | (unsigned long)Source);
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	069b      	lsls	r3, r3, #26
 800a1bc:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	e008      	b.n	800a1e4 <_Z10N2ktoCanIDhmmh+0x58>
  } else { // PDU2 format
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | (unsigned long)Source);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	069b      	lsls	r3, r3, #26
 800a1d6:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4313      	orrs	r3, r2
  }
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	371c      	adds	r7, #28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr

0800a1ee <_ZN9tNMEA200010SendFramesEv>:

//*****************************************************************************
bool tNMEA2000::SendFrames()
{ uint16_t temp;
 800a1ee:	b5b0      	push	{r4, r5, r7, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af02      	add	r7, sp, #8
 800a1f4:	6078      	str	r0, [r7, #4]

  if ( CANSendFrameBuf==0 ) return true; // This can be in case, where inherited class defines own buffering.
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <_ZN9tNMEA200010SendFramesEv+0x14>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e03f      	b.n	800a282 <_ZN9tNMEA200010SendFramesEv+0x94>

  while (CANSendFrameBufferRead!=CANSendFrameBufferWrite) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a20e:	429a      	cmp	r2, r3
 800a210:	d036      	beq.n	800a280 <_ZN9tNMEA200010SendFramesEv+0x92>
    temp = (CANSendFrameBufferRead + 1) % MaxCANSendFrames;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a218:	3301      	adds	r3, #1
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800a220:	fb93 f1f2 	sdiv	r1, r3, r2
 800a224:	fb01 f202 	mul.w	r2, r1, r2
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	81fb      	strh	r3, [r7, #14]
    if ( CANSendFrame(CANSendFrameBuf[temp].id, CANSendFrameBuf[temp].len, CANSendFrameBuf[temp].buf, CANSendFrameBuf[temp].wait_sent) ) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681c      	ldr	r4, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a236:	89fb      	ldrh	r3, [r7, #14]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	4413      	add	r3, r2
 800a23c:	6819      	ldr	r1, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a242:	89fb      	ldrh	r3, [r7, #14]
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	4413      	add	r3, r2
 800a248:	7918      	ldrb	r0, [r3, #4]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a24e:	89fb      	ldrh	r3, [r7, #14]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	4413      	add	r3, r2
 800a254:	1d5d      	adds	r5, r3, #5
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a25a:	89fb      	ldrh	r3, [r7, #14]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	4413      	add	r3, r2
 800a260:	7b5b      	ldrb	r3, [r3, #13]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	462b      	mov	r3, r5
 800a266:	4602      	mov	r2, r0
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	47a0      	blx	r4
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d004      	beq.n	800a27c <_ZN9tNMEA200010SendFramesEv+0x8e>
      CANSendFrameBufferRead=temp;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	89fa      	ldrh	r2, [r7, #14]
 800a276:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800a27a:	e7c2      	b.n	800a202 <_ZN9tNMEA200010SendFramesEv+0x14>
      N2kFrameOutDbgStart("Frame unbuffered "); N2kFrameOutDbgln(CANSendFrameBuf[temp].id);
    } else return false;
 800a27c:	2300      	movs	r3, #0
 800a27e:	e000      	b.n	800a282 <_ZN9tNMEA200010SendFramesEv+0x94>
  }

  return true;
 800a280:	2301      	movs	r3, #1
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bdb0      	pop	{r4, r5, r7, pc}

0800a28a <_ZN9tNMEA20009SendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000::SendFrame(unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent) {
 800a28a:	b590      	push	{r4, r7, lr}
 800a28c:	b089      	sub	sp, #36	; 0x24
 800a28e:	af02      	add	r7, sp, #8
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	603b      	str	r3, [r7, #0]
 800a296:	4613      	mov	r3, r2
 800a298:	71fb      	strb	r3, [r7, #7]

  if ( !SendFrames() || !CANSendFrame(id,len,buf,wait_sent) ) { // If we can not sent frame immediately, add it to buffer
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff ffa7 	bl	800a1ee <_ZN9tNMEA200010SendFramesEv>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f083 0301 	eor.w	r3, r3, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d110      	bne.n	800a2ce <_ZN9tNMEA20009SendFrameEmhPKhb+0x44>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681c      	ldr	r4, [r3, #0]
 800a2b2:	79fa      	ldrb	r2, [r7, #7]
 800a2b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	47a0      	blx	r4
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f083 0301 	eor.w	r3, r3, #1
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <_ZN9tNMEA20009SendFrameEmhPKhb+0x48>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <_ZN9tNMEA20009SendFrameEmhPKhb+0x4a>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02d      	beq.n	800a334 <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
    tCANSendFrame *Frame=GetNextFreeCANSendFrame();
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fa3a 	bl	800a752 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>
 800a2de:	6138      	str	r0, [r7, #16]
    if ( Frame==0 ) {
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <_ZN9tNMEA20009SendFrameEmhPKhb+0x60>
      N2kFrameOutDbgStart("Frame failed "); N2kFrameOutDbgln(id);
      return false;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e025      	b.n	800a336 <_ZN9tNMEA20009SendFrameEmhPKhb+0xac>
    }
    len=N2kMin<unsigned char>(len,8);
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	2108      	movs	r1, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f004 fa30 	bl	800e754 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	71fb      	strb	r3, [r7, #7]
    Frame->id=id;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	601a      	str	r2, [r3, #0]
    Frame->len=len;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	79fa      	ldrb	r2, [r7, #7]
 800a302:	711a      	strb	r2, [r3, #4]
    Frame->wait_sent=wait_sent;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a30a:	735a      	strb	r2, [r3, #13]
    for (int i=0; i<len; i++) Frame->buf[i]=buf[i];
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	429a      	cmp	r2, r3
 800a316:	da0d      	bge.n	800a334 <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4413      	add	r3, r2
 800a31e:	7819      	ldrb	r1, [r3, #0]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	4413      	add	r3, r2
 800a326:	3305      	adds	r3, #5
 800a328:	460a      	mov	r2, r1
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	3301      	adds	r3, #1
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e7ed      	b.n	800a310 <_ZN9tNMEA20009SendFrameEmhPKhb+0x86>
    N2kFrameOutDbgStart("Frame buffered "); N2kFrameOutDbgln(id);
  }

  return true;
 800a334:	2301      	movs	r3, #1
}
 800a336:	4618      	mov	r0, r3
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd90      	pop	{r4, r7, pc}
	...

0800a340 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>:

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
void tNMEA2000::SetHeartbeatIntervalAndOffset(uint32_t interval, uint32_t offset, int iDev) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a354:	d105      	bne.n	800a362 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x22>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a35c:	4293      	cmp	r3, r2
 800a35e:	f000 809e 	beq.w	800a49e <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x15e>
  InitDevices();
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7fe fe64 	bl	8009030 <_ZN9tNMEA200011InitDevicesEv>
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a36e:	617b      	str	r3, [r7, #20]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	429a      	cmp	r2, r3
 800a378:	f280 8092 	bge.w	800a4a0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	db04      	blt.n	800a38c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x4c>
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	429a      	cmp	r2, r3
 800a388:	f2c0 808a 	blt.w	800a4a0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
    if ( interval==0xffffffff ) {
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a392:	d10e      	bne.n	800a3b2 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x72>
      interval=Devices[i].HeartbeatScheduler.GetPeriod();
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a39e:	fb01 f303 	mul.w	r3, r1, r3
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fd fe01 	bl	8007fb0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800a3ae:	60b8      	str	r0, [r7, #8]
 800a3b0:	e006      	b.n	800a3c0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
    } else if (interval==0xfffffffe) { // restore default
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f113 0f02 	cmn.w	r3, #2
 800a3b8:	d102      	bne.n	800a3c0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
      interval=DefaultHeartbeatInterval;
 800a3ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a3be:	60bb      	str	r3, [r7, #8]
    }
    if ( offset==0xffffffff ) offset=Devices[i].HeartbeatScheduler.GetOffset();
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3c6:	d10d      	bne.n	800a3e4 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xa4>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	69da      	ldr	r2, [r3, #28]
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a3d2:	fb01 f303 	mul.w	r3, r1, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fd fddc 	bl	8007f9a <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 800a3e2:	6078      	str	r0, [r7, #4]

    if ( interval==0 ) { // This is for test purposes
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10d      	bne.n	800a406 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xc6>
      Devices[i].HeartbeatScheduler.Disable();
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	69da      	ldr	r2, [r3, #28]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a3f4:	fb01 f303 	mul.w	r3, r1, r3
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fd fd8e 	bl	8007f20 <_ZN17tN2kSyncScheduler7DisableEv>
 800a404:	e047      	b.n	800a496 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
    } else {
      if ( interval>MaxHeartbeatInterval ) interval=MaxHeartbeatInterval;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a27      	ldr	r2, [pc, #156]	; (800a4a8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d901      	bls.n	800a412 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xd2>
 800a40e:	4b26      	ldr	r3, [pc, #152]	; (800a4a8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 800a410:	60bb      	str	r3, [r7, #8]
      if ( interval<1000 ) interval=1000;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a418:	d202      	bcs.n	800a420 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xe0>
 800a41a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a41e:	60bb      	str	r3, [r7, #8]

      bool changed=( Devices[i].HeartbeatScheduler.GetPeriod()!=interval || Devices[i].HeartbeatScheduler.GetOffset()!=offset ); 
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	69da      	ldr	r2, [r3, #28]
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a42a:	fb01 f303 	mul.w	r3, r1, r3
 800a42e:	4413      	add	r3, r2
 800a430:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a434:	4618      	mov	r0, r3
 800a436:	f7fd fdbb 	bl	8007fb0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800a43a:	4602      	mov	r2, r0
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4293      	cmp	r3, r2
 800a440:	d110      	bne.n	800a464 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x124>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	69da      	ldr	r2, [r3, #28]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a44c:	fb01 f303 	mul.w	r3, r1, r3
 800a450:	4413      	add	r3, r2
 800a452:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a456:	4618      	mov	r0, r3
 800a458:	f7fd fd9f 	bl	8007f9a <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 800a45c:	4602      	mov	r2, r0
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4293      	cmp	r3, r2
 800a462:	d001      	beq.n	800a468 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x128>
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x12a>
 800a468:	2300      	movs	r3, #0
 800a46a:	74fb      	strb	r3, [r7, #19]
      if ( changed ) {
 800a46c:	7cfb      	ldrb	r3, [r7, #19]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d011      	beq.n	800a496 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
        Devices[i].HeartbeatScheduler.SetPeriodAndOffset(interval,offset);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	69da      	ldr	r2, [r3, #28]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4413      	add	r3, r2
 800a482:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fd fd6b 	bl	8007f66 <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>
        DeviceInformationChanged=true;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	769a      	strb	r2, [r3, #26]
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	3301      	adds	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
 800a49c:	e768      	b.n	800a370 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x30>
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 800a49e:	bf00      	nop
      }
    }
  }
}
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0009ffd8 	.word	0x0009ffd8

0800a4ac <_ZN9tNMEA200013SendHeartbeatEi>:
void tNMEA2000::SetHeartbeatInterval(unsigned long interval, bool /*SetAsDefault*/, int iDev) {
  SetHeartbeatIntervalAndOffset(interval,0xffffffff,iDev);
}

//*****************************************************************************
void tNMEA2000::SendHeartbeat(int iDev) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b0c4      	sub	sp, #272	; 0x110
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ba:	6018      	str	r0, [r3, #0]
 800a4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c4:	6019      	str	r1, [r3, #0]
  if ( !IsValidDevice(iDev) ) return;
 800a4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ca:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800a4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d6:	6811      	ldr	r1, [r2, #0]
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	f7fe f875 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f083 0301 	eor.w	r3, r3, #1
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d133      	bne.n	800a552 <_ZN9tNMEA200013SendHeartbeatEi+0xa6>
  tN2kMsg N2kMsg;
 800a4ea:	f107 000c 	add.w	r0, r7, #12
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	2206      	movs	r2, #6
 800a4f6:	210f      	movs	r1, #15
 800a4f8:	f7fc fb3a 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
  SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),0xff);
 800a4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69da      	ldr	r2, [r3, #28]
 800a508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a520:	4618      	mov	r0, r3
 800a522:	f7fd fd45 	bl	8007fb0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800a526:	4601      	mov	r1, r0
 800a528:	f107 030c 	add.w	r3, r7, #12
 800a52c:	22ff      	movs	r2, #255	; 0xff
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe f95e 	bl	80087f0 <_Z12SetHeartbeatR7tN2kMsgmh>
  SendMsg(N2kMsg,iDev);
 800a534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a538:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800a53c:	f107 010c 	add.w	r1, r7, #12
 800a540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a548:	6812      	ldr	r2, [r2, #0]
 800a54a:	6818      	ldr	r0, [r3, #0]
 800a54c:	f000 f996 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800a550:	e000      	b.n	800a554 <_ZN9tNMEA200013SendHeartbeatEi+0xa8>
  if ( !IsValidDevice(iDev) ) return;
 800a552:	bf00      	nop
}
 800a554:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <_ZN9tNMEA200013SendHeartbeatEb>:

//*****************************************************************************
void tNMEA2000::SendHeartbeat(bool force) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b0c4      	sub	sp, #272	; 0x110
 800a560:	af02      	add	r7, sp, #8
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a56a:	6018      	str	r0, [r3, #0]
 800a56c:	460a      	mov	r2, r1
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800a576:	701a      	strb	r2, [r3, #0]
  if ( !IsActiveNode() ) return;
 800a578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	f7fe f80d 	bl	80085a0 <_ZN9tNMEA200012IsActiveNodeEv>
 800a586:	4603      	mov	r3, r0
 800a588:	f083 0301 	eor.w	r3, r3, #1
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f040 80da 	bne.w	800a748 <_ZN9tNMEA200013SendHeartbeatEb+0x1ec>

  for (int iDev=0; iDev<DeviceCount; iDev++) {
 800a594:	2300      	movs	r3, #0
 800a596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	f280 80cd 	bge.w	800a74a <_ZN9tNMEA200013SendHeartbeatEb+0x1ee>
    if ( !IsAddressClaimStarted(iDev) ) {
 800a5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f003 facb 	bl	800db58 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f083 0301 	eor.w	r3, r3, #1
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 80b6 	beq.w	800a73c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
      if ( force || Devices[iDev].HeartbeatScheduler.IsTime() ) {
 800a5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d4:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d114      	bne.n	800a608 <_ZN9tNMEA200013SendHeartbeatEb+0xac>
 800a5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	69da      	ldr	r2, [r3, #28]
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fd fc9f 	bl	8007f40 <_ZN17tN2kSyncScheduler6IsTimeEv>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <_ZN9tNMEA200013SendHeartbeatEb+0xb0>
 800a608:	2301      	movs	r3, #1
 800a60a:	e000      	b.n	800a60e <_ZN9tNMEA200013SendHeartbeatEb+0xb2>
 800a60c:	2300      	movs	r3, #0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 8094 	beq.w	800a73c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
        Devices[iDev].HeartbeatScheduler.UpdateNextTime();
 800a614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69da      	ldr	r2, [r3, #28]
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a624:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a628:	fb01 f303 	mul.w	r3, r1, r3
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a632:	4618      	mov	r0, r3
 800a634:	f7f6 fd6e 	bl	8001114 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
        tN2kMsg N2kMsg;
 800a638:	f107 0008 	add.w	r0, r7, #8
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	2206      	movs	r2, #6
 800a644:	210f      	movs	r1, #15
 800a646:	f7fc fa93 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
        SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),force?0xff:Devices[iDev].HeartbeatSequence);
 800a64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	69da      	ldr	r2, [r3, #28]
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a65e:	fb01 f303 	mul.w	r3, r1, r3
 800a662:	4413      	add	r3, r2
 800a664:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fd fca1 	bl	8007fb0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800a66e:	4601      	mov	r1, r0
 800a670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a674:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <_ZN9tNMEA200013SendHeartbeatEb+0x126>
 800a67e:	23ff      	movs	r3, #255	; 0xff
 800a680:	e00e      	b.n	800a6a0 <_ZN9tNMEA200013SendHeartbeatEb+0x144>
 800a682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	69da      	ldr	r2, [r3, #28]
 800a68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a692:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800a696:	fb00 f303 	mul.w	r3, r0, r3
 800a69a:	4413      	add	r3, r2
 800a69c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a6a0:	f107 0008 	add.w	r0, r7, #8
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f7fe f8a3 	bl	80087f0 <_Z12SetHeartbeatR7tN2kMsgmh>
        SendMsg(N2kMsg,iDev);
 800a6aa:	f107 0108 	add.w	r1, r7, #8
 800a6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6b6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	f000 f8de 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
        if ( !force ) {
 800a6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c4:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	f083 0301 	eor.w	r3, r3, #1
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d033      	beq.n	800a73c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
          Devices[iDev].HeartbeatSequence++;
 800a6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a6e8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 800a6f2:	3201      	adds	r2, #1
 800a6f4:	b2d2      	uxtb	r2, r2
 800a6f6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
          if ( Devices[iDev].HeartbeatSequence>252 ) Devices[iDev].HeartbeatSequence=0;
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69da      	ldr	r2, [r3, #28]
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a70e:	fb01 f303 	mul.w	r3, r1, r3
 800a712:	4413      	add	r3, r2
 800a714:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a718:	2bfc      	cmp	r3, #252	; 0xfc
 800a71a:	d90f      	bls.n	800a73c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
 800a71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a730:	fb01 f303 	mul.w	r3, r1, r3
 800a734:	4413      	add	r3, r2
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  for (int iDev=0; iDev<DeviceCount; iDev++) {
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a740:	3301      	adds	r3, #1
 800a742:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a746:	e728      	b.n	800a59a <_ZN9tNMEA200013SendHeartbeatEb+0x3e>
  if ( !IsActiveNode() ) return;
 800a748:	bf00      	nop
        }
      }
    }
  }
}
 800a74a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>:
#endif

//*****************************************************************************
tNMEA2000::tCANSendFrame *tNMEA2000::GetNextFreeCANSendFrame() {
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  if (CANSendFrameBuf==0) return 0;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x14>
 800a762:	2300      	movs	r3, #0
 800a764:	e01f      	b.n	800a7a6 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>

  uint16_t temp = (CANSendFrameBufferWrite + 1) % MaxCANSendFrames;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a76c:	3301      	adds	r3, #1
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800a774:	fb93 f1f2 	sdiv	r1, r3, r2
 800a778:	fb01 f202 	mul.w	r2, r1, r2
 800a77c:	1a9b      	subs	r3, r3, r2
 800a77e:	81fb      	strh	r3, [r7, #14]

  if (temp != CANSendFrameBufferRead) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a786:	89fa      	ldrh	r2, [r7, #14]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d00b      	beq.n	800a7a4 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x52>
    CANSendFrameBufferWrite = temp;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	89fa      	ldrh	r2, [r7, #14]
 800a790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    return &(CANSendFrameBuf[CANSendFrameBufferWrite]);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a79e:	011b      	lsls	r3, r3, #4
 800a7a0:	4413      	add	r3, r2
 800a7a2:	e000      	b.n	800a7a6 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>
  } else {
    return 0;
 800a7a4:	2300      	movs	r3, #0
  }
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bc80      	pop	{r7}
 800a7ae:	4770      	bx	lr

0800a7b0 <_ZN9tNMEA200022SendPendingInformationEv>:

//*****************************************************************************
void tNMEA2000::SendPendingInformation() {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++ ) {
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	da56      	bge.n	800a874 <_ZN9tNMEA200022SendPendingInformationEv+0xc4>
    if (  Devices[i].HasPendingInformation ) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69da      	ldr	r2, [r3, #28]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a7d0:	fb01 f303 	mul.w	r3, r1, r3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d046      	beq.n	800a86c <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
      #if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      SendPendingTPMessage(i);
 800a7de:	68f9      	ldr	r1, [r7, #12]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fe37 	bl	800c454 <_ZN9tNMEA200020SendPendingTPMessageEi>
      #endif
      if ( Devices[i].QueryPendingIsoAddressClaim() ) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69da      	ldr	r2, [r3, #28]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a7f0:	fb01 f303 	mul.w	r3, r1, r3
 800a7f4:	4413      	add	r3, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd fd85 	bl	8008306 <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d010      	beq.n	800a824 <_ZN9tNMEA200022SendPendingInformationEv+0x74>
        SendIsoAddressClaim(0xff,i);
 800a802:	2300      	movs	r3, #0
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	21ff      	movs	r1, #255	; 0xff
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f002 f915 	bl	800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        Devices[i].ClearPendingIsoAddressClaim();
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69da      	ldr	r2, [r3, #28]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a818:	fb01 f303 	mul.w	r3, r1, r3
 800a81c:	4413      	add	r3, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fd fd7f 	bl	8008322 <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>
      }
      if ( Devices[i].QueryPendingProductInformation() ) SendProductInformation(i);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	69da      	ldr	r2, [r3, #28]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a82e:	fb01 f303 	mul.w	r3, r1, r3
 800a832:	4413      	add	r3, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd fdac 	bl	8008392 <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <_ZN9tNMEA200022SendPendingInformationEv+0x98>
 800a840:	68f9      	ldr	r1, [r7, #12]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f002 fcb0 	bl	800d1a8 <_ZN9tNMEA200022SendProductInformationEi>
      if ( Devices[i].QueryPendingConfigurationInformation() ) SendConfigurationInformation(i);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	69da      	ldr	r2, [r3, #28]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a852:	fb01 f303 	mul.w	r3, r1, r3
 800a856:	4413      	add	r3, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fd fdd4 	bl	8008406 <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
 800a864:	68f9      	ldr	r1, [r7, #12]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f002 fe36 	bl	800d4d8 <_ZN9tNMEA200028SendConfigurationInformationEi>
  for (int i=0; i<DeviceCount; i++ ) {
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3301      	adds	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	e7a3      	b.n	800a7bc <_ZN9tNMEA200022SendPendingInformationEv+0xc>
    }
  }
}
 800a874:	bf00      	nop
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>:

//*****************************************************************************
// Sends message to N2k bus
//
bool tNMEA2000::SendMsg(const tN2kMsg &N2kMsg, int DeviceIndex) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b090      	sub	sp, #64	; 0x40
 800a880:	af02      	add	r7, sp, #8
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  if ( dbMode==dm_None ) {
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	791b      	ldrb	r3, [r3, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d117      	bne.n	800a8c0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
    if ( OpenState!=os_Open ) {
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	7e1b      	ldrb	r3, [r3, #24]
 800a894:	2b03      	cmp	r3, #3
 800a896:	d013      	beq.n	800a8c0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
      if ( !(Open() && OpenState==os_Open) ) return false;  // Can not do much
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff fae1 	bl	8009e60 <_ZN9tNMEA20004OpenEv>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f083 0301 	eor.w	r3, r3, #1
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x36>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	7e1b      	ldrb	r3, [r3, #24]
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d001      	beq.n	800a8b6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e1b0      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
    }
  }

  bool result=false;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if ( DeviceIndex>=DeviceCount) return result;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	db02      	blt.n	800a8d6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x5a>
 800a8d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8d4:	e1a5      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
  N2kMsg.CheckDestination();
 800a8d6:	68b8      	ldr	r0, [r7, #8]
 800a8d8:	f7fd fa90 	bl	8007dfc <_ZNK7tN2kMsg16CheckDestinationEv>
  if (DeviceIndex>=0) { N2kMsg.ForceSource(Devices[DeviceIndex].N2kSource); } else { DeviceIndex=0; }
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	db0e      	blt.n	800a900 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x84>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	69da      	ldr	r2, [r3, #28]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	68b8      	ldr	r0, [r7, #8]
 800a8fa:	f7fd fa71 	bl	8007de0 <_ZNK7tN2kMsg11ForceSourceEh>
 800a8fe:	e001      	b.n	800a904 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x88>
 800a900:	2300      	movs	r3, #0
 800a902:	607b      	str	r3, [r7, #4]

  if ( N2kMsg.Source>N2kMaxCanBusAddress && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false; // CAN bus address range is 0-251. Anyway allow ISO address claim mgs.
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	7b1b      	ldrb	r3, [r3, #12]
 800a908:	2bfb      	cmp	r3, #251	; 0xfb
 800a90a:	d906      	bls.n	800a91a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9e>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800a914:	d001      	beq.n	800a91a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9e>
 800a916:	2300      	movs	r3, #0
 800a918:	e183      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  unsigned long canId=N2ktoCanID(N2kMsg.Priority,N2kMsg.PGN,N2kMsg.Source, N2kMsg.Destination);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	7918      	ldrb	r0, [r3, #4]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	6899      	ldr	r1, [r3, #8]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	7b1b      	ldrb	r3, [r3, #12]
 800a926:	461a      	mov	r2, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	7b5b      	ldrb	r3, [r3, #13]
 800a92c:	f7ff fc2e 	bl	800a18c <_Z10N2ktoCanIDhmmh>
 800a930:	6238      	str	r0, [r7, #32]

  if ( canId==0 ) { // PGN validity - N2ktoCanID returns 0 for invalid PGN
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xc0>
//    if (ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("Invalid PGN ")); ForwardStream->println(N2kMsg.PGN); }
    return false;
 800a938:	2300      	movs	r3, #0
 800a93a:	e172      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
  }

  if (N2kMode==N2km_ListenOnly) return false; // Do not send anything on listen only mode
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	795b      	ldrb	r3, [r3, #5]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xcc>
 800a944:	2300      	movs	r3, #0
 800a946:	e16c      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  if (N2kMsg.PGN==0) return false;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xd8>
 800a950:	2300      	movs	r3, #0
 800a952:	e166      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  switch (dbMode) {
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	791b      	ldrb	r3, [r3, #4]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f000 8155 	beq.w	800ac08 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x38c>
 800a95e:	2b02      	cmp	r3, #2
 800a960:	f300 815d 	bgt.w	800ac1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d003      	beq.n	800a970 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xf4>
 800a968:	2b01      	cmp	r3, #1
 800a96a:	f000 8142 	beq.w	800abf2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x376>
 800a96e:	e156      	b.n	800ac1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
    case dm_None:
      N2kMsgDbgStart("Send PGN:"); N2kMsgDbgln(N2kMsg.PGN);
      N2kMsgDbgStart(" - can ID:"); N2kMsgDbgln(canId);
      if ( IsAddressClaimStarted(DeviceIndex) && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false;
 800a970:	6879      	ldr	r1, [r7, #4]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f003 f8f0 	bl	800db58 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d006      	beq.n	800a98c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800a986:	d001      	beq.n	800a98c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x112>
 800a98c:	2300      	movs	r3, #0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x11a>
 800a992:	2300      	movs	r3, #0
 800a994:	e145      	b.n	800ac22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

      if (N2kMsg.DataLen<=8 && !IsFastPacket(N2kMsg) ) { // We can send single frame
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	dc0b      	bgt.n	800a9b6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 800a99e:	68b9      	ldr	r1, [r7, #8]
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f9b9 	bl	800ad18 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f083 0301 	eor.w	r3, r3, #1
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13c>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d034      	beq.n	800aa26 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1aa>
          DbgPrintBuf(N2kMsg.DataLen, N2kMsg.Data,true);
          result=SendFrame(canId, N2kMsg.DataLen, N2kMsg.Data,false);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	3314      	adds	r3, #20
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	9100      	str	r1, [sp, #0]
 800a9ca:	6a39      	ldr	r1, [r7, #32]
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff fc5c 	bl	800a28a <_ZN9tNMEA20009SendFrameEmhPKhb>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN); ForwardStream->println(F(" send failed")); }
 800a9d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9dc:	f083 0301 	eor.w	r3, r3, #1
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 80fa 	beq.w	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 80f5 	beq.w	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	799b      	ldrb	r3, [r3, #6]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	f040 80f0 	bne.w	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	498a      	ldr	r1, [pc, #552]	; (800ac2c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fd f909 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	68d8      	ldr	r0, [r3, #12]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	220a      	movs	r2, #10
 800aa12:	4619      	mov	r1, r3
 800aa14:	f7fd f91e 	bl	8007c54 <_ZN9N2kStream5printEih>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	4984      	ldr	r1, [pc, #528]	; (800ac30 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fd f958 	bl	8007cd4 <_ZN9N2kStream7printlnEPKc>
 800aa24:	e0da      	b.n	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
          N2kPrintFreeMemory("SendMsg, single frame");
      } else { // Send it as fast packet in multiple frames
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
        if ( N2kMsg.IsTPMessage() ) {
 800aa26:	68b8      	ldr	r0, [r7, #8]
 800aa28:	f7fa fa12 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d008      	beq.n	800aa44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1c8>
          result=StartSendTPMessage(N2kMsg,DeviceIndex);
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f001 fc67 	bl	800c30a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aa42:	e0cb      	b.n	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
        } else
#endif
        {
          unsigned char temp[8]; // {0,0,0,0,0,0,0,0};
          int cur=0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	633b      	str	r3, [r7, #48]	; 0x30
          int frames=(N2kMsg.DataLen>6 ? (N2kMsg.DataLen-6-1)/7+1+1 : 1 );
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	2b06      	cmp	r3, #6
 800aa4e:	dd0b      	ble.n	800aa68 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ec>
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	3b07      	subs	r3, #7
 800aa56:	4a77      	ldr	r2, [pc, #476]	; (800ac34 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b8>)
 800aa58:	fb82 1203 	smull	r1, r2, r2, r3
 800aa5c:	441a      	add	r2, r3
 800aa5e:	1092      	asrs	r2, r2, #2
 800aa60:	17db      	asrs	r3, r3, #31
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	3302      	adds	r3, #2
 800aa66:	e000      	b.n	800aa6a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ee>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	61fb      	str	r3, [r7, #28]
          int Order=GetSequenceCounter(N2kMsg.PGN,DeviceIndex)<<5;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	4619      	mov	r1, r3
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7fe fca9 	bl	80093cc <_ZN9tNMEA200018GetSequenceCounterEmi>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	015b      	lsls	r3, r3, #5
 800aa7e:	61bb      	str	r3, [r7, #24]
          result=true;
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          for (int i = 0; i<frames && result; i++) {
 800aa86:	2300      	movs	r3, #0
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	f280 80a4 	bge.w	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800aa94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa98:	f083 0301 	eor.w	r3, r3, #1
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f040 809c 	bne.w	800abdc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
              temp[0] = i|Order; //frame counter
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	b25a      	sxtb	r2, r3
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	b25b      	sxtb	r3, r3
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	743b      	strb	r3, [r7, #16]
              if (i==0) {
 800aab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d11a      	bne.n	800aaf0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x274>
                  temp[1] = N2kMsg.DataLen; //total bytes in fast packet
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	747b      	strb	r3, [r7, #17]
                  //send the first 6 bytes
                  for (int j = 2; j<8; j++) {
 800aac2:	2302      	movs	r3, #2
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	2b07      	cmp	r3, #7
 800aaca:	dc3a      	bgt.n	800ab42 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c6>
                       temp[j]=N2kMsg.Data[cur];
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	4413      	add	r3, r2
 800aad2:	3314      	adds	r3, #20
 800aad4:	7819      	ldrb	r1, [r3, #0]
 800aad6:	f107 0210 	add.w	r2, r7, #16
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	4413      	add	r3, r2
 800aade:	460a      	mov	r2, r1
 800aae0:	701a      	strb	r2, [r3, #0]
                       cur++;
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	3301      	adds	r3, #1
 800aae6:	633b      	str	r3, [r7, #48]	; 0x30
                  for (int j = 2; j<8; j++) {
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	3301      	adds	r3, #1
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaee:	e7ea      	b.n	800aac6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x24a>
                   }
                  N2kPrintFreeMemory("SendMsg, fastpacket");
              } else {
                   int j=1;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
                   //send the next 7 data bytes
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	2b07      	cmp	r3, #7
 800aaf8:	dc16      	bgt.n	800ab28 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab00:	429a      	cmp	r2, r3
 800ab02:	da11      	bge.n	800ab28 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
                       temp[j]=N2kMsg.Data[cur];
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	4413      	add	r3, r2
 800ab0a:	3314      	adds	r3, #20
 800ab0c:	7819      	ldrb	r1, [r3, #0]
 800ab0e:	f107 0210 	add.w	r2, r7, #16
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	4413      	add	r3, r2
 800ab16:	460a      	mov	r2, r1
 800ab18:	701a      	strb	r2, [r3, #0]
                       cur++;
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	633b      	str	r3, [r7, #48]	; 0x30
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	3301      	adds	r3, #1
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
 800ab26:	e7e5      	b.n	800aaf4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x278>
                   }
                   for (; j<8; j++) {
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	2b07      	cmp	r3, #7
 800ab2c:	dc09      	bgt.n	800ab42 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c6>
                       temp[j]=0xff;
 800ab2e:	f107 0210 	add.w	r2, r7, #16
 800ab32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab34:	4413      	add	r3, r2
 800ab36:	22ff      	movs	r2, #255	; 0xff
 800ab38:	701a      	strb	r2, [r3, #0]
                   for (; j<8; j++) {
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab40:	e7f2      	b.n	800ab28 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
                   }
              }

              DbgPrintBuf(8,temp,true);
              result=SendFrame(canId, 8, temp, true);
 800ab42:	f107 0310 	add.w	r3, r7, #16
 800ab46:	2201      	movs	r2, #1
 800ab48:	9200      	str	r2, [sp, #0]
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	6a39      	ldr	r1, [r7, #32]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fb9b 	bl	800a28a <_ZN9tNMEA20009SendFrameEmhPKhb>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
              if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) {
 800ab5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab5e:	f083 0301 	eor.w	r3, r3, #1
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d035      	beq.n	800abd4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d031      	beq.n	800abd4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	799b      	ldrb	r3, [r3, #6]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d12d      	bne.n	800abd4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
                ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	492b      	ldr	r1, [pc, #172]	; (800ac2c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fd f84b 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	68d8      	ldr	r0, [r3, #12]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	4619      	mov	r1, r3
 800ab90:	f7fd f860 	bl	8007c54 <_ZN9N2kStream5printEih>
                ForwardStream->print(F(", frame:")); ForwardStream->print(i); ForwardStream->print(F("/")); ForwardStream->print(frames);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4927      	ldr	r1, [pc, #156]	; (800ac38 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3bc>)
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fd f83d 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	220a      	movs	r2, #10
 800aba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fd f853 	bl	8007c54 <_ZN9N2kStream5printEih>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	4922      	ldr	r1, [pc, #136]	; (800ac3c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c0>)
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fd f830 	bl	8007c1a <_ZN9N2kStream5printEPKc>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	220a      	movs	r2, #10
 800abc0:	69f9      	ldr	r1, [r7, #28]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd f846 	bl	8007c54 <_ZN9N2kStream5printEih>
                ForwardStream->println(F(" send failed"));
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	4918      	ldr	r1, [pc, #96]	; (800ac30 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd f880 	bl	8007cd4 <_ZN9N2kStream7printlnEPKc>
          for (int i = 0; i<frames && result; i++) {
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	3301      	adds	r3, #1
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abda:	e756      	b.n	800aa8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x20e>
              }
          }
        }
      };
      if ( ForwardOwnMessages() ) ForwardMessage(N2kMsg);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7fd fcbb 	bl	8008558 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d019      	beq.n	800ac1c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f001 febd 	bl	800c96a <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      break;
 800abf0:	e014      	b.n	800ac1c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
    case dm_ClearText:
      result=true;
 800abf2:	2301      	movs	r3, #1
 800abf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.Print(ForwardStream);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	4619      	mov	r1, r3
 800ac00:	68b8      	ldr	r0, [r7, #8]
 800ac02:	f7fc fc99 	bl	8007538 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 800ac06:	e00a      	b.n	800ac1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
    case dm_Actisense:
      result=true;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.SendInActisenseFormat(ForwardStream);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	4619      	mov	r1, r3
 800ac14:	68b8      	ldr	r0, [r7, #8]
 800ac16:	f7fc fd43 	bl	80076a0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 800ac1a:	e000      	b.n	800ac1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
      break;
 800ac1c:	bf00      	nop
  }

  return result;
 800ac1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3738      	adds	r7, #56	; 0x38
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	08010af8 	.word	0x08010af8
 800ac30:	08010b00 	.word	0x08010b00
 800ac34:	92492493 	.word	0x92492493
 800ac38:	08010b10 	.word	0x08010b10
 800ac3c:	08010b1c 	.word	0x08010b1c

0800ac40 <_ZN9tNMEA200015IsFastPacketPGNEm>:
void tNMEA2000::SetDebugMode(tDebugMode _dbMode) {
  dbMode=_dbMode;
}

//*****************************************************************************
bool tNMEA2000::IsFastPacketPGN(unsigned long PGN) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800ac4a:	6838      	ldr	r0, [r7, #0]
 800ac4c:	f7fd fe82 	bl	8008954 <_Z25IsFastPacketSystemMessagem>
 800ac50:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d115      	bne.n	800ac82 <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800ac56:	6838      	ldr	r0, [r7, #0]
 800ac58:	f7fd ff60 	bl	8008b1c <_Z28IsMandatoryFastPacketMessagem>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10f      	bne.n	800ac82 <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d105      	bne.n	800ac76 <_ZN9tNMEA200015IsFastPacketPGNEm+0x36>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800ac6a:	6838      	ldr	r0, [r7, #0]
 800ac6c:	f7fd ff76 	bl	8008b5c <_Z26IsDefaultFastPacketMessagem>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 800ac76:	6838      	ldr	r0, [r7, #0]
 800ac78:	f7fe f8cc 	bl	8008e14 <_Z30IsProprietaryFastPacketMessagem>
 800ac7c:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <_ZN9tNMEA200015IsFastPacketPGNEm+0x46>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <_ZN9tNMEA200015IsFastPacketPGNEm+0x48>
 800ac86:	2300      	movs	r3, #0
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <_ZN9tNMEA200015IsFastPacketPGNEm+0x50>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e03f      	b.n	800ad10 <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>

  int i;

    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800ac90:	2300      	movs	r3, #0
 800ac92:	72fb      	strb	r3, [r7, #11]
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d839      	bhi.n	800ad0e <_ZN9tNMEA200015IsFastPacketPGNEm+0xce>
      if (FastPacketMessages[igroup]!=0) {
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	330e      	adds	r3, #14
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d02d      	beq.n	800ad06 <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	7afb      	ldrb	r3, [r7, #11]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	330e      	adds	r3, #14
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d00f      	beq.n	800ace8 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	330e      	adds	r3, #14
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e7e2      	b.n	800acae <_ZN9tNMEA200015IsFastPacketPGNEm+0x6e>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 800ace8:	7afb      	ldrb	r3, [r7, #11]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	330e      	adds	r3, #14
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d101      	bne.n	800ad06 <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
         return true;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e004      	b.n	800ad10 <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800ad06:	7afb      	ldrb	r3, [r7, #11]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	72fb      	strb	r3, [r7, #11]
 800ad0c:	e7c2      	b.n	800ac94 <_ZN9tNMEA200015IsFastPacketPGNEm+0x54>
        }
      }
    }

    return false;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>:

//*****************************************************************************
bool tNMEA2000::IsFastPacket(const tN2kMsg &N2kMsg) {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  if (N2kMsg.Priority>=0x80) return false; // Special handling for force to send message as single frame.
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	791b      	ldrb	r3, [r3, #4]
 800ad26:	b25b      	sxtb	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da01      	bge.n	800ad30 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x18>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e007      	b.n	800ad40 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x28>

  return IsFastPacketPGN(N2kMsg.PGN);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff ff82 	bl	800ac40 <_ZN9tNMEA200015IsFastPacketPGNEm>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	bf00      	nop
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>:

//*****************************************************************************
bool tNMEA2000::CheckKnownMessage(unsigned long PGN, bool &SystemMessage, bool &FastPacket) {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	603b      	str	r3, [r7, #0]
  int i;
//    return true;
    FastPacket=false;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
    SystemMessage=false;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	701a      	strb	r2, [r3, #0]
    if ( PGN==0 ) { return false; }  // Unknown
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x24>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e0ce      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check other messages
    if ( SingleFrameMessages[0]==0 && IsDefaultSingleFrameMessage(PGN) ) return true;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d107      	bne.n	800ad84 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 800ad74:	68b8      	ldr	r0, [r7, #8]
 800ad76:	f7fd fe05 	bl	8008984 <_Z27IsDefaultSingleFrameMessagem>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 800ad80:	2301      	movs	r3, #1
 800ad82:	e000      	b.n	800ad86 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3e>
 800ad84:	2300      	movs	r3, #0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x46>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e0bd      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( (FastPacket=IsMandatoryFastPacketMessage(PGN)) ) return true;
 800ad8e:	68b8      	ldr	r0, [r7, #8]
 800ad90:	f7fd fec4 	bl	8008b1c <_Z28IsMandatoryFastPacketMessagem>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x60>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e0b0      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( FastPacketMessages[0]==0 && (FastPacket=IsDefaultFastPacketMessage(PGN))==true ) return true;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10c      	bne.n	800adca <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 800adb0:	68b8      	ldr	r0, [r7, #8]
 800adb2:	f7fd fed3 	bl	8008b5c <_Z26IsDefaultFastPacketMessagem>
 800adb6:	4603      	mov	r3, r0
 800adb8:	461a      	mov	r2, r3
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d101      	bne.n	800adca <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x84>
 800adca:	2300      	movs	r3, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x8c>
 800add0:	2301      	movs	r3, #1
 800add2:	e09a      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check system messages
    if ( IsSingleFrameSystemMessage(PGN) || (FastPacket=IsFastPacketSystemMessage(PGN))==true ) {
 800add4:	68b8      	ldr	r0, [r7, #8]
 800add6:	f7fd fd91 	bl	80088fc <_Z26IsSingleFrameSystemMessagem>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xae>
 800ade0:	68b8      	ldr	r0, [r7, #8]
 800ade2:	f7fd fdb7 	bl	8008954 <_Z25IsFastPacketSystemMessagem>
 800ade6:	4603      	mov	r3, r0
 800ade8:	461a      	mov	r2, r3
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d101      	bne.n	800adfa <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb2>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb4>
 800adfa:	2300      	movs	r3, #0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc2>
      SystemMessage=true;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	701a      	strb	r2, [r3, #0]
      return true;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e07f      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    }

    // Check user defined messages
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	74fb      	strb	r3, [r7, #19]
 800ae0e:	7cfb      	ldrb	r3, [r7, #19]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d872      	bhi.n	800aefa <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1b2>
      if (SingleFrameMessages[igroup]!=0) {
 800ae14:	7cfb      	ldrb	r3, [r7, #19]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	330c      	adds	r3, #12
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d02d      	beq.n	800ae80 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
        for (i=0; pgm_read_dword(&SingleFrameMessages[igroup][i])!=PGN && pgm_read_dword(&SingleFrameMessages[igroup][i])!=0; i++);
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	7cfb      	ldrb	r3, [r7, #19]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d00f      	beq.n	800ae62 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 800ae42:	7cfb      	ldrb	r3, [r7, #19]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	330c      	adds	r3, #12
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	e7e2      	b.n	800ae28 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xe0>
        if (pgm_read_dword(&SingleFrameMessages[igroup][i])==PGN) return true;
 800ae62:	7cfb      	ldrb	r3, [r7, #19]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	330c      	adds	r3, #12
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d101      	bne.n	800ae80 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e044      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
      }

      if (FastPacketMessages[igroup]!=0) {
 800ae80:	7cfb      	ldrb	r3, [r7, #19]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	330e      	adds	r3, #14
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d030      	beq.n	800aef2 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	7cfb      	ldrb	r3, [r7, #19]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	330e      	adds	r3, #14
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d00f      	beq.n	800aece <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 800aeae:	7cfb      	ldrb	r3, [r7, #19]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	330e      	adds	r3, #14
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	3301      	adds	r3, #1
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e7e2      	b.n	800ae94 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x14c>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 800aece:	7cfb      	ldrb	r3, [r7, #19]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	330e      	adds	r3, #14
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d104      	bne.n	800aef2 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
         FastPacket=true;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2201      	movs	r2, #1
 800aeec:	701a      	strb	r2, [r3, #0]
         return true;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e00b      	b.n	800af0a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800aef2:	7cfb      	ldrb	r3, [r7, #19]
 800aef4:	3301      	adds	r3, #1
 800aef6:	74fb      	strb	r3, [r7, #19]
 800aef8:	e789      	b.n	800ae0e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc6>
        }
      }
    }

    FastPacket=IsProprietaryFastPacketMessage(PGN);
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f7fd ff8a 	bl	8008e14 <_Z30IsProprietaryFastPacketMessagem>
 800af00:	4603      	mov	r3, r0
 800af02:	461a      	mov	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	701a      	strb	r2, [r3, #0]
    
    return false;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>:

//*****************************************************************************
void CopyBufToCANMsg(tN2kCANMsg &CANMsg, unsigned char start, unsigned char len, unsigned char *buf) {
 800af12:	b480      	push	{r7}
 800af14:	b087      	sub	sp, #28
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	607b      	str	r3, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	72fb      	strb	r3, [r7, #11]
 800af20:	4613      	mov	r3, r2
 800af22:	72bb      	strb	r3, [r7, #10]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	7abb      	ldrb	r3, [r7, #10]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	bfb4      	ite	lt
 800af30:	2301      	movlt	r3, #1
 800af32:	2300      	movge	r3, #0
 800af34:	b2da      	uxtb	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800af3c:	2bde      	cmp	r3, #222	; 0xde
 800af3e:	bf94      	ite	ls
 800af40:	2301      	movls	r3, #1
 800af42:	2300      	movhi	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	4013      	ands	r3, r2
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d016      	beq.n	800af7c <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x6a>
          CANMsg.N2kMsg.Data[CANMsg.CopiedLen]=buf[j];
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4413      	add	r3, r2
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
 800af5a:	4611      	mov	r1, r2
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	440b      	add	r3, r1
 800af62:	751a      	strb	r2, [r3, #20]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	3301      	adds	r3, #1
 800af68:	617b      	str	r3, [r7, #20]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800af70:	3301      	adds	r3, #1
 800af72:	b2da      	uxtb	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 800af7a:	e7d5      	b.n	800af28 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x16>
        }
}
 800af7c:	bf00      	nop
 800af7e:	371c      	adds	r7, #28
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr

0800af86 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, bool TPMsg, uint8_t &MsgIndex) {
 800af86:	b580      	push	{r7, lr}
 800af88:	b088      	sub	sp, #32
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	4611      	mov	r1, r2
 800af92:	461a      	mov	r2, r3
 800af94:	460b      	mov	r3, r1
 800af96:	71fb      	strb	r3, [r7, #7]
 800af98:	4613      	mov	r3, r2
 800af9a:	71bb      	strb	r3, [r7, #6]
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, uint8_t &MsgIndex) {
#endif
  unsigned long OldestMsgTime,CurTime;
  int OldestIndex;

  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	2200      	movs	r2, #0
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	f7fc fec7 	bl	8007d34 <_Z9N2kMillisv>
 800afa6:	61f8      	str	r0, [r7, #28]
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800afb2:	61bb      	str	r3, [r7, #24]
       MsgIndex<MaxN2kCANMsgs &&
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	781a      	ldrb	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d24f      	bcs.n	800b062 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	4619      	mov	r1, r3
 800afcc:	460b      	mov	r3, r1
 800afce:	019b      	lsls	r3, r3, #6
 800afd0:	440b      	add	r3, r1
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800afda:	f083 0301 	eor.w	r3, r3, #1
 800afde:	b2db      	uxtb	r3, r3
       MsgIndex<MaxN2kCANMsgs &&
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d03e      	beq.n	800b062 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
         ( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	4619      	mov	r1, r3
 800afee:	460b      	mov	r3, r1
 800aff0:	019b      	lsls	r3, r3, #6
 800aff2:	440b      	add	r3, r1
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	689b      	ldr	r3, [r3, #8]
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d12e      	bne.n	800b05e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	4619      	mov	r1, r3
 800b00a:	460b      	mov	r3, r1
 800b00c:	019b      	lsls	r3, r3, #6
 800b00e:	440b      	add	r3, r1
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	7b1b      	ldrb	r3, [r3, #12]
 800b016:	79fa      	ldrb	r2, [r7, #7]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d120      	bne.n	800b05e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	4619      	mov	r1, r3
 800b026:	460b      	mov	r3, r1
 800b028:	019b      	lsls	r3, r3, #6
 800b02a:	440b      	add	r3, r1
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	7b5b      	ldrb	r3, [r3, #13]
 800b032:	79ba      	ldrb	r2, [r7, #6]
 800b034:	429a      	cmp	r2, r3
 800b036:	d112      	bne.n	800b05e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
           && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()==TPMsg
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	4619      	mov	r1, r3
 800b042:	460b      	mov	r3, r1
 800b044:	019b      	lsls	r3, r3, #6
 800b046:	440b      	add	r3, r1
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f9 feff 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 800b052:	4603      	mov	r3, r0
 800b054:	461a      	mov	r2, r3
 800b056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d001      	beq.n	800b062 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       MsgIndex<MaxN2kCANMsgs &&
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xde>
 800b062:	2300      	movs	r3, #0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d029      	beq.n	800b0bc <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x136>
#endif
         )
        );
       MsgIndex++) { // Find free message place
    if ( N2kIsTimeBefore(N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime,OldestMsgTime) ) {
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	4619      	mov	r1, r3
 800b072:	460b      	mov	r3, r1
 800b074:	019b      	lsls	r3, r3, #6
 800b076:	440b      	add	r3, r1
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b080:	69f9      	ldr	r1, [r7, #28]
 800b082:	4618      	mov	r0, r3
 800b084:	f7fc ff1b 	bl	8007ebe <_Z15N2kIsTimeBeforemm>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00f      	beq.n	800b0ae <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x128>
      OldestIndex=MsgIndex;
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	61bb      	str	r3, [r7, #24]
      OldestMsgTime=N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	4619      	mov	r1, r3
 800b09e:	460b      	mov	r3, r1
 800b0a0:	019b      	lsls	r3, r3, #6
 800b0a2:	440b      	add	r3, r1
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0ac:	61fb      	str	r3, [r7, #28]
       MsgIndex++) { // Find free message place
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b0:	781b      	ldrb	r3, [r3, #0]
  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e77b      	b.n	800afb4 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x2e>
    }
  }
  if ( MsgIndex==MaxN2kCANMsgs && N2kHasElapsed(OldestMsgTime,Max_N2kMsgBuf_Time,CurTime) ) {
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d109      	bne.n	800b0de <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	2164      	movs	r1, #100	; 0x64
 800b0ce:	69f8      	ldr	r0, [r7, #28]
 800b0d0:	f7f9 f94e 	bl	8004370 <_Z13N2kHasElapsedmmm>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x15a>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d010      	beq.n	800b106 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x180>
    MsgIndex=OldestIndex; // Use the old one, which has timed out
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	701a      	strb	r2, [r3, #0]
    N2kCANMsgBuf[MsgIndex].FreeMessage();
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	019b      	lsls	r3, r3, #6
 800b0fa:	440b      	add	r3, r1
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	4618      	mov	r0, r3
 800b102:	f7fc feb9 	bl	8007e78 <_ZN10tN2kCANMsg11FreeMessageEv>
  }

}
 800b106:	bf00      	nop
 800b108:	3720      	adds	r7, #32
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <_ZN9tNMEA200012SendTPCM_BAMEi>:

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)

//*****************************************************************************
bool tNMEA2000::SendTPCM_BAM(int iDev) {
 800b110:	b580      	push	{r7, lr}
 800b112:	b0c4      	sub	sp, #272	; 0x110
 800b114:	af02      	add	r7, sp, #8
 800b116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b11e:	6018      	str	r0, [r3, #0]
 800b120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b128:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 800b12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b132:	6818      	ldr	r0, [r3, #0]
 800b134:	f7fd fa34 	bl	80085a0 <_ZN9tNMEA200012IsActiveNodeEv>
 800b138:	4603      	mov	r3, r0
 800b13a:	f083 0301 	eor.w	r3, r3, #1
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <_ZN9tNMEA200012SendTPCM_BAMEi+0x38>
 800b144:	2300      	movs	r3, #0
 800b146:	e0a6      	b.n	800b296 <_ZN9tNMEA200012SendTPCM_BAMEi+0x186>

  tN2kMsg N2kMsg;
 800b148:	f107 0008 	add.w	r0, r7, #8
 800b14c:	2300      	movs	r3, #0
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	2300      	movs	r3, #0
 800b152:	2206      	movs	r2, #6
 800b154:	210f      	movs	r1, #15
 800b156:	f7fb fd0b 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  N2kMsg.Source=Devices[iDev].N2kSource;
 800b15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	69da      	ldr	r2, [r3, #28]
 800b166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b174:	fb01 f303 	mul.w	r3, r1, r3
 800b178:	4413      	add	r3, r2
 800b17a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800b17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b182:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b186:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=0xff;
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 800b194:	f107 0308 	add.w	r3, r7, #8
 800b198:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fb fd19 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800b1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b1aa:	2206      	movs	r2, #6
 800b1ac:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_BAM);
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	2120      	movs	r1, #32
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fb fe4d 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 800b1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69da      	ldr	r2, [r3, #28]
 800b1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	4413      	add	r3, r2
 800b1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 800b1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fb fde6 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f6:	4a2a      	ldr	r2, [pc, #168]	; (800b2a0 <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 800b1f8:	fb82 1203 	smull	r1, r2, r2, r3
 800b1fc:	441a      	add	r2, r3
 800b1fe:	1092      	asrs	r2, r2, #2
 800b200:	17db      	asrs	r3, r3, #31
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	b2d8      	uxtb	r0, r3
 800b206:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b20a:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 800b20c:	fb83 1302 	smull	r1, r3, r3, r2
 800b210:	4413      	add	r3, r2
 800b212:	1099      	asrs	r1, r3, #2
 800b214:	17d3      	asrs	r3, r2, #31
 800b216:	1ac9      	subs	r1, r1, r3
 800b218:	460b      	mov	r3, r1
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	1a5b      	subs	r3, r3, r1
 800b21e:	1ad1      	subs	r1, r2, r3
 800b220:	2900      	cmp	r1, #0
 800b222:	d001      	beq.n	800b228 <_ZN9tNMEA200012SendTPCM_BAMEi+0x118>
 800b224:	2301      	movs	r3, #1
 800b226:	e000      	b.n	800b22a <_ZN9tNMEA200012SendTPCM_BAMEi+0x11a>
 800b228:	2300      	movs	r3, #0
 800b22a:	4403      	add	r3, r0
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f7fb fe0d 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b23a:	f107 0308 	add.w	r3, r7, #8
 800b23e:	21ff      	movs	r1, #255	; 0xff
 800b240:	4618      	mov	r0, r3
 800b242:	f7fb fe07 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	69da      	ldr	r2, [r3, #28]
 800b252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	4413      	add	r3, r2
 800b266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b268:	461a      	mov	r2, r3
 800b26a:	f107 0308 	add.w	r3, r7, #8
 800b26e:	4611      	mov	r1, r2
 800b270:	4618      	mov	r0, r3
 800b272:	f7fb fdb8 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 800b276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800b27e:	f107 0108 	add.w	r1, r7, #8
 800b282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b28a:	6812      	ldr	r2, [r2, #0]
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	f7ff faf5 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800b292:	4603      	mov	r3, r0
 800b294:	bf00      	nop
}
 800b296:	4618      	mov	r0, r3
 800b298:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	92492493 	.word	0x92492493

0800b2a4 <_ZN9tNMEA200012SendTPCM_RTSEi>:

//*****************************************************************************
bool tNMEA2000::SendTPCM_RTS(int iDev) {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b0c4      	sub	sp, #272	; 0x110
 800b2a8:	af02      	add	r7, sp, #8
 800b2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2b2:	6018      	str	r0, [r3, #0]
 800b2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2bc:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 800b2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c6:	6818      	ldr	r0, [r3, #0]
 800b2c8:	f7fd f96a 	bl	80085a0 <_ZN9tNMEA200012IsActiveNodeEv>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f083 0301 	eor.w	r3, r3, #1
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <_ZN9tNMEA200012SendTPCM_RTSEi+0x38>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e0b7      	b.n	800b44c <_ZN9tNMEA200012SendTPCM_RTSEi+0x1a8>

  tN2kMsg N2kMsg;
 800b2dc:	f107 0008 	add.w	r0, r7, #8
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2206      	movs	r2, #6
 800b2e8:	210f      	movs	r1, #15
 800b2ea:	f7fb fc41 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800b2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	69da      	ldr	r2, [r3, #28]
 800b2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b308:	fb01 f303 	mul.w	r3, r1, r3
 800b30c:	4413      	add	r3, r2
 800b30e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800b312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b316:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b31a:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 800b31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69da      	ldr	r2, [r3, #28]
 800b328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b336:	fb01 f303 	mul.w	r3, r1, r3
 800b33a:	4413      	add	r3, r2
 800b33c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b344:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b348:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 800b34a:	f107 0308 	add.w	r3, r7, #8
 800b34e:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800b352:	4618      	mov	r0, r3
 800b354:	f7fb fc3e 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800b358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b360:	2206      	movs	r2, #6
 800b362:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_RTS);
 800b364:	f107 0308 	add.w	r3, r7, #8
 800b368:	2110      	movs	r1, #16
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fb fd72 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 800b370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	69da      	ldr	r2, [r3, #28]
 800b37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b38a:	fb01 f303 	mul.w	r3, r1, r3
 800b38e:	4413      	add	r3, r2
 800b390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b392:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 800b396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	f107 0308 	add.w	r3, r7, #8
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fb fd0b 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 800b3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ac:	4a2a      	ldr	r2, [pc, #168]	; (800b458 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b4>)
 800b3ae:	fb82 1203 	smull	r1, r2, r2, r3
 800b3b2:	441a      	add	r2, r3
 800b3b4:	1092      	asrs	r2, r2, #2
 800b3b6:	17db      	asrs	r3, r3, #31
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	b2d8      	uxtb	r0, r3
 800b3bc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b3c0:	4b25      	ldr	r3, [pc, #148]	; (800b458 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b4>)
 800b3c2:	fb83 1302 	smull	r1, r3, r3, r2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	1099      	asrs	r1, r3, #2
 800b3ca:	17d3      	asrs	r3, r2, #31
 800b3cc:	1ac9      	subs	r1, r1, r3
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	1a5b      	subs	r3, r3, r1
 800b3d4:	1ad1      	subs	r1, r2, r3
 800b3d6:	2900      	cmp	r1, #0
 800b3d8:	d001      	beq.n	800b3de <_ZN9tNMEA200012SendTPCM_RTSEi+0x13a>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e000      	b.n	800b3e0 <_ZN9tNMEA200012SendTPCM_RTSEi+0x13c>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	4403      	add	r3, r0
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	f107 0308 	add.w	r3, r7, #8
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fb fd32 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b3f0:	f107 0308 	add.w	r3, r7, #8
 800b3f4:	21ff      	movs	r1, #255	; 0xff
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fb fd2c 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 800b3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	69da      	ldr	r2, [r3, #28]
 800b408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b416:	fb01 f303 	mul.w	r3, r1, r3
 800b41a:	4413      	add	r3, r2
 800b41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41e:	461a      	mov	r2, r3
 800b420:	f107 0308 	add.w	r3, r7, #8
 800b424:	4611      	mov	r1, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f7fb fcdd 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 800b42c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b430:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800b434:	f107 0108 	add.w	r1, r7, #8
 800b438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	6818      	ldr	r0, [r3, #0]
 800b444:	f7ff fa1a 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800b448:	4603      	mov	r3, r0
 800b44a:	bf00      	nop
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	92492493 	.word	0x92492493

0800b45c <_Z12TPCtsPacketsh>:

unsigned char TPCtsPackets(unsigned char nPackets) { return tNMEA2000::N2kMax<unsigned char>(1,tNMEA2000::N2kMin<unsigned char>(nPackets,TP_MAX_FRAMES)); }
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	71fb      	strb	r3, [r7, #7]
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	2105      	movs	r1, #5
 800b46a:	4618      	mov	r0, r3
 800b46c:	f003 f972 	bl	800e754 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 800b470:	4603      	mov	r3, r0
 800b472:	4619      	mov	r1, r3
 800b474:	2001      	movs	r0, #1
 800b476:	f003 f981 	bl	800e77c <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <_ZN9tNMEA200012SendTPCM_CTSEmhihh>:

//*****************************************************************************
void tNMEA2000::SendTPCM_CTS(unsigned long PGN, unsigned char Destination, int iDev, unsigned char nPackets, unsigned char NextPacketNumber) {
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b0c7      	sub	sp, #284	; 0x11c
 800b488:	af02      	add	r7, sp, #8
 800b48a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800b48e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800b492:	6020      	str	r0, [r4, #0]
 800b494:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800b498:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800b49c:	6001      	str	r1, [r0, #0]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800b4a4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800b4b2:	460a      	mov	r2, r1
 800b4b4:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800b4b6:	f107 0014 	add.w	r0, r7, #20
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2206      	movs	r2, #6
 800b4c2:	210f      	movs	r1, #15
 800b4c4:	f7fb fb54 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800b4c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f7fd f865 	bl	80085a0 <_ZN9tNMEA200012IsActiveNodeEv>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f083 0301 	eor.w	r3, r3, #1
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d164      	bne.n	800b5ac <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x128>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800b4e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	69da      	ldr	r2, [r3, #28]
 800b4ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b4fc:	fb01 f303 	mul.w	r3, r1, r3
 800b500:	4413      	add	r3, r2
 800b502:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b506:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800b50a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b50e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800b520:	4618      	mov	r0, r3
 800b522:	f7fb fb57 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800b526:	2306      	movs	r3, #6
 800b528:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_CTS);
 800b52a:	f107 0314 	add.w	r3, r7, #20
 800b52e:	2111      	movs	r1, #17
 800b530:	4618      	mov	r0, r3
 800b532:	f7fb fc8f 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(TPCtsPackets(nPackets));
 800b536:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff ff8e 	bl	800b45c <_Z12TPCtsPacketsh>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	f107 0314 	add.w	r3, r7, #20
 800b548:	4611      	mov	r1, r2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fb fc82 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NextPacketNumber);
 800b550:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 800b554:	f107 0314 	add.w	r3, r7, #20
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fb fc7a 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b560:	f107 0314 	add.w	r3, r7, #20
 800b564:	21ff      	movs	r1, #255	; 0xff
 800b566:	4618      	mov	r0, r3
 800b568:	f7fb fc74 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b56c:	f107 0314 	add.w	r3, r7, #20
 800b570:	21ff      	movs	r1, #255	; 0xff
 800b572:	4618      	mov	r0, r3
 800b574:	f7fb fc6e 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800b578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	f107 0314 	add.w	r3, r7, #20
 800b586:	4611      	mov	r1, r2
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fb fc2c 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800b58e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b592:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800b596:	f107 0114 	add.w	r1, r7, #20
 800b59a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5a2:	6812      	ldr	r2, [r2, #0]
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	f7ff f969 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800b5aa:	e000      	b.n	800b5ae <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x12a>
  if ( !IsActiveNode() ) return;
 800b5ac:	bf00      	nop
}
 800b5ae:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd90      	pop	{r4, r7, pc}

0800b5b6 <_ZN9tNMEA200015SendTPCM_EndAckEmhith>:

//*****************************************************************************
void tNMEA2000::SendTPCM_EndAck(unsigned long PGN, unsigned char Destination, int iDev, uint16_t nBytes, unsigned char nPackets) {
 800b5b6:	b590      	push	{r4, r7, lr}
 800b5b8:	b0c7      	sub	sp, #284	; 0x11c
 800b5ba:	af02      	add	r7, sp, #8
 800b5bc:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800b5c0:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800b5c4:	6020      	str	r0, [r4, #0]
 800b5c6:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800b5ca:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800b5ce:	6001      	str	r1, [r0, #0]
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800b5d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5e0:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800b5e4:	460a      	mov	r2, r1
 800b5e6:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800b5e8:	f107 0014 	add.w	r0, r7, #20
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2206      	movs	r2, #6
 800b5f4:	210f      	movs	r1, #15
 800b5f6:	f7fb fabb 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800b5fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	f7fc ffcc 	bl	80085a0 <_ZN9tNMEA200012IsActiveNodeEv>
 800b608:	4603      	mov	r3, r0
 800b60a:	f083 0301 	eor.w	r3, r3, #1
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b00      	cmp	r3, #0
 800b612:	d159      	bne.n	800b6c8 <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x112>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800b614:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	69da      	ldr	r2, [r3, #28]
 800b620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b624:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	4413      	add	r3, r2
 800b634:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b638:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800b63c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b640:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800b64a:	f107 0314 	add.w	r3, r7, #20
 800b64e:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800b652:	4618      	mov	r0, r3
 800b654:	f7fb fabe 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800b658:	2306      	movs	r3, #6
 800b65a:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_ACK);
 800b65c:	f107 0314 	add.w	r3, r7, #20
 800b660:	2113      	movs	r1, #19
 800b662:	4618      	mov	r0, r3
 800b664:	f7fb fbf6 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add2ByteUInt(nBytes);
 800b668:	f8b7 2120 	ldrh.w	r2, [r7, #288]	; 0x120
 800b66c:	f107 0314 	add.w	r3, r7, #20
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f7fb fba3 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nPackets);
 800b678:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 800b67c:	f107 0314 	add.w	r3, r7, #20
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7fb fbe6 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b688:	f107 0314 	add.w	r3, r7, #20
 800b68c:	21ff      	movs	r1, #255	; 0xff
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fb fbe0 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800b694:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	f107 0314 	add.w	r3, r7, #20
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fb fb9e 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800b6aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6ae:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800b6b2:	f107 0114 	add.w	r1, r7, #20
 800b6b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6be:	6812      	ldr	r2, [r2, #0]
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	f7ff f8db 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800b6c6:	e000      	b.n	800b6ca <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x114>
  if ( !IsActiveNode() ) return;
 800b6c8:	bf00      	nop
}
 800b6ca:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd90      	pop	{r4, r7, pc}

0800b6d2 <_ZN9tNMEA200014SendTPCM_AbortEmhih>:

//*****************************************************************************
void tNMEA2000::SendTPCM_Abort(unsigned long PGN, unsigned char Destination, int iDev, unsigned char AbortCode) {
 800b6d2:	b590      	push	{r4, r7, lr}
 800b6d4:	b0c7      	sub	sp, #284	; 0x11c
 800b6d6:	af02      	add	r7, sp, #8
 800b6d8:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800b6dc:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800b6e0:	6020      	str	r0, [r4, #0]
 800b6e2:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800b6e6:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800b6ea:	6001      	str	r1, [r0, #0]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800b6f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6fc:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800b700:	460a      	mov	r2, r1
 800b702:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800b704:	f107 0014 	add.w	r0, r7, #20
 800b708:	2300      	movs	r3, #0
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	2300      	movs	r3, #0
 800b70e:	2206      	movs	r2, #6
 800b710:	210f      	movs	r1, #15
 800b712:	f7fb fa2d 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800b716:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	f7fc ff3e 	bl	80085a0 <_ZN9tNMEA200012IsActiveNodeEv>
 800b724:	4603      	mov	r3, r0
 800b726:	f083 0301 	eor.w	r3, r3, #1
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d15d      	bne.n	800b7ec <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11a>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800b730:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69da      	ldr	r2, [r3, #28]
 800b73c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b740:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b74a:	fb01 f303 	mul.w	r3, r1, r3
 800b74e:	4413      	add	r3, r2
 800b750:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b754:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800b758:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b75c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800b766:	f107 0314 	add.w	r3, r7, #20
 800b76a:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fb fa30 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800b774:	2306      	movs	r3, #6
 800b776:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_Abort);
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	21ff      	movs	r1, #255	; 0xff
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fb fb68 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(AbortCode);
 800b784:	f897 2120 	ldrb.w	r2, [r7, #288]	; 0x120
 800b788:	f107 0314 	add.w	r3, r7, #20
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fb fb60 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b794:	f107 0314 	add.w	r3, r7, #20
 800b798:	21ff      	movs	r1, #255	; 0xff
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fb fb5a 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b7a0:	f107 0314 	add.w	r3, r7, #20
 800b7a4:	21ff      	movs	r1, #255	; 0xff
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fb fb54 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	21ff      	movs	r1, #255	; 0xff
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fb fb4e 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800b7b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	f107 0314 	add.w	r3, r7, #20
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fb fb0c 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800b7ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7d2:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800b7d6:	f107 0114 	add.w	r1, r7, #20
 800b7da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7e2:	6812      	ldr	r2, [r2, #0]
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	f7ff f849 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800b7ea:	e000      	b.n	800b7ee <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11c>
  if ( !IsActiveNode() ) return;
 800b7ec:	bf00      	nop
}
 800b7ee:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd90      	pop	{r4, r7, pc}

0800b7f6 <_ZN9tNMEA20008SendTPDTEi>:

//*****************************************************************************
// Caller should take care of not calling this after all has been done.
// Use HasAllTPDTSent for checking.
bool tNMEA2000::SendTPDT(int iDev) {
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b0c6      	sub	sp, #280	; 0x118
 800b7fa:	af02      	add	r7, sp, #8
 800b7fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b800:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b804:	6018      	str	r0, [r3, #0]
 800b806:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b80a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b80e:	6019      	str	r1, [r3, #0]
  tN2kMsg N2kMsg;
 800b810:	f107 000c 	add.w	r0, r7, #12
 800b814:	2300      	movs	r3, #0
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	2300      	movs	r3, #0
 800b81a:	2206      	movs	r2, #6
 800b81c:	210f      	movs	r1, #15
 800b81e:	f7fb f9a7 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800b822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b826:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	69da      	ldr	r2, [r3, #28]
 800b82e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b832:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	4413      	add	r3, r2
 800b842:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800b846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b84a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b84e:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 800b850:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b854:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	69da      	ldr	r2, [r3, #28]
 800b85c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b860:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b86a:	fb01 f303 	mul.w	r3, r1, r3
 800b86e:	4413      	add	r3, r2
 800b870:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b87c:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_DT);
 800b87e:	f107 030c 	add.w	r3, r7, #12
 800b882:	f44f 416b 	mov.w	r1, #60160	; 0xeb00
 800b886:	4618      	mov	r0, r3
 800b888:	f7fb f9a4 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800b88c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b894:	2206      	movs	r2, #6
 800b896:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(Devices[iDev].NextDTSequence+1);
 800b898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b89c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b8b2:	fb01 f303 	mul.w	r3, r1, r3
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800b8bc:	3301      	adds	r3, #1
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fb fac4 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  int iByteToSend=Devices[iDev].NextDTSequence*7;
 800b8cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69da      	ldr	r2, [r3, #28]
 800b8d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b8e6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	1a9b      	subs	r3, r3, r2
 800b8f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b906:	2b06      	cmp	r3, #6
 800b908:	dc41      	bgt.n	800b98e <_ZN9tNMEA20008SendTPDTEi+0x198>
    if ( iByteToSend<Devices[iDev].PendingTPMsg.DataLen ) {
 800b90a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b90e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	69da      	ldr	r2, [r3, #28]
 800b916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b91a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b924:	fb01 f303 	mul.w	r3, r1, r3
 800b928:	4413      	add	r3, r2
 800b92a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b92c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b930:	429a      	cmp	r2, r3
 800b932:	da1b      	bge.n	800b96c <_ZN9tNMEA20008SendTPDTEi+0x176>
      N2kMsg.AddByte(Devices[iDev].PendingTPMsg.Data[iByteToSend]);
 800b934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b94e:	fb01 f303 	mul.w	r3, r1, r3
 800b952:	441a      	add	r2, r3
 800b954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b958:	4413      	add	r3, r2
 800b95a:	334c      	adds	r3, #76	; 0x4c
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	4611      	mov	r1, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7fb fa75 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800b96a:	e005      	b.n	800b978 <_ZN9tNMEA20008SendTPDTEi+0x182>
    } else N2kMsg.AddByte(0xff);
 800b96c:	f107 030c 	add.w	r3, r7, #12
 800b970:	21ff      	movs	r1, #255	; 0xff
 800b972:	4618      	mov	r0, r3
 800b974:	f7fb fa6e 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 800b978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b97c:	3301      	adds	r3, #1
 800b97e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b986:	3301      	adds	r3, #1
 800b988:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b98c:	e7b9      	b.n	800b902 <_ZN9tNMEA20008SendTPDTEi+0x10c>
  }
  Devices[iDev].NextDTSequence++;
 800b98e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b992:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	69da      	ldr	r2, [r3, #28]
 800b99a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b99e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b9a8:	fb01 f303 	mul.w	r3, r1, r3
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 800b9b2:	3201      	adds	r2, #1
 800b9b4:	b2d2      	uxtb	r2, r2
 800b9b6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

  return SendMsg(N2kMsg,iDev);
 800b9ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9be:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800b9c2:	f107 010c 	add.w	r1, r7, #12
 800b9c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f7fe ff53 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800b9d6:	4603      	mov	r3, r0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <_ZN9tNMEA200014HasAllTPDTSentEi>:

//*****************************************************************************
bool tNMEA2000::HasAllTPDTSent(int iDev) {
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
  return ( Devices[iDev].NextDTSequence*7>=Devices[iDev].PendingTPMsg.DataLen );
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69da      	ldr	r2, [r3, #28]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b9f6:	fb01 f303 	mul.w	r3, r1, r3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800ba00:	461a      	mov	r2, r3
 800ba02:	4613      	mov	r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	1a9a      	subs	r2, r3, r2
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	69d9      	ldr	r1, [r3, #28]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800ba12:	fb00 f303 	mul.w	r3, r0, r3
 800ba16:	440b      	add	r3, r1
 800ba18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	bfac      	ite	ge
 800ba1e:	2301      	movge	r3, #1
 800ba20:	2300      	movlt	r3, #0
 800ba22:	b2db      	uxtb	r3, r3
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr
	...

0800ba30 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>:

//*****************************************************************************
bool tNMEA2000::TestHandleTPMessage(unsigned long PGN, unsigned char Source, unsigned char Destination,
                                    unsigned char len, unsigned char *buf,
                                    uint8_t &MsgIndex) {
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	b08f      	sub	sp, #60	; 0x3c
 800ba34:	af02      	add	r7, sp, #8
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	460b      	mov	r3, r1
 800ba40:	71fb      	strb	r3, [r7, #7]
 800ba42:	4613      	mov	r3, r2
 800ba44:	71bb      	strb	r3, [r7, #6]
  MsgIndex=MaxN2kCANMsgs;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ba4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba4e:	701a      	strb	r2, [r3, #0]
  int iDev=FindSourceDeviceIndex(Destination);
 800ba50:	79bb      	ldrb	r3, [r7, #6]
 800ba52:	4619      	mov	r1, r3
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 ff40 	bl	800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800ba5a:	62b8      	str	r0, [r7, #40]	; 0x28

  if ( PGN==TP_CM ) {
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800ba62:	f040 8268 	bne.w	800bf36 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x506>
    unsigned char TP_CM_Control=buf[0];
 800ba66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int Index=5;
 800ba6e:	2305      	movs	r3, #5
 800ba70:	617b      	str	r3, [r7, #20]
    unsigned long TransportPGN=GetBuf3ByteUInt(Index,buf);
 800ba72:	f107 0314 	add.w	r3, r7, #20
 800ba76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fb fb6c 	bl	8007156 <_Z15GetBuf3ByteUIntRiPKh>
 800ba7e:	6238      	str	r0, [r7, #32]

    switch (TP_CM_Control) {
 800ba80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba84:	2b20      	cmp	r3, #32
 800ba86:	dc2b      	bgt.n	800bae0 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0xb0>
 800ba88:	2b10      	cmp	r3, #16
 800ba8a:	f2c0 824d 	blt.w	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 800ba8e:	3b10      	subs	r3, #16
 800ba90:	2b10      	cmp	r3, #16
 800ba92:	f200 8249 	bhi.w	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 800ba96:	a201      	add	r2, pc, #4	; (adr r2, 800ba9c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x6c>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bae9 	.word	0x0800bae9
 800baa0:	0800bd65 	.word	0x0800bd65
 800baa4:	0800bf29 	.word	0x0800bf29
 800baa8:	0800be93 	.word	0x0800be93
 800baac:	0800bf29 	.word	0x0800bf29
 800bab0:	0800bf29 	.word	0x0800bf29
 800bab4:	0800bf29 	.word	0x0800bf29
 800bab8:	0800bf29 	.word	0x0800bf29
 800babc:	0800bf29 	.word	0x0800bf29
 800bac0:	0800bf29 	.word	0x0800bf29
 800bac4:	0800bf29 	.word	0x0800bf29
 800bac8:	0800bf29 	.word	0x0800bf29
 800bacc:	0800bf29 	.word	0x0800bf29
 800bad0:	0800bf29 	.word	0x0800bf29
 800bad4:	0800bf29 	.word	0x0800bf29
 800bad8:	0800bf29 	.word	0x0800bf29
 800badc:	0800bae9 	.word	0x0800bae9
 800bae0:	2bff      	cmp	r3, #255	; 0xff
 800bae2:	f000 81f5 	beq.w	800bed0 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4a0>
 800bae6:	e21f      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_BAM:
      case TP_CM_RTS: {
        N2kMsgDbgln("Got TP Command");
        Index=1;
 800bae8:	2301      	movs	r3, #1
 800baea:	617b      	str	r3, [r7, #20]
        uint16_t nBytes=GetBuf2ByteUInt(Index,buf);
 800baec:	f107 0314 	add.w	r3, r7, #20
 800baf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fb fb20 	bl	8007138 <_Z15GetBuf2ByteUIntRiPKh>
 800baf8:	4603      	mov	r3, r0
 800bafa:	83bb      	strh	r3, [r7, #28]
        uint8_t TPMaxPackets=buf[Index++];
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	617a      	str	r2, [r7, #20]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb06:	4413      	add	r3, r2
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	76fb      	strb	r3, [r7, #27]
        //Index++; // reserved

        FindFreeCANMsgIndex(TransportPGN,Source,Destination,true,MsgIndex);
 800bb0c:	79b9      	ldrb	r1, [r7, #6]
 800bb0e:	79fa      	ldrb	r2, [r7, #7]
 800bb10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb12:	9301      	str	r3, [sp, #4]
 800bb14:	2301      	movs	r3, #1
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	6a39      	ldr	r1, [r7, #32]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f7ff fa32 	bl	800af86 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>

        if (MsgIndex==MaxN2kCANMsgs) { // No free msg place
 800bb22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb24:	781a      	ldrb	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d111      	bne.n	800bb54 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x124>
          N2kMsgDbgStart("No free msg slot"); N2kMsgDbgln();
          if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to abort transport
 800bb30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb34:	2b10      	cmp	r3, #16
 800bb36:	f040 81ea 	bne.w	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f2c0 81e6 	blt.w	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);
 800bb42:	79fa      	ldrb	r2, [r7, #7]
 800bb44:	2301      	movs	r3, #1
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	6a39      	ldr	r1, [r7, #32]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7ff fdc0 	bl	800b6d2 <_ZN9tNMEA200014SendTPCM_AbortEmhih>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
            }
          }
        }
        break;
 800bb52:	e1dc      	b.n	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
          N2kCANMsgBuf[MsgIndex].KnownMessage=CheckKnownMessage(TransportPGN,N2kCANMsgBuf[MsgIndex].SystemMessage,FastPacket);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	460b      	mov	r3, r1
 800bb60:	019b      	lsls	r3, r3, #6
 800bb62:	440b      	add	r3, r1
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	f103 01fe 	add.w	r1, r3, #254	; 0xfe
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	4618      	mov	r0, r3
 800bb76:	4603      	mov	r3, r0
 800bb78:	019b      	lsls	r3, r3, #6
 800bb7a:	4403      	add	r3, r0
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	18d4      	adds	r4, r2, r3
 800bb80:	f107 0313 	add.w	r3, r7, #19
 800bb84:	460a      	mov	r2, r1
 800bb86:	6a39      	ldr	r1, [r7, #32]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff f8dd 	bl	800ad48 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800bb94:	8bbb      	ldrh	r3, [r7, #28]
 800bb96:	2bde      	cmp	r3, #222	; 0xde
 800bb98:	d818      	bhi.n	800bbcc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	4619      	mov	r1, r3
 800bba4:	460b      	mov	r3, r1
 800bba6:	019b      	lsls	r3, r3, #6
 800bba8:	440b      	add	r3, r1
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d108      	bne.n	800bbc8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x198>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7fc fce0 	bl	800857c <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	f083 0301 	eor.w	r3, r3, #1
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e000      	b.n	800bbce <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19e>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80b6 	beq.w	800bd40 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x310>
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	460b      	mov	r3, r1
 800bbe0:	019b      	lsls	r3, r3, #6
 800bbe2:	440b      	add	r3, r1
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(7 /* Priority? */,TransportPGN,Source,Destination);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	019b      	lsls	r3, r3, #6
 800bbfc:	440b      	add	r3, r1
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	4618      	mov	r0, r3
 800bc04:	79fa      	ldrb	r2, [r7, #7]
 800bc06:	79bb      	ldrb	r3, [r7, #6]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	6a3a      	ldr	r2, [r7, #32]
 800bc0e:	2107      	movs	r1, #7
 800bc10:	f7fa fffb 	bl	8006c0a <_ZN7tN2kMsg4InitEhmhh>
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	460b      	mov	r3, r1
 800bc20:	019b      	lsls	r3, r3, #6
 800bc22:	440b      	add	r3, r1
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            N2kCANMsgBuf[MsgIndex].LastFrame=0;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	4619      	mov	r1, r3
 800bc38:	460b      	mov	r3, r1
 800bc3a:	019b      	lsls	r3, r3, #6
 800bc3c:	440b      	add	r3, r1
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=nBytes;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	460b      	mov	r3, r1
 800bc54:	019b      	lsls	r3, r3, #6
 800bc56:	440b      	add	r3, r1
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	8bba      	ldrh	r2, [r7, #28]
 800bc5e:	611a      	str	r2, [r3, #16]
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage();
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	019b      	lsls	r3, r3, #6
 800bc6e:	440b      	add	r3, r1
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	2101      	movs	r1, #1
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fc f8a3 	bl	8007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>
            N2kCANMsgBuf[MsgIndex].TPMaxPackets=TPMaxPackets;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	4619      	mov	r1, r3
 800bc86:	460b      	mov	r3, r1
 800bc88:	019b      	lsls	r3, r3, #6
 800bc8a:	440b      	add	r3, r1
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	7efa      	ldrb	r2, [r7, #27]
 800bc92:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 800bc96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc9a:	2b10      	cmp	r3, #16
 800bc9c:	d142      	bne.n	800bd24 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	db3f      	blt.n	800bd24 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
              SendTPCM_CTS(TransportPGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	4619      	mov	r1, r3
 800bcae:	460b      	mov	r3, r1
 800bcb0:	019b      	lsls	r3, r3, #6
 800bcb2:	440b      	add	r3, r1
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800bcc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	019b      	lsls	r3, r3, #6
 800bcca:	4403      	add	r3, r0
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	79f9      	ldrb	r1, [r7, #7]
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	9200      	str	r2, [sp, #0]
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	460a      	mov	r2, r1
 800bce2:	6a39      	ldr	r1, [r7, #32]
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f7ff fbcd 	bl	800b484 <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
              N2kCANMsgBuf[MsgIndex].TPRequireCTS=TPCtsPackets(N2kCANMsgBuf[MsgIndex].TPMaxPackets);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	019b      	lsls	r3, r3, #6
 800bcf8:	440b      	add	r3, r1
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f893 1101 	ldrb.w	r1, [r3, #257]	; 0x101
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	019b      	lsls	r3, r3, #6
 800bd10:	4403      	add	r3, r0
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	18d4      	adds	r4, r2, r3
 800bd16:	4608      	mov	r0, r1
 800bd18:	f7ff fba0 	bl	800b45c <_Z12TPCtsPacketsh>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
        break;
 800bd22:	e0f4      	b.n	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              N2kCANMsgBuf[MsgIndex].TPMaxPackets=0xff; // TPMaxPackets>0 indicates that it is TP message
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	460b      	mov	r3, r1
 800bd30:	019b      	lsls	r3, r3, #6
 800bd32:	440b      	add	r3, r1
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	22ff      	movs	r2, #255	; 0xff
 800bd3a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        break;
 800bd3e:	e0e6      	b.n	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 800bd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd44:	2b10      	cmp	r3, #16
 800bd46:	f040 80e2 	bne.w	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f2c0 80de 	blt.w	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
 800bd52:	79fa      	ldrb	r2, [r7, #7]
 800bd54:	2301      	movs	r3, #1
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	6a39      	ldr	r1, [r7, #32]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff fcb8 	bl	800b6d2 <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        break;
 800bd62:	e0d4      	b.n	800bf0e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
      }
      case TP_CM_CTS:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800bd64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7fc fc2e 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f083 0301 	eor.w	r3, r3, #1
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f040 80cc 	bne.w	800bf12 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e2>
        N2kMsgDbgStart("Got TP CTS"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	69da      	ldr	r2, [r3, #28]
 800bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd80:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800bd84:	fb01 f303 	mul.w	r3, r1, r3
 800bd88:	4413      	add	r3, r2
 800bd8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f8 fb3d 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 80bd 	bne.w	800bf16 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e6>
        if ( Devices[iDev].PendingTPMsg.PGN!=TransportPGN ) { // Some failure on communication
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	69da      	ldr	r2, [r3, #28]
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800bda6:	fb01 f303 	mul.w	r3, r1, r3
 800bdaa:	4413      	add	r3, r2
 800bdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdae:	6a3a      	ldr	r2, [r7, #32]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d004      	beq.n	800bdbe <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x38e>
          EndSendTPMessage(iDev); // Should we retry from beginning?
 800bdb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fb1f 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
          break;
 800bdbc:	e0b4      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        }
        // Now respond with next data packets
        if ( buf[1]>0 ) { // Note that with 0, receiver wants to have break
 800bdbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d055      	beq.n	800be74 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
          if ( buf[2]-1!=Devices[iDev].NextDTSequence ) { // We got sequence error
 800bdc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdca:	3302      	adds	r3, #2
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	69d1      	ldr	r1, [r2, #28]
 800bdd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800bdda:	fb00 f202 	mul.w	r2, r0, r2
 800bdde:	440a      	add	r2, r1
 800bde0:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d004      	beq.n	800bdf2 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3c2>
            EndSendTPMessage(iDev); // Should we retry from beginning?
 800bde8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f000 fb05 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
            break;
 800bdf0:	e09a      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
          }
          uint8_t MaxTPSequences=buf[1];
 800bdf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdf4:	785b      	ldrb	r3, [r3, #1]
 800bdf6:	77fb      	strb	r3, [r7, #31]
          bool TPDTResult=true;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          for ( uint8_t iSeq=0; TPDTResult &&iSeq<MaxTPSequences && !HasAllTPDTSent(iDev); iSeq++ ) TPDTResult&=SendTPDT(iDev);
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800be04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d010      	beq.n	800be2e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800be0c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800be10:	7ffb      	ldrb	r3, [r7, #31]
 800be12:	429a      	cmp	r2, r3
 800be14:	d20b      	bcs.n	800be2e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800be16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff fde2 	bl	800b9e2 <_ZN9tNMEA200014HasAllTPDTSentEi>
 800be1e:	4603      	mov	r3, r0
 800be20:	f083 0301 	eor.w	r3, r3, #1
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x400>
 800be2e:	2300      	movs	r3, #0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d014      	beq.n	800be5e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x42e>
 800be34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f7ff fcdd 	bl	800b7f6 <_ZN9tNMEA20008SendTPDTEi>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be44:	4013      	ands	r3, r2
 800be46:	2b00      	cmp	r3, #0
 800be48:	bf14      	ite	ne
 800be4a:	2301      	movne	r3, #1
 800be4c:	2300      	moveq	r3, #0
 800be4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800be56:	3301      	adds	r3, #1
 800be58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800be5c:	e7d2      	b.n	800be04 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3d4>
          if ( !TPDTResult ) EndSendTPMessage(iDev);
 800be5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be62:	f083 0301 	eor.w	r3, r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
 800be6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 fac3 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
        }
        Devices[iDev].NextDTSendTime.FromNow(100); // Set timeout for next response
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	69da      	ldr	r2, [r3, #28]
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800be7e:	fb01 f303 	mul.w	r3, r1, r3
 800be82:	4413      	add	r3, r2
 800be84:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800be88:	2164      	movs	r1, #100	; 0x64
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fc f905 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
        break;
 800be90:	e04a      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_ACK:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800be92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7fc fb97 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f083 0301 	eor.w	r3, r3, #1
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d139      	bne.n	800bf1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ea>
        N2kMsgDbgStart("Got TP ACK"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	69da      	ldr	r2, [r3, #28]
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800beb0:	fb01 f303 	mul.w	r3, r1, r3
 800beb4:	4413      	add	r3, r2
 800beb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f8 faa7 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d12b      	bne.n	800bf1e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ee>
        EndSendTPMessage(iDev);
 800bec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f000 fa96 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 800bece:	e02b      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_Abort:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800bed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7fc fb78 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800bed8:	4603      	mov	r3, r0
 800beda:	f083 0301 	eor.w	r3, r3, #1
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d11e      	bne.n	800bf22 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f2>
        N2kMsgDbgStart("Got TP Abort"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	69da      	ldr	r2, [r3, #28]
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800beee:	fb01 f303 	mul.w	r3, r1, r3
 800bef2:	4413      	add	r3, r2
 800bef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f8 fa88 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d110      	bne.n	800bf26 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f6>
        EndSendTPMessage(iDev);
 800bf04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fa77 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 800bf0c:	e00c      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        break;
 800bf0e:	bf00      	nop
 800bf10:	e00a      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800bf12:	bf00      	nop
 800bf14:	e008      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800bf16:	bf00      	nop
 800bf18:	e006      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800bf1a:	bf00      	nop
 800bf1c:	e004      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800bf1e:	bf00      	nop
 800bf20:	e002      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800bf22:	bf00      	nop
 800bf24:	e000      	b.n	800bf28 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800bf26:	bf00      	nop
      default:
        ;
    }
    MsgIndex=MaxN2kCANMsgs;  // After TP_CM, message is newer ready.
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bf2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf30:	701a      	strb	r2, [r3, #0]
    return true;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e1ab      	b.n	800c28e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  } else if ( PGN==TP_DT ) { // Datapacket
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800bf3c:	f040 81a6 	bne.w	800c28c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85c>
    N2kMsgDbgStart("Got TP data"); N2kMsgDbgln(MsgIndex);
    // So we need to find TP msg which sender and destination matches.
    for (MsgIndex=0;
 800bf40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf42:	2200      	movs	r2, #0
 800bf44:	701a      	strb	r2, [r3, #0]
         MsgIndex<MaxN2kCANMsgs &&
 800bf46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d23e      	bcs.n	800bfd2 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	460b      	mov	r3, r1
 800bf60:	019b      	lsls	r3, r3, #6
 800bf62:	440b      	add	r3, r1
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
         MsgIndex<MaxN2kCANMsgs &&
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d12e      	bne.n	800bfce <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	019b      	lsls	r3, r3, #6
 800bf7e:	440b      	add	r3, r1
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7f8 ff63 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f083 0301 	eor.w	r3, r3, #1
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d11b      	bne.n	800bfce <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	019b      	lsls	r3, r3, #6
 800bfa4:	440b      	add	r3, r1
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	7b5b      	ldrb	r3, [r3, #13]
 800bfac:	79ba      	ldrb	r2, [r7, #6]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d10d      	bne.n	800bfce <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	019b      	lsls	r3, r3, #6
 800bfc0:	440b      	add	r3, r1
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	7b1b      	ldrb	r3, [r3, #12]
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 800bfc8:	79fa      	ldrb	r2, [r7, #7]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d001      	beq.n	800bfd2 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         MsgIndex<MaxN2kCANMsgs &&
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e000      	b.n	800bfd4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a4>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d006      	beq.n	800bfe6 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5b6>
          );
         MsgIndex++);
 800bfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfda:	781b      	ldrb	r3, [r3, #0]
    for (MsgIndex=0;
 800bfdc:	3301      	adds	r3, #1
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfe2:	701a      	strb	r2, [r3, #0]
 800bfe4:	e7af      	b.n	800bf46 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x516>
    // if (MsgIndex==MaxN2kCANMsgs) N2kMsgDbgln("TP data msg not found");
    // for (int i=1; i<len; i++) N2kMsgDbgln(buf[i]);
    if (MsgIndex<MaxN2kCANMsgs) { // found TP message under reception
 800bfe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfe8:	781a      	ldrb	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bff0:	429a      	cmp	r2, r3
 800bff2:	f080 8149 	bcs.w	800c288 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
      N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
      if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right packet is coming
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	4619      	mov	r1, r3
 800c000:	460b      	mov	r3, r1
 800c002:	019b      	lsls	r3, r3, #6
 800c004:	440b      	add	r3, r1
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800c00e:	3301      	adds	r3, #1
 800c010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c012:	7812      	ldrb	r2, [r2, #0]
 800c014:	4293      	cmp	r3, r2
 800c016:	f040 80f1 	bne.w	800c1fc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x7cc>
        // Add packet to the message
        CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	4619      	mov	r1, r3
 800c024:	460b      	mov	r3, r1
 800c026:	019b      	lsls	r3, r3, #6
 800c028:	440b      	add	r3, r1
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	18d0      	adds	r0, r2, r3
 800c02e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800c032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c034:	2101      	movs	r1, #1
 800c036:	f7fe ff6c 	bl	800af12 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
        N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	4619      	mov	r1, r3
 800c044:	460b      	mov	r3, r1
 800c046:	019b      	lsls	r3, r3, #6
 800c048:	440b      	add	r3, r1
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c050:	7812      	ldrb	r2, [r2, #0]
 800c052:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        // Transport protocol is slower, so to avoid timeout, we reset message time
        N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime=N2kMillis();
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4619      	mov	r1, r3
 800c060:	460b      	mov	r3, r1
 800c062:	019b      	lsls	r3, r3, #6
 800c064:	440b      	add	r3, r1
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	18d4      	adds	r4, r2, r3
 800c06a:	f7fb fe63 	bl	8007d34 <_Z9N2kMillisv>
 800c06e:	4603      	mov	r3, r0
 800c070:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if ( N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen ) { // all done
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	460b      	mov	r3, r1
 800c080:	019b      	lsls	r3, r3, #6
 800c082:	440b      	add	r3, r1
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800c08c:	4618      	mov	r0, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	460b      	mov	r3, r1
 800c09a:	019b      	lsls	r3, r3, #6
 800c09c:	440b      	add	r3, r1
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	4298      	cmp	r0, r3
 800c0a6:	db4c      	blt.n	800c142 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x712>
          N2kCANMsgBuf[MsgIndex].Ready=true;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	019b      	lsls	r3, r3, #6
 800c0b6:	440b      	add	r3, r1
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // send response
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	019b      	lsls	r3, r3, #6
 800c0d0:	440b      	add	r3, r1
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 80be 	beq.w	800c25c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f2c0 80ba 	blt.w	800c25c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_EndAck(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen,N2kCANMsgBuf[MsgIndex].LastFrame);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	019b      	lsls	r3, r3, #6
 800c0f6:	440b      	add	r3, r1
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	6898      	ldr	r0, [r3, #8]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	4619      	mov	r1, r3
 800c108:	460b      	mov	r3, r1
 800c10a:	019b      	lsls	r3, r3, #6
 800c10c:	440b      	add	r3, r1
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	b29a      	uxth	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	461c      	mov	r4, r3
 800c120:	4623      	mov	r3, r4
 800c122:	019b      	lsls	r3, r3, #6
 800c124:	4423      	add	r3, r4
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800c12e:	79f9      	ldrb	r1, [r7, #7]
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	9200      	str	r2, [sp, #0]
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	460a      	mov	r2, r1
 800c138:	4601      	mov	r1, r0
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff fa3b 	bl	800b5b6 <_ZN9tNMEA200015SendTPCM_EndAckEmhith>
 800c140:	e08c      	b.n	800c25c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        } else {
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && ((N2kCANMsgBuf[MsgIndex].LastFrame)%N2kCANMsgBuf[MsgIndex].TPRequireCTS)==0 ) { // send response
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	4619      	mov	r1, r3
 800c14c:	460b      	mov	r3, r1
 800c14e:	019b      	lsls	r3, r3, #6
 800c150:	440b      	add	r3, r1
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d07e      	beq.n	800c25c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	4619      	mov	r1, r3
 800c168:	460b      	mov	r3, r1
 800c16a:	019b      	lsls	r3, r3, #6
 800c16c:	440b      	add	r3, r1
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	4618      	mov	r0, r3
 800c180:	4603      	mov	r3, r0
 800c182:	019b      	lsls	r3, r3, #6
 800c184:	4403      	add	r3, r0
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800c18e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c192:	fb01 f303 	mul.w	r3, r1, r3
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d15e      	bne.n	800c25c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_CTS(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	019b      	lsls	r3, r3, #6
 800c1ac:	440b      	add	r3, r1
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	6898      	ldr	r0, [r3, #8]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	460b      	mov	r3, r1
 800c1c0:	019b      	lsls	r3, r3, #6
 800c1c2:	440b      	add	r3, r1
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	4623      	mov	r3, r4
 800c1d8:	019b      	lsls	r3, r3, #6
 800c1da:	4423      	add	r3, r4
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	79f9      	ldrb	r1, [r7, #7]
 800c1ea:	9301      	str	r3, [sp, #4]
 800c1ec:	9200      	str	r2, [sp, #0]
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	460a      	mov	r2, r1
 800c1f2:	4601      	mov	r1, r0
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f7ff f945 	bl	800b484 <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
 800c1fa:	e02f      	b.n	800c25c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        }
      } else { // Wrong packet - either we lost packet or sender sends wrong, so free this
        N2kMsgDbgStart("Invalid packet: "); N2kMsgDbgln(buf[0]);
        if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // We need to abort transport
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	4619      	mov	r1, r3
 800c206:	460b      	mov	r3, r1
 800c208:	019b      	lsls	r3, r3, #6
 800c20a:	440b      	add	r3, r1
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800c214:	2b00      	cmp	r3, #0
 800c216:	d014      	beq.n	800c242 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	db11      	blt.n	800c242 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
          SendTPCM_Abort(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,TP_CM_AbortTimeout);  // Abort transport
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	4619      	mov	r1, r3
 800c228:	460b      	mov	r3, r1
 800c22a:	019b      	lsls	r3, r3, #6
 800c22c:	440b      	add	r3, r1
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	6899      	ldr	r1, [r3, #8]
 800c234:	79fa      	ldrb	r2, [r7, #7]
 800c236:	2303      	movs	r3, #3
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff fa48 	bl	800b6d2 <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        }
        N2kCANMsgBuf[MsgIndex].FreeMessage();
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	4619      	mov	r1, r3
 800c24c:	460b      	mov	r3, r1
 800c24e:	019b      	lsls	r3, r3, #6
 800c250:	440b      	add	r3, r1
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7fb fe0e 	bl	8007e78 <_ZN10tN2kCANMsg11FreeMessageEv>

      }
      if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	4619      	mov	r1, r3
 800c266:	460b      	mov	r3, r1
 800c268:	019b      	lsls	r3, r3, #6
 800c26a:	440b      	add	r3, r1
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c274:	f083 0301 	eor.w	r3, r3, #1
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d004      	beq.n	800c288 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c286:	701a      	strb	r2, [r3, #0]
    }
    return true; // We handled message
 800c288:	2301      	movs	r3, #1
 800c28a:	e000      	b.n	800c28e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  }

  return false;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3734      	adds	r7, #52	; 0x34
 800c292:	46bd      	mov	sp, r7
 800c294:	bd90      	pop	{r4, r7, pc}
 800c296:	bf00      	nop

0800c298 <_ZN7tN2kMsgaSERKS_>:
class tN2kMsg
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	791a      	ldrb	r2, [r3, #4]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	711a      	strb	r2, [r3, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	609a      	str	r2, [r3, #8]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	7b1a      	ldrb	r2, [r3, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	731a      	strb	r2, [r3, #12]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	7b5a      	ldrb	r2, [r3, #13]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	735a      	strb	r2, [r3, #13]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	691a      	ldr	r2, [r3, #16]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	611a      	str	r2, [r3, #16]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f103 0114 	add.w	r1, r3, #20
 800c2d0:	22de      	movs	r2, #222	; 0xde
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	3314      	adds	r3, #20
 800c2d6:	2a00      	cmp	r2, #0
 800c2d8:	db05      	blt.n	800c2e6 <_ZN7tN2kMsgaSERKS_+0x4e>
 800c2da:	7818      	ldrb	r0, [r3, #0]
 800c2dc:	7008      	strb	r0, [r1, #0]
 800c2de:	3101      	adds	r1, #1
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	3a01      	subs	r2, #1
 800c2e4:	e7f7      	b.n	800c2d6 <_ZN7tN2kMsgaSERKS_+0x3e>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	bc80      	pop	{r7}
 800c308:	4770      	bx	lr

0800c30a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>:

//*****************************************************************************
bool tNMEA2000::StartSendTPMessage(const tN2kMsg& msg, int iDev) {
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b086      	sub	sp, #24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 800c316:	6879      	ldr	r1, [r7, #4]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7fc f955 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c31e:	4603      	mov	r3, r0
 800c320:	f083 0301 	eor.w	r3, r3, #1
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x24>
 800c32a:	2300      	movs	r3, #0
 800c32c:	e061      	b.n	800c3f2 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  if ( Devices[iDev].PendingTPMsg.PGN!=0 ) return false; // No room for sending TP message
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	69da      	ldr	r2, [r3, #28]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c338:	fb01 f303 	mul.w	r3, r1, r3
 800c33c:	4413      	add	r3, r2
 800c33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x3e>
 800c344:	2300      	movs	r3, #0
 800c346:	e054      	b.n	800c3f2 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  int result=false;
 800c348:	2300      	movs	r3, #0
 800c34a:	617b      	str	r3, [r7, #20]

  Devices[iDev].HasPendingInformation=true;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	69da      	ldr	r2, [r3, #28]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c356:	fb01 f303 	mul.w	r3, r1, r3
 800c35a:	4413      	add	r3, r2
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  Devices[iDev].PendingTPMsg=msg;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	69da      	ldr	r2, [r3, #28]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c36c:	fb01 f303 	mul.w	r3, r1, r3
 800c370:	4413      	add	r3, r2
 800c372:	3338      	adds	r3, #56	; 0x38
 800c374:	68b9      	ldr	r1, [r7, #8]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff ff8e 	bl	800c298 <_ZN7tN2kMsgaSERKS_>
  Devices[iDev].NextDTSequence=0;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	69da      	ldr	r2, [r3, #28]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c386:	fb01 f303 	mul.w	r3, r1, r3
 800c38a:	4413      	add	r3, r2
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  Devices[iDev].NextDTSendTime.FromNow(50);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	69da      	ldr	r2, [r3, #28]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c39c:	fb01 f303 	mul.w	r3, r1, r3
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800c3a6:	2132      	movs	r1, #50	; 0x32
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fb fe76 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
  if ( IsBroadcast(msg.Destination) ) { // Start with BAM
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	7b5b      	ldrb	r3, [r3, #13]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7f8 f82b 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d006      	beq.n	800c3cc <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xc2>
    result=SendTPCM_BAM(iDev);
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7fe fea5 	bl	800b110 <_ZN9tNMEA200012SendTPCM_BAMEi>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	e005      	b.n	800c3d8 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xce>
  } else {
    result=SendTPCM_RTS(iDev);
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7fe ff68 	bl	800b2a4 <_ZN9tNMEA200012SendTPCM_RTSEi>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	617b      	str	r3, [r7, #20]
  }

  if ( !result ) EndSendTPMessage(iDev); // Currently no retry
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d103      	bne.n	800c3e6 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xdc>
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f000 f80a 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>

  return result;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	bf14      	ite	ne
 800c3ec:	2301      	movne	r3, #1
 800c3ee:	2300      	moveq	r3, #0
 800c3f0:	b2db      	uxtb	r3, r3
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>:

//*****************************************************************************
void tNMEA2000::EndSendTPMessage(int iDev) {
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	6039      	str	r1, [r7, #0]
  Devices[iDev].PendingTPMsg.Clear();
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	69da      	ldr	r2, [r3, #28]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c40e:	fb01 f303 	mul.w	r3, r1, r3
 800c412:	4413      	add	r3, r2
 800c414:	3338      	adds	r3, #56	; 0x38
 800c416:	4618      	mov	r0, r3
 800c418:	f7fa fc31 	bl	8006c7e <_ZN7tN2kMsg5ClearEv>
  Devices[iDev].NextDTSendTime.Disable();
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	69da      	ldr	r2, [r3, #28]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c426:	fb01 f303 	mul.w	r3, r1, r3
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800c430:	4618      	mov	r0, r3
 800c432:	f7fb fde5 	bl	8008000 <_ZN13tN2kScheduler7DisableEv>
  Devices[iDev].UpdateHasPendingInformation();
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	69da      	ldr	r2, [r3, #28]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c440:	fb01 f303 	mul.w	r3, r1, r3
 800c444:	4413      	add	r3, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f7fc f80c 	bl	8008464 <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <_ZN9tNMEA200020SendPendingTPMessageEi>:

//*****************************************************************************
void tNMEA2000::SendPendingTPMessage(int iDev) {
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  if ( Devices[iDev].PendingTPMsg.PGN!=0 && Devices[iDev].NextDTSendTime.IsTime() ) { // Pending message and timed out
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	69da      	ldr	r2, [r3, #28]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c468:	fb01 f303 	mul.w	r3, r1, r3
 800c46c:	4413      	add	r3, r2
 800c46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c470:	2b00      	cmp	r3, #0
 800c472:	d011      	beq.n	800c498 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	69da      	ldr	r2, [r3, #28]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c47e:	fb01 f303 	mul.w	r3, r1, r3
 800c482:	4413      	add	r3, r2
 800c484:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fb fde8 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 800c494:	2301      	movs	r3, #1
 800c496:	e000      	b.n	800c49a <_ZN9tNMEA200020SendPendingTPMessageEi+0x46>
 800c498:	2300      	movs	r3, #0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d031      	beq.n	800c502 <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
    if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) { // For broadcast we just send next data
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	69da      	ldr	r2, [r3, #28]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c4a8:	fb01 f303 	mul.w	r3, r1, r3
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f7 ffab 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d01d      	beq.n	800c4fa <_ZN9tNMEA200020SendPendingTPMessageEi+0xa6>
      SendTPDT(iDev);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff f998 	bl	800b7f6 <_ZN9tNMEA20008SendTPDTEi>
      Devices[iDev].NextDTSendTime.FromNow(50);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69da      	ldr	r2, [r3, #28]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c4d0:	fb01 f303 	mul.w	r3, r1, r3
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800c4da:	2132      	movs	r1, #50	; 0x32
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fb fddc 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
      if ( HasAllTPDTSent(iDev) ) EndSendTPMessage(iDev); // All done
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff fa7c 	bl	800b9e2 <_ZN9tNMEA200014HasAllTPDTSentEi>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d008      	beq.n	800c502 <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff ff81 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
    } else { // We have not got response from receiver within timeout, so just end. Or should we retry?
      EndSendTPMessage(iDev);
    }
  }
}
 800c4f8:	e003      	b.n	800c502 <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
      EndSendTPMessage(iDev);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7ff ff7c 	bl	800c3fa <_ZN9tNMEA200016EndSendTPMessageEi>
}
 800c502:	bf00      	nop
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <_Z22IsFastPacketFirstFrameh>:

#endif

//*****************************************************************************
inline bool IsFastPacketFirstFrame(unsigned char b) { return ((b & 0x1F)==0); }
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	4603      	mov	r3, r0
 800c512:	71fb      	strb	r3, [r7, #7]
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	f003 031f 	and.w	r3, r3, #31
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	bf0c      	ite	eq
 800c51e:	2301      	moveq	r3, #1
 800c520:	2300      	movne	r3, #0
 800c522:	b2db      	uxtb	r3, r3
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	bc80      	pop	{r7}
 800c52c:	4770      	bx	lr

0800c52e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>:

//*****************************************************************************
// Function handles received CAN frame and adds it to tN2kCANMsg.
// Returns: Index to ready tN2kCANMsg or MaxN2kCANMsgs, if we skipped the frame
//          or message is not ready (fast packet or ISO Multi-Packet)
uint8_t tNMEA2000::SetN2kCANBufMsg(unsigned long canId, unsigned char len, unsigned char *buf) {
 800c52e:	b590      	push	{r4, r7, lr}
 800c530:	b08d      	sub	sp, #52	; 0x34
 800c532:	af04      	add	r7, sp, #16
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	603b      	str	r3, [r7, #0]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]
  unsigned char Source;
  unsigned char Destination;
  bool FastPacket;
  bool SystemMessage;
  bool KnownMessage;
  uint8_t MsgIndex=MaxN2kCANMsgs;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c544:	74fb      	strb	r3, [r7, #19]

    CanIdToN2k(canId,Priority,PGN,Source,Destination);
 800c546:	f107 0017 	add.w	r0, r7, #23
 800c54a:	f107 0218 	add.w	r2, r7, #24
 800c54e:	f107 011e 	add.w	r1, r7, #30
 800c552:	f107 0316 	add.w	r3, r7, #22
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	4603      	mov	r3, r0
 800c55a:	68b8      	ldr	r0, [r7, #8]
 800c55c:	f7fd fdd8 	bl	800a110 <_Z10CanIdToN2kmRhRmS_S_>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    if ( !TestHandleTPMessage(PGN,Source,Destination,len,buf,MsgIndex) )
 800c560:	69b9      	ldr	r1, [r7, #24]
 800c562:	7dfa      	ldrb	r2, [r7, #23]
 800c564:	7db8      	ldrb	r0, [r7, #22]
 800c566:	f107 0313 	add.w	r3, r7, #19
 800c56a:	9302      	str	r3, [sp, #8]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	79fb      	ldrb	r3, [r7, #7]
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4603      	mov	r3, r0
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7ff fa5a 	bl	800ba30 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f083 0301 	eor.w	r3, r3, #1
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 81a3 	beq.w	800c8d0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
#endif
    {
      KnownMessage=CheckKnownMessage(PGN,SystemMessage,FastPacket);
 800c58a:	69b9      	ldr	r1, [r7, #24]
 800c58c:	f107 0315 	add.w	r3, r7, #21
 800c590:	f107 0214 	add.w	r2, r7, #20
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7fe fbd7 	bl	800ad48 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 800c59a:	4603      	mov	r3, r0
 800c59c:	77fb      	strb	r3, [r7, #31]
      if ( KnownMessage || !HandleOnlyKnownMessages() ) {
 800c59e:	7ffb      	ldrb	r3, [r7, #31]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d108      	bne.n	800c5b6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x88>
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7fb ffe9 	bl	800857c <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f083 0301 	eor.w	r3, r3, #1
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8c>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8e>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 8187 	beq.w	800c8d0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
        if (FastPacket && !IsFastPacketFirstFrame(buf[0]) ) { // Not first frame
 800c5c2:	7d7b      	ldrb	r3, [r7, #21]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00c      	beq.n	800c5e2 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff ff9c 	bl	800c50a <_Z22IsFastPacketFirstFrameh>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f083 0301 	eor.w	r3, r3, #1
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e000      	b.n	800c5e4 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb6>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d07e      	beq.n	800c6e6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x1b8>
        N2kFrameInDbgStart("New frame="); N2kFrameInDbg(PGN); N2kFrameInDbg(" frame="); N2kFrameInDbg(buf[0],HEX); N2kFrameInDbgln();
          // Find previous slot for this PGN
          for (MsgIndex=0;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	74fb      	strb	r3, [r7, #19]
               MsgIndex<MaxN2kCANMsgs &&
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c5f2:	7cfb      	ldrb	r3, [r7, #19]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d92a      	bls.n	800c64e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5fc:	7cfb      	ldrb	r3, [r7, #19]
 800c5fe:	4619      	mov	r1, r3
 800c600:	460b      	mov	r3, r1
 800c602:	019b      	lsls	r3, r3, #6
 800c604:	440b      	add	r3, r1
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	69bb      	ldr	r3, [r7, #24]
               MsgIndex<MaxN2kCANMsgs &&
 800c60e:	429a      	cmp	r2, r3
 800c610:	d11b      	bne.n	800c64a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
                  && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c616:	7cfb      	ldrb	r3, [r7, #19]
 800c618:	4619      	mov	r1, r3
 800c61a:	460b      	mov	r3, r1
 800c61c:	019b      	lsls	r3, r3, #6
 800c61e:	440b      	add	r3, r1
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	7b1a      	ldrb	r2, [r3, #12]
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d10e      	bne.n	800c64a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
                  && !N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c630:	7cfb      	ldrb	r3, [r7, #19]
 800c632:	4619      	mov	r1, r3
 800c634:	460b      	mov	r3, r1
 800c636:	019b      	lsls	r3, r3, #6
 800c638:	440b      	add	r3, r1
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	4618      	mov	r0, r3
 800c640:	f7f8 fc06 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 800c644:	4603      	mov	r3, r0
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               MsgIndex<MaxN2kCANMsgs &&
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x122>
 800c64e:	2300      	movs	r3, #0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x130>
          for (MsgIndex=0;
 800c654:	7cfb      	ldrb	r3, [r7, #19]
 800c656:	3301      	adds	r3, #1
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	74fb      	strb	r3, [r7, #19]
 800c65c:	e7c6      	b.n	800c5ec <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xbe>
#endif
                );
               MsgIndex++);
          if (MsgIndex<MaxN2kCANMsgs) { // we found start for this message, so add data to it.
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c664:	7cfb      	ldrb	r3, [r7, #19]
 800c666:	429a      	cmp	r2, r3
 800c668:	f240 80f2 	bls.w	800c850 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right frame is coming
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c670:	7cfb      	ldrb	r3, [r7, #19]
 800c672:	4619      	mov	r1, r3
 800c674:	460b      	mov	r3, r1
 800c676:	019b      	lsls	r3, r3, #6
 800c678:	440b      	add	r3, r1
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800c682:	3301      	adds	r3, #1
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	7812      	ldrb	r2, [r2, #0]
 800c688:	4293      	cmp	r3, r2
 800c68a:	d11b      	bne.n	800c6c4 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x196>
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c690:	7cfb      	ldrb	r3, [r7, #19]
 800c692:	4619      	mov	r1, r3
 800c694:	460b      	mov	r3, r1
 800c696:	019b      	lsls	r3, r3, #6
 800c698:	440b      	add	r3, r1
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	4413      	add	r3, r2
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	7812      	ldrb	r2, [r2, #0]
 800c6a2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6aa:	7cfb      	ldrb	r3, [r7, #19]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	019b      	lsls	r3, r3, #6
 800c6b2:	440b      	add	r3, r1
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	18d0      	adds	r0, r2, r3
 800c6b8:	79fa      	ldrb	r2, [r7, #7]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2101      	movs	r1, #1
 800c6be:	f7fe fc28 	bl	800af12 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
 800c6c2:	e0c5      	b.n	800c850 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else { // We have lost frame, so free this
              N2kFrameErrDbgStart("Lost frame ");  N2kFrameErrDbg(N2kCANMsgBuf[MsgIndex].LastFrame); N2kFrameErrDbg("/");  N2kFrameErrDbg(buf[0]);
              N2kFrameErrDbg(", source ");  N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
              N2kCANMsgBuf[MsgIndex].FreeMessage();
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6c8:	7cfb      	ldrb	r3, [r7, #19]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	019b      	lsls	r3, r3, #6
 800c6d0:	440b      	add	r3, r1
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fb fbce 	bl	8007e78 <_ZN10tN2kCANMsg11FreeMessageEv>
              MsgIndex=MaxN2kCANMsgs;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c6e2:	74fb      	strb	r3, [r7, #19]
 800c6e4:	e0b4      	b.n	800c850 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
              N2kFrameErrDbgStart("Orphan frame "); N2kFrameErrDbg(buf[0]); N2kFrameErrDbg(", source ");
              N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
          }
        } else { // Handle first frame
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
          FindFreeCANMsgIndex(PGN,Source,Destination,false,MsgIndex);
 800c6e6:	69b9      	ldr	r1, [r7, #24]
 800c6e8:	7dfa      	ldrb	r2, [r7, #23]
 800c6ea:	7db8      	ldrb	r0, [r7, #22]
 800c6ec:	f107 0313 	add.w	r3, r7, #19
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f7fe fc44 	bl	800af86 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>
#else
          FindFreeCANMsgIndex(PGN,Source,Destination,MsgIndex);
#endif
          if ( MsgIndex<MaxN2kCANMsgs ) { // we found free place, so handle frame
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c704:	7cfb      	ldrb	r3, [r7, #19]
 800c706:	429a      	cmp	r2, r3
 800c708:	f240 80a2 	bls.w	800c850 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c710:	7cfb      	ldrb	r3, [r7, #19]
 800c712:	4619      	mov	r1, r3
 800c714:	460b      	mov	r3, r1
 800c716:	019b      	lsls	r3, r3, #6
 800c718:	440b      	add	r3, r1
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].KnownMessage=KnownMessage;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c728:	7cfb      	ldrb	r3, [r7, #19]
 800c72a:	4619      	mov	r1, r3
 800c72c:	460b      	mov	r3, r1
 800c72e:	019b      	lsls	r3, r3, #6
 800c730:	440b      	add	r3, r1
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	7ffa      	ldrb	r2, [r7, #31]
 800c738:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            N2kCANMsgBuf[MsgIndex].SystemMessage=SystemMessage;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c740:	7cfb      	ldrb	r3, [r7, #19]
 800c742:	4619      	mov	r1, r3
 800c744:	460b      	mov	r3, r1
 800c746:	019b      	lsls	r3, r3, #6
 800c748:	440b      	add	r3, r1
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	7d3a      	ldrb	r2, [r7, #20]
 800c750:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(Priority,PGN,Source,Destination);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c758:	7cfb      	ldrb	r3, [r7, #19]
 800c75a:	4619      	mov	r1, r3
 800c75c:	460b      	mov	r3, r1
 800c75e:	019b      	lsls	r3, r3, #6
 800c760:	440b      	add	r3, r1
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	461c      	mov	r4, r3
 800c768:	7fb9      	ldrb	r1, [r7, #30]
 800c76a:	69ba      	ldr	r2, [r7, #24]
 800c76c:	7df8      	ldrb	r0, [r7, #23]
 800c76e:	7dbb      	ldrb	r3, [r7, #22]
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	4603      	mov	r3, r0
 800c774:	4620      	mov	r0, r4
 800c776:	f7fa fa48 	bl	8006c0a <_ZN7tN2kMsg4InitEhmhh>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage(false);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c77e:	7cfb      	ldrb	r3, [r7, #19]
 800c780:	4619      	mov	r1, r3
 800c782:	460b      	mov	r3, r1
 800c784:	019b      	lsls	r3, r3, #6
 800c786:	440b      	add	r3, r1
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4413      	add	r3, r2
 800c78c:	2100      	movs	r1, #0
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fb fb17 	bl	8007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c798:	7cfb      	ldrb	r3, [r7, #19]
 800c79a:	4619      	mov	r1, r3
 800c79c:	460b      	mov	r3, r1
 800c79e:	019b      	lsls	r3, r3, #6
 800c7a0:	440b      	add	r3, r1
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            if (FastPacket) {
 800c7ac:	7d7b      	ldrb	r3, [r7, #21]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d029      	beq.n	800c806 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x2d8>
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],2,len,buf);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7b6:	7cfb      	ldrb	r3, [r7, #19]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	019b      	lsls	r3, r3, #6
 800c7be:	440b      	add	r3, r1
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	18d0      	adds	r0, r2, r3
 800c7c4:	79fa      	ldrb	r2, [r7, #7]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2102      	movs	r1, #2
 800c7ca:	f7fe fba2 	bl	800af12 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("First frame="); N2kFrameInDbg(PGN);  N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7d2:	7cfb      	ldrb	r3, [r7, #19]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	019b      	lsls	r3, r3, #6
 800c7da:	440b      	add	r3, r1
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	7812      	ldrb	r2, [r2, #0]
 800c7e4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=buf[1];
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	7818      	ldrb	r0, [r3, #0]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7f2:	7cfb      	ldrb	r3, [r7, #19]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	019b      	lsls	r3, r3, #6
 800c7fa:	440b      	add	r3, r1
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	4602      	mov	r2, r0
 800c802:	611a      	str	r2, [r3, #16]
 800c804:	e024      	b.n	800c850 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else {
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],0,len,buf);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c80a:	7cfb      	ldrb	r3, [r7, #19]
 800c80c:	4619      	mov	r1, r3
 800c80e:	460b      	mov	r3, r1
 800c810:	019b      	lsls	r3, r3, #6
 800c812:	440b      	add	r3, r1
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	18d0      	adds	r0, r2, r3
 800c818:	79fa      	ldrb	r2, [r7, #7]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2100      	movs	r1, #0
 800c81e:	f7fe fb78 	bl	800af12 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("Single frame="); N2kFrameInDbg(PGN); N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=0;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c826:	7cfb      	ldrb	r3, [r7, #19]
 800c828:	4619      	mov	r1, r3
 800c82a:	460b      	mov	r3, r1
 800c82c:	019b      	lsls	r3, r3, #6
 800c82e:	440b      	add	r3, r1
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4413      	add	r3, r2
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=len;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c83e:	7cfb      	ldrb	r3, [r7, #19]
 800c840:	4619      	mov	r1, r3
 800c842:	460b      	mov	r3, r1
 800c844:	019b      	lsls	r3, r3, #6
 800c846:	440b      	add	r3, r1
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	79fa      	ldrb	r2, [r7, #7]
 800c84e:	611a      	str	r2, [r3, #16]
            }
          }
        }

        if ( MsgIndex<MaxN2kCANMsgs ) {
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c856:	7cfb      	ldrb	r3, [r7, #19]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d939      	bls.n	800c8d0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
          N2kCANMsgBuf[MsgIndex].Ready=(N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c860:	7cfb      	ldrb	r3, [r7, #19]
 800c862:	4619      	mov	r1, r3
 800c864:	460b      	mov	r3, r1
 800c866:	019b      	lsls	r3, r3, #6
 800c868:	440b      	add	r3, r1
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800c872:	461c      	mov	r4, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c878:	7cfb      	ldrb	r3, [r7, #19]
 800c87a:	4619      	mov	r1, r3
 800c87c:	460b      	mov	r3, r1
 800c87e:	019b      	lsls	r3, r3, #6
 800c880:	440b      	add	r3, r1
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	691a      	ldr	r2, [r3, #16]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c88c:	7cfb      	ldrb	r3, [r7, #19]
 800c88e:	4618      	mov	r0, r3
 800c890:	4603      	mov	r3, r0
 800c892:	019b      	lsls	r3, r3, #6
 800c894:	4403      	add	r3, r0
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	4294      	cmp	r4, r2
 800c89c:	bfac      	ite	ge
 800c89e:	2201      	movge	r2, #1
 800c8a0:	2200      	movlt	r2, #0
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs; // If packet is not ready, do not return index to it
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ac:	7cfb      	ldrb	r3, [r7, #19]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	019b      	lsls	r3, r3, #6
 800c8b4:	440b      	add	r3, r1
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c8be:	f083 0301 	eor.w	r3, r3, #1
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d003      	beq.n	800c8d0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c8ce:	74fb      	strb	r3, [r7, #19]
        }
      }
    }

    return MsgIndex;
 800c8d0:	7cfb      	ldrb	r3, [r7, #19]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3724      	adds	r7, #36	; 0x24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd90      	pop	{r4, r7, pc}

0800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>:

//*****************************************************************************
 int tNMEA2000::FindSourceDeviceIndex(unsigned char Source) {
 800c8da:	b480      	push	{r7}
 800c8dc:	b085      	sub	sp, #20
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	70fb      	strb	r3, [r7, #3]
   int i=DeviceCount;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	60fb      	str	r3, [r7, #12]

     if ( Source<=253 ) {
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	2bfd      	cmp	r3, #253	; 0xfd
 800c8f0:	d817      	bhi.n	800c922 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
       for (i=0; i<DeviceCount && Devices[i].N2kSource!=Source; i++);
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	da10      	bge.n	800c922 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	69da      	ldr	r2, [r3, #28]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c90a:	fb01 f303 	mul.w	r3, r1, r3
 800c90e:	4413      	add	r3, r2
 800c910:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c914:	78fa      	ldrb	r2, [r7, #3]
 800c916:	429a      	cmp	r2, r3
 800c918:	d003      	beq.n	800c922 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3301      	adds	r3, #1
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	e7e9      	b.n	800c8f6 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x1c>
     }

     return (i<DeviceCount?i:-1);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	429a      	cmp	r2, r3
 800c92a:	da01      	bge.n	800c930 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x56>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	e001      	b.n	800c934 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x5a>
 800c930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 800c934:	4618      	mov	r0, r3
 800c936:	3714      	adds	r7, #20
 800c938:	46bd      	mov	sp, r7
 800c93a:	bc80      	pop	{r7}
 800c93c:	4770      	bx	lr

0800c93e <_ZN9tNMEA200010IsMySourceEh>:

//*****************************************************************************
bool tNMEA2000::IsMySource(unsigned char Source) {
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	460b      	mov	r3, r1
 800c948:	70fb      	strb	r3, [r7, #3]
    return (FindSourceDeviceIndex(Source)!=-1);
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff ffc3 	bl	800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800c954:	4603      	mov	r3, r0
 800c956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c95a:	bf14      	ite	ne
 800c95c:	2301      	movne	r3, #1
 800c95e:	2300      	moveq	r3, #0
 800c960:	b2db      	uxtb	r3, r3
}
 800c962:	4618      	mov	r0, r3
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kMsg &N2kMsg) {
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fb fdb5 	bl	80084e4 <_ZNK9tNMEA200014ForwardEnabledEv>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f083 0301 	eor.w	r3, r3, #1
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	d118      	bne.n	800c9b8 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x4e>
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7fb fde6 	bl	8008558 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 800c98c:	4603      	mov	r3, r0
 800c98e:	f083 0301 	eor.w	r3, r3, #1
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10b      	bne.n	800c9b0 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x46>
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	7b1b      	ldrb	r3, [r3, #12]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff ffcd 	bl	800c93e <_ZN9tNMEA200010IsMySourceEh>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f083 0301 	eor.w	r3, r3, #1
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	795b      	ldrb	r3, [r3, #5]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d101      	bne.n	800c9bc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e000      	b.n	800c9be <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x54>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d115      	bne.n	800c9ee <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x84>

  switch (ForwardType) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	799b      	ldrb	r3, [r3, #6]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d002      	beq.n	800c9d0 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x66>
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d007      	beq.n	800c9de <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x74>
 800c9ce:	e00f      	b.n	800c9f0 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Actisense:
      N2kMsg.SendInActisenseFormat(ForwardStream);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6838      	ldr	r0, [r7, #0]
 800c9d8:	f7fa fe62 	bl	80076a0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 800c9dc:	e008      	b.n	800c9f0 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Text:
      N2kMsg.Print(ForwardStream);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	6838      	ldr	r0, [r7, #0]
 800c9e8:	f7fa fda6 	bl	8007538 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 800c9ec:	e000      	b.n	800c9f0 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 800c9ee:	bf00      	nop
  }
}
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kCANMsg &N2kCanMsg) {
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b082      	sub	sp, #8
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	6039      	str	r1, [r7, #0]
  if ( N2kCanMsg.KnownMessage || !ForwardOnlyKnownMessages() ) ForwardMessage(N2kCanMsg.N2kMsg);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d108      	bne.n	800ca1c <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x26>
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7fb fd92 	bl	8008534 <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>
 800ca10:	4603      	mov	r3, r0
 800ca12:	f083 0301 	eor.w	r3, r3, #1
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2a>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e000      	b.n	800ca22 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2c>
 800ca20:	2300      	movs	r3, #0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d004      	beq.n	800ca30 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x3a>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff ff9d 	bl	800c96a <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>:

//*****************************************************************************
void tNMEA2000::SendIsoAddressClaim(unsigned char Destination, int DeviceIndex, unsigned long FromNow) {
 800ca38:	b590      	push	{r4, r7, lr}
 800ca3a:	b0c7      	sub	sp, #284	; 0x11c
 800ca3c:	af02      	add	r7, sp, #8
 800ca3e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800ca42:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800ca46:	6020      	str	r0, [r4, #0]
 800ca48:	4608      	mov	r0, r1
 800ca4a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800ca4e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800ca52:	600a      	str	r2, [r1, #0]
 800ca54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ca58:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca62:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800ca66:	4602      	mov	r2, r0
 800ca68:	701a      	strb	r2, [r3, #0]

  // Some devices (Garmin) request constantly information on network about others
  // 59904 ISO Request:  PGN = 60928
  // So we need to Re-send Address claim, or they will stop detecting us
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800ca6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca6e:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2bff      	cmp	r3, #255	; 0xff
 800ca76:	d10d      	bne.n	800ca94 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 800ca78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca86:	d105      	bne.n	800ca94 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 800ca88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]

  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 800ca94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	db76      	blt.n	800cb90 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>
 800caa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800caa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800cab2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800cab6:	6812      	ldr	r2, [r2, #0]
 800cab8:	429a      	cmp	r2, r3
 800caba:	da69      	bge.n	800cb90 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>

  // Set pending, if we have delayed it.
  if ( FromNow>0 ) {
 800cabc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cac0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d018      	beq.n	800cafc <_ZN9tNMEA200019SendIsoAddressClaimEhim+0xc4>
    Devices[DeviceIndex].SetPendingIsoAddressClaim(FromNow);
 800caca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	69da      	ldr	r2, [r3, #28]
 800cad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cada:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cae4:	fb01 f303 	mul.w	r3, r1, r3
 800cae8:	441a      	add	r2, r3
 800caea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800caee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800caf2:	6819      	ldr	r1, [r3, #0]
 800caf4:	4610      	mov	r0, r2
 800caf6:	f7fb fbf3 	bl	80082e0 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>
    return;
 800cafa:	e04a      	b.n	800cb92 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  }

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800cafc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	69da      	ldr	r2, [r3, #28]
 800cb08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cb16:	fb01 f303 	mul.w	r3, r1, r3
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800cb20:	f107 0014 	add.w	r0, r7, #20
 800cb24:	2300      	movs	r3, #0
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	2206      	movs	r2, #6
 800cb2c:	f7fa f820 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

    RespondMsg.Destination=Destination;
 800cb30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb34:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    SetN2kISOAddressClaim(RespondMsg,Devices[DeviceIndex].DeviceInformation.GetName());
 800cb3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	69da      	ldr	r2, [r3, #28]
 800cb4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cb58:	fb01 f303 	mul.w	r3, r1, r3
 800cb5c:	4413      	add	r3, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f7 fc48 	bl	80043f4 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	f107 0114 	add.w	r1, r7, #20
 800cb6c:	4608      	mov	r0, r1
 800cb6e:	f7fb fdf2 	bl	8008756 <_Z21SetN2kISOAddressClaimR7tN2kMsgy>
    SendMsg(RespondMsg,DeviceIndex);
 800cb72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb76:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800cb7a:	f107 0114 	add.w	r1, r7, #20
 800cb7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb86:	6812      	ldr	r2, [r2, #0]
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	f7fd fe77 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800cb8e:	e000      	b.n	800cb92 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 800cb90:	bf00      	nop
}
 800cb92:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd90      	pop	{r4, r7, pc}
	...

0800cb9c <_ZN9tNMEA200013SendTxPGNListEhib>:

#define MAX_PGNS_IN_LIST 74

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b0cb      	sub	sp, #300	; 0x12c
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800cba6:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	4608      	mov	r0, r1
 800cbae:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800cbb2:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800cbb6:	600a      	str	r2, [r1, #0]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cbbe:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cbca:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800cbce:	460a      	mov	r2, r1
 800cbd0:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800cbd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cbd6:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	2bff      	cmp	r3, #255	; 0xff
 800cbde:	d10d      	bne.n	800cbfc <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 800cbe0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cbe4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbee:	d105      	bne.n	800cbfc <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 800cbf0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cbf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 800cbfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc00:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800cc04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cc0c:	6811      	ldr	r1, [r2, #0]
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	f7fb fcda 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800cc14:	4603      	mov	r3, r0
 800cc16:	f083 0301 	eor.w	r3, r3, #1
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f040 80cc 	bne.w	800cdba <_ZN9tNMEA200013SendTxPGNListEhib+0x21e>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800cc22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	69da      	ldr	r2, [r3, #28]
 800cc2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cc3c:	fb01 f303 	mul.w	r3, r1, r3
 800cc40:	4413      	add	r3, r2
 800cc42:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800cc46:	f107 0014 	add.w	r0, r7, #20
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2206      	movs	r2, #6
 800cc52:	f7f9 ff8d 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 800cc56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cc5e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800cc62:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 800cc66:	7812      	ldrb	r2, [r2, #0]
 800cc68:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 800cc6a:	f107 0314 	add.w	r3, r7, #20
 800cc6e:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7f9 ffae 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 800cc78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cc80:	2206      	movs	r2, #6
 800cc82:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 800cc84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cc88:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	f107 0314 	add.w	r3, r7, #20
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fb f894 	bl	8007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_transmit);
 800cc9a:	f107 0314 	add.w	r3, r7, #20
 800cc9e:	2100      	movs	r1, #0
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fa f8d7 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ccac:	2300      	movs	r3, #0
 800ccae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ccb2:	4a44      	ldr	r2, [pc, #272]	; (800cdc4 <_ZN9tNMEA200013SendTxPGNListEhib+0x228>)
 800ccb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ccb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ccc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d005      	beq.n	800ccd4 <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 800ccc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cccc:	2b49      	cmp	r3, #73	; 0x49
 800ccce:	d801      	bhi.n	800ccd4 <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e000      	b.n	800ccd6 <_ZN9tNMEA200013SendTxPGNListEhib+0x13a>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d012      	beq.n	800cd00 <_ZN9tNMEA200013SendTxPGNListEhib+0x164>
      RespondMsg.Add3ByteInt(PGN);
 800ccda:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800ccde:	f107 0314 	add.w	r3, r7, #20
 800cce2:	4611      	mov	r1, r2
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fa f87e 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ccea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ccee:	3301      	adds	r3, #1
 800ccf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ccf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ccfe:	e7d8      	b.n	800ccb2 <_ZN9tNMEA200013SendTxPGNListEhib+0x116>
    }
    if (Devices[DeviceIndex].TransmitMessages!=0) {
 800cd00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cd04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69da      	ldr	r2, [r3, #28]
 800cd0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cd10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cd1a:	fb01 f303 	mul.w	r3, r1, r3
 800cd1e:	4413      	add	r3, r2
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d03a      	beq.n	800cd9c <_ZN9tNMEA200013SendTxPGNListEhib+0x200>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800cd26:	2300      	movs	r3, #0
 800cd28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cd2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cd30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	69da      	ldr	r2, [r3, #28]
 800cd38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cd3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cd46:	fb01 f303 	mul.w	r3, r1, r3
 800cd4a:	4413      	add	r3, r2
 800cd4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800cd5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d005      	beq.n	800cd70 <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 800cd64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cd68:	2b49      	cmp	r3, #73	; 0x49
 800cd6a:	d801      	bhi.n	800cd70 <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <_ZN9tNMEA200013SendTxPGNListEhib+0x1d6>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d012      	beq.n	800cd9c <_ZN9tNMEA200013SendTxPGNListEhib+0x200>
        RespondMsg.Add3ByteInt(PGN);
 800cd76:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800cd7a:	f107 0314 	add.w	r3, r7, #20
 800cd7e:	4611      	mov	r1, r2
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fa f830 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800cd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cd90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cd94:	3301      	adds	r3, #1
 800cd96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cd9a:	e7c7      	b.n	800cd2c <_ZN9tNMEA200013SendTxPGNListEhib+0x190>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 800cd9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cda0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800cda4:	f107 0114 	add.w	r1, r7, #20
 800cda8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cdac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cdb0:	6812      	ldr	r2, [r2, #0]
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	f7fd fd62 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800cdb8:	e000      	b.n	800cdbc <_ZN9tNMEA200013SendTxPGNListEhib+0x220>
  if ( !IsValidDevice(DeviceIndex) ) return;
 800cdba:	bf00      	nop
}
 800cdbc:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd90      	pop	{r4, r7, pc}
 800cdc4:	08010d34 	.word	0x08010d34

0800cdc8 <_ZN9tNMEA200013SendRxPGNListEhib>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 800cdc8:	b590      	push	{r4, r7, lr}
 800cdca:	b0cb      	sub	sp, #300	; 0x12c
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800cdd2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800cdd6:	6020      	str	r0, [r4, #0]
 800cdd8:	4608      	mov	r0, r1
 800cdda:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800cdde:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800cde2:	600a      	str	r2, [r1, #0]
 800cde4:	4619      	mov	r1, r3
 800cde6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cdea:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800cdee:	4602      	mov	r2, r0
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cdf6:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800cdfa:	460a      	mov	r2, r1
 800cdfc:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800cdfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce02:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2bff      	cmp	r3, #255	; 0xff
 800ce0a:	d10d      	bne.n	800ce28 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 800ce0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce1a:	d105      	bne.n	800ce28 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 800ce1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce24:	2200      	movs	r2, #0
 800ce26:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 800ce28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce2c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800ce30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ce38:	6811      	ldr	r1, [r2, #0]
 800ce3a:	6818      	ldr	r0, [r3, #0]
 800ce3c:	f7fb fbc4 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800ce40:	4603      	mov	r3, r0
 800ce42:	f083 0301 	eor.w	r3, r3, #1
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f040 80cc 	bne.w	800cfe6 <_ZN9tNMEA200013SendRxPGNListEhib+0x21e>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800ce4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	69da      	ldr	r2, [r3, #28]
 800ce5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ce68:	fb01 f303 	mul.w	r3, r1, r3
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800ce72:	f107 0014 	add.w	r0, r7, #20
 800ce76:	2300      	movs	r3, #0
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	2206      	movs	r2, #6
 800ce7e:	f7f9 fe77 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 800ce82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ce86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ce8a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800ce8e:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 800ce92:	7812      	ldrb	r2, [r2, #0]
 800ce94:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 800ce96:	f107 0314 	add.w	r3, r7, #20
 800ce9a:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7f9 fe98 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 800cea4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ceac:	2206      	movs	r2, #6
 800ceae:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 800ceb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ceb4:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800ceb8:	781a      	ldrb	r2, [r3, #0]
 800ceba:	f107 0314 	add.w	r3, r7, #20
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fa ff7e 	bl	8007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_receive);
 800cec6:	f107 0314 	add.w	r3, r7, #20
 800ceca:	2101      	movs	r1, #1
 800cecc:	4618      	mov	r0, r3
 800cece:	f7f9 ffc1 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ced8:	2300      	movs	r3, #0
 800ceda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800cede:	4a44      	ldr	r2, [pc, #272]	; (800cff0 <_ZN9tNMEA200013SendRxPGNListEhib+0x228>)
 800cee0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cee8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ceec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d005      	beq.n	800cf00 <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 800cef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cef8:	2b49      	cmp	r3, #73	; 0x49
 800cefa:	d801      	bhi.n	800cf00 <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <_ZN9tNMEA200013SendRxPGNListEhib+0x13a>
 800cf00:	2300      	movs	r3, #0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d012      	beq.n	800cf2c <_ZN9tNMEA200013SendRxPGNListEhib+0x164>
      RespondMsg.Add3ByteInt(PGN);
 800cf06:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800cf0a:	f107 0314 	add.w	r3, r7, #20
 800cf0e:	4611      	mov	r1, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7f9 ff68 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800cf16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800cf20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cf24:	3301      	adds	r3, #1
 800cf26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cf2a:	e7d8      	b.n	800cede <_ZN9tNMEA200013SendRxPGNListEhib+0x116>
    }
    if (Devices[DeviceIndex].ReceiveMessages!=0) {
 800cf2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cf30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69da      	ldr	r2, [r3, #28]
 800cf38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cf3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cf46:	fb01 f303 	mul.w	r3, r1, r3
 800cf4a:	4413      	add	r3, r2
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d03a      	beq.n	800cfc8 <_ZN9tNMEA200013SendRxPGNListEhib+0x200>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800cf52:	2300      	movs	r3, #0
 800cf54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cf58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cf5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69da      	ldr	r2, [r3, #28]
 800cf64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cf68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cf72:	fb01 f303 	mul.w	r3, r1, r3
 800cf76:	4413      	add	r3, r2
 800cf78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800cf88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d005      	beq.n	800cf9c <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 800cf90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cf94:	2b49      	cmp	r3, #73	; 0x49
 800cf96:	d801      	bhi.n	800cf9c <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e000      	b.n	800cf9e <_ZN9tNMEA200013SendRxPGNListEhib+0x1d6>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d012      	beq.n	800cfc8 <_ZN9tNMEA200013SendRxPGNListEhib+0x200>
        RespondMsg.Add3ByteInt(PGN);
 800cfa2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800cfa6:	f107 0314 	add.w	r3, r7, #20
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f9 ff1a 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800cfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cfbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cfc6:	e7c7      	b.n	800cf58 <_ZN9tNMEA200013SendRxPGNListEhib+0x190>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 800cfc8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cfcc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800cfd0:	f107 0114 	add.w	r1, r7, #20
 800cfd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800cfd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cfdc:	6812      	ldr	r2, [r2, #0]
 800cfde:	6818      	ldr	r0, [r3, #0]
 800cfe0:	f7fd fc4c 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800cfe4:	e000      	b.n	800cfe8 <_ZN9tNMEA200013SendRxPGNListEhib+0x220>
  if ( !IsValidDevice(DeviceIndex) ) return;
 800cfe6:	bf00      	nop
}
 800cfe8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}
 800cff0:	08010d60 	.word	0x08010d60

0800cff4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>:

//*****************************************************************************
void SetN2kPGN126996Progmem(tN2kMsg &N2kMsg, const tNMEA2000::tProductInformation *ProductInformation, char *OptionalSerialCode=0) {
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
  int i;

    N2kMsg.SetPGN(126996L);
 800d000:	4968      	ldr	r1, [pc, #416]	; (800d1a4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x1b0>)
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7f9 fde6 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2206      	movs	r2, #6
 800d00c:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->N2kVersion));
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	b21b      	sxth	r3, r3
 800d014:	4619      	mov	r1, r3
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7f9 febc 	bl	8006d94 <_ZN7tN2kMsg11Add2ByteIntEs>
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->ProductCode));
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	885b      	ldrh	r3, [r3, #2]
 800d020:	b21b      	sxth	r3, r3
 800d022:	4619      	mov	r1, r3
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7f9 feb5 	bl	8006d94 <_ZN7tN2kMsg11Add2ByteIntEs>
    for (i=0; i<Max_N2kModelID_len && pgm_read_byte(&ProductInformation->N2kModelID[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelID[i])); }
 800d02a:	2300      	movs	r3, #0
 800d02c:	617b      	str	r3, [r7, #20]
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	2b1f      	cmp	r3, #31
 800d032:	dc13      	bgt.n	800d05c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	4413      	add	r3, r2
 800d03a:	3304      	adds	r3, #4
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00c      	beq.n	800d05c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	4413      	add	r3, r2
 800d048:	3304      	adds	r3, #4
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	4619      	mov	r1, r3
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7f9 ff00 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	3301      	adds	r3, #1
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	e7e8      	b.n	800d02e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x3a>
    for (; i<Max_N2kModelID_len; i++ ) { N2kMsg.AddByte(0xff); }
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b1f      	cmp	r3, #31
 800d060:	dc07      	bgt.n	800d072 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x7e>
 800d062:	21ff      	movs	r1, #255	; 0xff
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f7f9 fef5 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	3301      	adds	r3, #1
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	e7f4      	b.n	800d05c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
    for (i=0; i<Max_N2kSwCode_len && pgm_read_byte(&ProductInformation->N2kSwCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kSwCode[i])); }
 800d072:	2300      	movs	r3, #0
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b1f      	cmp	r3, #31
 800d07a:	dc13      	bgt.n	800d0a4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	4413      	add	r3, r2
 800d082:	3325      	adds	r3, #37	; 0x25
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00c      	beq.n	800d0a4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	4413      	add	r3, r2
 800d090:	3325      	adds	r3, #37	; 0x25
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	4619      	mov	r1, r3
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7f9 fedc 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	617b      	str	r3, [r7, #20]
 800d0a2:	e7e8      	b.n	800d076 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x82>
    for (; i<Max_N2kSwCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	2b1f      	cmp	r3, #31
 800d0a8:	dc07      	bgt.n	800d0ba <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xc6>
 800d0aa:	21ff      	movs	r1, #255	; 0xff
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7f9 fed1 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	617b      	str	r3, [r7, #20]
 800d0b8:	e7f4      	b.n	800d0a4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
    for (i=0; i<Max_N2kModelVersion_len && pgm_read_byte(&ProductInformation->N2kModelVersion[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelVersion[i])); }
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	617b      	str	r3, [r7, #20]
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2b1f      	cmp	r3, #31
 800d0c2:	dc13      	bgt.n	800d0ec <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	3346      	adds	r3, #70	; 0x46
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00c      	beq.n	800d0ec <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	3346      	adds	r3, #70	; 0x46
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7f9 feb8 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	e7e8      	b.n	800d0be <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xca>
    for (; i<Max_N2kModelVersion_len; i++ ) { N2kMsg.AddByte(0xff); }
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b1f      	cmp	r3, #31
 800d0f0:	dc07      	bgt.n	800d102 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x10e>
 800d0f2:	21ff      	movs	r1, #255	; 0xff
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7f9 fead 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	617b      	str	r3, [r7, #20]
 800d100:	e7f4      	b.n	800d0ec <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
    if (OptionalSerialCode) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d016      	beq.n	800d136 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x142>
      for (i=0; i<Max_N2kModelSerialCode_len && OptionalSerialCode[i]; i++ ) { N2kMsg.AddByte(OptionalSerialCode[i]); }
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2b1f      	cmp	r3, #31
 800d110:	dc2a      	bgt.n	800d168 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	4413      	add	r3, r2
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d024      	beq.n	800d168 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	4413      	add	r3, r2
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7f9 fe93 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	3301      	adds	r3, #1
 800d132:	617b      	str	r3, [r7, #20]
 800d134:	e7ea      	b.n	800d10c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x118>
    } else {
      for (i=0; i<Max_N2kModelSerialCode_len && pgm_read_byte(&ProductInformation->N2kModelSerialCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelSerialCode[i])); }
 800d136:	2300      	movs	r3, #0
 800d138:	617b      	str	r3, [r7, #20]
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2b1f      	cmp	r3, #31
 800d13e:	dc13      	bgt.n	800d168 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	4413      	add	r3, r2
 800d146:	3367      	adds	r3, #103	; 0x67
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00c      	beq.n	800d168 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	4413      	add	r3, r2
 800d154:	3367      	adds	r3, #103	; 0x67
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	4619      	mov	r1, r3
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f7f9 fe7a 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	3301      	adds	r3, #1
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	e7e8      	b.n	800d13a <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x146>
    }
    for (; i<Max_N2kModelSerialCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2b1f      	cmp	r3, #31
 800d16c:	dc07      	bgt.n	800d17e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x18a>
 800d16e:	21ff      	movs	r1, #255	; 0xff
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7f9 fe6f 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	3301      	adds	r3, #1
 800d17a:	617b      	str	r3, [r7, #20]
 800d17c:	e7f4      	b.n	800d168 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->CertificationLevel));
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d184:	4619      	mov	r1, r3
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7f9 fe64 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->LoadEquivalency));
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d192:	4619      	mov	r1, r3
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7f9 fe5d 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
}
 800d19a:	bf00      	nop
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	0001f014 	.word	0x0001f014

0800d1a8 <_ZN9tNMEA200022SendProductInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendProductInformation(int iDev) {
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  return SendProductInformation(0xff,iDev,false);
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	21ff      	movs	r1, #255	; 0xff
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f805 	bl	800d1c8 <_ZN9tNMEA200022SendProductInformationEhib>
 800d1be:	4603      	mov	r3, r0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <_ZN9tNMEA200022SendProductInformationEhib>:

bool tNMEA2000::SendProductInformation(unsigned char Destination, int iDev, bool UseTP) {
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	b0ca      	sub	sp, #296	; 0x128
 800d1ce:	af06      	add	r7, sp, #24
 800d1d0:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800d1d4:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800d1d8:	6020      	str	r0, [r4, #0]
 800d1da:	4608      	mov	r0, r1
 800d1dc:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800d1e0:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800d1e4:	600a      	str	r2, [r1, #0]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1ec:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	701a      	strb	r2, [r3, #0]
 800d1f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1f8:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800d1fc:	460a      	mov	r2, r1
 800d1fe:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendProductInformation(int iDev) {
#endif
  if ( !IsValidDevice(iDev) ) return false;
 800d200:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d204:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800d208:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d20c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d210:	6811      	ldr	r1, [r2, #0]
 800d212:	6818      	ldr	r0, [r3, #0]
 800d214:	f7fb f9d8 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800d218:	4603      	mov	r3, r0
 800d21a:	f083 0301 	eor.w	r3, r3, #1
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <_ZN9tNMEA200022SendProductInformationEhib+0x60>
 800d224:	2300      	movs	r3, #0
 800d226:	e151      	b.n	800d4cc <_ZN9tNMEA200022SendProductInformationEhib+0x304>
  tN2kMsg RespondMsg(Devices[iDev].N2kSource);
 800d228:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d22c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69da      	ldr	r2, [r3, #28]
 800d234:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d238:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d242:	fb01 f303 	mul.w	r3, r1, r3
 800d246:	4413      	add	r3, r2
 800d248:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800d24c:	f107 0010 	add.w	r0, r7, #16
 800d250:	2300      	movs	r3, #0
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	2300      	movs	r3, #0
 800d256:	2206      	movs	r2, #6
 800d258:	f7f9 fc8a 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
  int iPIDev=iDev;
 800d25c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d260:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 800d26a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d26e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	69da      	ldr	r2, [r3, #28]
 800d276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d27a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d27e:	fb01 f303 	mul.w	r3, r1, r3
 800d282:	4413      	add	r3, r2
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <_ZN9tNMEA200022SendProductInformationEhib+0xc8>
 800d28a:	2300      	movs	r3, #0
 800d28c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    if ( Devices[iPIDev].ProductInformation==0 ) return false; // Can not do anything.
 800d290:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2a0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d2a4:	fb01 f303 	mul.w	r3, r1, r3
 800d2a8:	4413      	add	r3, r2
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <_ZN9tNMEA200022SendProductInformationEhib+0xec>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	e10b      	b.n	800d4cc <_ZN9tNMEA200022SendProductInformationEhib+0x304>

    if ( Devices[iPIDev].ProductInformation==Devices[iPIDev].LocalProductInformation ) {
 800d2b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d2b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	69da      	ldr	r2, [r3, #28]
 800d2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2c4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d2c8:	fb01 f303 	mul.w	r3, r1, r3
 800d2cc:	4413      	add	r3, r2
 800d2ce:	689a      	ldr	r2, [r3, #8]
 800d2d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d2d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	69d9      	ldr	r1, [r3, #28]
 800d2dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d2e4:	fb00 f303 	mul.w	r3, r0, r3
 800d2e8:	440b      	add	r3, r1
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	f040 808a 	bne.w	800d406 <_ZN9tNMEA200022SendProductInformationEhib+0x23e>
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 800d2f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d2f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	69da      	ldr	r2, [r3, #28]
 800d2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d302:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d306:	fb01 f303 	mul.w	r3, r1, r3
 800d30a:	4413      	add	r3, r2
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	469e      	mov	lr, r3
                                          Devices[iPIDev].ProductInformation->ProductCode,
 800d312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	69da      	ldr	r2, [r3, #28]
 800d31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d322:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d326:	fb01 f303 	mul.w	r3, r1, r3
 800d32a:	4413      	add	r3, r2
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	885b      	ldrh	r3, [r3, #2]
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 800d330:	4698      	mov	r8, r3
                                          Devices[iPIDev].ProductInformation->N2kModelID,
 800d332:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	69da      	ldr	r2, [r3, #28]
 800d33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d342:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d346:	fb01 f303 	mul.w	r3, r1, r3
 800d34a:	4413      	add	r3, r2
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	1d1e      	adds	r6, r3, #4
                                          Devices[iPIDev].ProductInformation->N2kSwCode,
 800d350:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	69da      	ldr	r2, [r3, #28]
 800d35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d360:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d364:	fb01 f303 	mul.w	r3, r1, r3
 800d368:	4413      	add	r3, r2
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	3325      	adds	r3, #37	; 0x25
                                          Devices[iPIDev].ProductInformation->N2kModelVersion,
 800d36e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d372:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d376:	6812      	ldr	r2, [r2, #0]
 800d378:	69d1      	ldr	r1, [r2, #28]
 800d37a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d37e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d382:	fb00 f202 	mul.w	r2, r0, r2
 800d386:	440a      	add	r2, r1
 800d388:	6892      	ldr	r2, [r2, #8]
 800d38a:	3246      	adds	r2, #70	; 0x46
                                          Devices[iPIDev].ProductInformation->N2kModelSerialCode,
 800d38c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800d390:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 800d394:	6809      	ldr	r1, [r1, #0]
 800d396:	69c8      	ldr	r0, [r1, #28]
 800d398:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800d39c:	f44f 74ac 	mov.w	r4, #344	; 0x158
 800d3a0:	fb04 f101 	mul.w	r1, r4, r1
 800d3a4:	4401      	add	r1, r0
 800d3a6:	6889      	ldr	r1, [r1, #8]
 800d3a8:	3167      	adds	r1, #103	; 0x67
                                          Devices[iPIDev].ProductInformation->CertificationLevel,
 800d3aa:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800d3ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d3b2:	6800      	ldr	r0, [r0, #0]
 800d3b4:	69c4      	ldr	r4, [r0, #28]
 800d3b6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800d3ba:	f44f 75ac 	mov.w	r5, #344	; 0x158
 800d3be:	fb05 f000 	mul.w	r0, r5, r0
 800d3c2:	4420      	add	r0, r4
 800d3c4:	6880      	ldr	r0, [r0, #8]
 800d3c6:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
                                          Devices[iPIDev].ProductInformation->LoadEquivalency);
 800d3ca:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800d3ce:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800d3d2:	6824      	ldr	r4, [r4, #0]
 800d3d4:	69e5      	ldr	r5, [r4, #28]
 800d3d6:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800d3da:	f44f 7cac 	mov.w	ip, #344	; 0x158
 800d3de:	fb0c f404 	mul.w	r4, ip, r4
 800d3e2:	442c      	add	r4, r5
 800d3e4:	68a4      	ldr	r4, [r4, #8]
 800d3e6:	f894 4089 	ldrb.w	r4, [r4, #137]	; 0x89
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 800d3ea:	f107 0510 	add.w	r5, r7, #16
 800d3ee:	9404      	str	r4, [sp, #16]
 800d3f0:	9003      	str	r0, [sp, #12]
 800d3f2:	9102      	str	r1, [sp, #8]
 800d3f4:	9201      	str	r2, [sp, #4]
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	4633      	mov	r3, r6
 800d3fa:	4642      	mov	r2, r8
 800d3fc:	4671      	mov	r1, lr
 800d3fe:	4628      	mov	r0, r5
 800d400:	f7fb f9b8 	bl	8008774 <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>
 800d404:	e013      	b.n	800d42e <_ZN9tNMEA200022SendProductInformationEhib+0x266>
    } else {
      SetN2kPGN126996Progmem(RespondMsg,Devices[iPIDev].ProductInformation);
 800d406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d40a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	69da      	ldr	r2, [r3, #28]
 800d412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d416:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d41a:	fb01 f303 	mul.w	r3, r1, r3
 800d41e:	4413      	add	r3, r2
 800d420:	6899      	ldr	r1, [r3, #8]
 800d422:	f107 0310 	add.w	r3, r7, #16
 800d426:	2200      	movs	r2, #0
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff fde3 	bl	800cff4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>
    }
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 800d42e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d432:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d436:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d43a:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 800d43e:	7812      	ldrb	r2, [r2, #0]
 800d440:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetIsTPMessage(UseTP);
 800d442:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d446:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800d44a:	781a      	ldrb	r2, [r3, #0]
 800d44c:	f107 0310 	add.w	r3, r7, #16
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f7fa fcb5 	bl	8007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,iDev) ) {
 800d458:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d45c:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800d460:	f107 0110 	add.w	r1, r7, #16
 800d464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d46c:	6812      	ldr	r2, [r2, #0]
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	f7fd fa04 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d014      	beq.n	800d4a4 <_ZN9tNMEA200022SendProductInformationEhib+0x2dc>
      Devices[iDev].ClearPendingProductInformation();
 800d47a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d47e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	69da      	ldr	r2, [r3, #28]
 800d486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d48a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d494:	fb01 f303 	mul.w	r3, r1, r3
 800d498:	4413      	add	r3, r2
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fa ff69 	bl	8008372 <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>
      return true;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e013      	b.n	800d4cc <_ZN9tNMEA200022SendProductInformationEhib+0x304>
    }

    Devices[iDev].SetPendingProductInformation();
 800d4a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	69da      	ldr	r2, [r3, #28]
 800d4b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d4be:	fb01 f303 	mul.w	r3, r1, r3
 800d4c2:	4413      	add	r3, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fa ff3c 	bl	8008342 <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>
    return false;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4d8 <_ZN9tNMEA200028SendConfigurationInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  return SendConfigurationInformation(0xff,DeviceIndex,false);
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	21ff      	movs	r1, #255	; 0xff
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f805 	bl	800d4f8 <_ZN9tNMEA200028SendConfigurationInformationEhib>
 800d4ee:	4603      	mov	r3, r0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <_ZN9tNMEA200028SendConfigurationInformationEhib>:

bool tNMEA2000::SendConfigurationInformation(unsigned char Destination, int DeviceIndex, bool UseTP) {
 800d4f8:	b590      	push	{r4, r7, lr}
 800d4fa:	b0c7      	sub	sp, #284	; 0x11c
 800d4fc:	af02      	add	r7, sp, #8
 800d4fe:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800d502:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800d506:	6020      	str	r0, [r4, #0]
 800d508:	4608      	mov	r0, r1
 800d50a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800d50e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800d512:	600a      	str	r2, [r1, #0]
 800d514:	4619      	mov	r1, r3
 800d516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d51a:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d51e:	4602      	mov	r2, r0
 800d520:	701a      	strb	r2, [r3, #0]
 800d522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d526:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800d52a:	460a      	mov	r2, r1
 800d52c:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
#endif
  if ( !IsValidDevice(DeviceIndex) ) return false;
 800d52e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d532:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800d536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d53a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d53e:	6811      	ldr	r1, [r2, #0]
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	f7fb f841 	bl	80085c8 <_ZNK9tNMEA200013IsValidDeviceEi>
 800d546:	4603      	mov	r3, r0
 800d548:	f083 0301 	eor.w	r3, r3, #1
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x5e>
 800d552:	2300      	movs	r3, #0
 800d554:	e0a8      	b.n	800d6a8 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b0>
  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800d556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	69da      	ldr	r2, [r3, #28]
 800d562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d566:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d570:	fb01 f303 	mul.w	r3, r1, r3
 800d574:	4413      	add	r3, r2
 800d576:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800d57a:	f107 0014 	add.w	r0, r7, #20
 800d57e:	2300      	movs	r3, #0
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	2300      	movs	r3, #0
 800d584:	2206      	movs	r2, #6
 800d586:	f7f9 faf3 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>

    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 800d58a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d58e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10f      	bne.n	800d5ba <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc2>
         ConfigurationInformation.InstallationDescription1!=0 ||
 800d59a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d107      	bne.n	800d5ba <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc2>
         ConfigurationInformation.InstallationDescription2!=0 ) {
 800d5aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         ConfigurationInformation.InstallationDescription1!=0 ||
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d023      	beq.n	800d602 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x10a>
        SetN2kConfigurationInformation(RespondMsg,
 800d5ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d5c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
                                       ConfigurationInformation.ManufacturerInformation,
                                       ConfigurationInformation.InstallationDescription1,
                                       ConfigurationInformation.InstallationDescription2,
                                       LocalConfigurationInformationData==0);
 800d5de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        SetN2kConfigurationInformation(RespondMsg,
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	bf0c      	ite	eq
 800d5ee:	2301      	moveq	r3, #1
 800d5f0:	2300      	movne	r3, #0
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f107 0014 	add.w	r0, r7, #20
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	4623      	mov	r3, r4
 800d5fc:	f7fb f8d7 	bl	80087ae <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>
 800d600:	e006      	b.n	800d610 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x118>
    } else { // No information provided, so respond not available
      SetN2kPGNISOAcknowledgement(RespondMsg,1,0xff,126998L);
 800d602:	f107 0014 	add.w	r0, r7, #20
 800d606:	4b2b      	ldr	r3, [pc, #172]	; (800d6b4 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1bc>)
 800d608:	22ff      	movs	r2, #255	; 0xff
 800d60a:	2101      	movs	r1, #1
 800d60c:	f7fb f890 	bl	8008730 <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
    }

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 800d610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d614:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    RespondMsg.SetIsTPMessage(UseTP);
 800d61e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d622:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800d626:	781a      	ldrb	r2, [r3, #0]
 800d628:	f107 0314 	add.w	r3, r7, #20
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fa fbc7 	bl	8007dc2 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,DeviceIndex) ) {
 800d634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d638:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800d63c:	f107 0114 	add.w	r1, r7, #20
 800d640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d648:	6812      	ldr	r2, [r2, #0]
 800d64a:	6818      	ldr	r0, [r3, #0]
 800d64c:	f7fd f916 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d014      	beq.n	800d680 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x188>
      Devices[DeviceIndex].ClearPendingConfigurationInformation();
 800d656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d65a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	69da      	ldr	r2, [r3, #28]
 800d662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d666:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d670:	fb01 f303 	mul.w	r3, r1, r3
 800d674:	4413      	add	r3, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7fa feb5 	bl	80083e6 <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>
      return true;
 800d67c:	2301      	movs	r3, #1
 800d67e:	e013      	b.n	800d6a8 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b0>
    }

    Devices[DeviceIndex].SetPendingConfigurationInformation();
 800d680:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	69da      	ldr	r2, [r3, #28]
 800d68c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d690:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d69a:	fb01 f303 	mul.w	r3, r1, r3
 800d69e:	4413      	add	r3, r2
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7fa fe84 	bl	80083ae <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>
    return false;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd90      	pop	{r4, r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	0001f016 	.word	0x0001f016

0800d6b8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>:

//*****************************************************************************
void tNMEA2000::RespondISORequest(const tN2kMsg &N2kMsg, unsigned long RequestedPGN, int iDev) {
 800d6b8:	b590      	push	{r4, r7, lr}
 800d6ba:	b0c7      	sub	sp, #284	; 0x11c
 800d6bc:	af02      	add	r7, sp, #8
 800d6be:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800d6c2:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800d6c6:	6020      	str	r0, [r4, #0]
 800d6c8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800d6cc:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800d6d0:	6001      	str	r1, [r0, #0]
 800d6d2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800d6d6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800d6da:	600a      	str	r2, [r1, #0]
 800d6dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d6e0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800d6e4:	6013      	str	r3, [r2, #0]
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 800d6e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6ea:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d6ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6f6:	6811      	ldr	r1, [r2, #0]
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	f000 fa2d 	bl	800db58 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	f040 80ce 	bne.w	800d8a2 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ea>

    switch (RequestedPGN) {
 800d706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d70a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a67      	ldr	r2, [pc, #412]	; (800d8b0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d06b      	beq.n	800d7ee <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x136>
 800d716:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d71a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a63      	ldr	r2, [pc, #396]	; (800d8b0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d870      	bhi.n	800d808 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 800d726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d72a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a60      	ldr	r2, [pc, #384]	; (800d8b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d04e      	beq.n	800d7d4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x11c>
 800d736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d73a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a5c      	ldr	r2, [pc, #368]	; (800d8b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d860      	bhi.n	800d808 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 800d746:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d74a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800d754:	d008      	beq.n	800d768 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xb0>
 800d756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d75a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 800d764:	d00f      	beq.n	800d786 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xce>
 800d766:	e04f      	b.n	800d808 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
      case 60928L: /*ISO Address Claim*/  // Someone is asking others to claim their addresses
        SendIsoAddressClaim(0xff,iDev);
 800d768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d76c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d770:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d774:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800d778:	2300      	movs	r3, #0
 800d77a:	6812      	ldr	r2, [r2, #0]
 800d77c:	21ff      	movs	r1, #255	; 0xff
 800d77e:	6800      	ldr	r0, [r0, #0]
 800d780:	f7ff f95a 	bl	800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        break;
 800d784:	e090      	b.n	800d8a8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126464L:
        SendTxPGNList(N2kMsg.Source,iDev);
 800d786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	7b19      	ldrb	r1, [r3, #12]
 800d792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d796:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d79a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d79e:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	6812      	ldr	r2, [r2, #0]
 800d7a6:	6800      	ldr	r0, [r0, #0]
 800d7a8:	f7ff f9f8 	bl	800cb9c <_ZN9tNMEA200013SendTxPGNListEhib>
        SendRxPGNList(N2kMsg.Source,iDev);
 800d7ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	7b19      	ldrb	r1, [r3, #12]
 800d7b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7bc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d7c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7c4:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6812      	ldr	r2, [r2, #0]
 800d7cc:	6800      	ldr	r0, [r0, #0]
 800d7ce:	f7ff fafb 	bl	800cdc8 <_ZN9tNMEA200013SendRxPGNListEhib>
        break;
 800d7d2:	e069      	b.n	800d8a8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126996L: /* Product information */
        SendProductInformation(iDev);
 800d7d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7d8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d7dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7e4:	6811      	ldr	r1, [r2, #0]
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	f7ff fcde 	bl	800d1a8 <_ZN9tNMEA200022SendProductInformationEi>
        break;
 800d7ec:	e05c      	b.n	800d8a8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126998L: /* Configuration information */
        SendConfigurationInformation(iDev);
 800d7ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7f2:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d7f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7fe:	6811      	ldr	r1, [r2, #0]
 800d800:	6818      	ldr	r0, [r3, #0]
 800d802:	f7ff fe69 	bl	800d4d8 <_ZN9tNMEA200028SendConfigurationInformationEi>
        break;
 800d806:	e04f      	b.n	800d8a8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      default:
        /* If user has established a handler */
        if (ISORqstHandler!=0) {
 800d808:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d80c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d814:	2b00      	cmp	r3, #0
 800d816:	d019      	beq.n	800d84c <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x194>
          /* and if it handled the request, we are done */
          if (ISORqstHandler(RequestedPGN,N2kMsg.Source,iDev)) {
 800d818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d81c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d824:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d828:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	7b11      	ldrb	r1, [r2, #12]
 800d830:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d834:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800d838:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800d83c:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 800d840:	6812      	ldr	r2, [r2, #0]
 800d842:	6800      	ldr	r0, [r0, #0]
 800d844:	4798      	blx	r3
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d12c      	bne.n	800d8a6 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ee>
            return;
          }
        }

        tN2kMsg   N2kMsgR;
 800d84c:	f107 0014 	add.w	r0, r7, #20
 800d850:	2300      	movs	r3, #0
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	2300      	movs	r3, #0
 800d856:	2206      	movs	r2, #6
 800d858:	210f      	movs	r1, #15
 800d85a:	f7f9 f989 	bl	8006b70 <_ZN7tN2kMsgC1Ehhmi>
        // No user handler, or there was one and it retured FALSE.  Send NAK
        SetN2kPGNISOAcknowledgement(N2kMsgR,1,0xff,RequestedPGN);
 800d85e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d862:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d866:	f107 0014 	add.w	r0, r7, #20
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	22ff      	movs	r2, #255	; 0xff
 800d86e:	2101      	movs	r1, #1
 800d870:	f7fa ff5e 	bl	8008730 <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
        // Direct the response to original requester.
        N2kMsgR.Destination  = N2kMsg.Source;
 800d874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	7b1b      	ldrb	r3, [r3, #12]
 800d880:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        SendMsg(N2kMsgR,iDev);
 800d884:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d888:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d88c:	f107 0114 	add.w	r1, r7, #20
 800d890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	f7fc ffee 	bl	800a87c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d8a0:	e002      	b.n	800d8a8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 800d8a2:	bf00      	nop
 800d8a4:	e000      	b.n	800d8a8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
            return;
 800d8a6:	bf00      	nop
    }
}
 800d8a8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd90      	pop	{r4, r7, pc}
 800d8b0:	0001f016 	.word	0x0001f016
 800d8b4:	0001f014 	.word	0x0001f014

0800d8b8 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISORequest(const tN2kMsg &N2kMsg) {
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  unsigned long RequestedPGN;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	7b5b      	ldrb	r3, [r3, #13]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff f806 	bl	800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800d8ce:	60f8      	str	r0, [r7, #12]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	7b5b      	ldrb	r3, [r3, #13]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7f6 fd9a 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f083 0301 	eor.w	r3, r3, #1
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d005      	beq.n	800d8f2 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ec:	d101      	bne.n	800d8f2 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3c>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d125      	bne.n	800d944 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8c>

    ParseN2kPGNISORequest(N2kMsg,RequestedPGN);
 800d8f8:	f107 0308 	add.w	r3, r7, #8
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6838      	ldr	r0, [r7, #0]
 800d900:	f7fa ff68 	bl	80087d4 <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>
    N2kMsgDbgStart("ISO request: "); N2kMsgDbgln(RequestedPGN);
    if (tNMEA2000::IsBroadcast(N2kMsg.Destination)) { // broadcast -> respond from all devices
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	7b5b      	ldrb	r3, [r3, #13]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f6 fd80 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d010      	beq.n	800d936 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x7e>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondISORequest(N2kMsg,RequestedPGN,iDev);
 800d914:	2300      	movs	r3, #0
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	429a      	cmp	r2, r3
 800d920:	da11      	bge.n	800d946 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fec5 	bl	800d6b8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3301      	adds	r3, #1
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	e7f0      	b.n	800d918 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x60>
    } else {
      RespondISORequest(N2kMsg,RequestedPGN,iDev);
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7ff febb 	bl	800d6b8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 800d942:	e000      	b.n	800d946 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 800d944:	bf00      	nop
    }
}
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// Here we first call callback and if that will not handle function, we use default handler.
void tNMEA2000::RespondGroupFunction(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 800d94c:	b590      	push	{r4, r7, lr}
 800d94e:	b089      	sub	sp, #36	; 0x24
 800d950:	af02      	add	r7, sp, #8
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	603b      	str	r3, [r7, #0]
 800d958:	4613      	mov	r3, r2
 800d95a:	71fb      	strb	r3, [r7, #7]
    // Find group function handler for PGN
    tN2kGroupFunctionHandler *pGroupFunctionHandler;
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d960:	617b      	str	r3, [r7, #20]
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d02c      	beq.n	800d9c2 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      if ( pGroupFunctionHandler->PGN==PGNForGroupFunction ) {
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d10b      	bne.n	800d98a <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x3e>
        // For matching PGN we run handler and exit always
        pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3320      	adds	r3, #32
 800d978:	681c      	ldr	r4, [r3, #0]
 800d97a:	79fa      	ldrb	r2, [r7, #7]
 800d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	68b9      	ldr	r1, [r7, #8]
 800d984:	6978      	ldr	r0, [r7, #20]
 800d986:	47a0      	blx	r4
        return;
 800d988:	e01b      	b.n	800d9c2 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      } else if ( pGroupFunctionHandler->PGN==0 &&
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10f      	bne.n	800d9b2 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
                  pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3320      	adds	r3, #32
 800d998:	681c      	ldr	r4, [r3, #0]
 800d99a:	79fa      	ldrb	r2, [r7, #7]
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	68b9      	ldr	r1, [r7, #8]
 800d9a4:	6978      	ldr	r0, [r7, #20]
 800d9a6:	47a0      	blx	r4
 800d9a8:	4603      	mov	r3, r0
      } else if ( pGroupFunctionHandler->PGN==0 &&
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e000      	b.n	800d9b4 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d103      	bne.n	800d9c0 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x74>
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	617b      	str	r3, [r7, #20]
 800d9be:	e7d0      	b.n	800d962 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x16>
                ) {
        // If handler PGN is 0, we try handler and exit, if it does it. Default handler has PGN=0, but
        // it is at end of list. This allows user to add handlers, which tries to handle all PGNs.
        return;
 800d9c0:	bf00      	nop
      }
    }
}
 800d9c2:	371c      	adds	r7, #28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd90      	pop	{r4, r7, pc}

0800d9c8 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>:

//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// On the document it is not clear can request be send as broadcast, so we handle it, if we can.
void tNMEA2000::HandleGroupFunction(const tN2kMsg &N2kMsg) {
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af02      	add	r7, sp, #8
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  tN2kGroupFunctionCode GroupFunctionCode;
  unsigned long PGNForGroupFunction;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	7b5b      	ldrb	r3, [r3, #13]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7fe ff7e 	bl	800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800d9de:	6178      	str	r0, [r7, #20]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	7b5b      	ldrb	r3, [r3, #13]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f6 fd12 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	f083 0301 	eor.w	r3, r3, #1
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9fc:	d101      	bne.n	800da02 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e000      	b.n	800da04 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3c>
 800da02:	2300      	movs	r3, #0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d133      	bne.n	800da70 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xa8>

    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 800da08:	f107 020c 	add.w	r2, r7, #12
 800da0c:	f107 0313 	add.w	r3, r7, #19
 800da10:	4619      	mov	r1, r3
 800da12:	6838      	ldr	r0, [r7, #0]
 800da14:	f7f7 f80e 	bl	8004a34 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>
 800da18:	4603      	mov	r3, r0
 800da1a:	f083 0301 	eor.w	r3, r3, #1
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d127      	bne.n	800da74 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xac>
    N2kMsgDbgStart("Group function: "); N2kMsgDbgln(PGNForGroupFunction);
    if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) { // broadcast -> respond from all devices
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	7b5b      	ldrb	r3, [r3, #13]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7f6 fcf0 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d013      	beq.n	800da5c <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x94>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 800da34:	2300      	movs	r3, #0
 800da36:	617b      	str	r3, [r7, #20]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a1b      	ldr	r3, [r3, #32]
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	429a      	cmp	r2, r3
 800da40:	da19      	bge.n	800da76 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
 800da42:	7cfa      	ldrb	r2, [r7, #19]
 800da44:	68f9      	ldr	r1, [r7, #12]
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	460b      	mov	r3, r1
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff ff7c 	bl	800d94c <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	3301      	adds	r3, #1
 800da58:	617b      	str	r3, [r7, #20]
 800da5a:	e7ed      	b.n	800da38 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x70>
    } else {
      RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 800da5c:	7cfa      	ldrb	r2, [r7, #19]
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	460b      	mov	r3, r1
 800da66:	6839      	ldr	r1, [r7, #0]
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff ff6f 	bl	800d94c <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 800da6e:	e002      	b.n	800da76 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 800da70:	bf00      	nop
 800da72:	e000      	b.n	800da76 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 800da74:	bf00      	nop
    }
}
 800da76:	3718      	adds	r7, #24
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <_ZN9tNMEA200017StartAddressClaimEi>:
#endif

//*****************************************************************************
void tNMEA2000::StartAddressClaim(int iDev) {
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  if ( IsReadyToSend() ) { // Start address claim automatically
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7fa fdb3 	bl	80085f2 <_ZNK9tNMEA200013IsReadyToSendEv>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d033      	beq.n	800dafa <_ZN9tNMEA200017StartAddressClaimEi+0x7e>
    Devices[iDev].AddressClaimTimer.Disable();
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	69da      	ldr	r2, [r3, #28]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800da9c:	fb01 f303 	mul.w	r3, r1, r3
 800daa0:	4413      	add	r3, r2
 800daa2:	3320      	adds	r3, #32
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fa faab 	bl	8008000 <_ZN13tN2kScheduler7DisableEv>
    if ( (ForwardStream!=0) && ( ForwardType==tNMEA2000::fwdt_Text) ) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d010      	beq.n	800dad4 <_ZN9tNMEA200017StartAddressClaimEi+0x58>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	799b      	ldrb	r3, [r3, #6]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d10c      	bne.n	800dad4 <_ZN9tNMEA200017StartAddressClaimEi+0x58>
      ForwardStream->print(F("Start address claim for device "));
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	4911      	ldr	r1, [pc, #68]	; (800db04 <_ZN9tNMEA200017StartAddressClaimEi+0x88>)
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fa f8aa 	bl	8007c1a <_ZN9N2kStream5printEPKc>
      ForwardStream->println(iDev);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	220a      	movs	r2, #10
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fa f916 	bl	8007d00 <_ZN9N2kStream7printlnEih>
    }
    SendIsoAddressClaim(0xff,iDev);
 800dad4:	2300      	movs	r3, #0
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	21ff      	movs	r1, #255	; 0xff
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7fe ffac 	bl	800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
    Devices[iDev].AddressClaimTimer.FromNow(N2kAddressClaimTimeout);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	69da      	ldr	r2, [r3, #28]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800daea:	fb01 f303 	mul.w	r3, r1, r3
 800daee:	4413      	add	r3, r2
 800daf0:	3320      	adds	r3, #32
 800daf2:	21fa      	movs	r1, #250	; 0xfa
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fa fad0 	bl	800809a <_ZN13tN2kScheduler7FromNowEm>
  }
}
 800dafa:	bf00      	nop
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	08010b20 	.word	0x08010b20

0800db08 <_ZN9tNMEA200017StartAddressClaimEv>:

//*****************************************************************************
void tNMEA2000::StartAddressClaim() {
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++) {
 800db10:	2300      	movs	r3, #0
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a1b      	ldr	r3, [r3, #32]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	da18      	bge.n	800db50 <_ZN9tNMEA200017StartAddressClaimEv+0x48>
    if ( Devices[i].N2kSource==N2kNullCanBusAddress ) GetNextAddress(i,true); // On restart try address claiming from the beginning
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	69da      	ldr	r2, [r3, #28]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800db28:	fb01 f303 	mul.w	r3, r1, r3
 800db2c:	4413      	add	r3, r2
 800db2e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800db32:	2bfe      	cmp	r3, #254	; 0xfe
 800db34:	d104      	bne.n	800db40 <_ZN9tNMEA200017StartAddressClaimEv+0x38>
 800db36:	2201      	movs	r2, #1
 800db38:	68f9      	ldr	r1, [r7, #12]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f9a3 	bl	800de86 <_ZN9tNMEA200014GetNextAddressEib>
    StartAddressClaim(i);
 800db40:	68f9      	ldr	r1, [r7, #12]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff ff9a 	bl	800da7c <_ZN9tNMEA200017StartAddressClaimEi>
  for (int i=0; i<DeviceCount; i++) {
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3301      	adds	r3, #1
 800db4c:	60fb      	str	r3, [r7, #12]
 800db4e:	e7e1      	b.n	800db14 <_ZN9tNMEA200017StartAddressClaimEv+0xc>
  }
}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <_ZN9tNMEA200021IsAddressClaimStartedEi>:

//*****************************************************************************
bool tNMEA2000::IsAddressClaimStarted(int iDev) {
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  // Reset address claim after timeout
  bool result=Devices[iDev].AddressClaimTimer.IsEnabled();
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	69da      	ldr	r2, [r3, #28]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800db6c:	fb01 f303 	mul.w	r3, r1, r3
 800db70:	4413      	add	r3, r2
 800db72:	3320      	adds	r3, #32
 800db74:	4618      	mov	r0, r3
 800db76:	f7fa fa61 	bl	800803c <_ZNK13tN2kScheduler9IsEnabledEv>
 800db7a:	4603      	mov	r3, r0
 800db7c:	73fb      	strb	r3, [r7, #15]
  if ( result ) {
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d027      	beq.n	800dbd4 <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
    if ( Devices[iDev].AddressClaimTimer.IsTime() ) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	69da      	ldr	r2, [r3, #28]
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800db8e:	fb01 f303 	mul.w	r3, r1, r3
 800db92:	4413      	add	r3, r2
 800db94:	3320      	adds	r3, #32
 800db96:	4618      	mov	r0, r3
 800db98:	f7fa fa61 	bl	800805e <_ZNK13tN2kScheduler6IsTimeEv>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d018      	beq.n	800dbd4 <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
      Devices[iDev].AddressClaimTimer.Disable();
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	69da      	ldr	r2, [r3, #28]
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dbac:	fb01 f303 	mul.w	r3, r1, r3
 800dbb0:	4413      	add	r3, r2
 800dbb2:	3320      	adds	r3, #32
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fa fa23 	bl	8008000 <_ZN13tN2kScheduler7DisableEv>
      result=false;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	73fb      	strb	r3, [r7, #15]
      // We have claimed our address, so save end source for next possible claim run.
      Devices[iDev].UpdateAddressClaimEndSource();
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	69da      	ldr	r2, [r3, #28]
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dbc8:	fb01 f303 	mul.w	r3, r1, r3
 800dbcc:	4413      	add	r3, r2
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fa fc27 	bl	8008422 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    }
  }

  return result;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISOAddressClaim(const tN2kMsg &N2kMsg) {
 800dbde:	b590      	push	{r4, r7, lr}
 800dbe0:	b089      	sub	sp, #36	; 0x24
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	6039      	str	r1, [r7, #0]
  int iDev=FindSourceDeviceIndex(N2kMsg.Source);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	7b1b      	ldrb	r3, [r3, #12]
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7fe fe73 	bl	800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800dbf4:	61f8      	str	r0, [r7, #28]
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	7b1b      	ldrb	r3, [r3, #12]
 800dbfa:	2bfe      	cmp	r3, #254	; 0xfe
 800dbfc:	d073      	beq.n	800dce6 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x108>
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc04:	d06f      	beq.n	800dce6 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x108>

  int Index=0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	60fb      	str	r3, [r7, #12]
  uint64_t CallerName=N2kMsg.GetUInt64(Index);
 800dc0a:	f107 010c 	add.w	r1, r7, #12
 800dc0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc16:	6838      	ldr	r0, [r7, #0]
 800dc18:	f7f9 f9b5 	bl	8006f86 <_ZNK7tN2kMsg9GetUInt64ERiy>
 800dc1c:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (Devices[iDev].DeviceInformation.GetName()<CallerName) { // We can keep our address, so just reclaim it
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	69da      	ldr	r2, [r3, #28]
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dc2a:	fb01 f303 	mul.w	r3, r1, r3
 800dc2e:	4413      	add	r3, r2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f6 fbdf 	bl	80043f4 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 800dc36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dc3a:	4290      	cmp	r0, r2
 800dc3c:	eb71 0303 	sbcs.w	r3, r1, r3
 800dc40:	bf34      	ite	cc
 800dc42:	2301      	movcc	r3, #1
 800dc44:	2300      	movcs	r3, #0
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d006      	beq.n	800dc5a <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x7c>
      SendIsoAddressClaim(0xff,iDev);
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	69fa      	ldr	r2, [r7, #28]
 800dc50:	21ff      	movs	r1, #255	; 0xff
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7fe fef0 	bl	800ca38 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 800dc58:	e046      	b.n	800dce8 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x10a>
    } else { // we have to try an other address
      if ( Devices[iDev].DeviceInformation.GetName()==CallerName && IsAddressClaimStarted(iDev) ) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	69da      	ldr	r2, [r3, #28]
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dc64:	fb01 f303 	mul.w	r3, r1, r3
 800dc68:	4413      	add	r3, r2
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7f6 fbc2 	bl	80043f4 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 800dc70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dc74:	428b      	cmp	r3, r1
 800dc76:	bf08      	it	eq
 800dc78:	4282      	cmpeq	r2, r0
 800dc7a:	d108      	bne.n	800dc8e <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb0>
 800dc7c:	69f9      	ldr	r1, [r7, #28]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff ff6a 	bl	800db58 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb0>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e000      	b.n	800dc90 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb2>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d01e      	beq.n	800dcd2 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xf4>
        // If the name is same, then the first instance will get claim and change its address.
        // This should not happen, if user takes care of setting unique ID for device information.
        // If he does not there is no problem with this class, but e.g. Garmin gets crazy.
        // Try to solve situation by changing our device instance.
        Devices[iDev].DeviceInformation.SetDeviceInstance(Devices[iDev].DeviceInformation.GetDeviceInstance()+1);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	69da      	ldr	r2, [r3, #28]
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dc9e:	fb01 f303 	mul.w	r3, r1, r3
 800dca2:	4413      	add	r3, r2
 800dca4:	461c      	mov	r4, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	69da      	ldr	r2, [r3, #28]
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dcb0:	fb01 f303 	mul.w	r3, r1, r3
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fa fa3e 	bl	8008138 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f7fa fa29 	bl	800811c <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
        DeviceInformationChanged=true;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2201      	movs	r2, #1
 800dcce:	769a      	strb	r2, [r3, #26]
 800dcd0:	e004      	b.n	800dcdc <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xfe>
      } else {
        GetNextAddress(iDev);
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	69f9      	ldr	r1, [r7, #28]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f8d5 	bl	800de86 <_ZN9tNMEA200014GetNextAddressEib>
      }
      StartAddressClaim(iDev);
 800dcdc:	69f9      	ldr	r1, [r7, #28]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff fecc 	bl	800da7c <_ZN9tNMEA200017StartAddressClaimEi>
 800dce4:	e000      	b.n	800dce8 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x10a>
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 800dce6:	bf00      	nop
    }
}
 800dce8:	3724      	adds	r7, #36	; 0x24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd90      	pop	{r4, r7, pc}

0800dcee <_ZN9tNMEA200022HandleCommandedAddressEyhi>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(uint64_t CommandedName, unsigned char NewAddress, int iDev) {
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	60f8      	str	r0, [r7, #12]
 800dcf6:	e9c7 2300 	strd	r2, r3, [r7]
  if ( IsBroadcast(NewAddress) ) return;
 800dcfa:	7e3b      	ldrb	r3, [r7, #24]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f6 fb86 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d140      	bne.n	800dd8a <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9c>
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	69da      	ldr	r2, [r3, #28]
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dd12:	fb01 f303 	mul.w	r3, r1, r3
 800dd16:	4413      	add	r3, r2
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7f6 fb6b 	bl	80043f4 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 800dd1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd22:	428b      	cmp	r3, r1
 800dd24:	bf08      	it	eq
 800dd26:	4282      	cmpeq	r2, r0
 800dd28:	d10e      	bne.n	800dd48 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
      Devices[iDev].N2kSource!=NewAddress) { // We have been commanded to set our address
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	69da      	ldr	r2, [r3, #28]
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dd34:	fb01 f303 	mul.w	r3, r1, r3
 800dd38:	4413      	add	r3, r2
 800dd3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 800dd3e:	7e3a      	ldrb	r2, [r7, #24]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d001      	beq.n	800dd48 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
 800dd44:	2301      	movs	r3, #1
 800dd46:	e000      	b.n	800dd4a <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5c>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d01e      	beq.n	800dd8c <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9e>
    Devices[iDev].N2kSource=NewAddress;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	69da      	ldr	r2, [r3, #28]
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dd58:	fb01 f303 	mul.w	r3, r1, r3
 800dd5c:	4413      	add	r3, r2
 800dd5e:	7e3a      	ldrb	r2, [r7, #24]
 800dd60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    Devices[iDev].UpdateAddressClaimEndSource();
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	69da      	ldr	r2, [r3, #28]
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dd6e:	fb01 f303 	mul.w	r3, r1, r3
 800dd72:	4413      	add	r3, r2
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fa fb54 	bl	8008422 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    StartAddressClaim(iDev);
 800dd7a:	69f9      	ldr	r1, [r7, #28]
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fe7d 	bl	800da7c <_ZN9tNMEA200017StartAddressClaimEi>
    AddressChanged=true;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2201      	movs	r2, #1
 800dd86:	765a      	strb	r2, [r3, #25]
 800dd88:	e000      	b.n	800dd8c <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9e>
  if ( IsBroadcast(NewAddress) ) return;
 800dd8a:	bf00      	nop
  }
}
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(const tN2kMsg &N2kMsg) {
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b08a      	sub	sp, #40	; 0x28
 800dd96:	af02      	add	r7, sp, #8
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	6039      	str	r1, [r7, #0]
  N2kMsgDbgStart(" Commanded address:"); N2kMsgDbgln(N2kMsg.Destination);

  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d10c      	bne.n	800ddc2 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 800dda8:	6838      	ldr	r0, [r7, #0]
 800ddaa:	f7f7 f851 	bl	8004e50 <_ZNK7tN2kMsg11IsTPMessageEv>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f083 0301 	eor.w	r3, r3, #1
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	2b09      	cmp	r3, #9
 800ddc0:	d001      	beq.n	800ddc6 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x34>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e000      	b.n	800ddc8 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x36>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d154      	bne.n	800de76 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe4>

  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	7b5b      	ldrb	r3, [r3, #13]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7fe fd81 	bl	800c8da <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800ddd8:	61f8      	str	r0, [r7, #28]
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	7b5b      	ldrb	r3, [r3, #13]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f6 fb15 	bl	800440e <_ZN9tNMEA200011IsBroadcastEh>
 800dde4:	4603      	mov	r3, r0
 800dde6:	f083 0301 	eor.w	r3, r3, #1
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d005      	beq.n	800ddfc <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddf6:	d101      	bne.n	800ddfc <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e000      	b.n	800ddfe <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6c>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d13b      	bne.n	800de7a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe8>

  int Index=0;
 800de02:	2300      	movs	r3, #0
 800de04:	60bb      	str	r3, [r7, #8]
  uint64_t CommandedName=N2kMsg.GetUInt64(Index);
 800de06:	f107 0108 	add.w	r1, r7, #8
 800de0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de12:	6838      	ldr	r0, [r7, #0]
 800de14:	f7f9 f8b7 	bl	8006f86 <_ZNK7tN2kMsg9GetUInt64ERiy>
 800de18:	e9c7 0104 	strd	r0, r1, [r7, #16]
  unsigned char NewAddress=N2kMsg.GetByte(Index);
 800de1c:	f107 0308 	add.w	r3, r7, #8
 800de20:	4619      	mov	r1, r3
 800de22:	6838      	ldr	r0, [r7, #0]
 800de24:	f7f9 f846 	bl	8006eb4 <_ZNK7tN2kMsg7GetByteERi>
 800de28:	4603      	mov	r3, r0
 800de2a:	73fb      	strb	r3, [r7, #15]
  if  ( NewAddress>=252 ) return;
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	2bfb      	cmp	r3, #251	; 0xfb
 800de30:	d825      	bhi.n	800de7e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xec>

  if ( iDev==-1 ) {
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de38:	d113      	bne.n	800de62 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xd0>
    for (iDev=0; iDev<DeviceCount; iDev++) HandleCommandedAddress(CommandedName,NewAddress,iDev);
 800de3a:	2300      	movs	r3, #0
 800de3c:	61fb      	str	r3, [r7, #28]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	69fa      	ldr	r2, [r7, #28]
 800de44:	429a      	cmp	r2, r3
 800de46:	da1b      	bge.n	800de80 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7ff ff4a 	bl	800dcee <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	3301      	adds	r3, #1
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	e7ed      	b.n	800de3e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xac>
  } else {
    HandleCommandedAddress(CommandedName,NewAddress,iDev);
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	9301      	str	r3, [sp, #4]
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ff3d 	bl	800dcee <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 800de74:	e004      	b.n	800de80 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 800de76:	bf00      	nop
 800de78:	e002      	b.n	800de80 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 800de7a:	bf00      	nop
 800de7c:	e000      	b.n	800de80 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if  ( NewAddress>=252 ) return;
 800de7e:	bf00      	nop
  }
}
 800de80:	3720      	adds	r7, #32
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <_ZN9tNMEA200014GetNextAddressEib>:
  DeviceInformationChanged=false;
  return result;
}

//*****************************************************************************
void tNMEA2000::GetNextAddress(int DeviceIndex, bool RestartAtEnd) {
 800de86:	b580      	push	{r7, lr}
 800de88:	b086      	sub	sp, #24
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	60f8      	str	r0, [r7, #12]
 800de8e:	60b9      	str	r1, [r7, #8]
 800de90:	4613      	mov	r3, r2
 800de92:	71fb      	strb	r3, [r7, #7]
  bool FoundSame;
  // Currently simply add address
  // Note that 251 is the last source. We do not send data if address is higher than that.

  do {
    if ( Devices[DeviceIndex].N2kSource==N2kNullCanBusAddress ) {
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	69da      	ldr	r2, [r3, #28]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800de9e:	fb01 f303 	mul.w	r3, r1, r3
 800dea2:	4413      	add	r3, r2
 800dea4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dea8:	2bfe      	cmp	r3, #254	; 0xfe
 800deaa:	d11a      	bne.n	800dee2 <_ZN9tNMEA200014GetNextAddressEib+0x5c>
      if ( RestartAtEnd ) {
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f000 8097 	beq.w	800dfe2 <_ZN9tNMEA200014GetNextAddressEib+0x15c>
        // For null address start from beginning.
        Devices[DeviceIndex].N2kSource=14;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	69da      	ldr	r2, [r3, #28]
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800debe:	fb01 f303 	mul.w	r3, r1, r3
 800dec2:	4413      	add	r3, r2
 800dec4:	220e      	movs	r2, #14
 800dec6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        Devices[DeviceIndex].UpdateAddressClaimEndSource();
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	69da      	ldr	r2, [r3, #28]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ded4:	fb01 f303 	mul.w	r3, r1, r3
 800ded8:	4413      	add	r3, r2
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fa faa1 	bl	8008422 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
 800dee0:	e04a      	b.n	800df78 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
      } else return;
    } else if (Devices[DeviceIndex].N2kSource!=Devices[DeviceIndex].AddressClaimEndSource) {
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	69da      	ldr	r2, [r3, #28]
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800deec:	fb01 f303 	mul.w	r3, r1, r3
 800def0:	4413      	add	r3, r2
 800def2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	69d9      	ldr	r1, [r3, #28]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800df00:	fb00 f303 	mul.w	r3, r0, r3
 800df04:	440b      	add	r3, r1
 800df06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d025      	beq.n	800df5a <_ZN9tNMEA200014GetNextAddressEib+0xd4>
      Devices[DeviceIndex].N2kSource++;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	69da      	ldr	r2, [r3, #28]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800df18:	fb01 f303 	mul.w	r3, r1, r3
 800df1c:	4413      	add	r3, r2
 800df1e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800df22:	3201      	adds	r2, #1
 800df24:	b2d2      	uxtb	r2, r2
 800df26:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      // Roll to start?
      if ( Devices[DeviceIndex].N2kSource>N2kMaxCanBusAddress ) Devices[DeviceIndex].N2kSource=0;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	69da      	ldr	r2, [r3, #28]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800df34:	fb01 f303 	mul.w	r3, r1, r3
 800df38:	4413      	add	r3, r2
 800df3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df3e:	2bfb      	cmp	r3, #251	; 0xfb
 800df40:	d91a      	bls.n	800df78 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	69da      	ldr	r2, [r3, #28]
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800df4c:	fb01 f303 	mul.w	r3, r1, r3
 800df50:	4413      	add	r3, r2
 800df52:	2200      	movs	r2, #0
 800df54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800df58:	e00e      	b.n	800df78 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
    } else {
      Devices[DeviceIndex].N2kSource=N2kNullCanBusAddress; // Force null address = cannot claim address
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	69da      	ldr	r2, [r3, #28]
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800df64:	fb01 f303 	mul.w	r3, r1, r3
 800df68:	4413      	add	r3, r2
 800df6a:	22fe      	movs	r2, #254	; 0xfe
 800df6c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      AddressChanged=true;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	765a      	strb	r2, [r3, #25]
      return;
 800df76:	e035      	b.n	800dfe4 <_ZN9tNMEA200014GetNextAddressEib+0x15e>
    }
    FoundSame=false;
 800df78:	2300      	movs	r3, #0
 800df7a:	75fb      	strb	r3, [r7, #23]
    // Check that we do not have same on our list
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 800df7c:	2300      	movs	r3, #0
 800df7e:	613b      	str	r3, [r7, #16]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6a1b      	ldr	r3, [r3, #32]
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	429a      	cmp	r2, r3
 800df88:	da23      	bge.n	800dfd2 <_ZN9tNMEA200014GetNextAddressEib+0x14c>
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d120      	bne.n	800dfd2 <_ZN9tNMEA200014GetNextAddressEib+0x14c>
      if (i!=DeviceIndex) FoundSame=(Devices[DeviceIndex].N2kSource==Devices[i].N2kSource);
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	429a      	cmp	r2, r3
 800df96:	d018      	beq.n	800dfca <_ZN9tNMEA200014GetNextAddressEib+0x144>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	69da      	ldr	r2, [r3, #28]
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dfa2:	fb01 f303 	mul.w	r3, r1, r3
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	69d9      	ldr	r1, [r3, #28]
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800dfb6:	fb00 f303 	mul.w	r3, r0, r3
 800dfba:	440b      	add	r3, r1
 800dfbc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	bf0c      	ite	eq
 800dfc4:	2301      	moveq	r3, #1
 800dfc6:	2300      	movne	r3, #0
 800dfc8:	75fb      	strb	r3, [r7, #23]
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	613b      	str	r3, [r7, #16]
 800dfd0:	e7d6      	b.n	800df80 <_ZN9tNMEA200014GetNextAddressEib+0xfa>
  do {
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d000      	beq.n	800dfda <_ZN9tNMEA200014GetNextAddressEib+0x154>
 800dfd8:	e75c      	b.n	800de94 <_ZN9tNMEA200014GetNextAddressEib+0xe>
    }
  } while (FoundSame);
  AddressChanged=true;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	765a      	strb	r2, [r3, #25]
 800dfe0:	e000      	b.n	800dfe4 <_ZN9tNMEA200014GetNextAddressEib+0x15e>
      } else return;
 800dfe2:	bf00      	nop
}
 800dfe4:	3718      	adds	r7, #24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <_ZN9tNMEA200027HandleReceivedSystemMessageEi>:

//*****************************************************************************
bool tNMEA2000::HandleReceivedSystemMessage(int MsgIndex) {
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  bool result=false;
 800dff6:	2300      	movs	r3, #0
 800dff8:	73fb      	strb	r3, [r7, #15]

   if ( N2kMode==N2km_SendOnly || N2kMode==N2km_ListenAndSend ) return result;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	795b      	ldrb	r3, [r3, #5]
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d003      	beq.n	800e00a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x1e>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	795b      	ldrb	r3, [r3, #5]
 800e006:	2b04      	cmp	r3, #4
 800e008:	d101      	bne.n	800e00e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x22>
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	e07c      	b.n	800e108 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11c>

    if ( N2kCANMsgBuf[MsgIndex].SystemMessage ) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	4613      	mov	r3, r2
 800e016:	019b      	lsls	r3, r3, #6
 800e018:	4413      	add	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	440b      	add	r3, r1
 800e01e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800e022:	2b00      	cmp	r3, #0
 800e024:	d06f      	beq.n	800e106 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11a>
      if ( ForwardSystemMessages() ) ForwardMessage(N2kCANMsgBuf[MsgIndex].N2kMsg);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7fa fa72 	bl	8008510 <_ZNK9tNMEA200021ForwardSystemMessagesEv>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00b      	beq.n	800e04a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x5e>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	4613      	mov	r3, r2
 800e03a:	019b      	lsls	r3, r3, #6
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	440b      	add	r3, r1
 800e042:	4619      	mov	r1, r3
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7fe fc90 	bl	800c96a <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      if ( N2kMode!=N2km_ListenOnly ) { // Note that in listen only mode we will not inform us to the bus
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	795b      	ldrb	r3, [r3, #5]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d057      	beq.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
        switch (N2kCANMsgBuf[MsgIndex].N2kMsg.PGN) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	4613      	mov	r3, r2
 800e05a:	019b      	lsls	r3, r3, #6
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	440b      	add	r3, r1
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	4a2a      	ldr	r2, [pc, #168]	; (800e110 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d03d      	beq.n	800e0e6 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xfa>
 800e06a:	4a29      	ldr	r2, [pc, #164]	; (800e110 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d848      	bhi.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 800e070:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 800e074:	4293      	cmp	r3, r2
 800e076:	d029      	beq.n	800e0cc <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xe0>
 800e078:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d840      	bhi.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 800e080:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800e084:	d015      	beq.n	800e0b2 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xc6>
 800e086:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800e08a:	d83a      	bhi.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 800e08c:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 800e090:	d036      	beq.n	800e100 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x114>
 800e092:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 800e096:	d134      	bne.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 59392L: /*ISO Acknowledgement*/
            break;
          case 59904L: /*ISO Request*/
            HandleISORequest(N2kCANMsgBuf[MsgIndex].N2kMsg);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	019b      	lsls	r3, r3, #6
 800e0a2:	4413      	add	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	440b      	add	r3, r1
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff fc04 	bl	800d8b8 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>
            break;
 800e0b0:	e027      	b.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 60928L: /*ISO Address Claim*/
            HandleISOAddressClaim(N2kCANMsgBuf[MsgIndex].N2kMsg);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	019b      	lsls	r3, r3, #6
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	440b      	add	r3, r1
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff fd8a 	bl	800dbde <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>
            break;
 800e0ca:	e01a      	b.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 65240L: /*Commanded Address*/
            HandleCommandedAddress(N2kCANMsgBuf[MsgIndex].N2kMsg);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	019b      	lsls	r3, r3, #6
 800e0d6:	4413      	add	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	440b      	add	r3, r1
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7ff fe57 	bl	800dd92 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>
            break;
 800e0e4:	e00d      	b.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
          case 126208L: /*NMEA Request/Command/Acknowledge group function*/
            HandleGroupFunction(N2kCANMsgBuf[MsgIndex].N2kMsg);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	019b      	lsls	r3, r3, #6
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	440b      	add	r3, r1
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fc65 	bl	800d9c8 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>
            break;
 800e0fe:	e000      	b.n	800e102 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
            break;
 800e100:	bf00      	nop
#endif
        }
      }
      result=true;
 800e102:	2301      	movs	r3, #1
 800e104:	73fb      	strb	r3, [r7, #15]
    }

  return result;
 800e106:	7bfb      	ldrb	r3, [r7, #15]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3710      	adds	r7, #16
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	0001ed00 	.word	0x0001ed00

0800e114 <_ZN9tNMEA200013ParseMessagesEv>:

//*****************************************************************************
void tNMEA2000::ParseMessages() {
 800e114:	b590      	push	{r4, r7, lr}
 800e116:	b089      	sub	sp, #36	; 0x24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
    unsigned long canId;
    unsigned char len = 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    uint8_t MsgIndex;
    static const int MaxReadFramesOnParse=20;
    int FramesRead=0;
 800e120:	2300      	movs	r3, #0
 800e122:	61fb      	str	r3, [r7, #28]
//    tN2kMsg N2kMsg;

    if ( OpenState!=os_Open ) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7e1b      	ldrb	r3, [r3, #24]
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d011      	beq.n	800e150 <_ZN9tNMEA200013ParseMessagesEv+0x3c>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7fb fe97 	bl	8009e60 <_ZN9tNMEA20004OpenEv>
 800e132:	4603      	mov	r3, r0
 800e134:	f083 0301 	eor.w	r3, r3, #1
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d103      	bne.n	800e146 <_ZN9tNMEA200013ParseMessagesEv+0x32>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	7e1b      	ldrb	r3, [r3, #24]
 800e142:	2b03      	cmp	r3, #3
 800e144:	d001      	beq.n	800e14a <_ZN9tNMEA200013ParseMessagesEv+0x36>
 800e146:	2301      	movs	r3, #1
 800e148:	e000      	b.n	800e14c <_ZN9tNMEA200013ParseMessagesEv+0x38>
 800e14a:	2300      	movs	r3, #0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d166      	bne.n	800e21e <_ZN9tNMEA200013ParseMessagesEv+0x10a>
    }

    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	791b      	ldrb	r3, [r3, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d164      	bne.n	800e222 <_ZN9tNMEA200013ParseMessagesEv+0x10e>

    SendFrames();
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7fc f848 	bl	800a1ee <_ZN9tNMEA200010SendFramesEv>
    SendPendingInformation();
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7fc fb26 	bl	800a7b0 <_ZN9tNMEA200022SendPendingInformationEv>
#if defined(DEBUG_NMEA2000_ISR)
    TestISR();
#endif

    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	2b13      	cmp	r3, #19
 800e168:	dc10      	bgt.n	800e18c <_ZN9tNMEA200013ParseMessagesEv+0x78>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	3308      	adds	r3, #8
 800e170:	681c      	ldr	r4, [r3, #0]
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	f107 0213 	add.w	r2, r7, #19
 800e17a:	f107 0114 	add.w	r1, r7, #20
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	47a0      	blx	r4
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d001      	beq.n	800e18c <_ZN9tNMEA200013ParseMessagesEv+0x78>
 800e188:	2301      	movs	r3, #1
 800e18a:	e000      	b.n	800e18e <_ZN9tNMEA200013ParseMessagesEv+0x7a>
 800e18c:	2300      	movs	r3, #0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d040      	beq.n	800e214 <_ZN9tNMEA200013ParseMessagesEv+0x100>
        FramesRead++;
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	3301      	adds	r3, #1
 800e196:	61fb      	str	r3, [r7, #28]
        N2kMsgDbgStart("Received frame, can ID:"); N2kMsgDbg(canId); N2kMsgDbg(" len:"); N2kMsgDbg(len); N2kMsgDbg(" data:"); DbgPrintBuf(len,buf,false); N2kMsgDbgln();
        MsgIndex=SetN2kCANBufMsg(canId,len,buf);
 800e198:	6979      	ldr	r1, [r7, #20]
 800e19a:	7cfa      	ldrb	r2, [r7, #19]
 800e19c:	f107 0308 	add.w	r3, r7, #8
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7fe f9c4 	bl	800c52e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	76fb      	strb	r3, [r7, #27]
        if (MsgIndex<MaxN2kCANMsgs) {
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e1b0:	7efa      	ldrb	r2, [r7, #27]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d2d6      	bcs.n	800e164 <_ZN9tNMEA200013ParseMessagesEv+0x50>
          if ( !HandleReceivedSystemMessage(MsgIndex) ) {
 800e1b6:	7efb      	ldrb	r3, [r7, #27]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff ff16 	bl	800dfec <_ZN9tNMEA200027HandleReceivedSystemMessageEi>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	f083 0301 	eor.w	r3, r3, #1
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00b      	beq.n	800e1e4 <_ZN9tNMEA200013ParseMessagesEv+0xd0>
            N2kMsgDbgStart(" - Non system message, MsgIndex: "); N2kMsgDbgln(MsgIndex);
            ForwardMessage(N2kCANMsgBuf[MsgIndex]);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e1d0:	7efa      	ldrb	r2, [r7, #27]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	019b      	lsls	r3, r3, #6
 800e1d6:	4413      	add	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	440b      	add	r3, r1
 800e1dc:	4619      	mov	r1, r3
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f7fe fc09 	bl	800c9f6 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>
          }
//          N2kCANMsgBuf[MsgIndex].N2kMsg.Print(Serial);
          RunMessageHandlers(N2kCANMsgBuf[MsgIndex].N2kMsg);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e1e8:	7efa      	ldrb	r2, [r7, #27]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	019b      	lsls	r3, r3, #6
 800e1ee:	4413      	add	r3, r2
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	440b      	add	r3, r1
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f817 	bl	800e22a <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>
          N2kCANMsgBuf[MsgIndex].FreeMessage();
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e200:	7efa      	ldrb	r2, [r7, #27]
 800e202:	4613      	mov	r3, r2
 800e204:	019b      	lsls	r3, r3, #6
 800e206:	4413      	add	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	440b      	add	r3, r1
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f9 fe33 	bl	8007e78 <_ZN10tN2kCANMsg11FreeMessageEv>
    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 800e212:	e7a7      	b.n	800e164 <_ZN9tNMEA200013ParseMessagesEv+0x50>
          N2kMsgDbgStart(" - Free message, MsgIndex: "); N2kMsgDbg(MsgIndex); N2kMsgDbgln();
        }
    }

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
    SendHeartbeat();
 800e214:	2100      	movs	r1, #0
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fc f9a0 	bl	800a55c <_ZN9tNMEA200013SendHeartbeatEb>
 800e21c:	e002      	b.n	800e224 <_ZN9tNMEA200013ParseMessagesEv+0x110>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 800e21e:	bf00      	nop
 800e220:	e000      	b.n	800e224 <_ZN9tNMEA200013ParseMessagesEv+0x110>
    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 800e222:	bf00      	nop
#endif
}
 800e224:	3724      	adds	r7, #36	; 0x24
 800e226:	46bd      	mov	sp, r7
 800e228:	bd90      	pop	{r4, r7, pc}

0800e22a <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::RunMessageHandlers(const tN2kMsg &N2kMsg) {
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	6039      	str	r1, [r7, #0]
  if ( MsgHandler!=0 ) MsgHandler(N2kMsg);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d003      	beq.n	800e244 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x1a>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	4798      	blx	r3

  tMsgHandler *MsgHandler=MsgHandlers;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	60fb      	str	r3, [r7, #12]
  // Loop through all pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()==0; MsgHandler=MsgHandler->pNext) MsgHandler->HandleMsg(N2kMsg);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d007      	beq.n	800e260 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f7f9 ffce 	bl	80081f2 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e000      	b.n	800e262 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x38>
 800e260:	2300      	movs	r3, #0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d009      	beq.n	800e27a <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	4798      	blx	r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	e7e7      	b.n	800e24a <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x20>
  // Loop through specific pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d009      	beq.n	800e294 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f7f9 ffb6 	bl	80081f2 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 800e286:	4602      	mov	r2, r0
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d801      	bhi.n	800e294 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 800e290:	2301      	movs	r3, #1
 800e292:	e000      	b.n	800e296 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6c>
 800e294:	2300      	movs	r3, #0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d016      	beq.n	800e2c8 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x9e>
    if ( MsgHandler->GetPGN()==N2kMsg.PGN ) MsgHandler->HandleMsg(N2kMsg);
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7f9 ffa9 	bl	80081f2 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	bf0c      	ite	eq
 800e2aa:	2301      	moveq	r3, #1
 800e2ac:	2300      	movne	r3, #0
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d005      	beq.n	800e2c0 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x96>
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	4798      	blx	r3
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	60fb      	str	r3, [r7, #12]
 800e2c6:	e7d8      	b.n	800e27a <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
  }
}
 800e2c8:	bf00      	nop
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <_ZN9tNMEA20009SetOnOpenEPFvvE>:

//*****************************************************************************
void tNMEA2000::SetOnOpen(void (*_OnOpen)()) {
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
  OnOpen=_OnOpen;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	683a      	ldr	r2, [r7, #0]
 800e2de:	659a      	str	r2, [r3, #88]	; 0x58
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bc80      	pop	{r7}
 800e2e8:	4770      	bx	lr

0800e2ea <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:
  ISORqstHandler=ISORequestHandler;
}

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
void tNMEA2000::RemoveGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 800e2ea:	b480      	push	{r7}
 800e2ec:	b085      	sub	sp, #20
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d02b      	beq.n	800e352 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d027      	beq.n	800e352 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>

  tN2kGroupFunctionHandler* pPrevGroupFunctionHandler=pGroupFunctionHandlers;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e306:	60fb      	str	r3, [r7, #12]
  // Handle, if first
  if ( pPrevGroupFunctionHandler==pGroupFunctionHandler ) {
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d104      	bne.n	800e31a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    pGroupFunctionHandlers=pPrevGroupFunctionHandler->pNext;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	685a      	ldr	r2, [r3, #4]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	665a      	str	r2, [r3, #100]	; 0x64
 800e318:	e017      	b.n	800e34a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
  } else {
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d008      	beq.n	800e332 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d003      	beq.n	800e332 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pPrevGroupFunctionHandler = pPrevGroupFunctionHandler->pNext);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	60fb      	str	r3, [r7, #12]
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 800e330:	e7f3      	b.n	800e31a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    if ( pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext==pGroupFunctionHandler ) {
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d008      	beq.n	800e34a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	683a      	ldr	r2, [r7, #0]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d103      	bne.n	800e34a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
      pPrevGroupFunctionHandler->pNext=pGroupFunctionHandler->pNext;
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	605a      	str	r2, [r3, #4]
    }
  }
  pGroupFunctionHandler->pNext=0;
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2200      	movs	r2, #0
 800e34e:	605a      	str	r2, [r3, #4]
 800e350:	e000      	b.n	800e354 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 800e352:	bf00      	nop
}
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	bc80      	pop	{r7}
 800e35a:	4770      	bx	lr

0800e35c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:

//*****************************************************************************
void tNMEA2000::AddGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0) return;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d02c      	beq.n	800e3c6 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  RemoveGroupFunctionHandler(pGroupFunctionHandler);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff ffbb 	bl	800e2ea <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
  // Add to the end on the list
  if ( pGroupFunctionHandlers==0 ) { // If there is none set, put it to first
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d103      	bne.n	800e384 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x28>
    pGroupFunctionHandlers=pGroupFunctionHandler;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	665a      	str	r2, [r3, #100]	; 0x64
 800e382:	e021      	b.n	800e3c8 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  } else {
    tN2kGroupFunctionHandler* pLastGroupFunctionHandler;
    // find last
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e388:	60fb      	str	r3, [r7, #12]
      pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN != 0;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d008      	beq.n	800e3a4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d003      	beq.n	800e3a4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pLastGroupFunctionHandler = pLastGroupFunctionHandler->pNext);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	60fb      	str	r3, [r7, #12]
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 800e3a2:	e7f2      	b.n	800e38a <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x2e>
    // Insert the new handler before the default handler if the default handler is present.
    if ( pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN == 0 ) {
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d008      	beq.n	800e3be <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d103      	bne.n	800e3be <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
      pGroupFunctionHandler->pNext = pLastGroupFunctionHandler->pNext;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	605a      	str	r2, [r3, #4]
    }
    // Add the new handler to the list.
    pLastGroupFunctionHandler->pNext = pGroupFunctionHandler;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	605a      	str	r2, [r3, #4]
 800e3c4:	e000      	b.n	800e3c8 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  if (pGroupFunctionHandler==0) return;
 800e3c6:	bf00      	nop
  }
}
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <_Z14SetN2kPGN59392R7tN2kMsghhm>:
#endif

//*****************************************************************************
/// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	607b      	str	r3, [r7, #4]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	72fb      	strb	r3, [r7, #11]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	72bb      	strb	r3, [r7, #10]
    N2kMsg.SetPGN(59392L);
 800e3e0:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7f8 fbf5 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2206      	movs	r2, #6
 800e3ee:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddByte(Control);
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7f8 fd2d 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(GroupFunction);
 800e3fa:	7abb      	ldrb	r3, [r7, #10]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	68f8      	ldr	r0, [r7, #12]
 800e400:	f7f8 fd28 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 800e404:	21ff      	movs	r1, #255	; 0xff
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7f8 fd24 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 800e40c:	21ff      	movs	r1, #255	; 0xff
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7f8 fd20 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 800e414:	21ff      	movs	r1, #255	; 0xff
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7f8 fd1c 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add3ByteInt(PGN);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4619      	mov	r1, r3
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f7f8 fce0 	bl	8006de6 <_ZN7tN2kMsg11Add3ByteIntEl>
}
 800e426:	bf00      	nop
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <_Z14SetN2kPGN60928R7tN2kMsgy>:
    N2kMsg.AddByte( 0x80 | ((IndustryGroup&0x7)<<4) | (SystemInstance&0x0f) );
}

//*****************************************************************************
// ISO Address Claim
void SetN2kPGN60928(tN2kMsg &N2kMsg, uint64_t Name) {
 800e42e:	b580      	push	{r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	60f8      	str	r0, [r7, #12]
 800e436:	e9c7 2300 	strd	r2, r3, [r7]
    N2kMsg.SetPGN(N2kPGNIsoAddressClaim);
 800e43a:	f44f 416e 	mov.w	r1, #60928	; 0xee00
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7f8 fbc8 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2206      	movs	r2, #6
 800e448:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddUInt64(Name);
 800e44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7f8 fced 	bl	8006e2e <_ZN7tN2kMsg9AddUInt64Ey>
}
 800e454:	bf00      	nop
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>:
//*****************************************************************************
// Product Information
void SetN2kPGN126996(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel, unsigned char LoadEquivalency) {
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
 800e468:	603b      	str	r3, [r7, #0]

    N2kMsg.SetPGN(N2kPGNProductInformation);
 800e46a:	491d      	ldr	r1, [pc, #116]	; (800e4e0 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh+0x84>)
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f7f8 fbb1 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2206      	movs	r2, #6
 800e476:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteUInt(N2kVersion);
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	4619      	mov	r1, r3
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7f8 fc9d 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.Add2ByteUInt(ProductCode);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	b29b      	uxth	r3, r3
 800e488:	4619      	mov	r1, r3
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7f8 fc97 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.AddStr(ModelID, Max_N2kModelID_len);
 800e490:	2300      	movs	r3, #0
 800e492:	2220      	movs	r2, #32
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f7f8 fcf2 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(SwCode, Max_N2kSwCode_len);
 800e49c:	2300      	movs	r3, #0
 800e49e:	2220      	movs	r2, #32
 800e4a0:	69b9      	ldr	r1, [r7, #24]
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7f8 fcec 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelVersion, Max_N2kModelVersion_len);
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	69f9      	ldr	r1, [r7, #28]
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7f8 fce6 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelSerialCode, Max_N2kModelSerialCode_len);
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	2220      	movs	r2, #32
 800e4b8:	6a39      	ldr	r1, [r7, #32]
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7f8 fce0 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddByte(CertificationLevel);
 800e4c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f7f8 fcc4 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(LoadEquivalency);
 800e4cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7f8 fcbe 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
}
 800e4d8:	bf00      	nop
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	0001f014 	.word	0x0001f014

0800e4e4 <_Z13ProgmemStrLenPKc>:

  return true;
}

//*****************************************************************************
size_t ProgmemStrLen(const char *str) {
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  size_t len;
    if (str==0) return 0;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <_Z13ProgmemStrLenPKc+0x12>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e00c      	b.n	800e510 <_Z13ProgmemStrLenPKc+0x2c>
    for (len=0; pgm_read_byte(&(str[len]))!=0; len++ );
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60fb      	str	r3, [r7, #12]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <_Z13ProgmemStrLenPKc+0x2a>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3301      	adds	r3, #1
 800e50a:	60fb      	str	r3, [r7, #12]
 800e50c:	e7f5      	b.n	800e4fa <_Z13ProgmemStrLenPKc+0x16>
    return len;
 800e50e:	68fb      	ldr	r3, [r7, #12]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	bc80      	pop	{r7}
 800e518:	4770      	bx	lr

0800e51a <_Z6StrLenPKc>:

//*****************************************************************************
size_t StrLen(const char *str) {
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
    if (str==0) return 0;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d101      	bne.n	800e52c <_Z6StrLenPKc+0x12>
 800e528:	2300      	movs	r3, #0
 800e52a:	e004      	b.n	800e536 <_Z6StrLenPKc+0x1c>
    return strlen(str);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7f1 fe85 	bl	800023c <strlen>
 800e532:	4603      	mov	r3, r0
 800e534:	bf00      	nop
}
 800e536:	4618      	mov	r0, r3
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
	...

0800e540 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>:
// Configuration information
void SetN2kPGN126998(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1,
                     const char *InstallationDescription2,
                     bool UsePgm) {
 800e540:	b580      	push	{r7, lr}
 800e542:	b08a      	sub	sp, #40	; 0x28
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
 800e54c:	603b      	str	r3, [r7, #0]
  size_t TotalLen;
  size_t MaxLen=tN2kMsg::MaxDataLen-6; // Each field has 2 extra bytes
 800e54e:	23d9      	movs	r3, #217	; 0xd9
 800e550:	61bb      	str	r3, [r7, #24]
  size_t ManInfoLen;
  size_t InstDesc1Len;
  size_t InstDesc2Len;

    if ( UsePgm ) {
 800e552:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00c      	beq.n	800e574 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x34>
      ManInfoLen=ProgmemStrLen(ManufacturerInformation);
 800e55a:	68b8      	ldr	r0, [r7, #8]
 800e55c:	f7ff ffc2 	bl	800e4e4 <_Z13ProgmemStrLenPKc>
 800e560:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=ProgmemStrLen(InstallationDescription1);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff ffbe 	bl	800e4e4 <_Z13ProgmemStrLenPKc>
 800e568:	6238      	str	r0, [r7, #32]
      InstDesc2Len=ProgmemStrLen(InstallationDescription2);
 800e56a:	6838      	ldr	r0, [r7, #0]
 800e56c:	f7ff ffba 	bl	800e4e4 <_Z13ProgmemStrLenPKc>
 800e570:	61f8      	str	r0, [r7, #28]
 800e572:	e00b      	b.n	800e58c <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x4c>
    } else {
      ManInfoLen=StrLen(ManufacturerInformation);
 800e574:	68b8      	ldr	r0, [r7, #8]
 800e576:	f7ff ffd0 	bl	800e51a <_Z6StrLenPKc>
 800e57a:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=StrLen(InstallationDescription1);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7ff ffcc 	bl	800e51a <_Z6StrLenPKc>
 800e582:	6238      	str	r0, [r7, #32]
      InstDesc2Len=StrLen(InstallationDescription2);
 800e584:	6838      	ldr	r0, [r7, #0]
 800e586:	f7ff ffc8 	bl	800e51a <_Z6StrLenPKc>
 800e58a:	61f8      	str	r0, [r7, #28]
    }

    if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	2b47      	cmp	r3, #71	; 0x47
 800e590:	d901      	bls.n	800e596 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x56>
 800e592:	2347      	movs	r3, #71	; 0x47
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
    if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	2b47      	cmp	r3, #71	; 0x47
 800e59a:	d901      	bls.n	800e5a0 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x60>
 800e59c:	2347      	movs	r3, #71	; 0x47
 800e59e:	623b      	str	r3, [r7, #32]
    if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	2b47      	cmp	r3, #71	; 0x47
 800e5a4:	d901      	bls.n	800e5aa <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x6a>
 800e5a6:	2347      	movs	r3, #71	; 0x47
 800e5a8:	61fb      	str	r3, [r7, #28]

    TotalLen=0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
    if (TotalLen+ManInfoLen>MaxLen) ManInfoLen=MaxLen-TotalLen;
 800e5ae:	697a      	ldr	r2, [r7, #20]
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	4413      	add	r3, r2
 800e5b4:	69ba      	ldr	r2, [r7, #24]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d203      	bcs.n	800e5c2 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x82>
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	627b      	str	r3, [r7, #36]	; 0x24
    TotalLen+=ManInfoLen;
 800e5c2:	697a      	ldr	r2, [r7, #20]
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	4413      	add	r3, r2
 800e5c8:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc1Len>MaxLen) InstDesc1Len=MaxLen-TotalLen;
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	69ba      	ldr	r2, [r7, #24]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d203      	bcs.n	800e5de <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x9e>
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	623b      	str	r3, [r7, #32]
    TotalLen+=InstDesc1Len;
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	6a3b      	ldr	r3, [r7, #32]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc2Len>MaxLen) InstDesc2Len=MaxLen-TotalLen;
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d203      	bcs.n	800e5fa <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0xba>
 800e5f2:	69ba      	ldr	r2, [r7, #24]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	61fb      	str	r3, [r7, #28]
    TotalLen+=InstDesc2Len;
 800e5fa:	697a      	ldr	r2, [r7, #20]
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	4413      	add	r3, r2
 800e600:	617b      	str	r3, [r7, #20]

    N2kMsg.SetPGN(N2kPGNConfigurationInformation);
 800e602:	4922      	ldr	r1, [pc, #136]	; (800e68c <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x14c>)
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7f8 fae5 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2206      	movs	r2, #6
 800e60e:	711a      	strb	r2, [r3, #4]
    // InstallationDescription1
    N2kMsg.AddByte(InstDesc1Len+2);
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	3302      	adds	r3, #2
 800e616:	b2db      	uxtb	r3, r3
 800e618:	4619      	mov	r1, r3
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f7f8 fc1a 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 800e620:	2101      	movs	r1, #1
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f7f8 fc16 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription1,InstDesc1Len,UsePgm);
 800e628:	6a3a      	ldr	r2, [r7, #32]
 800e62a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e62e:	6879      	ldr	r1, [r7, #4]
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7f8 fc25 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>

    // InstallationDescription2
    N2kMsg.AddByte(InstDesc2Len+2);
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	3302      	adds	r3, #2
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	4619      	mov	r1, r3
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7f8 fc07 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 800e646:	2101      	movs	r1, #1
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7f8 fc03 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription2,InstDesc2Len,UsePgm);
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f7f8 fc12 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>
    // ManufacturerInformation
    N2kMsg.AddByte(ManInfoLen+2);
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	3302      	adds	r3, #2
 800e662:	b2db      	uxtb	r3, r3
 800e664:	4619      	mov	r1, r3
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	f7f8 fbf4 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 800e66c:	2101      	movs	r1, #1
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7f8 fbf0 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(ManufacturerInformation,ManInfoLen,UsePgm);
 800e674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e676:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f7f8 fbff 	bl	8006e80 <_ZN7tN2kMsg6AddStrEPKcib>
}
 800e682:	bf00      	nop
 800e684:	3728      	adds	r7, #40	; 0x28
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	0001f016 	.word	0x0001f016

0800e690 <_Z16ParseN2kPGN59904RK7tN2kMsgRm>:
    N2kMsg.Destination=Destination;
    N2kMsg.Priority=6;
    N2kMsg.Add3ByteInt(RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  int result=((N2kMsg.DataLen>=3) && (N2kMsg.DataLen<=8));
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	dd05      	ble.n	800e6ae <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	2b08      	cmp	r3, #8
 800e6a8:	dc01      	bgt.n	800e6ae <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e000      	b.n	800e6b0 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x20>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60fb      	str	r3, [r7, #12]
  RequestedPGN=0;
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
  if (result) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00c      	beq.n	800e6d8 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x48>
    int Index=0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60bb      	str	r3, [r7, #8]
    RequestedPGN=N2kMsg.Get3ByteUInt(Index);
 800e6c2:	f107 0308 	add.w	r3, r7, #8
 800e6c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7f8 fc26 	bl	8006f1e <_ZNK7tN2kMsg12Get3ByteUIntERim>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	601a      	str	r2, [r3, #0]
  }

  return result;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bf14      	ite	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	b2db      	uxtb	r3, r3
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <_Z15SetN2kPGN126993R7tN2kMsgmh>:
}

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
// Heartbeat
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	71fb      	strb	r3, [r7, #7]
	N2kMsg.SetPGN(126993L);
 800e6fa:	4914      	ldr	r1, [pc, #80]	; (800e74c <_Z15SetN2kPGN126993R7tN2kMsgmh+0x60>)
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7f8 fa69 	bl	8006bd4 <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=7;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2207      	movs	r2, #7
 800e706:	711a      	strb	r2, [r3, #4]
	if ( timeInterval_ms>MaxHeartbeatInterval ) {
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	4a11      	ldr	r2, [pc, #68]	; (800e750 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x64>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d905      	bls.n	800e71c <_Z15SetN2kPGN126993R7tN2kMsgmh+0x30>
	  N2kMsg.Add2ByteUInt(0xfffe); // Error
 800e710:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7f8 fb52 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
 800e71a:	e005      	b.n	800e728 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x3c>
	} else {
	  N2kMsg.Add2ByteUInt((uint16_t)(timeInterval_ms));
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	b29b      	uxth	r3, r3
 800e720:	4619      	mov	r1, r3
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f7f8 fb4b 	bl	8006dbe <_ZN7tN2kMsg12Add2ByteUIntEt>
	}
	N2kMsg.AddByte(sequenceCounter);
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	4619      	mov	r1, r3
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f7f8 fb91 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.AddByte(0xff); // Reserved
 800e732:	21ff      	movs	r1, #255	; 0xff
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f7f8 fb8d 	bl	8006e54 <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.Add4ByteUInt(0xffffffff); // Reserved
 800e73a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f7f8 fb63 	bl	8006e0a <_ZN7tN2kMsg12Add4ByteUIntEm>
}
 800e744:	bf00      	nop
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	0001f011 	.word	0x0001f011
 800e750:	0009ffd8 	.word	0x0009ffd8

0800e754 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>:
  template <typename T> static T N2kMin(T a, T b) { return (a<b?a:b); }
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	4603      	mov	r3, r0
 800e75c:	460a      	mov	r2, r1
 800e75e:	71fb      	strb	r3, [r7, #7]
 800e760:	4613      	mov	r3, r2
 800e762:	71bb      	strb	r3, [r7, #6]
 800e764:	79fa      	ldrb	r2, [r7, #7]
 800e766:	79bb      	ldrb	r3, [r7, #6]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d201      	bcs.n	800e770 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1c>
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	e000      	b.n	800e772 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1e>
 800e770:	79bb      	ldrb	r3, [r7, #6]
 800e772:	4618      	mov	r0, r3
 800e774:	370c      	adds	r7, #12
 800e776:	46bd      	mov	sp, r7
 800e778:	bc80      	pop	{r7}
 800e77a:	4770      	bx	lr

0800e77c <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>:
  template <typename T> static T N2kMax(T a, T b) { return (a>b?a:b); }
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	4603      	mov	r3, r0
 800e784:	460a      	mov	r2, r1
 800e786:	71fb      	strb	r3, [r7, #7]
 800e788:	4613      	mov	r3, r2
 800e78a:	71bb      	strb	r3, [r7, #6]
 800e78c:	79fa      	ldrb	r2, [r7, #7]
 800e78e:	79bb      	ldrb	r3, [r7, #6]
 800e790:	429a      	cmp	r2, r3
 800e792:	d901      	bls.n	800e798 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1c>
 800e794:	79fb      	ldrb	r3, [r7, #7]
 800e796:	e000      	b.n	800e79a <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1e>
 800e798:	79bb      	ldrb	r3, [r7, #6]
 800e79a:	4618      	mov	r0, r3
 800e79c:	370c      	adds	r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bc80      	pop	{r7}
 800e7a2:	4770      	bx	lr

0800e7a4 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan);


//*****************************************************************************
tNMEA2000_STM32::tNMEA2000_STM32(CAN_HandleTypeDef *_N2kCan) :
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
		tNMEA2000(), N2kCan(_N2kCan) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fa fbad 	bl	8008f10 <_ZN9tNMEA2000C1Ev>
 800e7b6:	4a0f      	ldr	r2, [pc, #60]	; (800e7f4 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x50>)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	22fa      	movs	r2, #250	; 0xfa
 800e7c6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	NMEA2000_STM32_instance = this;
 800e7d2:	4a09      	ldr	r2, [pc, #36]	; (800e7f8 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x54>)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6013      	str	r3, [r2, #0]

	rxRing = 0;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	txRing = 0;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	08010e88 	.word	0x08010e88
 800e7f8:	20000368 	.word	0x20000368

0800e7fc <_ZN15tNMEA2000_STM327CANOpenEv>:


//*****************************************************************************
bool tNMEA2000_STM32::CANOpen() {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b086      	sub	sp, #24
 800e800:	af02      	add	r7, sp, #8
 800e802:	6078      	str	r0, [r7, #4]

	bool ret = true;
 800e804:	2301      	movs	r3, #1
 800e806:	73fb      	strb	r3, [r7, #15]

	// CAN initialisation instead of using the by the STM32cubeIDE configuration tool generated init function
	if (N2kCAN_Init() != HAL_OK) {
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fa7d 	bl	800ed08 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	bf14      	ite	ne
 800e814:	2301      	movne	r3, #1
 800e816:	2300      	moveq	r3, #0
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <_ZN15tNMEA2000_STM327CANOpenEv+0x26>
		ret = false;
 800e81e:	2300      	movs	r3, #0
 800e820:	73fb      	strb	r3, [r7, #15]
	}

	// Enable CAN
	if (HAL_CAN_Start(N2kCan) != HAL_OK) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e826:	4618      	mov	r0, r3
 800e828:	f7f3 faea 	bl	8001e00 <HAL_CAN_Start>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	bf14      	ite	ne
 800e832:	2301      	movne	r3, #1
 800e834:	2300      	moveq	r3, #0
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d001      	beq.n	800e840 <_ZN15tNMEA2000_STM327CANOpenEv+0x44>
		ret = false;
 800e83c:	2300      	movs	r3, #0
 800e83e:	73fb      	strb	r3, [r7, #15]
	}

	// activate CAN callback 1 interrupt for NMEA2000 CAN bus
	if (HAL_CAN_ActivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e844:	2110      	movs	r1, #16
 800e846:	4618      	mov	r0, r3
 800e848:	f7f3 fbe1 	bl	800200e <HAL_CAN_ActivateNotification>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bf14      	ite	ne
 800e852:	2301      	movne	r3, #1
 800e854:	2300      	moveq	r3, #0
 800e856:	b2db      	uxtb	r3, r3
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d001      	beq.n	800e860 <_ZN15tNMEA2000_STM327CANOpenEv+0x64>
		ret = false;
 800e85c:	2300      	movs	r3, #0
 800e85e:	73fb      	strb	r3, [r7, #15]
	}


	if (SetN2kCANFilter( N2kCan, true, 0, 0x00000000, 0x00000000 ) != HAL_OK) {
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e864:	2300      	movs	r3, #0
 800e866:	9301      	str	r3, [sp, #4]
 800e868:	2300      	movs	r3, #0
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	2300      	movs	r3, #0
 800e86e:	2201      	movs	r2, #1
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 faf1 	bl	800ee58 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	bf14      	ite	ne
 800e87c:	2301      	movne	r3, #1
 800e87e:	2300      	moveq	r3, #0
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <_ZN15tNMEA2000_STM327CANOpenEv+0x8e>
		ret = false;
 800e886:	2300      	movs	r3, #0
 800e888:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800e88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000_STM32::CANSendFrame(unsigned long id, unsigned char len, const unsigned char* buf, bool wait_sent) {
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af02      	add	r7, sp, #8
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	71fb      	strb	r3, [r7, #7]
	//TODO wait_sent
	uint8_t prio = (uint8_t)((id >> 26) & 0x7);
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	0e9b      	lsrs	r3, r3, #26
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	f003 0307 	and.w	r3, r3, #7
 800e8ae:	757b      	strb	r3, [r7, #21]
	bool ret = false;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]

	//This interrupt deactivation does probably nothing because the TX mailboxes get not filled by interrupt!
	HAL_CAN_DeactivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f3 fbb8 	bl	8002030 <HAL_CAN_DeactivateNotification>

	bool TxMailboxesFull = HAL_CAN_GetTxMailboxesFreeLevel(N2kCan) == 0;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7f3 fb17 	bl	8001ef8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	bf0c      	ite	eq
 800e8d0:	2301      	moveq	r3, #1
 800e8d2:	2300      	movne	r3, #0
 800e8d4:	753b      	strb	r3, [r7, #20]
	bool SendFromBuffer = false;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	75bb      	strb	r3, [r7, #22]

	// If TX buffer has already some frames waiting with higher prio or mailbox is full, buffer frame
	if ( !txRing->isEmpty(prio) || TxMailboxesFull ) {
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e8e0:	7d7a      	ldrb	r2, [r7, #21]
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f000 fb4a 	bl	800ef7e <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	f083 0301 	eor.w	r3, r3, #1
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d102      	bne.n	800e8fc <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x68>
 800e8f6:	7d3b      	ldrb	r3, [r7, #20]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x6c>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e000      	b.n	800e902 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x6e>
 800e900:	2300      	movs	r3, #0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d024      	beq.n	800e950 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xbc>
		CAN_message_t *msg = txRing->getAddRef(prio);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e90c:	7d7a      	ldrb	r2, [r7, #21]
 800e90e:	4611      	mov	r1, r2
 800e910:	4618      	mov	r0, r3
 800e912:	f000 fb5b 	bl	800efcc <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>
 800e916:	6138      	str	r0, [r7, #16]
		if ( msg!=0 ) {
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d016      	beq.n	800e94c <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xb8>
			msg->id = id;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	601a      	str	r2, [r3, #0]
			msg->flags.extended = 1;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	2201      	movs	r2, #1
 800e928:	711a      	strb	r2, [r3, #4]
			if ( len > 8 ) len = 8;
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	2b08      	cmp	r3, #8
 800e92e:	d901      	bls.n	800e934 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xa0>
 800e930:	2308      	movs	r3, #8
 800e932:	71fb      	strb	r3, [r7, #7]
			msg->len = len;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	79fa      	ldrb	r2, [r7, #7]
 800e938:	721a      	strb	r2, [r3, #8]
			memcpy(msg->buf, buf, len);
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	3309      	adds	r3, #9
 800e93e:	79fa      	ldrb	r2, [r7, #7]
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	4618      	mov	r0, r3
 800e944:	f001 ff2a 	bl	801079c <memcpy>
			ret = true;
 800e948:	2301      	movs	r3, #1
 800e94a:	75fb      	strb	r3, [r7, #23]
			//frame buffered
		}
		SendFromBuffer = true;
 800e94c:	2301      	movs	r3, #1
 800e94e:	75bb      	strb	r3, [r7, #22]
	}

	if ( !TxMailboxesFull ) {
 800e950:	7d3b      	ldrb	r3, [r7, #20]
 800e952:	f083 0301 	eor.w	r3, r3, #1
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d014      	beq.n	800e986 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xf2>
		if ( SendFromBuffer ) {
 800e95c:	7dbb      	ldrb	r3, [r7, #22]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d007      	beq.n	800e972 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xde>
			ret = sendFromTxRing(prio);
 800e962:	7d7b      	ldrb	r3, [r7, #21]
 800e964:	4619      	mov	r1, r3
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f000 f941 	bl	800ebee <_ZN15tNMEA2000_STM3214sendFromTxRingEh>
 800e96c:	4603      	mov	r3, r0
 800e96e:	75fb      	strb	r3, [r7, #23]
 800e970:	e009      	b.n	800e986 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xf2>
		} else {
			ret = CANwriteTxMailbox(id, len, buf, 1);
 800e972:	79fa      	ldrb	r2, [r7, #7]
 800e974:	2301      	movs	r3, #1
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	68b9      	ldr	r1, [r7, #8]
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f000 f8ec 	bl	800eb5a <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>
 800e982:	4603      	mov	r3, r0
 800e984:	75fb      	strb	r3, [r7, #23]
		}
		/* transmit entry accepted */
	}

	HAL_CAN_ActivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e98a:	2101      	movs	r1, #1
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7f3 fb3e 	bl	800200e <HAL_CAN_ActivateNotification>

	return ret;
 800e992:	7dfb      	ldrb	r3, [r7, #23]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh>:

//*****************************************************************************
bool tNMEA2000_STM32::CANGetFrame(unsigned long& id, unsigned char& len, unsigned char* buf) {
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
 800e9a8:	603b      	str	r3, [r7, #0]

	bool ret = false;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_DeactivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b2:	2110      	movs	r1, #16
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7f3 fb3b 	bl	8002030 <HAL_CAN_DeactivateNotification>

	const CAN_message_t *msg = rxRing->getReadRef();
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 fb85 	bl	800f0d2 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh>
 800e9c8:	6138      	str	r0, [r7, #16]
	if ( msg!=0 ) {
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d019      	beq.n	800ea04 <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh+0x68>
	    id = msg->id;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	601a      	str	r2, [r3, #0]
	    len = msg->len;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	7a1a      	ldrb	r2, [r3, #8]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	701a      	strb	r2, [r3, #0]
		if ( len > 8 ) len = 8;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b08      	cmp	r3, #8
 800e9e6:	d902      	bls.n	800e9ee <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh+0x52>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2208      	movs	r2, #8
 800e9ec:	701a      	strb	r2, [r3, #0]
	    memcpy(buf, msg->buf, len);
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	f103 0109 	add.w	r1, r3, #9
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	6838      	ldr	r0, [r7, #0]
 800e9fc:	f001 fece 	bl	801079c <memcpy>
	    ret = true;
 800ea00:	2301      	movs	r3, #1
 800ea02:	75fb      	strb	r3, [r7, #23]
	}

	HAL_CAN_ActivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea08:	2110      	movs	r1, #16
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f3 faff 	bl	800200e <HAL_CAN_ActivateNotification>

	return ret;
 800ea10:	7dfb      	ldrb	r3, [r7, #23]

}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv>:

// *****************************************************************************
void tNMEA2000_STM32::InitCANFrameBuffers() {
 800ea1a:	b590      	push	{r4, r7, lr}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]

  if ( MaxCANReceiveFrames == 0 ) MaxCANReceiveFrames = 32; // Use default, if not set
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d103      	bne.n	800ea34 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x1a>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2220      	movs	r2, #32
 800ea30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  if ( MaxCANReceiveFrames < 10 ) MaxCANReceiveFrames = 10; // Do not allow less than 10 - should have enough memory.
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea3a:	2b09      	cmp	r3, #9
 800ea3c:	d803      	bhi.n	800ea46 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x2c>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	220a      	movs	r2, #10
 800ea42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  if ( MaxCANSendFrames == 0 ) MaxCANSendFrames = 50;  // Use big enough default buffer
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d103      	bne.n	800ea58 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x3e>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2232      	movs	r2, #50	; 0x32
 800ea54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  if ( MaxCANSendFrames < 30 ) MaxCANSendFrames = 30; // Do not allow less than 30 - should have enough memory.
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea5e:	2b1d      	cmp	r3, #29
 800ea60:	d803      	bhi.n	800ea6a <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x50>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	221e      	movs	r2, #30
 800ea66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  //TODO deleting ring buffer results in hard fault!
  // if buffer is initialized with a different size delete it
  if ( rxRing != 0 && rxRing->getSize() != MaxCANReceiveFrames ) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00e      	beq.n	800ea92 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x78>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f000 fb55 	bl	800f12a <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d001      	beq.n	800ea92 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x78>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e000      	b.n	800ea94 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x7a>
 800ea92:	2300      	movs	r3, #0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00d      	beq.n	800eab4 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x9a>
    delete rxRing;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d004      	beq.n	800eaac <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x92>
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	3204      	adds	r2, #4
 800eaa6:	6812      	ldr	r2, [r2, #0]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	4790      	blx	r2
    rxRing = 0;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
  if ( txRing != 0 && txRing->getSize() != MaxCANSendFrames ) {
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00e      	beq.n	800eadc <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc2>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800eac4:	4618      	mov	r0, r3
 800eac6:	f000 fb30 	bl	800f12a <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>
 800eaca:	4603      	mov	r3, r0
 800eacc:	461a      	mov	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d001      	beq.n	800eadc <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc2>
 800ead8:	2301      	movs	r3, #1
 800eada:	e000      	b.n	800eade <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc4>
 800eadc:	2300      	movs	r3, #0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00d      	beq.n	800eafe <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xe4>
    delete txRing;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d004      	beq.n	800eaf6 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xdc>
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	3204      	adds	r2, #4
 800eaf0:	6812      	ldr	r2, [r2, #0]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	4790      	blx	r2
    txRing = 0;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  //							tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities=1);
  if ( rxRing == 0 ) rxRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANReceiveFrames, 7);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10f      	bne.n	800eb28 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x10e>
 800eb08:	2014      	movs	r0, #20
 800eb0a:	f001 fcd0 	bl	80104ae <_Znwj>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	461c      	mov	r4, r3
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb18:	2207      	movs	r2, #7
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fb7b 	bl	800f218 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  if ( txRing == 0 ) txRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANSendFrames, 7);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10f      	bne.n	800eb52 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x138>
 800eb32:	2014      	movs	r0, #20
 800eb34:	f001 fcbb 	bl	80104ae <_Znwj>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	461c      	mov	r4, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb42:	2207      	movs	r2, #7
 800eb44:	4619      	mov	r1, r3
 800eb46:	4620      	mov	r0, r4
 800eb48:	f000 fb66 	bl	800f218 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8

}
 800eb52:	bf00      	nop
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd90      	pop	{r4, r7, pc}

0800eb5a <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>:

// *****************************************************************************
bool tNMEA2000_STM32::CANwriteTxMailbox(unsigned long id, unsigned char len, const unsigned char *buf, bool extended) {
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	60f8      	str	r0, [r7, #12]
 800eb62:	60b9      	str	r1, [r7, #8]
 800eb64:	603b      	str	r3, [r7, #0]
 800eb66:	4613      	mov	r3, r2
 800eb68:	71fb      	strb	r3, [r7, #7]

	if (extended) {
 800eb6a:	7e3b      	ldrb	r3, [r7, #24]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d006      	beq.n	800eb7e <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x24>
		CANTxHeader.IDE = CAN_ID_EXT;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2204      	movs	r2, #4
 800eb74:	679a      	str	r2, [r3, #120]	; 0x78
		CANTxHeader.ExtId = id;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	675a      	str	r2, [r3, #116]	; 0x74
 800eb7c:	e005      	b.n	800eb8a <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x30>
	} else {
		CANTxHeader.IDE = CAN_ID_STD;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	679a      	str	r2, [r3, #120]	; 0x78
		CANTxHeader.StdId = id;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	671a      	str	r2, [r3, #112]	; 0x70
	}
	CANTxHeader.RTR = CAN_RTR_DATA;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	67da      	str	r2, [r3, #124]	; 0x7c
	CANTxHeader.DLC = len;
 800eb90:	79fa      	ldrb	r2, [r7, #7]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CANTxHeader.TransmitGlobalTime = DISABLE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    if ( len > 8 ) len = 8;
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	2b08      	cmp	r3, #8
 800eba4:	d901      	bls.n	800ebaa <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x50>
 800eba6:	2308      	movs	r3, #8
 800eba8:	71fb      	strb	r3, [r7, #7]
    memcpy(CANTxdata, buf, len);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	33a4      	adds	r3, #164	; 0xa4
 800ebae:	79fa      	ldrb	r2, [r7, #7]
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f001 fdf2 	bl	801079c <memcpy>
	//for (int i = 0; i < len; i++) {
	//	CANTxdata[i] = buf[i];
	//}

	// send message
	if (HAL_CAN_AddTxMessage(N2kCan, &CANTxHeader, CANTxdata, &CANTxMailbox) == HAL_OK) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	33b4      	adds	r3, #180	; 0xb4
 800ebcc:	f7f3 f946 	bl	8001e5c <HAL_CAN_AddTxMessage>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	bf0c      	ite	eq
 800ebd6:	2301      	moveq	r3, #1
 800ebd8:	2300      	movne	r3, #0
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x8a>
		return true;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e000      	b.n	800ebe6 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x8c>
	} else {
		return false;
 800ebe4:	2300      	movs	r3, #0
	}

}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <_ZN15tNMEA2000_STM3214sendFromTxRingEh>:

// *****************************************************************************
bool tNMEA2000_STM32::sendFromTxRing(uint8_t prio) {
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b086      	sub	sp, #24
 800ebf2:	af02      	add	r7, sp, #8
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	70fb      	strb	r3, [r7, #3]
	const CAN_message_t *txMsg;

	txMsg = txRing->getReadRef(prio);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ec00:	78fa      	ldrb	r2, [r7, #3]
 800ec02:	4611      	mov	r1, r2
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fb71 	bl	800f2ec <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>
 800ec0a:	60f8      	str	r0, [r7, #12]
	if ( txMsg != 0 ) {
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00f      	beq.n	800ec32 <_ZN15tNMEA2000_STM3214sendFromTxRingEh+0x44>
		return CANwriteTxMailbox(txMsg->id, txMsg->len, txMsg->buf, txMsg->flags.extended);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6819      	ldr	r1, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	7a1a      	ldrb	r2, [r3, #8]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f103 0009 	add.w	r0, r3, #9
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	791b      	ldrb	r3, [r3, #4]
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	4603      	mov	r3, r0
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff ff96 	bl	800eb5a <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	e000      	b.n	800ec34 <_ZN15tNMEA2000_STM3214sendFromTxRingEh+0x46>
	} else {
		return false;
 800ec32:	2300      	movs	r3, #0
	}

}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>:

// *****************************************************************************
void tNMEA2000_STM32::CANreadRxMailbox(CAN_HandleTypeDef *hcan) {
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
	CAN_message_t *rxMsg;
	uint8_t prio;

	if (hcan == N2kCan) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec4a:	683a      	ldr	r2, [r7, #0]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d157      	bne.n	800ed00 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xc4>
		if (HAL_CAN_GetRxMessage(hcan, RX_FIFO, &CANRxHeader, CANRxdata) == HAL_OK) {
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	33ac      	adds	r3, #172	; 0xac
 800ec60:	6838      	ldr	r0, [r7, #0]
 800ec62:	f7f3 f95d 	bl	8001f20 <HAL_CAN_GetRxMessage>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	bf0c      	ite	eq
 800ec6c:	2301      	moveq	r3, #1
 800ec6e:	2300      	movne	r3, #0
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d044      	beq.n	800ed00 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xc4>
			prio = (uint8_t)((CANRxHeader.ExtId >> 26) & 0x7);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec7c:	0e9b      	lsrs	r3, r3, #26
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	f003 0307 	and.w	r3, r3, #7
 800ec84:	73fb      	strb	r3, [r7, #15]
			rxMsg = rxRing->getAddRef(prio);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ec8c:	7bfa      	ldrb	r2, [r7, #15]
 800ec8e:	4611      	mov	r1, r2
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 f99b 	bl	800efcc <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>
 800ec96:	60b8      	str	r0, [r7, #8]
			if ( rxMsg!=0 ) {
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d025      	beq.n	800ecea <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xae>
				rxMsg->len = CANRxHeader.DLC;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	721a      	strb	r2, [r3, #8]
				if ( rxMsg->len > 8 ) rxMsg->len = 8;
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	7a1b      	ldrb	r3, [r3, #8]
 800ecae:	2b08      	cmp	r3, #8
 800ecb0:	d902      	bls.n	800ecb8 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0x7c>
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2208      	movs	r2, #8
 800ecb6:	721a      	strb	r2, [r3, #8]
				rxMsg->flags.remote = CANRxHeader.RTR == CAN_RTR_REMOTE;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	bf0c      	ite	eq
 800ecc2:	2301      	moveq	r3, #1
 800ecc4:	2300      	movne	r3, #0
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	715a      	strb	r2, [r3, #5]
				rxMsg->flags.extended = CANRxHeader.IDE == CAN_ID_EXT;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecd2:	2b04      	cmp	r3, #4
 800ecd4:	bf0c      	ite	eq
 800ecd6:	2301      	moveq	r3, #1
 800ecd8:	2300      	movne	r3, #0
 800ecda:	b2da      	uxtb	r2, r3
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	711a      	strb	r2, [r3, #4]
				rxMsg->id = CANRxHeader.ExtId;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	601a      	str	r2, [r3, #0]
			}
			memcpy(rxMsg->buf, CANRxdata, rxMsg->len);
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	f103 0009 	add.w	r0, r3, #9
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	7a1b      	ldrb	r3, [r3, #8]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	f001 fd4e 	bl	801079c <memcpy>
		}
	}
	// I think we don't have to check the fifo fill level if we use interrups?
	// HAL_CAN_GetRxFifoFillLevel(*N2kCan, CAN_RX_FIFO1);

}
 800ed00:	bf00      	nop
 800ed02:	3710      	adds	r7, #16
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv>:
  * @param baudRate in kbit/s
  * @param clockSpeed enum of the clock connected to the CAN controller (APB1 for STM32F105=48mHz)
  * @retval bool success or not
  */
HAL_StatusTypeDef tNMEA2000_STM32::N2kCAN_Init()
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
	// CAN1000kbitPrescaler, TimeSeg1 and TimeSeg2 are configured for 1000 kbit/s @ defined clock speed
	// Baud rate has to be dividable by 1000 (500, 250, 200, 125, 100...)

#ifdef CAN1
	if (N2kCan == &hcan1) {
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed14:	4a48      	ldr	r2, [pc, #288]	; (800ee38 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x130>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d104      	bne.n	800ed24 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x1c>
		CANinstance = CAN1;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4a47      	ldr	r2, [pc, #284]	; (800ee3c <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x134>)
 800ed1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ed22:	e00b      	b.n	800ed3c <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x34>
	}
#ifdef CAN2
	else if (N2kCan == &hcan2) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed28:	4a45      	ldr	r2, [pc, #276]	; (800ee40 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x138>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d104      	bne.n	800ed38 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x30>
		CANinstance = CAN2;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a44      	ldr	r2, [pc, #272]	; (800ee44 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x13c>)
 800ed32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ed36:	e001      	b.n	800ed3c <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x34>
		CANinstance = CAN3;
	}
#endif
	else {
		// CAN_HandleTypeDef *hcan is unknown
		return HAL_ERROR;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e079      	b.n	800ee30 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x128>


	// usually the APB1 clock is running at the following speed if max clock frequencies are used:
	// STM32F103/105/107   36'000'000 Hz
	// STM32F405/407       42 000'000 Hz
	uint32_t APB1clockSpeed = HAL_RCC_GetPCLK1Freq();
 800ed3c:	f7f4 fc64 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 800ed40:	60b8      	str	r0, [r7, #8]

	if (APB1clockSpeed == 24000000) {
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	4a40      	ldr	r2, [pc, #256]	; (800ee48 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x140>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d107      	bne.n	800ed5a <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x52>
		CAN1000kbitPrescaler = 2;
 800ed4a:	2302      	movs	r3, #2
 800ed4c:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_10TQ;
 800ed4e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800ed52:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_1TQ;
 800ed54:	2300      	movs	r3, #0
 800ed56:	60fb      	str	r3, [r7, #12]
 800ed58:	e028      	b.n	800edac <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	}
	else if (APB1clockSpeed == 36000000) {
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	4a3b      	ldr	r2, [pc, #236]	; (800ee4c <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x144>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d108      	bne.n	800ed74 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x6c>
		CAN1000kbitPrescaler = 2;
 800ed62:	2302      	movs	r3, #2
 800ed64:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_15TQ;
 800ed66:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800ed6a:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800ed6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed70:	60fb      	str	r3, [r7, #12]
 800ed72:	e01b      	b.n	800edac <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	}
	else if (APB1clockSpeed == 42000000) {
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	4a36      	ldr	r2, [pc, #216]	; (800ee50 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x148>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d108      	bne.n	800ed8e <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x86>
		CAN1000kbitPrescaler = 3;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_11TQ;
 800ed80:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800ed84:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800ed86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	e00e      	b.n	800edac <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	}
	else if (APB1clockSpeed == 48000000) {
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	4a30      	ldr	r2, [pc, #192]	; (800ee54 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x14c>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d108      	bne.n	800eda8 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa0>
		CAN1000kbitPrescaler = 3;
 800ed96:	2303      	movs	r3, #3
 800ed98:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_13TQ;
 800ed9a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800ed9e:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800eda0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eda4:	60fb      	str	r3, [r7, #12]
 800eda6:	e001      	b.n	800edac <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	else {
		// There are no settings four your ABT1 clock speed yet!
		// On the following website you can find a matching prescaler, TS1 and TS2
		// Add the values for your clock speed and 1000kbit/s
		// http://www.bittiming.can-wiki.info/?CLK=36&ctype=bxCAN&SamplePoint=87.5
		return HAL_ERROR;
 800eda8:	2301      	movs	r3, #1
 800edaa:	e041      	b.n	800ee30 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x128>
	}

	N2kCan->Instance = CANinstance;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 800edb6:	601a      	str	r2, [r3, #0]
	N2kCan->Init.Prescaler = CAN1000kbitPrescaler * 1000 / CANbaudRate;
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800edbe:	fb02 f103 	mul.w	r1, r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edcc:	fbb1 f2f2 	udiv	r2, r1, r2
 800edd0:	605a      	str	r2, [r3, #4]
	N2kCan->Init.Mode = CAN_MODE_NORMAL;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd6:	2200      	movs	r2, #0
 800edd8:	609a      	str	r2, [r3, #8]
	N2kCan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edde:	2200      	movs	r2, #0
 800ede0:	60da      	str	r2, [r3, #12]
	N2kCan->Init.TimeSeg1 = CANtimeSeg1;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ede6:	693a      	ldr	r2, [r7, #16]
 800ede8:	611a      	str	r2, [r3, #16]
	N2kCan->Init.TimeSeg2 = CANtimeSeg2;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	615a      	str	r2, [r3, #20]
	N2kCan->Init.TimeTriggeredMode = DISABLE;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf6:	2200      	movs	r2, #0
 800edf8:	761a      	strb	r2, [r3, #24]
	N2kCan->Init.AutoBusOff = DISABLE;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edfe:	2200      	movs	r2, #0
 800ee00:	765a      	strb	r2, [r3, #25]
	N2kCan->Init.AutoWakeUp = DISABLE;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee06:	2200      	movs	r2, #0
 800ee08:	769a      	strb	r2, [r3, #26]
	N2kCan->Init.AutoRetransmission = DISABLE;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee0e:	2200      	movs	r2, #0
 800ee10:	76da      	strb	r2, [r3, #27]
	N2kCan->Init.ReceiveFifoLocked = DISABLE;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee16:	2200      	movs	r2, #0
 800ee18:	771a      	strb	r2, [r3, #28]
	N2kCan->Init.TransmitFifoPriority = DISABLE;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee1e:	2200      	movs	r2, #0
 800ee20:	775a      	strb	r2, [r3, #29]

	return HAL_CAN_Init(N2kCan);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7f2 fee7 	bl	8001bfa <HAL_CAN_Init>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	bf00      	nop
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	200001dc 	.word	0x200001dc
 800ee3c:	40006400 	.word	0x40006400
 800ee40:	20000204 	.word	0x20000204
 800ee44:	40006800 	.word	0x40006800
 800ee48:	016e3600 	.word	0x016e3600
 800ee4c:	02255100 	.word	0x02255100
 800ee50:	0280de80 	.word	0x0280de80
 800ee54:	02dc6c00 	.word	0x02dc6c00

0800ee58 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm>:
  * @param  Mask uint32_t bit mask
  * @param  Filter uint32_t CAN identifier
  * @retval success or not
  */
HAL_StatusTypeDef tNMEA2000_STM32::SetN2kCANFilter( CAN_HandleTypeDef *hcan, bool ExtendedIdentifier, uint32_t FilterNum, uint32_t Mask, uint32_t Filter )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b092      	sub	sp, #72	; 0x48
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	603b      	str	r3, [r7, #0]
 800ee64:	4613      	mov	r3, r2
 800ee66:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// For dual CAN MCU's we have 28 filter banks to share between the CAN busses
	// For single CAN SlaveStartFilterBank does nothing and we have 14 filter banks.
	// If not defined different we use filter 0 .. 13 for primary CAN bus and 14 ... 27 for secondary CAN bus
	#if !defined(SlaveStartFilterBank)
	const uint32_t SlaveStartFilterBank = 14;
 800ee6e:	230e      	movs	r3, #14
 800ee70:	63fb      	str	r3, [r7, #60]	; 0x3c
	#endif

	#if defined(CAN2) // we have two CAN busses
		const int32_t TotalFilterBanks = 27;
 800ee72:	231b      	movs	r3, #27
 800ee74:	63bb      	str	r3, [r7, #56]	; 0x38
		const int32_t TotalFilterBanks = 13;
	#else // we have no CAN defined
		const int32_t TotalFilterBanks = -1;
	#endif

	int32_t FilterBank = -1;
 800ee76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee7a:	643b      	str	r3, [r7, #64]	; 0x40
	if (hcan->Instance == CAN1
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a31      	ldr	r2, [pc, #196]	; (800ef48 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d108      	bne.n	800ee98 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum <= TotalFilterBanks
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	2b1b      	cmp	r3, #27
 800ee8a:	d805      	bhi.n	800ee98 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum < SlaveStartFilterBank ) {
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	2b0d      	cmp	r3, #13
 800ee90:	d802      	bhi.n	800ee98 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
		FilterBank = FilterNum;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	643b      	str	r3, [r7, #64]	; 0x40
 800ee96:	e00a      	b.n	800eeae <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
	}
	else if (hcan->Instance == CAN2
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a2b      	ldr	r2, [pc, #172]	; (800ef4c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d105      	bne.n	800eeae <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
			&& FilterNum <= TotalFilterBanks - SlaveStartFilterBank) {
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b0d      	cmp	r3, #13
 800eea6:	d802      	bhi.n	800eeae <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
		FilterBank = FilterNum + SlaveStartFilterBank;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	330e      	adds	r3, #14
 800eeac:	643b      	str	r3, [r7, #64]	; 0x40
	}

	if ( FilterBank >= 0
 800eeae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	db42      	blt.n	800ef3a <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
			&& IS_CAN_ALL_INSTANCE(hcan->Instance) )
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a23      	ldr	r2, [pc, #140]	; (800ef48 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d004      	beq.n	800eec8 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x70>
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a22      	ldr	r2, [pc, #136]	; (800ef4c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d138      	bne.n	800ef3a <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
	{
		CAN_FilterTypeDef sFilterConfig;

		sFilterConfig.FilterBank = FilterBank;
 800eec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeca:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800eecc:	2300      	movs	r3, #0
 800eece:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800eed0:	2301      	movs	r3, #1
 800eed2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (ExtendedIdentifier == false)
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d10c      	bne.n	800eef4 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x9c>
		{
			sFilterConfig.FilterMaskIdHigh = Mask << 5 & 0xFFFF;
 800eeda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eedc:	015b      	lsls	r3, r3, #5
 800eede:	b29b      	uxth	r3, r3
 800eee0:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = 0x0000; // allows both remote request and data frames
 800eee2:	2300      	movs	r3, #0
 800eee4:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter << 5 & 0xFFFF;
 800eee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eee8:	015b      	lsls	r3, r3, #5
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow =  0x0000;
 800eeee:	2300      	movs	r3, #0
 800eef0:	617b      	str	r3, [r7, #20]
 800eef2:	e013      	b.n	800ef1c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xc4>
		}
		else
		{ // ExtendedIdentifier == true
			sFilterConfig.FilterMaskIdHigh = Mask >> 13 & 0xFFFF;
 800eef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef6:	0b5b      	lsrs	r3, r3, #13
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = (Mask << 3 & 0xFFF8) | (0x1 << 2);
 800eefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefe:	00db      	lsls	r3, r3, #3
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	f043 0304 	orr.w	r3, r3, #4
 800ef06:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter >> 13 & 0xFFFF; // EXTID[28:13]
 800ef08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef0a:	0b5b      	lsrs	r3, r3, #13
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow = (Filter << 3 & 0xFFF8) | (0x1 << 2); // EXTID[12:0] + IDE
 800ef10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f043 0304 	orr.w	r3, r3, #4
 800ef1a:	617b      	str	r3, [r7, #20]
		}

		sFilterConfig.FilterFIFOAssignment = 0;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800ef20:	2301      	movs	r3, #1
 800ef22:	633b      	str	r3, [r7, #48]	; 0x30
		sFilterConfig.SlaveStartFilterBank = SlaveStartFilterBank; // CAN 0: 0...13 // CAN 1: 14...27 (28 filter banks in total)
 800ef24:	230e      	movs	r3, #14
 800ef26:	637b      	str	r3, [r7, #52]	; 0x34

		ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800ef28:	f107 0310 	add.w	r3, r7, #16
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	68b8      	ldr	r0, [r7, #8]
 800ef30:	f7f2 fede 	bl	8001cf0 <HAL_CAN_ConfigFilter>
 800ef34:	4603      	mov	r3, r0
 800ef36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	return ret;
 800ef3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3748      	adds	r7, #72	; 0x48
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	40006400 	.word	0x40006400
 800ef4c:	40006800 	.word	0x40006800

0800ef50 <HAL_CAN_RxFifo1MsgPendingCallback>:

// *****************************************************************************


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
	// Call rxInterrupt method of the last tNMEA2000_STM32 instance.
	NMEA2000_STM32_instance->CANreadRxMailbox(hcan);
 800ef58:	4b04      	ldr	r3, [pc, #16]	; (800ef6c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6879      	ldr	r1, [r7, #4]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7ff fe6c 	bl	800ec3c <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>
}
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20000368 	.word	0x20000368

0800ef70 <millis>:
	HAL_Delay(ms);
};


//*****************************************************************************
uint32_t millis(void) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800ef74:	f7f2 fc8e 	bl	8001894 <HAL_GetTick>
 800ef78:	4603      	mov	r3, r0
};
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh>:
  delete[] priorityReferencies;
}

// *****************************************************************************
template<typename T>
bool tPriorityRingBuffer<T>::isEmpty(uint8_t _priority) const {
 800ef7e:	b480      	push	{r7}
 800ef80:	b083      	sub	sp, #12
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
 800ef86:	460b      	mov	r3, r1
 800ef88:	70fb      	strb	r3, [r7, #3]
  if ( _priority>=maxPriorities) {
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	7a9b      	ldrb	r3, [r3, #10]
 800ef8e:	78fa      	ldrb	r2, [r7, #3]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d309      	bcc.n	800efa8 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh+0x2a>
    return head==tail;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	889a      	ldrh	r2, [r3, #4]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	88db      	ldrh	r3, [r3, #6]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	bf0c      	ite	eq
 800efa0:	2301      	moveq	r3, #1
 800efa2:	2300      	movne	r3, #0
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	e00c      	b.n	800efc2 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh+0x44>
  } else {
    return priorityReferencies[_priority].next==INVALID_RING_REF;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	691a      	ldr	r2, [r3, #16]
 800efac:	78fb      	ldrb	r3, [r7, #3]
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4413      	add	r3, r2
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efb8:	4293      	cmp	r3, r2
 800efba:	bf0c      	ite	eq
 800efbc:	2301      	moveq	r3, #1
 800efbe:	2300      	movne	r3, #0
 800efc0:	b2db      	uxtb	r3, r3
  }
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bc80      	pop	{r7}
 800efca:	4770      	bx	lr

0800efcc <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>:
  return false;
}

// *****************************************************************************
template<typename T>
T *tPriorityRingBuffer<T>::getAddRef(uint8_t _priority) {
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	460b      	mov	r3, r1
 800efd6:	70fb      	strb	r3, [r7, #3]
  T *ret=0;
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]

  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7a9b      	ldrb	r3, [r3, #10]
 800efe0:	78fa      	ldrb	r2, [r7, #3]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d303      	bcc.n	800efee <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x22>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	7a9b      	ldrb	r3, [r3, #10]
 800efea:	3b01      	subs	r3, #1
 800efec:	70fb      	strb	r3, [r7, #3]

  uint16_t nextEntry = (head + 1) % size;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	889b      	ldrh	r3, [r3, #4]
 800eff2:	3301      	adds	r3, #1
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	8912      	ldrh	r2, [r2, #8]
 800eff8:	fb93 f1f2 	sdiv	r1, r3, r2
 800effc:	fb01 f202 	mul.w	r2, r1, r2
 800f000:	1a9b      	subs	r3, r3, r2
 800f002:	817b      	strh	r3, [r7, #10]

  // Check if the ring buffer is full
  if ( nextEntry == tail ) {
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	88db      	ldrh	r3, [r3, #6]
 800f008:	897a      	ldrh	r2, [r7, #10]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d109      	bne.n	800f022 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x56>
    clean();
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 f9fb 	bl	800f40a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE5cleanEv>
    // check again
    if ( nextEntry == tail ) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	88db      	ldrh	r3, [r3, #6]
 800f018:	897a      	ldrh	r2, [r7, #10]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d101      	bne.n	800f022 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x56>
      RingBufferErrDbgf("tPriorityRingBuffer<T>::getAddRef, ring buffer full\n");
      return ret;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	e053      	b.n	800f0ca <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xfe>
    }
  }

  ret=&(buffer[head].Value);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	889b      	ldrh	r3, [r3, #4]
 800f02a:	4619      	mov	r1, r3
 800f02c:	460b      	mov	r3, r1
 800f02e:	005b      	lsls	r3, r3, #1
 800f030:	440b      	add	r3, r1
 800f032:	00db      	lsls	r3, r3, #3
 800f034:	4413      	add	r3, r2
 800f036:	60fb      	str	r3, [r7, #12]
  buffer[head].priority=_priority;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	68da      	ldr	r2, [r3, #12]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	889b      	ldrh	r3, [r3, #4]
 800f040:	4619      	mov	r1, r3
 800f042:	460b      	mov	r3, r1
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	440b      	add	r3, r1
 800f048:	00db      	lsls	r3, r3, #3
 800f04a:	4413      	add	r3, r2
 800f04c:	78fa      	ldrb	r2, [r7, #3]
 800f04e:	759a      	strb	r2, [r3, #22]
  buffer[head].next=INVALID_RING_REF;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	889b      	ldrh	r3, [r3, #4]
 800f058:	4619      	mov	r1, r3
 800f05a:	460b      	mov	r3, r1
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	440b      	add	r3, r1
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	4413      	add	r3, r2
 800f064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f068:	829a      	strh	r2, [r3, #20]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	691a      	ldr	r2, [r3, #16]
 800f06e:	78fb      	ldrb	r3, [r7, #3]
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d108      	bne.n	800f090 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xc4>
    priorityReferencies[_priority].next=head;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	691a      	ldr	r2, [r3, #16]
 800f082:	78fb      	ldrb	r3, [r7, #3]
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	4413      	add	r3, r2
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	8892      	ldrh	r2, [r2, #4]
 800f08c:	801a      	strh	r2, [r3, #0]
 800f08e:	e010      	b.n	800f0b2 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xe6>
  } else {
    buffer[priorityReferencies[_priority].last].next=head;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	68da      	ldr	r2, [r3, #12]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6919      	ldr	r1, [r3, #16]
 800f098:	78fb      	ldrb	r3, [r7, #3]
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	440b      	add	r3, r1
 800f09e:	885b      	ldrh	r3, [r3, #2]
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	440b      	add	r3, r1
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	4413      	add	r3, r2
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	8892      	ldrh	r2, [r2, #4]
 800f0b0:	829a      	strh	r2, [r3, #20]
  }
  priorityReferencies[_priority].last=head;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	691a      	ldr	r2, [r3, #16]
 800f0b6:	78fb      	ldrb	r3, [r7, #3]
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	4413      	add	r3, r2
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	8892      	ldrh	r2, [r2, #4]
 800f0c0:	805a      	strh	r2, [r3, #2]

  RingBufferDbgf("tPriorityRingBuffer<T>::getAddRef, added new item head:%u, priority:%u\n",head,_priority);

  // Bump the head to point to the next free entry
  head = nextEntry;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	897a      	ldrh	r2, [r7, #10]
 800f0c6:	809a      	strh	r2, [r3, #4]

  return ret;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh>:
  return ret;
}

// *****************************************************************************
template<typename T>
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t *_priority) {
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	6039      	str	r1, [r7, #0]
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 800f0dc:	2300      	movs	r3, #0
 800f0de:	73fb      	strb	r3, [r7, #15]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7a9b      	ldrb	r3, [r3, #10]
 800f0e4:	7bfa      	ldrb	r2, [r7, #15]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d21a      	bcs.n	800f120 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x4e>
    if ( priorityReferencies[_pri].next!=INVALID_RING_REF ) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	691a      	ldr	r2, [r3, #16]
 800f0ee:	7bfb      	ldrb	r3, [r7, #15]
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	4413      	add	r3, r2
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d00c      	beq.n	800f118 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x46>
      if ( _priority!=0 ) *_priority=_pri;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x38>
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	7bfa      	ldrb	r2, [r7, #15]
 800f108:	701a      	strb	r2, [r3, #0]
      return getReadRef(_pri);
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	4619      	mov	r1, r3
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f8ec 	bl	800f2ec <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>
 800f114:	4603      	mov	r3, r0
 800f116:	e004      	b.n	800f122 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x50>
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	3301      	adds	r3, #1
 800f11c:	73fb      	strb	r3, [r7, #15]
 800f11e:	e7df      	b.n	800f0e0 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0xe>
    }
  }

  return 0;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>:
  tPriorityRef *priorityReferencies;

public:
  tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities=1);
  virtual ~tPriorityRingBuffer();
  uint16_t getSize() const { return size; }
 800f12a:	b480      	push	{r7}
 800f12c:	b083      	sub	sp, #12
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	891b      	ldrh	r3, [r3, #8]
 800f136:	4618      	mov	r0, r3
 800f138:	370c      	adds	r7, #12
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bc80      	pop	{r7}
 800f13e:	4770      	bx	lr

0800f140 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev>:
tPriorityRingBuffer<T>::~tPriorityRingBuffer() {
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
}
 800f148:	4a0c      	ldr	r2, [pc, #48]	; (800f17c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x3c>)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	601a      	str	r2, [r3, #0]
  delete[] buffer;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d004      	beq.n	800f160 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x20>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f001 f9a5 	bl	80104aa <_ZdaPv>
  delete[] priorityReferencies;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d004      	beq.n	800f172 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x32>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	691b      	ldr	r3, [r3, #16]
 800f16c:	4618      	mov	r0, r3
 800f16e:	f001 f99c 	bl	80104aa <_ZdaPv>
}
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	08010e78 	.word	0x08010e78

0800f180 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED0Ev>:
tPriorityRingBuffer<T>::~tPriorityRingBuffer() {
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
}
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7ff ffd9 	bl	800f140 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev>
 800f18e:	2114      	movs	r1, #20
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f001 f988 	bl	80104a6 <_ZdlPvj>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4618      	mov	r0, r3
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <_ZN15tNMEA2000_STM3213CAN_message_tUt_C1Ev>:
  protected:
    struct CAN_message_t {
      uint32_t id = 0;          // can identifier
  //    uint16_t timestamp = 0;   // time when message arrived
  //    uint8_t idhit = 0; // filter that id came from
      struct {
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	701a      	strb	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	705a      	strb	r2, [r3, #1]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	709a      	strb	r2, [r3, #2]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	70da      	strb	r2, [r3, #3]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bc80      	pop	{r7}
 800f1ca:	4770      	bx	lr

0800f1cc <_ZN15tNMEA2000_STM3213CAN_message_tC1Ev>:
    struct CAN_message_t {
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff ffde 	bl	800f1a0 <_ZN15tNMEA2000_STM3213CAN_message_tUt_C1Ev>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2208      	movs	r2, #8
 800f1e8:	721a      	strb	r2, [r3, #8]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	3309      	adds	r3, #9
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	605a      	str	r2, [r3, #4]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10tValueSlotC1Ev>:
  struct tValueSlot {
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b082      	sub	sp, #8
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff ffdf 	bl	800f1cc <_ZN15tNMEA2000_STM3213CAN_message_tC1Ev>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>:
tPriorityRingBuffer<T>::tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities) : 
 800f218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	460b      	mov	r3, r1
 800f222:	807b      	strh	r3, [r7, #2]
 800f224:	4613      	mov	r3, r2
 800f226:	707b      	strb	r3, [r7, #1]
    head(0), tail(0), size(_size), maxPriorities(_maxPriorities) {
 800f228:	4a2e      	ldr	r2, [pc, #184]	; (800f2e4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xcc>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	809a      	strh	r2, [r3, #4]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	80da      	strh	r2, [r3, #6]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	887a      	ldrh	r2, [r7, #2]
 800f23e:	811a      	strh	r2, [r3, #8]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	787a      	ldrb	r2, [r7, #1]
 800f244:	729a      	strb	r2, [r3, #10]
  if ( size<3 ) size=3;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	891b      	ldrh	r3, [r3, #8]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d802      	bhi.n	800f254 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x3c>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2203      	movs	r2, #3
 800f252:	811a      	strh	r2, [r3, #8]
  if ( maxPriorities<1 ) maxPriorities=1;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	7a9b      	ldrb	r3, [r3, #10]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d102      	bne.n	800f262 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x4a>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	729a      	strb	r2, [r3, #10]
  buffer=new tValueSlot[size];
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	891b      	ldrh	r3, [r3, #8]
 800f266:	461c      	mov	r4, r3
 800f268:	4b1f      	ldr	r3, [pc, #124]	; (800f2e8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xd0>)
 800f26a:	429c      	cmp	r4, r3
 800f26c:	d804      	bhi.n	800f278 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x60>
 800f26e:	4623      	mov	r3, r4
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	4423      	add	r3, r4
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	e001      	b.n	800f27c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x64>
 800f278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f27c:	4618      	mov	r0, r3
 800f27e:	f001 f927 	bl	80104d0 <_Znaj>
 800f282:	4603      	mov	r3, r0
 800f284:	461e      	mov	r6, r3
 800f286:	4635      	mov	r5, r6
 800f288:	1e63      	subs	r3, r4, #1
 800f28a:	461c      	mov	r4, r3
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	db05      	blt.n	800f29c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x84>
 800f290:	4628      	mov	r0, r5
 800f292:	f7ff ffb4 	bl	800f1fe <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10tValueSlotC1Ev>
 800f296:	3518      	adds	r5, #24
 800f298:	3c01      	subs	r4, #1
 800f29a:	e7f7      	b.n	800f28c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x74>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	60de      	str	r6, [r3, #12]
  priorityReferencies=new tPriorityRef[maxPriorities];
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	7a9b      	ldrb	r3, [r3, #10]
 800f2a4:	461c      	mov	r4, r3
 800f2a6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f2aa:	429c      	cmp	r4, r3
 800f2ac:	d201      	bcs.n	800f2b2 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x9a>
 800f2ae:	00a3      	lsls	r3, r4, #2
 800f2b0:	e001      	b.n	800f2b6 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x9e>
 800f2b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f001 f90a 	bl	80104d0 <_Znaj>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	461e      	mov	r6, r3
 800f2c0:	4635      	mov	r5, r6
 800f2c2:	1e63      	subs	r3, r4, #1
 800f2c4:	461c      	mov	r4, r3
 800f2c6:	2c00      	cmp	r4, #0
 800f2c8:	db05      	blt.n	800f2d6 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xbe>
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	f000 f8a6 	bl	800f41c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE12tPriorityRefC1Ev>
 800f2d0:	3504      	adds	r5, #4
 800f2d2:	3c01      	subs	r4, #1
 800f2d4:	e7f7      	b.n	800f2c6 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xae>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	611e      	str	r6, [r3, #16]
}
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2e4:	08010e78 	.word	0x08010e78
 800f2e8:	05555555 	.word	0x05555555

0800f2ec <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>:
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t _priority) {
 800f2ec:	b480      	push	{r7}
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	70fb      	strb	r3, [r7, #3]
  const T *ret=0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	60fb      	str	r3, [r7, #12]
  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	7a9b      	ldrb	r3, [r3, #10]
 800f300:	78fa      	ldrb	r2, [r7, #3]
 800f302:	429a      	cmp	r2, r3
 800f304:	d303      	bcc.n	800f30e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x22>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	7a9b      	ldrb	r3, [r3, #10]
 800f30a:	3b01      	subs	r3, #1
 800f30c:	70fb      	strb	r3, [r7, #3]
  uint16_t ref=priorityReferencies[_priority].next;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	691a      	ldr	r2, [r3, #16]
 800f312:	78fb      	ldrb	r3, [r7, #3]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	817b      	strh	r3, [r7, #10]
  if ( ref==INVALID_RING_REF ) {
 800f31c:	897b      	ldrh	r3, [r7, #10]
 800f31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f322:	4293      	cmp	r3, r2
 800f324:	d101      	bne.n	800f32a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x3e>
    return ret;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	e06a      	b.n	800f400 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x114>
  ret=&(buffer[ref].Value);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	68d9      	ldr	r1, [r3, #12]
 800f32e:	897a      	ldrh	r2, [r7, #10]
 800f330:	4613      	mov	r3, r2
 800f332:	005b      	lsls	r3, r3, #1
 800f334:	4413      	add	r3, r2
 800f336:	00db      	lsls	r3, r3, #3
 800f338:	440b      	add	r3, r1
 800f33a:	60fb      	str	r3, [r7, #12]
  priorityReferencies[_priority].next=buffer[ref].next;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	68d9      	ldr	r1, [r3, #12]
 800f340:	897a      	ldrh	r2, [r7, #10]
 800f342:	4613      	mov	r3, r2
 800f344:	005b      	lsls	r3, r3, #1
 800f346:	4413      	add	r3, r2
 800f348:	00db      	lsls	r3, r3, #3
 800f34a:	18ca      	adds	r2, r1, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6919      	ldr	r1, [r3, #16]
 800f350:	78fb      	ldrb	r3, [r7, #3]
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	440b      	add	r3, r1
 800f356:	8a92      	ldrh	r2, [r2, #20]
 800f358:	801a      	strh	r2, [r3, #0]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	691a      	ldr	r2, [r3, #16]
 800f35e:	78fb      	ldrb	r3, [r7, #3]
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	4413      	add	r3, r2
 800f364:	881b      	ldrh	r3, [r3, #0]
 800f366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d107      	bne.n	800f37e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x92>
    priorityReferencies[_priority].last=INVALID_RING_REF;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	691a      	ldr	r2, [r3, #16]
 800f372:	78fb      	ldrb	r3, [r7, #3]
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	4413      	add	r3, r2
 800f378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f37c:	805a      	strh	r2, [r3, #2]
  if ( ref==tail ) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	88db      	ldrh	r3, [r3, #6]
 800f382:	897a      	ldrh	r2, [r7, #10]
 800f384:	429a      	cmp	r2, r3
 800f386:	d12f      	bne.n	800f3e8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
    for ( tail = (tail + 1) % size; tail!=head && buffer[tail].next==INVALID_RING_REF; tail = (tail + 1) % size );
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	88db      	ldrh	r3, [r3, #6]
 800f38c:	3301      	adds	r3, #1
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	8912      	ldrh	r2, [r2, #8]
 800f392:	fb93 f1f2 	sdiv	r1, r3, r2
 800f396:	fb01 f202 	mul.w	r2, r1, r2
 800f39a:	1a9b      	subs	r3, r3, r2
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	80da      	strh	r2, [r3, #6]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	88da      	ldrh	r2, [r3, #6]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	889b      	ldrh	r3, [r3, #4]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d01c      	beq.n	800f3e8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68da      	ldr	r2, [r3, #12]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	88db      	ldrh	r3, [r3, #6]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	005b      	lsls	r3, r3, #1
 800f3bc:	440b      	add	r3, r1
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	4413      	add	r3, r2
 800f3c2:	8a9b      	ldrh	r3, [r3, #20]
 800f3c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d10d      	bne.n	800f3e8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	88db      	ldrh	r3, [r3, #6]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	8912      	ldrh	r2, [r2, #8]
 800f3d6:	fb93 f1f2 	sdiv	r1, r3, r2
 800f3da:	fb01 f202 	mul.w	r2, r1, r2
 800f3de:	1a9b      	subs	r3, r3, r2
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	80da      	strh	r2, [r3, #6]
 800f3e6:	e7dc      	b.n	800f3a2 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xb6>
  buffer[ref].next=INVALID_RING_REF; // Release slot
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68d9      	ldr	r1, [r3, #12]
 800f3ec:	897a      	ldrh	r2, [r7, #10]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	005b      	lsls	r3, r3, #1
 800f3f2:	4413      	add	r3, r2
 800f3f4:	00db      	lsls	r3, r3, #3
 800f3f6:	440b      	add	r3, r1
 800f3f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3fc:	829a      	strh	r2, [r3, #20]
  return ret;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	bc80      	pop	{r7}
 800f408:	4770      	bx	lr

0800f40a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE5cleanEv>:
void tPriorityRingBuffer<T>::clean() {
 800f40a:	b480      	push	{r7}
 800f40c:	b083      	sub	sp, #12
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
}
 800f412:	bf00      	nop
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	bc80      	pop	{r7}
 800f41a:	4770      	bx	lr

0800f41c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE12tPriorityRefC1Ev>:
    tPriorityRef() : next(INVALID_RING_REF), last(INVALID_RING_REF) {;}
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f42a:	801a      	strh	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f432:	805a      	strh	r2, [r3, #2]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4618      	mov	r0, r3
 800f438:	370c      	adds	r7, #12
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bc80      	pop	{r7}
 800f43e:	4770      	bx	lr

0800f440 <USBD_DFU_GetCfgDesc>:
 800f440:	231b      	movs	r3, #27
 800f442:	8003      	strh	r3, [r0, #0]
 800f444:	4800      	ldr	r0, [pc, #0]	; (800f448 <USBD_DFU_GetCfgDesc+0x8>)
 800f446:	4770      	bx	lr
 800f448:	20000090 	.word	0x20000090

0800f44c <USBD_DFU_DataIn>:
 800f44c:	2000      	movs	r0, #0
 800f44e:	4770      	bx	lr

0800f450 <USBD_DFU_EP0_RxReady>:
 800f450:	2000      	movs	r0, #0
 800f452:	4770      	bx	lr

0800f454 <USBD_DFU_GetDeviceQualifierDesc>:
 800f454:	230a      	movs	r3, #10
 800f456:	8003      	strh	r3, [r0, #0]
 800f458:	4800      	ldr	r0, [pc, #0]	; (800f45c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 800f45a:	4770      	bx	lr
 800f45c:	200000ac 	.word	0x200000ac

0800f460 <USBD_DFU_EP0_TxReady>:
 800f460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f462:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
 800f466:	4605      	mov	r5, r0
 800f468:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800f46c:	2b04      	cmp	r3, #4
 800f46e:	d164      	bne.n	800f53a <USBD_DFU_EP0_TxReady+0xda>
 800f470:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 800f474:	2900      	cmp	r1, #0
 800f476:	d151      	bne.n	800f51c <USBD_DFU_EP0_TxReady+0xbc>
 800f478:	7823      	ldrb	r3, [r4, #0]
 800f47a:	b99b      	cbnz	r3, 800f4a4 <USBD_DFU_EP0_TxReady+0x44>
 800f47c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 800f480:	2b01      	cmp	r3, #1
 800f482:	d13c      	bne.n	800f4fe <USBD_DFU_EP0_TxReady+0x9e>
 800f484:	2000      	movs	r0, #0
 800f486:	2303      	movs	r3, #3
 800f488:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
 800f48c:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
 800f490:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f494:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
 800f498:	f8a4 0412 	strh.w	r0, [r4, #1042]	; 0x412
 800f49c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f4a0:	b003      	add	sp, #12
 800f4a2:	bd30      	pop	{r4, r5, pc}
 800f4a4:	2b21      	cmp	r3, #33	; 0x21
 800f4a6:	d110      	bne.n	800f4ca <USBD_DFU_EP0_TxReady+0x6a>
 800f4a8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 800f4ac:	2b05      	cmp	r3, #5
 800f4ae:	d126      	bne.n	800f4fe <USBD_DFU_EP0_TxReady+0x9e>
 800f4b0:	78e3      	ldrb	r3, [r4, #3]
 800f4b2:	78a2      	ldrb	r2, [r4, #2]
 800f4b4:	041b      	lsls	r3, r3, #16
 800f4b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f4ba:	7862      	ldrb	r2, [r4, #1]
 800f4bc:	4413      	add	r3, r2
 800f4be:	7922      	ldrb	r2, [r4, #4]
 800f4c0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800f4c4:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 800f4c8:	e7dc      	b.n	800f484 <USBD_DFU_EP0_TxReady+0x24>
 800f4ca:	2b41      	cmp	r3, #65	; 0x41
 800f4cc:	d117      	bne.n	800f4fe <USBD_DFU_EP0_TxReady+0x9e>
 800f4ce:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 800f4d2:	2b05      	cmp	r3, #5
 800f4d4:	d113      	bne.n	800f4fe <USBD_DFU_EP0_TxReady+0x9e>
 800f4d6:	78e3      	ldrb	r3, [r4, #3]
 800f4d8:	78a0      	ldrb	r0, [r4, #2]
 800f4da:	041b      	lsls	r3, r3, #16
 800f4dc:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800f4e0:	7860      	ldrb	r0, [r4, #1]
 800f4e2:	4403      	add	r3, r0
 800f4e4:	7920      	ldrb	r0, [r4, #4]
 800f4e6:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 800f4ea:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 800f4ee:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	4798      	blx	r3
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d0c4      	beq.n	800f484 <USBD_DFU_EP0_TxReady+0x24>
 800f4fa:	2002      	movs	r0, #2
 800f4fc:	e7d0      	b.n	800f4a0 <USBD_DFU_EP0_TxReady+0x40>
 800f4fe:	2300      	movs	r3, #0
 800f500:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
 800f504:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800f508:	f88d 3000 	strb.w	r3, [sp]
 800f50c:	2301      	movs	r3, #1
 800f50e:	4669      	mov	r1, sp
 800f510:	4628      	mov	r0, r5
 800f512:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f516:	f000 fd8d 	bl	8010034 <USBD_CtlError>
 800f51a:	e7b3      	b.n	800f484 <USBD_DFU_EP0_TxReady+0x24>
 800f51c:	2901      	cmp	r1, #1
 800f51e:	d0b1      	beq.n	800f484 <USBD_DFU_EP0_TxReady+0x24>
 800f520:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 800f524:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 800f528:	3902      	subs	r1, #2
 800f52a:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 800f52e:	691b      	ldr	r3, [r3, #16]
 800f530:	4620      	mov	r0, r4
 800f532:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 800f536:	4798      	blx	r3
 800f538:	e7dd      	b.n	800f4f6 <USBD_DFU_EP0_TxReady+0x96>
 800f53a:	2b07      	cmp	r3, #7
 800f53c:	f04f 0300 	mov.w	r3, #0
 800f540:	d10f      	bne.n	800f562 <USBD_DFU_EP0_TxReady+0x102>
 800f542:	4a17      	ldr	r2, [pc, #92]	; (800f5a0 <USBD_DFU_EP0_TxReady+0x140>)
 800f544:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
 800f548:	7d12      	ldrb	r2, [r2, #20]
 800f54a:	f012 0204 	ands.w	r2, r2, #4
 800f54e:	d00a      	beq.n	800f566 <USBD_DFU_EP0_TxReady+0x106>
 800f550:	2206      	movs	r2, #6
 800f552:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 800f556:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
 800f55a:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
 800f55e:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 800f562:	4618      	mov	r0, r3
 800f564:	e79c      	b.n	800f4a0 <USBD_DFU_EP0_TxReady+0x40>
 800f566:	2308      	movs	r3, #8
 800f568:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
 800f56c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f570:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
 800f574:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f578:	f000 fa22 	bl	800f9c0 <USBD_Stop>
 800f57c:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	4798      	blx	r3
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	4906      	ldr	r1, [pc, #24]	; (800f5a4 <USBD_DFU_EP0_TxReady+0x144>)
 800f58a:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <USBD_DFU_EP0_TxReady+0x148>)
 800f58c:	68ca      	ldr	r2, [r1, #12]
 800f58e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f592:	4313      	orrs	r3, r2
 800f594:	60cb      	str	r3, [r1, #12]
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	bf00      	nop
 800f59c:	e7fd      	b.n	800f59a <USBD_DFU_EP0_TxReady+0x13a>
 800f59e:	bf00      	nop
 800f5a0:	20000090 	.word	0x20000090
 800f5a4:	e000ed00 	.word	0xe000ed00
 800f5a8:	05fa0004 	.word	0x05fa0004

0800f5ac <USBD_DFU_DeInit>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	2500      	movs	r5, #0
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f5b8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800f5bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800f5c0:	f883 5410 	strb.w	r5, [r3, #1040]	; 0x410
 800f5c4:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
 800f5c8:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 800f5cc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	4798      	blx	r3
 800f5d4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800f5d8:	f000 ff64 	bl	80104a4 <USBD_static_free>
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
 800f5e2:	bd38      	pop	{r3, r4, r5, pc}

0800f5e4 <USBD_DFU_Init>:
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	f240 401c 	movw	r0, #1052	; 0x41c
 800f5ec:	f000 ff56 	bl	801049c <USBD_static_malloc>
 800f5f0:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
 800f5f4:	b1b0      	cbz	r0, 800f624 <USBD_DFU_Init+0x40>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	2202      	movs	r2, #2
 800f5fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800f5fe:	f8a0 2418 	strh.w	r2, [r0, #1048]	; 0x418
 800f602:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
 800f606:	f8a0 2414 	strh.w	r2, [r0, #1044]	; 0x414
 800f60a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 800f60e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
 800f612:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
 800f616:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800f61a:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	4798      	blx	r3
 800f622:	b100      	cbz	r0, 800f626 <USBD_DFU_Init+0x42>
 800f624:	2002      	movs	r0, #2
 800f626:	bd10      	pop	{r4, pc}

0800f628 <USBD_DFU_IsoOutIncomplete>:
 800f628:	2000      	movs	r0, #0
 800f62a:	4770      	bx	lr

0800f62c <USBD_DFU_GetUsrStringDesc>:
 800f62c:	2906      	cmp	r1, #6
 800f62e:	b508      	push	{r3, lr}
 800f630:	d807      	bhi.n	800f642 <USBD_DFU_GetUsrStringDesc+0x16>
 800f632:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800f636:	4904      	ldr	r1, [pc, #16]	; (800f648 <USBD_DFU_GetUsrStringDesc+0x1c>)
 800f638:	6818      	ldr	r0, [r3, #0]
 800f63a:	f000 fd06 	bl	801004a <USBD_GetString>
 800f63e:	4802      	ldr	r0, [pc, #8]	; (800f648 <USBD_DFU_GetUsrStringDesc+0x1c>)
 800f640:	bd08      	pop	{r3, pc}
 800f642:	2000      	movs	r0, #0
 800f644:	e7fc      	b.n	800f640 <USBD_DFU_GetUsrStringDesc+0x14>
 800f646:	bf00      	nop
 800f648:	2000036c 	.word	0x2000036c

0800f64c <USBD_DFU_Setup>:
 800f64c:	2300      	movs	r3, #0
 800f64e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f652:	780d      	ldrb	r5, [r1, #0]
 800f654:	4606      	mov	r6, r0
 800f656:	f015 0560 	ands.w	r5, r5, #96	; 0x60
 800f65a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
 800f65e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f662:	f000 8143 	beq.w	800f8ec <USBD_DFU_Setup+0x2a0>
 800f666:	2d20      	cmp	r5, #32
 800f668:	f040 8156 	bne.w	800f918 <USBD_DFU_Setup+0x2cc>
 800f66c:	f891 8001 	ldrb.w	r8, [r1, #1]
 800f670:	f1b8 0f06 	cmp.w	r8, #6
 800f674:	f200 8150 	bhi.w	800f918 <USBD_DFU_Setup+0x2cc>
 800f678:	e8df f018 	tbh	[pc, r8, lsl #1]
 800f67c:	00070111 	.word	0x00070111
 800f680:	00980037 	.word	0x00980037
 800f684:	00f400de 	.word	0x00f400de
 800f688:	00f8      	.short	0x00f8
 800f68a:	88ca      	ldrh	r2, [r1, #6]
 800f68c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800f690:	b1ba      	cbz	r2, 800f6c2 <USBD_DFU_Setup+0x76>
 800f692:	2b02      	cmp	r3, #2
 800f694:	d001      	beq.n	800f69a <USBD_DFU_Setup+0x4e>
 800f696:	2b05      	cmp	r3, #5
 800f698:	d10f      	bne.n	800f6ba <USBD_DFU_Setup+0x6e>
 800f69a:	884b      	ldrh	r3, [r1, #2]
 800f69c:	4630      	mov	r0, r6
 800f69e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800f6a2:	2303      	movs	r3, #3
 800f6a4:	4621      	mov	r1, r4
 800f6a6:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 800f6aa:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f6ae:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f6b2:	f000 fcfb 	bl	80100ac <USBD_CtlPrepareRx>
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	e013      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f000 fcba 	bl	8010034 <USBD_CtlError>
 800f6c0:	e7f9      	b.n	800f6b6 <USBD_DFU_Setup+0x6a>
 800f6c2:	2b05      	cmp	r3, #5
 800f6c4:	d001      	beq.n	800f6ca <USBD_DFU_Setup+0x7e>
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d1f7      	bne.n	800f6ba <USBD_DFU_Setup+0x6e>
 800f6ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 800f6ce:	2500      	movs	r5, #0
 800f6d0:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
 800f6d4:	2306      	movs	r3, #6
 800f6d6:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
 800f6da:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
 800f6de:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	b002      	add	sp, #8
 800f6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ea:	88ca      	ldrh	r2, [r1, #6]
 800f6ec:	2a00      	cmp	r2, #0
 800f6ee:	d053      	beq.n	800f798 <USBD_DFU_Setup+0x14c>
 800f6f0:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800f6f4:	2b02      	cmp	r3, #2
 800f6f6:	d001      	beq.n	800f6fc <USBD_DFU_Setup+0xb0>
 800f6f8:	2b09      	cmp	r3, #9
 800f6fa:	d147      	bne.n	800f78c <USBD_DFU_Setup+0x140>
 800f6fc:	884f      	ldrh	r7, [r1, #2]
 800f6fe:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 800f702:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
 800f706:	b9b7      	cbnz	r7, 800f736 <USBD_DFU_Setup+0xea>
 800f708:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800f70c:	2a03      	cmp	r2, #3
 800f70e:	bf98      	it	ls
 800f710:	f04f 0809 	movls.w	r8, #9
 800f714:	8023      	strh	r3, [r4, #0]
 800f716:	2341      	movs	r3, #65	; 0x41
 800f718:	2203      	movs	r2, #3
 800f71a:	4621      	mov	r1, r4
 800f71c:	f884 8418 	strb.w	r8, [r4, #1048]	; 0x418
 800f720:	f884 7411 	strb.w	r7, [r4, #1041]	; 0x411
 800f724:	f8a4 7412 	strh.w	r7, [r4, #1042]	; 0x412
 800f728:	f884 8414 	strb.w	r8, [r4, #1044]	; 0x414
 800f72c:	70a3      	strb	r3, [r4, #2]
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 fca7 	bl	8010082 <USBD_CtlSendData>
 800f734:	e7bf      	b.n	800f6b6 <USBD_DFU_Setup+0x6a>
 800f736:	2f01      	cmp	r7, #1
 800f738:	f04f 0500 	mov.w	r5, #0
 800f73c:	d019      	beq.n	800f772 <USBD_DFU_Setup+0x126>
 800f73e:	2309      	movs	r3, #9
 800f740:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
 800f744:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f748:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
 800f74c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f750:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 800f754:	f8d6 32bc 	ldr.w	r3, [r6, #700]	; 0x2bc
 800f758:	3f02      	subs	r7, #2
 800f75a:	4621      	mov	r1, r4
 800f75c:	695b      	ldr	r3, [r3, #20]
 800f75e:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 800f762:	4798      	blx	r3
 800f764:	4601      	mov	r1, r0
 800f766:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	; 0x404
 800f76a:	4630      	mov	r0, r6
 800f76c:	f000 fc89 	bl	8010082 <USBD_CtlSendData>
 800f770:	e7b7      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f772:	230f      	movs	r3, #15
 800f774:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
 800f778:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f77c:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
 800f780:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f784:	4630      	mov	r0, r6
 800f786:	f000 fc55 	bl	8010034 <USBD_CtlError>
 800f78a:	e7aa      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f78c:	2500      	movs	r5, #0
 800f78e:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
 800f792:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 800f796:	e7f5      	b.n	800f784 <USBD_DFU_Setup+0x138>
 800f798:	2302      	movs	r3, #2
 800f79a:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
 800f79e:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f7a2:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
 800f7a6:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f7aa:	e784      	b.n	800f6b6 <USBD_DFU_Setup+0x6a>
 800f7ac:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800f7b0:	f504 6582 	add.w	r5, r4, #1040	; 0x410
 800f7b4:	2b03      	cmp	r3, #3
 800f7b6:	d004      	beq.n	800f7c2 <USBD_DFU_Setup+0x176>
 800f7b8:	2b06      	cmp	r3, #6
 800f7ba:	d026      	beq.n	800f80a <USBD_DFU_Setup+0x1be>
 800f7bc:	2206      	movs	r2, #6
 800f7be:	4629      	mov	r1, r5
 800f7c0:	e7b5      	b.n	800f72e <USBD_DFU_Setup+0xe2>
 800f7c2:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 800f7c6:	b1d3      	cbz	r3, 800f7fe <USBD_DFU_Setup+0x1b2>
 800f7c8:	2304      	movs	r3, #4
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f7d0:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
 800f7d4:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
 800f7d8:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 800f7dc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800f7e0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 800f7e4:	699b      	ldr	r3, [r3, #24]
 800f7e6:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 800f7ea:	b929      	cbnz	r1, 800f7f8 <USBD_DFU_Setup+0x1ac>
 800f7ec:	7822      	ldrb	r2, [r4, #0]
 800f7ee:	2a41      	cmp	r2, #65	; 0x41
 800f7f0:	d102      	bne.n	800f7f8 <USBD_DFU_Setup+0x1ac>
 800f7f2:	462a      	mov	r2, r5
 800f7f4:	4798      	blx	r3
 800f7f6:	e7e1      	b.n	800f7bc <USBD_DFU_Setup+0x170>
 800f7f8:	462a      	mov	r2, r5
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	e7fa      	b.n	800f7f4 <USBD_DFU_Setup+0x1a8>
 800f7fe:	2205      	movs	r2, #5
 800f800:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
 800f804:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 800f808:	e009      	b.n	800f81e <USBD_DFU_Setup+0x1d2>
 800f80a:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d10a      	bne.n	800f828 <USBD_DFU_Setup+0x1dc>
 800f812:	2207      	movs	r2, #7
 800f814:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 800f818:	2300      	movs	r3, #0
 800f81a:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
 800f81e:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
 800f822:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 800f826:	e7c9      	b.n	800f7bc <USBD_DFU_Setup+0x170>
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d1c7      	bne.n	800f7bc <USBD_DFU_Setup+0x170>
 800f82c:	4a4c      	ldr	r2, [pc, #304]	; (800f960 <USBD_DFU_Setup+0x314>)
 800f82e:	7d12      	ldrb	r2, [r2, #20]
 800f830:	0752      	lsls	r2, r2, #29
 800f832:	d5c3      	bpl.n	800f7bc <USBD_DFU_Setup+0x170>
 800f834:	2202      	movs	r2, #2
 800f836:	e7e3      	b.n	800f800 <USBD_DFU_Setup+0x1b4>
 800f838:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800f83c:	2b0a      	cmp	r3, #10
 800f83e:	d108      	bne.n	800f852 <USBD_DFU_Setup+0x206>
 800f840:	2302      	movs	r3, #2
 800f842:	2500      	movs	r5, #0
 800f844:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f848:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
 800f84c:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 800f850:	e747      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f852:	230a      	movs	r3, #10
 800f854:	220e      	movs	r2, #14
 800f856:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f85a:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
 800f85e:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 800f862:	e728      	b.n	800f6b6 <USBD_DFU_Setup+0x6a>
 800f864:	2201      	movs	r2, #1
 800f866:	f504 6183 	add.w	r1, r4, #1048	; 0x418
 800f86a:	e760      	b.n	800f72e <USBD_DFU_Setup+0xe2>
 800f86c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800f870:	2b09      	cmp	r3, #9
 800f872:	f63f af20 	bhi.w	800f6b6 <USBD_DFU_Setup+0x6a>
 800f876:	f44f 751b 	mov.w	r5, #620	; 0x26c
 800f87a:	40dd      	lsrs	r5, r3
 800f87c:	43ed      	mvns	r5, r5
 800f87e:	f015 0501 	ands.w	r5, r5, #1
 800f882:	f47f af18 	bne.w	800f6b6 <USBD_DFU_Setup+0x6a>
 800f886:	2302      	movs	r3, #2
 800f888:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
 800f88c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 800f890:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 800f894:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 800f898:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
 800f89c:	e721      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f89e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800f8a2:	2a09      	cmp	r2, #9
 800f8a4:	d811      	bhi.n	800f8ca <USBD_DFU_Setup+0x27e>
 800f8a6:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800f8aa:	40d3      	lsrs	r3, r2
 800f8ac:	43db      	mvns	r3, r3
 800f8ae:	f013 0301 	ands.w	r3, r3, #1
 800f8b2:	d10a      	bne.n	800f8ca <USBD_DFU_Setup+0x27e>
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 800f8ba:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
 800f8be:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
 800f8c2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800f8c6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
 800f8ca:	4b25      	ldr	r3, [pc, #148]	; (800f960 <USBD_DFU_Setup+0x314>)
 800f8cc:	7d5d      	ldrb	r5, [r3, #21]
 800f8ce:	f015 0510 	ands.w	r5, r5, #16
 800f8d2:	d007      	beq.n	800f8e4 <USBD_DFU_Setup+0x298>
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	f000 f873 	bl	800f9c0 <USBD_Stop>
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f000 f86b 	bl	800f9b6 <USBD_Start>
 800f8e0:	4645      	mov	r5, r8
 800f8e2:	e6fe      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f8e4:	8848      	ldrh	r0, [r1, #2]
 800f8e6:	f7f1 ffdb 	bl	80018a0 <HAL_Delay>
 800f8ea:	e6fa      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f8ec:	784f      	ldrb	r7, [r1, #1]
 800f8ee:	2f0b      	cmp	r7, #11
 800f8f0:	d812      	bhi.n	800f918 <USBD_DFU_Setup+0x2cc>
 800f8f2:	e8df f007 	tbb	[pc, r7]
 800f8f6:	1106      	.short	0x1106
 800f8f8:	11111111 	.word	0x11111111
 800f8fc:	11111116 	.word	0x11111116
 800f900:	2b23      	.short	0x2b23
 800f902:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f906:	2b03      	cmp	r3, #3
 800f908:	d106      	bne.n	800f918 <USBD_DFU_Setup+0x2cc>
 800f90a:	2202      	movs	r2, #2
 800f90c:	f10d 0106 	add.w	r1, sp, #6
 800f910:	f000 fbb7 	bl	8010082 <USBD_CtlSendData>
 800f914:	463d      	mov	r5, r7
 800f916:	e6e4      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f918:	4630      	mov	r0, r6
 800f91a:	f000 fb8b 	bl	8010034 <USBD_CtlError>
 800f91e:	2502      	movs	r5, #2
 800f920:	e6df      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f922:	884b      	ldrh	r3, [r1, #2]
 800f924:	0a1b      	lsrs	r3, r3, #8
 800f926:	2b21      	cmp	r3, #33	; 0x21
 800f928:	d105      	bne.n	800f936 <USBD_DFU_Setup+0x2ea>
 800f92a:	88ca      	ldrh	r2, [r1, #6]
 800f92c:	490d      	ldr	r1, [pc, #52]	; (800f964 <USBD_DFU_Setup+0x318>)
 800f92e:	2a09      	cmp	r2, #9
 800f930:	bf28      	it	cs
 800f932:	2209      	movcs	r2, #9
 800f934:	e719      	b.n	800f76a <USBD_DFU_Setup+0x11e>
 800f936:	2200      	movs	r2, #0
 800f938:	4611      	mov	r1, r2
 800f93a:	e716      	b.n	800f76a <USBD_DFU_Setup+0x11e>
 800f93c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f940:	2b03      	cmp	r3, #3
 800f942:	d1e9      	bne.n	800f918 <USBD_DFU_Setup+0x2cc>
 800f944:	2201      	movs	r2, #1
 800f946:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 800f94a:	e70e      	b.n	800f76a <USBD_DFU_Setup+0x11e>
 800f94c:	788d      	ldrb	r5, [r1, #2]
 800f94e:	2d00      	cmp	r5, #0
 800f950:	d1e2      	bne.n	800f918 <USBD_DFU_Setup+0x2cc>
 800f952:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f956:	2b03      	cmp	r3, #3
 800f958:	d1de      	bne.n	800f918 <USBD_DFU_Setup+0x2cc>
 800f95a:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 800f95e:	e6c0      	b.n	800f6e2 <USBD_DFU_Setup+0x96>
 800f960:	20000090 	.word	0x20000090
 800f964:	200000a2 	.word	0x200000a2

0800f968 <USBD_DFU_DataOut>:
 800f968:	2000      	movs	r0, #0
 800f96a:	4770      	bx	lr

0800f96c <USBD_DFU_IsoINIncomplete>:
 800f96c:	2000      	movs	r0, #0
 800f96e:	4770      	bx	lr

0800f970 <USBD_DFU_SOF>:
 800f970:	2000      	movs	r0, #0
 800f972:	4770      	bx	lr

0800f974 <USBD_DFU_RegisterMedia>:
 800f974:	b109      	cbz	r1, 800f97a <USBD_DFU_RegisterMedia+0x6>
 800f976:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
 800f97a:	2000      	movs	r0, #0
 800f97c:	4770      	bx	lr

0800f97e <USBD_Init>:
 800f97e:	b508      	push	{r3, lr}
 800f980:	b180      	cbz	r0, 800f9a4 <USBD_Init+0x26>
 800f982:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800f986:	b113      	cbz	r3, 800f98e <USBD_Init+0x10>
 800f988:	2300      	movs	r3, #0
 800f98a:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
 800f98e:	b109      	cbz	r1, 800f994 <USBD_Init+0x16>
 800f990:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
 800f994:	2301      	movs	r3, #1
 800f996:	7002      	strb	r2, [r0, #0]
 800f998:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800f99c:	f000 fcf4 	bl	8010388 <USBD_LL_Init>
 800f9a0:	2000      	movs	r0, #0
 800f9a2:	bd08      	pop	{r3, pc}
 800f9a4:	2002      	movs	r0, #2
 800f9a6:	e7fc      	b.n	800f9a2 <USBD_Init+0x24>

0800f9a8 <USBD_RegisterClass>:
 800f9a8:	b119      	cbz	r1, 800f9b2 <USBD_RegisterClass+0xa>
 800f9aa:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	4770      	bx	lr
 800f9b2:	2002      	movs	r0, #2
 800f9b4:	4770      	bx	lr

0800f9b6 <USBD_Start>:
 800f9b6:	b508      	push	{r3, lr}
 800f9b8:	f000 fd12 	bl	80103e0 <USBD_LL_Start>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	bd08      	pop	{r3, pc}

0800f9c0 <USBD_Stop>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	4604      	mov	r4, r0
 800f9c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800f9c8:	7901      	ldrb	r1, [r0, #4]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	4798      	blx	r3
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 fd0f 	bl	80103f2 <USBD_LL_Stop>
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	bd10      	pop	{r4, pc}

0800f9d8 <USBD_SetClassConfig>:
 800f9d8:	b508      	push	{r3, lr}
 800f9da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800f9de:	b90b      	cbnz	r3, 800f9e4 <USBD_SetClassConfig+0xc>
 800f9e0:	2002      	movs	r0, #2
 800f9e2:	bd08      	pop	{r3, pc}
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4798      	blx	r3
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d0fa      	beq.n	800f9e2 <USBD_SetClassConfig+0xa>
 800f9ec:	e7f8      	b.n	800f9e0 <USBD_SetClassConfig+0x8>

0800f9ee <USBD_ClrClassConfig>:
 800f9ee:	b508      	push	{r3, lr}
 800f9f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	4798      	blx	r3
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	bd08      	pop	{r3, pc}

0800f9fc <USBD_LL_SetupStage>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800fa02:	4604      	mov	r4, r0
 800fa04:	4628      	mov	r0, r5
 800fa06:	f000 fb01 	bl	801000c <USBD_ParseSetupRequest>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 800fa10:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
 800fa14:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800fa18:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800fa1c:	f001 031f 	and.w	r3, r1, #31
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d008      	beq.n	800fa36 <USBD_LL_SetupStage+0x3a>
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d00b      	beq.n	800fa40 <USBD_LL_SetupStage+0x44>
 800fa28:	b97b      	cbnz	r3, 800fa4a <USBD_LL_SetupStage+0x4e>
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f000 f90d 	bl	800fc4c <USBD_StdDevReq>
 800fa32:	2000      	movs	r0, #0
 800fa34:	bd38      	pop	{r3, r4, r5, pc}
 800fa36:	4629      	mov	r1, r5
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f000 fa39 	bl	800feb0 <USBD_StdItfReq>
 800fa3e:	e7f8      	b.n	800fa32 <USBD_LL_SetupStage+0x36>
 800fa40:	4629      	mov	r1, r5
 800fa42:	4620      	mov	r0, r4
 800fa44:	f000 fa58 	bl	800fef8 <USBD_StdEPReq>
 800fa48:	e7f3      	b.n	800fa32 <USBD_LL_SetupStage+0x36>
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800fa50:	f000 fce4 	bl	801041c <USBD_LL_StallEP>
 800fa54:	e7ed      	b.n	800fa32 <USBD_LL_SetupStage+0x36>

0800fa56 <USBD_LL_DataOutStage>:
 800fa56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa58:	4604      	mov	r4, r0
 800fa5a:	4617      	mov	r7, r2
 800fa5c:	460d      	mov	r5, r1
 800fa5e:	bb39      	cbnz	r1, 800fab0 <USBD_LL_DataOutStage+0x5a>
 800fa60:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800fa64:	2b03      	cmp	r3, #3
 800fa66:	d11c      	bne.n	800faa2 <USBD_LL_DataOutStage+0x4c>
 800fa68:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 800fa6c:	4296      	cmp	r6, r2
 800fa6e:	d90b      	bls.n	800fa88 <USBD_LL_DataOutStage+0x32>
 800fa70:	1ab6      	subs	r6, r6, r2
 800fa72:	42b2      	cmp	r2, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
 800fa7a:	bf8c      	ite	hi
 800fa7c:	b2b2      	uxthhi	r2, r6
 800fa7e:	b292      	uxthls	r2, r2
 800fa80:	f000 fb21 	bl	80100c6 <USBD_CtlContinueRx>
 800fa84:	4628      	mov	r0, r5
 800fa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fa8c:	691b      	ldr	r3, [r3, #16]
 800fa8e:	b123      	cbz	r3, 800fa9a <USBD_LL_DataOutStage+0x44>
 800fa90:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fa94:	2a03      	cmp	r2, #3
 800fa96:	d100      	bne.n	800fa9a <USBD_LL_DataOutStage+0x44>
 800fa98:	4798      	blx	r3
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f000 fb1b 	bl	80100d6 <USBD_CtlSendStatus>
 800faa0:	e7f0      	b.n	800fa84 <USBD_LL_DataOutStage+0x2e>
 800faa2:	2b05      	cmp	r3, #5
 800faa4:	d1ee      	bne.n	800fa84 <USBD_LL_DataOutStage+0x2e>
 800faa6:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
 800faaa:	f000 fcb7 	bl	801041c <USBD_LL_StallEP>
 800faae:	e7e9      	b.n	800fa84 <USBD_LL_DataOutStage+0x2e>
 800fab0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	b133      	cbz	r3, 800fac6 <USBD_LL_DataOutStage+0x70>
 800fab8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fabc:	2a03      	cmp	r2, #3
 800fabe:	d102      	bne.n	800fac6 <USBD_LL_DataOutStage+0x70>
 800fac0:	4798      	blx	r3
 800fac2:	2500      	movs	r5, #0
 800fac4:	e7de      	b.n	800fa84 <USBD_LL_DataOutStage+0x2e>
 800fac6:	2502      	movs	r5, #2
 800fac8:	e7dc      	b.n	800fa84 <USBD_LL_DataOutStage+0x2e>

0800faca <USBD_LL_DataInStage>:
 800faca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800facc:	4604      	mov	r4, r0
 800face:	4617      	mov	r7, r2
 800fad0:	460d      	mov	r5, r1
 800fad2:	2900      	cmp	r1, #0
 800fad4:	d147      	bne.n	800fb66 <USBD_LL_DataInStage+0x9c>
 800fad6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d13c      	bne.n	800fb58 <USBD_LL_DataInStage+0x8e>
 800fade:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800fae2:	429e      	cmp	r6, r3
 800fae4:	d914      	bls.n	800fb10 <USBD_LL_DataInStage+0x46>
 800fae6:	1af3      	subs	r3, r6, r3
 800fae8:	4639      	mov	r1, r7
 800faea:	6203      	str	r3, [r0, #32]
 800faec:	b29a      	uxth	r2, r3
 800faee:	f000 fad5 	bl	801009c <USBD_CtlContinueSendData>
 800faf2:	462b      	mov	r3, r5
 800faf4:	462a      	mov	r2, r5
 800faf6:	4629      	mov	r1, r5
 800faf8:	4620      	mov	r0, r4
 800fafa:	f000 fcc5 	bl	8010488 <USBD_LL_PrepareReceive>
 800fafe:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d102      	bne.n	800fb0c <USBD_LL_DataInStage+0x42>
 800fb06:	2300      	movs	r3, #0
 800fb08:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb10:	69c2      	ldr	r2, [r0, #28]
 800fb12:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb16:	fb03 2616 	mls	r6, r3, r6, r2
 800fb1a:	b95e      	cbnz	r6, 800fb34 <USBD_LL_DataInStage+0x6a>
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d809      	bhi.n	800fb34 <USBD_LL_DataInStage+0x6a>
 800fb20:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d205      	bcs.n	800fb34 <USBD_LL_DataInStage+0x6a>
 800fb28:	460a      	mov	r2, r1
 800fb2a:	f000 fab7 	bl	801009c <USBD_CtlContinueSendData>
 800fb2e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800fb32:	e7de      	b.n	800faf2 <USBD_LL_DataInStage+0x28>
 800fb34:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	b12b      	cbz	r3, 800fb48 <USBD_LL_DataInStage+0x7e>
 800fb3c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800fb40:	2a03      	cmp	r2, #3
 800fb42:	d101      	bne.n	800fb48 <USBD_LL_DataInStage+0x7e>
 800fb44:	4620      	mov	r0, r4
 800fb46:	4798      	blx	r3
 800fb48:	2180      	movs	r1, #128	; 0x80
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f000 fc66 	bl	801041c <USBD_LL_StallEP>
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 facb 	bl	80100ec <USBD_CtlReceiveStatus>
 800fb56:	e7d2      	b.n	800fafe <USBD_LL_DataInStage+0x34>
 800fb58:	f033 0304 	bics.w	r3, r3, #4
 800fb5c:	d1cf      	bne.n	800fafe <USBD_LL_DataInStage+0x34>
 800fb5e:	2180      	movs	r1, #128	; 0x80
 800fb60:	f000 fc5c 	bl	801041c <USBD_LL_StallEP>
 800fb64:	e7cb      	b.n	800fafe <USBD_LL_DataInStage+0x34>
 800fb66:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	b133      	cbz	r3, 800fb7c <USBD_LL_DataInStage+0xb2>
 800fb6e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fb72:	2a03      	cmp	r2, #3
 800fb74:	d102      	bne.n	800fb7c <USBD_LL_DataInStage+0xb2>
 800fb76:	4798      	blx	r3
 800fb78:	2500      	movs	r5, #0
 800fb7a:	e7c7      	b.n	800fb0c <USBD_LL_DataInStage+0x42>
 800fb7c:	2502      	movs	r5, #2
 800fb7e:	e7c5      	b.n	800fb0c <USBD_LL_DataInStage+0x42>

0800fb80 <USBD_LL_Reset>:
 800fb80:	2200      	movs	r2, #0
 800fb82:	b570      	push	{r4, r5, r6, lr}
 800fb84:	4604      	mov	r4, r0
 800fb86:	2501      	movs	r5, #1
 800fb88:	2640      	movs	r6, #64	; 0x40
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	2340      	movs	r3, #64	; 0x40
 800fb8e:	f000 fc39 	bl	8010404 <USBD_LL_OpenEP>
 800fb92:	4633      	mov	r3, r6
 800fb94:	2180      	movs	r1, #128	; 0x80
 800fb96:	2200      	movs	r2, #0
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800fb9e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
 800fba2:	f000 fc2f 	bl	8010404 <USBD_LL_OpenEP>
 800fba6:	2100      	movs	r1, #0
 800fba8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800fbac:	61a5      	str	r5, [r4, #24]
 800fbae:	6266      	str	r6, [r4, #36]	; 0x24
 800fbb0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
 800fbb4:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
 800fbb8:	6061      	str	r1, [r4, #4]
 800fbba:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 800fbbe:	b123      	cbz	r3, 800fbca <USBD_LL_Reset+0x4a>
 800fbc0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	4798      	blx	r3
 800fbca:	2000      	movs	r0, #0
 800fbcc:	bd70      	pop	{r4, r5, r6, pc}

0800fbce <USBD_LL_SetSpeed>:
 800fbce:	7401      	strb	r1, [r0, #16]
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	4770      	bx	lr

0800fbd4 <USBD_LL_Suspend>:
 800fbd4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fbd8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
 800fbdc:	2304      	movs	r3, #4
 800fbde:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	4770      	bx	lr

0800fbe6 <USBD_LL_Resume>:
 800fbe6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	bf04      	itt	eq
 800fbee:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800fbf2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	4770      	bx	lr

0800fbfa <USBD_LL_SOF>:
 800fbfa:	b508      	push	{r3, lr}
 800fbfc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fc00:	2a03      	cmp	r2, #3
 800fc02:	d104      	bne.n	800fc0e <USBD_LL_SOF+0x14>
 800fc04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fc08:	69db      	ldr	r3, [r3, #28]
 800fc0a:	b103      	cbz	r3, 800fc0e <USBD_LL_SOF+0x14>
 800fc0c:	4798      	blx	r3
 800fc0e:	2000      	movs	r0, #0
 800fc10:	bd08      	pop	{r3, pc}

0800fc12 <USBD_LL_IsoINIncomplete>:
 800fc12:	2000      	movs	r0, #0
 800fc14:	4770      	bx	lr

0800fc16 <USBD_LL_IsoOUTIncomplete>:
 800fc16:	2000      	movs	r0, #0
 800fc18:	4770      	bx	lr

0800fc1a <USBD_LL_DevConnected>:
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	4770      	bx	lr

0800fc1e <USBD_LL_DevDisconnected>:
 800fc1e:	2201      	movs	r2, #1
 800fc20:	b508      	push	{r3, lr}
 800fc22:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
 800fc26:	f8d0 22b4 	ldr.w	r2, [r0, #692]	; 0x2b4
 800fc2a:	7901      	ldrb	r1, [r0, #4]
 800fc2c:	6852      	ldr	r2, [r2, #4]
 800fc2e:	4790      	blx	r2
 800fc30:	2000      	movs	r0, #0
 800fc32:	bd08      	pop	{r3, pc}

0800fc34 <USBD_CtlError.constprop.0>:
 800fc34:	b510      	push	{r4, lr}
 800fc36:	4604      	mov	r4, r0
 800fc38:	2180      	movs	r1, #128	; 0x80
 800fc3a:	f000 fbef 	bl	801041c <USBD_LL_StallEP>
 800fc3e:	4620      	mov	r0, r4
 800fc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc44:	2100      	movs	r1, #0
 800fc46:	f000 bbe9 	b.w	801041c <USBD_LL_StallEP>
	...

0800fc4c <USBD_StdDevReq>:
 800fc4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc4e:	780b      	ldrb	r3, [r1, #0]
 800fc50:	4604      	mov	r4, r0
 800fc52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc56:	2b20      	cmp	r3, #32
 800fc58:	460d      	mov	r5, r1
 800fc5a:	d012      	beq.n	800fc82 <USBD_StdDevReq+0x36>
 800fc5c:	2b40      	cmp	r3, #64	; 0x40
 800fc5e:	d010      	beq.n	800fc82 <USBD_StdDevReq+0x36>
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d151      	bne.n	800fd08 <USBD_StdDevReq+0xbc>
 800fc64:	784b      	ldrb	r3, [r1, #1]
 800fc66:	2b09      	cmp	r3, #9
 800fc68:	d84e      	bhi.n	800fd08 <USBD_StdDevReq+0xbc>
 800fc6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fc6e:	00f7      	.short	0x00f7
 800fc70:	004d0113 	.word	0x004d0113
 800fc74:	004d010c 	.word	0x004d010c
 800fc78:	00130090 	.word	0x00130090
 800fc7c:	00df004d 	.word	0x00df004d
 800fc80:	00ac      	.short	0x00ac
 800fc82:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800fc86:	4629      	mov	r1, r5
 800fc88:	4620      	mov	r0, r4
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	4798      	blx	r3
 800fc8e:	2000      	movs	r0, #0
 800fc90:	b003      	add	sp, #12
 800fc92:	bd30      	pop	{r4, r5, pc}
 800fc94:	2300      	movs	r3, #0
 800fc96:	8849      	ldrh	r1, [r1, #2]
 800fc98:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fc9c:	0a0b      	lsrs	r3, r1, #8
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	2b06      	cmp	r3, #6
 800fca2:	d831      	bhi.n	800fd08 <USBD_StdDevReq+0xbc>
 800fca4:	e8df f003 	tbb	[pc, r3]
 800fca8:	30231604 	.word	0x30231604
 800fcac:	5130      	.short	0x5130
 800fcae:	5b          	.byte	0x5b
 800fcaf:	00          	.byte	0x00
 800fcb0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	7c20      	ldrb	r0, [r4, #16]
 800fcb8:	f10d 0106 	add.w	r1, sp, #6
 800fcbc:	4798      	blx	r3
 800fcbe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fcc2:	2a00      	cmp	r2, #0
 800fcc4:	d05f      	beq.n	800fd86 <USBD_StdDevReq+0x13a>
 800fcc6:	88eb      	ldrh	r3, [r5, #6]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d153      	bne.n	800fd74 <USBD_StdDevReq+0x128>
 800fccc:	4620      	mov	r0, r4
 800fcce:	f000 fa02 	bl	80100d6 <USBD_CtlSendStatus>
 800fcd2:	e7dc      	b.n	800fc8e <USBD_StdDevReq+0x42>
 800fcd4:	7c02      	ldrb	r2, [r0, #16]
 800fcd6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fcda:	b932      	cbnz	r2, 800fcea <USBD_StdDevReq+0x9e>
 800fcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcde:	f10d 0006 	add.w	r0, sp, #6
 800fce2:	4798      	blx	r3
 800fce4:	2302      	movs	r3, #2
 800fce6:	7043      	strb	r3, [r0, #1]
 800fce8:	e7e9      	b.n	800fcbe <USBD_StdDevReq+0x72>
 800fcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcec:	e7f7      	b.n	800fcde <USBD_StdDevReq+0x92>
 800fcee:	b2c9      	uxtb	r1, r1
 800fcf0:	2905      	cmp	r1, #5
 800fcf2:	d821      	bhi.n	800fd38 <USBD_StdDevReq+0xec>
 800fcf4:	e8df f001 	tbb	[pc, r1]
 800fcf8:	14100c03 	.word	0x14100c03
 800fcfc:	1c18      	.short	0x1c18
 800fcfe:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1d6      	bne.n	800fcb6 <USBD_StdDevReq+0x6a>
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f7ff ff93 	bl	800fc34 <USBD_CtlError.constprop.0>
 800fd0e:	e7be      	b.n	800fc8e <USBD_StdDevReq+0x42>
 800fd10:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	e7f5      	b.n	800fd04 <USBD_StdDevReq+0xb8>
 800fd18:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	e7f1      	b.n	800fd04 <USBD_StdDevReq+0xb8>
 800fd20:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	e7ed      	b.n	800fd04 <USBD_StdDevReq+0xb8>
 800fd28:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fd2c:	695b      	ldr	r3, [r3, #20]
 800fd2e:	e7e9      	b.n	800fd04 <USBD_StdDevReq+0xb8>
 800fd30:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800fd34:	699b      	ldr	r3, [r3, #24]
 800fd36:	e7e5      	b.n	800fd04 <USBD_StdDevReq+0xb8>
 800fd38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d0e2      	beq.n	800fd08 <USBD_StdDevReq+0xbc>
 800fd42:	f10d 0206 	add.w	r2, sp, #6
 800fd46:	4798      	blx	r3
 800fd48:	e7b9      	b.n	800fcbe <USBD_StdDevReq+0x72>
 800fd4a:	7c03      	ldrb	r3, [r0, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1db      	bne.n	800fd08 <USBD_StdDevReq+0xbc>
 800fd50:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fd54:	f10d 0006 	add.w	r0, sp, #6
 800fd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5a:	4798      	blx	r3
 800fd5c:	e7af      	b.n	800fcbe <USBD_StdDevReq+0x72>
 800fd5e:	7c03      	ldrb	r3, [r0, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d1d1      	bne.n	800fd08 <USBD_StdDevReq+0xbc>
 800fd64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fd68:	f10d 0006 	add.w	r0, sp, #6
 800fd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6e:	4798      	blx	r3
 800fd70:	2307      	movs	r3, #7
 800fd72:	e7b8      	b.n	800fce6 <USBD_StdDevReq+0x9a>
 800fd74:	429a      	cmp	r2, r3
 800fd76:	bf28      	it	cs
 800fd78:	461a      	movcs	r2, r3
 800fd7a:	4601      	mov	r1, r0
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fd82:	f000 f97e 	bl	8010082 <USBD_CtlSendData>
 800fd86:	88eb      	ldrh	r3, [r5, #6]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d180      	bne.n	800fc8e <USBD_StdDevReq+0x42>
 800fd8c:	e79e      	b.n	800fccc <USBD_StdDevReq+0x80>
 800fd8e:	888b      	ldrh	r3, [r1, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1b9      	bne.n	800fd08 <USBD_StdDevReq+0xbc>
 800fd94:	88cb      	ldrh	r3, [r1, #6]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1b6      	bne.n	800fd08 <USBD_StdDevReq+0xbc>
 800fd9a:	884d      	ldrh	r5, [r1, #2]
 800fd9c:	2d7f      	cmp	r5, #127	; 0x7f
 800fd9e:	d8b3      	bhi.n	800fd08 <USBD_StdDevReq+0xbc>
 800fda0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d0af      	beq.n	800fd08 <USBD_StdDevReq+0xbc>
 800fda8:	b2e9      	uxtb	r1, r5
 800fdaa:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
 800fdae:	f000 fb59 	bl	8010464 <USBD_LL_SetUSBAddress>
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f000 f98f 	bl	80100d6 <USBD_CtlSendStatus>
 800fdb8:	b11d      	cbz	r5, 800fdc2 <USBD_StdDevReq+0x176>
 800fdba:	2302      	movs	r3, #2
 800fdbc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800fdc0:	e765      	b.n	800fc8e <USBD_StdDevReq+0x42>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e7fa      	b.n	800fdbc <USBD_StdDevReq+0x170>
 800fdc6:	7889      	ldrb	r1, [r1, #2]
 800fdc8:	4d38      	ldr	r5, [pc, #224]	; (800feac <USBD_StdDevReq+0x260>)
 800fdca:	2901      	cmp	r1, #1
 800fdcc:	7029      	strb	r1, [r5, #0]
 800fdce:	d89b      	bhi.n	800fd08 <USBD_StdDevReq+0xbc>
 800fdd0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d008      	beq.n	800fdea <USBD_StdDevReq+0x19e>
 800fdd8:	2b03      	cmp	r3, #3
 800fdda:	d015      	beq.n	800fe08 <USBD_StdDevReq+0x1bc>
 800fddc:	f7ff ff2a 	bl	800fc34 <USBD_CtlError.constprop.0>
 800fde0:	4620      	mov	r0, r4
 800fde2:	7829      	ldrb	r1, [r5, #0]
 800fde4:	f7ff fe03 	bl	800f9ee <USBD_ClrClassConfig>
 800fde8:	e751      	b.n	800fc8e <USBD_StdDevReq+0x42>
 800fdea:	2900      	cmp	r1, #0
 800fdec:	f43f af6e 	beq.w	800fccc <USBD_StdDevReq+0x80>
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	2303      	movs	r3, #3
 800fdf4:	6041      	str	r1, [r0, #4]
 800fdf6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f7ff fdec 	bl	800f9d8 <USBD_SetClassConfig>
 800fe00:	2802      	cmp	r0, #2
 800fe02:	f47f af63 	bne.w	800fccc <USBD_StdDevReq+0x80>
 800fe06:	e77f      	b.n	800fd08 <USBD_StdDevReq+0xbc>
 800fe08:	b931      	cbnz	r1, 800fe18 <USBD_StdDevReq+0x1cc>
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	6041      	str	r1, [r0, #4]
 800fe0e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800fe12:	f7ff fdec 	bl	800f9ee <USBD_ClrClassConfig>
 800fe16:	e759      	b.n	800fccc <USBD_StdDevReq+0x80>
 800fe18:	6841      	ldr	r1, [r0, #4]
 800fe1a:	2901      	cmp	r1, #1
 800fe1c:	f43f af56 	beq.w	800fccc <USBD_StdDevReq+0x80>
 800fe20:	b2c9      	uxtb	r1, r1
 800fe22:	f7ff fde4 	bl	800f9ee <USBD_ClrClassConfig>
 800fe26:	7829      	ldrb	r1, [r5, #0]
 800fe28:	6061      	str	r1, [r4, #4]
 800fe2a:	e7e6      	b.n	800fdfa <USBD_StdDevReq+0x1ae>
 800fe2c:	88ca      	ldrh	r2, [r1, #6]
 800fe2e:	2a01      	cmp	r2, #1
 800fe30:	f47f af6a 	bne.w	800fd08 <USBD_StdDevReq+0xbc>
 800fe34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d80a      	bhi.n	800fe52 <USBD_StdDevReq+0x206>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f43f af63 	beq.w	800fd08 <USBD_StdDevReq+0xbc>
 800fe42:	4601      	mov	r1, r0
 800fe44:	2300      	movs	r3, #0
 800fe46:	f841 3f08 	str.w	r3, [r1, #8]!
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 f919 	bl	8010082 <USBD_CtlSendData>
 800fe50:	e71d      	b.n	800fc8e <USBD_StdDevReq+0x42>
 800fe52:	2b03      	cmp	r3, #3
 800fe54:	f47f af58 	bne.w	800fd08 <USBD_StdDevReq+0xbc>
 800fe58:	1d01      	adds	r1, r0, #4
 800fe5a:	e7f6      	b.n	800fe4a <USBD_StdDevReq+0x1fe>
 800fe5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fe60:	3b01      	subs	r3, #1
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	f63f af50 	bhi.w	800fd08 <USBD_StdDevReq+0xbc>
 800fe68:	88cb      	ldrh	r3, [r1, #6]
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	f47f af4c 	bne.w	800fd08 <USBD_StdDevReq+0xbc>
 800fe70:	2301      	movs	r3, #1
 800fe72:	60c3      	str	r3, [r0, #12]
 800fe74:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800fe78:	b10b      	cbz	r3, 800fe7e <USBD_StdDevReq+0x232>
 800fe7a:	2303      	movs	r3, #3
 800fe7c:	60c3      	str	r3, [r0, #12]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	f104 010c 	add.w	r1, r4, #12
 800fe84:	e7e1      	b.n	800fe4a <USBD_StdDevReq+0x1fe>
 800fe86:	884b      	ldrh	r3, [r1, #2]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	f47f af00 	bne.w	800fc8e <USBD_StdDevReq+0x42>
 800fe8e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800fe92:	e71b      	b.n	800fccc <USBD_StdDevReq+0x80>
 800fe94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	f63f af34 	bhi.w	800fd08 <USBD_StdDevReq+0xbc>
 800fea0:	884b      	ldrh	r3, [r1, #2]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	f47f aef3 	bne.w	800fc8e <USBD_StdDevReq+0x42>
 800fea8:	2300      	movs	r3, #0
 800feaa:	e7f0      	b.n	800fe8e <USBD_StdDevReq+0x242>
 800feac:	2000046b 	.word	0x2000046b

0800feb0 <USBD_StdItfReq>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	780b      	ldrb	r3, [r1, #0]
 800feb4:	4604      	mov	r4, r0
 800feb6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800feba:	2a40      	cmp	r2, #64	; 0x40
 800febc:	460d      	mov	r5, r1
 800febe:	d001      	beq.n	800fec4 <USBD_StdItfReq+0x14>
 800fec0:	065b      	lsls	r3, r3, #25
 800fec2:	d415      	bmi.n	800fef0 <USBD_StdItfReq+0x40>
 800fec4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800fec8:	3b01      	subs	r3, #1
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d810      	bhi.n	800fef0 <USBD_StdItfReq+0x40>
 800fece:	792b      	ldrb	r3, [r5, #4]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d80d      	bhi.n	800fef0 <USBD_StdItfReq+0x40>
 800fed4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800fed8:	4629      	mov	r1, r5
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	4620      	mov	r0, r4
 800fede:	4798      	blx	r3
 800fee0:	88eb      	ldrh	r3, [r5, #6]
 800fee2:	b91b      	cbnz	r3, 800feec <USBD_StdItfReq+0x3c>
 800fee4:	b910      	cbnz	r0, 800feec <USBD_StdItfReq+0x3c>
 800fee6:	4620      	mov	r0, r4
 800fee8:	f000 f8f5 	bl	80100d6 <USBD_CtlSendStatus>
 800feec:	2000      	movs	r0, #0
 800feee:	bd38      	pop	{r3, r4, r5, pc}
 800fef0:	4620      	mov	r0, r4
 800fef2:	f7ff fe9f 	bl	800fc34 <USBD_CtlError.constprop.0>
 800fef6:	e7f9      	b.n	800feec <USBD_StdItfReq+0x3c>

0800fef8 <USBD_StdEPReq>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	780a      	ldrb	r2, [r1, #0]
 800fefc:	4604      	mov	r4, r0
 800fefe:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800ff02:	2a20      	cmp	r2, #32
 800ff04:	460b      	mov	r3, r1
 800ff06:	d027      	beq.n	800ff58 <USBD_StdEPReq+0x60>
 800ff08:	2a40      	cmp	r2, #64	; 0x40
 800ff0a:	d025      	beq.n	800ff58 <USBD_StdEPReq+0x60>
 800ff0c:	bb92      	cbnz	r2, 800ff74 <USBD_StdEPReq+0x7c>
 800ff0e:	785a      	ldrb	r2, [r3, #1]
 800ff10:	888d      	ldrh	r5, [r1, #4]
 800ff12:	2a01      	cmp	r2, #1
 800ff14:	7909      	ldrb	r1, [r1, #4]
 800ff16:	d03d      	beq.n	800ff94 <USBD_StdEPReq+0x9c>
 800ff18:	2a03      	cmp	r2, #3
 800ff1a:	d025      	beq.n	800ff68 <USBD_StdEPReq+0x70>
 800ff1c:	bb52      	cbnz	r2, 800ff74 <USBD_StdEPReq+0x7c>
 800ff1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d04d      	beq.n	800ffc2 <USBD_StdEPReq+0xca>
 800ff26:	2b03      	cmp	r3, #3
 800ff28:	d124      	bne.n	800ff74 <USBD_StdEPReq+0x7c>
 800ff2a:	2214      	movs	r2, #20
 800ff2c:	f001 030f 	and.w	r3, r1, #15
 800ff30:	f015 0f80 	tst.w	r5, #128	; 0x80
 800ff34:	fb02 0303 	mla	r3, r2, r3, r0
 800ff38:	d054      	beq.n	800ffe4 <USBD_StdEPReq+0xec>
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	b1d3      	cbz	r3, 800ff74 <USBD_StdEPReq+0x7c>
 800ff3e:	2314      	movs	r3, #20
 800ff40:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800ff44:	fb05 3303 	mla	r3, r5, r3, r3
 800ff48:	18c5      	adds	r5, r0, r3
 800ff4a:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800ff4e:	d155      	bne.n	800fffc <USBD_StdEPReq+0x104>
 800ff50:	602b      	str	r3, [r5, #0]
 800ff52:	2202      	movs	r2, #2
 800ff54:	4629      	mov	r1, r5
 800ff56:	e041      	b.n	800ffdc <USBD_StdEPReq+0xe4>
 800ff58:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	4620      	mov	r0, r4
 800ff60:	6892      	ldr	r2, [r2, #8]
 800ff62:	4790      	blx	r2
 800ff64:	2000      	movs	r0, #0
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
 800ff68:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ff6c:	2a02      	cmp	r2, #2
 800ff6e:	d01f      	beq.n	800ffb0 <USBD_StdEPReq+0xb8>
 800ff70:	2a03      	cmp	r2, #3
 800ff72:	d003      	beq.n	800ff7c <USBD_StdEPReq+0x84>
 800ff74:	4620      	mov	r0, r4
 800ff76:	f7ff fe5d 	bl	800fc34 <USBD_CtlError.constprop.0>
 800ff7a:	e7f3      	b.n	800ff64 <USBD_StdEPReq+0x6c>
 800ff7c:	885a      	ldrh	r2, [r3, #2]
 800ff7e:	b92a      	cbnz	r2, 800ff8c <USBD_StdEPReq+0x94>
 800ff80:	064a      	lsls	r2, r1, #25
 800ff82:	d003      	beq.n	800ff8c <USBD_StdEPReq+0x94>
 800ff84:	88db      	ldrh	r3, [r3, #6]
 800ff86:	b90b      	cbnz	r3, 800ff8c <USBD_StdEPReq+0x94>
 800ff88:	f000 fa48 	bl	801041c <USBD_LL_StallEP>
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f000 f8a2 	bl	80100d6 <USBD_CtlSendStatus>
 800ff92:	e7e7      	b.n	800ff64 <USBD_StdEPReq+0x6c>
 800ff94:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ff98:	2a02      	cmp	r2, #2
 800ff9a:	d009      	beq.n	800ffb0 <USBD_StdEPReq+0xb8>
 800ff9c:	2a03      	cmp	r2, #3
 800ff9e:	d1e9      	bne.n	800ff74 <USBD_StdEPReq+0x7c>
 800ffa0:	885b      	ldrh	r3, [r3, #2]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1de      	bne.n	800ff64 <USBD_StdEPReq+0x6c>
 800ffa6:	064d      	lsls	r5, r1, #25
 800ffa8:	d0f0      	beq.n	800ff8c <USBD_StdEPReq+0x94>
 800ffaa:	f000 fa40 	bl	801042e <USBD_LL_ClearStallEP>
 800ffae:	e7ed      	b.n	800ff8c <USBD_StdEPReq+0x94>
 800ffb0:	064b      	lsls	r3, r1, #25
 800ffb2:	d0df      	beq.n	800ff74 <USBD_StdEPReq+0x7c>
 800ffb4:	f000 fa32 	bl	801041c <USBD_LL_StallEP>
 800ffb8:	2180      	movs	r1, #128	; 0x80
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 fa2e 	bl	801041c <USBD_LL_StallEP>
 800ffc0:	e7d0      	b.n	800ff64 <USBD_StdEPReq+0x6c>
 800ffc2:	064a      	lsls	r2, r1, #25
 800ffc4:	d1d6      	bne.n	800ff74 <USBD_StdEPReq+0x7c>
 800ffc6:	062b      	lsls	r3, r5, #24
 800ffc8:	f04f 0300 	mov.w	r3, #0
 800ffcc:	f04f 0202 	mov.w	r2, #2
 800ffd0:	bf4c      	ite	mi
 800ffd2:	f100 0114 	addmi.w	r1, r0, #20
 800ffd6:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
 800ffda:	600b      	str	r3, [r1, #0]
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 f850 	bl	8010082 <USBD_CtlSendData>
 800ffe2:	e7bf      	b.n	800ff64 <USBD_StdEPReq+0x6c>
 800ffe4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d0c3      	beq.n	800ff74 <USBD_StdEPReq+0x7c>
 800ffec:	2314      	movs	r3, #20
 800ffee:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800fff2:	fb03 0505 	mla	r5, r3, r5, r0
 800fff6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800fffa:	e7a6      	b.n	800ff4a <USBD_StdEPReq+0x52>
 800fffc:	4620      	mov	r0, r4
 800fffe:	f000 fa1f 	bl	8010440 <USBD_LL_IsStallEP>
 8010002:	b108      	cbz	r0, 8010008 <USBD_StdEPReq+0x110>
 8010004:	2301      	movs	r3, #1
 8010006:	e7a3      	b.n	800ff50 <USBD_StdEPReq+0x58>
 8010008:	6028      	str	r0, [r5, #0]
 801000a:	e7a2      	b.n	800ff52 <USBD_StdEPReq+0x5a>

0801000c <USBD_ParseSetupRequest>:
 801000c:	780b      	ldrb	r3, [r1, #0]
 801000e:	7003      	strb	r3, [r0, #0]
 8010010:	784b      	ldrb	r3, [r1, #1]
 8010012:	7043      	strb	r3, [r0, #1]
 8010014:	78ca      	ldrb	r2, [r1, #3]
 8010016:	788b      	ldrb	r3, [r1, #2]
 8010018:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801001c:	8043      	strh	r3, [r0, #2]
 801001e:	794a      	ldrb	r2, [r1, #5]
 8010020:	790b      	ldrb	r3, [r1, #4]
 8010022:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010026:	8083      	strh	r3, [r0, #4]
 8010028:	79ca      	ldrb	r2, [r1, #7]
 801002a:	798b      	ldrb	r3, [r1, #6]
 801002c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010030:	80c3      	strh	r3, [r0, #6]
 8010032:	4770      	bx	lr

08010034 <USBD_CtlError>:
 8010034:	b510      	push	{r4, lr}
 8010036:	4604      	mov	r4, r0
 8010038:	2180      	movs	r1, #128	; 0x80
 801003a:	f000 f9ef 	bl	801041c <USBD_LL_StallEP>
 801003e:	4620      	mov	r0, r4
 8010040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010044:	2100      	movs	r1, #0
 8010046:	f000 b9e9 	b.w	801041c <USBD_LL_StallEP>

0801004a <USBD_GetString>:
 801004a:	b530      	push	{r4, r5, lr}
 801004c:	b188      	cbz	r0, 8010072 <USBD_GetString+0x28>
 801004e:	2400      	movs	r4, #0
 8010050:	3801      	subs	r0, #1
 8010052:	4623      	mov	r3, r4
 8010054:	3401      	adds	r4, #1
 8010056:	5d05      	ldrb	r5, [r0, r4]
 8010058:	2d00      	cmp	r5, #0
 801005a:	d1fa      	bne.n	8010052 <USBD_GetString+0x8>
 801005c:	b2db      	uxtb	r3, r3
 801005e:	3301      	adds	r3, #1
 8010060:	005b      	lsls	r3, r3, #1
 8010062:	8013      	strh	r3, [r2, #0]
 8010064:	700b      	strb	r3, [r1, #0]
 8010066:	2303      	movs	r3, #3
 8010068:	704b      	strb	r3, [r1, #1]
 801006a:	2302      	movs	r3, #2
 801006c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8010070:	b904      	cbnz	r4, 8010074 <USBD_GetString+0x2a>
 8010072:	bd30      	pop	{r4, r5, pc}
 8010074:	1c5a      	adds	r2, r3, #1
 8010076:	54cc      	strb	r4, [r1, r3]
 8010078:	b2d2      	uxtb	r2, r2
 801007a:	3302      	adds	r3, #2
 801007c:	b2db      	uxtb	r3, r3
 801007e:	548d      	strb	r5, [r1, r2]
 8010080:	e7f4      	b.n	801006c <USBD_GetString+0x22>

08010082 <USBD_CtlSendData>:
 8010082:	4613      	mov	r3, r2
 8010084:	2202      	movs	r2, #2
 8010086:	b510      	push	{r4, lr}
 8010088:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801008c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
 8010090:	460a      	mov	r2, r1
 8010092:	2100      	movs	r1, #0
 8010094:	f000 f9ef 	bl	8010476 <USBD_LL_Transmit>
 8010098:	2000      	movs	r0, #0
 801009a:	bd10      	pop	{r4, pc}

0801009c <USBD_CtlContinueSendData>:
 801009c:	b508      	push	{r3, lr}
 801009e:	4613      	mov	r3, r2
 80100a0:	460a      	mov	r2, r1
 80100a2:	2100      	movs	r1, #0
 80100a4:	f000 f9e7 	bl	8010476 <USBD_LL_Transmit>
 80100a8:	2000      	movs	r0, #0
 80100aa:	bd08      	pop	{r3, pc}

080100ac <USBD_CtlPrepareRx>:
 80100ac:	4613      	mov	r3, r2
 80100ae:	2203      	movs	r2, #3
 80100b0:	b510      	push	{r4, lr}
 80100b2:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
 80100b6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
 80100ba:	460a      	mov	r2, r1
 80100bc:	2100      	movs	r1, #0
 80100be:	f000 f9e3 	bl	8010488 <USBD_LL_PrepareReceive>
 80100c2:	2000      	movs	r0, #0
 80100c4:	bd10      	pop	{r4, pc}

080100c6 <USBD_CtlContinueRx>:
 80100c6:	b508      	push	{r3, lr}
 80100c8:	4613      	mov	r3, r2
 80100ca:	460a      	mov	r2, r1
 80100cc:	2100      	movs	r1, #0
 80100ce:	f000 f9db 	bl	8010488 <USBD_LL_PrepareReceive>
 80100d2:	2000      	movs	r0, #0
 80100d4:	bd08      	pop	{r3, pc}

080100d6 <USBD_CtlSendStatus>:
 80100d6:	b508      	push	{r3, lr}
 80100d8:	2304      	movs	r3, #4
 80100da:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
 80100de:	2300      	movs	r3, #0
 80100e0:	461a      	mov	r2, r3
 80100e2:	4619      	mov	r1, r3
 80100e4:	f000 f9c7 	bl	8010476 <USBD_LL_Transmit>
 80100e8:	2000      	movs	r0, #0
 80100ea:	bd08      	pop	{r3, pc}

080100ec <USBD_CtlReceiveStatus>:
 80100ec:	b508      	push	{r3, lr}
 80100ee:	2305      	movs	r3, #5
 80100f0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
 80100f4:	2300      	movs	r3, #0
 80100f6:	461a      	mov	r2, r3
 80100f8:	4619      	mov	r1, r3
 80100fa:	f000 f9c5 	bl	8010488 <USBD_LL_PrepareReceive>
 80100fe:	2000      	movs	r0, #0
 8010100:	bd08      	pop	{r3, pc}
	...

08010104 <MX_USB_DEVICE_Init>:
 8010104:	b508      	push	{r3, lr}
 8010106:	2200      	movs	r2, #0
 8010108:	490e      	ldr	r1, [pc, #56]	; (8010144 <MX_USB_DEVICE_Init+0x40>)
 801010a:	480f      	ldr	r0, [pc, #60]	; (8010148 <MX_USB_DEVICE_Init+0x44>)
 801010c:	f7ff fc37 	bl	800f97e <USBD_Init>
 8010110:	b108      	cbz	r0, 8010116 <MX_USB_DEVICE_Init+0x12>
 8010112:	f7f0 fffd 	bl	8001110 <Error_Handler>
 8010116:	490d      	ldr	r1, [pc, #52]	; (801014c <MX_USB_DEVICE_Init+0x48>)
 8010118:	480b      	ldr	r0, [pc, #44]	; (8010148 <MX_USB_DEVICE_Init+0x44>)
 801011a:	f7ff fc45 	bl	800f9a8 <USBD_RegisterClass>
 801011e:	b108      	cbz	r0, 8010124 <MX_USB_DEVICE_Init+0x20>
 8010120:	f7f0 fff6 	bl	8001110 <Error_Handler>
 8010124:	490a      	ldr	r1, [pc, #40]	; (8010150 <MX_USB_DEVICE_Init+0x4c>)
 8010126:	4808      	ldr	r0, [pc, #32]	; (8010148 <MX_USB_DEVICE_Init+0x44>)
 8010128:	f7ff fc24 	bl	800f974 <USBD_DFU_RegisterMedia>
 801012c:	b108      	cbz	r0, 8010132 <MX_USB_DEVICE_Init+0x2e>
 801012e:	f7f0 ffef 	bl	8001110 <Error_Handler>
 8010132:	4805      	ldr	r0, [pc, #20]	; (8010148 <MX_USB_DEVICE_Init+0x44>)
 8010134:	f7ff fc3f 	bl	800f9b6 <USBD_Start>
 8010138:	b118      	cbz	r0, 8010142 <MX_USB_DEVICE_Init+0x3e>
 801013a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801013e:	f7f0 bfe7 	b.w	8001110 <Error_Handler>
 8010142:	bd08      	pop	{r3, pc}
 8010144:	200000b8 	.word	0x200000b8
 8010148:	2000046c 	.word	0x2000046c
 801014c:	20000054 	.word	0x20000054
 8010150:	20000108 	.word	0x20000108

08010154 <USBD_FS_DeviceDescriptor>:
 8010154:	2312      	movs	r3, #18
 8010156:	4801      	ldr	r0, [pc, #4]	; (801015c <USBD_FS_DeviceDescriptor+0x8>)
 8010158:	800b      	strh	r3, [r1, #0]
 801015a:	4770      	bx	lr
 801015c:	200000d4 	.word	0x200000d4

08010160 <USBD_FS_LangIDStrDescriptor>:
 8010160:	2304      	movs	r3, #4
 8010162:	4801      	ldr	r0, [pc, #4]	; (8010168 <USBD_FS_LangIDStrDescriptor+0x8>)
 8010164:	800b      	strh	r3, [r1, #0]
 8010166:	4770      	bx	lr
 8010168:	200000e8 	.word	0x200000e8

0801016c <IntToUnicode>:
 801016c:	2300      	movs	r3, #0
 801016e:	b570      	push	{r4, r5, r6, lr}
 8010170:	461e      	mov	r6, r3
 8010172:	1c4d      	adds	r5, r1, #1
 8010174:	0f04      	lsrs	r4, r0, #28
 8010176:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 801017a:	bf34      	ite	cc
 801017c:	3430      	addcc	r4, #48	; 0x30
 801017e:	3437      	addcs	r4, #55	; 0x37
 8010180:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8010184:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 8010188:	3301      	adds	r3, #1
 801018a:	b2dc      	uxtb	r4, r3
 801018c:	42a2      	cmp	r2, r4
 801018e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010192:	d8ef      	bhi.n	8010174 <IntToUnicode+0x8>
 8010194:	bd70      	pop	{r4, r5, r6, pc}
	...

08010198 <USBD_FS_SerialStrDescriptor>:
 8010198:	231a      	movs	r3, #26
 801019a:	b510      	push	{r4, lr}
 801019c:	800b      	strh	r3, [r1, #0]
 801019e:	4b0a      	ldr	r3, [pc, #40]	; (80101c8 <USBD_FS_SerialStrDescriptor+0x30>)
 80101a0:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80101a4:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
 80101a8:	1880      	adds	r0, r0, r2
 80101aa:	d00a      	beq.n	80101c2 <USBD_FS_SerialStrDescriptor+0x2a>
 80101ac:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
 80101b0:	4906      	ldr	r1, [pc, #24]	; (80101cc <USBD_FS_SerialStrDescriptor+0x34>)
 80101b2:	2208      	movs	r2, #8
 80101b4:	f7ff ffda 	bl	801016c <IntToUnicode>
 80101b8:	2204      	movs	r2, #4
 80101ba:	4620      	mov	r0, r4
 80101bc:	3110      	adds	r1, #16
 80101be:	f7ff ffd5 	bl	801016c <IntToUnicode>
 80101c2:	4803      	ldr	r0, [pc, #12]	; (80101d0 <USBD_FS_SerialStrDescriptor+0x38>)
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	bf00      	nop
 80101c8:	1ffff000 	.word	0x1ffff000
 80101cc:	200000ee 	.word	0x200000ee
 80101d0:	200000ec 	.word	0x200000ec

080101d4 <USBD_FS_ManufacturerStrDescriptor>:
 80101d4:	b510      	push	{r4, lr}
 80101d6:	4c04      	ldr	r4, [pc, #16]	; (80101e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80101d8:	460a      	mov	r2, r1
 80101da:	4804      	ldr	r0, [pc, #16]	; (80101ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80101dc:	4621      	mov	r1, r4
 80101de:	f7ff ff34 	bl	801004a <USBD_GetString>
 80101e2:	4620      	mov	r0, r4
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	bf00      	nop
 80101e8:	20000730 	.word	0x20000730
 80101ec:	08010ea0 	.word	0x08010ea0

080101f0 <USBD_FS_ProductStrDescriptor>:
 80101f0:	b510      	push	{r4, lr}
 80101f2:	4c04      	ldr	r4, [pc, #16]	; (8010204 <USBD_FS_ProductStrDescriptor+0x14>)
 80101f4:	460a      	mov	r2, r1
 80101f6:	4804      	ldr	r0, [pc, #16]	; (8010208 <USBD_FS_ProductStrDescriptor+0x18>)
 80101f8:	4621      	mov	r1, r4
 80101fa:	f7ff ff26 	bl	801004a <USBD_GetString>
 80101fe:	4620      	mov	r0, r4
 8010200:	bd10      	pop	{r4, pc}
 8010202:	bf00      	nop
 8010204:	20000730 	.word	0x20000730
 8010208:	08010eb3 	.word	0x08010eb3

0801020c <USBD_FS_ConfigStrDescriptor>:
 801020c:	b510      	push	{r4, lr}
 801020e:	4c04      	ldr	r4, [pc, #16]	; (8010220 <USBD_FS_ConfigStrDescriptor+0x14>)
 8010210:	460a      	mov	r2, r1
 8010212:	4804      	ldr	r0, [pc, #16]	; (8010224 <USBD_FS_ConfigStrDescriptor+0x18>)
 8010214:	4621      	mov	r1, r4
 8010216:	f7ff ff18 	bl	801004a <USBD_GetString>
 801021a:	4620      	mov	r0, r4
 801021c:	bd10      	pop	{r4, pc}
 801021e:	bf00      	nop
 8010220:	20000730 	.word	0x20000730
 8010224:	08010ed2 	.word	0x08010ed2

08010228 <USBD_FS_InterfaceStrDescriptor>:
 8010228:	b510      	push	{r4, lr}
 801022a:	4c04      	ldr	r4, [pc, #16]	; (801023c <USBD_FS_InterfaceStrDescriptor+0x14>)
 801022c:	460a      	mov	r2, r1
 801022e:	4804      	ldr	r0, [pc, #16]	; (8010240 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8010230:	4621      	mov	r1, r4
 8010232:	f7ff ff0a 	bl	801004a <USBD_GetString>
 8010236:	4620      	mov	r0, r4
 8010238:	bd10      	pop	{r4, pc}
 801023a:	bf00      	nop
 801023c:	20000730 	.word	0x20000730
 8010240:	08010edd 	.word	0x08010edd

08010244 <MEM_If_Init_FS>:
 8010244:	2000      	movs	r0, #0
 8010246:	4770      	bx	lr

08010248 <MEM_If_Erase_FS>:
 8010248:	2000      	movs	r0, #0
 801024a:	4770      	bx	lr

0801024c <MEM_If_Write_FS>:
 801024c:	2000      	movs	r0, #0
 801024e:	4770      	bx	lr

08010250 <MEM_If_Read_FS>:
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr

08010254 <MEM_If_GetStatus_FS>:
 8010254:	2000      	movs	r0, #0
 8010256:	4770      	bx	lr

08010258 <MEM_If_DeInit_FS>:
 8010258:	2000      	movs	r0, #0
 801025a:	4770      	bx	lr

0801025c <USBD_Get_USB_Status>:
 801025c:	2803      	cmp	r0, #3
 801025e:	bf9a      	itte	ls
 8010260:	4b01      	ldrls	r3, [pc, #4]	; (8010268 <USBD_Get_USB_Status+0xc>)
 8010262:	5c18      	ldrbls	r0, [r3, r0]
 8010264:	2002      	movhi	r0, #2
 8010266:	4770      	bx	lr
 8010268:	08010f48 	.word	0x08010f48

0801026c <HAL_PCD_MspInit>:
 801026c:	b510      	push	{r4, lr}
 801026e:	4604      	mov	r4, r0
 8010270:	b086      	sub	sp, #24
 8010272:	2210      	movs	r2, #16
 8010274:	2100      	movs	r1, #0
 8010276:	a802      	add	r0, sp, #8
 8010278:	f000 fa9e 	bl	80107b8 <memset>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010282:	d121      	bne.n	80102c8 <HAL_PCD_MspInit+0x5c>
 8010284:	4c11      	ldr	r4, [pc, #68]	; (80102cc <HAL_PCD_MspInit+0x60>)
 8010286:	4812      	ldr	r0, [pc, #72]	; (80102d0 <HAL_PCD_MspInit+0x64>)
 8010288:	69a3      	ldr	r3, [r4, #24]
 801028a:	a902      	add	r1, sp, #8
 801028c:	f043 0304 	orr.w	r3, r3, #4
 8010290:	61a3      	str	r3, [r4, #24]
 8010292:	69a3      	ldr	r3, [r4, #24]
 8010294:	f003 0304 	and.w	r3, r3, #4
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	9b00      	ldr	r3, [sp, #0]
 801029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102a0:	9302      	str	r3, [sp, #8]
 80102a2:	f7f2 f9c3 	bl	800262c <HAL_GPIO_Init>
 80102a6:	2200      	movs	r2, #0
 80102a8:	6963      	ldr	r3, [r4, #20]
 80102aa:	2043      	movs	r0, #67	; 0x43
 80102ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80102b0:	6163      	str	r3, [r4, #20]
 80102b2:	6963      	ldr	r3, [r4, #20]
 80102b4:	4611      	mov	r1, r2
 80102b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	9b01      	ldr	r3, [sp, #4]
 80102be:	f7f1 ffe5 	bl	800228c <HAL_NVIC_SetPriority>
 80102c2:	2043      	movs	r0, #67	; 0x43
 80102c4:	f7f2 f814 	bl	80022f0 <HAL_NVIC_EnableIRQ>
 80102c8:	b006      	add	sp, #24
 80102ca:	bd10      	pop	{r4, pc}
 80102cc:	40021000 	.word	0x40021000
 80102d0:	40010800 	.word	0x40010800

080102d4 <HAL_PCD_SetupStageCallback>:
 80102d4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80102d8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80102dc:	f7ff bb8e 	b.w	800f9fc <USBD_LL_SetupStage>

080102e0 <HAL_PCD_DataOutStageCallback>:
 80102e0:	231c      	movs	r3, #28
 80102e2:	fb03 0301 	mla	r3, r3, r1, r0
 80102e6:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80102ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80102ee:	f7ff bbb2 	b.w	800fa56 <USBD_LL_DataOutStage>

080102f2 <HAL_PCD_DataInStageCallback>:
 80102f2:	231c      	movs	r3, #28
 80102f4:	fb03 0301 	mla	r3, r3, r1, r0
 80102f8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80102fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102fe:	f7ff bbe4 	b.w	800faca <USBD_LL_DataInStage>

08010302 <HAL_PCD_SOFCallback>:
 8010302:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8010306:	f7ff bc78 	b.w	800fbfa <USBD_LL_SOF>

0801030a <HAL_PCD_ResetCallback>:
 801030a:	68c3      	ldr	r3, [r0, #12]
 801030c:	b510      	push	{r4, lr}
 801030e:	2b02      	cmp	r3, #2
 8010310:	4604      	mov	r4, r0
 8010312:	d001      	beq.n	8010318 <HAL_PCD_ResetCallback+0xe>
 8010314:	f7f0 fefc 	bl	8001110 <Error_Handler>
 8010318:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 801031c:	2101      	movs	r1, #1
 801031e:	f7ff fc56 	bl	800fbce <USBD_LL_SetSpeed>
 8010322:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8010326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801032a:	f7ff bc29 	b.w	800fb80 <USBD_LL_Reset>
	...

08010330 <HAL_PCD_SuspendCallback>:
 8010330:	b510      	push	{r4, lr}
 8010332:	4604      	mov	r4, r0
 8010334:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8010338:	f7ff fc4c 	bl	800fbd4 <USBD_LL_Suspend>
 801033c:	6822      	ldr	r2, [r4, #0]
 801033e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8010342:	f043 0301 	orr.w	r3, r3, #1
 8010346:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 801034a:	6a23      	ldr	r3, [r4, #32]
 801034c:	b123      	cbz	r3, 8010358 <HAL_PCD_SuspendCallback+0x28>
 801034e:	4a03      	ldr	r2, [pc, #12]	; (801035c <HAL_PCD_SuspendCallback+0x2c>)
 8010350:	6913      	ldr	r3, [r2, #16]
 8010352:	f043 0306 	orr.w	r3, r3, #6
 8010356:	6113      	str	r3, [r2, #16]
 8010358:	bd10      	pop	{r4, pc}
 801035a:	bf00      	nop
 801035c:	e000ed00 	.word	0xe000ed00

08010360 <HAL_PCD_ResumeCallback>:
 8010360:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8010364:	f7ff bc3f 	b.w	800fbe6 <USBD_LL_Resume>

08010368 <HAL_PCD_ISOOUTIncompleteCallback>:
 8010368:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 801036c:	f7ff bc53 	b.w	800fc16 <USBD_LL_IsoOUTIncomplete>

08010370 <HAL_PCD_ISOINIncompleteCallback>:
 8010370:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8010374:	f7ff bc4d 	b.w	800fc12 <USBD_LL_IsoINIncomplete>

08010378 <HAL_PCD_ConnectCallback>:
 8010378:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 801037c:	f7ff bc4d 	b.w	800fc1a <USBD_LL_DevConnected>

08010380 <HAL_PCD_DisconnectCallback>:
 8010380:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8010384:	f7ff bc4b 	b.w	800fc1e <USBD_LL_DevDisconnected>

08010388 <USBD_LL_Init>:
 8010388:	b508      	push	{r3, lr}
 801038a:	7802      	ldrb	r2, [r0, #0]
 801038c:	4603      	mov	r3, r0
 801038e:	bb1a      	cbnz	r2, 80103d8 <USBD_LL_Init+0x50>
 8010390:	4812      	ldr	r0, [pc, #72]	; (80103dc <USBD_LL_Init+0x54>)
 8010392:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8010396:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
 801039a:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
 801039e:	2304      	movs	r3, #4
 80103a0:	e9c0 1300 	strd	r1, r3, [r0]
 80103a4:	2302      	movs	r3, #2
 80103a6:	e9c0 3206 	strd	r3, r2, [r0, #24]
 80103aa:	60c3      	str	r3, [r0, #12]
 80103ac:	2301      	movs	r3, #1
 80103ae:	6202      	str	r2, [r0, #32]
 80103b0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80103b2:	f7f2 fa1a 	bl	80027ea <HAL_PCD_Init>
 80103b6:	b108      	cbz	r0, 80103bc <USBD_LL_Init+0x34>
 80103b8:	f7f0 feaa 	bl	8001110 <Error_Handler>
 80103bc:	2180      	movs	r1, #128	; 0x80
 80103be:	4807      	ldr	r0, [pc, #28]	; (80103dc <USBD_LL_Init+0x54>)
 80103c0:	f7f2 fe19 	bl	8002ff6 <HAL_PCDEx_SetRxFiFo>
 80103c4:	2240      	movs	r2, #64	; 0x40
 80103c6:	2100      	movs	r1, #0
 80103c8:	4804      	ldr	r0, [pc, #16]	; (80103dc <USBD_LL_Init+0x54>)
 80103ca:	f7f2 fdf4 	bl	8002fb6 <HAL_PCDEx_SetTxFiFo>
 80103ce:	2280      	movs	r2, #128	; 0x80
 80103d0:	2101      	movs	r1, #1
 80103d2:	4802      	ldr	r0, [pc, #8]	; (80103dc <USBD_LL_Init+0x54>)
 80103d4:	f7f2 fdef 	bl	8002fb6 <HAL_PCDEx_SetTxFiFo>
 80103d8:	2000      	movs	r0, #0
 80103da:	bd08      	pop	{r3, pc}
 80103dc:	20000930 	.word	0x20000930

080103e0 <USBD_LL_Start>:
 80103e0:	b508      	push	{r3, lr}
 80103e2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80103e6:	f7f2 fa85 	bl	80028f4 <HAL_PCD_Start>
 80103ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80103ee:	f7ff bf35 	b.w	801025c <USBD_Get_USB_Status>

080103f2 <USBD_LL_Stop>:
 80103f2:	b508      	push	{r3, lr}
 80103f4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80103f8:	f7f2 fa91 	bl	800291e <HAL_PCD_Stop>
 80103fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010400:	f7ff bf2c 	b.w	801025c <USBD_Get_USB_Status>

08010404 <USBD_LL_OpenEP>:
 8010404:	b510      	push	{r4, lr}
 8010406:	4614      	mov	r4, r2
 8010408:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801040c:	461a      	mov	r2, r3
 801040e:	4623      	mov	r3, r4
 8010410:	f7f2 fcfe 	bl	8002e10 <HAL_PCD_EP_Open>
 8010414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010418:	f7ff bf20 	b.w	801025c <USBD_Get_USB_Status>

0801041c <USBD_LL_StallEP>:
 801041c:	b508      	push	{r3, lr}
 801041e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8010422:	f7f2 fd60 	bl	8002ee6 <HAL_PCD_EP_SetStall>
 8010426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801042a:	f7ff bf17 	b.w	801025c <USBD_Get_USB_Status>

0801042e <USBD_LL_ClearStallEP>:
 801042e:	b508      	push	{r3, lr}
 8010430:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8010434:	f7f2 fd8e 	bl	8002f54 <HAL_PCD_EP_ClrStall>
 8010438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801043c:	f7ff bf0e 	b.w	801025c <USBD_Get_USB_Status>

08010440 <USBD_LL_IsStallEP>:
 8010440:	221c      	movs	r2, #28
 8010442:	f011 0f80 	tst.w	r1, #128	; 0x80
 8010446:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801044a:	bf1b      	ittet	ne
 801044c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8010450:	fb02 3101 	mlane	r1, r2, r1, r3
 8010454:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8010458:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
 801045c:	bf08      	it	eq
 801045e:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
 8010462:	4770      	bx	lr

08010464 <USBD_LL_SetUSBAddress>:
 8010464:	b508      	push	{r3, lr}
 8010466:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801046a:	f7f2 fcbd 	bl	8002de8 <HAL_PCD_SetAddress>
 801046e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010472:	f7ff bef3 	b.w	801025c <USBD_Get_USB_Status>

08010476 <USBD_LL_Transmit>:
 8010476:	b508      	push	{r3, lr}
 8010478:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801047c:	f7f2 fd18 	bl	8002eb0 <HAL_PCD_EP_Transmit>
 8010480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010484:	f7ff beea 	b.w	801025c <USBD_Get_USB_Status>

08010488 <USBD_LL_PrepareReceive>:
 8010488:	b508      	push	{r3, lr}
 801048a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801048e:	f7f2 fcf2 	bl	8002e76 <HAL_PCD_EP_Receive>
 8010492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010496:	f7ff bee1 	b.w	801025c <USBD_Get_USB_Status>
	...

0801049c <USBD_static_malloc>:
 801049c:	4800      	ldr	r0, [pc, #0]	; (80104a0 <USBD_static_malloc+0x4>)
 801049e:	4770      	bx	lr
 80104a0:	20000d30 	.word	0x20000d30

080104a4 <USBD_static_free>:
 80104a4:	4770      	bx	lr

080104a6 <_ZdlPvj>:
 80104a6:	f000 b818 	b.w	80104da <_ZdlPv>

080104aa <_ZdaPv>:
 80104aa:	f000 b816 	b.w	80104da <_ZdlPv>

080104ae <_Znwj>:
 80104ae:	2801      	cmp	r0, #1
 80104b0:	bf38      	it	cc
 80104b2:	2001      	movcc	r0, #1
 80104b4:	b510      	push	{r4, lr}
 80104b6:	4604      	mov	r4, r0
 80104b8:	4620      	mov	r0, r4
 80104ba:	f000 f95f 	bl	801077c <malloc>
 80104be:	b930      	cbnz	r0, 80104ce <_Znwj+0x20>
 80104c0:	f000 f820 	bl	8010504 <_ZSt15get_new_handlerv>
 80104c4:	b908      	cbnz	r0, 80104ca <_Znwj+0x1c>
 80104c6:	f000 f927 	bl	8010718 <abort>
 80104ca:	4780      	blx	r0
 80104cc:	e7f4      	b.n	80104b8 <_Znwj+0xa>
 80104ce:	bd10      	pop	{r4, pc}

080104d0 <_Znaj>:
 80104d0:	f7ff bfed 	b.w	80104ae <_Znwj>

080104d4 <__cxa_pure_virtual>:
 80104d4:	b508      	push	{r3, lr}
 80104d6:	f000 f80f 	bl	80104f8 <_ZSt9terminatev>

080104da <_ZdlPv>:
 80104da:	f000 b957 	b.w	801078c <free>

080104de <_ZN10__cxxabiv111__terminateEPFvvE>:
 80104de:	b508      	push	{r3, lr}
 80104e0:	4780      	blx	r0
 80104e2:	f000 f919 	bl	8010718 <abort>
	...

080104e8 <_ZSt13get_terminatev>:
 80104e8:	4b02      	ldr	r3, [pc, #8]	; (80104f4 <_ZSt13get_terminatev+0xc>)
 80104ea:	6818      	ldr	r0, [r3, #0]
 80104ec:	f3bf 8f5b 	dmb	ish
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	20000124 	.word	0x20000124

080104f8 <_ZSt9terminatev>:
 80104f8:	b508      	push	{r3, lr}
 80104fa:	f7ff fff5 	bl	80104e8 <_ZSt13get_terminatev>
 80104fe:	f7ff ffee 	bl	80104de <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010504 <_ZSt15get_new_handlerv>:
 8010504:	4b02      	ldr	r3, [pc, #8]	; (8010510 <_ZSt15get_new_handlerv+0xc>)
 8010506:	6818      	ldr	r0, [r3, #0]
 8010508:	f3bf 8f5b 	dmb	ish
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	20001150 	.word	0x20001150
 8010514:	00000000 	.word	0x00000000

08010518 <ceil>:
 8010518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801051c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010520:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010524:	2e13      	cmp	r6, #19
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	4607      	mov	r7, r0
 801052c:	460c      	mov	r4, r1
 801052e:	4605      	mov	r5, r0
 8010530:	dc31      	bgt.n	8010596 <ceil+0x7e>
 8010532:	2e00      	cmp	r6, #0
 8010534:	da12      	bge.n	801055c <ceil+0x44>
 8010536:	a334      	add	r3, pc, #208	; (adr r3, 8010608 <ceil+0xf0>)
 8010538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053c:	f7ef fe8c 	bl	8000258 <__adddf3>
 8010540:	2200      	movs	r2, #0
 8010542:	2300      	movs	r3, #0
 8010544:	f7f0 face 	bl	8000ae4 <__aeabi_dcmpgt>
 8010548:	b128      	cbz	r0, 8010556 <ceil+0x3e>
 801054a:	2c00      	cmp	r4, #0
 801054c:	db56      	blt.n	80105fc <ceil+0xe4>
 801054e:	433c      	orrs	r4, r7
 8010550:	d058      	beq.n	8010604 <ceil+0xec>
 8010552:	2500      	movs	r5, #0
 8010554:	4c2e      	ldr	r4, [pc, #184]	; (8010610 <ceil+0xf8>)
 8010556:	4623      	mov	r3, r4
 8010558:	462f      	mov	r7, r5
 801055a:	e025      	b.n	80105a8 <ceil+0x90>
 801055c:	4a2d      	ldr	r2, [pc, #180]	; (8010614 <ceil+0xfc>)
 801055e:	fa42 f806 	asr.w	r8, r2, r6
 8010562:	ea01 0208 	and.w	r2, r1, r8
 8010566:	4302      	orrs	r2, r0
 8010568:	d01e      	beq.n	80105a8 <ceil+0x90>
 801056a:	a327      	add	r3, pc, #156	; (adr r3, 8010608 <ceil+0xf0>)
 801056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010570:	f7ef fe72 	bl	8000258 <__adddf3>
 8010574:	2200      	movs	r2, #0
 8010576:	2300      	movs	r3, #0
 8010578:	f7f0 fab4 	bl	8000ae4 <__aeabi_dcmpgt>
 801057c:	2800      	cmp	r0, #0
 801057e:	d0ea      	beq.n	8010556 <ceil+0x3e>
 8010580:	2c00      	cmp	r4, #0
 8010582:	bfc2      	ittt	gt
 8010584:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8010588:	fa43 f606 	asrgt.w	r6, r3, r6
 801058c:	19a4      	addgt	r4, r4, r6
 801058e:	2500      	movs	r5, #0
 8010590:	ea24 0408 	bic.w	r4, r4, r8
 8010594:	e7df      	b.n	8010556 <ceil+0x3e>
 8010596:	2e33      	cmp	r6, #51	; 0x33
 8010598:	dd0a      	ble.n	80105b0 <ceil+0x98>
 801059a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801059e:	d103      	bne.n	80105a8 <ceil+0x90>
 80105a0:	f7ef fe5a 	bl	8000258 <__adddf3>
 80105a4:	4607      	mov	r7, r0
 80105a6:	460b      	mov	r3, r1
 80105a8:	4638      	mov	r0, r7
 80105aa:	4619      	mov	r1, r3
 80105ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105b4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80105b8:	fa22 f808 	lsr.w	r8, r2, r8
 80105bc:	ea18 0f00 	tst.w	r8, r0
 80105c0:	d0f2      	beq.n	80105a8 <ceil+0x90>
 80105c2:	a311      	add	r3, pc, #68	; (adr r3, 8010608 <ceil+0xf0>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	f7ef fe46 	bl	8000258 <__adddf3>
 80105cc:	2200      	movs	r2, #0
 80105ce:	2300      	movs	r3, #0
 80105d0:	f7f0 fa88 	bl	8000ae4 <__aeabi_dcmpgt>
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d0be      	beq.n	8010556 <ceil+0x3e>
 80105d8:	2c00      	cmp	r4, #0
 80105da:	dd02      	ble.n	80105e2 <ceil+0xca>
 80105dc:	2e14      	cmp	r6, #20
 80105de:	d103      	bne.n	80105e8 <ceil+0xd0>
 80105e0:	3401      	adds	r4, #1
 80105e2:	ea25 0508 	bic.w	r5, r5, r8
 80105e6:	e7b6      	b.n	8010556 <ceil+0x3e>
 80105e8:	2301      	movs	r3, #1
 80105ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80105ee:	fa03 f606 	lsl.w	r6, r3, r6
 80105f2:	4435      	add	r5, r6
 80105f4:	42bd      	cmp	r5, r7
 80105f6:	bf38      	it	cc
 80105f8:	18e4      	addcc	r4, r4, r3
 80105fa:	e7f2      	b.n	80105e2 <ceil+0xca>
 80105fc:	2500      	movs	r5, #0
 80105fe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010602:	e7a8      	b.n	8010556 <ceil+0x3e>
 8010604:	4625      	mov	r5, r4
 8010606:	e7a6      	b.n	8010556 <ceil+0x3e>
 8010608:	8800759c 	.word	0x8800759c
 801060c:	7e37e43c 	.word	0x7e37e43c
 8010610:	3ff00000 	.word	0x3ff00000
 8010614:	000fffff 	.word	0x000fffff

08010618 <floor>:
 8010618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801061c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010620:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010624:	2e13      	cmp	r6, #19
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4607      	mov	r7, r0
 801062c:	460c      	mov	r4, r1
 801062e:	4605      	mov	r5, r0
 8010630:	dc33      	bgt.n	801069a <floor+0x82>
 8010632:	2e00      	cmp	r6, #0
 8010634:	da14      	bge.n	8010660 <floor+0x48>
 8010636:	a334      	add	r3, pc, #208	; (adr r3, 8010708 <floor+0xf0>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	f7ef fe0c 	bl	8000258 <__adddf3>
 8010640:	2200      	movs	r2, #0
 8010642:	2300      	movs	r3, #0
 8010644:	f7f0 fa4e 	bl	8000ae4 <__aeabi_dcmpgt>
 8010648:	b138      	cbz	r0, 801065a <floor+0x42>
 801064a:	2c00      	cmp	r4, #0
 801064c:	da58      	bge.n	8010700 <floor+0xe8>
 801064e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010652:	431d      	orrs	r5, r3
 8010654:	d001      	beq.n	801065a <floor+0x42>
 8010656:	2500      	movs	r5, #0
 8010658:	4c2d      	ldr	r4, [pc, #180]	; (8010710 <floor+0xf8>)
 801065a:	4623      	mov	r3, r4
 801065c:	462f      	mov	r7, r5
 801065e:	e025      	b.n	80106ac <floor+0x94>
 8010660:	4a2c      	ldr	r2, [pc, #176]	; (8010714 <floor+0xfc>)
 8010662:	fa42 f806 	asr.w	r8, r2, r6
 8010666:	ea01 0208 	and.w	r2, r1, r8
 801066a:	4302      	orrs	r2, r0
 801066c:	d01e      	beq.n	80106ac <floor+0x94>
 801066e:	a326      	add	r3, pc, #152	; (adr r3, 8010708 <floor+0xf0>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	f7ef fdf0 	bl	8000258 <__adddf3>
 8010678:	2200      	movs	r2, #0
 801067a:	2300      	movs	r3, #0
 801067c:	f7f0 fa32 	bl	8000ae4 <__aeabi_dcmpgt>
 8010680:	2800      	cmp	r0, #0
 8010682:	d0ea      	beq.n	801065a <floor+0x42>
 8010684:	2c00      	cmp	r4, #0
 8010686:	bfbe      	ittt	lt
 8010688:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801068c:	fa43 f606 	asrlt.w	r6, r3, r6
 8010690:	19a4      	addlt	r4, r4, r6
 8010692:	2500      	movs	r5, #0
 8010694:	ea24 0408 	bic.w	r4, r4, r8
 8010698:	e7df      	b.n	801065a <floor+0x42>
 801069a:	2e33      	cmp	r6, #51	; 0x33
 801069c:	dd0a      	ble.n	80106b4 <floor+0x9c>
 801069e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80106a2:	d103      	bne.n	80106ac <floor+0x94>
 80106a4:	f7ef fdd8 	bl	8000258 <__adddf3>
 80106a8:	4607      	mov	r7, r0
 80106aa:	460b      	mov	r3, r1
 80106ac:	4638      	mov	r0, r7
 80106ae:	4619      	mov	r1, r3
 80106b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106b8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80106bc:	fa22 f808 	lsr.w	r8, r2, r8
 80106c0:	ea18 0f00 	tst.w	r8, r0
 80106c4:	d0f2      	beq.n	80106ac <floor+0x94>
 80106c6:	a310      	add	r3, pc, #64	; (adr r3, 8010708 <floor+0xf0>)
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	f7ef fdc4 	bl	8000258 <__adddf3>
 80106d0:	2200      	movs	r2, #0
 80106d2:	2300      	movs	r3, #0
 80106d4:	f7f0 fa06 	bl	8000ae4 <__aeabi_dcmpgt>
 80106d8:	2800      	cmp	r0, #0
 80106da:	d0be      	beq.n	801065a <floor+0x42>
 80106dc:	2c00      	cmp	r4, #0
 80106de:	da02      	bge.n	80106e6 <floor+0xce>
 80106e0:	2e14      	cmp	r6, #20
 80106e2:	d103      	bne.n	80106ec <floor+0xd4>
 80106e4:	3401      	adds	r4, #1
 80106e6:	ea25 0508 	bic.w	r5, r5, r8
 80106ea:	e7b6      	b.n	801065a <floor+0x42>
 80106ec:	2301      	movs	r3, #1
 80106ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80106f2:	fa03 f606 	lsl.w	r6, r3, r6
 80106f6:	4435      	add	r5, r6
 80106f8:	42bd      	cmp	r5, r7
 80106fa:	bf38      	it	cc
 80106fc:	18e4      	addcc	r4, r4, r3
 80106fe:	e7f2      	b.n	80106e6 <floor+0xce>
 8010700:	2500      	movs	r5, #0
 8010702:	462c      	mov	r4, r5
 8010704:	e7a9      	b.n	801065a <floor+0x42>
 8010706:	bf00      	nop
 8010708:	8800759c 	.word	0x8800759c
 801070c:	7e37e43c 	.word	0x7e37e43c
 8010710:	bff00000 	.word	0xbff00000
 8010714:	000fffff 	.word	0x000fffff

08010718 <abort>:
 8010718:	2006      	movs	r0, #6
 801071a:	b508      	push	{r3, lr}
 801071c:	f000 f968 	bl	80109f0 <raise>
 8010720:	2001      	movs	r0, #1
 8010722:	f7f1 f827 	bl	8001774 <_exit>
	...

08010728 <__errno>:
 8010728:	4b01      	ldr	r3, [pc, #4]	; (8010730 <__errno+0x8>)
 801072a:	6818      	ldr	r0, [r3, #0]
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	20000128 	.word	0x20000128

08010734 <__libc_init_array>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	2600      	movs	r6, #0
 8010738:	4d0c      	ldr	r5, [pc, #48]	; (801076c <__libc_init_array+0x38>)
 801073a:	4c0d      	ldr	r4, [pc, #52]	; (8010770 <__libc_init_array+0x3c>)
 801073c:	1b64      	subs	r4, r4, r5
 801073e:	10a4      	asrs	r4, r4, #2
 8010740:	42a6      	cmp	r6, r4
 8010742:	d109      	bne.n	8010758 <__libc_init_array+0x24>
 8010744:	f000 f97e 	bl	8010a44 <_init>
 8010748:	2600      	movs	r6, #0
 801074a:	4d0a      	ldr	r5, [pc, #40]	; (8010774 <__libc_init_array+0x40>)
 801074c:	4c0a      	ldr	r4, [pc, #40]	; (8010778 <__libc_init_array+0x44>)
 801074e:	1b64      	subs	r4, r4, r5
 8010750:	10a4      	asrs	r4, r4, #2
 8010752:	42a6      	cmp	r6, r4
 8010754:	d105      	bne.n	8010762 <__libc_init_array+0x2e>
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	f855 3b04 	ldr.w	r3, [r5], #4
 801075c:	4798      	blx	r3
 801075e:	3601      	adds	r6, #1
 8010760:	e7ee      	b.n	8010740 <__libc_init_array+0xc>
 8010762:	f855 3b04 	ldr.w	r3, [r5], #4
 8010766:	4798      	blx	r3
 8010768:	3601      	adds	r6, #1
 801076a:	e7f2      	b.n	8010752 <__libc_init_array+0x1e>
 801076c:	08010f54 	.word	0x08010f54
 8010770:	08010f54 	.word	0x08010f54
 8010774:	08010f54 	.word	0x08010f54
 8010778:	08010f5c 	.word	0x08010f5c

0801077c <malloc>:
 801077c:	4b02      	ldr	r3, [pc, #8]	; (8010788 <malloc+0xc>)
 801077e:	4601      	mov	r1, r0
 8010780:	6818      	ldr	r0, [r3, #0]
 8010782:	f000 b889 	b.w	8010898 <_malloc_r>
 8010786:	bf00      	nop
 8010788:	20000128 	.word	0x20000128

0801078c <free>:
 801078c:	4b02      	ldr	r3, [pc, #8]	; (8010798 <free+0xc>)
 801078e:	4601      	mov	r1, r0
 8010790:	6818      	ldr	r0, [r3, #0]
 8010792:	f000 b819 	b.w	80107c8 <_free_r>
 8010796:	bf00      	nop
 8010798:	20000128 	.word	0x20000128

0801079c <memcpy>:
 801079c:	440a      	add	r2, r1
 801079e:	4291      	cmp	r1, r2
 80107a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80107a4:	d100      	bne.n	80107a8 <memcpy+0xc>
 80107a6:	4770      	bx	lr
 80107a8:	b510      	push	{r4, lr}
 80107aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107ae:	4291      	cmp	r1, r2
 80107b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107b4:	d1f9      	bne.n	80107aa <memcpy+0xe>
 80107b6:	bd10      	pop	{r4, pc}

080107b8 <memset>:
 80107b8:	4603      	mov	r3, r0
 80107ba:	4402      	add	r2, r0
 80107bc:	4293      	cmp	r3, r2
 80107be:	d100      	bne.n	80107c2 <memset+0xa>
 80107c0:	4770      	bx	lr
 80107c2:	f803 1b01 	strb.w	r1, [r3], #1
 80107c6:	e7f9      	b.n	80107bc <memset+0x4>

080107c8 <_free_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	4605      	mov	r5, r0
 80107cc:	2900      	cmp	r1, #0
 80107ce:	d040      	beq.n	8010852 <_free_r+0x8a>
 80107d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107d4:	1f0c      	subs	r4, r1, #4
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	bfb8      	it	lt
 80107da:	18e4      	addlt	r4, r4, r3
 80107dc:	f000 f924 	bl	8010a28 <__malloc_lock>
 80107e0:	4a1c      	ldr	r2, [pc, #112]	; (8010854 <_free_r+0x8c>)
 80107e2:	6813      	ldr	r3, [r2, #0]
 80107e4:	b933      	cbnz	r3, 80107f4 <_free_r+0x2c>
 80107e6:	6063      	str	r3, [r4, #4]
 80107e8:	6014      	str	r4, [r2, #0]
 80107ea:	4628      	mov	r0, r5
 80107ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107f0:	f000 b920 	b.w	8010a34 <__malloc_unlock>
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	d908      	bls.n	801080a <_free_r+0x42>
 80107f8:	6820      	ldr	r0, [r4, #0]
 80107fa:	1821      	adds	r1, r4, r0
 80107fc:	428b      	cmp	r3, r1
 80107fe:	bf01      	itttt	eq
 8010800:	6819      	ldreq	r1, [r3, #0]
 8010802:	685b      	ldreq	r3, [r3, #4]
 8010804:	1809      	addeq	r1, r1, r0
 8010806:	6021      	streq	r1, [r4, #0]
 8010808:	e7ed      	b.n	80107e6 <_free_r+0x1e>
 801080a:	461a      	mov	r2, r3
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	b10b      	cbz	r3, 8010814 <_free_r+0x4c>
 8010810:	42a3      	cmp	r3, r4
 8010812:	d9fa      	bls.n	801080a <_free_r+0x42>
 8010814:	6811      	ldr	r1, [r2, #0]
 8010816:	1850      	adds	r0, r2, r1
 8010818:	42a0      	cmp	r0, r4
 801081a:	d10b      	bne.n	8010834 <_free_r+0x6c>
 801081c:	6820      	ldr	r0, [r4, #0]
 801081e:	4401      	add	r1, r0
 8010820:	1850      	adds	r0, r2, r1
 8010822:	4283      	cmp	r3, r0
 8010824:	6011      	str	r1, [r2, #0]
 8010826:	d1e0      	bne.n	80107ea <_free_r+0x22>
 8010828:	6818      	ldr	r0, [r3, #0]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	4401      	add	r1, r0
 801082e:	6011      	str	r1, [r2, #0]
 8010830:	6053      	str	r3, [r2, #4]
 8010832:	e7da      	b.n	80107ea <_free_r+0x22>
 8010834:	d902      	bls.n	801083c <_free_r+0x74>
 8010836:	230c      	movs	r3, #12
 8010838:	602b      	str	r3, [r5, #0]
 801083a:	e7d6      	b.n	80107ea <_free_r+0x22>
 801083c:	6820      	ldr	r0, [r4, #0]
 801083e:	1821      	adds	r1, r4, r0
 8010840:	428b      	cmp	r3, r1
 8010842:	bf01      	itttt	eq
 8010844:	6819      	ldreq	r1, [r3, #0]
 8010846:	685b      	ldreq	r3, [r3, #4]
 8010848:	1809      	addeq	r1, r1, r0
 801084a:	6021      	streq	r1, [r4, #0]
 801084c:	6063      	str	r3, [r4, #4]
 801084e:	6054      	str	r4, [r2, #4]
 8010850:	e7cb      	b.n	80107ea <_free_r+0x22>
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	20001154 	.word	0x20001154

08010858 <sbrk_aligned>:
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	4e0e      	ldr	r6, [pc, #56]	; (8010894 <sbrk_aligned+0x3c>)
 801085c:	460c      	mov	r4, r1
 801085e:	6831      	ldr	r1, [r6, #0]
 8010860:	4605      	mov	r5, r0
 8010862:	b911      	cbnz	r1, 801086a <sbrk_aligned+0x12>
 8010864:	f000 f88c 	bl	8010980 <_sbrk_r>
 8010868:	6030      	str	r0, [r6, #0]
 801086a:	4621      	mov	r1, r4
 801086c:	4628      	mov	r0, r5
 801086e:	f000 f887 	bl	8010980 <_sbrk_r>
 8010872:	1c43      	adds	r3, r0, #1
 8010874:	d00a      	beq.n	801088c <sbrk_aligned+0x34>
 8010876:	1cc4      	adds	r4, r0, #3
 8010878:	f024 0403 	bic.w	r4, r4, #3
 801087c:	42a0      	cmp	r0, r4
 801087e:	d007      	beq.n	8010890 <sbrk_aligned+0x38>
 8010880:	1a21      	subs	r1, r4, r0
 8010882:	4628      	mov	r0, r5
 8010884:	f000 f87c 	bl	8010980 <_sbrk_r>
 8010888:	3001      	adds	r0, #1
 801088a:	d101      	bne.n	8010890 <sbrk_aligned+0x38>
 801088c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010890:	4620      	mov	r0, r4
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	20001158 	.word	0x20001158

08010898 <_malloc_r>:
 8010898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801089c:	1ccd      	adds	r5, r1, #3
 801089e:	f025 0503 	bic.w	r5, r5, #3
 80108a2:	3508      	adds	r5, #8
 80108a4:	2d0c      	cmp	r5, #12
 80108a6:	bf38      	it	cc
 80108a8:	250c      	movcc	r5, #12
 80108aa:	2d00      	cmp	r5, #0
 80108ac:	4607      	mov	r7, r0
 80108ae:	db01      	blt.n	80108b4 <_malloc_r+0x1c>
 80108b0:	42a9      	cmp	r1, r5
 80108b2:	d905      	bls.n	80108c0 <_malloc_r+0x28>
 80108b4:	230c      	movs	r3, #12
 80108b6:	2600      	movs	r6, #0
 80108b8:	603b      	str	r3, [r7, #0]
 80108ba:	4630      	mov	r0, r6
 80108bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c0:	4e2e      	ldr	r6, [pc, #184]	; (801097c <_malloc_r+0xe4>)
 80108c2:	f000 f8b1 	bl	8010a28 <__malloc_lock>
 80108c6:	6833      	ldr	r3, [r6, #0]
 80108c8:	461c      	mov	r4, r3
 80108ca:	bb34      	cbnz	r4, 801091a <_malloc_r+0x82>
 80108cc:	4629      	mov	r1, r5
 80108ce:	4638      	mov	r0, r7
 80108d0:	f7ff ffc2 	bl	8010858 <sbrk_aligned>
 80108d4:	1c43      	adds	r3, r0, #1
 80108d6:	4604      	mov	r4, r0
 80108d8:	d14d      	bne.n	8010976 <_malloc_r+0xde>
 80108da:	6834      	ldr	r4, [r6, #0]
 80108dc:	4626      	mov	r6, r4
 80108de:	2e00      	cmp	r6, #0
 80108e0:	d140      	bne.n	8010964 <_malloc_r+0xcc>
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	4631      	mov	r1, r6
 80108e6:	4638      	mov	r0, r7
 80108e8:	eb04 0803 	add.w	r8, r4, r3
 80108ec:	f000 f848 	bl	8010980 <_sbrk_r>
 80108f0:	4580      	cmp	r8, r0
 80108f2:	d13a      	bne.n	801096a <_malloc_r+0xd2>
 80108f4:	6821      	ldr	r1, [r4, #0]
 80108f6:	3503      	adds	r5, #3
 80108f8:	1a6d      	subs	r5, r5, r1
 80108fa:	f025 0503 	bic.w	r5, r5, #3
 80108fe:	3508      	adds	r5, #8
 8010900:	2d0c      	cmp	r5, #12
 8010902:	bf38      	it	cc
 8010904:	250c      	movcc	r5, #12
 8010906:	4638      	mov	r0, r7
 8010908:	4629      	mov	r1, r5
 801090a:	f7ff ffa5 	bl	8010858 <sbrk_aligned>
 801090e:	3001      	adds	r0, #1
 8010910:	d02b      	beq.n	801096a <_malloc_r+0xd2>
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	442b      	add	r3, r5
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	e00e      	b.n	8010938 <_malloc_r+0xa0>
 801091a:	6822      	ldr	r2, [r4, #0]
 801091c:	1b52      	subs	r2, r2, r5
 801091e:	d41e      	bmi.n	801095e <_malloc_r+0xc6>
 8010920:	2a0b      	cmp	r2, #11
 8010922:	d916      	bls.n	8010952 <_malloc_r+0xba>
 8010924:	1961      	adds	r1, r4, r5
 8010926:	42a3      	cmp	r3, r4
 8010928:	6025      	str	r5, [r4, #0]
 801092a:	bf18      	it	ne
 801092c:	6059      	strne	r1, [r3, #4]
 801092e:	6863      	ldr	r3, [r4, #4]
 8010930:	bf08      	it	eq
 8010932:	6031      	streq	r1, [r6, #0]
 8010934:	5162      	str	r2, [r4, r5]
 8010936:	604b      	str	r3, [r1, #4]
 8010938:	4638      	mov	r0, r7
 801093a:	f104 060b 	add.w	r6, r4, #11
 801093e:	f000 f879 	bl	8010a34 <__malloc_unlock>
 8010942:	f026 0607 	bic.w	r6, r6, #7
 8010946:	1d23      	adds	r3, r4, #4
 8010948:	1af2      	subs	r2, r6, r3
 801094a:	d0b6      	beq.n	80108ba <_malloc_r+0x22>
 801094c:	1b9b      	subs	r3, r3, r6
 801094e:	50a3      	str	r3, [r4, r2]
 8010950:	e7b3      	b.n	80108ba <_malloc_r+0x22>
 8010952:	6862      	ldr	r2, [r4, #4]
 8010954:	42a3      	cmp	r3, r4
 8010956:	bf0c      	ite	eq
 8010958:	6032      	streq	r2, [r6, #0]
 801095a:	605a      	strne	r2, [r3, #4]
 801095c:	e7ec      	b.n	8010938 <_malloc_r+0xa0>
 801095e:	4623      	mov	r3, r4
 8010960:	6864      	ldr	r4, [r4, #4]
 8010962:	e7b2      	b.n	80108ca <_malloc_r+0x32>
 8010964:	4634      	mov	r4, r6
 8010966:	6876      	ldr	r6, [r6, #4]
 8010968:	e7b9      	b.n	80108de <_malloc_r+0x46>
 801096a:	230c      	movs	r3, #12
 801096c:	4638      	mov	r0, r7
 801096e:	603b      	str	r3, [r7, #0]
 8010970:	f000 f860 	bl	8010a34 <__malloc_unlock>
 8010974:	e7a1      	b.n	80108ba <_malloc_r+0x22>
 8010976:	6025      	str	r5, [r4, #0]
 8010978:	e7de      	b.n	8010938 <_malloc_r+0xa0>
 801097a:	bf00      	nop
 801097c:	20001154 	.word	0x20001154

08010980 <_sbrk_r>:
 8010980:	b538      	push	{r3, r4, r5, lr}
 8010982:	2300      	movs	r3, #0
 8010984:	4d05      	ldr	r5, [pc, #20]	; (801099c <_sbrk_r+0x1c>)
 8010986:	4604      	mov	r4, r0
 8010988:	4608      	mov	r0, r1
 801098a:	602b      	str	r3, [r5, #0]
 801098c:	f7f0 fef8 	bl	8001780 <_sbrk>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d102      	bne.n	801099a <_sbrk_r+0x1a>
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	b103      	cbz	r3, 801099a <_sbrk_r+0x1a>
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	bd38      	pop	{r3, r4, r5, pc}
 801099c:	2000115c 	.word	0x2000115c

080109a0 <_raise_r>:
 80109a0:	291f      	cmp	r1, #31
 80109a2:	b538      	push	{r3, r4, r5, lr}
 80109a4:	4604      	mov	r4, r0
 80109a6:	460d      	mov	r5, r1
 80109a8:	d904      	bls.n	80109b4 <_raise_r+0x14>
 80109aa:	2316      	movs	r3, #22
 80109ac:	6003      	str	r3, [r0, #0]
 80109ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109b2:	bd38      	pop	{r3, r4, r5, pc}
 80109b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80109b6:	b112      	cbz	r2, 80109be <_raise_r+0x1e>
 80109b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109bc:	b94b      	cbnz	r3, 80109d2 <_raise_r+0x32>
 80109be:	4620      	mov	r0, r4
 80109c0:	f000 f830 	bl	8010a24 <_getpid_r>
 80109c4:	462a      	mov	r2, r5
 80109c6:	4601      	mov	r1, r0
 80109c8:	4620      	mov	r0, r4
 80109ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ce:	f000 b817 	b.w	8010a00 <_kill_r>
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d00a      	beq.n	80109ec <_raise_r+0x4c>
 80109d6:	1c59      	adds	r1, r3, #1
 80109d8:	d103      	bne.n	80109e2 <_raise_r+0x42>
 80109da:	2316      	movs	r3, #22
 80109dc:	6003      	str	r3, [r0, #0]
 80109de:	2001      	movs	r0, #1
 80109e0:	e7e7      	b.n	80109b2 <_raise_r+0x12>
 80109e2:	2400      	movs	r4, #0
 80109e4:	4628      	mov	r0, r5
 80109e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109ea:	4798      	blx	r3
 80109ec:	2000      	movs	r0, #0
 80109ee:	e7e0      	b.n	80109b2 <_raise_r+0x12>

080109f0 <raise>:
 80109f0:	4b02      	ldr	r3, [pc, #8]	; (80109fc <raise+0xc>)
 80109f2:	4601      	mov	r1, r0
 80109f4:	6818      	ldr	r0, [r3, #0]
 80109f6:	f7ff bfd3 	b.w	80109a0 <_raise_r>
 80109fa:	bf00      	nop
 80109fc:	20000128 	.word	0x20000128

08010a00 <_kill_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	2300      	movs	r3, #0
 8010a04:	4d06      	ldr	r5, [pc, #24]	; (8010a20 <_kill_r+0x20>)
 8010a06:	4604      	mov	r4, r0
 8010a08:	4608      	mov	r0, r1
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	602b      	str	r3, [r5, #0]
 8010a0e:	f7f0 fea9 	bl	8001764 <_kill>
 8010a12:	1c43      	adds	r3, r0, #1
 8010a14:	d102      	bne.n	8010a1c <_kill_r+0x1c>
 8010a16:	682b      	ldr	r3, [r5, #0]
 8010a18:	b103      	cbz	r3, 8010a1c <_kill_r+0x1c>
 8010a1a:	6023      	str	r3, [r4, #0]
 8010a1c:	bd38      	pop	{r3, r4, r5, pc}
 8010a1e:	bf00      	nop
 8010a20:	2000115c 	.word	0x2000115c

08010a24 <_getpid_r>:
 8010a24:	f7f0 be9c 	b.w	8001760 <_getpid>

08010a28 <__malloc_lock>:
 8010a28:	4801      	ldr	r0, [pc, #4]	; (8010a30 <__malloc_lock+0x8>)
 8010a2a:	f000 b809 	b.w	8010a40 <__retarget_lock_acquire_recursive>
 8010a2e:	bf00      	nop
 8010a30:	20001160 	.word	0x20001160

08010a34 <__malloc_unlock>:
 8010a34:	4801      	ldr	r0, [pc, #4]	; (8010a3c <__malloc_unlock+0x8>)
 8010a36:	f000 b804 	b.w	8010a42 <__retarget_lock_release_recursive>
 8010a3a:	bf00      	nop
 8010a3c:	20001160 	.word	0x20001160

08010a40 <__retarget_lock_acquire_recursive>:
 8010a40:	4770      	bx	lr

08010a42 <__retarget_lock_release_recursive>:
 8010a42:	4770      	bx	lr

08010a44 <_init>:
 8010a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a46:	bf00      	nop
 8010a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a4a:	bc08      	pop	{r3}
 8010a4c:	469e      	mov	lr, r3
 8010a4e:	4770      	bx	lr

08010a50 <_fini>:
 8010a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a52:	bf00      	nop
 8010a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a56:	bc08      	pop	{r3}
 8010a58:	469e      	mov	lr, r3
 8010a5a:	4770      	bx	lr
