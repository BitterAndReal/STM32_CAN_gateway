
STM32CubeIDE NMEA2000 battery example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cfc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  08016ee4  08016ee4  00026ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801789c  0801789c  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  0801789c  0801789c  0002789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080178a4  080178a4  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080178a4  080178a4  000278a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080178b4  080178b4  000278b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080178c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff0  20000190  08017a54  00030190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001180  08017a54  00031180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045cdd  00000000  00000000  000301b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000840e  00000000  00000000  00075e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002df8  00000000  00000000  0007e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002bc0  00000000  00000000  000810a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029453  00000000  00000000  00083c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eba6  00000000  00000000  000ad0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbdd6  00000000  00000000  000dbc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7a2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d994  00000000  00000000  001b7a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000190 	.word	0x20000190
 8000204:	00000000 	.word	0x00000000
 8000208:	08016ecc 	.word	0x08016ecc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000194 	.word	0x20000194
 8000224:	08016ecc 	.word	0x08016ecc

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 b976 	b.w	8000e8c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9e08      	ldr	r6, [sp, #32]
 8000bbe:	460d      	mov	r5, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14d      	bne.n	8000c64 <__udivmoddi4+0xac>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4694      	mov	ip, r2
 8000bcc:	d968      	bls.n	8000ca0 <__udivmoddi4+0xe8>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b152      	cbz	r2, 8000bea <__udivmoddi4+0x32>
 8000bd4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bd8:	f1c2 0120 	rsb	r1, r2, #32
 8000bdc:	fa20 f101 	lsr.w	r1, r0, r1
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	ea41 0803 	orr.w	r8, r1, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	fb01 8817 	mls	r8, r1, r7, r8
 8000bfa:	fb07 f00e 	mul.w	r0, r7, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	4298      	cmp	r0, r3
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x66>
 8000c08:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000c10:	f080 811e 	bcs.w	8000e50 <__udivmoddi4+0x298>
 8000c14:	4298      	cmp	r0, r3
 8000c16:	f240 811b 	bls.w	8000e50 <__udivmoddi4+0x298>
 8000c1a:	3f02      	subs	r7, #2
 8000c1c:	4463      	add	r3, ip
 8000c1e:	1a1b      	subs	r3, r3, r0
 8000c20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c24:	fb01 3310 	mls	r3, r1, r0, r3
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8109 	bcs.w	8000e54 <__udivmoddi4+0x29c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8106 	bls.w	8000e54 <__udivmoddi4+0x29c>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	eba4 040e 	sub.w	r4, r4, lr
 8000c52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa8>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	40d4      	lsrs	r4, r2
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0xc2>
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	f000 80ee 	beq.w	8000e4a <__udivmoddi4+0x292>
 8000c6e:	2100      	movs	r1, #0
 8000c70:	e9c6 0500 	strd	r0, r5, [r6]
 8000c74:	4608      	mov	r0, r1
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x160>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd4>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fc 	bhi.w	8000e84 <__udivmoddi4+0x2cc>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e2      	beq.n	8000c60 <__udivmoddi4+0xa8>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7df      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xec>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 8091 	bne.w	8000dd0 <__udivmoddi4+0x218>
 8000cae:	eba1 000c 	sub.w	r0, r1, ip
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb8:	fa1f fe8c 	uxth.w	lr, ip
 8000cbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000cc4:	0c25      	lsrs	r5, r4, #16
 8000cc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cca:	fb0e f003 	mul.w	r0, lr, r3
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x12c>
 8000cd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x12a>
 8000cdc:	42a8      	cmp	r0, r5
 8000cde:	f200 80ce 	bhi.w	8000e7e <__udivmoddi4+0x2c6>
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	1a2d      	subs	r5, r5, r0
 8000ce6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cea:	fb07 5510 	mls	r5, r7, r0, r5
 8000cee:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x156>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x154>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80b6 	bhi.w	8000e78 <__udivmoddi4+0x2c0>
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d16:	e79e      	b.n	8000c56 <__udivmoddi4+0x9e>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fbba f8f9 	udiv	r8, sl, r9
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d3a:	408d      	lsls	r5, r1
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	431d      	orrs	r5, r3
 8000d42:	fa00 f301 	lsl.w	r3, r0, r1
 8000d46:	fb08 f00e 	mul.w	r0, r8, lr
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b8>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2bc>
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2bc>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1a24      	subs	r4, r4, r0
 8000d72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d76:	fb09 4410 	mls	r4, r9, r0, r4
 8000d7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7e:	b2ad      	uxth	r5, r5
 8000d80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1e2>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2b4>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2b4>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x2a4>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x2a0>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2d0>
 8000db4:	ebb3 0208 	subs.w	r2, r3, r8
 8000db8:	eb64 040e 	sbc.w	r4, r4, lr
 8000dbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000dc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc4:	431f      	orrs	r7, r3
 8000dc6:	40cc      	lsrs	r4, r1
 8000dc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	f1c2 0120 	rsb	r1, r2, #32
 8000dd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	4095      	lsls	r5, r2
 8000de6:	430d      	orrs	r5, r1
 8000de8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dec:	fb07 3311 	mls	r3, r7, r1, r3
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000dfe:	4283      	cmp	r3, r0
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x260>
 8000e06:	eb1c 0000 	adds.w	r0, ip, r0
 8000e0a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b8>
 8000e10:	4283      	cmp	r3, r0
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b8>
 8000e14:	3902      	subs	r1, #2
 8000e16:	4460      	add	r0, ip
 8000e18:	1ac0      	subs	r0, r0, r3
 8000e1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000e22:	b2ad      	uxth	r5, r5
 8000e24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e28:	fb03 f00e 	mul.w	r0, r3, lr
 8000e2c:	42a8      	cmp	r0, r5
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x28a>
 8000e30:	eb1c 0505 	adds.w	r5, ip, r5
 8000e34:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3a:	42a8      	cmp	r0, r5
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4465      	add	r5, ip
 8000e42:	1a28      	subs	r0, r5, r0
 8000e44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0x104>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e707      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000e50:	462f      	mov	r7, r5
 8000e52:	e6e4      	b.n	8000c1e <__udivmoddi4+0x66>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6f9      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e58:	454b      	cmp	r3, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f8>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f8>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x28a>
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1e2>
 8000e70:	4641      	mov	r1, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b8>
 8000e78:	4464      	add	r4, ip
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	e747      	b.n	8000d0e <__udivmoddi4+0x156>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4465      	add	r5, ip
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x12c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e706      	b.n	8000c96 <__udivmoddi4+0xde>
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa8>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <cpp_link>:
	extern "C"
	{
#endif

	void cpp_link (void)
		{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
		    myCppProcessInit();
 8000e94:	f000 fcb4 	bl	8001800 <_Z16myCppProcessInitv>
		    myCppProcess();
 8000e98:	f000 fcfa 	bl	8001890 <_Z12myCppProcessv>

		}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f001 f95e 	bl	8002164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f810 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 f986 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb0:	f000 f966 	bl	8001180 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eb4:	f000 f870 	bl	8000f98 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000eb8:	f000 f8c8 	bl	800104c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000ebc:	f014 f9c8 	bl	8015250 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000ec0:	f000 f910 	bl	80010e4 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cpp_link();
 8000ec4:	f7ff ffe4 	bl	8000e90 <cpp_link>
  // we never exit cpp_link()!!!!
  // while (1) should be empty

  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <main+0x28>
	...

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09c      	sub	sp, #112	; 0x70
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed6:	2238      	movs	r2, #56	; 0x38
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f014 ffba 	bl	8015e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f014 ffac 	bl	8015e54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 f866 	bl	8004ffc <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f997 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	2102      	movs	r1, #2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fb66 	bl	8005628 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f62:	f000 f981 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f66:	2312      	movs	r3, #18
 8000f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fd8e 	bl	8005a98 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f82:	f000 f971 	bl	8001268 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000f86:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <SystemClock_Config+0xc8>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3770      	adds	r7, #112	; 0x70
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	42420070 	.word	0x42420070

08000f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
  //hadc1.Init.DMAContiniousRequests = ENABLE;
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <MX_ADC1_Init+0xac>)
 8000faa:	4a27      	ldr	r2, [pc, #156]	; (8001048 <MX_ADC1_Init+0xb0>)
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fc4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000fc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fd8:	f001 f94a 	bl	8002270 <HAL_ADC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fe2:	f000 f941 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_ADC1_Init+0xac>)
 8000ff8:	f001 fae8 	bl	80025cc <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f931 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_ADC1_Init+0xac>)
 8001010:	f001 fadc 	bl	80025cc <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800101a:	f000 f925 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800101e:	2311      	movs	r3, #17
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001022:	2303      	movs	r3, #3
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_ADC1_Init+0xac>)
 800102c:	f001 face 	bl	80025cc <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001036:	f000 f917 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001ac 	.word	0x200001ac
 8001048:	40012400 	.word	0x40012400

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM2_Init+0x94>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001072:	2247      	movs	r2, #71	; 0x47
 8001074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_TIM2_Init+0x94>)
 800107e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_TIM2_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001092:	f004 fe33 	bl	8005cfc <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800109c:	f000 f8e4 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_TIM2_Init+0x94>)
 80010ae:	f004 ff7c 	bl	8005faa <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 f8d6 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010bc:	2320      	movs	r3, #32
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM2_Init+0x94>)
 80010ca:	f005 f961 	bl	8006390 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f000 f8c8 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000270 	.word	0x20000270

080010e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_TIM5_Init+0x94>)
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_TIM5_Init+0x98>)
 8001104:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_TIM5_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_TIM5_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 720-1;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_TIM5_Init+0x94>)
 8001114:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001118:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_TIM5_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_TIM5_Init+0x94>)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <MX_TIM5_Init+0x94>)
 8001128:	f004 fde8 	bl	8005cfc <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001132:	f000 f899 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_TIM5_Init+0x94>)
 8001144:	f004 ff31 	bl	8005faa <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800114e:	f000 f88b 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_TIM5_Init+0x94>)
 8001160:	f005 f916 	bl	8006390 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800116a:	f000 f87d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002b8 	.word	0x200002b8
 800117c:	40000c00 	.word	0x40000c00

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_DMA_Init+0x38>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <MX_DMA_Init+0x38>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_DMA_Init+0x38>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	200b      	movs	r0, #11
 80011a4:	f002 fab5 	bl	8003712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011a8:	200b      	movs	r0, #11
 80011aa:	f002 face 	bl	800374a <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_GPIO_Init+0xa4>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <MX_GPIO_Init+0xa4>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_GPIO_Init+0xa4>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_GPIO_Init+0xa4>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <MX_GPIO_Init+0xa4>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_GPIO_Init+0xa4>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2107      	movs	r1, #7
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_GPIO_Init+0xa8>)
 8001236:	f002 fed9 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_B_Pin LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_R_Pin|LED_G_Pin;
 800123a:	2307      	movs	r3, #7
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0xa8>)
 8001252:	f002 fd47 	bl	8003ce4 <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010800 	.word	0x40010800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
 8001272:	0000      	movs	r0, r0
 8001274:	0000      	movs	r0, r0
	...

08001278 <_Z7N2kIsNAd>:
 * 
 * \param v  {double} Value to be verified
 * \return true:      Value equal to "Not available"
 * \return false:     Value not equal to "Not available"
 */
inline bool N2kIsNA(double v) { return v==N2kDoubleNA; }
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	e9c7 0100 	strd	r0, r1, [r7]
 8001282:	2301      	movs	r3, #1
 8001284:	461c      	mov	r4, r3
 8001286:	a308      	add	r3, pc, #32	; (adr r3, 80012a8 <_Z7N2kIsNAd+0x30>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001290:	f7ff fc00 	bl	8000a94 <__aeabi_dcmpeq>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <_Z7N2kIsNAd+0x26>
 800129a:	2300      	movs	r3, #0
 800129c:	461c      	mov	r4, r3
 800129e:	b2e3      	uxtb	r3, r4
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	00000000 	.word	0x00000000
 80012ac:	c1cdcd65 	.word	0xc1cdcd65

080012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>:
   *
   * \param Enable      default = false
   * \param _Period     Periode [ms] of the scheduler, default = 0
   * \param _Offset     Offset [ms] of the scheduler, default = 0
   */
  tN2kSyncScheduler(bool Enable=false, uint32_t _Period=0, uint32_t _Offset=0) { 
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	460b      	mov	r3, r1
 80012be:	72fb      	strb	r3, [r7, #11]
    Offset=_Offset; Period=_Period; 
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	60da      	str	r2, [r3, #12]
    if ( Enable ) {
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <_ZN17tN2kSyncSchedulerC1Ebmm+0x2a>
      UpdateNextTime();
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f82c 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 80012d8:	e002      	b.n	80012e0 <_ZN17tN2kSyncSchedulerC1Ebmm+0x30>
    } else {
      Disable();
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f805 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
    }
  }
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZN17tN2kSyncScheduler7DisableEv>:

  /************************************************************************//**
   * \brief Disable Scheduler 
   */
  inline void Disable() { NextTime=N2kScheduler64Disabled; }
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fc:	e9c1 2300 	strd	r2, r3, [r1]
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_ZN17tN2kSyncScheduler6IsTimeEv>:
   * \brief Check if ít is time
   *
   * \return true -> when actual timestamp is greater the \ref NextTime
   * \return false 
   */
  inline bool IsTime() { return N2kMillis64()>NextTime; }
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	f009 feef 	bl	800b0f4 <_Z11N2kMillis64v>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	4282      	cmp	r2, r0
 800131e:	418b      	sbcs	r3, r1
 8001320:	bf34      	ite	cc
 8001322:	2301      	movcc	r3, #1
 8001324:	2300      	movcs	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>:

  /************************************************************************//**
   * \brief Update the timestamp for NextTime
   *
   */
  void UpdateNextTime() {
 8001330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001334:	b09c      	sub	sp, #112	; 0x70
 8001336:	af00      	add	r7, sp, #0
 8001338:	65f8      	str	r0, [r7, #92]	; 0x5c
    if ( Period==0 ) {
 800133a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x1a>
      Disable();
 8001342:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001344:	f7ff ffd1 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
      return;
 8001348:	e094      	b.n	8001474 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x144>
    }
    uint64_t now=N2kMillis64();
 800134a:	f009 fed3 	bl	800b0f4 <_Z11N2kMillis64v>
 800134e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
    if ( (Offset+SyncOffset)>now ) {
 8001352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2200      	movs	r2, #0
 8001358:	653b      	str	r3, [r7, #80]	; 0x50
 800135a:	657a      	str	r2, [r7, #84]	; 0x54
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001364:	188c      	adds	r4, r1, r2
 8001366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001368:	eb43 0101 	adc.w	r1, r3, r1
 800136c:	460d      	mov	r5, r1
 800136e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001372:	42a2      	cmp	r2, r4
 8001374:	41ab      	sbcs	r3, r5
 8001376:	d216      	bcs.n	80013a6 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x76>
      NextTime=(Offset+SyncOffset);
 8001378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2200      	movs	r2, #0
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001380:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800138c:	4621      	mov	r1, r4
 800138e:	1889      	adds	r1, r1, r2
 8001390:	6439      	str	r1, [r7, #64]	; 0x40
 8001392:	4629      	mov	r1, r5
 8001394:	eb43 0101 	adc.w	r1, r3, r1
 8001398:	6479      	str	r1, [r7, #68]	; 0x44
 800139a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80013a0:	e9c3 1200 	strd	r1, r2, [r3]
 80013a4:	e066      	b.n	8001474 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x144>
    } else {
      uint64_t n=(now-(Offset+SyncOffset))/Period;
 80013a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2200      	movs	r2, #0
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80013ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013b0:	4b32      	ldr	r3, [pc, #200]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013ba:	4604      	mov	r4, r0
 80013bc:	eb14 0a02 	adds.w	sl, r4, r2
 80013c0:	eb41 0b03 	adc.w	fp, r1, r3
 80013c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80013c8:	ebb2 010a 	subs.w	r1, r2, sl
 80013cc:	6339      	str	r1, [r7, #48]	; 0x30
 80013ce:	eb63 030b 	sbc.w	r3, r3, fp
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
 80013d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
 80013dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013e6:	f7ff fbcf 	bl	8000b88 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
      NextTime=SyncOffset+Offset+(n+1)*Period;
 80013f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2200      	movs	r2, #0
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	627a      	str	r2, [r7, #36]	; 0x24
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001406:	4621      	mov	r1, r4
 8001408:	1889      	adds	r1, r1, r2
 800140a:	61b9      	str	r1, [r7, #24]
 800140c:	4629      	mov	r1, r5
 800140e:	eb43 0101 	adc.w	r1, r3, r1
 8001412:	61f9      	str	r1, [r7, #28]
 8001414:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001418:	1c51      	adds	r1, r2, #1
 800141a:	6139      	str	r1, [r7, #16]
 800141c:	f143 0300 	adc.w	r3, r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	60fa      	str	r2, [r7, #12]
 800142c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001430:	4622      	mov	r2, r4
 8001432:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001436:	4651      	mov	r1, sl
 8001438:	fb01 f202 	mul.w	r2, r1, r2
 800143c:	465d      	mov	r5, fp
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	4603      	mov	r3, r0
 8001444:	fb03 f305 	mul.w	r3, r3, r5
 8001448:	4413      	add	r3, r2
 800144a:	4602      	mov	r2, r0
 800144c:	4651      	mov	r1, sl
 800144e:	fba2 8901 	umull	r8, r9, r2, r1
 8001452:	444b      	add	r3, r9
 8001454:	4699      	mov	r9, r3
 8001456:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800145a:	461a      	mov	r2, r3
 800145c:	eb12 0208 	adds.w	r2, r2, r8
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	eb43 0309 	adc.w	r3, r3, r9
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001470:	e9c3 1200 	strd	r1, r2, [r3]
    }
  }
 8001474:	3770      	adds	r7, #112	; 0x70
 8001476:	46bd      	mov	sp, r7
 8001478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800147c:	20000360 	.word	0x20000360

08001480 <_Z9CToKelvind>:
/************************************************************************//**
 * \brief Converting a value from Celsius to Kelvin
 * \param   v   Input value in [degC]
 * \return      Corresponding value in [K]
 */
inline double CToKelvin(double v) { return N2kIsNA(v)?v:v+273.15L; }
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	e9c7 0100 	strd	r0, r1, [r7]
 800148a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800148e:	f7ff fef3 	bl	8001278 <_Z7N2kIsNAd>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <_Z9CToKelvind+0x1e>
 8001498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800149c:	e008      	b.n	80014b0 <_Z9CToKelvind+0x30>
 800149e:	a308      	add	r3, pc, #32	; (adr r3, 80014c0 <_Z9CToKelvind+0x40>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a8:	f7fe fed6 	bl	8000258 <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	66666666 	.word	0x66666666
 80014c4:	40711266 	.word	0x40711266

080014c8 <_Z14SetN2kDCStatusR7tN2kMsghh10tN2kDCTypehhddd>:
 * 
 * Alias of PGN 127506. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref SetN2kPGN127506
  */
inline void SetN2kDCStatus(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     unsigned char StateOfCharge, unsigned char StateOfHealth, double TimeRemaining, double RippleVoltage=N2kDoubleNA, double Capacity=N2kDoubleNA) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af08      	add	r7, sp, #32
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	70fb      	strb	r3, [r7, #3]
 80014da:	460b      	mov	r3, r1
 80014dc:	70bb      	strb	r3, [r7, #2]
 80014de:	4613      	mov	r3, r2
 80014e0:	707b      	strb	r3, [r7, #1]
  SetN2kPGN127506(N2kMsg,SID,DCInstance,DCType,StateOfCharge,StateOfHealth,TimeRemaining,RippleVoltage,Capacity);
 80014e2:	787c      	ldrb	r4, [r7, #1]
 80014e4:	78b8      	ldrb	r0, [r7, #2]
 80014e6:	78f9      	ldrb	r1, [r7, #3]
 80014e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001500:	7f3b      	ldrb	r3, [r7, #28]
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	7e3b      	ldrb	r3, [r7, #24]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4623      	mov	r3, r4
 800150a:	4602      	mov	r2, r0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f008 fb4b 	bl	8009ba8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>:
 * 
 * Alias of PGN 127508. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref SetN2kPGN127508
  */
inline void SetN2kDCBatStatus(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent=N2kDoubleNA,
                     double BatteryTemperature=N2kDoubleNA, unsigned char SID=1) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b08a      	sub	sp, #40	; 0x28
 800151e:	af06      	add	r7, sp, #24
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	e9c7 2300 	strd	r2, r3, [r7]
 8001526:	460b      	mov	r3, r1
 8001528:	72fb      	strb	r3, [r7, #11]
  SetN2kPGN127508(N2kMsg,BatteryInstance,BatteryVoltage,BatteryCurrent,BatteryTemperature,SID);
 800152a:	7af9      	ldrb	r1, [r7, #11]
 800152c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001530:	9304      	str	r3, [sp, #16]
 8001532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	e9cd 2300 	strd	r2, r3, [sp]
 8001542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f008 fb9e 	bl	8009c88 <_Z15SetN2kPGN127508R7tN2kMsghdddh>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_Z13SetN2kBatConfR7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:
 * Alias of PGN 127513. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref SetN2kPGN127513
  */
inline void SetN2kBatConf(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08d      	sub	sp, #52	; 0x34
 8001558:	af0a      	add	r7, sp, #40	; 0x28
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4603      	mov	r3, r0
 8001564:	70fb      	strb	r3, [r7, #3]
 8001566:	460b      	mov	r3, r1
 8001568:	70bb      	strb	r3, [r7, #2]
 800156a:	4613      	mov	r3, r2
 800156c:	707b      	strb	r3, [r7, #1]
   SetN2kPGN127513(N2kMsg,BatInstance,BatType,SupportsEqual,BatNominalVoltage,BatChemistry,BatCapacity,BatTemperatureCoefficient,
 800156e:	787c      	ldrb	r4, [r7, #1]
 8001570:	78b8      	ldrb	r0, [r7, #2]
 8001572:	78f9      	ldrb	r1, [r7, #3]
 8001574:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 8001578:	9308      	str	r3, [sp, #32]
 800157a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800157e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001582:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001586:	9304      	str	r3, [sp, #16]
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001590:	7f3b      	ldrb	r3, [r7, #28]
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	7e3b      	ldrb	r3, [r7, #24]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4623      	mov	r3, r4
 800159a:	4602      	mov	r2, r0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f008 fbcf 	bl	8009d40 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
				PeukertExponent,ChargeEfficiencyFactor);
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}

080015aa <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f988 	bl	80018c8 <_ZNSaIP10tSTM32_CANED1Ev>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f96b 	bl	80018a8 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE12_Vector_implC1Ev>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZNSt6vectorIP10tSTM32_CANSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ffeb 	bl	80015c2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EEC1Ev>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <_Z22SendN2kBatteryMessagesv>:
tN2kSyncScheduler DCBatStatusScheduler(false,1500,500);
tN2kSyncScheduler DCStatusScheduler(false,1500,510);
tN2kSyncScheduler BatConfScheduler(false,5000,530); // Non periodic


void SendN2kBatteryMessages() {
 80015f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015fc:	b0cd      	sub	sp, #308	; 0x134
 80015fe:	af0a      	add	r7, sp, #40	; 0x28
    tN2kMsg N2kMsg;
 8001600:	f107 000c 	add.w	r0, r7, #12
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	2206      	movs	r2, #6
 800160c:	210f      	movs	r1, #15
 800160e:	f008 fc87 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

    if ( DCBatStatusScheduler.IsTime() ) {
 8001612:	485d      	ldr	r0, [pc, #372]	; (8001788 <_Z22SendN2kBatteryMessagesv+0x190>)
 8001614:	f7ff fe79 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d034      	beq.n	8001688 <_Z22SendN2kBatteryMessagesv+0x90>
      DCBatStatusScheduler.UpdateNextTime();
 800161e:	485a      	ldr	r0, [pc, #360]	; (8001788 <_Z22SendN2kBatteryMessagesv+0x190>)
 8001620:	f7ff fe86 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>

      SequenceID ++;
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <_Z22SendN2kBatteryMessagesv+0x194>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <_Z22SendN2kBatteryMessagesv+0x194>)
 800162e:	701a      	strb	r2, [r3, #0]
      if ( SequenceID > 252 ) {
 8001630:	4b56      	ldr	r3, [pc, #344]	; (800178c <_Z22SendN2kBatteryMessagesv+0x194>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2bfc      	cmp	r3, #252	; 0xfc
 8001636:	d902      	bls.n	800163e <_Z22SendN2kBatteryMessagesv+0x46>
        SequenceID = 0;
 8001638:	4b54      	ldr	r3, [pc, #336]	; (800178c <_Z22SendN2kBatteryMessagesv+0x194>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
      }

  //  SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent, double BatteryTemperature, unsigned char SID)
      SetN2kDCBatStatus(N2kMsg, 0, pack_voltage, battery_current, CToKelvin(cel_temp_avg), SequenceID);
 800163e:	4b54      	ldr	r3, [pc, #336]	; (8001790 <_Z22SendN2kBatteryMessagesv+0x198>)
 8001640:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <_Z22SendN2kBatteryMessagesv+0x19c>)
 8001646:	e9d3 4500 	ldrd	r4, r5, [r3]
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <_Z22SendN2kBatteryMessagesv+0x1a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff ff14 	bl	8001480 <_Z9CToKelvind>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	494b      	ldr	r1, [pc, #300]	; (800178c <_Z22SendN2kBatteryMessagesv+0x194>)
 800165e:	7809      	ldrb	r1, [r1, #0]
 8001660:	f107 000c 	add.w	r0, r7, #12
 8001664:	9104      	str	r1, [sp, #16]
 8001666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800166a:	e9cd 4500 	strd	r4, r5, [sp]
 800166e:	4642      	mov	r2, r8
 8001670:	464b      	mov	r3, r9
 8001672:	2100      	movs	r1, #0
 8001674:	f7ff ff51 	bl	800151a <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>
      NMEA2000.SendMsg(N2kMsg);
 8001678:	4b48      	ldr	r3, [pc, #288]	; (800179c <_Z22SendN2kBatteryMessagesv+0x1a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f107 010c 	add.w	r1, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f00c fa92 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

    }

    if ( DCStatusScheduler.IsTime() ) {
 8001688:	4845      	ldr	r0, [pc, #276]	; (80017a0 <_Z22SendN2kBatteryMessagesv+0x1a8>)
 800168a:	f7ff fe3e 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d032      	beq.n	80016fa <_Z22SendN2kBatteryMessagesv+0x102>
      DCStatusScheduler.UpdateNextTime();
 8001694:	4842      	ldr	r0, [pc, #264]	; (80017a0 <_Z22SendN2kBatteryMessagesv+0x1a8>)
 8001696:	f7ff fe4b 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127506(const tN2kMsg &N2kMsg, unsigned char &SID, unsigned char &DCInstance, tN2kDCType &DCType,
  //                     uint8_t &StateOfCharge, uint8_t &StateOfHealth, double &TimeRemaining, double &RippleVoltage, double &Capacity)
      SetN2kDCStatus(N2kMsg,SequenceID, 0, N2kDCt_Battery, state_of_charge, state_of_health, time_remaining, 0xFF, estimated_amp_hours_left);
 800169a:	4b3c      	ldr	r3, [pc, #240]	; (800178c <_Z22SendN2kBatteryMessagesv+0x194>)
 800169c:	f893 8000 	ldrb.w	r8, [r3]
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <_Z22SendN2kBatteryMessagesv+0x1ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b2dc      	uxtb	r4, r3
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <_Z22SendN2kBatteryMessagesv+0x1b0>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa4a 	bl	8000b48 <__aeabi_d2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b2dd      	uxtb	r5, r3
 80016b8:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <_Z22SendN2kBatteryMessagesv+0x1b4>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	493c      	ldr	r1, [pc, #240]	; (80017b0 <_Z22SendN2kBatteryMessagesv+0x1b8>)
 80016c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c4:	f107 060c 	add.w	r6, r7, #12
 80016c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80016cc:	a12c      	add	r1, pc, #176	; (adr r1, 8001780 <_Z22SendN2kBatteryMessagesv+0x188>)
 80016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80016d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016da:	9501      	str	r5, [sp, #4]
 80016dc:	9400      	str	r4, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	2200      	movs	r2, #0
 80016e2:	4641      	mov	r1, r8
 80016e4:	4630      	mov	r0, r6
 80016e6:	f7ff feef 	bl	80014c8 <_Z14SetN2kDCStatusR7tN2kMsghh10tN2kDCTypehhddd>
      NMEA2000.SendMsg(N2kMsg);
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <_Z22SendN2kBatteryMessagesv+0x1a4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f107 010c 	add.w	r1, r7, #12
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00c fa59 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }

    if ( BatConfScheduler.IsTime() ) {
 80016fa:	482e      	ldr	r0, [pc, #184]	; (80017b4 <_Z22SendN2kBatteryMessagesv+0x1bc>)
 80016fc:	f7ff fe05 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <_Z22SendN2kBatteryMessagesv+0x17c>
      BatConfScheduler.UpdateNextTime();
 8001706:	482b      	ldr	r0, [pc, #172]	; (80017b4 <_Z22SendN2kBatteryMessagesv+0x1bc>)
 8001708:	f7ff fe12 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
  //                  tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
  //                  double PeukertExponent, int8_t ChargeEfficiencyFactor)
  //  SetN2kBatConf(N2kMsg, 0, 0, N2kDCES_Unavailable, N2kDCbnv_48v, N2kDCbc_LiIon, 0xFF, 0xFF, 0, 92);
      SetN2kBatConf(N2kMsg, 0, BatType, SupportsEqual, BatNominalVoltage, BatChemistry, BatCapacity, BatTemperatureCoefficient, PeukertExponent, ChargeEfficiencyFactor);
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <_Z22SendN2kBatteryMessagesv+0x1c0>)
 800170e:	f893 e000 	ldrb.w	lr, [r3]
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <_Z22SendN2kBatteryMessagesv+0x1c4>)
 8001714:	f893 8000 	ldrb.w	r8, [r3]
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <_Z22SendN2kBatteryMessagesv+0x1c8>)
 800171a:	781c      	ldrb	r4, [r3, #0]
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <_Z22SendN2kBatteryMessagesv+0x1cc>)
 800171e:	781d      	ldrb	r5, [r3, #0]
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <_Z22SendN2kBatteryMessagesv+0x1d0>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	4929      	ldr	r1, [pc, #164]	; (80017cc <_Z22SendN2kBatteryMessagesv+0x1d4>)
 8001728:	f991 6000 	ldrsb.w	r6, [r1]
 800172c:	4928      	ldr	r1, [pc, #160]	; (80017d0 <_Z22SendN2kBatteryMessagesv+0x1d8>)
 800172e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001732:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80017d4 <_Z22SendN2kBatteryMessagesv+0x1dc>
 8001736:	f99c c000 	ldrsb.w	ip, [ip]
 800173a:	f8c7 c004 	str.w	ip, [r7, #4]
 800173e:	f107 0c0c 	add.w	ip, r7, #12
 8001742:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8001746:	f8cd 9020 	str.w	r9, [sp, #32]
 800174a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800174e:	9604      	str	r6, [sp, #16]
 8001750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001754:	9501      	str	r5, [sp, #4]
 8001756:	9400      	str	r4, [sp, #0]
 8001758:	4643      	mov	r3, r8
 800175a:	4672      	mov	r2, lr
 800175c:	2100      	movs	r1, #0
 800175e:	4660      	mov	r0, ip
 8001760:	f7ff fef8 	bl	8001554 <_Z13SetN2kBatConfR7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
      NMEA2000.SendMsg(N2kMsg);
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <_Z22SendN2kBatteryMessagesv+0x1a4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f00c fa1c 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }
}
 8001774:	bf00      	nop
 8001776:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800177a:	46bd      	mov	sp, r7
 800177c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001780:	00000000 	.word	0x00000000
 8001784:	406fe000 	.word	0x406fe000
 8001788:	20000320 	.word	0x20000320
 800178c:	20000318 	.word	0x20000318
 8001790:	20000008 	.word	0x20000008
 8001794:	20000010 	.word	0x20000010
 8001798:	20000018 	.word	0x20000018
 800179c:	2000031c 	.word	0x2000031c
 80017a0:	20000330 	.word	0x20000330
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000028 	.word	0x20000028
 80017ac:	20000030 	.word	0x20000030
 80017b0:	20000020 	.word	0x20000020
 80017b4:	20000340 	.word	0x20000340
 80017b8:	2000030c 	.word	0x2000030c
 80017bc:	20000038 	.word	0x20000038
 80017c0:	20000039 	.word	0x20000039
 80017c4:	2000003a 	.word	0x2000003a
 80017c8:	20000040 	.word	0x20000040
 80017cc:	20000048 	.word	0x20000048
 80017d0:	20000310 	.word	0x20000310
 80017d4:	20000049 	.word	0x20000049

080017d8 <_Z9OnN2kOpenv>:


// *****************************************************************************
// Call back for NMEA2000 open. This will be called, when library starts bus communication.
// See NMEA2000.SetOnOpen(OnN2kOpen); on setup()
void OnN2kOpen() {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    // Start schedulers now.
    DCBatStatusScheduler.UpdateNextTime();
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <_Z9OnN2kOpenv+0x1c>)
 80017de:	f7ff fda7 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    DCStatusScheduler.UpdateNextTime();
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <_Z9OnN2kOpenv+0x20>)
 80017e4:	f7ff fda4 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    BatConfScheduler.UpdateNextTime();
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <_Z9OnN2kOpenv+0x24>)
 80017ea:	f7ff fda1 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000320 	.word	0x20000320
 80017f8:	20000330 	.word	0x20000330
 80017fc:	20000340 	.word	0x20000340

08001800 <_Z16myCppProcessInitv>:
/////////////////////////////////
// INITIALIZATION
////////////////////////////////

void myCppProcessInit()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af04      	add	r7, sp, #16

    // NMEA2000 setup
	//-----------------------------------------------------------
    // Set Product information
    NMEA2000.SetProductInformation(&ProductInformation);
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	491a      	ldr	r1, [pc, #104]	; (8001878 <_Z16myCppProcessInitv+0x78>)
 800180e:	4618      	mov	r0, r3
 8001810:	f00a fe18 	bl	800c444 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>
    // Set Configuration information
    NMEA2000.SetProgmemConfigurationInformation(ManufacturerInformation,InstallationDescription1,InstallationDescription2);
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <_Z16myCppProcessInitv+0x7c>)
 800181a:	4a19      	ldr	r2, [pc, #100]	; (8001880 <_Z16myCppProcessInitv+0x80>)
 800181c:	4919      	ldr	r1, [pc, #100]	; (8001884 <_Z16myCppProcessInitv+0x84>)
 800181e:	f00a fee1 	bl	800c5e4 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
    // Set device information
    NMEA2000.SetDeviceInformation(1,      // Unique number. Use e.g. Serial number.
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	2304      	movs	r3, #4
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2323      	movs	r3, #35	; 0x23
 8001834:	22aa      	movs	r2, #170	; 0xaa
 8001836:	2101      	movs	r1, #1
 8001838:	f00b faf9 	bl	800ce2e <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                                  4,      // Marine
                                  0);     // device


    // If you also want to see all traffic on the bus use N2km_ListenAndNode instead of N2km_NodeOnly below
    NMEA2000.SetMode(tNMEA2000::N2km_NodeOnly,80);
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2250      	movs	r2, #80	; 0x50
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f00b fc31 	bl	800d0ac <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>

    //  NMEA2000.SetN2kCANMsgBufSize(2);                    // For this simple example, limit buffer size to 2, since we are only sending data
    // Define OnOpen call back. This will be called, when CAN is open and system starts address claiming.

    // Here we tell library, which PGNs we transmit
    NMEA2000.ExtendTransmitMessages(TransmitMessagesBattery);
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	490d      	ldr	r1, [pc, #52]	; (8001888 <_Z16myCppProcessInitv+0x88>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00b fc08 	bl	800d068 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>

    NMEA2000.SetOnOpen(OnN2kOpen);
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	490b      	ldr	r1, [pc, #44]	; (800188c <_Z16myCppProcessInitv+0x8c>)
 800185e:	4618      	mov	r0, r3
 8001860:	f00f feba 	bl	80115d8 <_ZN9tNMEA20009SetOnOpenEPFvvE>
    NMEA2000.Open();
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <_Z16myCppProcessInitv+0x74>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f00b fc91 	bl	800d190 <_ZN9tNMEA20004OpenEv>

}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000031c 	.word	0x2000031c
 8001878:	080174c8 	.word	0x080174c8
 800187c:	08017570 	.word	0x08017570
 8001880:	0801756c 	.word	0x0801756c
 8001884:	08017554 	.word	0x08017554
 8001888:	080174b4 	.word	0x080174b4
 800188c:	080017d9 	.word	0x080017d9

08001890 <_Z12myCppProcessv>:

/////////////////////////////////
// CPP program main function
////////////////////////////////

void myCppProcess(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

	// infinite loop
	while (1) {


	    SendN2kBatteryMessages();
 8001894:	f7ff feb0 	bl	80015f8 <_Z22SendN2kBatteryMessagesv>
	    NMEA2000.ParseMessages();
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <_Z12myCppProcessv+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f00f fdbd 	bl	801141c <_ZN9tNMEA200013ParseMessagesEv>
	    SendN2kBatteryMessages();
 80018a2:	e7f7      	b.n	8001894 <_Z12myCppProcessv+0x4>
 80018a4:	2000031c 	.word	0x2000031c

080018a8 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f82e 	bl	8001912 <_ZNSaIP10tSTM32_CANEC1Ev>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f836 	bl	800192a <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZNSaIP10tSTM32_CANED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f83d 	bl	8001950 <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANED1Ev>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80018f8:	461a      	mov	r2, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f832 	bl	8001964 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe51 	bl	80015aa <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE12_Vector_implD1Ev>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZNSaIP10tSTM32_CANEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f835 	bl	800198a <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANEC1Ev>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
	{ }
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	if (__p)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f80e 	bl	800199e <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE10deallocateERS2_PS1_j>
      }
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f804 	bl	80019bc <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE10deallocateEPS2_j>
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4619      	mov	r1, r3
 80019ce:	68b8      	ldr	r0, [r7, #8]
 80019d0:	f014 f89a 	bl	8015b08 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_Z41__static_initialization_and_destruction_0ii>:



	}// end myCppProcess while (1) loop

}
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d12b      	bne.n	8001a44 <_Z41__static_initialization_and_destruction_0ii+0x68>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d126      	bne.n	8001a44 <_Z41__static_initialization_and_destruction_0ii+0x68>
    bool SendFromTxRing();


};

static std::vector<tSTM32_CAN *> canInstances;
 80019f6:	481b      	ldr	r0, [pc, #108]	; (8001a64 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80019f8:	f7ff fdf0 	bl	80015dc <_ZNSt6vectorIP10tSTM32_CANSaIS1_EEC1Ev>
tNMEA2000 &NMEA2000 = *( new tNMEA2000_STM32(&hcan2) );
 80019fc:	20d4      	movs	r0, #212	; 0xd4
 80019fe:	f014 f885 	bl	8015b0c <_Znwj>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461c      	mov	r4, r3
 8001a06:	4918      	ldr	r1, [pc, #96]	; (8001a68 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f010 f84f 	bl	8011aac <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>
 8001a0e:	4622      	mov	r2, r4
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001a12:	601a      	str	r2, [r3, #0]
tN2kSyncScheduler DCBatStatusScheduler(false,1500,500);
 8001a14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4814      	ldr	r0, [pc, #80]	; (8001a70 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001a20:	f7ff fc46 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler DCStatusScheduler(false,1500,510);
 8001a24:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001a28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4811      	ldr	r0, [pc, #68]	; (8001a74 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001a30:	f7ff fc3e 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler BatConfScheduler(false,5000,530); // Non periodic
 8001a34:	f240 2312 	movw	r3, #530	; 0x212
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	480e      	ldr	r0, [pc, #56]	; (8001a78 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001a40:	f7ff fc36 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d107      	bne.n	8001a5a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d102      	bne.n	8001a5a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001a56:	f000 f811 	bl	8001a7c <_ZNSt6vectorIP10tSTM32_CANSaIS1_EED1Ev>
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000300 	.word	0x20000300
 8001a68:	20000248 	.word	0x20000248
 8001a6c:	2000031c 	.word	0x2000031c
 8001a70:	20000320 	.word	0x20000320
 8001a74:	20000330 	.word	0x20000330
 8001a78:	20000340 	.word	0x20000340

08001a7c <_ZNSt6vectorIP10tSTM32_CANSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681c      	ldr	r4, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f80f 	bl	8001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8001a94:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a96:	461a      	mov	r2, r3
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f000 f813 	bl	8001ac6 <_ZSt8_DestroyIPP10tSTM32_CANS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff1c 	bl	80018e0 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EED1Ev>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}

08001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <_ZSt8_DestroyIPP10tSTM32_CANS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f804 	bl	8001ae2 <_ZSt8_DestroyIPP10tSTM32_CANEvT_S3_>
    }
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZSt8_DestroyIPP10tSTM32_CANEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f804 	bl	8001afc <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10tSTM32_CANEEvT_S5_>
    }
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10tSTM32_CANEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <_GLOBAL__sub_I_state_of_charge>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff ff5f 	bl	80019dc <_Z41__static_initialization_and_destruction_0ii>
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_GLOBAL__sub_D_state_of_charge>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff ff57 	bl	80019dc <_Z41__static_initialization_and_destruction_0ii>
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x60>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_MspInit+0x60>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000

08001b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_ADC_MspInit+0xd0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d152      	bne.n	8001c5a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_ADC_MspInit+0xd4>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_ADC_MspInit+0xd4>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_ADC_MspInit+0xd4>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_ADC_MspInit+0xd4>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_ADC_MspInit+0xd4>)
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_ADC_MspInit+0xd4>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8001be4:	2320      	movs	r3, #32
 8001be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481e      	ldr	r0, [pc, #120]	; (8001c6c <HAL_ADC_MspInit+0xd8>)
 8001bf4:	f002 f876 	bl	8003ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001bfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c22:	2220      	movs	r2, #32
 8001c24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c2e:	4810      	ldr	r0, [pc, #64]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c30:	f001 fda6 	bl	8003780 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001c3a:	f7ff fb15 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c42:	621a      	str	r2, [r3, #32]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2012      	movs	r0, #18
 8001c50:	f001 fd5f 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c54:	2012      	movs	r0, #18
 8001c56:	f001 fd78 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40012400 	.word	0x40012400
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40011000 	.word	0x40011000
 8001c70:	200001dc 	.word	0x200001dc
 8001c74:	40020008 	.word	0x40020008

08001c78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <HAL_CAN_MspInit+0x19c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d15d      	bne.n	8001d54 <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c98:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <HAL_CAN_MspInit+0x1a0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a5e      	ldr	r2, [pc, #376]	; (8001e18 <HAL_CAN_MspInit+0x1a0>)
 8001ca0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_CAN_MspInit+0x1a0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a5b      	ldr	r2, [pc, #364]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	484c      	ldr	r0, [pc, #304]	; (8001e20 <HAL_CAN_MspInit+0x1a8>)
 8001cf0:	f001 fff8 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4845      	ldr	r0, [pc, #276]	; (8001e20 <HAL_CAN_MspInit+0x1a8>)
 8001d0a:	f001 ffeb 	bl	8003ce4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001d0e:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <HAL_CAN_MspInit+0x1ac>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_CAN_MspInit+0x1ac>)
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2013      	movs	r0, #19
 8001d38:	f001 fceb 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d3c:	2013      	movs	r0, #19
 8001d3e:	f001 fd04 	bl	800374a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2014      	movs	r0, #20
 8001d48:	f001 fce3 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d4c:	2014      	movs	r0, #20
 8001d4e:	f001 fcfc 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d52:	e05b      	b.n	8001e0c <HAL_CAN_MspInit+0x194>
  else if(hcan->Instance==CAN2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <HAL_CAN_MspInit+0x1b0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d156      	bne.n	8001e0c <HAL_CAN_MspInit+0x194>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a2e      	ldr	r2, [pc, #184]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_CAN_MspInit+0x1a0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_CAN_MspInit+0x1a0>)
 8001d7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_CAN_MspInit+0x1a0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d10b      	bne.n	8001da0 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d92:	61d3      	str	r3, [r2, #28]
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_CAN_MspInit+0x1a4>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4814      	ldr	r0, [pc, #80]	; (8001e20 <HAL_CAN_MspInit+0x1a8>)
 8001dce:	f001 ff89 	bl	8003ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	480e      	ldr	r0, [pc, #56]	; (8001e20 <HAL_CAN_MspInit+0x1a8>)
 8001de8:	f001 ff7c 	bl	8003ce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	203f      	movs	r0, #63	; 0x3f
 8001df2:	f001 fc8e 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001df6:	203f      	movs	r0, #63	; 0x3f
 8001df8:	f001 fca7 	bl	800374a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2041      	movs	r0, #65	; 0x41
 8001e02:	f001 fc86 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001e06:	2041      	movs	r0, #65	; 0x41
 8001e08:	f001 fc9f 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40006400 	.word	0x40006400
 8001e18:	20000350 	.word	0x20000350
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010c00 	.word	0x40010c00
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40006800 	.word	0x40006800

08001e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d114      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_TIM_Base_MspInit+0x68>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_TIM_Base_MspInit+0x68>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_TIM_Base_MspInit+0x68>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201c      	movs	r0, #28
 8001e5c:	f001 fc59 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e60:	201c      	movs	r0, #28
 8001e62:	f001 fc72 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e66:	e010      	b.n	8001e8a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_TIM_Base_MspInit+0x6c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10b      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_TIM_Base_MspInit+0x68>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_TIM_Base_MspInit+0x68>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_TIM_Base_MspInit+0x68>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40000c00 	.word	0x40000c00

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee2:	f000 f985 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <DMA1_Channel1_IRQHandler+0x10>)
 8001ef2:	f001 fcbb 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200001dc 	.word	0x200001dc

08001f00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <ADC1_2_IRQHandler+0x10>)
 8001f06:	f000 fa8b 	bl	8002420 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001ac 	.word	0x200001ac

08001f14 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <CAN1_TX_IRQHandler+0x10>)
 8001f1a:	f001 f923 	bl	8003164 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000220 	.word	0x20000220

08001f28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <CAN1_RX0_IRQHandler+0x10>)
 8001f2e:	f001 f919 	bl	8003164 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000220 	.word	0x20000220

08001f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM2_IRQHandler+0x10>)
 8001f42:	f003 ff2a 	bl	8005d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000270 	.word	0x20000270

08001f50 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <CAN2_TX_IRQHandler+0x10>)
 8001f56:	f001 f905 	bl	8003164 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000248 	.word	0x20000248

08001f64 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <CAN2_RX1_IRQHandler+0x10>)
 8001f6a:	f001 f8fb 	bl	8003164 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000248 	.word	0x20000248

08001f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <OTG_FS_IRQHandler+0x10>)
 8001f7e:	f002 f9b4 	bl	80042ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000094c 	.word	0x2000094c

08001f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	return 1;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <_kill>:

int _kill(int pid, int sig)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fa4:	f013 fef4 	bl	8015d90 <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2216      	movs	r2, #22
 8001fac:	601a      	str	r2, [r3, #0]
	return -1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_exit>:

void _exit (int status)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffe7 	bl	8001f9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fcc:	e7fe      	b.n	8001fcc <_exit+0x12>

08001fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e00a      	b.n	8001ff6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fe0:	f3af 8000 	nop.w
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	60ba      	str	r2, [r7, #8]
 8001fec:	b2ca      	uxtb	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbf0      	blt.n	8001fe0 <_read+0x12>
	}

return len;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e009      	b.n	800202e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbf1      	blt.n	800201a <_write+0x12>
	}
	return len;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_close>:

int _close(int file)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002066:	605a      	str	r2, [r3, #4]
	return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <_isatty>:

int _isatty(int file)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
	return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f013 fe5e 	bl	8015d90 <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20010000 	.word	0x20010000
 8002100:	00000400 	.word	0x00000400
 8002104:	20000354 	.word	0x20000354
 8002108:	20001180 	.word	0x20001180

0800210c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211a:	490d      	ldr	r1, [pc, #52]	; (8002150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002130:	4c0a      	ldr	r4, [pc, #40]	; (800215c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800213e:	f7ff ffe5 	bl	800210c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002142:	f013 fe2b 	bl	8015d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002146:	f7fe feab 	bl	8000ea0 <main>
  bx lr
 800214a:	4770      	bx	lr
  ldr r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002150:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002154:	080178c4 	.word	0x080178c4
  ldr r2, =_sbss
 8002158:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800215c:	20001180 	.word	0x20001180

08002160 <CAN1_RX1_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <CAN1_RX1_IRQHandler>
	...

08002164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_Init+0x28>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_Init+0x28>)
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f001 fac1 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fcd6 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fad9 	bl	8003766 <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021cc:	f001 faa1 	bl	8003712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2000004c 	.word	0x2000004c
 80021e8:	20000054 	.word	0x20000054
 80021ec:	20000050 	.word	0x20000050

080021f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_IncTick+0x1c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_IncTick+0x20>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a03      	ldr	r2, [pc, #12]	; (8002210 <HAL_IncTick+0x20>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000054 	.word	0x20000054
 8002210:	20000358 	.word	0x20000358

08002214 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_GetTick+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000358 	.word	0x20000358

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fff0 	bl	8002214 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffe0 	bl	8002214 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000054 	.word	0x20000054

08002270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0be      	b.n	8002410 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fc70 	bl	8001b94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa81 	bl	80027bc <ADC_ConversionStop_Disable>
 80022ba:	4603      	mov	r3, r0
 80022bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 8099 	bne.w	80023fe <HAL_ADC_Init+0x18e>
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8095 	bne.w	80023fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022dc:	f023 0302 	bic.w	r3, r3, #2
 80022e0:	f043 0202 	orr.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7b1b      	ldrb	r3, [r3, #12]
 80022f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002308:	d003      	beq.n	8002312 <HAL_ADC_Init+0xa2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_ADC_Init+0xa8>
 8002312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002316:	e000      	b.n	800231a <HAL_ADC_Init+0xaa>
 8002318:	2300      	movs	r3, #0
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7d1b      	ldrb	r3, [r3, #20]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d119      	bne.n	800235c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7b1b      	ldrb	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	3b01      	subs	r3, #1
 8002336:	035a      	lsls	r2, r3, #13
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e00b      	b.n	800235c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_ADC_Init+0x1a8>)
 8002378:	4013      	ands	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238c:	d003      	beq.n	8002396 <HAL_ADC_Init+0x126>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d104      	bne.n	80023a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	3b01      	subs	r3, #1
 800239c:	051b      	lsls	r3, r3, #20
 800239e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_ADC_Init+0x1ac>)
 80023bc:	4013      	ands	r3, r2
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d10b      	bne.n	80023dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023da:	e018      	b.n	800240e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f023 0312 	bic.w	r3, r3, #18
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fc:	e007      	b.n	800240e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800240e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	ffe1f7fd 	.word	0xffe1f7fd
 800241c:	ff1f0efe 	.word	0xff1f0efe

08002420 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b20      	cmp	r3, #32
 8002434:	d140      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d139      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002466:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800246a:	d11d      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002470:	2b00      	cmp	r3, #0
 8002472:	d119      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0220 	bic.w	r2, r2, #32
 8002482:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f87c 	bl	80025a6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0212 	mvn.w	r2, #18
 80024b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b80      	cmp	r3, #128	; 0x80
 80024c4:	d14f      	bne.n	8002566 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d148      	bne.n	8002566 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80024f6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80024fa:	d012      	beq.n	8002522 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002506:	2b00      	cmp	r3, #0
 8002508:	d125      	bne.n	8002556 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002514:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002518:	d11d      	bne.n	8002556 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d119      	bne.n	8002556 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002530:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f971 	bl	800283e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 020c 	mvn.w	r2, #12
 8002564:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d114      	bne.n	800259e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10d      	bne.n	800259e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f812 	bl	80025b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0201 	mvn.w	r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x20>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e0dc      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1da>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d81c      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	4019      	ands	r1, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b05      	subs	r3, #5
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	635a      	str	r2, [r3, #52]	; 0x34
 8002634:	e03c      	b.n	80026b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d81c      	bhi.n	8002678 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b23      	subs	r3, #35	; 0x23
 8002650:	221f      	movs	r2, #31
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	4019      	ands	r1, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b23      	subs	r3, #35	; 0x23
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
 8002676:	e01b      	b.n	80026b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b41      	subs	r3, #65	; 0x41
 800268a:	221f      	movs	r2, #31
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	4019      	ands	r1, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b41      	subs	r3, #65	; 0x41
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b09      	cmp	r3, #9
 80026b6:	d91c      	bls.n	80026f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68d9      	ldr	r1, [r3, #12]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	2207      	movs	r2, #7
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4019      	ands	r1, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6898      	ldr	r0, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	e019      	b.n	8002726 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6919      	ldr	r1, [r3, #16]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	fa00 f203 	lsl.w	r2, r0, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b10      	cmp	r3, #16
 800272c:	d003      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002732:	2b11      	cmp	r3, #17
 8002734:	d132      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d125      	bne.n	800278c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d126      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800275c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d11a      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9a      	lsrs	r2, r3, #18
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800277c:	e002      	b.n	8002784 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3b01      	subs	r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f9      	bne.n	800277e <HAL_ADC_ConfigChannel+0x1b2>
 800278a:	e007      	b.n	800279c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40012400 	.word	0x40012400
 80027b4:	2000004c 	.word	0x2000004c
 80027b8:	431bde83 	.word	0x431bde83

080027bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d12e      	bne.n	8002834 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027e6:	f7ff fd15 	bl	8002214 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ec:	e01b      	b.n	8002826 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ee:	f7ff fd11 	bl	8002214 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d914      	bls.n	8002826 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10d      	bne.n	8002826 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	f043 0210 	orr.w	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e007      	b.n	8002836 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d0dc      	beq.n	80027ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0ed      	b.n	8002a3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fa02 	bl	8001c78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002884:	f7ff fcc6 	bl	8002214 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800288a:	e012      	b.n	80028b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800288c:	f7ff fcc2 	bl	8002214 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b0a      	cmp	r3, #10
 8002898:	d90b      	bls.n	80028b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2205      	movs	r2, #5
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0c5      	b.n	8002a3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0e5      	beq.n	800288c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0202 	bic.w	r2, r2, #2
 80028ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d0:	f7ff fca0 	bl	8002214 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028d6:	e012      	b.n	80028fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028d8:	f7ff fc9c 	bl	8002214 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b0a      	cmp	r3, #10
 80028e4:	d90b      	bls.n	80028fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2205      	movs	r2, #5
 80028f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e09f      	b.n	8002a3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7e1b      	ldrb	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d108      	bne.n	8002926 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e007      	b.n	8002936 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7e5b      	ldrb	r3, [r3, #25]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e007      	b.n	8002960 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7e9b      	ldrb	r3, [r3, #26]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d108      	bne.n	800297a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e007      	b.n	800298a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0220 	bic.w	r2, r2, #32
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7edb      	ldrb	r3, [r3, #27]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0210 	bic.w	r2, r2, #16
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e007      	b.n	80029b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0210 	orr.w	r2, r2, #16
 80029b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7f1b      	ldrb	r3, [r3, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d108      	bne.n	80029ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0208 	orr.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e007      	b.n	80029de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7f5b      	ldrb	r3, [r3, #29]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0204 	orr.w	r2, r2, #4
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e007      	b.n	8002a08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0204 	bic.w	r2, r2, #4
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	ea42 0103 	orr.w	r1, r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d003      	beq.n	8002a6e <HAL_CAN_ConfigFilter+0x26>
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	f040 80be 	bne.w	8002bea <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a6e:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_CAN_ConfigFilter+0x1bc>)
 8002a70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d123      	bne.n	8002b18 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002af2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3248      	adds	r2, #72	; 0x48
 8002af8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	3348      	adds	r3, #72	; 0x48
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d122      	bne.n	8002b66 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3248      	adds	r2, #72	; 0x48
 8002b46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b80:	e007      	b.n	8002b92 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002bac:	e007      	b.n	8002bbe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bdc:	f023 0201 	bic.w	r2, r3, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e006      	b.n	8002bf8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
  }
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40006400 	.word	0x40006400

08002c08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d12e      	bne.n	8002c7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c34:	f7ff faee 	bl	8002214 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c3a:	e012      	b.n	8002c62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c3c:	f7ff faea 	bl	8002214 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b0a      	cmp	r3, #10
 8002c48:	d90b      	bls.n	8002c62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e012      	b.n	8002c88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e006      	b.n	8002c88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d003      	beq.n	8002cbc <HAL_CAN_AddTxMessage+0x2c>
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f040 80b8 	bne.w	8002e2c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a0 	beq.w	8002e1c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	0e1b      	lsrs	r3, r3, #24
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d907      	bls.n	8002cfc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e09e      	b.n	8002e3a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	409a      	lsls	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	6809      	ldr	r1, [r1, #0]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3318      	adds	r3, #24
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	440b      	add	r3, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e00f      	b.n	8002d4a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d34:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d3e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3318      	adds	r3, #24
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	440b      	add	r3, r1
 8002d48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3318      	adds	r3, #24
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	440b      	add	r3, r1
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	7d1b      	ldrb	r3, [r3, #20]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d111      	bne.n	8002d8a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4413      	add	r3, r2
 8002d72:	3304      	adds	r3, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	6811      	ldr	r1, [r2, #0]
 8002d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3318      	adds	r3, #24
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	440b      	add	r3, r1
 8002d86:	3304      	adds	r3, #4
 8002d88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3307      	adds	r3, #7
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	061a      	lsls	r2, r3, #24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3306      	adds	r3, #6
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3305      	adds	r3, #5
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4313      	orrs	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	3204      	adds	r2, #4
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	4610      	mov	r0, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	6811      	ldr	r1, [r2, #0]
 8002db2:	ea43 0200 	orr.w	r2, r3, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	440b      	add	r3, r1
 8002dbc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002dc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	061a      	lsls	r2, r3, #24
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3302      	adds	r3, #2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	4610      	mov	r0, r2
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	ea43 0200 	orr.w	r2, r3, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002df6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3318      	adds	r3, #24
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	4413      	add	r3, r2
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3318      	adds	r3, #24
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	440b      	add	r3, r1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e00e      	b.n	8002e3a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e006      	b.n	8002e3a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e56:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d002      	beq.n	8002e64 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d11d      	bne.n	8002ea0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d003      	beq.n	8002ed0 <HAL_CAN_GetRxMessage+0x24>
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	f040 80f3 	bne.w	80030b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d116      	bne.n	8002f12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0e7      	b.n	80030c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0d8      	b.n	80030c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	331b      	adds	r3, #27
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4413      	add	r3, r2
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0204 	and.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10c      	bne.n	8002f4a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	331b      	adds	r3, #27
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4413      	add	r3, r2
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0d5b      	lsrs	r3, r3, #21
 8002f40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e00b      	b.n	8002f62 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	331b      	adds	r3, #27
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	4413      	add	r3, r2
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	331b      	adds	r3, #27
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0202 	and.w	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	331b      	adds	r3, #27
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	331b      	adds	r3, #27
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	331b      	adds	r3, #27
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0a1a      	lsrs	r2, r3, #8
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0c1a      	lsrs	r2, r3, #16
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	3302      	adds	r3, #2
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	4413      	add	r3, r2
 8003014:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e1a      	lsrs	r2, r3, #24
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	3303      	adds	r3, #3
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4413      	add	r3, r2
 800302e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	3304      	adds	r3, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	4413      	add	r3, r2
 8003046:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0a1a      	lsrs	r2, r3, #8
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	3305      	adds	r3, #5
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	4413      	add	r3, r2
 8003060:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0c1a      	lsrs	r2, r3, #16
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	3306      	adds	r3, #6
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	4413      	add	r3, r2
 800307a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e1a      	lsrs	r2, r3, #24
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3307      	adds	r3, #7
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d108      	bne.n	80030a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	e007      	b.n	80030b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0220 	orr.w	r2, r2, #32
 80030b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e006      	b.n	80030c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d002      	beq.n	80030ec <HAL_CAN_ActivateNotification+0x1e>
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d109      	bne.n	8003100 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6959      	ldr	r1, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e006      	b.n	800310e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003128:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d002      	beq.n	8003136 <HAL_CAN_DeactivateNotification+0x1e>
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d10a      	bne.n	800314c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6959      	ldr	r1, [r3, #20]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	43da      	mvns	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e006      	b.n	800315a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d07c      	beq.n	80032a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2201      	movs	r2, #1
 80031ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f00f f91f 	bl	801240a <HAL_CAN_TxMailbox0CompleteCallback>
 80031cc:	e016      	b.n	80031fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
 80031e0:	e00c      	b.n	80031fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	e002      	b.n	80031fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f96b 	bl	80034d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d024      	beq.n	8003250 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f00f f904 	bl	8012428 <HAL_CAN_TxMailbox1CompleteCallback>
 8003220:	e016      	b.n	8003250 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	e00c      	b.n	8003250 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	e002      	b.n	8003250 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f94a 	bl	80034e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d024      	beq.n	80032a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003262:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f00f f8e9 	bl	8012446 <HAL_CAN_TxMailbox2CompleteCallback>
 8003274:	e016      	b.n	80032a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	e00c      	b.n	80032a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	e002      	b.n	80032a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f929 	bl	80034f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2210      	movs	r2, #16
 80032c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f90f 	bl	8003508 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f00f f870 	bl	80123e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003322:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2208      	movs	r2, #8
 8003346:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8ef 	bl	800352c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8d7 	bl	800351a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2210      	movs	r2, #16
 8003386:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f8d8 	bl	800353e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2208      	movs	r2, #8
 80033a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8d0 	bl	8003550 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d07b      	beq.n	80034b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d072      	beq.n	80034aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341e:	2b00      	cmp	r3, #0
 8003420:	d043      	beq.n	80034aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03e      	beq.n	80034aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003432:	2b60      	cmp	r3, #96	; 0x60
 8003434:	d02b      	beq.n	800348e <HAL_CAN_IRQHandler+0x32a>
 8003436:	2b60      	cmp	r3, #96	; 0x60
 8003438:	d82e      	bhi.n	8003498 <HAL_CAN_IRQHandler+0x334>
 800343a:	2b50      	cmp	r3, #80	; 0x50
 800343c:	d022      	beq.n	8003484 <HAL_CAN_IRQHandler+0x320>
 800343e:	2b50      	cmp	r3, #80	; 0x50
 8003440:	d82a      	bhi.n	8003498 <HAL_CAN_IRQHandler+0x334>
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d019      	beq.n	800347a <HAL_CAN_IRQHandler+0x316>
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d826      	bhi.n	8003498 <HAL_CAN_IRQHandler+0x334>
 800344a:	2b30      	cmp	r3, #48	; 0x30
 800344c:	d010      	beq.n	8003470 <HAL_CAN_IRQHandler+0x30c>
 800344e:	2b30      	cmp	r3, #48	; 0x30
 8003450:	d822      	bhi.n	8003498 <HAL_CAN_IRQHandler+0x334>
 8003452:	2b10      	cmp	r3, #16
 8003454:	d002      	beq.n	800345c <HAL_CAN_IRQHandler+0x2f8>
 8003456:	2b20      	cmp	r3, #32
 8003458:	d005      	beq.n	8003466 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800345a:	e01d      	b.n	8003498 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003464:	e019      	b.n	800349a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f043 0310 	orr.w	r3, r3, #16
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800346e:	e014      	b.n	800349a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f043 0320 	orr.w	r3, r3, #32
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003478:	e00f      	b.n	800349a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003482:	e00a      	b.n	800349a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800348c:	e005      	b.n	800349a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003496:	e000      	b.n	800349a <HAL_CAN_IRQHandler+0x336>
            break;
 8003498:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2204      	movs	r2, #4
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f00e ffcd 	bl	8012464 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	; 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4906      	ldr	r1, [pc, #24]	; (80035fc <__NVIC_EnableIRQ+0x34>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	db0a      	blt.n	800362a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <__NVIC_SetPriority+0x4c>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	440b      	add	r3, r1
 8003624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003628:	e00a      	b.n	8003640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <__NVIC_SetPriority+0x50>)
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3b04      	subs	r3, #4
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	440b      	add	r3, r1
 800363e:	761a      	strb	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf28      	it	cs
 8003672:	2304      	movcs	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	2b06      	cmp	r3, #6
 800367c:	d902      	bls.n	8003684 <NVIC_EncodePriority+0x30>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3b03      	subs	r3, #3
 8003682:	e000      	b.n	8003686 <NVIC_EncodePriority+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43d9      	mvns	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	4313      	orrs	r3, r2
         );
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036dc:	f7ff ff90 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff2d 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff42 	bl	80035ac <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff90 	bl	8003654 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5f 	bl	8003600 <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff35 	bl	80035c8 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa2 	bl	80036b8 <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e059      	b.n	800384a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_DMA_Init+0xd4>)
 800379e:	429a      	cmp	r2, r3
 80037a0:	d80f      	bhi.n	80037c2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_DMA_Init+0xd8>)
 80037aa:	4413      	add	r3, r2
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <HAL_DMA_Init+0xdc>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	009a      	lsls	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_DMA_Init+0xe0>)
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c
 80037c0:	e00e      	b.n	80037e0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_DMA_Init+0xe4>)
 80037ca:	4413      	add	r3, r2
 80037cc:	4a23      	ldr	r2, [pc, #140]	; (800385c <HAL_DMA_Init+0xdc>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a22      	ldr	r2, [pc, #136]	; (8003868 <HAL_DMA_Init+0xe8>)
 80037de:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	40020407 	.word	0x40020407
 8003858:	bffdfff8 	.word	0xbffdfff8
 800385c:	cccccccd 	.word	0xcccccccd
 8003860:	40020000 	.word	0x40020000
 8003864:	bffdfbf8 	.word	0xbffdfbf8
 8003868:	40020400 	.word	0x40020400

0800386c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2204      	movs	r2, #4
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80f1 	beq.w	8003a78 <HAL_DMA_IRQHandler+0x20c>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80eb 	beq.w	8003a78 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <HAL_DMA_IRQHandler+0x1d8>)
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d958      	bls.n	800397e <HAL_DMA_IRQHandler+0x112>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_DMA_IRQHandler+0x1dc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04f      	beq.n	8003976 <HAL_DMA_IRQHandler+0x10a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMA_IRQHandler+0x1e0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d048      	beq.n	8003972 <HAL_DMA_IRQHandler+0x106>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5a      	ldr	r2, [pc, #360]	; (8003a50 <HAL_DMA_IRQHandler+0x1e4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <HAL_DMA_IRQHandler+0x100>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMA_IRQHandler+0x1e8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d038      	beq.n	8003966 <HAL_DMA_IRQHandler+0xfa>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_DMA_IRQHandler+0x1ec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d030      	beq.n	8003960 <HAL_DMA_IRQHandler+0xf4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMA_IRQHandler+0x1f0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d028      	beq.n	800395a <HAL_DMA_IRQHandler+0xee>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_DMA_IRQHandler+0x1d8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d020      	beq.n	8003954 <HAL_DMA_IRQHandler+0xe8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_DMA_IRQHandler+0x1f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d019      	beq.n	8003950 <HAL_DMA_IRQHandler+0xe4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a50      	ldr	r2, [pc, #320]	; (8003a64 <HAL_DMA_IRQHandler+0x1f8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d012      	beq.n	800394c <HAL_DMA_IRQHandler+0xe0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4f      	ldr	r2, [pc, #316]	; (8003a68 <HAL_DMA_IRQHandler+0x1fc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00a      	beq.n	8003946 <HAL_DMA_IRQHandler+0xda>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4d      	ldr	r2, [pc, #308]	; (8003a6c <HAL_DMA_IRQHandler+0x200>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d102      	bne.n	8003940 <HAL_DMA_IRQHandler+0xd4>
 800393a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800393e:	e01b      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003940:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003944:	e018      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	e015      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 800394c:	2340      	movs	r3, #64	; 0x40
 800394e:	e013      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003950:	2304      	movs	r3, #4
 8003952:	e011      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003954:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003958:	e00e      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 800395a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800395e:	e00b      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003964:	e008      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800396a:	e005      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 800396c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003970:	e002      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	e000      	b.n	8003978 <HAL_DMA_IRQHandler+0x10c>
 8003976:	2304      	movs	r3, #4
 8003978:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <HAL_DMA_IRQHandler+0x204>)
 800397a:	6053      	str	r3, [r2, #4]
 800397c:	e057      	b.n	8003a2e <HAL_DMA_IRQHandler+0x1c2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a31      	ldr	r2, [pc, #196]	; (8003a48 <HAL_DMA_IRQHandler+0x1dc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04f      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x1bc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <HAL_DMA_IRQHandler+0x1e0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d048      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x1b8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2e      	ldr	r2, [pc, #184]	; (8003a50 <HAL_DMA_IRQHandler+0x1e4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x1b2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <HAL_DMA_IRQHandler+0x1e8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d038      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x1ac>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_DMA_IRQHandler+0x1ec>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d030      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x1a6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <HAL_DMA_IRQHandler+0x1f0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d028      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x1a0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_DMA_IRQHandler+0x1d8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d020      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x19a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_DMA_IRQHandler+0x1f4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x196>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_DMA_IRQHandler+0x1f8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d012      	beq.n	80039fe <HAL_DMA_IRQHandler+0x192>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <HAL_DMA_IRQHandler+0x1fc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00a      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x18c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_DMA_IRQHandler+0x200>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d102      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x186>
 80039ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039f0:	e01b      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 80039f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039f6:	e018      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 80039f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039fc:	e015      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	e013      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e011      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a0a:	e00e      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a10:	e00b      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a16:	e008      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a1c:	e005      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a22:	e002      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a24:	2340      	movs	r3, #64	; 0x40
 8003a26:	e000      	b.n	8003a2a <HAL_DMA_IRQHandler+0x1be>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_DMA_IRQHandler+0x208>)
 8003a2c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8136 	beq.w	8003ca4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a40:	e130      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x438>
 8003a42:	bf00      	nop
 8003a44:	40020080 	.word	0x40020080
 8003a48:	40020008 	.word	0x40020008
 8003a4c:	4002001c 	.word	0x4002001c
 8003a50:	40020030 	.word	0x40020030
 8003a54:	40020044 	.word	0x40020044
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	4002006c 	.word	0x4002006c
 8003a60:	40020408 	.word	0x40020408
 8003a64:	4002041c 	.word	0x4002041c
 8003a68:	40020430 	.word	0x40020430
 8003a6c:	40020444 	.word	0x40020444
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80dd 	beq.w	8003c44 <HAL_DMA_IRQHandler+0x3d8>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80d7 	beq.w	8003c44 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020a 	bic.w	r2, r2, #10
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <HAL_DMA_IRQHandler+0x444>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d958      	bls.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_DMA_IRQHandler+0x448>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d04f      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x306>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a78      	ldr	r2, [pc, #480]	; (8003cb8 <HAL_DMA_IRQHandler+0x44c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d048      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x302>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_DMA_IRQHandler+0x450>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d040      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2fc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a75      	ldr	r2, [pc, #468]	; (8003cc0 <HAL_DMA_IRQHandler+0x454>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d038      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2f6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a73      	ldr	r2, [pc, #460]	; (8003cc4 <HAL_DMA_IRQHandler+0x458>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d030      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x2f0>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a72      	ldr	r2, [pc, #456]	; (8003cc8 <HAL_DMA_IRQHandler+0x45c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d028      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x2ea>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a69      	ldr	r2, [pc, #420]	; (8003cb0 <HAL_DMA_IRQHandler+0x444>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d020      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x2e4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <HAL_DMA_IRQHandler+0x460>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d019      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x2e0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6c      	ldr	r2, [pc, #432]	; (8003cd0 <HAL_DMA_IRQHandler+0x464>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d012      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2dc>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6b      	ldr	r2, [pc, #428]	; (8003cd4 <HAL_DMA_IRQHandler+0x468>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00a      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x2d6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_DMA_IRQHandler+0x46c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d102      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x2d0>
 8003b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b3a:	e01b      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b40:	e018      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b46:	e015      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b48:	2320      	movs	r3, #32
 8003b4a:	e013      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e011      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b54:	e00e      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b5a:	e00b      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b60:	e008      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b66:	e005      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b6c:	e002      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e000      	b.n	8003b74 <HAL_DMA_IRQHandler+0x308>
 8003b72:	2302      	movs	r3, #2
 8003b74:	4a59      	ldr	r2, [pc, #356]	; (8003cdc <HAL_DMA_IRQHandler+0x470>)
 8003b76:	6053      	str	r3, [r2, #4]
 8003b78:	e057      	b.n	8003c2a <HAL_DMA_IRQHandler+0x3be>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4d      	ldr	r2, [pc, #308]	; (8003cb4 <HAL_DMA_IRQHandler+0x448>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04f      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x3b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_DMA_IRQHandler+0x44c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d048      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x3b4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_DMA_IRQHandler+0x450>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x3ae>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_DMA_IRQHandler+0x454>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d038      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x3a8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a47      	ldr	r2, [pc, #284]	; (8003cc4 <HAL_DMA_IRQHandler+0x458>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d030      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3a2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a45      	ldr	r2, [pc, #276]	; (8003cc8 <HAL_DMA_IRQHandler+0x45c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d028      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x39c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <HAL_DMA_IRQHandler+0x444>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d020      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x396>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a41      	ldr	r2, [pc, #260]	; (8003ccc <HAL_DMA_IRQHandler+0x460>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d019      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x392>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <HAL_DMA_IRQHandler+0x464>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d012      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x38e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3e      	ldr	r2, [pc, #248]	; (8003cd4 <HAL_DMA_IRQHandler+0x468>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x388>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3d      	ldr	r2, [pc, #244]	; (8003cd8 <HAL_DMA_IRQHandler+0x46c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <HAL_DMA_IRQHandler+0x382>
 8003be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bec:	e01b      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf2:	e018      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf8:	e015      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	e013      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e011      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c06:	e00e      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c0c:	e00b      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c12:	e008      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c18:	e005      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c1e:	e002      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c20:	2320      	movs	r3, #32
 8003c22:	e000      	b.n	8003c26 <HAL_DMA_IRQHandler+0x3ba>
 8003c24:	2302      	movs	r3, #2
 8003c26:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <HAL_DMA_IRQHandler+0x474>)
 8003c28:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d034      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c42:	e02f      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2208      	movs	r2, #8
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d028      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x43a>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d023      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020e 	bic.w	r2, r2, #14
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2101      	movs	r1, #1
 8003c78:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
    }
  }
  return;
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
}
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40020080 	.word	0x40020080
 8003cb4:	40020008 	.word	0x40020008
 8003cb8:	4002001c 	.word	0x4002001c
 8003cbc:	40020030 	.word	0x40020030
 8003cc0:	40020044 	.word	0x40020044
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	4002006c 	.word	0x4002006c
 8003ccc:	40020408 	.word	0x40020408
 8003cd0:	4002041c 	.word	0x4002041c
 8003cd4:	40020430 	.word	0x40020430
 8003cd8:	40020444 	.word	0x40020444
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	40020000 	.word	0x40020000

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b08b      	sub	sp, #44	; 0x2c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf6:	e169      	b.n	8003fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f040 8158 	bne.w	8003fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a9a      	ldr	r2, [pc, #616]	; (8003f84 <HAL_GPIO_Init+0x2a0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d05e      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d20:	4a98      	ldr	r2, [pc, #608]	; (8003f84 <HAL_GPIO_Init+0x2a0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d875      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d26:	4a98      	ldr	r2, [pc, #608]	; (8003f88 <HAL_GPIO_Init+0x2a4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d058      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d2c:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <HAL_GPIO_Init+0x2a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d86f      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d32:	4a96      	ldr	r2, [pc, #600]	; (8003f8c <HAL_GPIO_Init+0x2a8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d052      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d38:	4a94      	ldr	r2, [pc, #592]	; (8003f8c <HAL_GPIO_Init+0x2a8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d869      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d3e:	4a94      	ldr	r2, [pc, #592]	; (8003f90 <HAL_GPIO_Init+0x2ac>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d04c      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d44:	4a92      	ldr	r2, [pc, #584]	; (8003f90 <HAL_GPIO_Init+0x2ac>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d863      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d4a:	4a92      	ldr	r2, [pc, #584]	; (8003f94 <HAL_GPIO_Init+0x2b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d046      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d50:	4a90      	ldr	r2, [pc, #576]	; (8003f94 <HAL_GPIO_Init+0x2b0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d85d      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d56:	2b12      	cmp	r3, #18
 8003d58:	d82a      	bhi.n	8003db0 <HAL_GPIO_Init+0xcc>
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d859      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_GPIO_Init+0x80>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003ddf 	.word	0x08003ddf
 8003d68:	08003db9 	.word	0x08003db9
 8003d6c:	08003dcb 	.word	0x08003dcb
 8003d70:	08003e0d 	.word	0x08003e0d
 8003d74:	08003e13 	.word	0x08003e13
 8003d78:	08003e13 	.word	0x08003e13
 8003d7c:	08003e13 	.word	0x08003e13
 8003d80:	08003e13 	.word	0x08003e13
 8003d84:	08003e13 	.word	0x08003e13
 8003d88:	08003e13 	.word	0x08003e13
 8003d8c:	08003e13 	.word	0x08003e13
 8003d90:	08003e13 	.word	0x08003e13
 8003d94:	08003e13 	.word	0x08003e13
 8003d98:	08003e13 	.word	0x08003e13
 8003d9c:	08003e13 	.word	0x08003e13
 8003da0:	08003e13 	.word	0x08003e13
 8003da4:	08003e13 	.word	0x08003e13
 8003da8:	08003dc1 	.word	0x08003dc1
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	4a79      	ldr	r2, [pc, #484]	; (8003f98 <HAL_GPIO_Init+0x2b4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003db6:	e02c      	b.n	8003e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	623b      	str	r3, [r7, #32]
          break;
 8003dbe:	e029      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	623b      	str	r3, [r7, #32]
          break;
 8003dc8:	e024      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	623b      	str	r3, [r7, #32]
          break;
 8003dd2:	e01f      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	623b      	str	r3, [r7, #32]
          break;
 8003ddc:	e01a      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003de6:	2304      	movs	r3, #4
 8003de8:	623b      	str	r3, [r7, #32]
          break;
 8003dea:	e013      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df4:	2308      	movs	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	611a      	str	r2, [r3, #16]
          break;
 8003dfe:	e009      	b.n	8003e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e00:	2308      	movs	r3, #8
 8003e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	615a      	str	r2, [r3, #20]
          break;
 8003e0a:	e003      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
          break;
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          break;
 8003e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2bff      	cmp	r3, #255	; 0xff
 8003e18:	d801      	bhi.n	8003e1e <HAL_GPIO_Init+0x13a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	e001      	b.n	8003e22 <HAL_GPIO_Init+0x13e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d802      	bhi.n	8003e30 <HAL_GPIO_Init+0x14c>
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	e002      	b.n	8003e36 <HAL_GPIO_Init+0x152>
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	3b08      	subs	r3, #8
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	401a      	ands	r2, r3
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80b1 	beq.w	8003fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6193      	str	r3, [r2, #24]
 8003e70:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_GPIO_Init+0x2bc>)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	3302      	adds	r3, #2
 8003e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <HAL_GPIO_Init+0x2c0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_GPIO_Init+0x1ec>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <HAL_GPIO_Init+0x2c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00d      	beq.n	8003ecc <HAL_GPIO_Init+0x1e8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <HAL_GPIO_Init+0x2c8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <HAL_GPIO_Init+0x1e4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <HAL_GPIO_Init+0x2cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_GPIO_Init+0x1e0>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e006      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	e004      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	f002 0203 	and.w	r2, r2, #3
 8003ed8:	0092      	lsls	r2, r2, #2
 8003eda:	4093      	lsls	r3, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ee2:	492f      	ldr	r1, [pc, #188]	; (8003fa0 <HAL_GPIO_Init+0x2bc>)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
 8003f08:	e006      	b.n	8003f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4928      	ldr	r1, [pc, #160]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4922      	ldr	r1, [pc, #136]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	491e      	ldr	r1, [pc, #120]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4918      	ldr	r1, [pc, #96]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	4914      	ldr	r1, [pc, #80]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d021      	beq.n	8003fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60cb      	str	r3, [r1, #12]
 8003f80:	e021      	b.n	8003fc6 <HAL_GPIO_Init+0x2e2>
 8003f82:	bf00      	nop
 8003f84:	10320000 	.word	0x10320000
 8003f88:	10310000 	.word	0x10310000
 8003f8c:	10220000 	.word	0x10220000
 8003f90:	10210000 	.word	0x10210000
 8003f94:	10120000 	.word	0x10120000
 8003f98:	10110000 	.word	0x10110000
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40010800 	.word	0x40010800
 8003fa8:	40010c00 	.word	0x40010c00
 8003fac:	40011000 	.word	0x40011000
 8003fb0:	40011400 	.word	0x40011400
 8003fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_GPIO_Init+0x304>)
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <HAL_GPIO_Init+0x304>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f47f ae8e 	bne.w	8003cf8 <HAL_GPIO_Init+0x14>
  }
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	372c      	adds	r7, #44	; 0x2c
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40010400 	.word	0x40010400

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004008:	e003      	b.n	8004012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	041a      	lsls	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401e:	b08f      	sub	sp, #60	; 0x3c
 8004020:	af0a      	add	r7, sp, #40	; 0x28
 8004022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e10f      	b.n	800424e <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f011 fa7f 	bl	801554c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2203      	movs	r2, #3
 8004052:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 fad5 	bl	800661c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	687e      	ldr	r6, [r7, #4]
 800407a:	466d      	mov	r5, sp
 800407c:	f106 0410 	add.w	r4, r6, #16
 8004080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800408c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004090:	1d33      	adds	r3, r6, #4
 8004092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004094:	6838      	ldr	r0, [r7, #0]
 8004096:	f002 f9f3 	bl	8006480 <USB_CoreInit>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0d0      	b.n	800424e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 fac2 	bl	800663c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e04a      	b.n	8004154 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	333d      	adds	r3, #61	; 0x3d
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	333c      	adds	r3, #60	; 0x3c
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	b298      	uxth	r0, r3
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3342      	adds	r3, #66	; 0x42
 80040fa:	4602      	mov	r2, r0
 80040fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	333f      	adds	r3, #63	; 0x3f
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3344      	adds	r3, #68	; 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3348      	adds	r3, #72	; 0x48
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3350      	adds	r3, #80	; 0x50
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	3301      	adds	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d3af      	bcc.n	80040be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	e044      	b.n	80041ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800418c:	7bfa      	ldrb	r2, [r7, #15]
 800418e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	3301      	adds	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3b5      	bcc.n	8004164 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	687e      	ldr	r6, [r7, #4]
 8004200:	466d      	mov	r5, sp
 8004202:	f106 0410 	add.w	r4, r6, #16
 8004206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800420a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800420c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800420e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004212:	e885 0003 	stmia.w	r5, {r0, r1}
 8004216:	1d33      	adds	r3, r6, #4
 8004218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800421a:	6838      	ldr	r0, [r7, #0]
 800421c:	f002 fa5a 	bl	80066d4 <USB_DevInit>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00d      	b.n	800424e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f003 f910 	bl	800746c <USB_DevDisconnect>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004256 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_PCD_Start+0x16>
 8004268:	2302      	movs	r3, #2
 800426a:	e012      	b.n	8004292 <HAL_PCD_Start+0x3c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f002 f9bf 	bl	80065fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f003 f8d2 	bl	800742c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_PCD_Stop+0x16>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e018      	b.n	80042e2 <HAL_PCD_Stop+0x48>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 f9ad 	bl	800661c <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 f8d0 	bl	800746c <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2110      	movs	r1, #16
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 fb2a 	bl	800692c <USB_FlushTxFifo>
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042ea:	b590      	push	{r4, r7, lr}
 80042ec:	b08d      	sub	sp, #52	; 0x34
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f003 f961 	bl	80075c8 <USB_GetMode>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 8354 	bne.w	80049b6 <HAL_PCD_IRQHandler+0x6cc>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f003 f8ca 	bl	80074ac <USB_ReadInterrupts>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 834a 	beq.w	80049b4 <HAL_PCD_IRQHandler+0x6ca>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f003 f8c1 	bl	80074ac <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d107      	bne.n	8004344 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f002 0202 	and.w	r2, r2, #2
 8004342:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f003 f8af 	bl	80074ac <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d161      	bne.n	800441c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0210 	bic.w	r2, r2, #16
 8004366:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	3304      	adds	r3, #4
 8004386:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	0c5b      	lsrs	r3, r3, #17
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	2b02      	cmp	r3, #2
 8004392:	d124      	bne.n	80043de <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d035      	beq.n	800440c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	6a38      	ldr	r0, [r7, #32]
 80043b4:	f002 feec 	bl	8007190 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c4:	441a      	add	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d6:	441a      	add	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	619a      	str	r2, [r3, #24]
 80043dc:	e016      	b.n	800440c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	0c5b      	lsrs	r3, r3, #17
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d110      	bne.n	800440c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043f0:	2208      	movs	r2, #8
 80043f2:	4619      	mov	r1, r3
 80043f4:	6a38      	ldr	r0, [r7, #32]
 80043f6:	f002 fecb 	bl	8007190 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004406:	441a      	add	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0210 	orr.w	r2, r2, #16
 800441a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f003 f843 	bl	80074ac <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004430:	d16e      	bne.n	8004510 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f003 f848 	bl	80074d0 <USB_ReadDevAllOutEpInterrupt>
 8004440:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004442:	e062      	b.n	800450a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d057      	beq.n	80044fe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f003 f86b 	bl	8007534 <USB_ReadDevOutEPInterrupt>
 800445e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	2301      	movs	r3, #1
 800447a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800447c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fce4 	bl	8004e4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	461a      	mov	r2, r3
 800449c:	2308      	movs	r3, #8
 800449e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fd20 	bl	8004ee8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	461a      	mov	r2, r3
 80044c0:	2310      	movs	r3, #16
 80044c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	2320      	movs	r3, #32
 80044de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	3301      	adds	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d199      	bne.n	8004444 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f002 ffc9 	bl	80074ac <USB_ReadInterrupts>
 800451a:	4603      	mov	r3, r0
 800451c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004524:	f040 8087 	bne.w	8004636 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f002 ffe8 	bl	8007502 <USB_ReadDevAllInEpInterrupt>
 8004532:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004538:	e07a      	b.n	8004630 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d06f      	beq.n	8004624 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f003 f80d 	bl	800756e <USB_ReadDevInEPInterrupt>
 8004554:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	69f9      	ldr	r1, [r7, #28]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	2301      	movs	r3, #1
 8004594:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f011 f848 	bl	8015632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	461a      	mov	r2, r3
 80045ba:	2308      	movs	r3, #8
 80045bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2310      	movs	r3, #16
 80045d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	461a      	mov	r2, r3
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	2302      	movs	r3, #2
 8004610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800461c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fb8c 	bl	8004d3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	3301      	adds	r3, #1
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d181      	bne.n	800453a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f002 ff36 	bl	80074ac <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464a:	d114      	bne.n	8004676 <HAL_PCD_IRQHandler+0x38c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f011 f853 	bl	801570c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f002 ff16 	bl	80074ac <USB_ReadInterrupts>
 8004680:	4603      	mov	r3, r0
 8004682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468a:	d112      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x3c8>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d102      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x3b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f011 f80f 	bl	80156c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046b0:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f002 fef8 	bl	80074ac <USB_ReadInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	f040 80c5 	bne.w	8004854 <HAL_PCD_IRQHandler+0x56a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2110      	movs	r1, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 f921 	bl	800692c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	e056      	b.n	800479e <HAL_PCD_IRQHandler+0x4b4>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	461a      	mov	r2, r3
 80046fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004702:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004722:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004742:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	461a      	mov	r2, r3
 8004752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004756:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004776:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004796:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	3301      	adds	r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3a3      	bcc.n	80046f0 <HAL_PCD_IRQHandler+0x406>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d016      	beq.n	80047f2 <HAL_PCD_IRQHandler+0x508>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d4:	f043 030b 	orr.w	r3, r3, #11
 80047d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ea:	f043 030b 	orr.w	r3, r3, #11
 80047ee:	6453      	str	r3, [r2, #68]	; 0x44
 80047f0:	e015      	b.n	800481e <HAL_PCD_IRQHandler+0x534>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004804:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004808:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004818:	f043 030b 	orr.w	r3, r3, #11
 800481c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004830:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f002 fef2 	bl	8007628 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f002 fe27 	bl	80074ac <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004868:	d124      	bne.n	80048b4 <HAL_PCD_IRQHandler+0x5ca>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f002 feb7 	bl	80075e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f002 f8b3 	bl	80069e4 <USB_GetDevSpeed>
 800487e:	4603      	mov	r3, r0
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681c      	ldr	r4, [r3, #0]
 800488a:	f001 f8c9 	bl	8005a20 <HAL_RCC_GetHCLKFreq>
 800488e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	4620      	mov	r0, r4
 800489a:	f001 fe13 	bl	80064c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f010 feef 	bl	8015682 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f002 fdf7 	bl	80074ac <USB_ReadInterrupts>
 80048be:	4603      	mov	r3, r0
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d10a      	bne.n	80048de <HAL_PCD_IRQHandler+0x5f4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f010 fecc 	bl	8015666 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f002 0208 	and.w	r2, r2, #8
 80048dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f002 fde2 	bl	80074ac <USB_ReadInterrupts>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f2:	d10f      	bne.n	8004914 <HAL_PCD_IRQHandler+0x62a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f010 ff24 	bl	801574c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f002 fdc7 	bl	80074ac <USB_ReadInterrupts>
 800491e:	4603      	mov	r3, r0
 8004920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004928:	d10f      	bne.n	800494a <HAL_PCD_IRQHandler+0x660>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f010 fef7 	bl	8015728 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fdac 	bl	80074ac <USB_ReadInterrupts>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800495a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495e:	d10a      	bne.n	8004976 <HAL_PCD_IRQHandler+0x68c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f010 ff05 	bl	8015770 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f002 fd96 	bl	80074ac <USB_ReadInterrupts>
 8004980:	4603      	mov	r3, r0
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d115      	bne.n	80049b6 <HAL_PCD_IRQHandler+0x6cc>
    {
      temp = hpcd->Instance->GOTGINT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_PCD_IRQHandler+0x6b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f010 fef5 	bl	801578c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	e000      	b.n	80049b6 <HAL_PCD_IRQHandler+0x6cc>
      return;
 80049b4:	bf00      	nop
    }
  }
}
 80049b6:	3734      	adds	r7, #52	; 0x34
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}

080049bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_PCD_SetAddress+0x1a>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e013      	b.n	80049fe <HAL_PCD_SetAddress+0x42>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f002 fcf7 	bl	80073e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	4608      	mov	r0, r1
 8004a10:	4611      	mov	r1, r2
 8004a12:	461a      	mov	r2, r3
 8004a14:	4603      	mov	r3, r0
 8004a16:	70fb      	strb	r3, [r7, #3]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	803b      	strh	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da0f      	bge.n	8004a4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	3338      	adds	r3, #56	; 0x38
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	3304      	adds	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	705a      	strb	r2, [r3, #1]
 8004a4a:	e00f      	b.n	8004a6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	f003 020f 	and.w	r2, r3, #15
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	3304      	adds	r3, #4
 8004a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a78:	883a      	ldrh	r2, [r7, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	78ba      	ldrb	r2, [r7, #2]
 8004a82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a96:	78bb      	ldrb	r3, [r7, #2]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d102      	bne.n	8004aa2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_PCD_EP_Open+0xaa>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e00e      	b.n	8004ace <HAL_PCD_EP_Open+0xc8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68f9      	ldr	r1, [r7, #12]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 ffae 	bl	8006a20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004acc:	7afb      	ldrb	r3, [r7, #11]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae6:	7afb      	ldrb	r3, [r7, #11]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	3304      	adds	r3, #4
 8004afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b18:	7afb      	ldrb	r3, [r7, #11]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f002 f9d5 	bl	8006ee4 <USB_EP0StartXfer>
 8004b3a:	e005      	b.n	8004b48 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6979      	ldr	r1, [r7, #20]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 fff2 	bl	8006b2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	f003 020f 	and.w	r2, r3, #15
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	3338      	adds	r3, #56	; 0x38
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	3304      	adds	r3, #4
 8004b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6979      	ldr	r1, [r7, #20]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 f998 	bl	8006ee4 <USB_EP0StartXfer>
 8004bb4:	e005      	b.n	8004bc2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 ffb5 	bl	8006b2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d901      	bls.n	8004bea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e04e      	b.n	8004c88 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da0f      	bge.n	8004c12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f003 020f 	and.w	r2, r3, #15
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	3338      	adds	r3, #56	; 0x38
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	3304      	adds	r3, #4
 8004c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	705a      	strb	r2, [r3, #1]
 8004c10:	e00d      	b.n	8004c2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4413      	add	r3, r2
 8004c24:	3304      	adds	r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_PCD_EP_SetStall+0x82>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e01c      	b.n	8004c88 <HAL_PCD_EP_SetStall+0xbc>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f002 faee 	bl	800723e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d108      	bne.n	8004c7e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f002 fcd5 	bl	8007628 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d901      	bls.n	8004cae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e042      	b.n	8004d34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da0f      	bge.n	8004cd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3338      	adds	r3, #56	; 0x38
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3304      	adds	r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	705a      	strb	r2, [r3, #1]
 8004cd4:	e00f      	b.n	8004cf6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	3304      	adds	r3, #4
 8004cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_PCD_EP_ClrStall+0x86>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e00e      	b.n	8004d34 <HAL_PCD_EP_ClrStall+0xa4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 faf7 	bl	8007318 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	3338      	adds	r3, #56	; 0x38
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4413      	add	r3, r2
 8004d60:	3304      	adds	r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d901      	bls.n	8004d74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e067      	b.n	8004e44 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d902      	bls.n	8004d90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3303      	adds	r3, #3
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d98:	e026      	b.n	8004de8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d902      	bls.n	8004db6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3303      	adds	r3, #3
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68d9      	ldr	r1, [r3, #12]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	6978      	ldr	r0, [r7, #20]
 8004dcc:	f002 f9a7 	bl	800711e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	441a      	add	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d809      	bhi.n	8004e12 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d203      	bcs.n	8004e12 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1c3      	bne.n	8004d9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d811      	bhi.n	8004e42 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2201      	movs	r2, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	6939      	ldr	r1, [r7, #16]
 8004e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e3e:	4013      	ands	r3, r2
 8004e40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	333c      	adds	r3, #60	; 0x3c
 8004e64:	3304      	adds	r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <PCD_EP_OutXfrComplete_int+0x98>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d124      	bne.n	8004ecc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	6093      	str	r3, [r2, #8]
 8004ea0:	e01a      	b.n	8004ed8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2320      	movs	r3, #32
 8004ebc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f010 fb99 	bl	80155fc <HAL_PCD_DataOutStageCallback>
 8004eca:	e005      	b.n	8004ed8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f010 fb92 	bl	80155fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	4f54310a 	.word	0x4f54310a

08004ee8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	333c      	adds	r3, #60	; 0x3c
 8004f00:	3304      	adds	r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <PCD_EP_OutSetupPacket_int+0x64>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d90e      	bls.n	8004f3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f010 fb4b 	bl	80155d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	4f54300a 	.word	0x4f54300a

08004f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f6e:	883b      	ldrh	r3, [r7, #0]
 8004f70:	0419      	lsls	r1, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f7c:	e028      	b.n	8004fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e00d      	b.n	8004fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	3340      	adds	r3, #64	; 0x40
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	3301      	adds	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3ec      	bcc.n	8004f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fb8:	883b      	ldrh	r3, [r7, #0]
 8004fba:	0418      	lsls	r0, r3, #16
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4302      	orrs	r2, r0
 8004fc8:	3340      	adds	r3, #64	; 0x40
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	887a      	ldrh	r2, [r7, #2]
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e304      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8087 	beq.w	800512a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800501c:	4b92      	ldr	r3, [pc, #584]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b04      	cmp	r3, #4
 8005026:	d00c      	beq.n	8005042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005028:	4b8f      	ldr	r3, [pc, #572]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b08      	cmp	r3, #8
 8005032:	d112      	bne.n	800505a <HAL_RCC_OscConfig+0x5e>
 8005034:	4b8c      	ldr	r3, [pc, #560]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d10b      	bne.n	800505a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005042:	4b89      	ldr	r3, [pc, #548]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d06c      	beq.n	8005128 <HAL_RCC_OscConfig+0x12c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d168      	bne.n	8005128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e2de      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x76>
 8005064:	4b80      	ldr	r3, [pc, #512]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7f      	ldr	r2, [pc, #508]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e02e      	b.n	80050d0 <HAL_RCC_OscConfig+0xd4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x98>
 800507a:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7a      	ldr	r2, [pc, #488]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b78      	ldr	r3, [pc, #480]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a77      	ldr	r2, [pc, #476]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800508c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e01d      	b.n	80050d0 <HAL_RCC_OscConfig+0xd4>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0xbc>
 800509e:	4b72      	ldr	r3, [pc, #456]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a71      	ldr	r2, [pc, #452]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	4b6f      	ldr	r3, [pc, #444]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6e      	ldr	r2, [pc, #440]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e00b      	b.n	80050d0 <HAL_RCC_OscConfig+0xd4>
 80050b8:	4b6b      	ldr	r3, [pc, #428]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6a      	ldr	r2, [pc, #424]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	4b68      	ldr	r3, [pc, #416]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a67      	ldr	r2, [pc, #412]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d013      	beq.n	8005100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fd f89c 	bl	8002214 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fd f898 	bl	8002214 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	; 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e292      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b5d      	ldr	r3, [pc, #372]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe4>
 80050fe:	e014      	b.n	800512a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fd f888 	bl	8002214 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fd f884 	bl	8002214 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e27e      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511a:	4b53      	ldr	r3, [pc, #332]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x10c>
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d063      	beq.n	80051fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005136:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005142:	4b49      	ldr	r3, [pc, #292]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b08      	cmp	r3, #8
 800514c:	d11c      	bne.n	8005188 <HAL_RCC_OscConfig+0x18c>
 800514e:	4b46      	ldr	r3, [pc, #280]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d116      	bne.n	8005188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	4b43      	ldr	r3, [pc, #268]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_RCC_OscConfig+0x176>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e252      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005172:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4939      	ldr	r1, [pc, #228]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005186:	e03a      	b.n	80051fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <HAL_RCC_OscConfig+0x270>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fd f83d 	bl	8002214 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519e:	f7fd f839 	bl	8002214 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e233      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b0:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4927      	ldr	r1, [pc, #156]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]
 80051d0:	e015      	b.n	80051fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d2:	4b26      	ldr	r3, [pc, #152]	; (800526c <HAL_RCC_OscConfig+0x270>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fd f81c 	bl	8002214 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fd f818 	bl	8002214 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e212      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f2:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03a      	beq.n	8005280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d019      	beq.n	8005246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005218:	f7fc fffc 	bl	8002214 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005220:	f7fc fff8 	bl	8002214 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1f2      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800523e:	2001      	movs	r0, #1
 8005240:	f000 fc0c 	bl	8005a5c <RCC_Delay>
 8005244:	e01c      	b.n	8005280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524c:	f7fc ffe2 	bl	8002214 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005252:	e00f      	b.n	8005274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005254:	f7fc ffde 	bl	8002214 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d908      	bls.n	8005274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1d8      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	42420000 	.word	0x42420000
 8005270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005274:	4b9b      	ldr	r3, [pc, #620]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e9      	bne.n	8005254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a6 	beq.w	80053da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005292:	4b94      	ldr	r3, [pc, #592]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	4b91      	ldr	r3, [pc, #580]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4a90      	ldr	r2, [pc, #576]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	61d3      	str	r3, [r2, #28]
 80052aa:	4b8e      	ldr	r3, [pc, #568]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ba:	4b8b      	ldr	r3, [pc, #556]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d118      	bne.n	80052f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c6:	4b88      	ldr	r3, [pc, #544]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a87      	ldr	r2, [pc, #540]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d2:	f7fc ff9f 	bl	8002214 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052da:	f7fc ff9b 	bl	8002214 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b64      	cmp	r3, #100	; 0x64
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e195      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	4b7e      	ldr	r3, [pc, #504]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x312>
 8005300:	4b78      	ldr	r3, [pc, #480]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4a77      	ldr	r2, [pc, #476]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6213      	str	r3, [r2, #32]
 800530c:	e02d      	b.n	800536a <HAL_RCC_OscConfig+0x36e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x334>
 8005316:	4b73      	ldr	r3, [pc, #460]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4a72      	ldr	r2, [pc, #456]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	6213      	str	r3, [r2, #32]
 8005322:	4b70      	ldr	r3, [pc, #448]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a6f      	ldr	r2, [pc, #444]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	e01c      	b.n	800536a <HAL_RCC_OscConfig+0x36e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b05      	cmp	r3, #5
 8005336:	d10c      	bne.n	8005352 <HAL_RCC_OscConfig+0x356>
 8005338:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a69      	ldr	r2, [pc, #420]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	6213      	str	r3, [r2, #32]
 8005344:	4b67      	ldr	r3, [pc, #412]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4a66      	ldr	r2, [pc, #408]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	6213      	str	r3, [r2, #32]
 8005350:	e00b      	b.n	800536a <HAL_RCC_OscConfig+0x36e>
 8005352:	4b64      	ldr	r3, [pc, #400]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4a63      	ldr	r2, [pc, #396]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6213      	str	r3, [r2, #32]
 800535e:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a60      	ldr	r2, [pc, #384]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d015      	beq.n	800539e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005372:	f7fc ff4f 	bl	8002214 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fc ff4b 	bl	8002214 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	; 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e143      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005390:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ee      	beq.n	800537a <HAL_RCC_OscConfig+0x37e>
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539e:	f7fc ff39 	bl	8002214 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fc ff35 	bl	8002214 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e12d      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053bc:	4b49      	ldr	r3, [pc, #292]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ee      	bne.n	80053a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d105      	bne.n	80053da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ce:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808c 	beq.w	80054fc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80053e4:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d10e      	bne.n	8005410 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80053f2:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d108      	bne.n	8005410 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80053fe:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d101      	bne.n	8005410 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e103      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2b02      	cmp	r3, #2
 8005416:	d14e      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005418:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005424:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0ef      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005438:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <HAL_RCC_OscConfig+0x4f0>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fc fee9 	bl	8002214 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005446:	f7fc fee5 	bl	8002214 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b64      	cmp	r3, #100	; 0x64
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0df      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005458:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	491c      	ldr	r1, [pc, #112]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	4918      	ldr	r1, [pc, #96]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005484:	4313      	orrs	r3, r2
 8005486:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005488:	4b18      	ldr	r3, [pc, #96]	; (80054ec <HAL_RCC_OscConfig+0x4f0>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fc fec1 	bl	8002214 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005496:	f7fc febd 	bl	8002214 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0b7      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054a8:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x49a>
 80054b4:	e022      	b.n	80054fc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <HAL_RCC_OscConfig+0x4f0>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc fea4 	bl	8002214 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80054ce:	e00f      	b.n	80054f0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054d0:	f7fc fea0 	bl	8002214 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	; 0x64
 80054dc:	d908      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e09a      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40007000 	.word	0x40007000
 80054ec:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80054f0:	4b4b      	ldr	r3, [pc, #300]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e9      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8088 	beq.w	8005616 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005506:	4b46      	ldr	r3, [pc, #280]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b08      	cmp	r3, #8
 8005510:	d068      	beq.n	80055e4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d14d      	bne.n	80055b6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b42      	ldr	r3, [pc, #264]	; (8005624 <HAL_RCC_OscConfig+0x628>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fc fe78 	bl	8002214 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fc fe74 	bl	8002214 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e06e      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554e:	d10f      	bne.n	8005570 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005550:	4b33      	ldr	r3, [pc, #204]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4931      	ldr	r1, [pc, #196]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 800555a:	4313      	orrs	r3, r2
 800555c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800555e:	4b30      	ldr	r3, [pc, #192]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f023 020f 	bic.w	r2, r3, #15
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	492d      	ldr	r1, [pc, #180]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 800556c:	4313      	orrs	r3, r2
 800556e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	430b      	orrs	r3, r1
 8005582:	4927      	ldr	r1, [pc, #156]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005588:	4b26      	ldr	r3, [pc, #152]	; (8005624 <HAL_RCC_OscConfig+0x628>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7fc fe41 	bl	8002214 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005596:	f7fc fe3d 	bl	8002214 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e037      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x59a>
 80055b4:	e02f      	b.n	8005616 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <HAL_RCC_OscConfig+0x628>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fc fe2a 	bl	8002214 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fc fe26 	bl	8002214 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e020      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c8>
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e013      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_OscConfig+0x624>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	429a      	cmp	r2, r3
 8005602:	d106      	bne.n	8005612 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	42420060 	.word	0x42420060

08005628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0d0      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	4b6a      	ldr	r3, [pc, #424]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d910      	bls.n	800566c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b67      	ldr	r3, [pc, #412]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 0207 	bic.w	r2, r3, #7
 8005652:	4965      	ldr	r1, [pc, #404]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b63      	ldr	r3, [pc, #396]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0b8      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d020      	beq.n	80056ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005684:	4b59      	ldr	r3, [pc, #356]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a58      	ldr	r2, [pc, #352]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 800568a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800568e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800569c:	4b53      	ldr	r3, [pc, #332]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a52      	ldr	r2, [pc, #328]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a8:	4b50      	ldr	r3, [pc, #320]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	494d      	ldr	r1, [pc, #308]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d040      	beq.n	8005748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ce:	4b47      	ldr	r3, [pc, #284]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d115      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e07f      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e6:	4b41      	ldr	r3, [pc, #260]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e073      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f6:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e06b      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005706:	4b39      	ldr	r3, [pc, #228]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f023 0203 	bic.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4936      	ldr	r1, [pc, #216]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005718:	f7fc fd7c 	bl	8002214 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	e00a      	b.n	8005736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005720:	f7fc fd78 	bl	8002214 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	; 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e053      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 020c 	and.w	r2, r3, #12
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	429a      	cmp	r2, r3
 8005746:	d1eb      	bne.n	8005720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d210      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 0207 	bic.w	r2, r3, #7
 800575e:	4922      	ldr	r1, [pc, #136]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e032      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4916      	ldr	r1, [pc, #88]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	490e      	ldr	r1, [pc, #56]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057b6:	f000 f821 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	490a      	ldr	r1, [pc, #40]	; (80057f0 <HAL_RCC_ClockConfig+0x1c8>)
 80057c8:	5ccb      	ldrb	r3, [r1, r3]
 80057ca:	fa22 f303 	lsr.w	r3, r2, r3
 80057ce:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <HAL_RCC_ClockConfig+0x1cc>)
 80057d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_ClockConfig+0x1d0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fc fcda 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40022000 	.word	0x40022000
 80057ec:	40021000 	.word	0x40021000
 80057f0:	08017574 	.word	0x08017574
 80057f4:	2000004c 	.word	0x2000004c
 80057f8:	20000050 	.word	0x20000050

080057fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	b09d      	sub	sp, #116	; 0x74
 8005802:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005804:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x210>)
 8005806:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800580a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800580c:	c407      	stmia	r4!, {r0, r1, r2}
 800580e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005810:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x214>)
 8005812:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	667b      	str	r3, [r7, #100]	; 0x64
 8005820:	2300      	movs	r3, #0
 8005822:	663b      	str	r3, [r7, #96]	; 0x60
 8005824:	2300      	movs	r3, #0
 8005826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005828:	2300      	movs	r3, #0
 800582a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	65bb      	str	r3, [r7, #88]	; 0x58
 8005834:	2300      	movs	r3, #0
 8005836:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005838:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x218>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800583e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b04      	cmp	r3, #4
 8005846:	d002      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0x52>
 8005848:	2b08      	cmp	r3, #8
 800584a:	d003      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x58>
 800584c:	e0d4      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800584e:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x21c>)
 8005850:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8005852:	e0d4      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005856:	0c9b      	lsrs	r3, r3, #18
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	3340      	adds	r3, #64	; 0x40
 800585e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005862:	4413      	add	r3, r2
 8005864:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005868:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800586a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80b9 	beq.w	80059e8 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005876:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x218>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	3340      	adds	r3, #64	; 0x40
 8005880:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005884:	4413      	add	r3, r2
 8005886:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800588a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800588c:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x218>)
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8095 	beq.w	80059c4 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800589a:	4b5e      	ldr	r3, [pc, #376]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x218>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	3301      	adds	r3, #1
 80058a6:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80058a8:	4b5a      	ldr	r3, [pc, #360]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x218>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	3302      	adds	r3, #2
 80058b4:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80058b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b8:	2200      	movs	r2, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	61fa      	str	r2, [r7, #28]
 80058be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c0:	2200      	movs	r2, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80058ca:	4622      	mov	r2, r4
 80058cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058d0:	4684      	mov	ip, r0
 80058d2:	fb0c f202 	mul.w	r2, ip, r2
 80058d6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80058da:	468c      	mov	ip, r1
 80058dc:	4618      	mov	r0, r3
 80058de:	4621      	mov	r1, r4
 80058e0:	4603      	mov	r3, r0
 80058e2:	fb03 f30c 	mul.w	r3, r3, ip
 80058e6:	4413      	add	r3, r2
 80058e8:	4602      	mov	r2, r0
 80058ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ec:	fba2 8901 	umull	r8, r9, r2, r1
 80058f0:	444b      	add	r3, r9
 80058f2:	4699      	mov	r9, r3
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	f04f 0000 	mov.w	r0, #0
 80058fc:	f04f 0100 	mov.w	r1, #0
 8005900:	0159      	lsls	r1, r3, #5
 8005902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005906:	0150      	lsls	r0, r2, #5
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	ebb2 0508 	subs.w	r5, r2, r8
 8005910:	eb63 0609 	sbc.w	r6, r3, r9
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	01b3      	lsls	r3, r6, #6
 800591e:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8005922:	01aa      	lsls	r2, r5, #6
 8005924:	ebb2 0a05 	subs.w	sl, r2, r5
 8005928:	eb63 0b06 	sbc.w	fp, r3, r6
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800593c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005940:	4692      	mov	sl, r2
 8005942:	469b      	mov	fp, r3
 8005944:	eb1a 0308 	adds.w	r3, sl, r8
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	eb4b 0309 	adc.w	r3, fp, r9
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 4500 	ldrd	r4, r5, [r7]
 800595c:	4629      	mov	r1, r5
 800595e:	024b      	lsls	r3, r1, #9
 8005960:	4620      	mov	r0, r4
 8005962:	4629      	mov	r1, r5
 8005964:	4604      	mov	r4, r0
 8005966:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800596a:	4601      	mov	r1, r0
 800596c:	024a      	lsls	r2, r1, #9
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005974:	2200      	movs	r2, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	617a      	str	r2, [r7, #20]
 800597a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800597c:	2200      	movs	r2, #0
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	60fa      	str	r2, [r7, #12]
 8005982:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005986:	4622      	mov	r2, r4
 8005988:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800598c:	4645      	mov	r5, r8
 800598e:	fb05 f202 	mul.w	r2, r5, r2
 8005992:	464e      	mov	r6, r9
 8005994:	4625      	mov	r5, r4
 8005996:	461c      	mov	r4, r3
 8005998:	4623      	mov	r3, r4
 800599a:	fb03 f306 	mul.w	r3, r3, r6
 800599e:	4413      	add	r3, r2
 80059a0:	4622      	mov	r2, r4
 80059a2:	4644      	mov	r4, r8
 80059a4:	fba2 2404 	umull	r2, r4, r2, r4
 80059a8:	627c      	str	r4, [r7, #36]	; 0x24
 80059aa:	623a      	str	r2, [r7, #32]
 80059ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ae:	4413      	add	r3, r2
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059b6:	f7fb f8e7 	bl	8000b88 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4613      	mov	r3, r2
 80059c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059c2:	e007      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80059c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x21c>)
 80059c8:	fb03 f202 	mul.w	r2, r3, r2
 80059cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80059d4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80059d8:	461a      	mov	r2, r3
 80059da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059dc:	4293      	cmp	r3, r2
 80059de:	d108      	bne.n	80059f2 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80059e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e6:	e004      	b.n	80059f2 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x220>)
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80059f6:	e002      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x21c>)
 80059fa:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80059fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3774      	adds	r7, #116	; 0x74
 8005a04:	46bd      	mov	sp, r7
 8005a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08016ee4 	.word	0x08016ee4
 8005a10:	08016ef4 	.word	0x08016ef4
 8005a14:	40021000 	.word	0x40021000
 8005a18:	007a1200 	.word	0x007a1200
 8005a1c:	003d0900 	.word	0x003d0900

08005a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a24:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a26:	681b      	ldr	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr
 8005a30:	2000004c 	.word	0x2000004c

08005a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a38:	f7ff fff2 	bl	8005a20 <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	; (8005a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40021000 	.word	0x40021000
 8005a58:	08017584 	.word	0x08017584

08005a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <RCC_Delay+0x34>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <RCC_Delay+0x38>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0a5b      	lsrs	r3, r3, #9
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a78:	bf00      	nop
  }
  while (Delay --);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	60fa      	str	r2, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <RCC_Delay+0x1c>
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	2000004c 	.word	0x2000004c
 8005a94:	10624dd3 	.word	0x10624dd3

08005a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d07d      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005abc:	4b8b      	ldr	r3, [pc, #556]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	4a87      	ldr	r2, [pc, #540]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	61d3      	str	r3, [r2, #28]
 8005ad4:	4b85      	ldr	r3, [pc, #532]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	4b82      	ldr	r3, [pc, #520]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d118      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005af0:	4b7f      	ldr	r3, [pc, #508]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7e      	ldr	r2, [pc, #504]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afc:	f7fc fb8a 	bl	8002214 <HAL_GetTick>
 8005b00:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	e008      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b04:	f7fc fb86 	bl	8002214 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b64      	cmp	r3, #100	; 0x64
 8005b10:	d901      	bls.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0e5      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b16:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b22:	4b72      	ldr	r3, [pc, #456]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d02e      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d027      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b40:	4b6a      	ldr	r3, [pc, #424]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b48:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b4a:	4b6a      	ldr	r3, [pc, #424]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b50:	4b68      	ldr	r3, [pc, #416]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b56:	4a65      	ldr	r2, [pc, #404]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d014      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fc fb55 	bl	8002214 <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fc fb51 	bl	8002214 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0ae      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ee      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b90:	4b56      	ldr	r3, [pc, #344]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4953      	ldr	r1, [pc, #332]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ba2:	7efb      	ldrb	r3, [r7, #27]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba8:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4a4f      	ldr	r2, [pc, #316]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bc0:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4947      	ldr	r1, [pc, #284]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d008      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005bde:	4b43      	ldr	r3, [pc, #268]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	4940      	ldr	r1, [pc, #256]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	4938      	ldr	r1, [pc, #224]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005c0e:	4b37      	ldr	r3, [pc, #220]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005c1a:	4b34      	ldr	r3, [pc, #208]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d148      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005c30:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d138      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005c48:	4b28      	ldr	r3, [pc, #160]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e042      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005c5c:	4b23      	ldr	r3, [pc, #140]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4920      	ldr	r1, [pc, #128]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005c6e:	4b1f      	ldr	r3, [pc, #124]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	491c      	ldr	r1, [pc, #112]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005c80:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c86:	f7fc fac5 	bl	8002214 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c8e:	f7fc fac1 	bl	8002214 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b64      	cmp	r3, #100	; 0x64
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e020      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005cac:	e009      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d001      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e00f      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	4904      	ldr	r1, [pc, #16]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	42420440 	.word	0x42420440
 8005cf8:	42420070 	.word	0x42420070

08005cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e041      	b.n	8005d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fc f882 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 fa26 	bl	800618c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d122      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d11b      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0202 	mvn.w	r2, #2
 8005dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f9ba 	bl	8006156 <HAL_TIM_IC_CaptureCallback>
 8005de2:	e005      	b.n	8005df0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9ad 	bl	8006144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9bc 	bl	8006168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d122      	bne.n	8005e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d11b      	bne.n	8005e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f06f 0204 	mvn.w	r2, #4
 8005e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f990 	bl	8006156 <HAL_TIM_IC_CaptureCallback>
 8005e36:	e005      	b.n	8005e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f983 	bl	8006144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f992 	bl	8006168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d122      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d11b      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0208 	mvn.w	r2, #8
 8005e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f966 	bl	8006156 <HAL_TIM_IC_CaptureCallback>
 8005e8a:	e005      	b.n	8005e98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f959 	bl	8006144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f968 	bl	8006168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d122      	bne.n	8005ef2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d11b      	bne.n	8005ef2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f06f 0210 	mvn.w	r2, #16
 8005ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f93c 	bl	8006156 <HAL_TIM_IC_CaptureCallback>
 8005ede:	e005      	b.n	8005eec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f92f 	bl	8006144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f93e 	bl	8006168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f06f 0201 	mvn.w	r2, #1
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f90a 	bl	8006132 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d10e      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa92 	bl	800646e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f902 	bl	800617a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d10e      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0220 	mvn.w	r2, #32
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa5d 	bl	800645c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_ConfigClockSource+0x18>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0b3      	b.n	800612a <HAL_TIM_ConfigClockSource+0x180>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fe0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fe8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffa:	d03e      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xd0>
 8005ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006000:	f200 8087 	bhi.w	8006112 <HAL_TIM_ConfigClockSource+0x168>
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	f000 8085 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x16c>
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	d87f      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 8006012:	2b70      	cmp	r3, #112	; 0x70
 8006014:	d01a      	beq.n	800604c <HAL_TIM_ConfigClockSource+0xa2>
 8006016:	2b70      	cmp	r3, #112	; 0x70
 8006018:	d87b      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 800601a:	2b60      	cmp	r3, #96	; 0x60
 800601c:	d050      	beq.n	80060c0 <HAL_TIM_ConfigClockSource+0x116>
 800601e:	2b60      	cmp	r3, #96	; 0x60
 8006020:	d877      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 8006022:	2b50      	cmp	r3, #80	; 0x50
 8006024:	d03c      	beq.n	80060a0 <HAL_TIM_ConfigClockSource+0xf6>
 8006026:	2b50      	cmp	r3, #80	; 0x50
 8006028:	d873      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d058      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x136>
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d86f      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 8006032:	2b30      	cmp	r3, #48	; 0x30
 8006034:	d064      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0x156>
 8006036:	2b30      	cmp	r3, #48	; 0x30
 8006038:	d86b      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 800603a:	2b20      	cmp	r3, #32
 800603c:	d060      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0x156>
 800603e:	2b20      	cmp	r3, #32
 8006040:	d867      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d05c      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0x156>
 8006046:	2b10      	cmp	r3, #16
 8006048:	d05a      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800604a:	e062      	b.n	8006112 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6899      	ldr	r1, [r3, #8]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f000 f979 	bl	8006352 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800606e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	609a      	str	r2, [r3, #8]
      break;
 8006078:	e04e      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f000 f962 	bl	8006352 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800609c:	609a      	str	r2, [r3, #8]
      break;
 800609e:	e03b      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6859      	ldr	r1, [r3, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f000 f8d9 	bl	8006264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2150      	movs	r1, #80	; 0x50
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f930 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80060be:	e02b      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f000 f8f7 	bl	80062c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2160      	movs	r1, #96	; 0x60
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 f920 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80060de:	e01b      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	461a      	mov	r2, r3
 80060ee:	f000 f8b9 	bl	8006264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2140      	movs	r1, #64	; 0x40
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f910 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80060fe:	e00b      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f000 f907 	bl	800631e <TIM_ITRx_SetConfig>
        break;
 8006110:	e002      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a2d      	ldr	r2, [pc, #180]	; (8006254 <TIM_Base_SetConfig+0xc8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00f      	beq.n	80061c4 <TIM_Base_SetConfig+0x38>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d00b      	beq.n	80061c4 <TIM_Base_SetConfig+0x38>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a2a      	ldr	r2, [pc, #168]	; (8006258 <TIM_Base_SetConfig+0xcc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_Base_SetConfig+0x38>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a29      	ldr	r2, [pc, #164]	; (800625c <TIM_Base_SetConfig+0xd0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_Base_SetConfig+0x38>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a28      	ldr	r2, [pc, #160]	; (8006260 <TIM_Base_SetConfig+0xd4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d108      	bne.n	80061d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <TIM_Base_SetConfig+0xc8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_Base_SetConfig+0x72>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0x72>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <TIM_Base_SetConfig+0xcc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0x72>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1a      	ldr	r2, [pc, #104]	; (800625c <TIM_Base_SetConfig+0xd0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0x72>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <TIM_Base_SetConfig+0xd4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a07      	ldr	r2, [pc, #28]	; (8006254 <TIM_Base_SetConfig+0xc8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d103      	bne.n	8006244 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	615a      	str	r2, [r3, #20]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00

08006264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0201 	bic.w	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 030a 	bic.w	r3, r3, #10
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f023 0210 	bic.w	r2, r3, #16
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	031b      	lsls	r3, r3, #12
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	621a      	str	r2, [r3, #32]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	f043 0307 	orr.w	r3, r3, #7
 8006340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800636c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	431a      	orrs	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	609a      	str	r2, [r3, #8]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e04b      	b.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a19      	ldr	r2, [pc, #100]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d00e      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a15      	ldr	r2, [pc, #84]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d009      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a13      	ldr	r2, [pc, #76]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a12      	ldr	r2, [pc, #72]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d10c      	bne.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00

0800645c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr

0800646e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006480:	b084      	sub	sp, #16
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	f107 001c 	add.w	r0, r7, #28
 800648e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 f90a 	bl	80076b8 <USB_CoreReset>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c0:	b004      	add	sp, #16
 80064c2:	4770      	bx	lr

080064c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d165      	bne.n	80065a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a3e      	ldr	r2, [pc, #248]	; (80065d4 <USB_SetTurnaroundTime+0x110>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d906      	bls.n	80064ee <USB_SetTurnaroundTime+0x2a>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a3d      	ldr	r2, [pc, #244]	; (80065d8 <USB_SetTurnaroundTime+0x114>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d202      	bcs.n	80064ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064e8:	230f      	movs	r3, #15
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e05c      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a39      	ldr	r2, [pc, #228]	; (80065d8 <USB_SetTurnaroundTime+0x114>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d306      	bcc.n	8006504 <USB_SetTurnaroundTime+0x40>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a38      	ldr	r2, [pc, #224]	; (80065dc <USB_SetTurnaroundTime+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d202      	bcs.n	8006504 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064fe:	230e      	movs	r3, #14
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e051      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a35      	ldr	r2, [pc, #212]	; (80065dc <USB_SetTurnaroundTime+0x118>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d306      	bcc.n	800651a <USB_SetTurnaroundTime+0x56>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a34      	ldr	r2, [pc, #208]	; (80065e0 <USB_SetTurnaroundTime+0x11c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d202      	bcs.n	800651a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006514:	230d      	movs	r3, #13
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e046      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <USB_SetTurnaroundTime+0x11c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d306      	bcc.n	8006530 <USB_SetTurnaroundTime+0x6c>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <USB_SetTurnaroundTime+0x120>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d802      	bhi.n	8006530 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800652a:	230c      	movs	r3, #12
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e03b      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <USB_SetTurnaroundTime+0x120>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d906      	bls.n	8006546 <USB_SetTurnaroundTime+0x82>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <USB_SetTurnaroundTime+0x124>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d802      	bhi.n	8006546 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006540:	230b      	movs	r3, #11
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e030      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <USB_SetTurnaroundTime+0x124>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d906      	bls.n	800655c <USB_SetTurnaroundTime+0x98>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a26      	ldr	r2, [pc, #152]	; (80065ec <USB_SetTurnaroundTime+0x128>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d802      	bhi.n	800655c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006556:	230a      	movs	r3, #10
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e025      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a23      	ldr	r2, [pc, #140]	; (80065ec <USB_SetTurnaroundTime+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d906      	bls.n	8006572 <USB_SetTurnaroundTime+0xae>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <USB_SetTurnaroundTime+0x12c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d202      	bcs.n	8006572 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800656c:	2309      	movs	r3, #9
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e01a      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <USB_SetTurnaroundTime+0x12c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d306      	bcc.n	8006588 <USB_SetTurnaroundTime+0xc4>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <USB_SetTurnaroundTime+0x130>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d802      	bhi.n	8006588 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006582:	2308      	movs	r3, #8
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e00f      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a1a      	ldr	r2, [pc, #104]	; (80065f4 <USB_SetTurnaroundTime+0x130>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d906      	bls.n	800659e <USB_SetTurnaroundTime+0xda>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <USB_SetTurnaroundTime+0x134>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d202      	bcs.n	800659e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006598:	2307      	movs	r3, #7
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e004      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800659e:	2306      	movs	r3, #6
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e001      	b.n	80065a8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065a4:	2309      	movs	r3, #9
 80065a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	029b      	lsls	r3, r3, #10
 80065bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	00d8acbf 	.word	0x00d8acbf
 80065d8:	00e4e1c0 	.word	0x00e4e1c0
 80065dc:	00f42400 	.word	0x00f42400
 80065e0:	01067380 	.word	0x01067380
 80065e4:	011a499f 	.word	0x011a499f
 80065e8:	01312cff 	.word	0x01312cff
 80065ec:	014ca43f 	.word	0x014ca43f
 80065f0:	016e3600 	.word	0x016e3600
 80065f4:	01a6ab1f 	.word	0x01a6ab1f
 80065f8:	01e84800 	.word	0x01e84800

080065fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f043 0201 	orr.w	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f023 0201 	bic.w	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d115      	bne.n	800668a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800666a:	2001      	movs	r0, #1
 800666c:	f7fb fddc 	bl	8002228 <HAL_Delay>
      ms++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 ffa6 	bl	80075c8 <USB_GetMode>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d01e      	beq.n	80066c0 <USB_SetCurrentMode+0x84>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b31      	cmp	r3, #49	; 0x31
 8006686:	d9f0      	bls.n	800666a <USB_SetCurrentMode+0x2e>
 8006688:	e01a      	b.n	80066c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d115      	bne.n	80066bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800669c:	2001      	movs	r0, #1
 800669e:	f7fb fdc3 	bl	8002228 <HAL_Delay>
      ms++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 ff8d 	bl	80075c8 <USB_GetMode>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <USB_SetCurrentMode+0x84>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b31      	cmp	r3, #49	; 0x31
 80066b8:	d9f0      	bls.n	800669c <USB_SetCurrentMode+0x60>
 80066ba:	e001      	b.n	80066c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e005      	b.n	80066cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b32      	cmp	r3, #50	; 0x32
 80066c4:	d101      	bne.n	80066ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d4:	b084      	sub	sp, #16
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	e009      	b.n	8006708 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	3340      	adds	r3, #64	; 0x40
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3301      	adds	r3, #1
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2b0e      	cmp	r3, #14
 800670c:	d9f2      	bls.n	80066f4 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	4619      	mov	r1, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	461a      	mov	r2, r3
 8006736:	680b      	ldr	r3, [r1, #0]
 8006738:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800673a:	2103      	movs	r1, #3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f939 	bl	80069b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006742:	2110      	movs	r1, #16
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8f1 	bl	800692c <USB_FlushTxFifo>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <USB_DevInit+0x80>
  {
    ret = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f90d 	bl	8006974 <USB_FlushRxFifo>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <USB_DevInit+0x90>
  {
    ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	461a      	mov	r2, r3
 800676c:	2300      	movs	r3, #0
 800676e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	461a      	mov	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	461a      	mov	r2, r3
 8006784:	2300      	movs	r3, #0
 8006786:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	e043      	b.n	8006816 <USB_DevInit+0x142>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067a4:	d118      	bne.n	80067d8 <USB_DevInit+0x104>
    {
      if (i == 0U)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <USB_DevInit+0xee>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	461a      	mov	r2, r3
 80067ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e013      	b.n	80067ea <USB_DevInit+0x116>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	461a      	mov	r2, r3
 80067d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	e008      	b.n	80067ea <USB_DevInit+0x116>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e4:	461a      	mov	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	461a      	mov	r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800680e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	3301      	adds	r3, #1
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	429a      	cmp	r2, r3
 800681c:	d3b7      	bcc.n	800678e <USB_DevInit+0xba>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e043      	b.n	80068ac <USB_DevInit+0x1d8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800683a:	d118      	bne.n	800686e <USB_DevInit+0x19a>
    {
      if (i == 0U)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <USB_DevInit+0x184>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	461a      	mov	r2, r3
 8006850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e013      	b.n	8006880 <USB_DevInit+0x1ac>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006864:	461a      	mov	r2, r3
 8006866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	e008      	b.n	8006880 <USB_DevInit+0x1ac>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	461a      	mov	r2, r3
 800687c:	2300      	movs	r3, #0
 800687e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	2300      	movs	r3, #0
 8006890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	461a      	mov	r2, r3
 80068a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3301      	adds	r3, #1
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d3b7      	bcc.n	8006824 <USB_DevInit+0x150>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f043 0210 	orr.w	r2, r3, #16
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <USB_DevInit+0x254>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f043 0208 	orr.w	r2, r3, #8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800690e:	f043 0304 	orr.w	r3, r3, #4
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006922:	b004      	add	sp, #16
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	803c3800 	.word	0x803c3800

0800692c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	019b      	lsls	r3, r3, #6
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a08      	ldr	r2, [pc, #32]	; (8006970 <USB_FlushTxFifo+0x44>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b20      	cmp	r3, #32
 8006962:	d0f0      	beq.n	8006946 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr
 8006970:	00030d40 	.word	0x00030d40

08006974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2210      	movs	r2, #16
 8006984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <USB_FlushRxFifo+0x3c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e006      	b.n	80069a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d0f0      	beq.n	8006986 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr
 80069b0:	00030d40 	.word	0x00030d40

080069b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0306 	and.w	r3, r3, #6
 80069fc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d002      	beq.n	8006a0a <USB_GetDevSpeed+0x26>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d102      	bne.n	8006a10 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	75fb      	strb	r3, [r7, #23]
 8006a0e:	e001      	b.n	8006a14 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006a10:	230f      	movs	r3, #15
 8006a12:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr

08006a20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d13a      	bne.n	8006ab2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d155      	bne.n	8006b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	78db      	ldrb	r3, [r3, #3]
 8006a8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	059b      	lsls	r3, r3, #22
 8006a96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e036      	b.n	8006b20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	041b      	lsls	r3, r3, #16
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11a      	bne.n	8006b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	78db      	ldrb	r3, [r3, #3]
 8006b04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b06:	430b      	orrs	r3, r1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	f040 810a 	bne.w	8006d5e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d132      	bne.n	8006bb8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb0:	0cdb      	lsrs	r3, r3, #19
 8006bb2:	04db      	lsls	r3, r3, #19
 8006bb4:	6113      	str	r3, [r2, #16]
 8006bb6:	e074      	b.n	8006ca2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd2:	0cdb      	lsrs	r3, r3, #19
 8006bd4:	04db      	lsls	r3, r3, #19
 8006bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6959      	ldr	r1, [r3, #20]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	440b      	add	r3, r1
 8006c14:	1e59      	subs	r1, r3, #1
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c20:	4baf      	ldr	r3, [pc, #700]	; (8006ee0 <USB_EPStartXfer+0x3b4>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	6939      	ldr	r1, [r7, #16]
 8006c26:	0148      	lsls	r0, r1, #5
 8006c28:	6979      	ldr	r1, [r7, #20]
 8006c2a:	4401      	add	r1, r0
 8006c2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c30:	4313      	orrs	r3, r2
 8006c32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4a:	6939      	ldr	r1, [r7, #16]
 8006c4c:	0148      	lsls	r0, r1, #5
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	4401      	add	r1, r0
 8006c52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c56:	4313      	orrs	r3, r2
 8006c58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	78db      	ldrb	r3, [r3, #3]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d11f      	bne.n	8006ca2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ca0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cc0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d015      	beq.n	8006cf6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8100 	beq.w	8006ed4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	634b      	str	r3, [r1, #52]	; 0x34
 8006cf4:	e0ee      	b.n	8006ed4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e00f      	b.n	8006d48 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d46:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68d9      	ldr	r1, [r3, #12]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9e1 	bl	800711e <USB_WritePacket>
 8006d5c:	e0ba      	b.n	8006ed4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d78:	0cdb      	lsrs	r3, r3, #19
 8006d7a:	04db      	lsls	r3, r3, #19
 8006d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006da0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d123      	bne.n	8006df2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc0:	6939      	ldr	r1, [r7, #16]
 8006dc2:	0148      	lsls	r0, r1, #5
 8006dc4:	6979      	ldr	r1, [r7, #20]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dee:	6113      	str	r3, [r2, #16]
 8006df0:	e033      	b.n	8006e5a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695a      	ldr	r2, [r3, #20]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	1e5a      	subs	r2, r3, #1
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	04d9      	lsls	r1, r3, #19
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <USB_EPStartXfer+0x3b4>)
 8006e1c:	400b      	ands	r3, r1
 8006e1e:	6939      	ldr	r1, [r7, #16]
 8006e20:	0148      	lsls	r0, r1, #5
 8006e22:	6979      	ldr	r1, [r7, #20]
 8006e24:	4401      	add	r1, r0
 8006e26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	89f9      	ldrh	r1, [r7, #14]
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4a:	6939      	ldr	r1, [r7, #16]
 8006e4c:	0148      	lsls	r0, r1, #5
 8006e4e:	6979      	ldr	r1, [r7, #20]
 8006e50:	4401      	add	r1, r0
 8006e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e56:	4313      	orrs	r3, r2
 8006e58:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	78db      	ldrb	r3, [r3, #3]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d128      	bne.n	8006eb4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d110      	bne.n	8006e94 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e00f      	b.n	8006eb4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	1ff80000 	.word	0x1ff80000

08006ee4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 80ab 	bne.w	8007058 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d132      	bne.n	8006f70 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f68:	0cdb      	lsrs	r3, r3, #19
 8006f6a:	04db      	lsls	r3, r3, #19
 8006f6c:	6113      	str	r3, [r2, #16]
 8006f6e:	e04e      	b.n	800700e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	0cdb      	lsrs	r3, r3, #19
 8006f8c:	04db      	lsls	r3, r3, #19
 8006f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fb2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	695a      	ldr	r2, [r3, #20]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d903      	bls.n	8006fc8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	0148      	lsls	r0, r1, #5
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	4401      	add	r1, r0
 8007006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800700a:	4313      	orrs	r3, r2
 800700c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007028:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800702c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d06d      	beq.n	8007112 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	2101      	movs	r1, #1
 8007048:	fa01 f303 	lsl.w	r3, r1, r3
 800704c:	68f9      	ldr	r1, [r7, #12]
 800704e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007052:	4313      	orrs	r3, r2
 8007054:	634b      	str	r3, [r1, #52]	; 0x34
 8007056:	e05c      	b.n	8007112 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007072:	0cdb      	lsrs	r3, r3, #19
 8007074:	04db      	lsls	r3, r3, #19
 8007076:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800709a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	0148      	lsls	r0, r1, #5
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	4401      	add	r1, r0
 80070ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070ee:	4313      	orrs	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007110:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800711e:	b480      	push	{r7}
 8007120:	b089      	sub	sp, #36	; 0x24
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	4611      	mov	r1, r2
 800712a:	461a      	mov	r2, r3
 800712c:	460b      	mov	r3, r1
 800712e:	71fb      	strb	r3, [r7, #7]
 8007130:	4613      	mov	r3, r2
 8007132:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800713c:	88bb      	ldrh	r3, [r7, #4]
 800713e:	3303      	adds	r3, #3
 8007140:	089b      	lsrs	r3, r3, #2
 8007142:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e018      	b.n	800717c <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	031a      	lsls	r2, r3, #12
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007156:	461a      	mov	r2, r3
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6013      	str	r3, [r2, #0]
    pSrc++;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3301      	adds	r3, #1
 8007162:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	3301      	adds	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	3301      	adds	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	3301      	adds	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3301      	adds	r3, #1
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	429a      	cmp	r2, r3
 8007182:	d3e2      	bcc.n	800714a <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3724      	adds	r7, #36	; 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007190:	b480      	push	{r7}
 8007192:	b08b      	sub	sp, #44	; 0x2c
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	089b      	lsrs	r3, r3, #2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	e014      	b.n	80071e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	3301      	adds	r3, #1
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	3301      	adds	r3, #1
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	3301      	adds	r3, #1
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	3301      	adds	r3, #1
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	3301      	adds	r3, #1
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d3e6      	bcc.n	80071bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071ee:	8bfb      	ldrh	r3, [r7, #30]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01e      	beq.n	8007232 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	461a      	mov	r2, r3
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	701a      	strb	r2, [r3, #0]
      i++;
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	3301      	adds	r3, #1
 800721e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	3301      	adds	r3, #1
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007226:	8bfb      	ldrh	r3, [r7, #30]
 8007228:	3b01      	subs	r3, #1
 800722a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800722c:	8bfb      	ldrh	r3, [r7, #30]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1ea      	bne.n	8007208 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007234:	4618      	mov	r0, r3
 8007236:	372c      	adds	r7, #44	; 0x2c
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d12c      	bne.n	80072b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	db12      	blt.n	8007292 <USB_EPSetStall+0x54>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00f      	beq.n	8007292 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007290:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e02b      	b.n	800730c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	db12      	blt.n	80072ec <USB_EPSetStall+0xae>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00f      	beq.n	80072ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	0151      	lsls	r1, r2, #5
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	440a      	add	r2, r1
 80072e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007306:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800730a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d128      	bne.n	8007386 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007352:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	78db      	ldrb	r3, [r3, #3]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d003      	beq.n	8007364 <USB_EPClearStall+0x4c>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d138      	bne.n	80073d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	440a      	add	r2, r1
 800737a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	e027      	b.n	80073d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	440a      	add	r2, r1
 800739c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	78db      	ldrb	r3, [r3, #3]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d003      	beq.n	80073b6 <USB_EPClearStall+0x9e>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	78db      	ldrb	r3, [r3, #3]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d10f      	bne.n	80073d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007400:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007404:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800741c:	4313      	orrs	r3, r2
 800741e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr

0800742c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745a:	f023 0302 	bic.w	r3, r3, #2
 800745e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800749a:	f043 0302 	orr.w	r3, r3, #2
 800749e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr

080074ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4013      	ands	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074c4:	68fb      	ldr	r3, [r7, #12]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4013      	ands	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	0c1b      	lsrs	r3, r3, #16
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	b29b      	uxth	r3, r3
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	4013      	ands	r3, r2
 8007560:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007562:	68bb      	ldr	r3, [r7, #8]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr

0800756e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800756e:	b480      	push	{r7}
 8007570:	b087      	sub	sp, #28
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	fa22 f303 	lsr.w	r3, r2, r3
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4013      	ands	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075bc:	68bb      	ldr	r3, [r7, #8]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0301 	and.w	r3, r3, #1
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007600:	f023 0307 	bic.w	r3, r3, #7
 8007604:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007618:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr
	...

08007628 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	333c      	adds	r3, #60	; 0x3c
 800763a:	3304      	adds	r3, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <USB_EP0_OutStart+0x8c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d90a      	bls.n	800765e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007658:	d101      	bne.n	800765e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e024      	b.n	80076a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	461a      	mov	r2, r3
 8007666:	2300      	movs	r3, #0
 8007668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800767c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768c:	f043 0318 	orr.w	r3, r3, #24
 8007690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	4f54300a 	.word	0x4f54300a

080076b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a12      	ldr	r2, [pc, #72]	; (8007718 <USB_CoreReset+0x60>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e01b      	b.n	800770e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	daf2      	bge.n	80076c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f043 0201 	orr.w	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4a08      	ldr	r2, [pc, #32]	; (8007718 <USB_CoreReset+0x60>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d901      	bls.n	8007700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e006      	b.n	800770e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d0f0      	beq.n	80076ee <USB_CoreReset+0x36>

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr
 8007718:	00030d40 	.word	0x00030d40

0800771c <_Z13N2kHasElapsedmmm>:
 * \param Now     Compare (current) time, optional, default N2kMillis() 
 * 
 * \return true   when Now>Start+Elapsed
 * \return false 
 */
inline bool N2kHasElapsed(uint32_t Start, uint32_t Elapsed, uint32_t Now=N2kMillis()) { 
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  return Now-(Start+Elapsed)<LONG_MAX; 
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007736:	4293      	cmp	r3, r2
 8007738:	bf34      	ite	cc
 800773a:	2301      	movcc	r3, #1
 800773c:	2300      	movcs	r3, #0
 800773e:	b2db      	uxtb	r3, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <_ZN9tNMEA200018tDeviceInformationC1Ev>:

  public:
    /*******************************************************************//**
     * \brief Construct a new empty Device Information object
     */
    tDeviceInformation() { DeviceInformation.Name=0; }
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9c1 2300 	strd	r2, r3, [r1]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>:

    /*******************************************************************//**
     * \brief Get the unique Number from the Device Information
     * \return uint32_t 
     */
    uint32_t GetUniqueNumber() const { return DeviceInformation.UnicNumberAndManCode&0x1fffff; }
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>:

    /*******************************************************************//**
     * \brief Get the Manufacturer Code from the Device Information
     * \return uint16_t 
     */
    uint16_t GetManufacturerCode() const { return DeviceInformation.UnicNumberAndManCode>>21; }
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	0d5b      	lsrs	r3, r3, #21
 8007794:	b29b      	uxth	r3, r3
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>:
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }
    /*** ****************************************************************//**
     * \brief Get the Name from the Device Information
     * \return uint64_t 
     */
    uint64_t GetName() const { return DeviceInformation.Name; }
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr

080077ba <_ZN9tNMEA200011IsBroadcastEh>:
     *
     * \param Source  Source address
     * \return true 
     * \return false 
     */
    static bool IsBroadcast(unsigned char Source) { return Source==0xff; }
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	4603      	mov	r3, r0
 80077c2:	71fb      	strb	r3, [r7, #7]
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2bff      	cmp	r3, #255	; 0xff
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr
	...

080077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>:
#include "NMEA2000.h"

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
tN2kGroupFunctionHandler::tN2kGroupFunctionHandler(tNMEA2000 *_pNMEA2000, unsigned long _PGN)  {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	4a0c      	ldr	r2, [pc, #48]	; (800781c <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m+0x40>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]
  pNext=0;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	605a      	str	r2, [r3, #4]
  pNMEA2000=_pNMEA2000;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	611a      	str	r2, [r3, #16]
  PGN=_PGN;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	609a      	str	r2, [r3, #8]
  Proprietary=tNMEA2000::IsProprietaryMessage(PGN);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f004 fcb5 	bl	800c174 <_ZN9tNMEA200020IsProprietaryMessageEm>
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	731a      	strb	r2, [r3, #12]
}
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	08017594 	.word	0x08017594

08007820 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Handle(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 8007820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007822:	b08f      	sub	sp, #60	; 0x3c
 8007824:	af04      	add	r7, sp, #16
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  if ( PGN!=PGNForGroupFunction && PGN!=0 ) return false;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d005      	beq.n	8007846 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 8007842:	2300      	movs	r3, #0
 8007844:	e126      	b.n	8007a94 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x274>

  bool handled=false;
 8007846:	2300      	movs	r3, #0
 8007848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t ManufacturerCode;
  uint8_t IndustryGroup;
  uint8_t UniqueID;
  uint8_t NumberOfSelectionPairs;
  uint8_t NumberOfParameterPairs;
  bool Propr=(PGN!=0?Proprietary:tNMEA2000::IsProprietaryMessage(PGNForGroupFunction));
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x44>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	7b1b      	ldrb	r3, [r3, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e008      	b.n	8007876 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x56>
 8007864:	6838      	ldr	r0, [r7, #0]
 8007866:	f004 fc85 	bl	800c174 <_ZN9tNMEA200020IsProprietaryMessageEm>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  switch (GroupFunctionCode) {
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	2b06      	cmp	r3, #6
 800787e:	f200 8107 	bhi.w	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
 8007882:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078a5 	.word	0x080078a5
 800788c:	080078e7 	.word	0x080078e7
 8007890:	08007939 	.word	0x08007939
 8007894:	0800797b 	.word	0x0800797b
 8007898:	080079f5 	.word	0x080079f5
 800789c:	080079fd 	.word	0x080079fd
 80078a0:	08007a77 	.word	0x08007a77
    case N2kgfc_Request:
      uint32_t TransmissionInterval;
      uint16_t TransmissionIntervalOffset;

        if (ParseRequestParams(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs)) {
 80078a4:	f107 0320 	add.w	r3, r7, #32
 80078a8:	f107 021a 	add.w	r2, r7, #26
 80078ac:	f107 011c 	add.w	r1, r7, #28
 80078b0:	68b8      	ldr	r0, [r7, #8]
 80078b2:	f000 fab3 	bl	8007e1c <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80e0 	beq.w	8007a7e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
          handled=HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3304      	adds	r3, #4
 80078c4:	681c      	ldr	r4, [r3, #0]
 80078c6:	69f9      	ldr	r1, [r7, #28]
 80078c8:	8b78      	ldrh	r0, [r7, #26]
 80078ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078d0:	9201      	str	r2, [sp, #4]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4603      	mov	r3, r0
 80078d6:	460a      	mov	r2, r1
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	47a0      	blx	r4
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 80078e4:	e0cb      	b.n	8007a7e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
    case N2kgfc_Command:
      uint8_t PrioritySetting;

        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	7b5b      	ldrb	r3, [r3, #13]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff ff65 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0xde>
          handled=true;  // We can mark this handled, since command is not allowed to broadcast.
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
          }
        }
      break;
 80078fc:	e0c1      	b.n	8007a82 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
 80078fe:	f107 0220 	add.w	r2, r7, #32
 8007902:	f107 0319 	add.w	r3, r7, #25
 8007906:	4619      	mov	r1, r3
 8007908:	68b8      	ldr	r0, [r7, #8]
 800790a:	f000 fad7 	bl	8007ebc <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80b6 	beq.w	8007a82 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	681c      	ldr	r4, [r3, #0]
 800791e:	7e7a      	ldrb	r2, [r7, #25]
 8007920:	f897 1020 	ldrb.w	r1, [r7, #32]
 8007924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	460b      	mov	r3, r1
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	47a0      	blx	r4
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007936:	e0a4      	b.n	8007a82 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
    case N2kgfc_Acknowledge:
      tN2kGroupFunctionPGNErrorCode PGNErrorCode;
      tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode;

        if (ParseAcknowledgeParams(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs)) {
 8007938:	f107 0320 	add.w	r3, r7, #32
 800793c:	f107 0217 	add.w	r2, r7, #23
 8007940:	f107 0118 	add.w	r1, r7, #24
 8007944:	68b8      	ldr	r0, [r7, #8]
 8007946:	f000 fafb 	bl	8007f40 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 809a 	beq.w	8007a86 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
          handled=HandleAcknowledge(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs,iDev);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	330c      	adds	r3, #12
 8007958:	681c      	ldr	r4, [r3, #0]
 800795a:	7e39      	ldrb	r1, [r7, #24]
 800795c:	7df8      	ldrb	r0, [r7, #23]
 800795e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007964:	9201      	str	r2, [sp, #4]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4603      	mov	r3, r0
 800796a:	460a      	mov	r2, r1
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	47a0      	blx	r4
 8007972:	4603      	mov	r3, r0
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 8007978:	e085      	b.n	8007a86 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
    case N2kgfc_Read:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	7b5b      	ldrb	r3, [r3, #13]
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff ff1b 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x172>
          handled=true;  // We can mark this handled, since read is not allowed to broadcast.
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 8007990:	e07b      	b.n	8007a8a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 8007992:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8007996:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800799a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800799e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	f107 0320 	add.w	r3, r7, #32
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4603      	mov	r3, r0
 80079b2:	68b8      	ldr	r0, [r7, #8]
 80079b4:	f000 faf8 	bl	8007fa8 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d065      	beq.n	8007a8a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3310      	adds	r3, #16
 80079c4:	681c      	ldr	r4, [r3, #0]
 80079c6:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80079c8:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 80079cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80079d4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80079d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80079da:	9003      	str	r0, [sp, #12]
 80079dc:	9102      	str	r1, [sp, #8]
 80079de:	9201      	str	r2, [sp, #4]
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	4633      	mov	r3, r6
 80079e4:	462a      	mov	r2, r5
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	47a0      	blx	r4
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079f2:	e04a      	b.n	8007a8a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
    case N2kgfc_ReadReply:
      handled=true;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079fa:	e049      	b.n	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
    case N2kgfc_Write:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	7b5b      	ldrb	r3, [r3, #13]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff feda 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x1f4>
          handled=true;  // We can mark this handled, since write is not allowed to broadcast.
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 8007a12:	e03c      	b.n	8007a8e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 8007a14:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8007a18:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8007a1c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	f107 0320 	add.w	r3, r7, #32
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4603      	mov	r3, r0
 8007a34:	68b8      	ldr	r0, [r7, #8]
 8007a36:	f000 fab7 	bl	8007fa8 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d026      	beq.n	8007a8e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3318      	adds	r3, #24
 8007a46:	681c      	ldr	r4, [r3, #0]
 8007a48:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8007a4a:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8007a4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a52:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007a56:	f897 1020 	ldrb.w	r1, [r7, #32]
 8007a5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a5c:	9003      	str	r0, [sp, #12]
 8007a5e:	9102      	str	r1, [sp, #8]
 8007a60:	9201      	str	r2, [sp, #4]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	4633      	mov	r3, r6
 8007a66:	462a      	mov	r2, r5
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	47a0      	blx	r4
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007a74:	e00b      	b.n	8007a8e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
    case N2kgfc_WriteReply:
      handled=true;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007a7c:	e008      	b.n	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e006      	b.n	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 8007a82:	bf00      	nop
 8007a84:	e004      	b.n	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 8007a86:	bf00      	nop
 8007a88:	e002      	b.n	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 8007a8e:	bf00      	nop

  }

  return handled;
 8007a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	372c      	adds	r7, #44	; 0x2c
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a9c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt>:
                              bool UseIntervalLimits,
                              uint32_t IntervalMax,
                              uint32_t IntervalMin,
                              bool UseOffsetLimits,
                              uint16_t OffsetMax
                              ) {
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	460b      	mov	r3, r1
 8007aac:	80fb      	strh	r3, [r7, #6]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	717b      	strb	r3, [r7, #5]
           // happy, we accept also 0 offset
           (TransmissionIntervalOffset==0xffff
            || TransmissionIntervalOffset==0
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
           )
           ?
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab8:	d014      	beq.n	8007ae4 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0xFFFFFFFE  // Restore default
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f113 0f02 	cmn.w	r3, #2
 8007ac0:	d010      	beq.n	8007ae4 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0           // Turn off
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00d      	beq.n	8007ae4 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || ( UseIntervalLimits && TransmissionInterval>=IntervalMin && TransmissionInterval<=IntervalMax)
 8007ac8:	797b      	ldrb	r3, [r7, #5]
 8007aca:	f083 0301 	eor.w	r3, r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11a      	bne.n	8007b0a <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d316      	bcc.n	8007b0a <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d812      	bhi.n	8007b0a <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
           ?
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00f      	beq.n	8007b0e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || TransmissionIntervalOffset==0
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
 8007af4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007af8:	f083 0301 	eor.w	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d901      	bls.n	8007b0e <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
           ?
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x74>
 8007b0e:	2300      	movs	r3, #0
          N2kgfTPec_Acknowledge:
          N2kgfTPec_TransmitIntervalOrPriorityNotSupported);
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8007b1a:	b5b0      	push	{r4, r5, r7, lr}
 8007b1c:	b08a      	sub	sp, #40	; 0x28
 8007b1e:	af04      	add	r7, sp, #16
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	807b      	strh	r3, [r7, #2]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	691c      	ldr	r4, [r3, #16]
 8007b2c:	68b8      	ldr	r0, [r7, #8]
 8007b2e:	f000 f944 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007b32:	4603      	mov	r3, r0
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	4619      	mov	r1, r3
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f004 ff35 	bl	800c9a8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681c      	ldr	r4, [r3, #0]
 8007b48:	887a      	ldrh	r2, [r7, #2]
 8007b4a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007b4e:	9303      	str	r3, [sp, #12]
 8007b50:	2300      	movs	r3, #0
 8007b52:	9302      	str	r3, [sp, #8]
 8007b54:	2332      	movs	r3, #50	; 0x32
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	f06f 030f 	mvn.w	r3, #15
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	47a0      	blx	r4
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_PGNTemporarilyNotAvailable:N2kgfPGNec_PGNNotSupported);
 8007b6a:	7d7b      	ldrb	r3, [r7, #21]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5a>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e000      	b.n	8007b76 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5c>
 8007b74:	2301      	movs	r3, #1
 8007b76:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	753b      	strb	r3, [r7, #20]

    if ( PGNec==N2kgfPGNec_PGNNotSupported ) TORec=N2kgfTPec_Acknowledge; // Always acknoledge for unknown PGN.
 8007b7c:	7dbb      	ldrb	r3, [r7, #22]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x6c>
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]
    if ( PGNec==N2kgfPGNec_PGNTemporarilyNotAvailable ) {
 8007b86:	7dbb      	ldrb	r3, [r7, #22]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d107      	bne.n	8007b9c <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      if ( TORec==N2kgfTPec_TransmitIntervalOrPriorityNotSupported ) { // Acknowledge PGN for known PGN but for invalid priority
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d102      	bne.n	8007b98 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x7e>
        PGNec=N2kgfPGNec_Acknowledge;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75bb      	strb	r3, [r7, #22]
 8007b96:	e001      	b.n	8007b9c <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      } else {
        TORec=N2kgfTPec_Acknowledge; //N2kgfTPec_RequestNotSupported;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	75fb      	strb	r3, [r7, #23]
      }
    }

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	7b5b      	ldrb	r3, [r3, #13]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fe0a 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f083 0301 	eor.w	r3, r3, #1
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d016      	beq.n	8007be0 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0xc6>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	691c      	ldr	r4, [r3, #16]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	7b1d      	ldrb	r5, [r3, #12]
 8007bba:	68b8      	ldr	r0, [r7, #8]
 8007bbc:	f000 f8fd 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	7d3b      	ldrb	r3, [r7, #20]
 8007bc4:	9303      	str	r3, [sp, #12]
 8007bc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bca:	9302      	str	r3, [sp, #8]
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	7dbb      	ldrb	r3, [r7, #22]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 faaa 	bl	8008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      PGNec,
                      TORec,
                      NumberOfParameterPairs, PARec);
    }

    return true;
 8007be0:	2301      	movs	r3, #1
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bdb0      	pop	{r4, r5, r7, pc}

08007bea <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t  NumberOfParameterPairs, int iDev) {
 8007bea:	b5b0      	push	{r4, r5, r7, lr}
 8007bec:	b08a      	sub	sp, #40	; 0x28
 8007bee:	af04      	add	r7, sp, #16
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	71fb      	strb	r3, [r7, #7]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71bb      	strb	r3, [r7, #6]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	691c      	ldr	r4, [r3, #16]
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 f8d8 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4620      	mov	r0, r4
 8007c12:	f004 fec9 	bl	800c9a8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_Acknowledge:N2kgfPGNec_PGNNotSupported);
 8007c1a:	7dbb      	ldrb	r3, [r7, #22]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3a>
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3c>
 8007c24:	2301      	movs	r3, #1
 8007c26:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=N2kgfTPec_Acknowledge;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	753b      	strb	r3, [r7, #20]

		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) TORec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d105      	bne.n	8007c42 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	2b0f      	cmp	r3, #15
 8007c3a:	d102      	bne.n	8007c42 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	d001      	beq.n	8007c46 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x5c>
 8007c42:	2301      	movs	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]

    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	691c      	ldr	r4, [r3, #16]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	7b1d      	ldrb	r5, [r3, #12]
 8007c4e:	68b8      	ldr	r0, [r7, #8]
 8007c50:	f000 f8b3 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007c54:	4602      	mov	r2, r0
 8007c56:	7d3b      	ldrb	r3, [r7, #20]
 8007c58:	9303      	str	r3, [sp, #12]
 8007c5a:	79bb      	ldrb	r3, [r7, #6]
 8007c5c:	9302      	str	r3, [sp, #8]
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	7d7b      	ldrb	r3, [r7, #21]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fa61 	bl	8008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    TORec,
                    NumberOfParameterPairs, PARec);

    return true;
 8007c72:	2301      	movs	r3, #1
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bdb0      	pop	{r4, r5, r7, pc}

08007c7c <_ZN24tN2kGroupFunctionHandler17HandleAcknowledgeERK7tN2kMsg29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodehi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleAcknowledge(const tN2kMsg &/*N2kMsg*/,
                                   tN2kGroupFunctionPGNErrorCode /*PGNErrorCode*/,
                                   tN2kGroupFunctionTransmissionOrPriorityErrorCode /*TransmissionOrPriorityErrorCode*/,
                                   uint8_t /*ParameterCount*/,
                                   int /*iDev*/) {
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4611      	mov	r1, r2
 8007c88:	461a      	mov	r2, r3
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	71fb      	strb	r3, [r7, #7]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71bb      	strb	r3, [r7, #6]
    // As default, simply return true meaning that received acknowledge has been handled.
    return true;
 8007c92:	2301      	movs	r3, #1
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr

08007c9e <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 8007c9e:	b5b0      	push	{r4, r5, r7, lr}
 8007ca0:	b08a      	sub	sp, #40	; 0x28
 8007ca2:	af04      	add	r7, sp, #16
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	461a      	mov	r2, r3
 8007cac:	460b      	mov	r3, r1
 8007cae:	80fb      	strh	r3, [r7, #6]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	717b      	strb	r3, [r7, #5]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	691c      	ldr	r4, [r3, #16]
 8007cb8:	68b8      	ldr	r0, [r7, #8]
 8007cba:	f000 f87e 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f004 fe6f 	bl	800c9a8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3a>
 8007cd4:	2306      	movs	r3, #6
 8007cd6:	e000      	b.n	8007cda <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3c>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691c      	ldr	r4, [r3, #16]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	7b1d      	ldrb	r5, [r3, #12]
 8007ce4:	68b8      	ldr	r0, [r7, #8]
 8007ce6:	f000 f868 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007cea:	4602      	mov	r2, r0
 8007cec:	2300      	movs	r3, #0
 8007cee:	9303      	str	r3, [sp, #12]
 8007cf0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007cf4:	9302      	str	r3, [sp, #8]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	7dbb      	ldrb	r3, [r7, #22]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d02:	4629      	mov	r1, r5
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 fa15 	bl	8008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);
    return true;
 8007d0a:	2301      	movs	r3, #1
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bdb0      	pop	{r4, r5, r7, pc}

08007d14 <_ZN24tN2kGroupFunctionHandler21HandleReadFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleReadFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
    return true;
 8007d20:	2301      	movs	r3, #1
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 8007d2c:	b5b0      	push	{r4, r5, r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af04      	add	r7, sp, #16
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4611      	mov	r1, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	80fb      	strh	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	717b      	strb	r3, [r7, #5]
    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691c      	ldr	r4, [r3, #16]
 8007d46:	68b8      	ldr	r0, [r7, #8]
 8007d48:	f000 f837 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d50:	4619      	mov	r1, r3
 8007d52:	4620      	mov	r0, r4
 8007d54:	f004 fe28 	bl	800c9a8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3a>
 8007d62:	2306      	movs	r3, #6
 8007d64:	e000      	b.n	8007d68 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3c>
 8007d66:	2301      	movs	r3, #1
 8007d68:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	691c      	ldr	r4, [r3, #16]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	7b1d      	ldrb	r5, [r3, #12]
 8007d72:	68b8      	ldr	r0, [r7, #8]
 8007d74:	f000 f821 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007d82:	9302      	str	r3, [sp, #8]
 8007d84:	2300      	movs	r3, #0
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	7dbb      	ldrb	r3, [r7, #22]
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d90:	4629      	mov	r1, r5
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f9ce 	bl	8008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);

    return true;
 8007d98:	2301      	movs	r3, #1
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bdb0      	pop	{r4, r5, r7, pc}

08007da2 <_ZN24tN2kGroupFunctionHandler22HandleWriteFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleWriteFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
    return true;
 8007dae:	2301      	movs	r3, #1
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr

08007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>:

// Static functions for PGN 126208 handling
//*****************************************************************************
unsigned long tN2kGroupFunctionHandler::GetPGNForGroupFunction(const tN2kMsg &N2kMsg) {
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  int Index=1;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
  return N2kMsg.Get3ByteUInt(Index);
 8007dc6:	f107 030c 	add.w	r3, r7, #12
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f002 fa7c 	bl	800a2ce <_ZNK7tN2kMsg12Get3ByteUIntERim>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Parse(const tN2kMsg &N2kMsg,
                            tN2kGroupFunctionCode &GroupFunctionCode,
                            unsigned long &PGNForGroupFunction) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x38>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d001      	beq.n	8007dfa <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x1a>
 8007df6:	2300      	movs	r3, #0
 8007df8:	e00a      	b.n	8007e10 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x30>

  GroupFunctionCode=(tN2kGroupFunctionCode)(N2kMsg.Data[0]);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	7d1a      	ldrb	r2, [r3, #20]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	701a      	strb	r2, [r3, #0]
  PGNForGroupFunction=GetPGNForGroupFunction(N2kMsg);
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff ffd9 	bl	8007dba <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]

  return true;
 8007e0e:	2301      	movs	r3, #1
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	0001ed00 	.word	0x0001ed00

08007e1c <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseRequestParams(const tN2kMsg &N2kMsg,
                               uint32_t &TransmissionInterval,
                               uint16_t &TransmissionIntervalOffset,
                               uint8_t  &NumberOfParameterPairs) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	4a16      	ldr	r2, [pc, #88]	; (8007e88 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x6c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d001      	beq.n	8007e38 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x1c>
 8007e34:	2300      	movs	r3, #0
 8007e36:	e023      	b.n	8007e80 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x64>
  int Index=N2kgf_OffsetToParams;
 8007e38:	2304      	movs	r3, #4
 8007e3a:	617b      	str	r3, [r7, #20]
  TransmissionInterval=N2kMsg.Get4ByteUInt(Index);
 8007e3c:	f107 0314 	add.w	r3, r7, #20
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e44:	4619      	mov	r1, r3
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f002 fa5b 	bl	800a302 <_ZNK7tN2kMsg12Get4ByteUIntERim>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	601a      	str	r2, [r3, #0]
  TransmissionIntervalOffset=N2kMsg.Get2ByteUInt(Index);
 8007e52:	f107 0314 	add.w	r3, r7, #20
 8007e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f002 fa1b 	bl	800a298 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	801a      	strh	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8007e6a:	f107 0314 	add.w	r3, r7, #20
 8007e6e:	4619      	mov	r1, r3
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f002 f9f7 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8007e76:	4603      	mov	r3, r0
 8007e78:	461a      	mov	r2, r3
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	701a      	strb	r2, [r3, #0]

  return true;
 8007e7e:	2301      	movs	r3, #1
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	0001ed00 	.word	0x0001ed00

08007e8c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseRequestPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x2c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d001      	beq.n	8007ea4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x18>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e003      	b.n	8007eac <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToRequestPairParameters;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	220b      	movs	r2, #11
 8007ea8:	601a      	str	r2, [r3, #0]

  return true;
 8007eaa:	2301      	movs	r3, #1
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	0001ed00 	.word	0x0001ed00

08007ebc <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseCommandParams(const tN2kMsg &N2kMsg,
                               uint8_t &PrioritySetting,
                               uint8_t &NumberOfParameterPairs) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x50>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d001      	beq.n	8007ed6 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x1a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e016      	b.n	8007f04 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x48>
  int Index=N2kgf_OffsetToParams;
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	617b      	str	r3, [r7, #20]
  PrioritySetting=N2kMsg.GetByte(Index);
 8007eda:	f107 0314 	add.w	r3, r7, #20
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f002 f9bf 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	461a      	mov	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f002 f9b5 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8007efa:	4603      	mov	r3, r0
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	701a      	strb	r2, [r3, #0]

  return true;
 8007f02:	2301      	movs	r3, #1
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	0001ed00 	.word	0x0001ed00

08007f10 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseCommandPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	4a07      	ldr	r2, [pc, #28]	; (8007f3c <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x2c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d001      	beq.n	8007f28 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x18>
 8007f24:	2300      	movs	r3, #0
 8007f26:	e003      	b.n	8007f30 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToCommandPairParameters;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	601a      	str	r2, [r3, #0]

  return true;
 8007f2e:	2301      	movs	r3, #1
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	0001ed00 	.word	0x0001ed00

08007f40 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseAcknowledgeParams(const tN2kMsg &N2kMsg,
                               tN2kGroupFunctionPGNErrorCode &PGNErrorCode,
                               tN2kGroupFunctionTransmissionOrPriorityErrorCode &TransmissionOrPriorityErrorCode,
                               uint8_t &NumberOfParameterPairs) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
  PGNErrorCode=N2kgfPGNec_PGNNotSupported;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2201      	movs	r2, #1
 8007f52:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=0;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	4a0f      	ldr	r2, [pc, #60]	; (8007fa4 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x64>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d001      	beq.n	8007f6e <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x2e>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e015      	b.n	8007f9a <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x5a>
  int Index=N2kgf_OffsetToParams;
 8007f6e:	2304      	movs	r3, #4
 8007f70:	613b      	str	r3, [r7, #16]
  uint8_t b=N2kMsg.GetByte(Index);
 8007f72:	f107 0310 	add.w	r3, r7, #16
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f002 f973 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]
  PGNErrorCode=(tN2kGroupFunctionPGNErrorCode)(b&0x0f);
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=(tN2kGroupFunctionTransmissionOrPriorityErrorCode)(b>>4);
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	701a      	strb	r2, [r3, #0]

  return true;
 8007f98:	2301      	movs	r3, #1
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	0001ed00 	.word	0x0001ed00

08007fa8 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>:
                               uint16_t &ManufacturerCode,
                               uint8_t &IndustryGroup,
                               uint8_t &UniqueID,
                               uint8_t &NumberOfSelectionPairs,
                               uint8_t &NumberOfParameterPairs,
                               bool Proprietary) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	4a25      	ldr	r2, [pc, #148]	; (8008050 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d001      	beq.n	8007fc4 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x1c>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e041      	b.n	8008048 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa0>
  int Index=N2kgf_OffsetToParams;
 8007fc4:	2304      	movs	r3, #4
 8007fc6:	613b      	str	r3, [r7, #16]
  ManufacturerCode=0xffff; // We need here information is PGN proprietary or not
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fce:	801a      	strh	r2, [r3, #0]
  IndustryGroup=0xff;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	22ff      	movs	r2, #255	; 0xff
 8007fd4:	701a      	strb	r2, [r3, #0]
  if ( Proprietary ) {
 8007fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d015      	beq.n	800800a <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x62>
    uint16_t ProprietaryInfo=N2kMsg.Get2ByteUInt(Index);
 8007fde:	f107 0310 	add.w	r3, r7, #16
 8007fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f002 f955 	bl	800a298 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	82fb      	strh	r3, [r7, #22]
    ManufacturerCode=ProprietaryInfo & 0x07ff;
 8007ff2:	8afb      	ldrh	r3, [r7, #22]
 8007ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	801a      	strh	r2, [r3, #0]
    IndustryGroup=(ProprietaryInfo>>13) &0x07;
 8007ffe:	8afb      	ldrh	r3, [r7, #22]
 8008000:	0b5b      	lsrs	r3, r3, #13
 8008002:	b29b      	uxth	r3, r3
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	701a      	strb	r2, [r3, #0]
  }
  UniqueID=N2kMsg.GetByte(Index);
 800800a:	f107 0310 	add.w	r3, r7, #16
 800800e:	4619      	mov	r1, r3
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f002 f927 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008016:	4603      	mov	r3, r0
 8008018:	461a      	mov	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	701a      	strb	r2, [r3, #0]
  NumberOfSelectionPairs=N2kMsg.GetByte(Index);
 800801e:	f107 0310 	add.w	r3, r7, #16
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f002 f91d 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800802a:	4603      	mov	r3, r0
 800802c:	461a      	mov	r2, r3
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8008032:	f107 0310 	add.w	r3, r7, #16
 8008036:	4619      	mov	r1, r3
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f002 f913 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	701a      	strb	r2, [r3, #0]

  return true;
 8008046:	2301      	movs	r3, #1
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	0001ed00 	.word	0x0001ed00

08008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>:

//*****************************************************************************
void tN2kGroupFunctionHandler::SetStartAcknowledge(tN2kMsg &N2kMsg, unsigned char Destination, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs) {
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	461a      	mov	r2, r3
 8008060:	460b      	mov	r3, r1
 8008062:	72fb      	strb	r3, [r7, #11]
 8008064:	4613      	mov	r3, r2
 8008066:	72bb      	strb	r3, [r7, #10]
  N2kMsg.Clear();
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	4798      	blx	r3
	N2kMsg.SetPGN(126208L);
 8008072:	4914      	ldr	r1, [pc, #80]	; (80080c4 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh+0x70>)
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 ff85 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=3;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2203      	movs	r2, #3
 800807e:	711a      	strb	r2, [r3, #4]
  N2kMsg.Destination=Destination;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	7afa      	ldrb	r2, [r7, #11]
 8008084:	735a      	strb	r2, [r3, #13]
	N2kMsg.AddByte(N2kgfc_Acknowledge);
 8008086:	2102      	movs	r1, #2
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f002 f8bb 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f002 f87f 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
  N2kMsg.AddByte(PGNErrorCode | TransmissionOrPriorityErrorCode<<4);
 8008098:	7e3b      	ldrb	r3, [r7, #24]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	b25a      	sxtb	r2, r3
 800809e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b25b      	sxtb	r3, r3
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	4619      	mov	r1, r3
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f002 f8aa 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NumberOfParameterPairs);
 80080b0:	7f3b      	ldrb	r3, [r7, #28]
 80080b2:	4619      	mov	r1, r3
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f002 f8a5 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	0001ed00 	.word	0x0001ed00

080080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>:
}

//*****************************************************************************
void tN2kGroupFunctionHandler::AddAcknowledgeParameter(tN2kMsg &N2kMsg,
                                         uint8_t ParameterPairIndex,
                                         tN2kGroupFunctionParameterErrorCode ErrorCode) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
 80080d4:	4613      	mov	r3, r2
 80080d6:	70bb      	strb	r3, [r7, #2]
  if ( ((ParameterPairIndex % 2) == 0) && (N2kMsg.DataLen>0) ) {
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10c      	bne.n	80080fc <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dd08      	ble.n	80080fc <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
    N2kMsg.AddByte((uint8_t)(ErrorCode) | 0x0f << 4);
 80080ea:	78bb      	ldrb	r3, [r7, #2]
 80080ec:	f063 030f 	orn	r3, r3, #15
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f002 f885 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 80080fa:	e017      	b.n	800812c <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x64>
  } else {
    // Should actually add AddBits to N2kMsg
    N2kMsg.Data[N2kMsg.DataLen-1]=(N2kMsg.Data[N2kMsg.DataLen-1] & 0x0f) | ((uint8_t)(ErrorCode) << 4);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	3b01      	subs	r3, #1
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	7d1b      	ldrb	r3, [r3, #20]
 8008108:	b25b      	sxtb	r3, r3
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	b25a      	sxtb	r2, r3
 8008110:	78bb      	ldrb	r3, [r7, #2]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	b25b      	sxtb	r3, r3
 8008116:	4313      	orrs	r3, r2
 8008118:	b25a      	sxtb	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	3b01      	subs	r3, #1
 8008120:	b2d1      	uxtb	r1, r2
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	460a      	mov	r2, r1
 8008128:	751a      	strb	r2, [r3, #20]
  }
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>:
//*****************************************************************************
void tN2kGroupFunctionHandler::SendAcknowledge(tNMEA2000 *pNMEA2000, unsigned char Destination, int iDev, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs,
                                         tN2kGroupFunctionParameterErrorCode ParameterErrorCodeForAll) {
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b0c7      	sub	sp, #284	; 0x11c
 8008138:	af02      	add	r7, sp, #8
 800813a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800813e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8008142:	6020      	str	r0, [r4, #0]
 8008144:	4608      	mov	r0, r1
 8008146:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800814a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800814e:	600a      	str	r2, [r1, #0]
 8008150:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008154:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800815e:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8008162:	4602      	mov	r2, r0
 8008164:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kRMsg;
 8008166:	f107 0010 	add.w	r0, r7, #16
 800816a:	2300      	movs	r3, #0
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	2300      	movs	r3, #0
 8008170:	2206      	movs	r2, #6
 8008172:	210f      	movs	r1, #15
 8008174:	f001 fed4 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

    // As default we respond with not supported.
    SetStartAcknowledge(N2kRMsg,Destination,PGN,
 8008178:	f897 4120 	ldrb.w	r4, [r7, #288]	; 0x120
 800817c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008180:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8008184:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008188:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800818c:	7819      	ldrb	r1, [r3, #0]
 800818e:	f107 0010 	add.w	r0, r7, #16
 8008192:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4623      	mov	r3, r4
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	f7ff ff57 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        PGNErrorCode,
                        TransmissionOrPriorityErrorCode,
                        NumberOfParameterPairs);
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80081ac:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80081b0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d20e      	bcs.n	80081d6 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0xa2>
      AddAcknowledgeParameter(N2kRMsg,ParamIndex,ParameterErrorCodeForAll);
 80081b8:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 80081bc:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 80081c0:	f107 0310 	add.w	r3, r7, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff ff7f 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 80081ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80081ce:	3301      	adds	r3, #1
 80081d0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80081d4:	e7ea      	b.n	80081ac <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0x78>
    }
    pNMEA2000->SendMsg(N2kRMsg,iDev);
 80081d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081da:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80081de:	f107 0110 	add.w	r1, r7, #16
 80081e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f005 fcdd 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
}
 80081f2:	bf00      	nop
 80081f4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd90      	pop	{r4, r7, pc}

080081fc <_ZNK7tN2kMsg11IsTPMessageEv>:
  /************************************************************************//**
   * \brief Determine if the message is flagged as MultiPacket Message
   * \return true   Message is a MultiPacket Message
   * \return false  Message is not a MultiPacket Message
   */
  bool IsTPMessage() const { return TPMessage; }
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800820a:	4618      	mov	r0, r3
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>:
     * \param FieldVal {type} 
     * \param MatchVal {type} 
     * \param Match {type} 
     * \param ErrorCode {type} 
     */
    void MatchRequestField(const char * FieldVal, const char * MatchVal, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
    {
      Match&=(strcmp(FieldVal,MatchVal)==0);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	461c      	mov	r4, r3
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	68b8      	ldr	r0, [r7, #8]
 800822c:	f7f7 fffc 	bl	8000228 <strcmp>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	4023      	ands	r3, r4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bf14      	ite	ne
 8008242:	2301      	movne	r3, #1
 8008244:	2300      	moveq	r3, #0
 8008246:	b2da      	uxtb	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	701a      	strb	r2, [r3, #0]
      ErrorCode = ( Match ? N2kgfpec_Acknowledge : N2kgfpec_RequestOrCommandParameterOutOfRange );
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x44>
 8008254:	2200      	movs	r2, #0
 8008256:	e000      	b.n	800825a <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x46>
 8008258:	2203      	movs	r2, #3
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	701a      	strb	r2, [r3, #0]
    }
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	bd90      	pop	{r4, r7, pc}

08008266 <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>:
    unsigned char GetDeviceInstanceLower() const { return DeviceInformation.DeviceInstance & 0x07; }
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	791b      	ldrb	r3, [r3, #4]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	b2db      	uxtb	r3, r3
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	bc80      	pop	{r7}
 8008280:	4770      	bx	lr

08008282 <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>:
    unsigned char GetDeviceInstanceUpper() const { return (DeviceInformation.DeviceInstance>>3) & 0x1f; }
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	b2db      	uxtb	r3, r3
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>:
    unsigned char GetDeviceFunction() const { return DeviceInformation.DeviceFunction; }
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	795b      	ldrb	r3, [r3, #5]
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bc80      	pop	{r7}
 80082b0:	4770      	bx	lr

080082b2 <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>:
    unsigned char GetDeviceClass() const { return DeviceInformation.DeviceClass>>1; }
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	799b      	ldrb	r3, [r3, #6]
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>:
    unsigned char GetIndustryGroup() const { return (DeviceInformation.IndustryGroupAndSystemInstance>>4) & 0x07; }
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	79db      	ldrb	r3, [r3, #7]
 80082d8:	091b      	lsrs	r3, r3, #4
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr

080082ec <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>:
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	79db      	ldrb	r3, [r3, #7]
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <_ZN9tNMEA200020GetDeviceInformationEi>:
    const tDeviceInformation GetDeviceInformation(int iDev=0) { if (iDev<0 || iDev>=DeviceCount) return tDeviceInformation(); return Devices[iDev].DeviceInformation; }
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db04      	blt.n	8008324 <_ZN9tNMEA200020GetDeviceInformationEi+0x1c>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	db03      	blt.n	800832c <_ZN9tNMEA200020GetDeviceInformationEi+0x24>
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fa10 	bl	800774a <_ZN9tNMEA200018tDeviceInformationC1Ev>
 800832a:	e00c      	b.n	8008346 <_ZN9tNMEA200020GetDeviceInformationEi+0x3e>
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8008336:	fb01 f303 	mul.w	r3, r1, r3
 800833a:	4413      	add	r3, r2
 800833c:	68f9      	ldr	r1, [r7, #12]
 800833e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008342:	e9c1 2300 	strd	r2, r3, [r1]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN60928::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b0d0      	sub	sp, #320	; 0x140
 8008354:	af04      	add	r7, sp, #16
 8008356:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800835a:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 800835e:	6020      	str	r0, [r4, #0]
 8008360:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008364:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8008368:	6001      	str	r1, [r0, #0]
 800836a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800836e:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8008372:	600a      	str	r2, [r1, #0]
 8008374:	461a      	mov	r2, r3
 8008376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800837e:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8008380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008384:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681c      	ldr	r4, [r3, #0]
 8008398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80083a0:	881a      	ldrh	r2, [r3, #0]
 80083a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a6:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 80083aa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80083ae:	9303      	str	r3, [sp, #12]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9302      	str	r3, [sp, #8]
 80083b4:	2332      	movs	r3, #50	; 0x32
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	f06f 030f 	mvn.w	r3, #15
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2300      	movs	r3, #0
 80083c0:	6809      	ldr	r1, [r1, #0]
 80083c2:	47a0      	blx	r4
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
  bool MatchFilter=true;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  tN2kMsg N2kRMsg;
 80083d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80083d4:	2300      	movs	r3, #0
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	2300      	movs	r3, #0
 80083da:	2206      	movs	r2, #6
 80083dc:	210f      	movs	r1, #15
 80083de:	f001 fd9f 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	7b19      	ldrb	r1, [r3, #12]
 80083ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80083fe:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	2300      	movs	r3, #0
 800840c:	f7ff fe22 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // Always acknoledge for mandatory PGN
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8008410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008414:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	7b1a      	ldrb	r2, [r3, #12]
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008424:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 8008426:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 81d7 	beq.w	80087de <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
    int i;
    int Index;
    uint8_t field;
    tNMEA2000::tDeviceInformation DI=pNMEA2000->GetDeviceInformation(iDev);
 8008430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008434:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6919      	ldr	r1, [r3, #16]
 800843c:	f107 0318 	add.w	r3, r7, #24
 8008440:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ff5f 	bl	8008308 <_ZN9tNMEA200020GetDeviceInformationEi>
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 800844a:	2300      	movs	r3, #0
 800844c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

    StartParseRequestPairParameters(N2kMsg,Index);
 8008450:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008458:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800845c:	4611      	mov	r1, r2
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	f7ff fd14 	bl	8007e8c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008464:	2300      	movs	r3, #0
 8008466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800846a:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800846e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008472:	429a      	cmp	r2, r3
 8008474:	da14      	bge.n	80084a0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 8008476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10e      	bne.n	800849c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x14c>
 800847e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008482:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	7b5b      	ldrb	r3, [r3, #13]
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff f995 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8008490:	4603      	mov	r3, r0
 8008492:	f083 0301 	eor.w	r3, r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x152>
 80084a0:	2300      	movs	r3, #0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 819b 	beq.w	80087de <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
      if ( !FoundInvalidField) {
 80084a8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80084ac:	f083 0301 	eor.w	r3, r3, #1
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 817a 	beq.w	80087ac <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x45c>
        field=N2kMsg.GetByte(Index);
 80084b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80084c4:	4611      	mov	r1, r2
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	f001 fecc 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        switch (field) {
 80084d2:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b09      	cmp	r3, #9
 80084da:	f200 815a 	bhi.w	8008792 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x442>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x194>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008553 	.word	0x08008553
 80084ec:	0800859f 	.word	0x0800859f
 80084f0:	080085e7 	.word	0x080085e7
 80084f4:	0800862f 	.word	0x0800862f
 80084f8:	08008677 	.word	0x08008677
 80084fc:	08008699 	.word	0x08008699
 8008500:	080086e1 	.word	0x080086e1
 8008504:	08008729 	.word	0x08008729
 8008508:	08008771 	.word	0x08008771
          case N2kPGN60928_UniqueNumber_field:
            MatchRequestField(N2kMsg.Get3ByteUInt(Index),(uint32_t)DI.GetUniqueNumber(),(uint32_t)0x001fffff,MatchFilter,FieldErrorCode);
 800850c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008510:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008514:	681c      	ldr	r4, [r3, #0]
 8008516:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800851a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	f001 fed1 	bl	800a2ce <_ZNK7tN2kMsg12Get3ByteUIntERim>
 800852c:	4605      	mov	r5, r0
 800852e:	f107 0318 	add.w	r3, r7, #24
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff f91a 	bl	800776c <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>
 8008538:	4602      	mov	r2, r0
 800853a:	f107 0317 	add.w	r3, r7, #23
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	4bc7      	ldr	r3, [pc, #796]	; (8008864 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x514>)
 8008548:	4629      	mov	r1, r5
 800854a:	4620      	mov	r0, r4
 800854c:	f001 fac8 	bl	8009ae0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008550:	e132      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ManufacturerCode_field:
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),DI.GetManufacturerCode(),(uint16_t)0x07ff,MatchFilter,FieldErrorCode);
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800855a:	681c      	ldr	r4, [r3, #0]
 800855c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008564:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	f001 fe93 	bl	800a298 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8008572:	4603      	mov	r3, r0
 8008574:	461d      	mov	r5, r3
 8008576:	f107 0318 	add.w	r3, r7, #24
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff f903 	bl	8007786 <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>
 8008580:	4603      	mov	r3, r0
 8008582:	461a      	mov	r2, r3
 8008584:	f107 0317 	add.w	r3, r7, #23
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f207 1327 	addw	r3, r7, #295	; 0x127
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008594:	4629      	mov	r1, r5
 8008596:	4620      	mov	r0, r4
 8008598:	f001 fabe 	bl	8009b18 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800859c:	e10c      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceLower_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceLower(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80085a6:	681c      	ldr	r4, [r3, #0]
 80085a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80085ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085b4:	4611      	mov	r1, r2
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	f001 fe54 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80085bc:	4603      	mov	r3, r0
 80085be:	461d      	mov	r5, r3
 80085c0:	f107 0318 	add.w	r3, r7, #24
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fe4e 	bl	8008266 <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>
 80085ca:	4603      	mov	r3, r0
 80085cc:	461a      	mov	r2, r3
 80085ce:	f107 0317 	add.w	r3, r7, #23
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	f207 1327 	addw	r3, r7, #295	; 0x127
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2307      	movs	r3, #7
 80085dc:	4629      	mov	r1, r5
 80085de:	4620      	mov	r0, r4
 80085e0:	f001 fabd 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80085e4:	e0e8      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceUpper_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceUpper(),(uint8_t)0x1f,MatchFilter,FieldErrorCode);
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80085ee:	681c      	ldr	r4, [r3, #0]
 80085f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80085f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085fc:	4611      	mov	r1, r2
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	f001 fe30 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008604:	4603      	mov	r3, r0
 8008606:	461d      	mov	r5, r3
 8008608:	f107 0318 	add.w	r3, r7, #24
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fe38 	bl	8008282 <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	f107 0317 	add.w	r3, r7, #23
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	231f      	movs	r3, #31
 8008624:	4629      	mov	r1, r5
 8008626:	4620      	mov	r0, r4
 8008628:	f001 fa99 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800862c:	e0c4      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceFunction_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceFunction(),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 800862e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008632:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008636:	681c      	ldr	r4, [r3, #0]
 8008638:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800863c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008640:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008644:	4611      	mov	r1, r2
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	f001 fe0c 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800864c:	4603      	mov	r3, r0
 800864e:	461d      	mov	r5, r3
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fe21 	bl	800829c <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>
 800865a:	4603      	mov	r3, r0
 800865c:	461a      	mov	r2, r3
 800865e:	f107 0317 	add.w	r3, r7, #23
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	23ff      	movs	r3, #255	; 0xff
 800866c:	4629      	mov	r1, r5
 800866e:	4620      	mov	r0, r4
 8008670:	f001 fa75 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008674:	e0a0      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_Reserved_field:
            N2kMsg.GetByte(Index);
 8008676:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800867a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008682:	4611      	mov	r1, r2
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	f001 fded 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 800868a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800868e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
            break;
 8008696:	e08f      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceClass_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceClass(),(uint8_t)0x7f,MatchFilter,FieldErrorCode);
 8008698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80086a0:	681c      	ldr	r4, [r3, #0]
 80086a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80086ae:	4611      	mov	r1, r2
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f001 fdd7 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461d      	mov	r5, r3
 80086ba:	f107 0318 	add.w	r3, r7, #24
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff fdf7 	bl	80082b2 <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	f107 0317 	add.w	r3, r7, #23
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	f207 1327 	addw	r3, r7, #295	; 0x127
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	237f      	movs	r3, #127	; 0x7f
 80086d6:	4629      	mov	r1, r5
 80086d8:	4620      	mov	r0, r4
 80086da:	f001 fa40 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80086de:	e06b      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_SystemInstance_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetSystemInstance(),(uint8_t)0x0f,MatchFilter,FieldErrorCode);
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80086e8:	681c      	ldr	r4, [r3, #0]
 80086ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80086f6:	4611      	mov	r1, r2
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f001 fdb3 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80086fe:	4603      	mov	r3, r0
 8008700:	461d      	mov	r5, r3
 8008702:	f107 0318 	add.w	r3, r7, #24
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fdf0 	bl	80082ec <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	f107 0317 	add.w	r3, r7, #23
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f207 1327 	addw	r3, r7, #295	; 0x127
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	230f      	movs	r3, #15
 800871e:	4629      	mov	r1, r5
 8008720:	4620      	mov	r0, r4
 8008722:	f001 fa1c 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008726:	e047      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_IndustryGroup_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetIndustryGroup(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 8008728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008730:	681c      	ldr	r4, [r3, #0]
 8008732:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800873e:	4611      	mov	r1, r2
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f001 fd8f 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008746:	4603      	mov	r3, r0
 8008748:	461d      	mov	r5, r3
 800874a:	f107 0318 	add.w	r3, r7, #24
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff fdbc 	bl	80082cc <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	f107 0317 	add.w	r3, r7, #23
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2307      	movs	r3, #7
 8008766:	4629      	mov	r1, r5
 8008768:	4620      	mov	r0, r4
 800876a:	f001 f9f8 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800876e:	e023      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ISOSelfConfigurable_field:
            N2kMsg.GetByte(Index);
 8008770:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008778:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800877c:	4611      	mov	r1, r2
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	f001 fd70 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
            break;
 8008790:	e012      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            FoundInvalidField=true;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 80087aa:	e005      	b.n	80087b8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 80087ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80087b4:	2202      	movs	r2, #2
 80087b6:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 80087b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087bc:	b2d9      	uxtb	r1, r3
 80087be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80087c6:	781a      	ldrb	r2, [r3, #0]
 80087c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fc7b 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 80087d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d6:	3301      	adds	r3, #1
 80087d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80087dc:	e645      	b.n	800846a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x11a>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 80087de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 80087e6:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a4>
 80087f2:	2300      	movs	r3, #0
 80087f4:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 80087f8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80087fc:	f083 0301 	eor.w	r3, r3, #1
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01c      	beq.n	8008840 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4f0>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	7b5b      	ldrb	r3, [r3, #13]
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe ffd1 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8008818:	4603      	mov	r3, r0
 800881a:	f083 0301 	eor.w	r3, r3, #1
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d019      	beq.n	8008858 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
 8008824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008828:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008834:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008838:	4618      	mov	r0, r3
 800883a:	f005 f9b7 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800883e:	e00b      	b.n	8008858 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
  } else {
    // Send delayed - there was problems with test tool with too fast response.
    pNMEA2000->SendIsoAddressClaim(0xff,iDev,2);
 8008840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008844:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6918      	ldr	r0, [r3, #16]
 800884c:	2302      	movs	r3, #2
 800884e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008852:	21ff      	movs	r1, #255	; 0xff
 8008854:	f007 fa7f 	bl	800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
  }

  return true;
 8008858:	2301      	movs	r3, #1
}
 800885a:	4618      	mov	r0, r3
 800885c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008860:	46bd      	mov	sp, r7
 8008862:	bdb0      	pop	{r4, r5, r7, pc}
 8008864:	001fffff 	.word	0x001fffff

08008868 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 60928 can be used to set Device Instance Lower, Device Instance Upper and System Instance
// values on device name. They all are in padded to one byte.
bool tN2kGroupFunctionHandlerForPGN60928::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b0cb      	sub	sp, #300	; 0x12c
 800886c:	af02      	add	r7, sp, #8
 800886e:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008872:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008876:	6020      	str	r0, [r4, #0]
 8008878:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800887c:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8008880:	6001      	str	r1, [r0, #0]
 8008882:	4619      	mov	r1, r3
 8008884:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008888:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008892:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8008896:	460a      	mov	r2, r1
 8008898:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  uint8_t DILower=0xff;
 800889a:	23ff      	movs	r3, #255	; 0xff
 800889c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  uint8_t DIUpper=0xff;
 80088a0:	23ff      	movs	r3, #255	; 0xff
 80088a2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
  uint8_t SI=0xff;
 80088a6:	23ff      	movs	r3, #255	; 0xff
 80088a8:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  tN2kGroupFunctionParameterErrorCode PARec;
  tN2kMsg N2kRMsg;
 80088b2:	f107 0014 	add.w	r0, r7, #20
 80088b6:	2300      	movs	r3, #0
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	2206      	movs	r2, #6
 80088be:	210f      	movs	r1, #15
 80088c0:	f001 fb2e 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 80088c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	7b19      	ldrb	r1, [r3, #12]
 80088d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	f107 0014 	add.w	r0, r7, #20
 80088e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088e4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	f7ff fbae 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    if (PrioritySetting!=8) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 80088f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088fc:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b08      	cmp	r3, #8
 8008904:	d002      	beq.n	800890c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xa4>
 8008906:	2301      	movs	r3, #1
 8008908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    StartParseCommandPairParameters(N2kMsg,Index);
 800890c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008910:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008914:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008918:	4611      	mov	r1, r2
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f7ff faf8 	bl	8007f10 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 8008920:	2300      	movs	r3, #0
 8008922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008926:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800892a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008934:	429a      	cmp	r2, r3
 8008936:	da5d      	bge.n	80089f4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x18c>
      field=N2kMsg.GetByte(Index);
 8008938:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800893c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008940:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008944:	4611      	mov	r1, r2
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	f001 fc8c 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      PARec=N2kgfpec_Acknowledge;
 8008952:	2300      	movs	r3, #0
 8008954:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      switch (field) {
 8008958:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800895c:	2b08      	cmp	r3, #8
 800895e:	d026      	beq.n	80089ae <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x146>
 8008960:	2b08      	cmp	r3, #8
 8008962:	dc34      	bgt.n	80089ce <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d002      	beq.n	800896e <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x106>
 8008968:	2b04      	cmp	r3, #4
 800896a:	d010      	beq.n	800898e <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x126>
 800896c:	e02f      	b.n	80089ce <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
        case N2kPGN60928_DeviceInstanceLower_field:
          DILower=N2kMsg.GetByte(Index) & 0x7;
 800896e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008972:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008976:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800897a:	4611      	mov	r1, r2
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	f001 fc71 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008982:	4603      	mov	r3, r0
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
          break;
 800898c:	e022      	b.n	80089d4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_DeviceInstanceUpper_field:
          DIUpper=N2kMsg.GetByte(Index) & 0x1f;
 800898e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008992:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008996:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800899a:	4611      	mov	r1, r2
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	f001 fc61 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f003 031f 	and.w	r3, r3, #31
 80089a8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
          break;
 80089ac:	e012      	b.n	80089d4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_SystemInstance_field:
          SI=N2kMsg.GetByte(Index) & 0x0f;
 80089ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80089b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80089ba:	4611      	mov	r1, r2
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f001 fc51 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
          break;
 80089cc:	e002      	b.n	80089d4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        default:
          PARec=N2kgfpec_InvalidRequestOrCommandParameterField;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      }

      AddAcknowledgeParameter(N2kRMsg,i,PARec);
 80089d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089d8:	b2d9      	uxtb	r1, r3
 80089da:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 80089de:	f107 0314 	add.w	r3, r7, #20
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fb70 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 80089e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089ec:	3301      	adds	r3, #1
 80089ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80089f2:	e798      	b.n	8008926 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xbe>
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 80089f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f107 0114 	add.w	r1, r7, #20
 8008a04:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f005 f8cf 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    pNMEA2000->SetDeviceInformationInstances(DILower,DIUpper,SI,iDev);
 8008a0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6918      	ldr	r0, [r3, #16]
 8008a1a:	f897 4119 	ldrb.w	r4, [r7, #281]	; 0x119
 8008a1e:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 8008a22:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8008a26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	f004 fa72 	bl	800cf16 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>

    return true;
 8008a32:	2301      	movs	r3, #1
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}

08008a3e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126464::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b0cd      	sub	sp, #308	; 0x134
 8008a42:	af04      	add	r7, sp, #16
 8008a44:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008a48:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008a4c:	6020      	str	r0, [r4, #0]
 8008a4e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008a52:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8008a56:	6001      	str	r1, [r0, #0]
 8008a58:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008a5c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8008a60:	600a      	str	r2, [r1, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a68:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8008a6c:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8008a6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681c      	ldr	r4, [r3, #0]
 8008a86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a8a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8008a8e:	881a      	ldrh	r2, [r3, #0]
 8008a90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a94:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 8008a98:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008a9c:	9303      	str	r3, [sp, #12]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	9302      	str	r3, [sp, #8]
 8008aa2:	2332      	movs	r3, #50	; 0x32
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	f06f 030f 	mvn.w	r3, #15
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	2300      	movs	r3, #0
 8008aae:	6809      	ldr	r1, [r1, #0]
 8008ab0:	47a0      	blx	r4
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  bool MatchFilter=true;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t RespondTxRx=0xff;
 8008abe:	23ff      	movs	r3, #255	; 0xff
 8008ac0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  tN2kMsg N2kRMsg;
 8008ac4:	f107 0014 	add.w	r0, r7, #20
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	2300      	movs	r3, #0
 8008ace:	2206      	movs	r2, #6
 8008ad0:	210f      	movs	r1, #15
 8008ad2:	f001 fa25 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8008ad6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ada:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	7b19      	ldrb	r1, [r3, #12]
 8008ae2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ae6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	f107 0014 	add.w	r0, r7, #20
 8008af2:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	2300      	movs	r3, #0
 8008b00:	f7ff faa8 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8008b04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	7b1a      	ldrb	r2, [r3, #12]
 8008b10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b18:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 8008b1a:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8083 	beq.w	8008c2a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 8008b24:	2300      	movs	r3, #0
 8008b26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    StartParseRequestPairParameters(N2kMsg,Index);
 8008b2a:	f107 0210 	add.w	r2, r7, #16
 8008b2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008b36:	4611      	mov	r1, r2
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f7ff f9a7 	bl	8007e8c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b44:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8008b48:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	da14      	bge.n	8008b7a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 8008b50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10e      	bne.n	8008b76 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x138>
 8008b58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	7b5b      	ldrb	r3, [r3, #13]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fe28 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f083 0301 	eor.w	r3, r3, #1
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13e>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d054      	beq.n	8008c2a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
      if ( !FoundInvalidField) {
 8008b80:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8008b84:	f083 0301 	eor.w	r3, r3, #1
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d03a      	beq.n	8008c04 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1c6>
        field=N2kMsg.GetByte(Index);
 8008b8e:	f107 0210 	add.w	r2, r7, #16
 8008b92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f001 fb61 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
        switch (field) {
 8008ba8:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d11f      	bne.n	8008bf0 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1b2>
          case 1: // Selection of Tx or Rx
            RespondTxRx=N2kMsg.GetByte(Index);
 8008bb0:	f107 0210 	add.w	r2, r7, #16
 8008bb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	f001 fb50 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
            if ( RespondTxRx==N2kpgnl_transmit || RespondTxRx==N2kpgnl_receive ) {
 8008bca:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x19c>
 8008bd2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d103      	bne.n	8008be2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1a4>
              FieldErrorCode=N2kgfpec_Acknowledge;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            } else {
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
              MatchFilter=false;
            }
            break;
 8008be0:	e013      	b.n	8008c0a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8008be2:	2303      	movs	r3, #3
 8008be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
              MatchFilter=false;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8008bee:	e00c      	b.n	8008c0a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            MatchFilter=false;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            FoundInvalidField=true;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008c02:	e002      	b.n	8008c0a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 8008c04:	2302      	movs	r3, #2
 8008c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 8008c0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c0e:	b2d9      	uxtb	r1, r3
 8008c10:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8008c14:	f107 0314 	add.w	r3, r7, #20
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fa55 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008c1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c22:	3301      	adds	r3, #1
 8008c24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c28:	e78c      	b.n	8008b44 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x106>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8008c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 8008c32:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x202>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8008c44:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8008c48:	f083 0301 	eor.w	r3, r3, #1
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01c      	beq.n	8008c8c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x24e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 8008c52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c56:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	7b5b      	ldrb	r3, [r3, #13]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fdab 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f083 0301 	eor.w	r3, r3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d072      	beq.n	8008d56 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 8008c70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	f107 0114 	add.w	r1, r7, #20
 8008c80:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008c84:	4618      	mov	r0, r3
 8008c86:	f004 ff91 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8008c8a:	e064      	b.n	8008d56 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 8008c8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	7b1b      	ldrb	r3, [r3, #12]
 8008c98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 8008c9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ca0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f7ff faa9 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00d      	beq.n	8008ccc <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 8008cb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	7b5b      	ldrb	r3, [r3, #13]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fd7c 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e000      	b.n	8008cce <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x290>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2a4>
 8008cd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cd6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	7b5b      	ldrb	r3, [r3, #13]
 8008cde:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 8008ce2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2b4>
 8008cea:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008cee:	2bff      	cmp	r3, #255	; 0xff
 8008cf0:	d114      	bne.n	8008d1c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2de>
 8008cf2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cf6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691c      	ldr	r4, [r3, #16]
 8008cfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	f7ff fa78 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8008d12:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008d16:	4620      	mov	r0, r4
 8008d18:	f007 f8ce 	bl	800feb8 <_ZN9tNMEA200013SendTxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 8008d1c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d003      	beq.n	8008d2c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2ee>
 8008d24:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008d28:	2bff      	cmp	r3, #255	; 0xff
 8008d2a:	d114      	bne.n	8008d56 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 8008d2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691c      	ldr	r4, [r3, #16]
 8008d38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f7ff fa5b 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8008d4c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008d50:	4620      	mov	r0, r4
 8008d52:	f007 f9c7 	bl	80100e4 <_ZN9tNMEA200013SendRxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(N2kMsg.Source,iDev);
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(N2kMsg.Source,iDev);
#endif
  }

  return true;
 8008d56:	2301      	movs	r3, #1
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd90      	pop	{r4, r7, pc}
	...

08008d64 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126996::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	b0d5      	sub	sp, #340	; 0x154
 8008d6a:	af04      	add	r7, sp, #16
 8008d6c:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8008d70:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
 8008d74:	6030      	str	r0, [r6, #0]
 8008d76:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008d7a:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008d84:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8008d88:	600a      	str	r2, [r1, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d90:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008d94:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8008d96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681e      	ldr	r6, [r3, #0]
 8008dae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008db2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008db6:	881a      	ldrh	r2, [r3, #0]
 8008db8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dbc:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8008dc0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9302      	str	r3, [sp, #8]
 8008dca:	2332      	movs	r3, #50	; 0x32
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	f06f 030f 	mvn.w	r3, #15
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6809      	ldr	r1, [r1, #0]
 8008dd8:	47b0      	blx	r6
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  bool MatchFilter=true;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
  tN2kMsg N2kRMsg;
 8008de6:	f107 0020 	add.w	r0, r7, #32
 8008dea:	2300      	movs	r3, #0
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	2206      	movs	r2, #6
 8008df2:	210f      	movs	r1, #15
 8008df4:	f001 f894 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8008df8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	7b19      	ldrb	r1, [r3, #12]
 8008e04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	f107 0020 	add.w	r0, r7, #32
 8008e14:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2300      	movs	r3, #0
 8008e22:	f7ff f917 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8008e26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	7b1a      	ldrb	r2, [r3, #12]
 8008e32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e3a:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 8008e3c:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8254 	beq.w	80092ee <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x58a>
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
    }
 8008e46:	466b      	mov	r3, sp
 8008e48:	461e      	mov	r6, r3
    bool FoundInvalidField=false;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    size_t strSize=Max_N2kProductInfoStrLen;
 8008e50:	2321      	movs	r3, #33	; 0x21
 8008e52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    char Query[strSize];
 8008e56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e5a:	1e59      	subs	r1, r3, #1
 8008e5c:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8008e60:	460b      	mov	r3, r1
 8008e62:	3301      	adds	r3, #1
 8008e64:	2200      	movs	r2, #0
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	00c3      	lsls	r3, r0, #3
 8008e76:	6838      	ldr	r0, [r7, #0]
 8008e78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008e7c:	6838      	ldr	r0, [r7, #0]
 8008e7e:	00c2      	lsls	r2, r0, #3
 8008e80:	460b      	mov	r3, r1
 8008e82:	3301      	adds	r3, #1
 8008e84:	2200      	movs	r2, #0
 8008e86:	469a      	mov	sl, r3
 8008e88:	4693      	mov	fp, r2
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	08db      	lsrs	r3, r3, #3
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	ebad 0d03 	sub.w	sp, sp, r3
 8008eac:	ab04      	add	r3, sp, #16
 8008eae:	3300      	adds	r3, #0
 8008eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    char CurVal[strSize];
 8008eb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008eb8:	1e59      	subs	r1, r3, #1
 8008eba:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4698      	mov	r8, r3
 8008ec6:	4691      	mov	r9, r2
 8008ec8:	f04f 0200 	mov.w	r2, #0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ed4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ed8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008edc:	460b      	mov	r3, r1
 8008ede:	3301      	adds	r3, #1
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	461c      	mov	r4, r3
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	00eb      	lsls	r3, r5, #3
 8008ef0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ef4:	00e2      	lsls	r2, r4, #3
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	3301      	adds	r3, #1
 8008efa:	3307      	adds	r3, #7
 8008efc:	08db      	lsrs	r3, r3, #3
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	ebad 0d03 	sub.w	sp, sp, r3
 8008f04:	ab04      	add	r3, sp, #16
 8008f06:	3300      	adds	r3, #0
 8008f08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    StartParseRequestPairParameters(N2kMsg,Index);
 8008f0c:	f107 021c 	add.w	r2, r7, #28
 8008f10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f18:	4611      	mov	r1, r2
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	f7fe ffb6 	bl	8007e8c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008f26:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8008f2a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	da14      	bge.n	8008f5c <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 8008f32:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10e      	bne.n	8008f58 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f4>
 8008f3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	7b5b      	ldrb	r3, [r3, #13]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fc37 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f083 0301 	eor.w	r3, r3, #1
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e000      	b.n	8008f5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1fa>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 81c4 	beq.w	80092ec <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x588>
      if ( !FoundInvalidField) {
 8008f64:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8008f68:	f083 0301 	eor.w	r3, r3, #1
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 81a3 	beq.w	80092ba <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x556>
        field=N2kMsg.GetByte(Index);
 8008f74:	f107 021c 	add.w	r2, r7, #28
 8008f78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f80:	4611      	mov	r1, r2
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	f001 f96e 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        switch (field) {
 8008f8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008f92:	3b01      	subs	r3, #1
 8008f94:	2b07      	cmp	r3, #7
 8008f96:	f200 8183 	bhi.w	80092a0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x53c>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x23c>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fc1 	.word	0x08008fc1
 8008fa4:	08009019 	.word	0x08009019
 8008fa8:	08009071 	.word	0x08009071
 8008fac:	080090d3 	.word	0x080090d3
 8008fb0:	08009135 	.word	0x08009135
 8008fb4:	08009197 	.word	0x08009197
 8008fb8:	080091f9 	.word	0x080091f9
 8008fbc:	0800924d 	.word	0x0800924d
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetN2kVersion(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 8008fc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	f107 011c 	add.w	r1, r7, #28
 8008fce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	f001 f95c 	bl	800a298 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f003 fd8b 	bl	800cb10 <_ZNK9tNMEA200013GetN2kVersionEi>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f107 031b 	add.w	r3, r7, #27
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800900e:	4629      	mov	r1, r5
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fd81 	bl	8009b18 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8009016:	e156      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetProductCode(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 8009018:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800901c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	f107 011c 	add.w	r1, r7, #28
 8009026:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800902a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800902e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	f001 f930 	bl	800a298 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8009038:	4603      	mov	r3, r0
 800903a:	461d      	mov	r5, r3
 800903c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800904c:	4618      	mov	r0, r3
 800904e:	f003 fd80 	bl	800cb52 <_ZNK9tNMEA200014GetProductCodeEi>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	f107 031b 	add.w	r3, r7, #27
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009066:	4629      	mov	r1, r5
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fd55 	bl	8009b18 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800906e:	e12a      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelID_len,0xff,Index);
 8009070:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009074:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8009078:	f107 031c 	add.w	r3, r7, #28
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	23ff      	movs	r3, #255	; 0xff
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	2320      	movs	r3, #32
 8009084:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009088:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800908c:	6800      	ldr	r0, [r0, #0]
 800908e:	f001 f970 	bl	800a372 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8009092:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6918      	ldr	r0, [r3, #16]
 800909e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80090a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80090a6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80090aa:	f003 fd73 	bl	800cb94 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 80090ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	f207 121d 	addw	r2, r7, #285	; 0x11d
 80090bc:	f107 031b 	add.w	r3, r7, #27
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	4613      	mov	r3, r2
 80090c4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80090c8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80090cc:	f7ff f8a2 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80090d0:	e0f9      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kSwCode_len,0xff,Index);
 80090d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090d6:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 80090da:	f107 031c 	add.w	r3, r7, #28
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	23ff      	movs	r3, #255	; 0xff
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	2320      	movs	r3, #32
 80090e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80090ea:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80090ee:	6800      	ldr	r0, [r0, #0]
 80090f0:	f001 f93f 	bl	800a372 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 80090f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6918      	ldr	r0, [r3, #16]
 8009100:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009104:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009108:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800910c:	f003 fd42 	bl	800cb94 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8009110:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	f207 121d 	addw	r2, r7, #285	; 0x11d
 800911e:	f107 031b 	add.w	r3, r7, #27
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4613      	mov	r3, r2
 8009126:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800912a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800912e:	f7ff f871 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8009132:	e0c8      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelVersion_len,0xff,Index);
 8009134:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009138:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800913c:	f107 031c 	add.w	r3, r7, #28
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	23ff      	movs	r3, #255	; 0xff
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	2320      	movs	r3, #32
 8009148:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800914c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009150:	6800      	ldr	r0, [r0, #0]
 8009152:	f001 f90e 	bl	800a372 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8009156:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800915a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6918      	ldr	r0, [r3, #16]
 8009162:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009166:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800916a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800916e:	f003 fd11 	bl	800cb94 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8009172:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8009180:	f107 031b 	add.w	r3, r7, #27
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	4613      	mov	r3, r2
 8009188:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800918c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009190:	f7ff f840 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8009194:	e097      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelSerialCode_len,0xff,Index);
 8009196:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800919a:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800919e:	f107 031c 	add.w	r3, r7, #28
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	23ff      	movs	r3, #255	; 0xff
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	2320      	movs	r3, #32
 80091aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091ae:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80091b2:	6800      	ldr	r0, [r0, #0]
 80091b4:	f001 f8dd 	bl	800a372 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 80091b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6918      	ldr	r0, [r3, #16]
 80091c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80091c8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80091cc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80091d0:	f003 fce0 	bl	800cb94 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 80091d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f207 121d 	addw	r2, r7, #285	; 0x11d
 80091e2:	f107 031b 	add.w	r3, r7, #27
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80091ee:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80091f2:	f7ff f80f 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80091f6:	e066      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetCertificationLevel(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 80091f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009200:	681c      	ldr	r4, [r3, #0]
 8009202:	f107 021c 	add.w	r2, r7, #28
 8009206:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800920a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800920e:	4611      	mov	r1, r2
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f001 f827 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8009216:	4603      	mov	r3, r0
 8009218:	461d      	mov	r5, r3
 800921a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800921e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800922a:	4618      	mov	r0, r3
 800922c:	f003 fce6 	bl	800cbfc <_ZNK9tNMEA200021GetCertificationLevelEi>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	f107 031b 	add.w	r3, r7, #27
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	f207 131d 	addw	r3, r7, #285	; 0x11d
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	23ff      	movs	r3, #255	; 0xff
 8009242:	4629      	mov	r1, r5
 8009244:	4620      	mov	r0, r4
 8009246:	f000 fc8a 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800924a:	e03c      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetLoadEquivalency(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 800924c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009254:	681c      	ldr	r4, [r3, #0]
 8009256:	f107 021c 	add.w	r2, r7, #28
 800925a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800925e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009262:	4611      	mov	r1, r2
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	f000 fffd 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800926a:	4603      	mov	r3, r0
 800926c:	461d      	mov	r5, r3
 800926e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800927e:	4618      	mov	r0, r3
 8009280:	f003 fcdf 	bl	800cc42 <_ZNK9tNMEA200018GetLoadEquivalencyEi>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	f107 031b 	add.w	r3, r7, #27
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	23ff      	movs	r3, #255	; 0xff
 8009296:	4629      	mov	r1, r5
 8009298:	4620      	mov	r0, r4
 800929a:	f000 fc60 	bl	8009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800929e:	e012      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 80092a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092a4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80092a8:	2201      	movs	r2, #1
 80092aa:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
            FoundInvalidField=true;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 80092b8:	e005      	b.n	80092c6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 80092ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092be:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80092c2:	2202      	movs	r2, #2
 80092c4:	701a      	strb	r2, [r3, #0]
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 80092c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80092ca:	b2d9      	uxtb	r1, r3
 80092cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092d0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	f107 0320 	add.w	r3, r7, #32
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe fef4 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 80092e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80092e4:	3301      	adds	r3, #1
 80092e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80092ea:	e61c      	b.n	8008f26 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1c2>
 80092ec:	46b5      	mov	sp, r6
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 80092ee:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 80092f6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 80092fe:	2301      	movs	r3, #1
 8009300:	e000      	b.n	8009304 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5a0>
 8009302:	2300      	movs	r3, #0
 8009304:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8009308:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800930c:	f083 0301 	eor.w	r3, r3, #1
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01c      	beq.n	8009350 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5ec>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 8009316:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800931a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	7b5b      	ldrb	r3, [r3, #13]
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fa49 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8009328:	4603      	mov	r3, r0
 800932a:	f083 0301 	eor.w	r3, r3, #1
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d04d      	beq.n	80093d0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
 8009334:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f107 0120 	add.w	r1, r7, #32
 8009344:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8009348:	4618      	mov	r0, r3
 800934a:	f004 fc2f 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800934e:	e03f      	b.n	80093d0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 8009350:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	7b1b      	ldrb	r3, [r3, #12]
 800935c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 8009360:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	f7fe ff47 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00d      	beq.n	8009390 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 8009374:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	7b5b      	ldrb	r3, [r3, #13]
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fa1a 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62e>
 8009390:	2300      	movs	r3, #0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x642>
 8009396:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800939a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	7b5b      	ldrb	r3, [r3, #13]
 80093a2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    pNMEA2000->SendProductInformation(dest,iDev,N2kMsg.IsTPMessage());
 80093a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691c      	ldr	r4, [r3, #16]
 80093b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	f7fe ff1e 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 80093c6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80093ca:	4620      	mov	r0, r4
 80093cc:	f007 f88a 	bl	80104e4 <_ZN9tNMEA200022SendProductInformationEhib>
#else
    pNMEA2000->SendProductInformation(iDev);
#endif
  }

  return true;
 80093d0:	2301      	movs	r3, #1
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80093d8:	46bd      	mov	sp, r7
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	bf00      	nop

080093e0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126998::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b0f3      	sub	sp, #460	; 0x1cc
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 80093ea:	f5a4 74d6 	sub.w	r4, r4, #428	; 0x1ac
 80093ee:	6020      	str	r0, [r4, #0]
 80093f0:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 80093f4:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 80093f8:	6001      	str	r1, [r0, #0]
 80093fa:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80093fe:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 8009402:	600a      	str	r2, [r1, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800940a:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 800940e:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8009410:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009414:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800941e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681c      	ldr	r4, [r3, #0]
 8009428:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800942c:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 8009430:	881a      	ldrh	r2, [r3, #0]
 8009432:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009436:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 800943a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800943e:	9303      	str	r3, [sp, #12]
 8009440:	2300      	movs	r3, #0
 8009442:	9302      	str	r3, [sp, #8]
 8009444:	2332      	movs	r3, #50	; 0x32
 8009446:	9301      	str	r3, [sp, #4]
 8009448:	f06f 030f 	mvn.w	r3, #15
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	2300      	movs	r3, #0
 8009450:	6809      	ldr	r1, [r1, #0]
 8009452:	47a0      	blx	r4
 8009454:	4603      	mov	r3, r0
 8009456:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
  bool MatchFilter=true;
 800945a:	2301      	movs	r3, #1
 800945c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
  tN2kMsg N2kRMsg;
 8009460:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009464:	2300      	movs	r3, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	2206      	movs	r2, #6
 800946c:	210f      	movs	r1, #15
 800946e:	f000 fd57 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8009472:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009476:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	7b19      	ldrb	r1, [r3, #12]
 800947e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009482:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800948e:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	2300      	movs	r3, #0
 800949c:	f7fe fdda 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 80094a0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	7b1a      	ldrb	r2, [r3, #12]
 80094ac:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b4:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 80094b6:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8109 	beq.w	80096d2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
    char Query[Max_N2kConfigurationInfoField_len];
    char CurVal[Max_N2kConfigurationInfoField_len];
    size_t QueryStrSize;

    StartParseRequestPairParameters(N2kMsg,Index);
 80094c6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80094ca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80094d2:	4611      	mov	r1, r2
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f7fe fcd9 	bl	8007e8c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 80094da:	2300      	movs	r3, #0
 80094dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80094e0:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80094e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80094e8:	429a      	cmp	r2, r3
 80094ea:	da14      	bge.n	8009516 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 80094ec:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10e      	bne.n	8009512 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x132>
 80094f4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	7b5b      	ldrb	r3, [r3, #13]
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe f95a 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8009506:	4603      	mov	r3, r0
 8009508:	f083 0301 	eor.w	r3, r3, #1
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x138>
 8009516:	2300      	movs	r3, #0
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80da 	beq.w	80096d2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
      if ( !FoundInvalidField) {
 800951e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009522:	f083 0301 	eor.w	r3, r3, #1
 8009526:	b2db      	uxtb	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 80b9 	beq.w	80096a0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2c0>
        field=N2kMsg.GetByte(Index);
 800952e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009532:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009536:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800953a:	4611      	mov	r1, r2
 800953c:	6818      	ldr	r0, [r3, #0]
 800953e:	f000 fe91 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8009542:	4603      	mov	r3, r0
 8009544:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
        switch (field) {
 8009548:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 800954c:	2b03      	cmp	r3, #3
 800954e:	d069      	beq.n	8009624 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x244>
 8009550:	2b03      	cmp	r3, #3
 8009552:	f300 8098 	bgt.w	8009686 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
 8009556:	2b01      	cmp	r3, #1
 8009558:	d002      	beq.n	8009560 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x180>
 800955a:	2b02      	cmp	r3, #2
 800955c:	d031      	beq.n	80095c2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x1e2>
 800955e:	e092      	b.n	8009686 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
          case N2kPGN126998_InstallationDescription1_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 8009560:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009564:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009568:	2247      	movs	r2, #71	; 0x47
 800956a:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 800956c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009570:	f107 0214 	add.w	r2, r7, #20
 8009574:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009578:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 800957c:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 8009580:	6800      	ldr	r0, [r0, #0]
 8009582:	f000 ff76 	bl	800a472 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription1(CurVal,Max_N2kConfigurationInfoField_len);
 8009586:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800958a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8009596:	2247      	movs	r2, #71	; 0x47
 8009598:	4618      	mov	r0, r3
 800959a:	f003 fbf1 	bl	800cd80 <_ZN9tNMEA200027GetInstallationDescription1EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800959e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80095a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 80095ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80095b0:	f107 0114 	add.w	r1, r7, #20
 80095b4:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	4623      	mov	r3, r4
 80095bc:	f7fe fe2a 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80095c0:	e074      	b.n	80096ac <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_InstallationDescription2_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 80095c2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80095c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80095ca:	2247      	movs	r2, #71	; 0x47
 80095cc:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 80095ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80095d2:	f107 0214 	add.w	r2, r7, #20
 80095d6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80095da:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 80095de:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 80095e2:	6800      	ldr	r0, [r0, #0]
 80095e4:	f000 ff45 	bl	800a472 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription2(CurVal,Max_N2kConfigurationInfoField_len);
 80095e8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80095ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80095f8:	2247      	movs	r2, #71	; 0x47
 80095fa:	4618      	mov	r0, r3
 80095fc:	f003 fbdd 	bl	800cdba <_ZN9tNMEA200027GetInstallationDescription2EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8009600:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009604:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 800960e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009612:	f107 0114 	add.w	r1, r7, #20
 8009616:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4623      	mov	r3, r4
 800961e:	f7fe fdf9 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8009622:	e043      	b.n	80096ac <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_ManufacturerInformation_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 8009624:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009628:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800962c:	2247      	movs	r2, #71	; 0x47
 800962e:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 8009630:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009634:	f107 0214 	add.w	r2, r7, #20
 8009638:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800963c:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8009640:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 8009644:	6800      	ldr	r0, [r0, #0]
 8009646:	f000 ff14 	bl	800a472 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetManufacturerInformation(CurVal,Max_N2kConfigurationInfoField_len);
 800964a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800964e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800965a:	2247      	movs	r2, #71	; 0x47
 800965c:	4618      	mov	r0, r3
 800965e:	f003 fbc9 	bl	800cdf4 <_ZN9tNMEA200026GetManufacturerInformationEPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8009662:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009666:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 8009670:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009674:	f107 0114 	add.w	r1, r7, #20
 8009678:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	4623      	mov	r3, r4
 8009680:	f7fe fdc8 	bl	8008214 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8009684:	e012      	b.n	80096ac <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8009686:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800968a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800968e:	2201      	movs	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 8009692:	2300      	movs	r3, #0
 8009694:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
            FoundInvalidField=true;
 8009698:	2301      	movs	r3, #1
 800969a:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 800969e:	e005      	b.n	80096ac <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 80096a0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80096a4:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80096a8:	2202      	movs	r2, #2
 80096aa:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 80096ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80096b0:	b2d9      	uxtb	r1, r3
 80096b2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80096b6:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fe fd01 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 80096c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80096ca:	3301      	adds	r3, #1
 80096cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80096d0:	e706      	b.n	80094e0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x100>
    }

  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 80096d2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d005      	beq.n	80096e6 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 80096da:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x308>
 80096e6:	2300      	movs	r3, #0
 80096e8:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 80096ec:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80096f0:	f083 0301 	eor.w	r3, r3, #1
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01c      	beq.n	8009734 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x354>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 80096fa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80096fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	7b5b      	ldrb	r3, [r3, #13]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe f857 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800970c:	4603      	mov	r3, r0
 800970e:	f083 0301 	eor.w	r3, r3, #1
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d04d      	beq.n	80097b4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
 8009718:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800971c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8009728:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800972c:	4618      	mov	r0, r3
 800972e:	f004 fa3d 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8009732:	e03f      	b.n	80097b4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 8009734:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009738:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	7b1b      	ldrb	r3, [r3, #12]
 8009740:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 8009744:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009748:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	f7fe fd55 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00d      	beq.n	8009774 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 8009758:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800975c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	7b5b      	ldrb	r3, [r3, #13]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe f828 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x396>
 8009774:	2300      	movs	r3, #0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d007      	beq.n	800978a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3aa>
 800977a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800977e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	7b5b      	ldrb	r3, [r3, #13]
 8009786:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    pNMEA2000->SendConfigurationInformation(dest,iDev,N2kMsg.IsTPMessage());
 800978a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800978e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691c      	ldr	r4, [r3, #16]
 8009796:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800979a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	f7fe fd2c 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f897 11b2 	ldrb.w	r1, [r7, #434]	; 0x1b2
 80097aa:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80097ae:	4620      	mov	r0, r4
 80097b0:	f007 f830 	bl	8010814 <_ZN9tNMEA200028SendConfigurationInformationEhib>
#else
    pNMEA2000->SendConfigurationInformation(iDev);
#endif
  }

  return true;
 80097b4:	2301      	movs	r3, #1
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd90      	pop	{r4, r7, pc}

080097c0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 126998 can be used to set installation description 1 and 2 fields
bool tN2kGroupFunctionHandlerForPGN126998::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 80097c0:	b590      	push	{r4, r7, lr}
 80097c2:	b0dd      	sub	sp, #372	; 0x174
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 80097ca:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 80097ce:	6020      	str	r0, [r4, #0]
 80097d0:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 80097d4:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 80097d8:	6001      	str	r1, [r0, #0]
 80097da:	4619      	mov	r1, r3
 80097dc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80097e0:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80097ea:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 80097ee:	460a      	mov	r2, r1
 80097f0:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  size_t InstallationDescriptionSize;
  char InstallationDescription[Max_N2kConfigurationInfoField_len];
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 80097f2:	2300      	movs	r3, #0
 80097f4:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
  tN2kMsg N2kRMsg;
 80097f8:	f107 0014 	add.w	r0, r7, #20
 80097fc:	2300      	movs	r3, #0
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	2206      	movs	r2, #6
 8009804:	210f      	movs	r1, #15
 8009806:	f000 fb8b 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

 		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) pec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800980a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800980e:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b08      	cmp	r3, #8
 8009816:	d10d      	bne.n	8009834 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 8009818:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800981c:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b0f      	cmp	r3, #15
 8009824:	d106      	bne.n	8009834 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 8009826:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800982a:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b09      	cmp	r3, #9
 8009832:	d002      	beq.n	800983a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x7a>
 8009834:	2301      	movs	r3, #1
 8009836:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800983a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800983e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	7b19      	ldrb	r1, [r3, #12]
 8009846:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800984a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	f107 0014 	add.w	r0, r7, #20
 8009856:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800985a:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	2300      	movs	r3, #0
 800986a:	f7fe fbf3 	bl	8008054 <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    StartParseCommandPairParameters(N2kMsg,Index);
 800986e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8009872:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009876:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800987a:	4611      	mov	r1, r2
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	f7fe fb47 	bl	8007f10 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 8009882:	2300      	movs	r3, #0
 8009884:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009888:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800988c:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8009896:	429a      	cmp	r2, r3
 8009898:	da6e      	bge.n	8009978 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1b8>
      field=N2kMsg.GetByte(Index);
 800989a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800989e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80098a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80098a6:	4611      	mov	r1, r2
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f000 fcdb 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
      switch (field) {
 80098b4:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d002      	beq.n	80098c2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x102>
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d026      	beq.n	800990e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x14e>
 80098c0:	e04b      	b.n	800995a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x19a>
        case 1: // Installation description 1
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 80098c2:	2347      	movs	r3, #71	; 0x47
 80098c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 80098c8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80098cc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80098d0:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80098d4:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 80098d8:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 80098dc:	6800      	ldr	r0, [r0, #0]
 80098de:	f000 fdc8 	bl	800a472 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription1(InstallationDescription);
 80098e2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80098e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f003 fa02 	bl	800ccfe <_ZN9tNMEA200027SetInstallationDescription1EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 80098fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80098fe:	b2d9      	uxtb	r1, r3
 8009900:	f107 0314 	add.w	r3, r7, #20
 8009904:	2200      	movs	r2, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fbde 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 800990c:	e02e      	b.n	800996c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        case 2:  // Installation description 2
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 800990e:	2347      	movs	r3, #71	; 0x47
 8009910:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 8009914:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8009918:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800991c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8009920:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8009924:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8009928:	6800      	ldr	r0, [r0, #0]
 800992a:	f000 fda2 	bl	800a472 <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription2(InstallationDescription);
 800992e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009932:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f003 f9fc 	bl	800cd3e <_ZN9tNMEA200027SetInstallationDescription2EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 8009946:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800994a:	b2d9      	uxtb	r1, r3
 800994c:	f107 0314 	add.w	r3, r7, #20
 8009950:	2200      	movs	r2, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fbb8 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 8009958:	e008      	b.n	800996c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        default:
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_InvalidRequestOrCommandParameterField);
 800995a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800995e:	b2d9      	uxtb	r1, r3
 8009960:	f107 0314 	add.w	r3, r7, #20
 8009964:	2201      	movs	r2, #1
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fbae 	bl	80080c8 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 800996c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009970:	3301      	adds	r3, #1
 8009972:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009976:	e787      	b.n	8009888 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0xc8>
      }
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 8009978:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800997c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	f107 0114 	add.w	r1, r7, #20
 8009988:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800998c:	4618      	mov	r0, r3
 800998e:	f004 f90d 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

    return true;
 8009992:	2301      	movs	r3, #1
}
 8009994:	4618      	mov	r0, r3
 8009996:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}

0800999e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi>:
// Heartbeat settings
bool tN2kGroupFunctionHandlerForPGN126993::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800999e:	b590      	push	{r4, r7, lr}
 80099a0:	b08b      	sub	sp, #44	; 0x2c
 80099a2:	af04      	add	r7, sp, #16
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	807b      	strh	r3, [r7, #2]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec = GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset,true,60000U,1000U,true,6000U);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681c      	ldr	r4, [r3, #0]
 80099b4:	887a      	ldrh	r2, [r7, #2]
 80099b6:	f241 7370 	movw	r3, #6000	; 0x1770
 80099ba:	9303      	str	r3, [sp, #12]
 80099bc:	2301      	movs	r3, #1
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2301      	movs	r3, #1
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	47a0      	blx	r4
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
  // Turn off is not allowed for heartbeat.
  if ( TransmissionInterval==0 ) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x42>
 80099dc:	2301      	movs	r3, #1
 80099de:	75fb      	strb	r3, [r7, #23]
  
  if ( NumberOfParameterPairs==0 ) { // According to doc, there should not be any parameter pairs defined
 80099e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d158      	bne.n	8009a9a <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xfc>
    if ( TransmissionInterval==0xffffffff && TransmissionIntervalOffset==0xffff ) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ee:	d112      	bne.n	8009a16 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
 80099f0:	887b      	ldrh	r3, [r7, #2]
 80099f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d10d      	bne.n	8009a16 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
      // Request for 126993 with 0xffffffff and 0xffff is prohibited so use default reponse.
      return tN2kGroupFunctionHandler::HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	887a      	ldrh	r2, [r7, #2]
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	f7fe f884 	bl	8007b1a <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>
 8009a12:	4603      	mov	r3, r0
 8009a14:	e060      	b.n	8009ad8 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x13a>
    }
    if ( pec==N2kgfTPec_Acknowledge ) {
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d120      	bne.n	8009a5e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xc0>
      // Request specification with offset is confusing and there is no clear explanation. So to keep
      // test tool happy, we respond always immediately and set offset, if it is >0
      uint32_t Offset=TransmissionIntervalOffset;
 8009a1c:	887b      	ldrh	r3, [r7, #2]
 8009a1e:	613b      	str	r3, [r7, #16]
      Offset=(Offset==0xffff || Offset==0?0xffffffff:Offset*10); // Offset comes in 10 ms, convert to ms.
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d008      	beq.n	8009a3c <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	e001      	b.n	8009a40 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xa2>
 8009a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a40:	613b      	str	r3, [r7, #16]
      pNMEA2000->SetHeartbeatIntervalAndOffset(TransmissionInterval,Offset,iDev);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6918      	ldr	r0, [r3, #16]
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	f003 fe10 	bl	800d670 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
      pNMEA2000->SendHeartbeat(iDev);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a56:	4618      	mov	r0, r3
 8009a58:	f003 fec0 	bl	800d7dc <_ZN9tNMEA200013SendHeartbeatEi>
 8009a5c:	e03b      	b.n	8009ad6 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    } else if (!tNMEA2000::IsBroadcast(N2kMsg.Destination)) {
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	7b5b      	ldrb	r3, [r3, #13]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd fea9 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f083 0301 	eor.w	r3, r3, #1
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d030      	beq.n	8009ad6 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000, N2kMsg.Source, iDev, PGN, N2kgfPGNec_Acknowledge, pec);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6918      	ldr	r0, [r3, #16]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	7b19      	ldrb	r1, [r3, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	2300      	movs	r3, #0
 8009a82:	9303      	str	r3, [sp, #12]
 8009a84:	2300      	movs	r3, #0
 8009a86:	9302      	str	r3, [sp, #8]
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	4613      	mov	r3, r2
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	f7fe fb4e 	bl	8008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
 8009a98:	e01d      	b.n	8009ad6 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    }
  } else {
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	7b5b      	ldrb	r3, [r3, #13]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd fe8b 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f083 0301 	eor.w	r3, r3, #1
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d012      	beq.n	8009ad6 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,PGN,
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6918      	ldr	r0, [r3, #16]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	7b19      	ldrb	r1, [r3, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	2305      	movs	r3, #5
 8009abe:	9303      	str	r3, [sp, #12]
 8009ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ac4:	9302      	str	r3, [sp, #8]
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	2300      	movs	r3, #0
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad2:	f7fe fb2f 	bl	8008134 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      N2kgfPGNec_Acknowledge,
                      pec, //N2kgfTPec_TransmitIntervalOrPriorityNotSupported,
                      NumberOfParameterPairs, N2kgfpec_RequestOrCommandNotSupported);
    }
  }
  return true;
 8009ad6:	2301      	movs	r3, #1
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	371c      	adds	r7, #28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd90      	pop	{r4, r7, pc}

08009ae0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	603b      	str	r3, [r7, #0]
      if ( (FieldVal&Mask)!=MatchVal ) {
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	4013      	ands	r3, r2
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d006      	beq.n	8009b08 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x28>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2203      	movs	r2, #3
 8009afe:	701a      	strb	r2, [r3, #0]
        Match=false;
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
    }
 8009b06:	e002      	b.n	8009b0e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x2e>
      } else ErrorCode=N2kgfpec_Acknowledge;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	701a      	strb	r2, [r3, #0]
    }
 8009b0e:	bf00      	nop
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	461a      	mov	r2, r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	817b      	strh	r3, [r7, #10]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	813b      	strh	r3, [r7, #8]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	80fb      	strh	r3, [r7, #6]
      if ( (FieldVal&Mask)!=MatchVal ) {
 8009b32:	897a      	ldrh	r2, [r7, #10]
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	4013      	ands	r3, r2
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	893a      	ldrh	r2, [r7, #8]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d006      	beq.n	8009b4e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	2203      	movs	r2, #3
 8009b44:	701a      	strb	r2, [r3, #0]
        Match=false;
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
    }
 8009b4c:	e002      	b.n	8009b54 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]
    }
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bc80      	pop	{r7}
 8009b5c:	4770      	bx	lr

08009b5e <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	4608      	mov	r0, r1
 8009b68:	4611      	mov	r1, r2
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	70fb      	strb	r3, [r7, #3]
 8009b70:	460b      	mov	r3, r1
 8009b72:	70bb      	strb	r3, [r7, #2]
 8009b74:	4613      	mov	r3, r2
 8009b76:	707b      	strb	r3, [r7, #1]
      if ( (FieldVal&Mask)!=MatchVal ) {
 8009b78:	78fa      	ldrb	r2, [r7, #3]
 8009b7a:	787b      	ldrb	r3, [r7, #1]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	78ba      	ldrb	r2, [r7, #2]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d006      	beq.n	8009b94 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2203      	movs	r2, #3
 8009b8a:	701a      	strb	r2, [r3, #0]
        Match=false;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
    }
 8009b92:	e002      	b.n	8009b9a <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
    }
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bc80      	pop	{r7}
 8009ba2:	4770      	bx	lr
 8009ba4:	0000      	movs	r0, r0
	...

08009ba8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>:

//*****************************************************************************
// DC Detailed Status
//
void SetN2kPGN127506(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     uint8_t StateOfCharge, uint8_t StateOfHealth, double TimeRemaining, double RippleVoltage, double Capacity) {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af04      	add	r7, sp, #16
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	70fb      	strb	r3, [r7, #3]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	70bb      	strb	r3, [r7, #2]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127506L);
 8009bc2:	492f      	ldr	r1, [pc, #188]	; (8009c80 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd8>)
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f9dd 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2206      	movs	r2, #6
 8009bce:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(SID);
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fb15 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(DCInstance);
 8009bda:	78bb      	ldrb	r3, [r7, #2]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb10 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte((unsigned char)DCType);
 8009be4:	787b      	ldrb	r3, [r7, #1]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fb0b 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfCharge);
 8009bee:	7c3b      	ldrb	r3, [r7, #16]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fb06 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfHealth);
 8009bf8:	7d3b      	ldrb	r3, [r7, #20]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fb01 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(TimeRemaining,60);
 8009c02:	a319      	add	r3, pc, #100	; (adr r3, 8009c68 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c0c:	f04f 0200 	mov.w	r2, #0
 8009c10:	4b1c      	ldr	r3, [pc, #112]	; (8009c84 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xdc>)
 8009c12:	e9cd 2300 	strd	r2, r3, [sp]
 8009c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fa44 	bl	800a0a8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(RippleVoltage,0.001);
 8009c20:	a311      	add	r3, pc, #68	; (adr r3, 8009c68 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c2a:	a311      	add	r3, pc, #68	; (adr r3, 8009c70 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc8>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	e9cd 2300 	strd	r2, r3, [sp]
 8009c34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fa35 	bl	800a0a8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(Capacity,3600);
 8009c3e:	a30a      	add	r3, pc, #40	; (adr r3, 8009c68 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c48:	a30b      	add	r3, pc, #44	; (adr r3, 8009c78 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd0>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	e9cd 2300 	strd	r2, r3, [sp]
 8009c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fa26 	bl	800a0a8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	f3af 8000 	nop.w
 8009c68:	00000000 	.word	0x00000000
 8009c6c:	c1cdcd65 	.word	0xc1cdcd65
 8009c70:	d2f1a9fc 	.word	0xd2f1a9fc
 8009c74:	3f50624d 	.word	0x3f50624d
 8009c78:	00000000 	.word	0x00000000
 8009c7c:	40ac2000 	.word	0x40ac2000
 8009c80:	0001f212 	.word	0x0001f212
 8009c84:	404e0000 	.word	0x404e0000

08009c88 <_Z15SetN2kPGN127508R7tN2kMsghdddh>:

//*****************************************************************************
// Battery Status
// Temperatures should be in Kelvins
void SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent,
                     double BatteryTemperature, unsigned char SID) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af04      	add	r7, sp, #16
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	e9c7 2300 	strd	r2, r3, [r7]
 8009c94:	460b      	mov	r3, r1
 8009c96:	72fb      	strb	r3, [r7, #11]
    N2kMsg.SetPGN(127508L);
 8009c98:	4927      	ldr	r1, [pc, #156]	; (8009d38 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xb0>)
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f000 f972 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2206      	movs	r2, #6
 8009ca4:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatteryInstance);
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 faaa 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteDouble(BatteryVoltage,0.01);
 8009cb0:	a31b      	add	r3, pc, #108	; (adr r3, 8009d20 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cba:	a31b      	add	r3, pc, #108	; (adr r3, 8009d28 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	e9cd 2300 	strd	r2, r3, [sp]
 8009cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 f9c3 	bl	800a054 <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteDouble(BatteryCurrent,0.1);
 8009cce:	a314      	add	r3, pc, #80	; (adr r3, 8009d20 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cd8:	a315      	add	r3, pc, #84	; (adr r3, 8009d30 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa8>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	e9cd 2300 	strd	r2, r3, [sp]
 8009ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 f9b4 	bl	800a054 <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteUDouble(BatteryTemperature,0.01);
 8009cec:	a30c      	add	r3, pc, #48	; (adr r3, 8009d20 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cf6:	a30c      	add	r3, pc, #48	; (adr r3, 8009d28 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	e9cd 2300 	strd	r2, r3, [sp]
 8009d00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f9cf 	bl	800a0a8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte(SID);
 8009d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fa77 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	00000000 	.word	0x00000000
 8009d24:	c1cdcd65 	.word	0xc1cdcd65
 8009d28:	47ae147b 	.word	0x47ae147b
 8009d2c:	3f847ae1 	.word	0x3f847ae1
 8009d30:	9999999a 	.word	0x9999999a
 8009d34:	3fb99999 	.word	0x3fb99999
 8009d38:	0001f214 	.word	0x0001f214
 8009d3c:	00000000 	.word	0x00000000

08009d40 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:

//*****************************************************************************
// Battery Configuration Status
void SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	4608      	mov	r0, r1
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	70fb      	strb	r3, [r7, #3]
 8009d52:	460b      	mov	r3, r1
 8009d54:	70bb      	strb	r3, [r7, #2]
 8009d56:	4613      	mov	r3, r2
 8009d58:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127513L);
 8009d5a:	4949      	ldr	r1, [pc, #292]	; (8009e80 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x140>)
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f911 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2206      	movs	r2, #6
 8009d66:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatInstance);
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fa49 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xc0 | ((SupportsEqual & 0x03) << 4) | (BatType & 0x0f)); // BatType (4 bit), SupportsEqual (2 bit), Reserved (2 bit)
 8009d72:	787b      	ldrb	r3, [r7, #1]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d7c:	b25b      	sxtb	r3, r3
 8009d7e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009d82:	b25a      	sxtb	r2, r3
 8009d84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d88:	f003 030f 	and.w	r3, r3, #15
 8009d8c:	b25b      	sxtb	r3, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa34 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte( ((BatChemistry & 0x0f) << 4) | (BatNominalVoltage & 0x0f) ); // BatNominalVoltage (4 bit), BatChemistry (4 bit)
 8009d9c:	7d3b      	ldrb	r3, [r7, #20]
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	b25a      	sxtb	r2, r3
 8009da2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009da6:	f003 030f 	and.w	r3, r3, #15
 8009daa:	b25b      	sxtb	r3, r3
 8009dac:	4313      	orrs	r3, r2
 8009dae:	b25b      	sxtb	r3, r3
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fa25 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(BatCapacity,3600);
 8009dba:	a329      	add	r3, pc, #164	; (adr r3, 8009e60 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x120>)
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dc4:	a328      	add	r3, pc, #160	; (adr r3, 8009e68 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x128>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	e9cd 2300 	strd	r2, r3, [sp]
 8009dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f968 	bl	800a0a8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)BatTemperatureCoefficient);
 8009dd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fa10 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    PeukertExponent-=1; // Is this right or not I am not yet sure!
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	4b26      	ldr	r3, [pc, #152]	; (8009e84 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x144>)
 8009dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009dee:	f7f6 fa31 	bl	8000254 <__aeabi_dsub>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (PeukertExponent<0 || PeukertExponent>0.504) { N2kMsg.AddByte(0xff); } else { N2kMsg.Add1ByteUDouble(PeukertExponent,0.002,-1); }
 8009dfa:	f04f 0200 	mov.w	r2, #0
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009e06:	f7f6 fe4f 	bl	8000aa8 <__aeabi_dcmplt>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d109      	bne.n	8009e24 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xe4>
 8009e10:	a317      	add	r3, pc, #92	; (adr r3, 8009e70 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x130>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009e1a:	f7f6 fe63 	bl	8000ae4 <__aeabi_dcmpgt>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d004      	beq.n	8009e2e <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xee>
 8009e24:	21ff      	movs	r1, #255	; 0xff
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f9ec 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 8009e2c:	e00e      	b.n	8009e4c <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x10c>
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x148>)
 8009e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e38:	a30f      	add	r3, pc, #60	; (adr r3, 8009e78 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x138>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	e9cd 2300 	strd	r2, r3, [sp]
 8009e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f958 	bl	800a0fc <_ZN7tN2kMsg15Add1ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)ChargeEfficiencyFactor);
 8009e4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f9d6 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	00000000 	.word	0x00000000
 8009e64:	c1cdcd65 	.word	0xc1cdcd65
 8009e68:	00000000 	.word	0x00000000
 8009e6c:	40ac2000 	.word	0x40ac2000
 8009e70:	9ba5e354 	.word	0x9ba5e354
 8009e74:	3fe020c4 	.word	0x3fe020c4
 8009e78:	d2f1a9fc 	.word	0xd2f1a9fc
 8009e7c:	3f60624d 	.word	0x3f60624d
 8009e80:	0001f219 	.word	0x0001f219
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	bff00000 	.word	0xbff00000

08009e8c <_ZNK7tN2kMsg7IsValidEv>:
   * \brief Checks if the Message Meta Content is valid
   * Basic check if the message object is valide, mean datalen >0 and PGN != 0.
   * \return true   message is valide
   * \return false  message is not valide
   */
  bool IsValid() const { return (PGN!=0 && DataLen>0); }
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	dd01      	ble.n	8009ea8 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <_ZNK7tN2kMsg7IsValidEv+0x1e>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bc80      	pop	{r7}
 8009eb2:	4770      	bx	lr

08009eb4 <round>:

//*****************************************************************************
// On Arduino round() is a macro, hence the definition check. On other systems
// it is a function that may or may not be implemented so we do it ourselves.
#if !defined(round)
double round(double val) {
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	e9c7 0100 	strd	r0, r1, [r7]
  return val >= 0
      ? floor(val + 0.5)
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	f04f 0300 	mov.w	r3, #0
 8009ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eca:	f7f6 fe01 	bl	8000ad0 <__aeabi_dcmpge>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00f      	beq.n	8009ef4 <round+0x40>
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <round+0x68>)
 8009eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ede:	f7f6 f9bb 	bl	8000258 <__adddf3>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f00b fec9 	bl	8015c80 <floor>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
      : ceil(val - 0.5);
 8009ef2:	e00e      	b.n	8009f12 <round+0x5e>
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <round+0x68>)
 8009efa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009efe:	f7f6 f9a9 	bl	8000254 <__aeabi_dsub>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4610      	mov	r0, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f00b fe39 	bl	8015b80 <ceil>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
}
 8009f12:	4610      	mov	r0, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	3fe00000 	.word	0x3fe00000

08009f20 <_ZN7tN2kMsgC1Ehhmi>:
#endif

//*****************************************************************************
tN2kMsg::tN2kMsg(unsigned char _Source, unsigned char _Priority, unsigned long _PGN, int _DataLen) {
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	607b      	str	r3, [r7, #4]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	72fb      	strb	r3, [r7, #11]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	72bb      	strb	r3, [r7, #10]
 8009f32:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <_ZN7tN2kMsgC1Ehhmi+0x60>)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	601a      	str	r2, [r3, #0]
  Init(_Priority,_PGN,_Source,255);
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	7ab9      	ldrb	r1, [r7, #10]
 8009f3c:	22ff      	movs	r2, #255	; 0xff
 8009f3e:	9200      	str	r2, [sp, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f839 	bl	8009fba <_ZN7tN2kMsg4InitEhmhh>
  if ( _DataLen>0 && _DataLen<MaxDataLen ) DataLen=_DataLen;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dd05      	ble.n	8009f5a <_ZN7tN2kMsgC1Ehhmi+0x3a>
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2bde      	cmp	r3, #222	; 0xde
 8009f52:	dc02      	bgt.n	8009f5a <_ZN7tN2kMsgC1Ehhmi+0x3a>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	611a      	str	r2, [r3, #16]
  ResetData();
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 f852 	bl	800a004 <_ZN7tN2kMsg9ResetDataEv>
  if ( PGN!=0 ) MsgTime=N2kMillis();
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d005      	beq.n	8009f74 <_ZN7tN2kMsgC1Ehhmi+0x54>
 8009f68:	f001 f8bc 	bl	800b0e4 <_Z9N2kMillisv>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	0801769c 	.word	0x0801769c

08009f84 <_ZN7tN2kMsg6SetPGNEm>:

//*****************************************************************************
void tN2kMsg::SetPGN(unsigned long _PGN) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  Clear();
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
  if ( PGN==0 ) PGN=_PGN;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <_ZN7tN2kMsg6SetPGNEm+0x22>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	609a      	str	r2, [r3, #8]
  MsgTime=N2kMillis();
 8009fa6:	f001 f89d 	bl	800b0e4 <_Z9N2kMillisv>
 8009faa:	4602      	mov	r2, r0
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <_ZN7tN2kMsg4InitEhmhh>:

//*****************************************************************************
void tN2kMsg::Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination) {
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	72fb      	strb	r3, [r7, #11]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	72bb      	strb	r3, [r7, #10]
  DataLen=0;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	611a      	str	r2, [r3, #16]
  Priority=_Priority & 0x7;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	711a      	strb	r2, [r3, #4]
  SetPGN(_PGN);
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7ff ffce 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  Source=_Source;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	7aba      	ldrb	r2, [r7, #10]
 8009fec:	731a      	strb	r2, [r3, #12]
  Destination=_Destination;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	7e3a      	ldrb	r2, [r7, #24]
 8009ff2:	735a      	strb	r2, [r3, #13]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
  TPMessage=false;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
#endif
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZN7tN2kMsg9ResetDataEv>:

//*****************************************************************************
void tN2kMsg::ResetData() {
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  if ( DataLen>0 ) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	dd08      	ble.n	800a026 <_ZN7tN2kMsg9ResetDataEv+0x22>
    memset(Data,0xff,DataLen);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f103 0014 	add.w	r0, r3, #20
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	461a      	mov	r2, r3
 800a020:	21ff      	movs	r1, #255	; 0xff
 800a022:	f00b ff17 	bl	8015e54 <memset>
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <_ZN7tN2kMsg5ClearEv>:

//*****************************************************************************
void tN2kMsg::Clear() {
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  PGN=0;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	609a      	str	r2, [r3, #8]
  DataLen=0;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	611a      	str	r2, [r3, #16]
  MsgTime=0;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	bc80      	pop	{r7}
 800a052:	4770      	bx	lr

0800a054 <_ZN7tN2kMsg14Add2ByteDoubleEddd>:
    SetBuf3ByteInt(0x7fffff,DataLen,Data);
  }
}

//*****************************************************************************
void tN2kMsg::Add2ByteDouble(double v, double precision, double UndefVal) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af02      	add	r7, sp, #8
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 800a060:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a064:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a068:	f7f6 fd14 	bl	8000a94 <__aeabi_dcmpeq>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10c      	bne.n	800a08c <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x38>
    SetBuf2ByteDouble(v,precision,DataLen,Data);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3310      	adds	r3, #16
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	3214      	adds	r2, #20
 800a07a:	9201      	str	r2, [sp, #4]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a082:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a086:	f000 fa6f 	bl	800a568 <_Z17SetBuf2ByteDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
  }
}
 800a08a:	e009      	b.n	800a0a0 <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f103 0110 	add.w	r1, r3, #16
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3314      	adds	r3, #20
 800a096:	461a      	mov	r2, r3
 800a098:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800a09c:	f000 fb46 	bl	800a72c <_Z15SetBuf2ByteUInttRiPh>
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>:

//*****************************************************************************
void tN2kMsg::Add2ByteUDouble(double v, double precision, double UndefVal) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 800a0b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0bc:	f7f6 fcea 	bl	8000a94 <__aeabi_dcmpeq>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10c      	bne.n	800a0e0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x38>
    SetBuf2ByteUDouble(v,precision,DataLen,Data);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3310      	adds	r3, #16
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	3214      	adds	r2, #20
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0da:	f000 fa8d 	bl	800a5f8 <_Z18SetBuf2ByteUDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
  }
}
 800a0de:	e009      	b.n	800a0f4 <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f103 0110 	add.w	r1, r3, #16
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3314      	adds	r3, #20
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a0f0:	f000 fb1c 	bl	800a72c <_Z15SetBuf2ByteUInttRiPh>
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <_ZN7tN2kMsg15Add1ByteUDoubleEddd>:
    AddByte(N2kInt8NA);
  }
}

//*****************************************************************************
void tN2kMsg::Add1ByteUDouble(double v, double precision, double UndefVal) {
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af02      	add	r7, sp, #8
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 800a108:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a10c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a110:	f7f6 fcc0 	bl	8000a94 <__aeabi_dcmpeq>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10c      	bne.n	800a134 <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x38>
    SetBuf1ByteUDouble(v,precision,DataLen,Data);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3310      	adds	r3, #16
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	3214      	adds	r2, #20
 800a122:	9201      	str	r2, [sp, #4]
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a12a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a12e:	f000 faa7 	bl	800a680 <_Z18SetBuf1ByteUDoubleddRiPh>
  } else {
    AddByte(N2kUInt8NA);
  }
}
 800a132:	e003      	b.n	800a13c <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x40>
    AddByte(N2kUInt8NA);
 800a134:	21ff      	movs	r1, #255	; 0xff
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 f864 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
}
 800a13c:	bf00      	nop
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN7tN2kMsg11Add2ByteIntEs>:

//*****************************************************************************
void tN2kMsg::Add2ByteInt(int16_t v) {
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteInt(v,DataLen,Data);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f103 0110 	add.w	r1, r3, #16
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f103 0214 	add.w	r2, r3, #20
 800a15c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fad1 	bl	800a708 <_Z14SetBuf2ByteIntsRiPh>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>:

//*****************************************************************************
void tN2kMsg::Add2ByteUInt(uint16_t v) {
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	460b      	mov	r3, r1
 800a178:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteUInt(v,DataLen,Data);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f103 0110 	add.w	r1, r3, #16
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f103 0214 	add.w	r2, r3, #20
 800a186:	887b      	ldrh	r3, [r7, #2]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 facf 	bl	800a72c <_Z15SetBuf2ByteUInttRiPh>
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <_ZN7tN2kMsg11Add3ByteIntEl>:

//*****************************************************************************
void tN2kMsg::Add3ByteInt(int32_t v) {
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
  SetBuf3ByteInt(v,DataLen,Data);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f103 0110 	add.w	r1, r3, #16
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3314      	adds	r3, #20
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6838      	ldr	r0, [r7, #0]
 800a1ae:	f000 face 	bl	800a74e <_Z14SetBuf3ByteIntlRiPh>
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <_ZN7tN2kMsg12Add4ByteUIntEm>:

//*****************************************************************************
void tN2kMsg::Add4ByteUInt(uint32_t v) {
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
  SetBuf4ByteUInt(v,DataLen,Data);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f103 0110 	add.w	r1, r3, #16
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3314      	adds	r3, #20
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f000 facc 	bl	800a76e <_Z15SetBuf4ByteUIntmRiPh>
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <_ZN7tN2kMsg9AddUInt64Ey>:

//*****************************************************************************
void tN2kMsg::AddUInt64(uint64_t v) {
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	e9c7 2300 	strd	r2, r3, [r7]
  SetBufUInt64(v,DataLen,Data);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f103 0210 	add.w	r2, r3, #16
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3314      	adds	r3, #20
 800a1f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1f8:	f000 fac9 	bl	800a78e <_Z12SetBufUInt64yRiPh>
}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <_ZN7tN2kMsg7AddByteEh>:

//*****************************************************************************
void tN2kMsg::AddByte(unsigned char v) {
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  Data[DataLen]=v; DataLen++;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	78fa      	ldrb	r2, [r7, #3]
 800a21a:	751a      	strb	r2, [r3, #20]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	611a      	str	r2, [r3, #16]
}
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr

0800a230 <_ZN7tN2kMsg6AddStrEPKcib>:

//*****************************************************************************
void tN2kMsg::AddStr(const char *str, int len, bool UsePgm) {
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	70fb      	strb	r3, [r7, #3]
  SetBufStr(str,len,DataLen,Data,UsePgm,0xff);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f103 0210 	add.w	r2, r3, #16
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f103 0114 	add.w	r1, r3, #20
 800a24a:	23ff      	movs	r3, #255	; 0xff
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	460b      	mov	r3, r1
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	68b8      	ldr	r0, [r7, #8]
 800a258:	f000 faac 	bl	800a7b4 <_Z9SetBufStrPKciRiPhbh>
}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <_ZNK7tN2kMsg7GetByteERi>:
    DataLen+=bufLen;
  }
}

//*****************************************************************************
unsigned char tN2kMsg::GetByte(int &Index) const {
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  if (Index<DataLen) {
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	429a      	cmp	r2, r3
 800a278:	da08      	bge.n	800a28c <_ZNK7tN2kMsg7GetByteERi+0x28>
    return Data[Index++];
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	1c59      	adds	r1, r3, #1
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	6011      	str	r1, [r2, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	4413      	add	r3, r2
 800a288:	7d1b      	ldrb	r3, [r3, #20]
 800a28a:	e000      	b.n	800a28e <_ZNK7tN2kMsg7GetByteERi+0x2a>
  } else return 0xff;
 800a28c:	23ff      	movs	r3, #255	; 0xff
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	bc80      	pop	{r7}
 800a296:	4770      	bx	lr

0800a298 <_ZNK7tN2kMsg12Get2ByteUIntERit>:
    return GetBuf2ByteInt(Index,Data);
  } else return def;
}

//*****************************************************************************
uint16_t tN2kMsg::Get2ByteUInt(int &Index, uint16_t def) const {
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	80fb      	strh	r3, [r7, #6]
  if (Index+2<=DataLen) {
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	da07      	bge.n	800a2c4 <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2c>
    return GetBuf2ByteUInt(Index,Data);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3314      	adds	r3, #20
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	68b8      	ldr	r0, [r7, #8]
 800a2bc:	f000 f914 	bl	800a4e8 <_Z15GetBuf2ByteUIntRiPKh>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	e000      	b.n	800a2c6 <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2e>
  } else return def;
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <_ZNK7tN2kMsg12Get3ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get3ByteUInt(int &Index, uint32_t def) const {
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
  if (Index+3<=DataLen) {
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	1c9a      	adds	r2, r3, #2
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	da07      	bge.n	800a2f8 <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2a>
    return GetBuf3ByteUInt(Index,Data);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3314      	adds	r3, #20
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	68b8      	ldr	r0, [r7, #8]
 800a2f0:	f000 f909 	bl	800a506 <_Z15GetBuf3ByteUIntRiPKh>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	e000      	b.n	800a2fa <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2c>
  } else return def;
 800a2f8:	687b      	ldr	r3, [r7, #4]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <_ZNK7tN2kMsg12Get4ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get4ByteUInt(int &Index, uint32_t def) const {
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
  if (Index+4<=DataLen) {
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	1cda      	adds	r2, r3, #3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	429a      	cmp	r2, r3
 800a31a:	da07      	bge.n	800a32c <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2a>
    return GetBuf4ByteUInt(Index,Data);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3314      	adds	r3, #20
 800a320:	4619      	mov	r1, r3
 800a322:	68b8      	ldr	r0, [r7, #8]
 800a324:	f000 f8fe 	bl	800a524 <_Z15GetBuf4ByteUIntRiPKh>
 800a328:	4603      	mov	r3, r0
 800a32a:	e000      	b.n	800a32e <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2c>
  } else return def;
 800a32c:	687b      	ldr	r3, [r7, #4]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <_ZNK7tN2kMsg9GetUInt64ERiy>:

//*****************************************************************************
uint64_t tN2kMsg::GetUInt64(int &Index, uint64_t def) const {
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	e9c7 2300 	strd	r2, r3, [r7]
  if (Index+8<=DataLen) {
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	1dda      	adds	r2, r3, #7
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	429a      	cmp	r2, r3
 800a350:	da08      	bge.n	800a364 <_ZNK7tN2kMsg9GetUInt64ERiy+0x2e>
    return GetBuf8ByteUInt(Index,Data);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3314      	adds	r3, #20
 800a356:	4619      	mov	r1, r3
 800a358:	68b8      	ldr	r0, [r7, #8]
 800a35a:	f000 f8f2 	bl	800a542 <_Z15GetBuf8ByteUIntRiPKh>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	e001      	b.n	800a368 <_ZNK7tN2kMsg9GetUInt64ERiy+0x32>
  } else return def;
 800a364:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a368:	4610      	mov	r0, r2
 800a36a:	4619      	mov	r1, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <_ZNK7tN2kMsg6GetStrEjPcjhRi>:
    return true;
  } else return false;
}

//*****************************************************************************
bool tN2kMsg::GetStr(size_t StrBufSize, char *StrBuf, size_t Length, unsigned char nulChar, int &Index) const {
 800a372:	b580      	push	{r7, lr}
 800a374:	b088      	sub	sp, #32
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	603b      	str	r3, [r7, #0]
  unsigned char vb;
  bool nullReached = false;
 800a380:	2300      	movs	r3, #0
 800a382:	77fb      	strb	r3, [r7, #31]
  if ( StrBufSize==0 || StrBuf==0 ) {
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x1e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d109      	bne.n	800a3a4 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x32>
    Index+=Length;
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	4413      	add	r3, r2
 800a39a:	461a      	mov	r2, r3
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	601a      	str	r2, [r3, #0]
    return true;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e062      	b.n	800a46a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  }
  StrBuf[0] = '\0';
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	701a      	strb	r2, [r3, #0]
  if ((size_t)Index+Length<=(size_t)DataLen) {
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	6912      	ldr	r2, [r2, #16]
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d855      	bhi.n	800a468 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf6>
    size_t i;
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61bb      	str	r3, [r7, #24]
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d22f      	bcs.n	800a428 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	69ba      	ldr	r2, [r7, #24]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d22a      	bcs.n	800a428 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
      vb = GetByte(Index);
 800a3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff ff45 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	75fb      	strb	r3, [r7, #23]
      if (! nullReached) {
 800a3de:	7ffb      	ldrb	r3, [r7, #31]
 800a3e0:	f083 0301 	eor.w	r3, r3, #1
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d015      	beq.n	800a416 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xa4>
        if (vb == 0x00 || vb == nulChar ) {
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d004      	beq.n	800a3fa <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x88>
 800a3f0:	7dfa      	ldrb	r2, [r7, #23]
 800a3f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d107      	bne.n	800a40a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x98>
          nullReached = true; // either null or '@' (AIS null character)
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	77fb      	strb	r3, [r7, #31]
          StrBuf[i] = '\0';
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	4413      	add	r3, r2
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	e00a      	b.n	800a420 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        } else {
          StrBuf[i] = vb;
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	4413      	add	r3, r2
 800a410:	7dfa      	ldrb	r2, [r7, #23]
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	e004      	b.n	800a420 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        }
      } else {
        StrBuf[i] = '\0';
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	4413      	add	r3, r2
 800a41c:	2200      	movs	r2, #0
 800a41e:	701a      	strb	r2, [r3, #0]
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	3301      	adds	r3, #1
 800a424:	61bb      	str	r3, [r7, #24]
 800a426:	e7cb      	b.n	800a3c0 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x4e>
      }
    }
    StrBuf[i] = '\0';
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	4413      	add	r3, r2
 800a42e:	2200      	movs	r2, #0
 800a430:	701a      	strb	r2, [r3, #0]
    for (;i<Length;i++) GetByte(Index);  // Stopped by buffer size, so read out bytes from message
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d207      	bcs.n	800a44a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
 800a43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f7ff ff11 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	3301      	adds	r3, #1
 800a446:	61bb      	str	r3, [r7, #24]
 800a448:	e7f3      	b.n	800a432 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xc0>
    for (;i<StrBufSize;i++) StrBuf[i] = '\0';  // Stopped by length, fill buffer with 0
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d208      	bcs.n	800a464 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf2>
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	4413      	add	r3, r2
 800a458:	2200      	movs	r2, #0
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	3301      	adds	r3, #1
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	e7f2      	b.n	800a44a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
    return true;
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  } else return false;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3720      	adds	r7, #32
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <_ZNK7tN2kMsg9GetVarStrERjPcRi>:

//*****************************************************************************
bool tN2kMsg::GetVarStr(size_t &StrBufSize, char *StrBuf, int &Index) const {
 800a472:	b580      	push	{r7, lr}
 800a474:	b088      	sub	sp, #32
 800a476:	af02      	add	r7, sp, #8
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	603b      	str	r3, [r7, #0]
  size_t Len=GetByte(Index)-2;
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7ff feee 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800a488:	4603      	mov	r3, r0
 800a48a:	3b02      	subs	r3, #2
 800a48c:	617b      	str	r3, [r7, #20]
  uint8_t Type=GetByte(Index);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff fee7 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 800a496:	4603      	mov	r3, r0
 800a498:	74fb      	strb	r3, [r7, #19]
  if ( Type!=0x01 ) { StrBufSize=0; return false; }
 800a49a:	7cfb      	ldrb	r3, [r7, #19]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d004      	beq.n	800a4aa <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x38>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e01a      	b.n	800a4e0 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x6e>
  if ( StrBuf!=0 ) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x56>
    GetStr(StrBufSize,StrBuf,Len,0xff,Index);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6819      	ldr	r1, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	23ff      	movs	r3, #255	; 0xff
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f7ff ff56 	bl	800a372 <_ZNK7tN2kMsg6GetStrEjPcjhRi>
 800a4c6:	e007      	b.n	800a4d8 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x66>
  } else {
    Index+=Len; // Just pass this string
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	601a      	str	r2, [r3, #0]
  }
  StrBufSize=Len;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	601a      	str	r2, [r3, #0]
  return true;
 800a4de:	2301      	movs	r3, #1
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <_Z15GetBuf2ByteUIntRiPKh>:
int16_t GetBuf2ByteInt(int &index, const unsigned char *buf) {
  return GetBuf<int16_t>(2, index, buf);
}

//*****************************************************************************
uint16_t GetBuf2ByteUInt(int &index, const unsigned char *buf) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  return GetBuf<uint16_t>(2, index, buf);
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	2002      	movs	r0, #2
 800a4f8:	f000 fc86 	bl	800ae08 <_Z6GetBufItET_jRiPKh>
 800a4fc:	4603      	mov	r3, r0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <_Z15GetBuf3ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf3ByteUInt(int &index, const unsigned char *buf) {
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(3, index, buf);
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	2003      	movs	r0, #3
 800a516:	f000 fc97 	bl	800ae48 <_Z6GetBufImET_jRiPKh>
 800a51a:	4603      	mov	r3, r0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_Z15GetBuf4ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf4ByteUInt(int &index, const unsigned char *buf) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(4, index, buf);
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	2004      	movs	r0, #4
 800a534:	f000 fc88 	bl	800ae48 <_Z6GetBufImET_jRiPKh>
 800a538:	4603      	mov	r3, r0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <_Z15GetBuf8ByteUIntRiPKh>:

//*****************************************************************************
uint64_t GetBuf8ByteUInt(int &index, const unsigned char *buf) {
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  return GetBuf<uint64_t>(8, index, buf);
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	2008      	movs	r0, #8
 800a552:	f000 fc99 	bl	800ae88 <_Z6GetBufIyET_jRiPKh>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
}
 800a55a:	4610      	mov	r0, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	0000      	movs	r0, r0
	...

0800a568 <_Z17SetBuf2ByteDoubleddRiPh>:

  return vl * precision;
}

//*****************************************************************************
void SetBuf2ByteDouble(double v, double precision, int &index, unsigned char *buf) {
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a572:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800a576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a57a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a57e:	f7f6 f94b 	bl	8000818 <__aeabi_ddiv>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4610      	mov	r0, r2
 800a588:	4619      	mov	r1, r3
 800a58a:	f7ff fc93 	bl	8009eb4 <round>
 800a58e:	e9c7 0106 	strd	r0, r1, [r7, #24]
  int16_t vi = (vd>=N2kInt16Min && vd<N2kInt16OR)?(int16_t)vd:N2kInt16OR;
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <_Z17SetBuf2ByteDoubleddRiPh+0x88>)
 800a598:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a59c:	f7f6 fa98 	bl	8000ad0 <__aeabi_dcmpge>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d010      	beq.n	800a5c8 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800a5a6:	a310      	add	r3, pc, #64	; (adr r3, 800a5e8 <_Z17SetBuf2ByteDoubleddRiPh+0x80>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a5b0:	f7f6 fa7a 	bl	8000aa8 <__aeabi_dcmplt>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d006      	beq.n	800a5c8 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800a5ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a5be:	f7f6 fa9b 	bl	8000af8 <__aeabi_d2iz>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	b21b      	sxth	r3, r3
 800a5c6:	e001      	b.n	800a5cc <_Z17SetBuf2ByteDoubleddRiPh+0x64>
 800a5c8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800a5cc:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800a5ce:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d6:	2102      	movs	r1, #2
 800a5d8:	f000 fc7c 	bl	800aed4 <_Z6SetBufIsEvT_jRiPh>
}
 800a5dc:	bf00      	nop
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	40dfff80 	.word	0x40dfff80
 800a5f0:	c0e00000 	.word	0xc0e00000
 800a5f4:	00000000 	.word	0x00000000

0800a5f8 <_Z18SetBuf2ByteUDoubleddRiPh>:

//*****************************************************************************
void SetBuf2ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a602:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800a606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a60a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a60e:	f7f6 f903 	bl	8000818 <__aeabi_ddiv>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4610      	mov	r0, r2
 800a618:	4619      	mov	r1, r3
 800a61a:	f7ff fc4b 	bl	8009eb4 <round>
 800a61e:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint16_t vi = (vd>=0 && vd<N2kUInt16OR)?(uint16_t)vd:N2kUInt16OR;
 800a622:	f04f 0200 	mov.w	r2, #0
 800a626:	f04f 0300 	mov.w	r3, #0
 800a62a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a62e:	f7f6 fa4f 	bl	8000ad0 <__aeabi_dcmpge>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d010      	beq.n	800a65a <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800a638:	a30f      	add	r3, pc, #60	; (adr r3, 800a678 <_Z18SetBuf2ByteUDoubleddRiPh+0x80>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a642:	f7f6 fa31 	bl	8000aa8 <__aeabi_dcmplt>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d006      	beq.n	800a65a <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800a64c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a650:	f7f6 fa7a 	bl	8000b48 <__aeabi_d2uiz>
 800a654:	4603      	mov	r3, r0
 800a656:	b29b      	uxth	r3, r3
 800a658:	e001      	b.n	800a65e <_Z18SetBuf2ByteUDoubleddRiPh+0x66>
 800a65a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a65e:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800a660:	8af8      	ldrh	r0, [r7, #22]
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a666:	2102      	movs	r1, #2
 800a668:	f000 fc53 	bl	800af12 <_Z6SetBufItEvT_jRiPh>
}
 800a66c:	bf00      	nop
 800a66e:	3720      	adds	r7, #32
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	f3af 8000 	nop.w
 800a678:	00000000 	.word	0x00000000
 800a67c:	40efffc0 	.word	0x40efffc0

0800a680 <_Z18SetBuf1ByteUDoubleddRiPh>:
  int8_t vi = (vd>=N2kInt8Min && vd<N2kInt8OR)?(int8_t)vd:N2kInt8OR;
  SetBuf(vi, 1, index, buf);
}

//*****************************************************************************
void SetBuf1ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a68a:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800a68e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a696:	f7f6 f8bf 	bl	8000818 <__aeabi_ddiv>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f7ff fc07 	bl	8009eb4 <round>
 800a6a6:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint8_t vi = (vd>=0 && vd<N2kUInt8OR)?(uint8_t)vd:N2kUInt8OR;
 800a6aa:	f04f 0200 	mov.w	r2, #0
 800a6ae:	f04f 0300 	mov.w	r3, #0
 800a6b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a6b6:	f7f6 fa0b 	bl	8000ad0 <__aeabi_dcmpge>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 800a6c0:	a30f      	add	r3, pc, #60	; (adr r3, 800a700 <_Z18SetBuf1ByteUDoubleddRiPh+0x80>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a6ca:	f7f6 f9ed 	bl	8000aa8 <__aeabi_dcmplt>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 800a6d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a6d8:	f7f6 fa36 	bl	8000b48 <__aeabi_d2uiz>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	e000      	b.n	800a6e4 <_Z18SetBuf1ByteUDoubleddRiPh+0x64>
 800a6e2:	23fe      	movs	r3, #254	; 0xfe
 800a6e4:	75fb      	strb	r3, [r7, #23]
  SetBuf(vi, 1, index, buf);
 800a6e6:	7df8      	ldrb	r0, [r7, #23]
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	f000 fc2f 	bl	800af50 <_Z6SetBufIhEvT_jRiPh>
}
 800a6f2:	bf00      	nop
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	f3af 8000 	nop.w
 800a700:	00000000 	.word	0x00000000
 800a704:	406fc000 	.word	0x406fc000

0800a708 <_Z14SetBuf2ByteIntsRiPh>:

//*****************************************************************************
void SetBuf2ByteInt(int16_t v, int &index, unsigned char *buf) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800a716:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	2102      	movs	r1, #2
 800a720:	f000 fbd8 	bl	800aed4 <_Z6SetBufIsEvT_jRiPh>
}
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <_Z15SetBuf2ByteUInttRiPh>:

//*****************************************************************************
void SetBuf2ByteUInt(uint16_t v, int &index, unsigned char *buf) {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800a73a:	89f8      	ldrh	r0, [r7, #14]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	2102      	movs	r1, #2
 800a742:	f000 fbe6 	bl	800af12 <_Z6SetBufItEvT_jRiPh>
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <_Z14SetBuf3ByteIntlRiPh>:

//*****************************************************************************
void SetBuf3ByteInt(int32_t v, int &index, unsigned char *buf) {
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
  SetBuf(v, 3, index, buf);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	2103      	movs	r1, #3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fb15 	bl	800ad90 <_Z6SetBufIlEvT_jRiPh>
}
 800a766:	bf00      	nop
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <_Z15SetBuf4ByteUIntmRiPh>:

//*****************************************************************************
void SetBuf4ByteUInt(uint32_t v, int &index, unsigned char *buf) {
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	607a      	str	r2, [r7, #4]
  SetBuf(v, 4, index, buf);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	2104      	movs	r1, #4
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 fb23 	bl	800adcc <_Z6SetBufImEvT_jRiPh>
}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <_Z12SetBufUInt64yRiPh>:

//*****************************************************************************
void SetBufUInt64(uint64_t v, int &index, unsigned char *buf) {
 800a78e:	b580      	push	{r7, lr}
 800a790:	b086      	sub	sp, #24
 800a792:	af02      	add	r7, sp, #8
 800a794:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a798:	607a      	str	r2, [r7, #4]
 800a79a:	603b      	str	r3, [r7, #0]
  SetBuf(v, 8, index, buf);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7a8:	f000 fbf1 	bl	800af8e <_Z6SetBufIyEvT_jRiPh>
}
 800a7ac:	bf00      	nop
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <_Z9SetBufStrPKciRiPhbh>:

//*****************************************************************************
void SetBufStr(const char *str, int len, int &index, unsigned char *buf, bool UsePgm, unsigned char fillChar) {
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
  int i=0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]
  if ( UsePgm ) {
 800a7c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01c      	beq.n	800a808 <_Z9SetBufStrPKciRiPhbh+0x54>
    for (; i<len && str[i]!=0; i++, index++) {
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	da35      	bge.n	800a842 <_Z9SetBufStrPKciRiPhbh+0x8e>
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4413      	add	r3, r2
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d02f      	beq.n	800a842 <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=pgm_read_byte(&(str[i]));
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	441a      	add	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	440b      	add	r3, r1
 800a7f2:	7812      	ldrb	r2, [r2, #0]
 800a7f4:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	617b      	str	r3, [r7, #20]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	e7e2      	b.n	800a7ce <_Z9SetBufStrPKciRiPhbh+0x1a>
    }
  } else {
    for (; i<len && str[i]!=0; i++, index++) {
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	da18      	bge.n	800a842 <_Z9SetBufStrPKciRiPhbh+0x8e>
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	4413      	add	r3, r2
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d012      	beq.n	800a842 <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=str[i];
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	441a      	add	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4619      	mov	r1, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	440b      	add	r3, r1
 800a82c:	7812      	ldrb	r2, [r2, #0]
 800a82e:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	3301      	adds	r3, #1
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e7e2      	b.n	800a808 <_Z9SetBufStrPKciRiPhbh+0x54>
    }
  }
  for (; i<len; i++, index++) {
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	429a      	cmp	r2, r3
 800a848:	da10      	bge.n	800a86c <_Z9SetBufStrPKciRiPhbh+0xb8>
    buf[index]=fillChar;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	4413      	add	r3, r2
 800a854:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a858:	701a      	strb	r2, [r3, #0]
  for (; i<len; i++, index++) {
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	3301      	adds	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	e7ea      	b.n	800a842 <_Z9SetBufStrPKciRiPhbh+0x8e>
  }
}
 800a86c:	bf00      	nop
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	bc80      	pop	{r7}
 800a874:	4770      	bx	lr
	...

0800a878 <_Z8PrintBufP9N2kStreamhPKhb>:

//*****************************************************************************
void PrintBuf(N2kStream *port, unsigned char len, const unsigned char *pData, bool AddLF) {
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	607a      	str	r2, [r7, #4]
 800a882:	461a      	mov	r2, r3
 800a884:	460b      	mov	r3, r1
 800a886:	72fb      	strb	r3, [r7, #11]
 800a888:	4613      	mov	r3, r2
 800a88a:	72bb      	strb	r3, [r7, #10]
  if (port==0) return;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d021      	beq.n	800a8d6 <_Z8PrintBufP9N2kStreamhPKhb+0x5e>

  for(int i = 0; i<len; i++) {
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]
 800a896:	7afb      	ldrb	r3, [r7, #11]
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	da13      	bge.n	800a8c6 <_Z8PrintBufP9N2kStreamhPKhb+0x4e>
    if (i>0) { port->print(F(",")); };
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dd03      	ble.n	800a8ac <_Z8PrintBufP9N2kStreamhPKhb+0x34>
 800a8a4:	490e      	ldr	r1, [pc, #56]	; (800a8e0 <_Z8PrintBufP9N2kStreamhPKhb+0x68>)
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 fb8f 	bl	800afca <_ZN9N2kStream5printEPKc>
    // Print bytes as hex.
    port->print(pData[i], 16);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2210      	movs	r2, #16
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 fba3 	bl	800b004 <_ZN9N2kStream5printEih>
  for(int i = 0; i<len; i++) {
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e7e7      	b.n	800a896 <_Z8PrintBufP9N2kStreamhPKhb+0x1e>
  }

  if (AddLF) port->println(F(""));
 800a8c6:	7abb      	ldrb	r3, [r7, #10]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
 800a8cc:	4905      	ldr	r1, [pc, #20]	; (800a8e4 <_Z8PrintBufP9N2kStreamhPKhb+0x6c>)
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f000 fbd8 	bl	800b084 <_ZN9N2kStream7printlnEPKc>
 800a8d4:	e000      	b.n	800a8d8 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
  if (port==0) return;
 800a8d6:	bf00      	nop
}
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	08016f04 	.word	0x08016f04
 800a8e4:	08016f08 	.word	0x08016f08

0800a8e8 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>:

//*****************************************************************************
void tN2kMsg::Print(N2kStream *port, bool NoData) const {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	71fb      	strb	r3, [r7, #7]
  if (port==0 || !IsValid()) return;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d008      	beq.n	800a90e <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x26>
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f7ff fac5 	bl	8009e8c <_ZNK7tN2kMsg7IsValidEv>
 800a902:	4603      	mov	r3, r0
 800a904:	f083 0301 	eor.w	r3, r3, #1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2a>
 800a90e:	2301      	movs	r3, #1
 800a910:	e000      	b.n	800a914 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2c>
 800a912:	2300      	movs	r3, #0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d15b      	bne.n	800a9d0 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xe8>
  port->print(N2kMillis()); port->print(F(" : "));
 800a918:	f000 fbe4 	bl	800b0e4 <_Z9N2kMillisv>
 800a91c:	4603      	mov	r3, r0
 800a91e:	220a      	movs	r2, #10
 800a920:	4619      	mov	r1, r3
 800a922:	68b8      	ldr	r0, [r7, #8]
 800a924:	f000 fb6e 	bl	800b004 <_ZN9N2kStream5printEih>
 800a928:	492b      	ldr	r1, [pc, #172]	; (800a9d8 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf0>)
 800a92a:	68b8      	ldr	r0, [r7, #8]
 800a92c:	f000 fb4d 	bl	800afca <_ZN9N2kStream5printEPKc>
  port->print(F("Pri:")); port->print(Priority);
 800a930:	492a      	ldr	r1, [pc, #168]	; (800a9dc <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf4>)
 800a932:	68b8      	ldr	r0, [r7, #8]
 800a934:	f000 fb49 	bl	800afca <_ZN9N2kStream5printEPKc>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	791b      	ldrb	r3, [r3, #4]
 800a93c:	220a      	movs	r2, #10
 800a93e:	4619      	mov	r1, r3
 800a940:	68b8      	ldr	r0, [r7, #8]
 800a942:	f000 fb5f 	bl	800b004 <_ZN9N2kStream5printEih>
  port->print(F(" PGN:")); port->print(PGN);
 800a946:	4926      	ldr	r1, [pc, #152]	; (800a9e0 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf8>)
 800a948:	68b8      	ldr	r0, [r7, #8]
 800a94a:	f000 fb3e 	bl	800afca <_ZN9N2kStream5printEPKc>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	220a      	movs	r2, #10
 800a954:	4619      	mov	r1, r3
 800a956:	68b8      	ldr	r0, [r7, #8]
 800a958:	f000 fb54 	bl	800b004 <_ZN9N2kStream5printEih>
  port->print(F(" Source:")); port->print(Source);
 800a95c:	4921      	ldr	r1, [pc, #132]	; (800a9e4 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xfc>)
 800a95e:	68b8      	ldr	r0, [r7, #8]
 800a960:	f000 fb33 	bl	800afca <_ZN9N2kStream5printEPKc>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	7b1b      	ldrb	r3, [r3, #12]
 800a968:	220a      	movs	r2, #10
 800a96a:	4619      	mov	r1, r3
 800a96c:	68b8      	ldr	r0, [r7, #8]
 800a96e:	f000 fb49 	bl	800b004 <_ZN9N2kStream5printEih>
  port->print(F(" Dest:")); port->print(Destination);
 800a972:	491d      	ldr	r1, [pc, #116]	; (800a9e8 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x100>)
 800a974:	68b8      	ldr	r0, [r7, #8]
 800a976:	f000 fb28 	bl	800afca <_ZN9N2kStream5printEPKc>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	7b5b      	ldrb	r3, [r3, #13]
 800a97e:	220a      	movs	r2, #10
 800a980:	4619      	mov	r1, r3
 800a982:	68b8      	ldr	r0, [r7, #8]
 800a984:	f000 fb3e 	bl	800b004 <_ZN9N2kStream5printEih>
  port->print(F(" Len:")); port->print(DataLen);
 800a988:	4918      	ldr	r1, [pc, #96]	; (800a9ec <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x104>)
 800a98a:	68b8      	ldr	r0, [r7, #8]
 800a98c:	f000 fb1d 	bl	800afca <_ZN9N2kStream5printEPKc>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	220a      	movs	r2, #10
 800a996:	4619      	mov	r1, r3
 800a998:	68b8      	ldr	r0, [r7, #8]
 800a99a:	f000 fb33 	bl	800b004 <_ZN9N2kStream5printEih>
  if (!NoData) {
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	f083 0301 	eor.w	r3, r3, #1
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xde>
    port->print(F(" Data:"));
 800a9aa:	4911      	ldr	r1, [pc, #68]	; (800a9f0 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x108>)
 800a9ac:	68b8      	ldr	r0, [r7, #8]
 800a9ae:	f000 fb0c 	bl	800afca <_ZN9N2kStream5printEPKc>
    PrintBuf(port,DataLen,Data);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	b2d9      	uxtb	r1, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f103 0214 	add.w	r2, r3, #20
 800a9be:	2300      	movs	r3, #0
 800a9c0:	68b8      	ldr	r0, [r7, #8]
 800a9c2:	f7ff ff59 	bl	800a878 <_Z8PrintBufP9N2kStreamhPKhb>
  }
  port->println(F(""));
 800a9c6:	490b      	ldr	r1, [pc, #44]	; (800a9f4 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x10c>)
 800a9c8:	68b8      	ldr	r0, [r7, #8]
 800a9ca:	f000 fb5b 	bl	800b084 <_ZN9N2kStream7printlnEPKc>
 800a9ce:	e000      	b.n	800a9d2 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xea>
  if (port==0 || !IsValid()) return;
 800a9d0:	bf00      	nop
}
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	08016f0c 	.word	0x08016f0c
 800a9dc:	08016f10 	.word	0x08016f10
 800a9e0:	08016f18 	.word	0x08016f18
 800a9e4:	08016f20 	.word	0x08016f20
 800a9e8:	08016f2c 	.word	0x08016f2c
 800a9ec:	08016f34 	.word	0x08016f34
 800a9f0:	08016f3c 	.word	0x08016f3c
 800a9f4:	08016f08 	.word	0x08016f08

0800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>:

//*****************************************************************************
void AddByteEscapedToBuf(unsigned char byteToAdd, uint8_t &idx, unsigned char *buf, int &byteSum)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	607a      	str	r2, [r7, #4]
 800aa02:	603b      	str	r3, [r7, #0]
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]
  buf[idx++]=byteToAdd;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	b2d1      	uxtb	r1, r2
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	7011      	strb	r1, [r2, #0]
 800aa14:	461a      	mov	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4413      	add	r3, r2
 800aa1a:	7bfa      	ldrb	r2, [r7, #15]
 800aa1c:	701a      	strb	r2, [r3, #0]
  byteSum+=byteToAdd;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	441a      	add	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	601a      	str	r2, [r3, #0]

  if (byteToAdd == Escape) {
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	2b10      	cmp	r3, #16
 800aa2e:	d10a      	bne.n	800aa46 <_Z19AddByteEscapedToBufhRhPhRi+0x4e>
    buf[idx++]=Escape;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	b2d1      	uxtb	r1, r2
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	7011      	strb	r1, [r2, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4413      	add	r3, r2
 800aa42:	2210      	movs	r2, #16
 800aa44:	701a      	strb	r2, [r3, #0]
  }
}
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr

0800aa50 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>:

//*****************************************************************************
// Actisense Format:
// <10><02><93><length (1)><priority (1)><PGN (3)><destination (1)><source (1)><time (4)><len (1)><data (len)><CRC (1)><10><03>
void tN2kMsg::SendInActisenseFormat(N2kStream *port) const {
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b0ed      	sub	sp, #436	; 0x1b4
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800aa5e:	6018      	str	r0, [r3, #0]
 800aa60:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800aa68:	6019      	str	r1, [r3, #0]
  unsigned long _PGN=PGN;
 800aa6a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  unsigned long _MsgTime=MsgTime;
 800aa7a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa88:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  uint8_t msgIdx=0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
  int byteSum = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  uint8_t CheckSum;
  unsigned char ActisenseMsgBuf[MaxActisenseMsgBuf];

  if (port==0 || !IsValid()) return;
 800aa98:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00c      	beq.n	800aac0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x70>
 800aaa6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aaaa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	f7ff f9ec 	bl	8009e8c <_ZNK7tN2kMsg7IsValidEv>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f083 0301 	eor.w	r3, r3, #1
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x74>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x76>
 800aac4:	2300      	movs	r3, #0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f040 815d 	bne.w	800ad86 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x336>
  // Serial.print("freeMemory()="); Serial.println(freeMemory());

  ActisenseMsgBuf[msgIdx++]=Escape;
 800aacc:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800aad8:	461a      	mov	r2, r3
 800aada:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aade:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aae2:	2110      	movs	r1, #16
 800aae4:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++]=StartOfText;
 800aae6:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aaf8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aafc:	2102      	movs	r1, #2
 800aafe:	5499      	strb	r1, [r3, r2]
  AddByteEscapedToBuf(MsgTypeN2k,msgIdx,ActisenseMsgBuf,byteSum);
 800ab00:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ab04:	f107 020c 	add.w	r2, r7, #12
 800ab08:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ab0c:	2093      	movs	r0, #147	; 0x93
 800ab0e:	f7ff ff73 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen+11,msgIdx,ActisenseMsgBuf,byteSum); //length does not include escaped chars
 800ab12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ab16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	330b      	adds	r3, #11
 800ab22:	b2d8      	uxtb	r0, r3
 800ab24:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ab28:	f107 020c 	add.w	r2, r7, #12
 800ab2c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ab30:	f7ff ff62 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Priority,msgIdx,ActisenseMsgBuf,byteSum);
 800ab34:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ab38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	7918      	ldrb	r0, [r3, #4]
 800ab40:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ab44:	f107 020c 	add.w	r2, r7, #12
 800ab48:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ab4c:	f7ff ff54 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 800ab50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ab54:	b2d8      	uxtb	r0, r3
 800ab56:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ab5a:	f107 020c 	add.w	r2, r7, #12
 800ab5e:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ab62:	f7ff ff49 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
 800ab66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ab6a:	0a1b      	lsrs	r3, r3, #8
 800ab6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 800ab70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ab74:	b2d8      	uxtb	r0, r3
 800ab76:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ab7a:	f107 020c 	add.w	r2, r7, #12
 800ab7e:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ab82:	f7ff ff39 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
 800ab86:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ab8a:	0a1b      	lsrs	r3, r3, #8
 800ab8c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800ab90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ab94:	b2d8      	uxtb	r0, r3
 800ab96:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ab9a:	f107 020c 	add.w	r2, r7, #12
 800ab9e:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800aba2:	f7ff ff29 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Destination,msgIdx,ActisenseMsgBuf,byteSum);
 800aba6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800abaa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	7b58      	ldrb	r0, [r3, #13]
 800abb2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800abb6:	f107 020c 	add.w	r2, r7, #12
 800abba:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800abbe:	f7ff ff1b 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Source,msgIdx,ActisenseMsgBuf,byteSum);
 800abc2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800abc6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	7b18      	ldrb	r0, [r3, #12]
 800abce:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800abd2:	f107 020c 	add.w	r2, r7, #12
 800abd6:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800abda:	f7ff ff0d 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  // Time?
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800abde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800abe2:	b2d8      	uxtb	r0, r3
 800abe4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800abe8:	f107 020c 	add.w	r2, r7, #12
 800abec:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800abf0:	f7ff ff02 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
 800abf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800abf8:	0a1b      	lsrs	r3, r3, #8
 800abfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800abfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ac02:	b2d8      	uxtb	r0, r3
 800ac04:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ac08:	f107 020c 	add.w	r2, r7, #12
 800ac0c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ac10:	f7ff fef2 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
 800ac14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ac18:	0a1b      	lsrs	r3, r3, #8
 800ac1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800ac1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ac22:	b2d8      	uxtb	r0, r3
 800ac24:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ac28:	f107 020c 	add.w	r2, r7, #12
 800ac2c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ac30:	f7ff fee2 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
 800ac34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ac38:	0a1b      	lsrs	r3, r3, #8
 800ac3a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800ac3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ac42:	b2d8      	uxtb	r0, r3
 800ac44:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ac48:	f107 020c 	add.w	r2, r7, #12
 800ac4c:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ac50:	f7ff fed2 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen,msgIdx,ActisenseMsgBuf,byteSum);
 800ac54:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ac58:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	b2d8      	uxtb	r0, r3
 800ac62:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800ac66:	f107 020c 	add.w	r2, r7, #12
 800ac6a:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800ac6e:	f7ff fec3 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>


  for (int i = 0; i < DataLen; i++) AddByteEscapedToBuf(Data[i],msgIdx,ActisenseMsgBuf,byteSum);
 800ac72:	2300      	movs	r3, #0
 800ac74:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800ac78:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ac7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	da17      	bge.n	800acbc <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x26c>
 800ac8c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ac90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ac9a:	4413      	add	r3, r2
 800ac9c:	3314      	adds	r3, #20
 800ac9e:	7818      	ldrb	r0, [r3, #0]
 800aca0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800aca4:	f107 020c 	add.w	r2, r7, #12
 800aca8:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800acac:	f7ff fea4 	bl	800a9f8 <_Z19AddByteEscapedToBufhRhPhRi>
 800acb0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800acb4:	3301      	adds	r3, #1
 800acb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800acba:	e7dd      	b.n	800ac78 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x228>
  byteSum %= 256;
 800acbc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800acc0:	425a      	negs	r2, r3
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	bf58      	it	pl
 800acc8:	4253      	negpl	r3, r2
 800acca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

  CheckSum = (uint8_t)((byteSum == 0) ? 0 : (256 - byteSum));
 800acce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x292>
 800acd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	425b      	negs	r3, r3
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	e000      	b.n	800ace4 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x294>
 800ace2:	2300      	movs	r3, #0
 800ace4:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
  ActisenseMsgBuf[msgIdx++]=CheckSum;
 800ace8:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	b2d2      	uxtb	r2, r2
 800acf0:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800acf4:	4619      	mov	r1, r3
 800acf6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800acfa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800acfe:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 800ad02:	545a      	strb	r2, [r3, r1]
  if (CheckSum==Escape) ActisenseMsgBuf[msgIdx++]=CheckSum;
 800ad04:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	d10d      	bne.n	800ad28 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x2d8>
 800ad0c:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ad1e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ad22:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 800ad26:	545a      	strb	r2, [r3, r1]

  ActisenseMsgBuf[msgIdx++] = Escape;
 800ad28:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	b2d2      	uxtb	r2, r2
 800ad30:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800ad34:	461a      	mov	r2, r3
 800ad36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ad3a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ad3e:	2110      	movs	r1, #16
 800ad40:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++] = EndOfText;
 800ad42:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	b2d2      	uxtb	r2, r2
 800ad4a:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ad54:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ad58:	2103      	movs	r1, #3
 800ad5a:	5499      	strb	r1, [r3, r2]

//  if ( port->availableForWrite()>msgIdx ) {  // 16.7.2017 did not work yet
    port->write(ActisenseMsgBuf,msgIdx);
 800ad5c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ad60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 800ad70:	4614      	mov	r4, r2
 800ad72:	f107 010c 	add.w	r1, r7, #12
 800ad76:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800ad7a:	f5a2 70d8 	sub.w	r0, r2, #432	; 0x1b0
 800ad7e:	4622      	mov	r2, r4
 800ad80:	6800      	ldr	r0, [r0, #0]
 800ad82:	4798      	blx	r3
 800ad84:	e000      	b.n	800ad88 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x338>
  if (port==0 || !IsValid()) return;
 800ad86:	bf00      	nop
//  }
    //Serial.print("Actisense data:");
    //PrintBuf(msgIdx,ActisenseMsgBuf);
    //Serial.print("\r\n");
}
 800ad88:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd90      	pop	{r4, r7, pc}

0800ad90 <_Z6SetBufIlEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	4413      	add	r3, r2
 800ada8:	f107 010c 	add.w	r1, r7, #12
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	4618      	mov	r0, r3
 800adb0:	f00b f828 	bl	8015e04 <memcpy>
  index += len;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4413      	add	r3, r2
 800adbe:	461a      	mov	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	601a      	str	r2, [r3, #0]
}
 800adc4:	bf00      	nop
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_Z6SetBufImEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	4413      	add	r3, r2
 800ade4:	f107 010c 	add.w	r1, r7, #12
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	4618      	mov	r0, r3
 800adec:	f00b f80a 	bl	8015e04 <memcpy>
  index += len;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	461a      	mov	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	4413      	add	r3, r2
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	601a      	str	r2, [r3, #0]
}
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_Z6GetBufItET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  T v{0};
 800ae14:	2300      	movs	r3, #0
 800ae16:	82fb      	strh	r3, [r7, #22]
  memcpy(&v, &buf[index], len);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	1899      	adds	r1, r3, r2
 800ae22:	f107 0316 	add.w	r3, r7, #22
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f00a ffeb 	bl	8015e04 <memcpy>
  index += len;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	601a      	str	r2, [r3, #0]
  return v;
 800ae3e:	8afb      	ldrh	r3, [r7, #22]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <_Z6GetBufImET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  T v{0};
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
  memcpy(&v, &buf[index], len);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	1899      	adds	r1, r3, r2
 800ae62:	f107 0314 	add.w	r3, r7, #20
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f00a ffcb 	bl	8015e04 <memcpy>
  index += len;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	4413      	add	r3, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	601a      	str	r2, [r3, #0]
  return v;
 800ae7e:	697b      	ldr	r3, [r7, #20]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <_Z6GetBufIyET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  T v{0};
 800ae94:	f04f 0200 	mov.w	r2, #0
 800ae98:	f04f 0300 	mov.w	r3, #0
 800ae9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  memcpy(&v, &buf[index], len);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	1899      	adds	r1, r3, r2
 800aeaa:	f107 0310 	add.w	r3, r7, #16
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f00a ffa7 	bl	8015e04 <memcpy>
  index += len;
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	461a      	mov	r2, r3
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	601a      	str	r2, [r3, #0]
  return v;
 800aec6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800aeca:	4610      	mov	r0, r2
 800aecc:	4619      	mov	r1, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <_Z6SetBufIsEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60b9      	str	r1, [r7, #8]
 800aedc:	607a      	str	r2, [r7, #4]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	4603      	mov	r3, r0
 800aee2:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	461a      	mov	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	4413      	add	r3, r2
 800aeee:	f107 010e 	add.w	r1, r7, #14
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f00a ff85 	bl	8015e04 <memcpy>
  index += len;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	4413      	add	r3, r2
 800af04:	461a      	mov	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	601a      	str	r2, [r3, #0]
}
 800af0a:	bf00      	nop
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <_Z6SetBufItEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	603b      	str	r3, [r7, #0]
 800af1e:	4603      	mov	r3, r0
 800af20:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	4413      	add	r3, r2
 800af2c:	f107 010e 	add.w	r1, r7, #14
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	4618      	mov	r0, r3
 800af34:	f00a ff66 	bl	8015e04 <memcpy>
  index += len;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	461a      	mov	r2, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	4413      	add	r3, r2
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <_Z6SetBufIhEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60b9      	str	r1, [r7, #8]
 800af58:	607a      	str	r2, [r7, #4]
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]
  memcpy(&buf[index], &v, len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	4413      	add	r3, r2
 800af6a:	f107 010f 	add.w	r1, r7, #15
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	4618      	mov	r0, r3
 800af72:	f00a ff47 	bl	8015e04 <memcpy>
  index += len;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	4413      	add	r3, r2
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
}
 800af86:	bf00      	nop
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <_Z6SetBufIyEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	461a      	mov	r2, r3
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	4413      	add	r3, r2
 800afa6:	f107 0108 	add.w	r1, r7, #8
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	f00a ff29 	bl	8015e04 <memcpy>
  index += len;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4413      	add	r3, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	601a      	str	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <_ZN9N2kStream5printEPKc>:
#include <string.h>

#ifdef ARDUINO
// Arduino uses its own implementation.
#else
size_t N2kStream::print(const char *str) {
 800afca:	b590      	push	{r4, r7, lr}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
   if(str == 0)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <_ZN9N2kStream5printEPKc+0x14>
      return 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	e00d      	b.n	800affa <_ZN9N2kStream5printEPKc+0x30>

   return write(reinterpret_cast<const uint8_t*>(str), strlen(str));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	681c      	ldr	r4, [r3, #0]
 800afe6:	6838      	ldr	r0, [r7, #0]
 800afe8:	f7f5 f928 	bl	800023c <strlen>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	47a0      	blx	r4
 800aff6:	4603      	mov	r3, r0
 800aff8:	bf00      	nop
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	bd90      	pop	{r4, r7, pc}
	...

0800b004 <_ZN9N2kStream5printEih>:
   return print(str) + print("\r\n");
}
#endif


size_t N2kStream::print(int val, uint8_t radix) {
 800b004:	b580      	push	{r7, lr}
 800b006:	b08e      	sub	sp, #56	; 0x38
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4613      	mov	r3, r2
 800b010:	71fb      	strb	r3, [r7, #7]

   if(val == 0) {
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d109      	bne.n	800b02c <_ZN9N2kStream5printEih+0x28>
      // 0 is always 0 regardless of radix.
      return write(reinterpret_cast<const uint8_t*>("0"), 1);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3308      	adds	r3, #8
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2201      	movs	r2, #1
 800b022:	4916      	ldr	r1, [pc, #88]	; (800b07c <_ZN9N2kStream5printEih+0x78>)
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	4798      	blx	r3
 800b028:	4603      	mov	r3, r0
 800b02a:	e023      	b.n	800b074 <_ZN9N2kStream5printEih+0x70>
   }

   // Enough for binary representation.
   char buf[8 * sizeof(val) + 1];
   char *ptr = &buf[sizeof(buf) - 1];
 800b02c:	f107 0310 	add.w	r3, r7, #16
 800b030:	3320      	adds	r3, #32
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
   *ptr = '\0';
 800b034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]

   do {
      *--ptr="0123456789abcdef"[val % radix];
 800b03a:	79fa      	ldrb	r2, [r7, #7]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b042:	fb01 f202 	mul.w	r2, r1, r2
 800b046:	1a9b      	subs	r3, r3, r2
 800b048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b04a:	3a01      	subs	r2, #1
 800b04c:	637a      	str	r2, [r7, #52]	; 0x34
 800b04e:	4a0c      	ldr	r2, [pc, #48]	; (800b080 <_ZN9N2kStream5printEih+0x7c>)
 800b050:	5cd2      	ldrb	r2, [r2, r3]
 800b052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b054:	701a      	strb	r2, [r3, #0]
      val /= radix;
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	fb92 f3f3 	sdiv	r3, r2, r3
 800b05e:	60bb      	str	r3, [r7, #8]
   } while(val != 0);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d000      	beq.n	800b068 <_ZN9N2kStream5printEih+0x64>
   do {
 800b066:	e7e8      	b.n	800b03a <_ZN9N2kStream5printEih+0x36>

   return print(ptr);
 800b068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff ffad 	bl	800afca <_ZN9N2kStream5printEPKc>
 800b070:	4603      	mov	r3, r0
 800b072:	bf00      	nop
}
 800b074:	4618      	mov	r0, r3
 800b076:	3738      	adds	r7, #56	; 0x38
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	08016f44 	.word	0x08016f44
 800b080:	08016f48 	.word	0x08016f48

0800b084 <_ZN9N2kStream7printlnEPKc>:

size_t N2kStream::println(const char *str) {
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
   return print(str) + print("\r\n");
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7ff ff9a 	bl	800afca <_ZN9N2kStream5printEPKc>
 800b096:	4604      	mov	r4, r0
 800b098:	4904      	ldr	r1, [pc, #16]	; (800b0ac <_ZN9N2kStream7printlnEPKc+0x28>)
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff ff95 	bl	800afca <_ZN9N2kStream5printEPKc>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4423      	add	r3, r4
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	08016f5c 	.word	0x08016f5c

0800b0b0 <_ZN9N2kStream7printlnEih>:

size_t N2kStream::println(int val, uint8_t radix) {
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	71fb      	strb	r3, [r7, #7]
   return print(val, radix) + print("\r\n");
 800b0be:	79fb      	ldrb	r3, [r7, #7]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff ff9d 	bl	800b004 <_ZN9N2kStream5printEih>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4904      	ldr	r1, [pc, #16]	; (800b0e0 <_ZN9N2kStream7printlnEih+0x30>)
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7ff ff7b 	bl	800afca <_ZN9N2kStream5printEPKc>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	4423      	add	r3, r4
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd90      	pop	{r4, r7, pc}
 800b0e0:	08016f5c 	.word	0x08016f5c

0800b0e4 <_Z9N2kMillisv>:
  #else
    extern "C" {
    // Current uptime in milliseconds. Must be implemented by application.
    extern uint32_t millis();
    }
    uint32_t N2kMillis() { return millis(); }
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	f006 fd68 	bl	8011bbc <millis>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <_Z11N2kMillis64v>:
  #endif

  uint64_t N2kMillis64() {
 800b0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
    static uint32_t RollCount=0;
    static uint32_t LastRead=0;
    uint32_t Now=millis();
 800b0fc:	f006 fd5e 	bl	8011bbc <millis>
 800b100:	6078      	str	r0, [r7, #4]
    if ( LastRead>Now ) RollCount++;
 800b102:	4b14      	ldr	r3, [pc, #80]	; (800b154 <_Z11N2kMillis64v+0x60>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d204      	bcs.n	800b116 <_Z11N2kMillis64v+0x22>
 800b10c:	4b12      	ldr	r3, [pc, #72]	; (800b158 <_Z11N2kMillis64v+0x64>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3301      	adds	r3, #1
 800b112:	4a11      	ldr	r2, [pc, #68]	; (800b158 <_Z11N2kMillis64v+0x64>)
 800b114:	6013      	str	r3, [r2, #0]
    LastRead=Now;
 800b116:	4a0f      	ldr	r2, [pc, #60]	; (800b154 <_Z11N2kMillis64v+0x60>)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6013      	str	r3, [r2, #0]
    return ((uint64_t)RollCount)<<32 | Now;
 800b11c:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <_Z11N2kMillis64v+0x64>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2200      	movs	r2, #0
 800b122:	469a      	mov	sl, r3
 800b124:	4693      	mov	fp, r2
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	f04f 0300 	mov.w	r3, #0
 800b12e:	4653      	mov	r3, sl
 800b130:	2200      	movs	r2, #0
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	2000      	movs	r0, #0
 800b136:	460c      	mov	r4, r1
 800b138:	4605      	mov	r5, r0
 800b13a:	ea42 0804 	orr.w	r8, r2, r4
 800b13e:	ea43 0905 	orr.w	r9, r3, r5
 800b142:	4642      	mov	r2, r8
 800b144:	464b      	mov	r3, r9
  }
 800b146:	4610      	mov	r0, r2
 800b148:	4619      	mov	r1, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b152:	bf00      	nop
 800b154:	2000036c 	.word	0x2000036c
 800b158:	20000368 	.word	0x20000368

0800b15c <_ZN13tN2kScheduler3NowEv>:
#endif

#if !defined(N2kUse64bitSchedulerTime)
// *****************************************************************************
tN2kSchedulerTime tN2kScheduler::Now() {
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  return N2kMillis();
 800b164:	f7ff ffbe 	bl	800b0e4 <_Z9N2kMillisv>
 800b168:	4603      	mov	r3, r0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	78fa      	ldrb	r2, [r7, #3]
 800b182:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bc80      	pop	{r7}
 800b18e:	4770      	bx	lr

0800b190 <_ZNK7tN2kMsg11ForceSourceEh>:
  void ForceSource(unsigned char _Source) const { Source=_Source; }
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	731a      	strb	r2, [r3, #12]
 800b1a2:	bf00      	nop
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr

0800b1ac <_ZNK7tN2kMsg16CheckDestinationEv>:
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; }
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <_ZNK7tN2kMsg16CheckDestinationEv+0x18>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	22ff      	movs	r2, #255	; 0xff
 800b1c2:	735a      	strb	r2, [r3, #13]
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr

0800b1ce <_ZN10tN2kCANMsgC1Ev>:
public:
  /************************************************************************//**
   * \brief Constructor of class \ref tN2kCANMsg
   *
   */
  tN2kCANMsg()
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	af02      	add	r7, sp, #8
 800b1d4:	6078      	str	r0, [r7, #4]
    : Ready(false),FreeMsg(true),SystemMessage(false), KnownMessage(false) 
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      ,TPRequireCTS(false), TPMaxPackets(0) 
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	2206      	movs	r2, #6
 800b1e0:	210f      	movs	r1, #15
 800b1e2:	f7fe fe9d 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
#endif
    {
	  N2kMsg.Clear();
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe ff08 	bl	800a02e <_ZN7tN2kMsg5ClearEv>
  }
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <_ZN10tN2kCANMsg11FreeMessageEv>:
   * \brief Free the message
   * 
   * This resets the whole message and clears all the content
   *
   */
  void FreeMessage() { 
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
    FreeMsg=true; Ready=false; SystemMessage=false; 
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    TPMaxPackets=0; TPRequireCTS=false; 
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
#endif
    N2kMsg.Clear(); N2kMsg.Source=0; 
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fee7 	bl	800a02e <_ZN7tN2kMsg5ClearEv>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	731a      	strb	r2, [r3, #12]
  }  
 800b266:	bf00      	nop
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <_Z15N2kIsTimeBeforemm>:
inline bool N2kIsTimeBefore(uint32_t T1, uint32_t T2) { return (T2-T1)<LONG_MAX; }
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b282:	4293      	cmp	r3, r2
 800b284:	bf34      	ite	cc
 800b286:	2301      	movcc	r3, #1
 800b288:	2300      	movcs	r3, #0
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>:
   * \brief Set the Period And Offset of the Scheduler
   *
   * \param _Period Period in [ms] of the Scheduler
   * \param _Offset Offset in [ms] of the Scheduler
   */
  void SetPeriodAndOffset(uint32_t _Period, uint32_t _Offset) { 
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	607a      	str	r2, [r7, #4]
    Period=_Period; 
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	60da      	str	r2, [r3, #12]
    Offset=_Offset;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	609a      	str	r2, [r3, #8]
    if ( Period==0 ) Disable(); 
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm+0x26>
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7f6 f817 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
    UpdateNextTime(); 
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7f6 f837 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  }
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <_ZNK17tN2kSyncScheduler9GetOffsetEv>:
  /************************************************************************//**
   * \brief Get the Offset of the Scheduler
   *
   * \return uint32_t Offset in [ms] of the scheduler
   */
  uint32_t GetOffset() const { return Offset; }
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr

0800b2e0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>:
  /************************************************************************//**
   * \brief Get the Period of the Scheduler
   *
   * \return uint32_t Period in [ms] of the scheduler
   */
  uint32_t GetPeriod() const { return Period; }
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bc80      	pop	{r7}
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>:
  }
  /************************************************************************//**
   * \brief Set the SyncOffset of the scheduler
   *
   */
  static void SetSyncOffset() { SyncOffset=N2kMillis64(); }
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	f7ff fefa 	bl	800b0f4 <_Z11N2kMillis64v>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4902      	ldr	r1, [pc, #8]	; (800b310 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv+0x18>)
 800b306:	e9c1 2300 	strd	r2, r3, [r1]
 800b30a:	bf00      	nop
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20000360 	.word	0x20000360

0800b314 <_ZN13tN2kSchedulerC1Em>:
  /************************************************************************//**
   * \brief Constructor
   *
   * \param _NextTime   Timestamp for next event
   */
  tN2kScheduler(tN2kSchedulerTime _NextTime=N2kSchedulerDisabled) : NextTime(_NextTime) { }
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bc80      	pop	{r7}
 800b32e:	4770      	bx	lr

0800b330 <_ZN13tN2kScheduler7DisableEv>:

  /************************************************************************//**
   * \brief Disable the Scheduler
   */
  void Disable() { 
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
    NextTime=N2kSchedulerDisabled; 
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b33e:	601a      	str	r2, [r3, #0]
  }
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	bc80      	pop	{r7}
 800b348:	4770      	bx	lr

0800b34a <_ZNK13tN2kScheduler10IsDisabledEv>:
   * \brief Check if the scheduler is disabled
   *
   * \return true   scheduler is disabled
   * \return false 
   */
  bool IsDisabled() const { return NextTime==N2kSchedulerDisabled; }
 800b34a:	b480      	push	{r7}
 800b34c:	b083      	sub	sp, #12
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b35a:	bf0c      	ite	eq
 800b35c:	2301      	moveq	r3, #1
 800b35e:	2300      	movne	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	bc80      	pop	{r7}
 800b36a:	4770      	bx	lr

0800b36c <_ZNK13tN2kScheduler9IsEnabledEv>:
   * \brief Check if the scheduler is enabled
   *
   * \return true     scheduler is enabled
   * \return false 
   */
  bool IsEnabled() const { return NextTime!=N2kSchedulerDisabled; }
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b37c:	bf14      	ite	ne
 800b37e:	2301      	movne	r3, #1
 800b380:	2300      	moveq	r3, #0
 800b382:	b2db      	uxtb	r3, r3
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	bc80      	pop	{r7}
 800b38c:	4770      	bx	lr

0800b38e <_ZNK13tN2kScheduler6IsTimeEv>:
   * \brief Is it time for the next event
   *
   * \return true   when now > nextTime
   * \return false 
   */
  bool IsTime() const {
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
    #if defined(N2kUse64bitSchedulerTime)
    return N2kMillis64()>NextTime;
    #else
    return !IsDisabled() && ( N2kMillis()-NextTime<LONG_MAX );
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ffd7 	bl	800b34a <_ZNK13tN2kScheduler10IsDisabledEv>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f083 0301 	eor.w	r3, r3, #1
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00b      	beq.n	800b3c0 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 800b3a8:	f7ff fe9c 	bl	800b0e4 <_Z9N2kMillisv>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d201      	bcs.n	800b3c0 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e000      	b.n	800b3c2 <_ZNK13tN2kScheduler6IsTimeEv+0x34>
 800b3c0:	2300      	movs	r3, #0
    #endif
  }
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <_ZN13tN2kScheduler7FromNowEm>:
  /************************************************************************//**
   * \brief Set Timestamp for next event relativ to now
   *
   * \param _Add Time delay from now for next event
   */
  void FromNow(uint32_t _Add) {
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
    #if defined(N2kUse64bitSchedulerTime)
    NextTime=N2kMillis64()+_Add;
    #else
    NextTime=Now()+_Add;
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff fec1 	bl	800b15c <_ZN13tN2kScheduler3NowEv>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	441a      	add	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	601a      	str	r2, [r3, #0]
    if ( NextTime==N2kSchedulerDisabled ) NextTime=0; // Roll over
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ec:	d102      	bne.n	800b3f4 <_ZN13tN2kScheduler7FromNowEm+0x2a>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	601a      	str	r2, [r3, #0]
    #endif
  }
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>:
    void SetUniqueNumber(uint32_t _UniqueNumber) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0xffe00000) | (_UniqueNumber&0x1fffff); }
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	0d5b      	lsrs	r3, r3, #21
 800b40c:	055b      	lsls	r3, r3, #21
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	f3c2 0214 	ubfx	r2, r2, #0, #21
 800b414:	431a      	orrs	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	bc80      	pop	{r7}
 800b422:	4770      	bx	lr

0800b424 <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>:
    void SetManufacturerCode(uint16_t _ManufacturerCode) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0x1fffff) | (((unsigned long)(_ManufacturerCode&0x7ff))<<21); }
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	807b      	strh	r3, [r7, #2]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f3c3 0214 	ubfx	r2, r3, #0, #21
 800b438:	887b      	ldrh	r3, [r7, #2]
 800b43a:	055b      	lsls	r3, r3, #21
 800b43c:	431a      	orrs	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	bf00      	nop
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	bc80      	pop	{r7}
 800b44a:	4770      	bx	lr

0800b44c <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>:
    void SetDeviceInstance(unsigned char _DeviceInstance) { DeviceInformation.DeviceInstance=_DeviceInstance; }
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	70fb      	strb	r3, [r7, #3]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	78fa      	ldrb	r2, [r7, #3]
 800b45c:	711a      	strb	r2, [r3, #4]
 800b45e:	bf00      	nop
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	bc80      	pop	{r7}
 800b466:	4770      	bx	lr

0800b468 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>:
    unsigned char GetDeviceInstance() const { return DeviceInformation.DeviceInstance; }
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	791b      	ldrb	r3, [r3, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	bc80      	pop	{r7}
 800b47c:	4770      	bx	lr

0800b47e <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>:
    void SetDeviceFunction(unsigned char _DeviceFunction) { DeviceInformation.DeviceFunction=_DeviceFunction; }
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	715a      	strb	r2, [r3, #5]
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	bc80      	pop	{r7}
 800b498:	4770      	bx	lr

0800b49a <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>:
    void SetDeviceClass(unsigned char _DeviceClass) { DeviceInformation.DeviceClass=((_DeviceClass&0x7f)<<1); }
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	719a      	strb	r2, [r3, #6]
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bc80      	pop	{r7}
 800b4b8:	4770      	bx	lr

0800b4ba <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>:
    void SetIndustryGroup(unsigned char _IndustryGroup) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0x0f) | (_IndustryGroup<<4) | 0x80; }
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	70fb      	strb	r3, [r7, #3]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	79db      	ldrb	r3, [r3, #7]
 800b4ca:	b25b      	sxtb	r3, r3
 800b4cc:	f003 030f 	and.w	r3, r3, #15
 800b4d0:	b25a      	sxtb	r2, r3
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	011b      	lsls	r3, r3, #4
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	b25b      	sxtb	r3, r3
 800b4dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4e0:	b25b      	sxtb	r3, r3
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	71da      	strb	r2, [r3, #7]
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bc80      	pop	{r7}
 800b4f0:	4770      	bx	lr

0800b4f2 <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>:
    void SetSystemInstance(unsigned char _SystemInstance) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0xf0) | (_SystemInstance&0x0f); }
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	79db      	ldrb	r3, [r3, #7]
 800b502:	f023 030f 	bic.w	r3, r3, #15
 800b506:	b2da      	uxtb	r2, r3
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	f003 030f 	and.w	r3, r3, #15
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	4313      	orrs	r3, r2
 800b512:	b2da      	uxtb	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	71da      	strb	r2, [r3, #7]
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr

0800b522 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>:
      inline unsigned long GetPGN() const { return PGN; }
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	4618      	mov	r0, r3
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	bc80      	pop	{r7}
 800b536:	4770      	bx	lr

0800b538 <_ZN9tNMEA200015tInternalDeviceC1Ev>:
    tInternalDevice() {
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3308      	adds	r3, #8
 800b544:	4618      	mov	r0, r3
 800b546:	f7fc f900 	bl	800774a <_ZN9tNMEA200018tDeviceInformationC1Ev>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	331c      	adds	r3, #28
 800b54e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff fede 	bl	800b314 <_ZN13tN2kSchedulerC1Em>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3320      	adds	r3, #32
 800b55c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fed7 	bl	800b314 <_ZN13tN2kSchedulerC1Em>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3324      	adds	r3, #36	; 0x24
 800b56a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff fed0 	bl	800b314 <_ZN13tN2kSchedulerC1Em>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3328      	adds	r3, #40	; 0x28
 800b578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff fec9 	bl	800b314 <_ZN13tN2kSchedulerC1Em>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b588:	2300      	movs	r3, #0
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2300      	movs	r3, #0
 800b58e:	2206      	movs	r2, #6
 800b590:	210f      	movs	r1, #15
 800b592:	f7fe fcc5 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b59c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7ff feb7 	bl	800b314 <_ZN13tN2kSchedulerC1Em>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	f7f5 fe7d 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
      N2kSource=0;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	701a      	strb	r2, [r3, #0]
      HasPendingInformation=false;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      ProductInformation=0; LocalProductInformation=0; ManufacturerSerialCode=0;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	611a      	str	r2, [r3, #16]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	615a      	str	r2, [r3, #20]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	619a      	str	r2, [r3, #24]
      AddressClaimEndSource=N2kMaxCanBusAddress; //GetNextAddressFromBeginning=true;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	22fb      	movs	r2, #251	; 0xfb
 800b5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      TransmitMessages=0; ReceiveMessages=0;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	62da      	str	r2, [r3, #44]	; 0x2c
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	631a      	str	r2, [r3, #48]	; 0x30
      PGNSequenceCounters=0; MaxPGNSequenceCounters=0;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	635a      	str	r2, [r3, #52]	; 0x34
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38
      NextDTSequence=0;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
      HeartbeatSequence=0;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    }
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>:
    void SetPendingIsoAddressClaim(unsigned long FromNow=2) { PendingIsoAddressClaim.FromNow(FromNow); HasPendingInformation=true; }
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	331c      	adds	r3, #28
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff fed2 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>:
    bool QueryPendingIsoAddressClaim() { return PendingIsoAddressClaim.IsTime(); }
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	331c      	adds	r3, #28
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fea3 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 800b648:	4603      	mov	r3, r0
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>:
    void ClearPendingIsoAddressClaim() { PendingIsoAddressClaim.Disable(); UpdateHasPendingInformation(); }
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	331c      	adds	r3, #28
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fe66 	bl	800b330 <_ZN13tN2kScheduler7DisableEv>
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f892 	bl	800b78e <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800b66a:	bf00      	nop
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>:
    void SetPendingProductInformation() { PendingProductInformation.FromNow(187+N2kSource*8); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 800b672:	b580      	push	{r7, lr}
 800b674:	b082      	sub	sp, #8
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f103 0220 	add.w	r2, r3, #32
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	33bb      	adds	r3, #187	; 0xbb
 800b688:	4619      	mov	r1, r3
 800b68a:	4610      	mov	r0, r2
 800b68c:	f7ff fe9d 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>:
    void ClearPendingProductInformation() { PendingProductInformation.Disable(); UpdateHasPendingInformation(); }
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3320      	adds	r3, #32
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff fe3f 	bl	800b330 <_ZN13tN2kScheduler7DisableEv>
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f86b 	bl	800b78e <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800b6b8:	bf00      	nop
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>:
    bool QueryPendingProductInformation() { return PendingProductInformation.IsTime(); }
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3320      	adds	r3, #32
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff fe5e 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>:
    void SetPendingConfigurationInformation() { PendingConfigurationInformation.FromNow(187+N2kSource*10); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	005b      	lsls	r3, r3, #1
 800b6f8:	33bb      	adds	r3, #187	; 0xbb
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7ff fe64 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b70a:	bf00      	nop
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>:
    void ClearPendingConfigurationInformation() { PendingConfigurationInformation.Disable(); UpdateHasPendingInformation(); }
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3324      	adds	r3, #36	; 0x24
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff fe06 	bl	800b330 <_ZN13tN2kScheduler7DisableEv>
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f832 	bl	800b78e <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>:
    bool QueryPendingConfigurationInformation() { return PendingConfigurationInformation.IsTime(); }
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3324      	adds	r3, #36	; 0x24
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fe25 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 800b744:	4603      	mov	r3, r0
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>:
    void UpdateAddressClaimEndSource() {
 800b74e:	b480      	push	{r7}
 800b750:	b083      	sub	sp, #12
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
      AddressClaimEndSource=N2kSource;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	781a      	ldrb	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d008      	beq.n	800b77c <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x2e>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b770:	3b01      	subs	r3, #1
 800b772:	b2da      	uxtb	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
 800b77a:	e003      	b.n	800b784 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x36>
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	22fb      	movs	r2, #251	; 0xfb
 800b780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	bc80      	pop	{r7}
 800b78c:	4770      	bx	lr

0800b78e <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>:
    void UpdateHasPendingInformation() {
 800b78e:	b590      	push	{r4, r7, lr}
 800b790:	b083      	sub	sp, #12
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	331c      	adds	r3, #28
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fde6 	bl	800b36c <_ZNK13tN2kScheduler9IsEnabledEv>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	461c      	mov	r4, r3
                            | PendingProductInformation.IsEnabled()
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3320      	adds	r3, #32
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff fddf 	bl	800b36c <_ZNK13tN2kScheduler9IsEnabledEv>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	4323      	orrs	r3, r4
 800b7b2:	b2dc      	uxtb	r4, r3
                            | PendingConfigurationInformation.IsEnabled()
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3324      	adds	r3, #36	; 0x24
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff fdd7 	bl	800b36c <_ZNK13tN2kScheduler9IsEnabledEv>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	4323      	orrs	r3, r4
 800b7c2:	b2dc      	uxtb	r4, r3
                            | NextDTSendTime.IsEnabled()
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7ff fdce 	bl	800b36c <_ZNK13tN2kScheduler9IsEnabledEv>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	4323      	orrs	r3, r4
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	bf14      	ite	ne
 800b7da:	2301      	movne	r3, #1
 800b7dc:	2300      	moveq	r3, #0
 800b7de:	b2da      	uxtb	r2, r3
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd90      	pop	{r4, r7, pc}

0800b7ee <_ZN9tNMEA200013IsInitializedEv>:
    bool IsInitialized() { return (N2kCANMsgBuf!=0); }
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bf14      	ite	ne
 800b7fe:	2301      	movne	r3, #1
 800b800:	2300      	moveq	r3, #0
 800b802:	b2db      	uxtb	r3, r3
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	bc80      	pop	{r7}
 800b80c:	4770      	bx	lr

0800b80e <_ZNK9tNMEA200014ForwardEnabledEv>:
    bool ForwardEnabled() const { return ((ForwardMode&FwdModeBit_EnableForward)>0 && (N2kMode!=N2km_SendOnly)); }
 800b80e:	b480      	push	{r7}
 800b810:	b083      	sub	sp, #12
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	795b      	ldrb	r3, [r3, #5]
 800b826:	2b03      	cmp	r3, #3
 800b828:	d001      	beq.n	800b82e <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e000      	b.n	800b830 <_ZNK9tNMEA200014ForwardEnabledEv+0x22>
 800b82e:	2300      	movs	r3, #0
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr

0800b83a <_ZNK9tNMEA200021ForwardSystemMessagesEv>:
    bool ForwardSystemMessages() const { return ((ForwardMode&FwdModeBit_SystemMessages)>0); }
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bf14      	ite	ne
 800b84e:	2301      	movne	r3, #1
 800b850:	2300      	moveq	r3, #0
 800b852:	b2db      	uxtb	r3, r3
 800b854:	4618      	mov	r0, r3
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc80      	pop	{r7}
 800b85c:	4770      	bx	lr

0800b85e <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>:
    bool ForwardOnlyKnownMessages() const { return ((ForwardMode&FwdModeBit_OnlyKnownMessages)>0); }
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	f003 0304 	and.w	r3, r3, #4
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bf14      	ite	ne
 800b872:	2301      	movne	r3, #1
 800b874:	2300      	moveq	r3, #0
 800b876:	b2db      	uxtb	r3, r3
 800b878:	4618      	mov	r0, r3
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc80      	pop	{r7}
 800b880:	4770      	bx	lr

0800b882 <_ZNK9tNMEA200018ForwardOwnMessagesEv>:
    bool ForwardOwnMessages() const { return ((ForwardMode&FwdModeBit_OwnMessages)>0); }
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f003 0308 	and.w	r3, r3, #8
 800b892:	2b00      	cmp	r3, #0
 800b894:	bf14      	ite	ne
 800b896:	2301      	movne	r3, #1
 800b898:	2300      	moveq	r3, #0
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	4618      	mov	r0, r3
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bc80      	pop	{r7}
 800b8a4:	4770      	bx	lr

0800b8a6 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>:
    bool HandleOnlyKnownMessages() const { return ((ForwardMode&HandleModeBit_OnlyKnownMessages)>0); }
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f003 0310 	and.w	r3, r3, #16
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	bf14      	ite	ne
 800b8ba:	2301      	movne	r3, #1
 800b8bc:	2300      	moveq	r3, #0
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bc80      	pop	{r7}
 800b8c8:	4770      	bx	lr

0800b8ca <_ZN9tNMEA200012IsActiveNodeEv>:
    bool IsActiveNode() { return (N2kMode==N2km_NodeOnly || N2kMode==N2km_ListenAndNode); }
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	795b      	ldrb	r3, [r3, #5]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d003      	beq.n	800b8e2 <_ZN9tNMEA200012IsActiveNodeEv+0x18>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	795b      	ldrb	r3, [r3, #5]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d101      	bne.n	800b8e6 <_ZN9tNMEA200012IsActiveNodeEv+0x1c>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <_ZN9tNMEA200012IsActiveNodeEv+0x1e>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bc80      	pop	{r7}
 800b8f0:	4770      	bx	lr

0800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>:
    bool IsValidDevice(int iDev) const { return (iDev>=0 && iDev<DeviceCount ); }
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	db06      	blt.n	800b910 <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	429a      	cmp	r2, r3
 800b90a:	da01      	bge.n	800b910 <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 800b90c:	2301      	movs	r3, #1
 800b90e:	e000      	b.n	800b912 <_ZNK9tNMEA200013IsValidDeviceEi+0x20>
 800b910:	2300      	movs	r3, #0
 800b912:	4618      	mov	r0, r3
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	bc80      	pop	{r7}
 800b91a:	4770      	bx	lr

0800b91c <_ZNK9tNMEA200013IsReadyToSendEv>:
    bool IsReadyToSend() const {
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7e1b      	ldrb	r3, [r3, #24]
               (N2kMode!=N2km_SendOnly) &&
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d003      	beq.n	800b934 <_ZNK9tNMEA200013IsReadyToSendEv+0x18>
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	791b      	ldrb	r3, [r3, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00d      	beq.n	800b950 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenOnly) &&
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	795b      	ldrb	r3, [r3, #5]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d009      	beq.n	800b950 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_SendOnly) &&
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_ListenOnly) &&
 800b940:	2b03      	cmp	r3, #3
 800b942:	d005      	beq.n	800b950 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenAndSend)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_SendOnly) &&
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d001      	beq.n	800b950 <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
 800b94c:	2301      	movs	r3, #1
 800b94e:	e000      	b.n	800b952 <_ZNK9tNMEA200013IsReadyToSendEv+0x36>
 800b950:	2300      	movs	r3, #0
    }
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	bc80      	pop	{r7}
 800b95a:	4770      	bx	lr

0800b95c <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt>:
    virtual void SetN2kCANSendFrameBufSize(const uint16_t _MaxCANSendFrames) { if ( !IsInitialized() ) { MaxCANSendFrames=_MaxCANSendFrames; }; }
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	807b      	strh	r3, [r7, #2]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff ff40 	bl	800b7ee <_ZN9tNMEA200013IsInitializedEv>
 800b96e:	4603      	mov	r3, r0
 800b970:	f083 0301 	eor.w	r3, r3, #1
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt+0x26>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	887a      	ldrh	r2, [r7, #2]
 800b97e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt>:
    virtual void SetN2kCANReceiveFrameBufSize(const uint16_t _MaxCANReceiveFrames) { if ( !IsInitialized() ) MaxCANReceiveFrames=_MaxCANReceiveFrames; }
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	807b      	strh	r3, [r7, #2]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ff29 	bl	800b7ee <_ZN9tNMEA200013IsInitializedEv>
 800b99c:	4603      	mov	r3, r0
 800b99e:	f083 0301 	eor.w	r3, r3, #1
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt+0x26>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	887a      	ldrh	r2, [r7, #2]
 800b9ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <_ZN9tNMEA200013EnableForwardEb>:
    void EnableForward(bool v=true) {
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d006      	beq.n	800b9d8 <_ZN9tNMEA200013EnableForwardEb+0x20>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f043 0201 	orr.w	r2, r3, #1
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	609a      	str	r2, [r3, #8]
    }
 800b9d6:	e005      	b.n	800b9e4 <_ZN9tNMEA200013EnableForwardEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f023 0201 	bic.w	r2, r3, #1
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	609a      	str	r2, [r3, #8]
    }
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr

0800b9ee <_ZN9tNMEA200024SetForwardSystemMessagesEb>:
    void SetForwardSystemMessages(bool v=true) {
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d006      	beq.n	800ba0e <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x20>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f043 0202 	orr.w	r2, r3, #2
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	609a      	str	r2, [r3, #8]
      }
 800ba0c:	e005      	b.n	800ba1a <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f023 0202 	bic.w	r2, r3, #2
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	609a      	str	r2, [r3, #8]
      }
 800ba1a:	bf00      	nop
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bc80      	pop	{r7}
 800ba22:	4770      	bx	lr

0800ba24 <_ZN9tNMEA200021SetForwardOwnMessagesEb>:
    void SetForwardOwnMessages(bool v=true) {
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d006      	beq.n	800ba44 <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x20>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f043 0208 	orr.w	r2, r3, #8
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	609a      	str	r2, [r3, #8]
      }
 800ba42:	e005      	b.n	800ba50 <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	f023 0208 	bic.w	r2, r3, #8
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	609a      	str	r2, [r3, #8]
      }
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bc80      	pop	{r7}
 800ba58:	4770      	bx	lr

0800ba5a <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>:
 * \brief Setting up Message "ISO Acknowledgement" - PGN 59392
 * 
 * Alias of PGN 59392. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref SetN2kPGN59392
 */
inline void SetN2kPGNISOAcknowledgement(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	607b      	str	r3, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	72fb      	strb	r3, [r7, #11]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	72bb      	strb	r3, [r7, #10]
  SetN2kPGN59392(N2kMsg,Control,GroupFunction,PGN);
 800ba6c:	7aba      	ldrb	r2, [r7, #10]
 800ba6e:	7af9      	ldrb	r1, [r7, #11]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f005 fe2f 	bl	80116d6 <_Z14SetN2kPGN59392R7tN2kMsghhm>
}
 800ba78:	bf00      	nop
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <_Z21SetN2kISOAddressClaimR7tN2kMsgy>:
 * \brief Setting up Message "ISO Address Claim" - PGN 60928
 * 
 * Alias of PGN 60928. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref SetN2kPGN60928
 */
inline void SetN2kISOAddressClaim(tN2kMsg &N2kMsg, uint64_t Name) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	e9c7 2300 	strd	r2, r3, [r7]
  SetN2kPGN60928(N2kMsg, Name);
 800ba8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f005 fe50 	bl	8011736 <_Z14SetN2kPGN60928R7tN2kMsgy>
}
 800ba96:	bf00      	nop
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>:
 * of the source code. See parameter details on \ref SetN2kPGN126996
 */
inline void SetN2kProductInformation(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1) {
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b08a      	sub	sp, #40	; 0x28
 800baa2:	af06      	add	r7, sp, #24
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
 800baaa:	603b      	str	r3, [r7, #0]
  SetN2kPGN126996(N2kMsg,N2kVersion,ProductCode,
 800baac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bab6:	9303      	str	r3, [sp, #12]
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	9302      	str	r3, [sp, #8]
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f005 fe4a 	bl	8011764 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>
                  ModelID,SwCode,ModelVersion,ModelSerialCode,
                  CertificationLevel,LoadEquivalency);
}
 800bad0:	bf00      	nop
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>:
 */
inline void SetN2kConfigurationInformation(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1=0,
                     const char *InstallationDescription2=0,
                     bool UsePgm=false) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af02      	add	r7, sp, #8
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
  SetN2kPGN126998(N2kMsg,
 800bae6:	7e3b      	ldrb	r3, [r7, #24]
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f005 fea9 	bl	8011848 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>
                  ManufacturerInformation,
                  InstallationDescription1,
                  InstallationDescription2,
                  UsePgm);
}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>:
 *        message - PGN 59904
 * 
 * Alias of PGN 59904. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref ParseN2kPGN59904 
 */
inline bool ParseN2kPGNISORequest(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
  return ParseN2kPGN59904(N2kMsg, RequestedPGN);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f005 ff44 	bl	8011998 <_Z16ParseN2kPGN59904RK7tN2kMsgRm>
 800bb10:	4603      	mov	r3, r0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <_Z12SetHeartbeatR7tN2kMsgmh>:
 * \brief Setting up Message "Heartbeat" - PGN 126993
 * 
 * Alias of PGN 126993. This alias was introduced to improve the readability
 * of the source code. See parameter details on \ref SetN2kPGN126993
 */
inline void SetHeartbeat(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4613      	mov	r3, r2
 800bb26:	71fb      	strb	r3, [r7, #7]
	SetN2kPGN126993(N2kMsg, timeInterval_ms, sequenceCounter);
 800bb28:	79fb      	ldrb	r3, [r7, #7]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	68b9      	ldr	r1, [r7, #8]
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f005 ff60 	bl	80119f4 <_Z15SetN2kPGN126993R7tN2kMsgmh>
}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN60928(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,60928L) {}
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f44f 426e 	mov.w	r2, #60928	; 0xee00
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fb fe44 	bl	80077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800bb54:	4a03      	ldr	r2, [pc, #12]	; (800bb64 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000+0x28>)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	601a      	str	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	08017670 	.word	0x08017670

0800bb68 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126464(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126464L) {}
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f44f 32f7 	mov.w	r2, #126464	; 0x1ee00
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fb fe2e 	bl	80077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800bb80:	4a03      	ldr	r2, [pc, #12]	; (800bb90 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000+0x28>)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	08017644 	.word	0x08017644

0800bb94 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126993(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126993L) {}
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a06      	ldr	r2, [pc, #24]	; (800bbbc <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x28>)
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fb fe19 	bl	80077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800bbaa:	4a05      	ldr	r2, [pc, #20]	; (800bbc0 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x2c>)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	0001f011 	.word	0x0001f011
 800bbc0:	08017618 	.word	0x08017618

0800bbc4 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126996(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126996L) {}
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a06      	ldr	r2, [pc, #24]	; (800bbec <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x28>)
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fb fe01 	bl	80077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800bbda:	4a05      	ldr	r2, [pc, #20]	; (800bbf0 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x2c>)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	0001f014 	.word	0x0001f014
 800bbf0:	080175ec 	.word	0x080175ec

0800bbf4 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126998(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126998L) {}
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a06      	ldr	r2, [pc, #24]	; (800bc1c <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x28>)
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fb fde9 	bl	80077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800bc0a:	4a05      	ldr	r2, [pc, #20]	; (800bc20 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x2c>)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	0001f016 	.word	0x0001f016
 800bc20:	080175c0 	.word	0x080175c0

0800bc24 <_Z26IsSingleFrameSystemMessagem>:
 *
 * \param PGN      PGN to be tested
 * \return true -> for PGNs: 59392L, 59904L, 60928L, 60416L, 60160L
 * \return false 
 */
bool IsSingleFrameSystemMessage(unsigned long PGN) {
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800bc32:	d01b      	beq.n	800bc6c <_Z26IsSingleFrameSystemMessagem+0x48>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800bc3a:	d819      	bhi.n	800bc70 <_Z26IsSingleFrameSystemMessagem+0x4c>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800bc42:	d013      	beq.n	800bc6c <_Z26IsSingleFrameSystemMessagem+0x48>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800bc4a:	d811      	bhi.n	800bc70 <_Z26IsSingleFrameSystemMessagem+0x4c>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800bc52:	d00b      	beq.n	800bc6c <_Z26IsSingleFrameSystemMessagem+0x48>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800bc5a:	d809      	bhi.n	800bc70 <_Z26IsSingleFrameSystemMessagem+0x4c>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 800bc62:	d003      	beq.n	800bc6c <_Z26IsSingleFrameSystemMessagem+0x48>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 800bc6a:	d101      	bne.n	800bc70 <_Z26IsSingleFrameSystemMessagem+0x4c>
                                      case  59392L: /* ISO Acknowledgement */
                                      case   TP_DT: /* Multi packet data transfer, TP.DT */
                                      case   TP_CM: /* Multi packet connection management, TP.CM */
                                      case  59904L: /* ISO Request */
                                      case  60928L: /* ISO Address Claim */
                                      return true;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e000      	b.n	800bc72 <_Z26IsSingleFrameSystemMessagem+0x4e>
                                  }
                                  return false;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bc80      	pop	{r7}
 800bc7a:	4770      	bx	lr

0800bc7c <_Z25IsFastPacketSystemMessagem>:
 *
 * \param PGN     PGN to be tested
 * \return true   -> for PGNs: 65240L, 126208L
 * \return false 
 */
bool IsFastPacketSystemMessage(unsigned long PGN) {
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d003      	beq.n	800bc96 <_Z25IsFastPacketSystemMessagem+0x1a>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a05      	ldr	r2, [pc, #20]	; (800bca8 <_Z25IsFastPacketSystemMessagem+0x2c>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d101      	bne.n	800bc9a <_Z25IsFastPacketSystemMessagem+0x1e>
                                      case  65240L: /* Commanded Address*/
                                      case 126208L: /* NMEA Request/Command/Acknowledge group function */
                                      return true;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <_Z25IsFastPacketSystemMessagem+0x20>
                                  }
                                  return false;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bc80      	pop	{r7}
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	0001ed00 	.word	0x0001ed00

0800bcac <_Z27IsDefaultSingleFrameMessagem>:
 *              - 130576L: Small Craft Status (Trim Tab position), pri=2, period=200
 * 
 * 
 * \return false 
 */
bool IsDefaultSingleFrameMessage(unsigned long PGN) {
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a57      	ldr	r2, [pc, #348]	; (800be14 <_Z27IsDefaultSingleFrameMessagem+0x168>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	f000 80a2 	beq.w	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a54      	ldr	r2, [pc, #336]	; (800be14 <_Z27IsDefaultSingleFrameMessagem+0x168>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	f200 809f 	bhi.w	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a53      	ldr	r2, [pc, #332]	; (800be18 <_Z27IsDefaultSingleFrameMessagem+0x16c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	f200 809a 	bhi.w	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a51      	ldr	r2, [pc, #324]	; (800be1c <_Z27IsDefaultSingleFrameMessagem+0x170>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d234      	bcs.n	800bd44 <_Z27IsDefaultSingleFrameMessagem+0x98>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a50      	ldr	r2, [pc, #320]	; (800be20 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f000 808f 	beq.w	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a4e      	ldr	r2, [pc, #312]	; (800be20 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	f200 808c 	bhi.w	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a4c      	ldr	r2, [pc, #304]	; (800be24 <_Z27IsDefaultSingleFrameMessagem+0x178>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	f200 8087 	bhi.w	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f5b3 3ffc 	cmp.w	r3, #129024	; 0x1f800
 800bcfe:	f200 8080 	bhi.w	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a48      	ldr	r2, [pc, #288]	; (800be28 <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d07b      	beq.n	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a46      	ldr	r2, [pc, #280]	; (800be28 <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d879      	bhi.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a45      	ldr	r2, [pc, #276]	; (800be2c <_Z27IsDefaultSingleFrameMessagem+0x180>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d073      	beq.n	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a43      	ldr	r2, [pc, #268]	; (800be2c <_Z27IsDefaultSingleFrameMessagem+0x180>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d871      	bhi.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a42      	ldr	r2, [pc, #264]	; (800be30 <_Z27IsDefaultSingleFrameMessagem+0x184>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d86d      	bhi.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 800bd30:	d21a      	bcs.n	800bd68 <_Z27IsDefaultSingleFrameMessagem+0xbc>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a3f      	ldr	r2, [pc, #252]	; (800be34 <_Z27IsDefaultSingleFrameMessagem+0x188>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d85a      	bhi.n	800bdf0 <_Z27IsDefaultSingleFrameMessagem+0x144>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a3e      	ldr	r2, [pc, #248]	; (800be38 <_Z27IsDefaultSingleFrameMessagem+0x18c>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d25f      	bcs.n	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bd42:	e060      	b.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 800bd4a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800bd4e:	2201      	movs	r2, #1
 800bd50:	409a      	lsls	r2, r3
 800bd52:	f240 53f1 	movw	r3, #1521	; 0x5f1
 800bd56:	4013      	ands	r3, r2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	bf14      	ite	ne
 800bd5c:	2301      	movne	r3, #1
 800bd5e:	2300      	moveq	r3, #0
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d14d      	bne.n	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bd66:	e04e      	b.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f5a3 33f9 	sub.w	r3, r3, #127488	; 0x1f200
 800bd6e:	2b14      	cmp	r3, #20
 800bd70:	d849      	bhi.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <_Z27IsDefaultSingleFrameMessagem+0xcc>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800be03 	.word	0x0800be03
 800bd7c:	0800be07 	.word	0x0800be07
 800bd80:	0800be07 	.word	0x0800be07
 800bd84:	0800be07 	.word	0x0800be07
 800bd88:	0800be07 	.word	0x0800be07
 800bd8c:	0800be03 	.word	0x0800be03
 800bd90:	0800be07 	.word	0x0800be07
 800bd94:	0800be07 	.word	0x0800be07
 800bd98:	0800be07 	.word	0x0800be07
 800bd9c:	0800be07 	.word	0x0800be07
 800bda0:	0800be07 	.word	0x0800be07
 800bda4:	0800be07 	.word	0x0800be07
 800bda8:	0800be07 	.word	0x0800be07
 800bdac:	0800be03 	.word	0x0800be03
 800bdb0:	0800be07 	.word	0x0800be07
 800bdb4:	0800be07 	.word	0x0800be07
 800bdb8:	0800be07 	.word	0x0800be07
 800bdbc:	0800be03 	.word	0x0800be03
 800bdc0:	0800be07 	.word	0x0800be07
 800bdc4:	0800be07 	.word	0x0800be07
 800bdc8:	0800be03 	.word	0x0800be03
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 800bdd2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	409a      	lsls	r2, r3
 800bdda:	f241 0361 	movw	r3, #4193	; 0x1061
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bf14      	ite	ne
 800bde4:	2301      	movne	r3, #1
 800bde6:	2300      	moveq	r3, #0
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d109      	bne.n	800be02 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bdee:	e00a      	b.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a12      	ldr	r2, [pc, #72]	; (800be3c <_Z27IsDefaultSingleFrameMessagem+0x190>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d806      	bhi.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a11      	ldr	r2, [pc, #68]	; (800be40 <_Z27IsDefaultSingleFrameMessagem+0x194>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d2e5      	bcs.n	800bdcc <_Z27IsDefaultSingleFrameMessagem+0x120>
 800be00:	e001      	b.n	800be06 <_Z27IsDefaultSingleFrameMessagem+0x15a>
                                      case 130312L: // Temperature, pri=5, period=2000
                                      case 130313L: // Humidity, pri=5, period=2000
                                      case 130314L: // Pressure, pri=5, period=2000
                                      case 130316L: // Temperature extended range, pri=5, period=NA
                                      case 130576L: // Small Craft Status (Trim Tab position), pri=2, period=200
                                      return true;
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <_Z27IsDefaultSingleFrameMessagem+0x15c>
                                  }
                                  return false;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bc80      	pop	{r7}
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	0001fe10 	.word	0x0001fe10
 800be18:	0001fd0c 	.word	0x0001fd0c
 800be1c:	0001fd02 	.word	0x0001fd02
 800be20:	0001f903 	.word	0x0001f903
 800be24:	0001f802 	.word	0x0001f802
 800be28:	0001f50b 	.word	0x0001f50b
 800be2c:	0001f503 	.word	0x0001f503
 800be30:	0001f214 	.word	0x0001f214
 800be34:	0001f011 	.word	0x0001f011
 800be38:	0001f010 	.word	0x0001f010
 800be3c:	0001f119 	.word	0x0001f119
 800be40:	0001f10d 	.word	0x0001f10d

0800be44 <_Z28IsMandatoryFastPacketMessagem>:
 *         - 126996L: Product information, pri=6, period=NA
 *         - 126998L: Configuration information, pri=6, period=NA
 * 
 * \return false 
 */
bool IsMandatoryFastPacketMessage(unsigned long PGN) {
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a0b      	ldr	r2, [pc, #44]	; (800be7c <_Z28IsMandatoryFastPacketMessagem+0x38>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d00b      	beq.n	800be6c <_Z28IsMandatoryFastPacketMessagem+0x28>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a09      	ldr	r2, [pc, #36]	; (800be7c <_Z28IsMandatoryFastPacketMessagem+0x38>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d809      	bhi.n	800be70 <_Z28IsMandatoryFastPacketMessagem+0x2c>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 800be62:	d003      	beq.n	800be6c <_Z28IsMandatoryFastPacketMessagem+0x28>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a06      	ldr	r2, [pc, #24]	; (800be80 <_Z28IsMandatoryFastPacketMessagem+0x3c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d101      	bne.n	800be70 <_Z28IsMandatoryFastPacketMessagem+0x2c>
                                      case 126464L: // PGN List (Transmit and Receive), pri=6, period=NA
                                      case 126996L: // Product information, pri=6, period=NA
                                      case 126998L: // Configuration information, pri=6, period=NA
                                      return true;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <_Z28IsMandatoryFastPacketMessagem+0x2e>
                                  }
                                  return false;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	bc80      	pop	{r7}
 800be7a:	4770      	bx	lr
 800be7c:	0001f016 	.word	0x0001f016
 800be80:	0001f014 	.word	0x0001f014

0800be84 <_Z26IsDefaultFastPacketMessagem>:
 *          - 130567L: Watermaker Input Setting and Status, pri=6, period=2500
 *          - 130577L: Direction Data PGN, pri=3, period=1000
 *          - 130578L: Vessel Speed Components, pri=2, period=250
 * \return false 
 */
bool IsDefaultFastPacketMessage(unsigned long PGN) {
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a91      	ldr	r2, [pc, #580]	; (800c0d4 <_Z26IsDefaultFastPacketMessagem+0x250>)
 800be90:	4293      	cmp	r3, r2
 800be92:	f200 8119 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a8f      	ldr	r2, [pc, #572]	; (800c0d8 <_Z26IsDefaultFastPacketMessagem+0x254>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	f080 8112 	bcs.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a8e      	ldr	r2, [pc, #568]	; (800c0dc <_Z26IsDefaultFastPacketMessagem+0x258>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	f000 810d 	beq.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a8b      	ldr	r2, [pc, #556]	; (800c0dc <_Z26IsDefaultFastPacketMessagem+0x258>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	f200 810a 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a8a      	ldr	r2, [pc, #552]	; (800c0e0 <_Z26IsDefaultFastPacketMessagem+0x25c>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	f200 8105 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a88      	ldr	r2, [pc, #544]	; (800c0e4 <_Z26IsDefaultFastPacketMessagem+0x260>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	f080 80fe 	bcs.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a87      	ldr	r2, [pc, #540]	; (800c0e8 <_Z26IsDefaultFastPacketMessagem+0x264>)
 800becc:	4293      	cmp	r3, r2
 800bece:	f200 80fb 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a85      	ldr	r2, [pc, #532]	; (800c0ec <_Z26IsDefaultFastPacketMessagem+0x268>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d261      	bcs.n	800bf9e <_Z26IsDefaultFastPacketMessagem+0x11a>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a84      	ldr	r2, [pc, #528]	; (800c0f0 <_Z26IsDefaultFastPacketMessagem+0x26c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	f200 80f2 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a83      	ldr	r2, [pc, #524]	; (800c0f4 <_Z26IsDefaultFastPacketMessagem+0x270>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	f080 80eb 	bcs.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a81      	ldr	r2, [pc, #516]	; (800c0f8 <_Z26IsDefaultFastPacketMessagem+0x274>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	f200 80e8 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a80      	ldr	r2, [pc, #512]	; (800c0fc <_Z26IsDefaultFastPacketMessagem+0x278>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d25f      	bcs.n	800bfc0 <_Z26IsDefaultFastPacketMessagem+0x13c>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a7f      	ldr	r2, [pc, #508]	; (800c100 <_Z26IsDefaultFastPacketMessagem+0x27c>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	f200 80df 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a7d      	ldr	r2, [pc, #500]	; (800c104 <_Z26IsDefaultFastPacketMessagem+0x280>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	f080 80d8 	bcs.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a7c      	ldr	r2, [pc, #496]	; (800c108 <_Z26IsDefaultFastPacketMessagem+0x284>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	f200 80d5 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a7a      	ldr	r2, [pc, #488]	; (800c10c <_Z26IsDefaultFastPacketMessagem+0x288>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	f080 80ce 	bcs.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a79      	ldr	r2, [pc, #484]	; (800c110 <_Z26IsDefaultFastPacketMessagem+0x28c>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	f200 80cb 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a77      	ldr	r2, [pc, #476]	; (800c114 <_Z26IsDefaultFastPacketMessagem+0x290>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d272      	bcs.n	800c020 <_Z26IsDefaultFastPacketMessagem+0x19c>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a76      	ldr	r2, [pc, #472]	; (800c118 <_Z26IsDefaultFastPacketMessagem+0x294>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	f000 80c0 	beq.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a74      	ldr	r2, [pc, #464]	; (800c118 <_Z26IsDefaultFastPacketMessagem+0x294>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	f200 80bd 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a72      	ldr	r2, [pc, #456]	; (800c11c <_Z26IsDefaultFastPacketMessagem+0x298>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	f000 80b6 	beq.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a70      	ldr	r2, [pc, #448]	; (800c11c <_Z26IsDefaultFastPacketMessagem+0x298>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	f200 80b3 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a6e      	ldr	r2, [pc, #440]	; (800c120 <_Z26IsDefaultFastPacketMessagem+0x29c>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	f200 80ae 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 800bf72:	d865      	bhi.n	800c040 <_Z26IsDefaultFastPacketMessagem+0x1bc>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a6b      	ldr	r2, [pc, #428]	; (800c124 <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	f000 80a3 	beq.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a68      	ldr	r2, [pc, #416]	; (800c124 <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	f200 80a0 	bhi.w	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a67      	ldr	r2, [pc, #412]	; (800c128 <_Z26IsDefaultFastPacketMessagem+0x2a4>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	f200 8095 	bhi.w	800c0bc <_Z26IsDefaultFastPacketMessagem+0x238>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a65      	ldr	r2, [pc, #404]	; (800c12c <_Z26IsDefaultFastPacketMessagem+0x2a8>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	f080 8094 	bcs.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bf9c:	e094      	b.n	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 800bfa4:	3b04      	subs	r3, #4
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	409a      	lsls	r2, r3
 800bfaa:	4b61      	ldr	r3, [pc, #388]	; (800c130 <_Z26IsDefaultFastPacketMessagem+0x2ac>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	bf14      	ite	ne
 800bfb2:	2301      	movne	r3, #1
 800bfb4:	2300      	moveq	r3, #0
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f040 8083 	bne.w	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bfbe:	e083      	b.n	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f5a3 33fd 	sub.w	r3, r3, #129536	; 0x1fa00
 800bfc6:	3b02      	subs	r3, #2
 800bfc8:	2b12      	cmp	r3, #18
 800bfca:	d87d      	bhi.n	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bfcc:	a201      	add	r2, pc, #4	; (adr r2, 800bfd4 <_Z26IsDefaultFastPacketMessagem+0x150>)
 800bfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd2:	bf00      	nop
 800bfd4:	0800c0c5 	.word	0x0800c0c5
 800bfd8:	0800c0c9 	.word	0x0800c0c9
 800bfdc:	0800c0c5 	.word	0x0800c0c5
 800bfe0:	0800c0c5 	.word	0x0800c0c5
 800bfe4:	0800c0c5 	.word	0x0800c0c5
 800bfe8:	0800c0c9 	.word	0x0800c0c9
 800bfec:	0800c0c9 	.word	0x0800c0c9
 800bff0:	0800c0c5 	.word	0x0800c0c5
 800bff4:	0800c0c9 	.word	0x0800c0c9
 800bff8:	0800c0c5 	.word	0x0800c0c5
 800bffc:	0800c0c9 	.word	0x0800c0c9
 800c000:	0800c0c5 	.word	0x0800c0c5
 800c004:	0800c0c9 	.word	0x0800c0c9
 800c008:	0800c0c5 	.word	0x0800c0c5
 800c00c:	0800c0c9 	.word	0x0800c0c9
 800c010:	0800c0c9 	.word	0x0800c0c9
 800c014:	0800c0c9 	.word	0x0800c0c9
 800c018:	0800c0c9 	.word	0x0800c0c9
 800c01c:	0800c0c5 	.word	0x0800c0c5
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 800c026:	3b05      	subs	r3, #5
 800c028:	2201      	movs	r2, #1
 800c02a:	409a      	lsls	r2, r3
 800c02c:	4b41      	ldr	r3, [pc, #260]	; (800c134 <_Z26IsDefaultFastPacketMessagem+0x2b0>)
 800c02e:	4013      	ands	r3, r2
 800c030:	2b00      	cmp	r3, #0
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2300      	moveq	r3, #0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d142      	bne.n	800c0c4 <_Z26IsDefaultFastPacketMessagem+0x240>
 800c03e:	e043      	b.n	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f1a3 1301 	sub.w	r3, r3, #65537	; 0x10001
 800c046:	f5a3 4372 	sub.w	r3, r3, #61952	; 0xf200
 800c04a:	2b19      	cmp	r3, #25
 800c04c:	d83c      	bhi.n	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
 800c04e:	a201      	add	r2, pc, #4	; (adr r2, 800c054 <_Z26IsDefaultFastPacketMessagem+0x1d0>)
 800c050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c054:	0800c0c5 	.word	0x0800c0c5
 800c058:	0800c0c9 	.word	0x0800c0c9
 800c05c:	0800c0c9 	.word	0x0800c0c9
 800c060:	0800c0c9 	.word	0x0800c0c9
 800c064:	0800c0c9 	.word	0x0800c0c9
 800c068:	0800c0c9 	.word	0x0800c0c9
 800c06c:	0800c0c9 	.word	0x0800c0c9
 800c070:	0800c0c5 	.word	0x0800c0c5
 800c074:	0800c0c5 	.word	0x0800c0c5
 800c078:	0800c0c5 	.word	0x0800c0c5
 800c07c:	0800c0c9 	.word	0x0800c0c9
 800c080:	0800c0c9 	.word	0x0800c0c9
 800c084:	0800c0c9 	.word	0x0800c0c9
 800c088:	0800c0c9 	.word	0x0800c0c9
 800c08c:	0800c0c5 	.word	0x0800c0c5
 800c090:	0800c0c5 	.word	0x0800c0c5
 800c094:	0800c0c9 	.word	0x0800c0c9
 800c098:	0800c0c5 	.word	0x0800c0c5
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0c9 	.word	0x0800c0c9
 800c0a4:	0800c0c5 	.word	0x0800c0c5
 800c0a8:	0800c0c5 	.word	0x0800c0c5
 800c0ac:	0800c0c5 	.word	0x0800c0c5
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0c5 	.word	0x0800c0c5
 800c0b8:	0800c0c5 	.word	0x0800c0c5
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a1e      	ldr	r2, [pc, #120]	; (800c138 <_Z26IsDefaultFastPacketMessagem+0x2b4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d101      	bne.n	800c0c8 <_Z26IsDefaultFastPacketMessagem+0x244>
                                      case 130323L: // Meteorological Station Data, pri=6, period=1000
                                      case 130324L: // Moored Buoy Station Data, pri=6, period=1000
                                      case 130567L: // Watermaker Input Setting and Status, pri=6, period=2500
                                      case 130577L: // Direction Data PGN, pri=3, period=1000
                                      case 130578L: // Vessel Speed Components, pri=2, period=250
                                      return true;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e000      	b.n	800c0ca <_Z26IsDefaultFastPacketMessagem+0x246>
                                  }
                                  return false;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bc80      	pop	{r7}
 800c0d2:	4770      	bx	lr
 800c0d4:	0001fe12 	.word	0x0001fe12
 800c0d8:	0001fe11 	.word	0x0001fe11
 800c0dc:	0001fe07 	.word	0x0001fe07
 800c0e0:	0001fd14 	.word	0x0001fd14
 800c0e4:	0001fd10 	.word	0x0001fd10
 800c0e8:	0001fc1a 	.word	0x0001fc1a
 800c0ec:	0001fc04 	.word	0x0001fc04
 800c0f0:	0001fb15 	.word	0x0001fb15
 800c0f4:	0001fb00 	.word	0x0001fb00
 800c0f8:	0001fa14 	.word	0x0001fa14
 800c0fc:	0001fa02 	.word	0x0001fa02
 800c100:	0001f916 	.word	0x0001f916
 800c104:	0001f915 	.word	0x0001f915
 800c108:	0001f905 	.word	0x0001f905
 800c10c:	0001f904 	.word	0x0001f904
 800c110:	0001f815 	.word	0x0001f815
 800c114:	0001f805 	.word	0x0001f805
 800c118:	0001f608 	.word	0x0001f608
 800c11c:	0001f513 	.word	0x0001f513
 800c120:	0001f21a 	.word	0x0001f21a
 800c124:	0001f105 	.word	0x0001f105
 800c128:	0001f00c 	.word	0x0001f00c
 800c12c:	0001f007 	.word	0x0001f007
 800c130:	007ff307 	.word	0x007ff307
 800c134:	00019e01 	.word	0x00019e01
 800c138:	0001f101 	.word	0x0001f101

0800c13c <_Z30IsProprietaryFastPacketMessagem>:
 *    - 126720L
 *    - 130816L
 *    - 131071L
 * \return false 
 */
bool IsProprietaryFastPacketMessage(unsigned long PGN) {
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  return ( PGN==126720L ) || ( 130816L<=PGN && PGN<=131071L );
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a09      	ldr	r2, [pc, #36]	; (800c16c <_Z30IsProprietaryFastPacketMessagem+0x30>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d007      	beq.n	800c15c <_Z30IsProprietaryFastPacketMessagem+0x20>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a08      	ldr	r2, [pc, #32]	; (800c170 <_Z30IsProprietaryFastPacketMessagem+0x34>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d905      	bls.n	800c160 <_Z30IsProprietaryFastPacketMessagem+0x24>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c15a:	d201      	bcs.n	800c160 <_Z30IsProprietaryFastPacketMessagem+0x24>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e000      	b.n	800c162 <_Z30IsProprietaryFastPacketMessagem+0x26>
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	bc80      	pop	{r7}
 800c16a:	4770      	bx	lr
 800c16c:	0001ef00 	.word	0x0001ef00
 800c170:	0001feff 	.word	0x0001feff

0800c174 <_ZN9tNMEA200020IsProprietaryMessageEm>:

bool tNMEA2000::IsProprietaryMessage(unsigned long PGN) {
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  return IsProprietaryFastPacketMessage(PGN) || ( PGN==61184L ) || ( 65280L<=PGN && PGN<=65535L );
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff ffdd 	bl	800c13c <_Z30IsProprietaryFastPacketMessagem>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10b      	bne.n	800c1a0 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f5b3 4f6f 	cmp.w	r3, #61184	; 0xef00
 800c18e:	d007      	beq.n	800c1a0 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c196:	d305      	bcc.n	800c1a4 <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c19e:	d201      	bcs.n	800c1a4 <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <_ZN9tNMEA200020IsProprietaryMessageEm+0x32>
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>:
  size_t i=0;
  for (; i<MaxLen; i++) buf[i]=0;
}

//*****************************************************************************
void tNMEA2000::SetCharBuf(const char *str, size_t MaxLen, char *buf) {
 800c1ae:	b480      	push	{r7}
 800c1b0:	b087      	sub	sp, #28
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d036      	beq.n	800c22e <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d033      	beq.n	800c22e <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
  if ( str==0 ) { buf[0]=0; return; }
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x26>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	e02d      	b.n	800c230 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  size_t i=0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]
  for (; i<MaxLen-1 && str[i]!=0; i++) buf[i]=str[i];
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d211      	bcs.n	800c206 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00b      	beq.n	800c206 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	441a      	add	r2, r3
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	440b      	add	r3, r1
 800c1fa:	7812      	ldrb	r2, [r2, #0]
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	3301      	adds	r3, #1
 800c202:	617b      	str	r3, [r7, #20]
 800c204:	e7e8      	b.n	800c1d8 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d208      	bcs.n	800c220 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x72>
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	4413      	add	r3, r2
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	3301      	adds	r3, #1
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	e7f2      	b.n	800c206 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
  buf[MaxLen-1]=0; // Force null termination
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	3b01      	subs	r3, #1
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	4413      	add	r3, r2
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	e000      	b.n	800c230 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800c22e:	bf00      	nop
}
 800c230:	371c      	adds	r7, #28
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr

0800c238 <_ZN9tNMEA2000C1Ev>:
  ClearCharBuf(MaxLen,buf);
  if (str) SetCharBuf(str,MaxLen,buf);
}

//*****************************************************************************
tNMEA2000::tNMEA2000() {
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	4a41      	ldr	r2, [pc, #260]	; (800c348 <_ZN9tNMEA2000C1Ev+0x110>)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3314      	adds	r3, #20
 800c24a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff f860 	bl	800b314 <_ZN13tN2kSchedulerC1Em>

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  pGroupFunctionHandlers=0;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	665a      	str	r2, [r3, #100]	; 0x64
#endif
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  InstallationDescriptionChanged=false;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
#endif
  ForwardStream=0;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	60da      	str	r2, [r3, #12]

  for (int i=0; i<N2kMessageGroups; i++) {SingleFrameMessages[i]=0; FastPacketMessages[i]=0;}
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	dc11      	bgt.n	800c296 <_ZN9tNMEA2000C1Ev+0x5e>
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	330c      	adds	r3, #12
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	2200      	movs	r2, #0
 800c27e:	605a      	str	r2, [r3, #4]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	330e      	adds	r3, #14
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	2200      	movs	r2, #0
 800c28c:	605a      	str	r2, [r3, #4]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3301      	adds	r3, #1
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e7ea      	b.n	800c26c <_ZN9tNMEA2000C1Ev+0x34>

  N2kCANMsgBuf=0;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	645a      	str	r2, [r3, #68]	; 0x44
  MaxN2kCANMsgs=0;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  MaxCANSendFrames=40;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2228      	movs	r2, #40	; 0x28
 800c2a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  MaxCANReceiveFrames=0; // Use driver default
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  CANSendFrameBuf=0;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	64da      	str	r2, [r3, #76]	; 0x4c

  OnOpen=0;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	659a      	str	r2, [r3, #88]	; 0x58
  MsgHandler=0;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	65da      	str	r2, [r3, #92]	; 0x5c
  MsgHandlers=0;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	611a      	str	r2, [r3, #16]
  ISORqstHandler=0;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	661a      	str	r2, [r3, #96]	; 0x60

  OpenScheduler.FromNow(0);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3314      	adds	r3, #20
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff f876 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
  OpenState=os_None;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	761a      	strb	r2, [r3, #24]
  AddressChanged=false;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	765a      	strb	r2, [r3, #25]
  DeviceInformationChanged=false;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	769a      	strb	r2, [r3, #26]
  dbMode=dm_None;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	711a      	strb	r2, [r3, #4]
  N2kMode=N2km_ListenOnly;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	715a      	strb	r2, [r3, #5]
  ForwardType=fwdt_Actisense;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	719a      	strb	r2, [r3, #6]
  ForwardMode=0;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	609a      	str	r2, [r3, #8]
  EnableForward();
 800c308:	2101      	movs	r1, #1
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff fb54 	bl	800b9b8 <_ZN9tNMEA200013EnableForwardEb>
  SetForwardSystemMessages();
 800c310:	2101      	movs	r1, #1
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff fb6b 	bl	800b9ee <_ZN9tNMEA200024SetForwardSystemMessagesEb>
  SetForwardOwnMessages();
 800c318:	2101      	movs	r1, #1
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff fb82 	bl	800ba24 <_ZN9tNMEA200021SetForwardOwnMessagesEb>
  LocalConfigurationInformationData=0;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	625a      	str	r2, [r3, #36]	; 0x24
  SetProgmemConfigurationInformation(DefManufacturerInformation,
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <_ZN9tNMEA2000C1Ev+0x114>)
 800c328:	4a09      	ldr	r2, [pc, #36]	; (800c350 <_ZN9tNMEA2000C1Ev+0x118>)
 800c32a:	490a      	ldr	r1, [pc, #40]	; (800c354 <_ZN9tNMEA2000C1Ev+0x11c>)
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f959 	bl	800c5e4 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
                                     DefInstallationDescription1,
                                     DefInstallationDescription2);
  Devices=0;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	61da      	str	r2, [r3, #28]
  DeviceCount=1;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	621a      	str	r2, [r3, #32]
}
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	080177c4 	.word	0x080177c4
 800c34c:	080177b8 	.word	0x080177b8
 800c350:	080177b4 	.word	0x080177b4
 800c354:	08017778 	.word	0x08017778

0800c358 <_ZN9tNMEA200011InitDevicesEv>:
  // Note that we can set this only before any initialization. Limit count to 10.
  if ( Devices==0 && _DeviceCount>=1 && _DeviceCount<10 ) DeviceCount=_DeviceCount;
}

//*****************************************************************************
void tNMEA2000::InitDevices() {
 800c358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35a:	b089      	sub	sp, #36	; 0x24
 800c35c:	af04      	add	r7, sp, #16
 800c35e:	6078      	str	r0, [r7, #4]
  if ( Devices==0 ) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	69db      	ldr	r3, [r3, #28]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d164      	bne.n	800c432 <_ZN9tNMEA200011InitDevicesEv+0xda>
    N2kDbgln("Init devices");
    Devices=new tInternalDevice[DeviceCount];
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a1b      	ldr	r3, [r3, #32]
 800c36c:	461c      	mov	r4, r3
 800c36e:	4b33      	ldr	r3, [pc, #204]	; (800c43c <_ZN9tNMEA200011InitDevicesEv+0xe4>)
 800c370:	429c      	cmp	r4, r3
 800c372:	d804      	bhi.n	800c37e <_ZN9tNMEA200011InitDevicesEv+0x26>
 800c374:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800c378:	fb04 f303 	mul.w	r3, r4, r3
 800c37c:	e001      	b.n	800c382 <_ZN9tNMEA200011InitDevicesEv+0x2a>
 800c37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c382:	4618      	mov	r0, r3
 800c384:	f009 fbd3 	bl	8015b2e <_Znaj>
 800c388:	4603      	mov	r3, r0
 800c38a:	461e      	mov	r6, r3
 800c38c:	4635      	mov	r5, r6
 800c38e:	1e63      	subs	r3, r4, #1
 800c390:	461c      	mov	r4, r3
 800c392:	2c00      	cmp	r4, #0
 800c394:	db06      	blt.n	800c3a4 <_ZN9tNMEA200011InitDevicesEv+0x4c>
 800c396:	4628      	mov	r0, r5
 800c398:	f7ff f8ce 	bl	800b538 <_ZN9tNMEA200015tInternalDeviceC1Ev>
 800c39c:	f505 75b0 	add.w	r5, r5, #352	; 0x160
 800c3a0:	3c01      	subs	r4, #1
 800c3a2:	e7f6      	b.n	800c392 <_ZN9tNMEA200011InitDevicesEv+0x3a>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	61de      	str	r6, [r3, #28]
    MaxCANSendFrames*=DeviceCount; // We need bigger buffer for sending all information
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	6a12      	ldr	r2, [r2, #32]
 800c3b2:	b292      	uxth	r2, r2
 800c3b4:	fb02 f303 	mul.w	r3, r2, r3
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
//    for (int i=0; i<DeviceCount; i++) Devices[i].tDevice();
    // We set default device information here.
    Devices[0].LocalProductInformation=0;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	615a      	str	r2, [r3, #20]
    Devices[0].ProductInformation=&DefProductInformation;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	4a1c      	ldr	r2, [pc, #112]	; (800c440 <_ZN9tNMEA200011InitDevicesEv+0xe8>)
 800c3ce:	611a      	str	r2, [r3, #16]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60fb      	str	r3, [r7, #12]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a1b      	ldr	r3, [r3, #32]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	da29      	bge.n	800c432 <_ZN9tNMEA200011InitDevicesEv+0xda>
      SetDeviceInformation(1+i, // 21 bit resolution, max 2097151. Each device from same manufacturer should have unique number.
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	9302      	str	r3, [sp, #8]
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800c3f0:	9300      	str	r3, [sp, #0]
 800c3f2:	2319      	movs	r3, #25
 800c3f4:	2282      	movs	r2, #130	; 0x82
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fd19 	bl	800ce2e <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                           25, // Inter/Intranetwork Device. See codes on http://www.nmea.org/Assets/20120726%20nmea%202000%20class%20&%20function%20codes%20v%202.00.pdf
                           2046,  // Maximum 2046. See the list of codes on http://www.nmea.org/Assets/20121020%20nmea%202000%20registration%20list.pdf
                           4,  // Marine
                           i
                          );
      if ( i>0 ) {
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd13      	ble.n	800c42a <_ZN9tNMEA200011InitDevicesEv+0xd2>
        Devices[i].LocalProductInformation=0;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	69da      	ldr	r2, [r3, #28]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c40c:	fb01 f303 	mul.w	r3, r1, r3
 800c410:	4413      	add	r3, r2
 800c412:	2200      	movs	r2, #0
 800c414:	615a      	str	r2, [r3, #20]
        Devices[i].ProductInformation=0;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	69da      	ldr	r2, [r3, #28]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c420:	fb01 f303 	mul.w	r3, r1, r3
 800c424:	4413      	add	r3, r2
 800c426:	2200      	movs	r2, #0
 800c428:	611a      	str	r2, [r3, #16]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3301      	adds	r3, #1
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	e7d0      	b.n	800c3d4 <_ZN9tNMEA200011InitDevicesEv+0x7c>
      }
    }
  }
}
 800c432:	bf00      	nop
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43a:	bf00      	nop
 800c43c:	005d1745 	.word	0x005d1745
 800c440:	080176ec 	.word	0x080176ec

0800c444 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>:

//*****************************************************************************
void tNMEA2000::SetProductInformation(const tProductInformation *_ProductInformation, int iDev) {
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 800c450:	6879      	ldr	r1, [r7, #4]
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f7ff fa4d 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c458:	4603      	mov	r3, r0
 800c45a:	f083 0301 	eor.w	r3, r3, #1
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b00      	cmp	r3, #0
 800c462:	d13f      	bne.n	800c4e4 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa0>
  InitDevices();
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff ff77 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].ProductInformation=_ProductInformation;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	69da      	ldr	r2, [r3, #28]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c474:	fb01 f303 	mul.w	r3, r1, r3
 800c478:	4413      	add	r3, r2
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	611a      	str	r2, [r3, #16]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=Devices[iDev].LocalProductInformation;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	69da      	ldr	r2, [r3, #28]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c488:	fb01 f303 	mul.w	r3, r1, r3
 800c48c:	4413      	add	r3, r2
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d111      	bne.n	800c4b8 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0x74>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	69da      	ldr	r2, [r3, #28]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	441a      	add	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	69d9      	ldr	r1, [r3, #28]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800c4ae:	fb00 f303 	mul.w	r3, r0, r3
 800c4b2:	440b      	add	r3, r1
 800c4b4:	6952      	ldr	r2, [r2, #20]
 800c4b6:	611a      	str	r2, [r3, #16]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=&DefProductInformation;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	69da      	ldr	r2, [r3, #28]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c4c2:	fb01 f303 	mul.w	r3, r1, r3
 800c4c6:	4413      	add	r3, r2
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10b      	bne.n	800c4e6 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	69da      	ldr	r2, [r3, #28]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c4d8:	fb01 f303 	mul.w	r3, r1, r3
 800c4dc:	4413      	add	r3, r2
 800c4de:	4a03      	ldr	r2, [pc, #12]	; (800c4ec <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa8>)
 800c4e0:	611a      	str	r2, [r3, #16]
 800c4e2:	e000      	b.n	800c4e6 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
  if ( !IsValidDevice(iDev) ) return;
 800c4e4:	bf00      	nop
}
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	080176ec 	.word	0x080176ec

0800c4f0 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>:
}

//*****************************************************************************
void tNMEA2000::SetConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x20>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50a:	4618      	mov	r0, r3
 800c50c:	f009 fc72 	bl	8015df4 <free>
  LocalConfigurationInformationData=0;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	625a      	str	r2, [r3, #36]	; 0x24

  size_t ManInfoLen=(ManufacturerInformation?strlen(ManufacturerInformation)+1:0);
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d005      	beq.n	800c528 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x38>
 800c51c:	68b8      	ldr	r0, [r7, #8]
 800c51e:	f7f3 fe8d 	bl	800023c <strlen>
 800c522:	4603      	mov	r3, r0
 800c524:	3301      	adds	r3, #1
 800c526:	e000      	b.n	800c52a <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x3a>
 800c528:	2300      	movs	r3, #0
 800c52a:	627b      	str	r3, [r7, #36]	; 0x24
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  size_t InstDesc1Len=Max_N2kConfigurationInfoField_len;
 800c52c:	2347      	movs	r3, #71	; 0x47
 800c52e:	623b      	str	r3, [r7, #32]
  size_t InstDesc2Len=Max_N2kConfigurationInfoField_len;
 800c530:	2347      	movs	r3, #71	; 0x47
 800c532:	61fb      	str	r3, [r7, #28]
#else
  size_t InstDesc1Len=(InstallationDescription1?strlen(InstallationDescription1)+1:0);
  size_t InstDesc2Len=(InstallationDescription2?strlen(InstallationDescription2)+1:0);
#endif

  if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	2b47      	cmp	r3, #71	; 0x47
 800c538:	d901      	bls.n	800c53e <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x4e>
 800c53a:	2347      	movs	r3, #71	; 0x47
 800c53c:	627b      	str	r3, [r7, #36]	; 0x24
  if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	2b47      	cmp	r3, #71	; 0x47
 800c542:	d901      	bls.n	800c548 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x58>
 800c544:	2347      	movs	r3, #71	; 0x47
 800c546:	623b      	str	r3, [r7, #32]
  if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	2b47      	cmp	r3, #71	; 0x47
 800c54c:	d901      	bls.n	800c552 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x62>
 800c54e:	2347      	movs	r3, #71	; 0x47
 800c550:	61fb      	str	r3, [r7, #28]

  size_t TotalSize=ManInfoLen+InstDesc1Len+InstDesc2Len;
 800c552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	4413      	add	r3, r2
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	4413      	add	r3, r2
 800c55c:	61bb      	str	r3, [r7, #24]
  void *mem=(TotalSize>0?malloc(TotalSize):0);
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d004      	beq.n	800c56e <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x7e>
 800c564:	69b8      	ldr	r0, [r7, #24]
 800c566:	f009 fc3d 	bl	8015de4 <malloc>
 800c56a:	4603      	mov	r3, r0
 800c56c:	e000      	b.n	800c570 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x80>
 800c56e:	2300      	movs	r3, #0
 800c570:	617b      	str	r3, [r7, #20]

  LocalConfigurationInformationData=(char*)mem;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	625a      	str	r2, [r3, #36]	; 0x24
  char *Info=LocalConfigurationInformationData;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57c:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription1,InstDesc1Len,Info);
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	6a39      	ldr	r1, [r7, #32]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff fe13 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa2>
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	e000      	b.n	800c594 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa4>
 800c592:	2300      	movs	r3, #0
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	62d3      	str	r3, [r2, #44]	; 0x2c
  Info+=InstDesc1Len;
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	4413      	add	r3, r2
 800c59e:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription2,InstDesc2Len,Info);
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	69f9      	ldr	r1, [r7, #28]
 800c5a4:	6838      	ldr	r0, [r7, #0]
 800c5a6:	f7ff fe02 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc4>
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	e000      	b.n	800c5b6 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc6>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	6313      	str	r3, [r2, #48]	; 0x30
  Info+=InstDesc2Len;
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	4413      	add	r3, r2
 800c5c0:	613b      	str	r3, [r7, #16]

  SetCharBuf(ManufacturerInformation,ManInfoLen,Info);
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5c6:	68b8      	ldr	r0, [r7, #8]
 800c5c8:	f7ff fdf1 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.ManufacturerInformation=(ManufacturerInformation?Info:0);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe6>
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	e000      	b.n	800c5d8 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe8>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	6293      	str	r3, [r2, #40]	; 0x28
}
 800c5dc:	bf00      	nop
 800c5de:	3728      	adds	r7, #40	; 0x28
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>:

//*****************************************************************************
void tNMEA2000::SetProgmemConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d004      	beq.n	800c604 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_+0x20>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fe:	4618      	mov	r0, r3
 800c600:	f009 fbf8 	bl	8015df4 <free>
  LocalConfigurationInformationData=0;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	625a      	str	r2, [r3, #36]	; 0x24
  ConfigurationInformation.ManufacturerInformation=ManufacturerInformation;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	629a      	str	r2, [r3, #40]	; 0x28
  ConfigurationInformation.InstallationDescription1=InstallationDescription1;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	62da      	str	r2, [r3, #44]	; 0x2c
  ConfigurationInformation.InstallationDescription2=InstallationDescription2;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>:

//*****************************************************************************
size_t tNMEA2000::GetFastPacketTxPGNCount(int iDev) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  if ( !IsValidDevice(iDev) ) return 0;
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff f95e 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c636:	4603      	mov	r3, r0
 800c638:	f083 0301 	eor.w	r3, r3, #1
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x22>
 800c642:	2300      	movs	r3, #0
 800c644:	e050      	b.n	800c6e8 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc4>
  unsigned long ListPGN;
  size_t FPTxPGNCount=0;
 800c646:	2300      	movs	r3, #0
 800c648:	617b      	str	r3, [r7, #20]

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c64a:	2300      	movs	r3, #0
 800c64c:	613b      	str	r3, [r7, #16]
 800c64e:	4a28      	ldr	r2, [pc, #160]	; (800c6f0 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xcc>)
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c656:	60bb      	str	r3, [r7, #8]
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bf14      	ite	ne
 800c65e:	2301      	movne	r3, #1
 800c660:	2300      	moveq	r3, #0
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00d      	beq.n	800c684 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x60>
    if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f001 fc7e 	bl	800df6c <_ZN9tNMEA200015IsFastPacketPGNEm>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x58>
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	3301      	adds	r3, #1
 800c67a:	617b      	str	r3, [r7, #20]
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	3301      	adds	r3, #1
 800c680:	613b      	str	r3, [r7, #16]
 800c682:	e7e4      	b.n	800c64e <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x2a>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	69da      	ldr	r2, [r3, #28]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c68e:	fb01 f303 	mul.w	r3, r1, r3
 800c692:	4413      	add	r3, r2
 800c694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c696:	2b00      	cmp	r3, #0
 800c698:	d025      	beq.n	800c6e6 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800c69a:	2300      	movs	r3, #0
 800c69c:	60fb      	str	r3, [r7, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69da      	ldr	r2, [r3, #28]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c6a8:	fb01 f303 	mul.w	r3, r1, r3
 800c6ac:	4413      	add	r3, r2
 800c6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60bb      	str	r3, [r7, #8]
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bf14      	ite	ne
 800c6c0:	2301      	movne	r3, #1
 800c6c2:	2300      	moveq	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00d      	beq.n	800c6e6 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
      if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 fc4d 	bl	800df6c <_ZN9tNMEA200015IsFastPacketPGNEm>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xba>
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	617b      	str	r3, [r7, #20]
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e7db      	b.n	800c69e <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x7a>
    }
  }

  return FPTxPGNCount;
 800c6e6:	697b      	ldr	r3, [r7, #20]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	080176a0 	.word	0x080176a0

0800c6f4 <_ZN9tNMEA200018GetSequenceCounterEmi>:

//*****************************************************************************
int tNMEA2000::GetSequenceCounter(unsigned long PGN, int iDev) {
 800c6f4:	b590      	push	{r4, r7, lr}
 800c6f6:	b089      	sub	sp, #36	; 0x24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 800c700:	6879      	ldr	r1, [r7, #4]
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f7ff f8f5 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c708:	4603      	mov	r3, r0
 800c70a:	f083 0301 	eor.w	r3, r3, #1
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <_ZN9tNMEA200018GetSequenceCounterEmi+0x24>
 800c714:	2300      	movs	r3, #0
 800c716:	e0f9      	b.n	800c90c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>

  if ( Devices[iDev].PGNSequenceCounters==0 ) { // Sequence counters has not yet been initialized
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	69da      	ldr	r2, [r3, #28]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c722:	fb01 f303 	mul.w	r3, r1, r3
 800c726:	4413      	add	r3, r2
 800c728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d14c      	bne.n	800c7c8 <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
    Devices[iDev].MaxPGNSequenceCounters=GetFastPacketTxPGNCount(iDev)+1; // Reserve 1 for undefined PGNs
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7ff ff77 	bl	800c624 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>
 800c736:	4601      	mov	r1, r0
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	69da      	ldr	r2, [r3, #28]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800c742:	fb00 f303 	mul.w	r3, r0, r3
 800c746:	4413      	add	r3, r2
 800c748:	1c4a      	adds	r2, r1, #1
 800c74a:	639a      	str	r2, [r3, #56]	; 0x38
    Devices[iDev].PGNSequenceCounters=new unsigned long[Devices[iDev].MaxPGNSequenceCounters];
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	69da      	ldr	r2, [r3, #28]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c756:	fb01 f303 	mul.w	r3, r1, r3
 800c75a:	4413      	add	r3, r2
 800c75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800c762:	4293      	cmp	r3, r2
 800c764:	d201      	bcs.n	800c76a <_ZN9tNMEA200018GetSequenceCounterEmi+0x76>
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	e001      	b.n	800c76e <_ZN9tNMEA200018GetSequenceCounterEmi+0x7a>
 800c76a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	69d1      	ldr	r1, [r2, #28]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800c778:	fb00 f202 	mul.w	r2, r0, r2
 800c77c:	188c      	adds	r4, r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f009 f9d5 	bl	8015b2e <_Znaj>
 800c784:	4603      	mov	r3, r0
 800c786:	6363      	str	r3, [r4, #52]	; 0x34
    for ( size_t i=0; i<Devices[iDev].MaxPGNSequenceCounters; i++ ) Devices[iDev].PGNSequenceCounters[i]=0;
 800c788:	2300      	movs	r3, #0
 800c78a:	61fb      	str	r3, [r7, #28]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	69da      	ldr	r2, [r3, #28]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c796:	fb01 f303 	mul.w	r3, r1, r3
 800c79a:	4413      	add	r3, r2
 800c79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79e:	69fa      	ldr	r2, [r7, #28]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d211      	bcs.n	800c7c8 <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	69da      	ldr	r2, [r3, #28]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c7ae:	fb01 f303 	mul.w	r3, r1, r3
 800c7b2:	4413      	add	r3, r2
 800c7b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	61fb      	str	r3, [r7, #28]
 800c7c6:	e7e1      	b.n	800c78c <_ZN9tNMEA200018GetSequenceCounterEmi+0x98>
  }
  if ( Devices[iDev].PGNSequenceCounters==0 ) return 0; // Should not be. Only in case of memory allocation problem.
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	69da      	ldr	r2, [r3, #28]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c7d2:	fb01 f303 	mul.w	r3, r1, r3
 800c7d6:	4413      	add	r3, r2
 800c7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <_ZN9tNMEA200018GetSequenceCounterEmi+0xee>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	e094      	b.n	800c90c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  size_t last=Devices[iDev].MaxPGNSequenceCounters-1;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	69da      	ldr	r2, [r3, #28]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c7ec:	fb01 f303 	mul.w	r3, r1, r3
 800c7f0:	4413      	add	r3, r2
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	613b      	str	r3, [r7, #16]
  unsigned long sc;
  for ( size_t i=0; i<last; i++ ) {
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	617b      	str	r3, [r7, #20]
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	429a      	cmp	r2, r3
 800c802:	d25e      	bcs.n	800c8c2 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1ce>
    if ( Devices[iDev].PGNSequenceCounters[i]==0 ) { // Empty place, use this
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	69da      	ldr	r2, [r3, #28]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c80e:	fb01 f303 	mul.w	r3, r1, r3
 800c812:	4413      	add	r3, r2
 800c814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4413      	add	r3, r2
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10f      	bne.n	800c842 <_ZN9tNMEA200018GetSequenceCounterEmi+0x14e>
      Devices[iDev].PGNSequenceCounters[i]=PGN;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	69da      	ldr	r2, [r3, #28]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c82c:	fb01 f303 	mul.w	r3, r1, r3
 800c830:	4413      	add	r3, r2
 800c832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	601a      	str	r2, [r3, #0]
      return 0; // Start from sequence 0
 800c83e:	2300      	movs	r3, #0
 800c840:	e064      	b.n	800c90c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
    }
    if ( (Devices[iDev].PGNSequenceCounters[i]&0x00ffffff) == PGN ) { // Found counter, use it
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	69da      	ldr	r2, [r3, #28]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c84c:	fb01 f303 	mul.w	r3, r1, r3
 800c850:	4413      	add	r3, r2
 800c852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	429a      	cmp	r2, r3
 800c864:	d129      	bne.n	800c8ba <_ZN9tNMEA200018GetSequenceCounterEmi+0x1c6>
      sc=Devices[iDev].PGNSequenceCounters[i]>>24;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	69da      	ldr	r2, [r3, #28]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c870:	fb01 f303 	mul.w	r3, r1, r3
 800c874:	4413      	add	r3, r2
 800c876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	0e1b      	lsrs	r3, r3, #24
 800c882:	61bb      	str	r3, [r7, #24]
      sc++; if (sc>7) sc=0; // Get next counter
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	3301      	adds	r3, #1
 800c888:	61bb      	str	r3, [r7, #24]
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	2b07      	cmp	r3, #7
 800c88e:	d901      	bls.n	800c894 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1a0>
 800c890:	2300      	movs	r3, #0
 800c892:	61bb      	str	r3, [r7, #24]
      Devices[iDev].PGNSequenceCounters[i]=PGN | (sc << 24);
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	0619      	lsls	r1, r3, #24
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	69da      	ldr	r2, [r3, #28]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800c8a2:	fb00 f303 	mul.w	r3, r0, r3
 800c8a6:	4413      	add	r3, r2
 800c8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	601a      	str	r2, [r3, #0]
      return sc;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	e028      	b.n	800c90c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  for ( size_t i=0; i<last; i++ ) {
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e79c      	b.n	800c7fc <_ZN9tNMEA200018GetSequenceCounterEmi+0x108>
    }
  }
  // PGN counter not found, so use common
  sc=Devices[iDev].PGNSequenceCounters[last];
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	69da      	ldr	r2, [r3, #28]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c8cc:	fb01 f303 	mul.w	r3, r1, r3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	61bb      	str	r3, [r7, #24]
  sc++; if (sc>7) sc=0;
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	61bb      	str	r3, [r7, #24]
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b07      	cmp	r3, #7
 800c8e8:	d901      	bls.n	800c8ee <_ZN9tNMEA200018GetSequenceCounterEmi+0x1fa>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61bb      	str	r3, [r7, #24]
  Devices[iDev].PGNSequenceCounters[last]=sc;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	69da      	ldr	r2, [r3, #28]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c8f8:	fb01 f303 	mul.w	r3, r1, r3
 800c8fc:	4413      	add	r3, r2
 800c8fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	69ba      	ldr	r2, [r7, #24]
 800c908:	601a      	str	r2, [r3, #0]
  return sc;
 800c90a:	69bb      	ldr	r3, [r7, #24]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3724      	adds	r7, #36	; 0x24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd90      	pop	{r4, r7, pc}

0800c914 <_Z17CopyProgmemStringPKcjPc>:

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
void CopyProgmemString(const char *str, size_t MaxLen, char *buf) {
 800c914:	b480      	push	{r7}
 800c916:	b087      	sub	sp, #28
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d03a      	beq.n	800c99c <_Z17CopyProgmemStringPKcjPc+0x88>
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d037      	beq.n	800c99c <_Z17CopyProgmemStringPKcjPc+0x88>
  if ( str==0 ) { buf[0]=0; return; }
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <_Z17CopyProgmemStringPKcjPc+0x26>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	e031      	b.n	800c99e <_Z17CopyProgmemStringPKcjPc+0x8a>
  size_t i=0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	617b      	str	r3, [r7, #20]
  char c;
  for (; i<MaxLen-1 && (c=pgm_read_byte(&(str[i])))!=0; i++) buf[i]=c;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	3b01      	subs	r3, #1
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	429a      	cmp	r2, r3
 800c946:	d209      	bcs.n	800c95c <_Z17CopyProgmemStringPKcjPc+0x48>
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	4413      	add	r3, r2
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	74fb      	strb	r3, [r7, #19]
 800c952:	7cfb      	ldrb	r3, [r7, #19]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <_Z17CopyProgmemStringPKcjPc+0x48>
 800c958:	2301      	movs	r3, #1
 800c95a:	e000      	b.n	800c95e <_Z17CopyProgmemStringPKcjPc+0x4a>
 800c95c:	2300      	movs	r3, #0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d008      	beq.n	800c974 <_Z17CopyProgmemStringPKcjPc+0x60>
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	4413      	add	r3, r2
 800c968:	7cfa      	ldrb	r2, [r7, #19]
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	3301      	adds	r3, #1
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	e7e4      	b.n	800c93e <_Z17CopyProgmemStringPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d208      	bcs.n	800c98e <_Z17CopyProgmemStringPKcjPc+0x7a>
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	4413      	add	r3, r2
 800c982:	2200      	movs	r2, #0
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	3301      	adds	r3, #1
 800c98a:	617b      	str	r3, [r7, #20]
 800c98c:	e7f2      	b.n	800c974 <_Z17CopyProgmemStringPKcjPc+0x60>
  buf[MaxLen-1]=0; // Force null termination
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	3b01      	subs	r3, #1
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	4413      	add	r3, r2
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	e000      	b.n	800c99e <_Z17CopyProgmemStringPKcjPc+0x8a>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800c99c:	bf00      	nop
}
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bc80      	pop	{r7}
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <_ZN9tNMEA20007IsTxPGNEmi>:

//*****************************************************************************
bool tNMEA2000::IsTxPGN(unsigned long PGN, int iDev) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b088      	sub	sp, #32
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 800c9b4:	6879      	ldr	r1, [r7, #4]
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f7fe ff9b 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f083 0301 	eor.w	r3, r3, #1
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <_ZN9tNMEA20007IsTxPGNEmi+0x24>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e046      	b.n	800ca5a <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  unsigned long ListPGN;

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	61fb      	str	r3, [r7, #28]
 800c9d0:	4a24      	ldr	r2, [pc, #144]	; (800ca64 <_ZN9tNMEA20007IsTxPGNEmi+0xbc>)
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9d8:	617b      	str	r3, [r7, #20]
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bf14      	ite	ne
 800c9e0:	2301      	movne	r3, #1
 800c9e2:	2300      	moveq	r3, #0
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d009      	beq.n	800c9fe <_ZN9tNMEA20007IsTxPGNEmi+0x56>
    if ( ListPGN==PGN ) return true;
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d101      	bne.n	800c9f6 <_ZN9tNMEA20007IsTxPGNEmi+0x4e>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e031      	b.n	800ca5a <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	61fb      	str	r3, [r7, #28]
 800c9fc:	e7e8      	b.n	800c9d0 <_ZN9tNMEA20007IsTxPGNEmi+0x28>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	69da      	ldr	r2, [r3, #28]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ca08:	fb01 f303 	mul.w	r3, r1, r3
 800ca0c:	4413      	add	r3, r2
 800ca0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d021      	beq.n	800ca58 <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800ca14:	2300      	movs	r3, #0
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	69da      	ldr	r2, [r3, #28]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ca22:	fb01 f303 	mul.w	r3, r1, r3
 800ca26:	4413      	add	r3, r2
 800ca28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	617b      	str	r3, [r7, #20]
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bf14      	ite	ne
 800ca3a:	2301      	movne	r3, #1
 800ca3c:	2300      	moveq	r3, #0
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d009      	beq.n	800ca58 <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
      if ( ListPGN==PGN ) return true;
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d101      	bne.n	800ca50 <_ZN9tNMEA20007IsTxPGNEmi+0xa8>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e004      	b.n	800ca5a <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	3301      	adds	r3, #1
 800ca54:	61bb      	str	r3, [r7, #24]
 800ca56:	e7df      	b.n	800ca18 <_ZN9tNMEA20007IsTxPGNEmi+0x70>
    }
  }
  return false;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	080176a0 	.word	0x080176a0

0800ca68 <_ZNK9tNMEA200021GetProductInformationEiRb>:

//*****************************************************************************
const tNMEA2000::tProductInformation * tNMEA2000::GetProductInformation(int iDev, bool &IsProgMem) const {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f7fe ff3b 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	f083 0301 	eor.w	r3, r3, #1
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <_ZNK9tNMEA200021GetProductInformationEiRb+0x24>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e03d      	b.n	800cb08 <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
  int iPIDev=iDev;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	617b      	str	r3, [r7, #20]

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	69da      	ldr	r2, [r3, #28]
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ca9a:	fb01 f303 	mul.w	r3, r1, r3
 800ca9e:	4413      	add	r3, r2
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <_ZNK9tNMEA200021GetProductInformationEiRb+0x42>
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]
    if ( Devices[iPIDev].ProductInformation==0 ) return 0; // Can not do anything.
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	69da      	ldr	r2, [r3, #28]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cab4:	fb01 f303 	mul.w	r3, r1, r3
 800cab8:	4413      	add	r3, r2
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d101      	bne.n	800cac4 <_ZNK9tNMEA200021GetProductInformationEiRb+0x5c>
 800cac0:	2300      	movs	r3, #0
 800cac2:	e021      	b.n	800cb08 <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
    IsProgMem = (Devices[iPIDev].ProductInformation!=Devices[iPIDev].LocalProductInformation );
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	69da      	ldr	r2, [r3, #28]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cace:	fb01 f303 	mul.w	r3, r1, r3
 800cad2:	4413      	add	r3, r2
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	69d9      	ldr	r1, [r3, #28]
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800cae0:	fb00 f303 	mul.w	r3, r0, r3
 800cae4:	440b      	add	r3, r1
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	429a      	cmp	r2, r3
 800caea:	bf14      	ite	ne
 800caec:	2301      	movne	r3, #1
 800caee:	2300      	moveq	r3, #0
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	701a      	strb	r2, [r3, #0]
    return Devices[iPIDev].ProductInformation;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	69da      	ldr	r2, [r3, #28]
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cb00:	fb01 f303 	mul.w	r3, r1, r3
 800cb04:	4413      	add	r3, r2
 800cb06:	691b      	ldr	r3, [r3, #16]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3718      	adds	r7, #24
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <_ZNK9tNMEA200013GetN2kVersionEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetN2kVersion(int iDev) const {
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800cb1a:	f107 030b 	add.w	r3, r7, #11
 800cb1e:	461a      	mov	r2, r3
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff ffa0 	bl	800ca68 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800cb28:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <_ZNK9tNMEA200013GetN2kVersionEi+0x24>
 800cb30:	2300      	movs	r3, #0
 800cb32:	e00a      	b.n	800cb4a <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>

  if ( !IsProgMem ) {
 800cb34:	7afb      	ldrb	r3, [r7, #11]
 800cb36:	f083 0301 	eor.w	r3, r3, #1
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <_ZNK9tNMEA200013GetN2kVersionEi+0x36>
    return ProductInformation->N2kVersion;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	e001      	b.n	800cb4a <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->N2kVersion);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	881b      	ldrh	r3, [r3, #0]
  }
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <_ZNK9tNMEA200014GetProductCodeEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetProductCode(int iDev) const {
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800cb5c:	f107 030b 	add.w	r3, r7, #11
 800cb60:	461a      	mov	r2, r3
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff ff7f 	bl	800ca68 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800cb6a:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <_ZNK9tNMEA200014GetProductCodeEi+0x24>
 800cb72:	2300      	movs	r3, #0
 800cb74:	e00a      	b.n	800cb8c <_ZNK9tNMEA200014GetProductCodeEi+0x3a>

  if ( !IsProgMem ) {
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	f083 0301 	eor.w	r3, r3, #1
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d002      	beq.n	800cb88 <_ZNK9tNMEA200014GetProductCodeEi+0x36>
    return ProductInformation->ProductCode;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	885b      	ldrh	r3, [r3, #2]
 800cb86:	e001      	b.n	800cb8c <_ZNK9tNMEA200014GetProductCodeEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->ProductCode);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	885b      	ldrh	r3, [r3, #2]
  }
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <_ZNK9tNMEA200010GetModelIDEPcji>:

//*****************************************************************************
void tNMEA2000::GetModelID(char *buf, size_t max_len, int iDev) const {
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
  if ( max_len==0 ) return;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d023      	beq.n	800cbf0 <_ZNK9tNMEA200010GetModelIDEPcji+0x5c>
  buf[0]=0;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800cbae:	f107 0313 	add.w	r3, r7, #19
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff ff56 	bl	800ca68 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800cbbc:	6178      	str	r0, [r7, #20]

  if ( ProductInformation==0 ) return;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d017      	beq.n	800cbf4 <_ZNK9tNMEA200010GetModelIDEPcji+0x60>

  if ( !IsProgMem ) {
 800cbc4:	7cfb      	ldrb	r3, [r7, #19]
 800cbc6:	f083 0301 	eor.w	r3, r3, #1
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d007      	beq.n	800cbe0 <_ZNK9tNMEA200010GetModelIDEPcji+0x4c>
    SetCharBuf(ProductInformation->N2kModelID,max_len,buf);
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff fae8 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
 800cbde:	e00a      	b.n	800cbf6 <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  } else {
    CopyProgmemString(ProductInformation->N2kModelID,max_len,buf);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff fe93 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
 800cbee:	e002      	b.n	800cbf6 <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( max_len==0 ) return;
 800cbf0:	bf00      	nop
 800cbf2:	e000      	b.n	800cbf6 <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( ProductInformation==0 ) return;
 800cbf4:	bf00      	nop
  }
}
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <_ZNK9tNMEA200021GetCertificationLevelEi>:
    CopyProgmemString(ProductInformation->N2kModelSerialCode,max_len,buf);
  }
}

//*****************************************************************************
unsigned char tNMEA2000::GetCertificationLevel(int iDev) const {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800cc06:	f107 030b 	add.w	r3, r7, #11
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff ff2a 	bl	800ca68 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800cc14:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d101      	bne.n	800cc20 <_ZNK9tNMEA200021GetCertificationLevelEi+0x24>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	e00c      	b.n	800cc3a <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>

  if ( !IsProgMem ) {
 800cc20:	7afb      	ldrb	r3, [r7, #11]
 800cc22:	f083 0301 	eor.w	r3, r3, #1
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <_ZNK9tNMEA200021GetCertificationLevelEi+0x38>
    return ProductInformation->CertificationLevel;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cc32:	e002      	b.n	800cc3a <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->CertificationLevel);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
  }
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <_ZNK9tNMEA200018GetLoadEquivalencyEi>:

//*****************************************************************************
unsigned char tNMEA2000::GetLoadEquivalency(int iDev) const {
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800cc4c:	f107 030b 	add.w	r3, r7, #11
 800cc50:	461a      	mov	r2, r3
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7ff ff07 	bl	800ca68 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800cc5a:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x24>
 800cc62:	2300      	movs	r3, #0
 800cc64:	e00c      	b.n	800cc80 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>

  if ( !IsProgMem ) {
 800cc66:	7afb      	ldrb	r3, [r7, #11]
 800cc68:	f083 0301 	eor.w	r3, r3, #1
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x38>
    return ProductInformation->LoadEquivalency;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cc78:	e002      	b.n	800cc80 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->LoadEquivalency);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
  }
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>:

//*****************************************************************************
void tNMEA2000::CopyProgmemConfigurationInformationToLocal() {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b096      	sub	sp, #88	; 0x58
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  if ( LocalConfigurationInformationData==0 ) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d12e      	bne.n	800ccf6 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv+0x6e>
    char Buf[Max_N2kConfigurationInfoField_len];
    const char *ID1=ConfigurationInformation.InstallationDescription1;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	657b      	str	r3, [r7, #84]	; 0x54
    const char *ID2=ConfigurationInformation.InstallationDescription2;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca2:	653b      	str	r3, [r7, #80]	; 0x50
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,Max_N2kConfigurationInfoField_len,Buf);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca8:	f107 0208 	add.w	r2, r7, #8
 800ccac:	2147      	movs	r1, #71	; 0x47
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff fe30 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
    SetConfigurationInformation(Buf);
 800ccb4:	f107 0108 	add.w	r1, r7, #8
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2200      	movs	r2, #0
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff fc17 	bl	800c4f0 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>
    CopyProgmemString(ID1,Max_N2kConfigurationInfoField_len,Buf);
 800ccc2:	f107 0308 	add.w	r3, r7, #8
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2147      	movs	r1, #71	; 0x47
 800ccca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cccc:	f7ff fe22 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription1(Buf);
 800ccd0:	f107 0308 	add.w	r3, r7, #8
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f811 	bl	800ccfe <_ZN9tNMEA200027SetInstallationDescription1EPKc>
    CopyProgmemString(ID2,Max_N2kConfigurationInfoField_len,Buf);
 800ccdc:	f107 0308 	add.w	r3, r7, #8
 800cce0:	461a      	mov	r2, r3
 800cce2:	2147      	movs	r1, #71	; 0x47
 800cce4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cce6:	f7ff fe15 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription2(Buf);
 800ccea:	f107 0308 	add.w	r3, r7, #8
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f824 	bl	800cd3e <_ZN9tNMEA200027SetInstallationDescription2EPKc>
  }
}
 800ccf6:	bf00      	nop
 800ccf8:	3758      	adds	r7, #88	; 0x58
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <_ZN9tNMEA200027SetInstallationDescription1EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription1(const char *InstallationDescription1) {
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ffbd 	bl	800cc88 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  // Get pointer to local InstallationDescription1, which is after
  char *Info=LocalConfigurationInformationData;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd12:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription1,Max_N2kConfigurationInfoField_len,Info);
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	2147      	movs	r1, #71	; 0x47
 800cd18:	6838      	ldr	r0, [r7, #0]
 800cd1a:	f7ff fa48 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2a>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	e000      	b.n	800cd2a <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2c>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  InstallationDescriptionChanged=true;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800cd36:	bf00      	nop
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <_ZN9tNMEA200027SetInstallationDescription2EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription2(const char *InstallationDescription2) {
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff ff9d 	bl	800cc88 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  char *Info=LocalConfigurationInformationData+Max_N2kConfigurationInfoField_len;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	3347      	adds	r3, #71	; 0x47
 800cd54:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription2,Max_N2kConfigurationInfoField_len,Info);
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	2147      	movs	r1, #71	; 0x47
 800cd5a:	6838      	ldr	r0, [r7, #0]
 800cd5c:	f7ff fa27 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2c>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	e000      	b.n	800cd6c <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2e>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	6313      	str	r3, [r2, #48]	; 0x30
  InstallationDescriptionChanged=true;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZN9tNMEA200027GetInstallationDescription1EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription1(char *buf, size_t max_len) {
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d007      	beq.n	800cda4 <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription1,max_len,buf);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff fa06 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
  }
}
 800cda2:	e006      	b.n	800cdb2 <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff fdb1 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <_ZN9tNMEA200027GetInstallationDescription2EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription2(char *buf, size_t max_len) {
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	60f8      	str	r0, [r7, #12]
 800cdc2:	60b9      	str	r1, [r7, #8]
 800cdc4:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d007      	beq.n	800cdde <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription2,max_len,buf);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff f9e9 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
  }
}
 800cddc:	e006      	b.n	800cdec <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	6879      	ldr	r1, [r7, #4]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fd94 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
}
 800cdec:	bf00      	nop
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <_ZN9tNMEA200026GetManufacturerInformationEPcj>:

//*****************************************************************************
void tNMEA2000::GetManufacturerInformation(char *buf, size_t max_len) {
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x24>
    SetCharBuf(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff f9cc 	bl	800c1ae <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
  }
}
 800ce16:	e006      	b.n	800ce26 <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x32>
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fd77 	bl	800c914 <_Z17CopyProgmemStringPKcjPc>
}
 800ce26:	bf00      	nop
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <_ZN9tNMEA200020SetDeviceInformationEmhhthi>:
                                     unsigned char _DeviceFunction,
                                     unsigned char _DeviceClass,
                                     uint16_t _ManufacturerCode,
                                     unsigned char _IndustryGroup,
                                     int iDev
                                     ) {
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	4611      	mov	r1, r2
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	71fb      	strb	r3, [r7, #7]
 800ce40:	4613      	mov	r3, r2
 800ce42:	71bb      	strb	r3, [r7, #6]
   if ( !IsValidDevice(iDev) ) return;
 800ce44:	6a39      	ldr	r1, [r7, #32]
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7fe fd53 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	f083 0301 	eor.w	r3, r3, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d15a      	bne.n	800cf0e <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
   InitDevices();
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f7ff fa7d 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>
   if (_ManufacturerCode!=0xffff) Devices[iDev].DeviceInformation.SetManufacturerCode(_ManufacturerCode);
 800ce5e:	8b3b      	ldrh	r3, [r7, #24]
 800ce60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d00d      	beq.n	800ce84 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x56>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	69da      	ldr	r2, [r3, #28]
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ce72:	fb01 f303 	mul.w	r3, r1, r3
 800ce76:	4413      	add	r3, r2
 800ce78:	3308      	adds	r3, #8
 800ce7a:	8b3a      	ldrh	r2, [r7, #24]
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe fad0 	bl	800b424 <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>
   if (_UniqueNumber!=0xffffffff) Devices[iDev].DeviceInformation.SetUniqueNumber(_UniqueNumber);
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce8a:	d00c      	beq.n	800cea6 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x78>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	69da      	ldr	r2, [r3, #28]
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ce96:	fb01 f303 	mul.w	r3, r1, r3
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe faab 	bl	800b3fc <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>
   if (_DeviceFunction!=0xff) Devices[iDev].DeviceInformation.SetDeviceFunction(_DeviceFunction);
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	2bff      	cmp	r3, #255	; 0xff
 800ceaa:	d00d      	beq.n	800cec8 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x9a>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	69da      	ldr	r2, [r3, #28]
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ceb6:	fb01 f303 	mul.w	r3, r1, r3
 800ceba:	4413      	add	r3, r2
 800cebc:	3308      	adds	r3, #8
 800cebe:	79fa      	ldrb	r2, [r7, #7]
 800cec0:	4611      	mov	r1, r2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fadb 	bl	800b47e <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>
   if (_DeviceClass!=0xff) Devices[iDev].DeviceInformation.SetDeviceClass(_DeviceClass);
 800cec8:	79bb      	ldrb	r3, [r7, #6]
 800ceca:	2bff      	cmp	r3, #255	; 0xff
 800cecc:	d00d      	beq.n	800ceea <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xbc>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	69da      	ldr	r2, [r3, #28]
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ced8:	fb01 f303 	mul.w	r3, r1, r3
 800cedc:	4413      	add	r3, r2
 800cede:	3308      	adds	r3, #8
 800cee0:	79ba      	ldrb	r2, [r7, #6]
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fad8 	bl	800b49a <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>
   if (_IndustryGroup!=0xff) Devices[iDev].DeviceInformation.SetIndustryGroup(_IndustryGroup);
 800ceea:	7f3b      	ldrb	r3, [r7, #28]
 800ceec:	2bff      	cmp	r3, #255	; 0xff
 800ceee:	d00f      	beq.n	800cf10 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe2>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	69da      	ldr	r2, [r3, #28]
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cefa:	fb01 f303 	mul.w	r3, r1, r3
 800cefe:	4413      	add	r3, r2
 800cf00:	3308      	adds	r3, #8
 800cf02:	7f3a      	ldrb	r2, [r7, #28]
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fad7 	bl	800b4ba <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>
 800cf0c:	e000      	b.n	800cf10 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe2>
   if ( !IsValidDevice(iDev) ) return;
 800cf0e:	bf00      	nop
}
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>:
void tNMEA2000::SetDeviceInformationInstances(
                              uint8_t _DeviceInstanceLower,
                              uint8_t _DeviceInstanceUpper,
                              uint8_t _SystemInstance,
                              int iDev
                              ) {
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b084      	sub	sp, #16
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	4608      	mov	r0, r1
 800cf20:	4611      	mov	r1, r2
 800cf22:	461a      	mov	r2, r3
 800cf24:	4603      	mov	r3, r0
 800cf26:	70fb      	strb	r3, [r7, #3]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70bb      	strb	r3, [r7, #2]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	707b      	strb	r3, [r7, #1]
  if ( !IsValidDevice(iDev) ) return;
 800cf30:	69b9      	ldr	r1, [r7, #24]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7fe fcdd 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f083 0301 	eor.w	r3, r3, #1
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f040 808d 	bne.w	800d060 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x14a>

  InitDevices();
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff fa06 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>
  uint8_t DeviceInstance=Devices[iDev].DeviceInformation.GetDeviceInstance();
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	69da      	ldr	r2, [r3, #28]
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cf56:	fb01 f303 	mul.w	r3, r1, r3
 800cf5a:	4413      	add	r3, r2
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe fa82 	bl	800b468 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 800cf64:	4603      	mov	r3, r0
 800cf66:	73fb      	strb	r3, [r7, #15]

  if (_DeviceInstanceLower!=0xff ) {
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	2bff      	cmp	r3, #255	; 0xff
 800cf6c:	d00c      	beq.n	800cf88 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x72>
    DeviceInstance=( (DeviceInstance & ~0x07) | (_DeviceInstanceLower & 0x07) );
 800cf6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf72:	f023 0307 	bic.w	r3, r3, #7
 800cf76:	b25a      	sxtb	r2, r3
 800cf78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf7c:	f003 0307 	and.w	r3, r3, #7
 800cf80:	b25b      	sxtb	r3, r3
 800cf82:	4313      	orrs	r3, r2
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	73fb      	strb	r3, [r7, #15]
  }
  if (_DeviceInstanceUpper!=0xff ) {
 800cf88:	78bb      	ldrb	r3, [r7, #2]
 800cf8a:	2bff      	cmp	r3, #255	; 0xff
 800cf8c:	d00a      	beq.n	800cfa4 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x8e>
    DeviceInstance=( (DeviceInstance & ~0xF8) | ((_DeviceInstanceUpper&0x1f)<<3) );
 800cf8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf92:	f003 0307 	and.w	r3, r3, #7
 800cf96:	b25a      	sxtb	r2, r3
 800cf98:	78bb      	ldrb	r3, [r7, #2]
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	b25b      	sxtb	r3, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	b25b      	sxtb	r3, r3
 800cfa2:	73fb      	strb	r3, [r7, #15]
  }

  if ( Devices[iDev].DeviceInformation.GetDeviceInstance()!=DeviceInstance) {
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	69da      	ldr	r2, [r3, #28]
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cfae:	fb01 f303 	mul.w	r3, r1, r3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	3308      	adds	r3, #8
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe fa56 	bl	800b468 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	bf14      	ite	ne
 800cfc6:	2301      	movne	r3, #1
 800cfc8:	2300      	moveq	r3, #0
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d010      	beq.n	800cff2 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0xdc>
    Devices[iDev].DeviceInformation.SetDeviceInstance(DeviceInstance);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	69da      	ldr	r2, [r3, #28]
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cfda:	fb01 f303 	mul.w	r3, r1, r3
 800cfde:	4413      	add	r3, r2
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	7bfa      	ldrb	r2, [r7, #15]
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fe fa30 	bl	800b44c <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
    DeviceInformationChanged=true;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	769a      	strb	r2, [r3, #26]
  }

  if (_SystemInstance!=0xff && Devices[iDev].DeviceInformation.GetSystemInstance()!=_SystemInstance) {
 800cff2:	787b      	ldrb	r3, [r7, #1]
 800cff4:	2bff      	cmp	r3, #255	; 0xff
 800cff6:	d012      	beq.n	800d01e <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x108>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	69da      	ldr	r2, [r3, #28]
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d002:	fb01 f303 	mul.w	r3, r1, r3
 800d006:	4413      	add	r3, r2
 800d008:	3308      	adds	r3, #8
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fb f96e 	bl	80082ec <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 800d010:	4603      	mov	r3, r0
 800d012:	461a      	mov	r2, r3
 800d014:	787b      	ldrb	r3, [r7, #1]
 800d016:	4293      	cmp	r3, r2
 800d018:	d001      	beq.n	800d01e <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x108>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x10a>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d010      	beq.n	800d046 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x130>
    Devices[iDev].DeviceInformation.SetSystemInstance(_SystemInstance);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	69da      	ldr	r2, [r3, #28]
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d02e:	fb01 f303 	mul.w	r3, r1, r3
 800d032:	4413      	add	r3, r2
 800d034:	3308      	adds	r3, #8
 800d036:	787a      	ldrb	r2, [r7, #1]
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fa59 	bl	800b4f2 <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>
    DeviceInformationChanged=true;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	769a      	strb	r2, [r3, #26]
  }

  // Send delayed. Had problems with some devices with too fast response.
  if ( IsReadyToSend() ) SendIsoAddressClaim(0xff,iDev,2);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7fe fc68 	bl	800b91c <_ZNK9tNMEA200013IsReadyToSendEv>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x14c>
 800d052:	2302      	movs	r3, #2
 800d054:	69ba      	ldr	r2, [r7, #24]
 800d056:	21ff      	movs	r1, #255	; 0xff
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f002 fe7c 	bl	800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 800d05e:	e000      	b.n	800d062 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x14c>
  if ( !IsValidDevice(iDev) ) return;
 800d060:	bf00      	nop
}
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>:
void tNMEA2000::ExtendFastPacketMessages(const unsigned long *_FastPacketMessages) {
  FastPacketMessages[1]=_FastPacketMessages;
}

//*****************************************************************************
void tNMEA2000::ExtendTransmitMessages(const unsigned long *_Messages, int iDev) {
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7fe fc3b 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f083 0301 	eor.w	r3, r3, #1
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10d      	bne.n	800d0a4 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3c>
  InitDevices();
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f7ff f965 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].TransmitMessages=_Messages;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	69da      	ldr	r2, [r3, #28]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d098:	fb01 f303 	mul.w	r3, r1, r3
 800d09c:	4413      	add	r3, r2
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	62da      	str	r2, [r3, #44]	; 0x2c
 800d0a2:	e000      	b.n	800d0a6 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3e>
  if ( !IsValidDevice(iDev) ) return;
 800d0a4:	bf00      	nop
}
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>:
  InitDevices();
  Devices[iDev].ReceiveMessages=_Messages;
}

//*****************************************************************************
void tNMEA2000::SetMode(tN2kMode _N2kMode, uint8_t _N2kSource) {
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	70bb      	strb	r3, [r7, #2]
  InitDevices();
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff f94b 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>
  N2kMode=_N2kMode;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	78fa      	ldrb	r2, [r7, #3]
 800d0c6:	715a      	strb	r2, [r3, #5]
  for (int i=0; i<DeviceCount; i++) {
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6a1b      	ldr	r3, [r3, #32]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	da1c      	bge.n	800d110 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x64>
    Devices[i].N2kSource=_N2kSource+i;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	b2d9      	uxtb	r1, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	69da      	ldr	r2, [r3, #28]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800d0e4:	fb00 f303 	mul.w	r3, r0, r3
 800d0e8:	4413      	add	r3, r2
 800d0ea:	78ba      	ldrb	r2, [r7, #2]
 800d0ec:	440a      	add	r2, r1
 800d0ee:	b2d2      	uxtb	r2, r2
 800d0f0:	701a      	strb	r2, [r3, #0]
    Devices[i].UpdateAddressClaimEndSource();
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	69da      	ldr	r2, [r3, #28]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d0fc:	fb01 f303 	mul.w	r3, r1, r3
 800d100:	4413      	add	r3, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe fb23 	bl	800b74e <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
  for (int i=0; i<DeviceCount; i++) {
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3301      	adds	r3, #1
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	e7dd      	b.n	800d0cc <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x20>
  }
  AddressChanged=false;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	765a      	strb	r2, [r3, #25]
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <_ZN9tNMEA200019InitCANFrameBuffersEv>:

//*****************************************************************************
void tNMEA2000::InitCANFrameBuffers() {
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
    if ( CANSendFrameBuf==0 && !IsInitialized() ) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7fe fb5d 	bl	800b7ee <_ZN9tNMEA200013IsInitializedEv>
 800d134:	4603      	mov	r3, r0
 800d136:	f083 0301 	eor.w	r3, r3, #1
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 800d140:	2301      	movs	r3, #1
 800d142:	e000      	b.n	800d146 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x28>
 800d144:	2300      	movs	r3, #0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d01d      	beq.n	800d186 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x68>
      if ( MaxCANSendFrames>0 ) CANSendFrameBuf = new tCANSendFrame[MaxCANSendFrames];
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d150:	2b00      	cmp	r3, #0
 800d152:	d010      	beq.n	800d176 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x58>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d15a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d15e:	d201      	bcs.n	800d164 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x46>
 800d160:	011b      	lsls	r3, r3, #4
 800d162:	e001      	b.n	800d168 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x4a>
 800d164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d168:	4618      	mov	r0, r3
 800d16a:	f008 fce0 	bl	8015b2e <_Znaj>
 800d16e:	4603      	mov	r3, r0
 800d170:	461a      	mov	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	64da      	str	r2, [r3, #76]	; 0x4c
      N2kDbg("Initialize frame buffer. Size: "); N2kDbg(MaxCANSendFrames); N2kDbg(", address:"); N2kDbgln((uint32_t)CANSendFrameBuf);
      CANSendFrameBufferWrite=0;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      CANSendFrameBufferRead=0;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    }

    // Receive buffer has sense only with interrupt handling. So it must be handled on inherited class.
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
	...

0800d190 <_ZN9tNMEA20004OpenEv>:

//*****************************************************************************
bool tNMEA2000::Open() {
 800d190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d192:	b089      	sub	sp, #36	; 0x24
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  if ( OpenState==os_Open ) return true;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7e1b      	ldrb	r3, [r3, #24]
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d101      	bne.n	800d1a4 <_ZN9tNMEA20004OpenEv+0x14>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e143      	b.n	800d42c <_ZN9tNMEA20004OpenEv+0x29c>

  if ( OpenState==os_None ) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	7e1b      	ldrb	r3, [r3, #24]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f040 80a2 	bne.w	800d2f2 <_ZN9tNMEA20004OpenEv+0x162>
    InitCANFrameBuffers();
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	330c      	adds	r3, #12
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	4798      	blx	r3
    InitDevices();
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff f8cc 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>

    if ( N2kCANMsgBuf==0 ) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f040 8091 	bne.w	800d2ec <_ZN9tNMEA20004OpenEv+0x15c>
      if ( MaxN2kCANMsgs==0 ) MaxN2kCANMsgs=5;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d103      	bne.n	800d1dc <_ZN9tNMEA20004OpenEv+0x4c>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2205      	movs	r2, #5
 800d1d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      N2kCANMsgBuf = new tN2kCANMsg[MaxN2kCANMsgs];
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d1e2:	461c      	mov	r4, r3
 800d1e4:	4b93      	ldr	r3, [pc, #588]	; (800d434 <_ZN9tNMEA20004OpenEv+0x2a4>)
 800d1e6:	429c      	cmp	r4, r3
 800d1e8:	d804      	bhi.n	800d1f4 <_ZN9tNMEA20004OpenEv+0x64>
 800d1ea:	4623      	mov	r3, r4
 800d1ec:	019b      	lsls	r3, r3, #6
 800d1ee:	4423      	add	r3, r4
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	e001      	b.n	800d1f8 <_ZN9tNMEA20004OpenEv+0x68>
 800d1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f008 fc98 	bl	8015b2e <_Znaj>
 800d1fe:	4603      	mov	r3, r0
 800d200:	461e      	mov	r6, r3
 800d202:	4635      	mov	r5, r6
 800d204:	1e63      	subs	r3, r4, #1
 800d206:	461c      	mov	r4, r3
 800d208:	2c00      	cmp	r4, #0
 800d20a:	db06      	blt.n	800d21a <_ZN9tNMEA20004OpenEv+0x8a>
 800d20c:	4628      	mov	r0, r5
 800d20e:	f7fd ffde 	bl	800b1ce <_ZN10tN2kCANMsgC1Ev>
 800d212:	f505 7582 	add.w	r5, r5, #260	; 0x104
 800d216:	3c01      	subs	r4, #1
 800d218:	e7f6      	b.n	800d208 <_ZN9tNMEA20004OpenEv+0x78>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	645e      	str	r6, [r3, #68]	; 0x44
      for (int i=0; i<MaxN2kCANMsgs; i++) N2kCANMsgBuf[i].FreeMessage();
 800d21e:	2300      	movs	r3, #0
 800d220:	61fb      	str	r3, [r7, #28]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d228:	461a      	mov	r2, r3
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	da0e      	bge.n	800d24e <_ZN9tNMEA20004OpenEv+0xbe>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d234:	69fa      	ldr	r2, [r7, #28]
 800d236:	4613      	mov	r3, r2
 800d238:	019b      	lsls	r3, r3, #6
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	440b      	add	r3, r1
 800d240:	4618      	mov	r0, r3
 800d242:	f7fd fff1 	bl	800b228 <_ZN10tN2kCANMsg11FreeMessageEv>
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	3301      	adds	r3, #1
 800d24a:	61fb      	str	r3, [r7, #28]
 800d24c:	e7e9      	b.n	800d222 <_ZN9tNMEA20004OpenEv+0x92>

      #if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
      // On first open try add also default group function handlers
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN60928(this)); // NAME handler
 800d24e:	2014      	movs	r0, #20
 800d250:	f008 fc5c 	bl	8015b0c <_Znwj>
 800d254:	4603      	mov	r3, r0
 800d256:	461c      	mov	r4, r3
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	4620      	mov	r0, r4
 800d25c:	f7fe fc6e 	bl	800bb3c <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>
 800d260:	4621      	mov	r1, r4
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f004 f9fe 	bl	8011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126464(this)); // Rx/Tx list handler
 800d268:	2014      	movs	r0, #20
 800d26a:	f008 fc4f 	bl	8015b0c <_Znwj>
 800d26e:	4603      	mov	r3, r0
 800d270:	461c      	mov	r4, r3
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	4620      	mov	r0, r4
 800d276:	f7fe fc77 	bl	800bb68 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>
 800d27a:	4621      	mov	r1, r4
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f004 f9f1 	bl	8011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #if !defined(N2K_NO_HEARTBEAT_SUPPORT)
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126993(this)); // Heartbeat handler
 800d282:	2014      	movs	r0, #20
 800d284:	f008 fc42 	bl	8015b0c <_Znwj>
 800d288:	4603      	mov	r3, r0
 800d28a:	461c      	mov	r4, r3
 800d28c:	6879      	ldr	r1, [r7, #4]
 800d28e:	4620      	mov	r0, r4
 800d290:	f7fe fc80 	bl	800bb94 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>
 800d294:	4621      	mov	r1, r4
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f004 f9e4 	bl	8011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126996(this)); // Product information
 800d29c:	2014      	movs	r0, #20
 800d29e:	f008 fc35 	bl	8015b0c <_Znwj>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	461c      	mov	r4, r3
 800d2a6:	6879      	ldr	r1, [r7, #4]
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7fe fc8b 	bl	800bbc4 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f004 f9d7 	bl	8011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126998(this)); // Configuration information handler
 800d2b6:	2014      	movs	r0, #20
 800d2b8:	f008 fc28 	bl	8015b0c <_Znwj>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461c      	mov	r4, r3
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f7fe fc96 	bl	800bbf4 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f004 f9ca 	bl	8011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandler(this,0)); // Default handler at last
 800d2d0:	2014      	movs	r0, #20
 800d2d2:	f008 fc1b 	bl	8015b0c <_Znwj>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	461c      	mov	r4, r3
 800d2da:	2200      	movs	r2, #0
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f7fa fa7c 	bl	80077dc <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f004 f9bc 	bl	8011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
    }
    OpenState=os_OpenCAN;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	761a      	strb	r2, [r3, #24]
  }

  if ( OpenState==os_OpenCAN ) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7e1b      	ldrb	r3, [r3, #24]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d155      	bne.n	800d3a6 <_ZN9tNMEA20004OpenEv+0x216>
    if ( !OpenScheduler.IsTime() ) return false;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3314      	adds	r3, #20
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe f845 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 800d304:	4603      	mov	r3, r0
 800d306:	f083 0301 	eor.w	r3, r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <_ZN9tNMEA20004OpenEv+0x184>
 800d310:	2300      	movs	r3, #0
 800d312:	e08b      	b.n	800d42c <_ZN9tNMEA20004OpenEv+0x29c>
    bool Notify=( (ForwardStream!=0) && (ForwardType==tNMEA2000::fwdt_Text) );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d005      	beq.n	800d328 <_ZN9tNMEA20004OpenEv+0x198>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	799b      	ldrb	r3, [r3, #6]
 800d320:	2b01      	cmp	r3, #1
 800d322:	d101      	bne.n	800d328 <_ZN9tNMEA20004OpenEv+0x198>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <_ZN9tNMEA20004OpenEv+0x19a>
 800d328:	2300      	movs	r3, #0
 800d32a:	76fb      	strb	r3, [r7, #27]
    if ( (dbMode!=dm_None) || CANOpen() ) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	791b      	ldrb	r3, [r3, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d108      	bne.n	800d346 <_ZN9tNMEA20004OpenEv+0x1b6>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	3304      	adds	r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	4798      	blx	r3
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <_ZN9tNMEA20004OpenEv+0x1ba>
 800d346:	2301      	movs	r3, #1
 800d348:	e000      	b.n	800d34c <_ZN9tNMEA20004OpenEv+0x1bc>
 800d34a:	2300      	movs	r3, #0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d012      	beq.n	800d376 <_ZN9tNMEA20004OpenEv+0x1e6>
      OpenState=os_WaitOpen;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2202      	movs	r2, #2
 800d354:	761a      	strb	r2, [r3, #24]
      OpenScheduler.FromNow(200);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3314      	adds	r3, #20
 800d35a:	21c8      	movs	r1, #200	; 0xc8
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fe f834 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device ready"));
 800d362:	7efb      	ldrb	r3, [r7, #27]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d016      	beq.n	800d396 <_ZN9tNMEA20004OpenEv+0x206>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	4932      	ldr	r1, [pc, #200]	; (800d438 <_ZN9tNMEA20004OpenEv+0x2a8>)
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fd fe88 	bl	800b084 <_ZN9N2kStream7printlnEPKc>
 800d374:	e00f      	b.n	800d396 <_ZN9tNMEA20004OpenEv+0x206>
    } else { // Open failed, delay next open
      OpenScheduler.FromNow(1000);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3314      	adds	r3, #20
 800d37a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe f823 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device failed to open"));
 800d384:	7efb      	ldrb	r3, [r7, #27]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d005      	beq.n	800d396 <_ZN9tNMEA20004OpenEv+0x206>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	492b      	ldr	r1, [pc, #172]	; (800d43c <_ZN9tNMEA20004OpenEv+0x2ac>)
 800d390:	4618      	mov	r0, r3
 800d392:	f7fd fe77 	bl	800b084 <_ZN9N2kStream7printlnEPKc>
    }
    return OpenState==os_WaitOpen;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	7e1b      	ldrb	r3, [r3, #24]
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	bf0c      	ite	eq
 800d39e:	2301      	moveq	r3, #1
 800d3a0:	2300      	movne	r3, #0
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	e042      	b.n	800d42c <_ZN9tNMEA20004OpenEv+0x29c>
  }

  // There were problems with some CAN controllers start sending immediately after
  // Initialization so we start sending delayed.
  if ( OpenState==os_WaitOpen && OpenScheduler.IsTime() ) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7e1b      	ldrb	r3, [r3, #24]
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d109      	bne.n	800d3c2 <_ZN9tNMEA20004OpenEv+0x232>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3314      	adds	r3, #20
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fd ffeb 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <_ZN9tNMEA20004OpenEv+0x232>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e000      	b.n	800d3c4 <_ZN9tNMEA20004OpenEv+0x234>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d018      	beq.n	800d3fa <_ZN9tNMEA20004OpenEv+0x26a>
    OpenState=os_Open;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2203      	movs	r2, #3
 800d3cc:	761a      	strb	r2, [r3, #24]
    StartAddressClaim();
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f003 fd26 	bl	8010e20 <_ZN9tNMEA200017StartAddressClaimEv>
    tN2kSyncScheduler::SetSyncOffset();
 800d3d4:	f7fd ff90 	bl	800b2f8 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>
    if ( OnOpen!=0 ) OnOpen();
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <_ZN9tNMEA20004OpenEv+0x256>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3e4:	4798      	blx	r3
    SetHeartbeatIntervalAndOffset(DefaultHeartbeatInterval,10000); // Init default hearbeat interval and offset.
 800d3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800d3ee:	f64e 2160 	movw	r1, #60000	; 0xea60
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f93c 	bl	800d670 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
 800d3f8:	e011      	b.n	800d41e <_ZN9tNMEA20004OpenEv+0x28e>
  } else {
    unsigned long canId;
    unsigned char len = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    while ( CANGetFrame(canId,len,buf) );
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3308      	adds	r3, #8
 800d404:	681c      	ldr	r4, [r3, #0]
 800d406:	f107 0308 	add.w	r3, r7, #8
 800d40a:	f107 0213 	add.w	r2, r7, #19
 800d40e:	f107 0114 	add.w	r1, r7, #20
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	47a0      	blx	r4
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d000      	beq.n	800d41e <_ZN9tNMEA20004OpenEv+0x28e>
 800d41c:	e7ef      	b.n	800d3fe <_ZN9tNMEA20004OpenEv+0x26e>
  }

  // For compatibility return true, when final open is waiting.
  return OpenState>=os_WaitOpen;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7e1b      	ldrb	r3, [r3, #24]
 800d422:	2b01      	cmp	r3, #1
 800d424:	bf8c      	ite	hi
 800d426:	2301      	movhi	r3, #1
 800d428:	2300      	movls	r3, #0
 800d42a:	b2db      	uxtb	r3, r3
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3724      	adds	r7, #36	; 0x24
 800d430:	46bd      	mov	sp, r7
 800d432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d434:	007e07e0 	.word	0x007e07e0
 800d438:	08016f60 	.word	0x08016f60
 800d43c:	08016f74 	.word	0x08016f74

0800d440 <_Z10CanIdToN2kmRhRmS_S_>:
 * \param prio  Priority of the N2k message
 * \param pgn   PGN of the N2k message
 * \param src   Source of the N2k message
 * \param dst   Destination of the N2k message
 */
void CanIdToN2k(unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst) {
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
  unsigned char CanIdPF = (unsigned char) (id >> 16);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	0c1b      	lsrs	r3, r3, #16
 800d452:	75fb      	strb	r3, [r7, #23]
  unsigned char CanIdPS = (unsigned char) (id >> 8);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	0a1b      	lsrs	r3, r3, #8
 800d458:	75bb      	strb	r3, [r7, #22]
  unsigned char CanIdDP = (unsigned char) (id >> 24) & 1;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	0e1b      	lsrs	r3, r3, #24
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	f003 0301 	and.w	r3, r3, #1
 800d464:	757b      	strb	r3, [r7, #21]

    src = (unsigned char) id >> 0;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	701a      	strb	r2, [r3, #0]
    prio = (unsigned char) ((id >> 26) & 0x7);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	0e9b      	lsrs	r3, r3, #26
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f003 0307 	and.w	r3, r3, #7
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	701a      	strb	r2, [r3, #0]

    if (CanIdPF < 240) {
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	2bef      	cmp	r3, #239	; 0xef
 800d482:	d80a      	bhi.n	800d49a <_Z10CanIdToN2kmRhRmS_S_+0x5a>
      /* PDU1 format, the PS contains the destination address */
        dst = CanIdPS;
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	7dba      	ldrb	r2, [r7, #22]
 800d488:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8);
 800d48a:	7d7b      	ldrb	r3, [r7, #21]
 800d48c:	041a      	lsls	r2, r3, #16
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	431a      	orrs	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	601a      	str	r2, [r3, #0]
    } else {
      /* PDU2 format, the destination is implied global and the PGN is extended */
        dst = 0xff;
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
    }
}
 800d498:	e00b      	b.n	800d4b2 <_Z10CanIdToN2kmRhRmS_S_+0x72>
        dst = 0xff;
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	22ff      	movs	r2, #255	; 0xff
 800d49e:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
 800d4a0:	7d7b      	ldrb	r3, [r7, #21]
 800d4a2:	041a      	lsls	r2, r3, #16
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	021b      	lsls	r3, r3, #8
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	7dbb      	ldrb	r3, [r7, #22]
 800d4ac:	431a      	orrs	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	601a      	str	r2, [r3, #0]
}
 800d4b2:	bf00      	nop
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bc80      	pop	{r7}
 800d4ba:	4770      	bx	lr

0800d4bc <_Z10N2ktoCanIDhmmh>:
 * \param Source    Source of the N2k message
 * \param Destination   Destination of the N2k message
 * 
 * \return unsigned long -> CAN Id
 */
unsigned long N2ktoCanID(unsigned char priority, unsigned long PGN, unsigned long Source, unsigned char Destination) {
 800d4bc:	b480      	push	{r7}
 800d4be:	b087      	sub	sp, #28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60b9      	str	r1, [r7, #8]
 800d4c4:	607a      	str	r2, [r7, #4]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	73bb      	strb	r3, [r7, #14]
  unsigned char CanIdPF = (unsigned char) (PGN >> 8);
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	0a1b      	lsrs	r3, r3, #8
 800d4d4:	75fb      	strb	r3, [r7, #23]

  if (CanIdPF < 240) {  // PDU1 format
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	2bef      	cmp	r3, #239	; 0xef
 800d4da:	d812      	bhi.n	800d502 <_Z10N2ktoCanIDhmmh+0x46>
     if ( (PGN & 0xff) != 0 ) return 0;  // for PDU1 format PGN lowest byte has to be 0 for the destination.
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <_Z10N2ktoCanIDhmmh+0x2c>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	e015      	b.n	800d514 <_Z10N2ktoCanIDhmmh+0x58>
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | ((unsigned long)Destination)<<8 | (unsigned long)Source);
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	069b      	lsls	r3, r3, #26
 800d4ec:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	021b      	lsls	r3, r3, #8
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	7bbb      	ldrb	r3, [r7, #14]
 800d4f8:	021b      	lsls	r3, r3, #8
 800d4fa:	431a      	orrs	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	e008      	b.n	800d514 <_Z10N2ktoCanIDhmmh+0x58>
  } else { // PDU2 format
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | (unsigned long)Source);
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	069b      	lsls	r3, r3, #26
 800d506:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	021b      	lsls	r3, r3, #8
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4313      	orrs	r3, r2
  }
}
 800d514:	4618      	mov	r0, r3
 800d516:	371c      	adds	r7, #28
 800d518:	46bd      	mov	sp, r7
 800d51a:	bc80      	pop	{r7}
 800d51c:	4770      	bx	lr

0800d51e <_ZN9tNMEA200010SendFramesEv>:

//*****************************************************************************
bool tNMEA2000::SendFrames()
{ uint16_t temp;
 800d51e:	b5b0      	push	{r4, r5, r7, lr}
 800d520:	b086      	sub	sp, #24
 800d522:	af02      	add	r7, sp, #8
 800d524:	6078      	str	r0, [r7, #4]

  if ( CANSendFrameBuf==0 ) return true; // This can be in case, where inherited class defines own buffering.
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <_ZN9tNMEA200010SendFramesEv+0x14>
 800d52e:	2301      	movs	r3, #1
 800d530:	e03f      	b.n	800d5b2 <_ZN9tNMEA200010SendFramesEv+0x94>

  while (CANSendFrameBufferRead!=CANSendFrameBufferWrite) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d53e:	429a      	cmp	r2, r3
 800d540:	d036      	beq.n	800d5b0 <_ZN9tNMEA200010SendFramesEv+0x92>
    temp = (CANSendFrameBufferRead + 1) % MaxCANSendFrames;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d548:	3301      	adds	r3, #1
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800d550:	fb93 f1f2 	sdiv	r1, r3, r2
 800d554:	fb01 f202 	mul.w	r2, r1, r2
 800d558:	1a9b      	subs	r3, r3, r2
 800d55a:	81fb      	strh	r3, [r7, #14]
    if ( CANSendFrame(CANSendFrameBuf[temp].id, CANSendFrameBuf[temp].len, CANSendFrameBuf[temp].buf, CANSendFrameBuf[temp].wait_sent) ) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681c      	ldr	r4, [r3, #0]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d566:	89fb      	ldrh	r3, [r7, #14]
 800d568:	011b      	lsls	r3, r3, #4
 800d56a:	4413      	add	r3, r2
 800d56c:	6819      	ldr	r1, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d572:	89fb      	ldrh	r3, [r7, #14]
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	4413      	add	r3, r2
 800d578:	7918      	ldrb	r0, [r3, #4]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d57e:	89fb      	ldrh	r3, [r7, #14]
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	4413      	add	r3, r2
 800d584:	1d5d      	adds	r5, r3, #5
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d58a:	89fb      	ldrh	r3, [r7, #14]
 800d58c:	011b      	lsls	r3, r3, #4
 800d58e:	4413      	add	r3, r2
 800d590:	7b5b      	ldrb	r3, [r3, #13]
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	462b      	mov	r3, r5
 800d596:	4602      	mov	r2, r0
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	47a0      	blx	r4
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d004      	beq.n	800d5ac <_ZN9tNMEA200010SendFramesEv+0x8e>
      CANSendFrameBufferRead=temp;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	89fa      	ldrh	r2, [r7, #14]
 800d5a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800d5aa:	e7c2      	b.n	800d532 <_ZN9tNMEA200010SendFramesEv+0x14>
      N2kFrameOutDbgStart("Frame unbuffered "); N2kFrameOutDbgln(CANSendFrameBuf[temp].id);
    } else return false;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	e000      	b.n	800d5b2 <_ZN9tNMEA200010SendFramesEv+0x94>
  }

  return true;
 800d5b0:	2301      	movs	r3, #1
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bdb0      	pop	{r4, r5, r7, pc}

0800d5ba <_ZN9tNMEA20009SendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000::SendFrame(unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent) {
 800d5ba:	b590      	push	{r4, r7, lr}
 800d5bc:	b089      	sub	sp, #36	; 0x24
 800d5be:	af02      	add	r7, sp, #8
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	71fb      	strb	r3, [r7, #7]

  if ( !SendFrames() || !CANSendFrame(id,len,buf,wait_sent) ) { // If we can not sent frame immediately, add it to buffer
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f7ff ffa7 	bl	800d51e <_ZN9tNMEA200010SendFramesEv>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	f083 0301 	eor.w	r3, r3, #1
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d110      	bne.n	800d5fe <_ZN9tNMEA20009SendFrameEmhPKhb+0x44>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681c      	ldr	r4, [r3, #0]
 800d5e2:	79fa      	ldrb	r2, [r7, #7]
 800d5e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	47a0      	blx	r4
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f083 0301 	eor.w	r3, r3, #1
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <_ZN9tNMEA20009SendFrameEmhPKhb+0x48>
 800d5fe:	2301      	movs	r3, #1
 800d600:	e000      	b.n	800d604 <_ZN9tNMEA20009SendFrameEmhPKhb+0x4a>
 800d602:	2300      	movs	r3, #0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d02d      	beq.n	800d664 <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
    tCANSendFrame *Frame=GetNextFreeCANSendFrame();
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 fa3a 	bl	800da82 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>
 800d60e:	6138      	str	r0, [r7, #16]
    if ( Frame==0 ) {
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <_ZN9tNMEA20009SendFrameEmhPKhb+0x60>
      N2kFrameOutDbgStart("Frame failed "); N2kFrameOutDbgln(id);
      return false;
 800d616:	2300      	movs	r3, #0
 800d618:	e025      	b.n	800d666 <_ZN9tNMEA20009SendFrameEmhPKhb+0xac>
    }
    len=N2kMin<unsigned char>(len,8);
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	2108      	movs	r1, #8
 800d61e:	4618      	mov	r0, r3
 800d620:	f004 fa1c 	bl	8011a5c <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 800d624:	4603      	mov	r3, r0
 800d626:	71fb      	strb	r3, [r7, #7]
    Frame->id=id;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	601a      	str	r2, [r3, #0]
    Frame->len=len;
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	79fa      	ldrb	r2, [r7, #7]
 800d632:	711a      	strb	r2, [r3, #4]
    Frame->wait_sent=wait_sent;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d63a:	735a      	strb	r2, [r3, #13]
    for (int i=0; i<len; i++) Frame->buf[i]=buf[i];
 800d63c:	2300      	movs	r3, #0
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	79fb      	ldrb	r3, [r7, #7]
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	429a      	cmp	r2, r3
 800d646:	da0d      	bge.n	800d664 <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	4413      	add	r3, r2
 800d64e:	7819      	ldrb	r1, [r3, #0]
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	4413      	add	r3, r2
 800d656:	3305      	adds	r3, #5
 800d658:	460a      	mov	r2, r1
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	3301      	adds	r3, #1
 800d660:	617b      	str	r3, [r7, #20]
 800d662:	e7ed      	b.n	800d640 <_ZN9tNMEA20009SendFrameEmhPKhb+0x86>
    N2kFrameOutDbgStart("Frame buffered "); N2kFrameOutDbgln(id);
  }

  return true;
 800d664:	2301      	movs	r3, #1
}
 800d666:	4618      	mov	r0, r3
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd90      	pop	{r4, r7, pc}
	...

0800d670 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>:

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
void tNMEA2000::SetHeartbeatIntervalAndOffset(uint32_t interval, uint32_t offset, int iDev) {
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	603b      	str	r3, [r7, #0]
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d684:	d105      	bne.n	800d692 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x22>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d68c:	4293      	cmp	r3, r2
 800d68e:	f000 809e 	beq.w	800d7ce <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x15e>
  InitDevices();
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7fe fe60 	bl	800c358 <_ZN9tNMEA200011InitDevicesEv>
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d69e:	617b      	str	r3, [r7, #20]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6a1b      	ldr	r3, [r3, #32]
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	f280 8092 	bge.w	800d7d0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	db04      	blt.n	800d6bc <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x4c>
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	f2c0 808a 	blt.w	800d7d0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
    if ( interval==0xffffffff ) {
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6c2:	d10e      	bne.n	800d6e2 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x72>
      interval=Devices[i].HeartbeatScheduler.GetPeriod();
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	69da      	ldr	r2, [r3, #28]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d6ce:	fb01 f303 	mul.w	r3, r1, r3
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fd fe01 	bl	800b2e0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d6de:	60b8      	str	r0, [r7, #8]
 800d6e0:	e006      	b.n	800d6f0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
    } else if (interval==0xfffffffe) { // restore default
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f113 0f02 	cmn.w	r3, #2
 800d6e8:	d102      	bne.n	800d6f0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
      interval=DefaultHeartbeatInterval;
 800d6ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d6ee:	60bb      	str	r3, [r7, #8]
    }
    if ( offset==0xffffffff ) offset=Devices[i].HeartbeatScheduler.GetOffset();
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6f6:	d10d      	bne.n	800d714 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xa4>
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	69da      	ldr	r2, [r3, #28]
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d702:	fb01 f303 	mul.w	r3, r1, r3
 800d706:	4413      	add	r3, r2
 800d708:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fd fddc 	bl	800b2ca <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 800d712:	6078      	str	r0, [r7, #4]

    if ( interval==0 ) { // This is for test purposes
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10d      	bne.n	800d736 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xc6>
      Devices[i].HeartbeatScheduler.Disable();
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	69da      	ldr	r2, [r3, #28]
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d724:	fb01 f303 	mul.w	r3, r1, r3
 800d728:	4413      	add	r3, r2
 800d72a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f3 fddb 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
 800d734:	e047      	b.n	800d7c6 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
    } else {
      if ( interval>MaxHeartbeatInterval ) interval=MaxHeartbeatInterval;
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	4a27      	ldr	r2, [pc, #156]	; (800d7d8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d901      	bls.n	800d742 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xd2>
 800d73e:	4b26      	ldr	r3, [pc, #152]	; (800d7d8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 800d740:	60bb      	str	r3, [r7, #8]
      if ( interval<1000 ) interval=1000;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d748:	d202      	bcs.n	800d750 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xe0>
 800d74a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d74e:	60bb      	str	r3, [r7, #8]

      bool changed=( Devices[i].HeartbeatScheduler.GetPeriod()!=interval || Devices[i].HeartbeatScheduler.GetOffset()!=offset ); 
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	69da      	ldr	r2, [r3, #28]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d75a:	fb01 f303 	mul.w	r3, r1, r3
 800d75e:	4413      	add	r3, r2
 800d760:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd fdbb 	bl	800b2e0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d76a:	4602      	mov	r2, r0
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	4293      	cmp	r3, r2
 800d770:	d110      	bne.n	800d794 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x124>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	69da      	ldr	r2, [r3, #28]
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d77c:	fb01 f303 	mul.w	r3, r1, r3
 800d780:	4413      	add	r3, r2
 800d782:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d786:	4618      	mov	r0, r3
 800d788:	f7fd fd9f 	bl	800b2ca <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 800d78c:	4602      	mov	r2, r0
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4293      	cmp	r3, r2
 800d792:	d001      	beq.n	800d798 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x128>
 800d794:	2301      	movs	r3, #1
 800d796:	e000      	b.n	800d79a <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x12a>
 800d798:	2300      	movs	r3, #0
 800d79a:	74fb      	strb	r3, [r7, #19]
      if ( changed ) {
 800d79c:	7cfb      	ldrb	r3, [r7, #19]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d011      	beq.n	800d7c6 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
        Devices[i].HeartbeatScheduler.SetPeriodAndOffset(interval,offset);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	69da      	ldr	r2, [r3, #28]
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d7ac:	fb01 f303 	mul.w	r3, r1, r3
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	68b9      	ldr	r1, [r7, #8]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fd fd6b 	bl	800b296 <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>
        DeviceInformationChanged=true;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	769a      	strb	r2, [r3, #26]
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	617b      	str	r3, [r7, #20]
 800d7cc:	e768      	b.n	800d6a0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x30>
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 800d7ce:	bf00      	nop
      }
    }
  }
}
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	0009ffd8 	.word	0x0009ffd8

0800d7dc <_ZN9tNMEA200013SendHeartbeatEi>:
void tNMEA2000::SetHeartbeatInterval(unsigned long interval, bool /*SetAsDefault*/, int iDev) {
  SetHeartbeatIntervalAndOffset(interval,0xffffffff,iDev);
}

//*****************************************************************************
void tNMEA2000::SendHeartbeat(int iDev) {
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b0c4      	sub	sp, #272	; 0x110
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7ea:	6018      	str	r0, [r3, #0]
 800d7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7f4:	6019      	str	r1, [r3, #0]
  if ( !IsValidDevice(iDev) ) return;
 800d7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7fa:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800d7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d806:	6811      	ldr	r1, [r2, #0]
 800d808:	6818      	ldr	r0, [r3, #0]
 800d80a:	f7fe f872 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800d80e:	4603      	mov	r3, r0
 800d810:	f083 0301 	eor.w	r3, r3, #1
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d133      	bne.n	800d882 <_ZN9tNMEA200013SendHeartbeatEi+0xa6>
  tN2kMsg N2kMsg;
 800d81a:	f107 000c 	add.w	r0, r7, #12
 800d81e:	2300      	movs	r3, #0
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	2300      	movs	r3, #0
 800d824:	2206      	movs	r2, #6
 800d826:	210f      	movs	r1, #15
 800d828:	f7fc fb7a 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
  SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),0xff);
 800d82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	69da      	ldr	r2, [r3, #28]
 800d838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d846:	fb01 f303 	mul.w	r3, r1, r3
 800d84a:	4413      	add	r3, r2
 800d84c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d850:	4618      	mov	r0, r3
 800d852:	f7fd fd45 	bl	800b2e0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d856:	4601      	mov	r1, r0
 800d858:	f107 030c 	add.w	r3, r7, #12
 800d85c:	22ff      	movs	r2, #255	; 0xff
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe f95b 	bl	800bb1a <_Z12SetHeartbeatR7tN2kMsgmh>
  SendMsg(N2kMsg,iDev);
 800d864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d868:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800d86c:	f107 010c 	add.w	r1, r7, #12
 800d870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d878:	6812      	ldr	r2, [r2, #0]
 800d87a:	6818      	ldr	r0, [r3, #0]
 800d87c:	f000 f996 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d880:	e000      	b.n	800d884 <_ZN9tNMEA200013SendHeartbeatEi+0xa8>
  if ( !IsValidDevice(iDev) ) return;
 800d882:	bf00      	nop
}
 800d884:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <_ZN9tNMEA200013SendHeartbeatEb>:

//*****************************************************************************
void tNMEA2000::SendHeartbeat(bool force) {
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b0c4      	sub	sp, #272	; 0x110
 800d890:	af02      	add	r7, sp, #8
 800d892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d89a:	6018      	str	r0, [r3, #0]
 800d89c:	460a      	mov	r2, r1
 800d89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a2:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d8a6:	701a      	strb	r2, [r3, #0]
  if ( !IsActiveNode() ) return;
 800d8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8b0:	6818      	ldr	r0, [r3, #0]
 800d8b2:	f7fe f80a 	bl	800b8ca <_ZN9tNMEA200012IsActiveNodeEv>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f083 0301 	eor.w	r3, r3, #1
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f040 80da 	bne.w	800da78 <_ZN9tNMEA200013SendHeartbeatEb+0x1ec>

  for (int iDev=0; iDev<DeviceCount; iDev++) {
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	f280 80cd 	bge.w	800da7a <_ZN9tNMEA200013SendHeartbeatEb+0x1ee>
    if ( !IsAddressClaimStarted(iDev) ) {
 800d8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8e8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800d8ec:	6818      	ldr	r0, [r3, #0]
 800d8ee:	f003 fabe 	bl	8010e6e <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	f083 0301 	eor.w	r3, r3, #1
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f000 80b6 	beq.w	800da6c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
      if ( force || Devices[iDev].HeartbeatScheduler.IsTime() ) {
 800d900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d904:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d114      	bne.n	800d938 <_ZN9tNMEA200013SendHeartbeatEb+0xac>
 800d90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	69da      	ldr	r2, [r3, #28]
 800d91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d91e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d922:	fb01 f303 	mul.w	r3, r1, r3
 800d926:	4413      	add	r3, r2
 800d928:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f3 fcec 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <_ZN9tNMEA200013SendHeartbeatEb+0xb0>
 800d938:	2301      	movs	r3, #1
 800d93a:	e000      	b.n	800d93e <_ZN9tNMEA200013SendHeartbeatEb+0xb2>
 800d93c:	2300      	movs	r3, #0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 8094 	beq.w	800da6c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
        Devices[iDev].HeartbeatScheduler.UpdateNextTime();
 800d944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	69da      	ldr	r2, [r3, #28]
 800d950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d954:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d958:	fb01 f303 	mul.w	r3, r1, r3
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d962:	4618      	mov	r0, r3
 800d964:	f7f3 fce4 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
        tN2kMsg N2kMsg;
 800d968:	f107 0008 	add.w	r0, r7, #8
 800d96c:	2300      	movs	r3, #0
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	2300      	movs	r3, #0
 800d972:	2206      	movs	r2, #6
 800d974:	210f      	movs	r1, #15
 800d976:	f7fc fad3 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
        SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),force?0xff:Devices[iDev].HeartbeatSequence);
 800d97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d97e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	69da      	ldr	r2, [r3, #28]
 800d986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d98a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d98e:	fb01 f303 	mul.w	r3, r1, r3
 800d992:	4413      	add	r3, r2
 800d994:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fd fca1 	bl	800b2e0 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d99e:	4601      	mov	r1, r0
 800d9a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9a4:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <_ZN9tNMEA200013SendHeartbeatEb+0x126>
 800d9ae:	23ff      	movs	r3, #255	; 0xff
 800d9b0:	e00e      	b.n	800d9d0 <_ZN9tNMEA200013SendHeartbeatEb+0x144>
 800d9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	69da      	ldr	r2, [r3, #28]
 800d9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9c2:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800d9c6:	fb00 f303 	mul.w	r3, r0, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d9d0:	f107 0008 	add.w	r0, r7, #8
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	f7fe f8a0 	bl	800bb1a <_Z12SetHeartbeatR7tN2kMsgmh>
        SendMsg(N2kMsg,iDev);
 800d9da:	f107 0108 	add.w	r1, r7, #8
 800d9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	f000 f8de 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
        if ( !force ) {
 800d9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9f4:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	f083 0301 	eor.w	r3, r3, #1
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d033      	beq.n	800da6c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
          Devices[iDev].HeartbeatSequence++;
 800da04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	69da      	ldr	r2, [r3, #28]
 800da10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da14:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800da18:	fb01 f303 	mul.w	r3, r1, r3
 800da1c:	4413      	add	r3, r2
 800da1e:	f893 2158 	ldrb.w	r2, [r3, #344]	; 0x158
 800da22:	3201      	adds	r2, #1
 800da24:	b2d2      	uxtb	r2, r2
 800da26:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
          if ( Devices[iDev].HeartbeatSequence>252 ) Devices[iDev].HeartbeatSequence=0;
 800da2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	69da      	ldr	r2, [r3, #28]
 800da36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da3a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800da3e:	fb01 f303 	mul.w	r3, r1, r3
 800da42:	4413      	add	r3, r2
 800da44:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800da48:	2bfc      	cmp	r3, #252	; 0xfc
 800da4a:	d90f      	bls.n	800da6c <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
 800da4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	69da      	ldr	r2, [r3, #28]
 800da58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da5c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800da60:	fb01 f303 	mul.w	r3, r1, r3
 800da64:	4413      	add	r3, r2
 800da66:	2200      	movs	r2, #0
 800da68:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  for (int iDev=0; iDev<DeviceCount; iDev++) {
 800da6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da70:	3301      	adds	r3, #1
 800da72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800da76:	e728      	b.n	800d8ca <_ZN9tNMEA200013SendHeartbeatEb+0x3e>
  if ( !IsActiveNode() ) return;
 800da78:	bf00      	nop
        }
      }
    }
  }
}
 800da7a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>:
#endif

//*****************************************************************************
tNMEA2000::tCANSendFrame *tNMEA2000::GetNextFreeCANSendFrame() {
 800da82:	b480      	push	{r7}
 800da84:	b085      	sub	sp, #20
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  if (CANSendFrameBuf==0) return 0;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x14>
 800da92:	2300      	movs	r3, #0
 800da94:	e01f      	b.n	800dad6 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>

  uint16_t temp = (CANSendFrameBufferWrite + 1) % MaxCANSendFrames;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da9c:	3301      	adds	r3, #1
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800daa4:	fb93 f1f2 	sdiv	r1, r3, r2
 800daa8:	fb01 f202 	mul.w	r2, r1, r2
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	81fb      	strh	r3, [r7, #14]

  if (temp != CANSendFrameBufferRead) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800dab6:	89fa      	ldrh	r2, [r7, #14]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d00b      	beq.n	800dad4 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x52>
    CANSendFrameBufferWrite = temp;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	89fa      	ldrh	r2, [r7, #14]
 800dac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    return &(CANSendFrameBuf[CANSendFrameBufferWrite]);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	4413      	add	r3, r2
 800dad2:	e000      	b.n	800dad6 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>
  } else {
    return 0;
 800dad4:	2300      	movs	r3, #0
  }
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	bc80      	pop	{r7}
 800dade:	4770      	bx	lr

0800dae0 <_ZN9tNMEA200022SendPendingInformationEv>:

//*****************************************************************************
void tNMEA2000::SendPendingInformation() {
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++ ) {
 800dae8:	2300      	movs	r3, #0
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a1b      	ldr	r3, [r3, #32]
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	da56      	bge.n	800dba4 <_ZN9tNMEA200022SendPendingInformationEv+0xc4>
    if (  Devices[i].HasPendingInformation ) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	69da      	ldr	r2, [r3, #28]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800db00:	fb01 f303 	mul.w	r3, r1, r3
 800db04:	4413      	add	r3, r2
 800db06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d046      	beq.n	800db9c <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
      #if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      SendPendingTPMessage(i);
 800db0e:	68f9      	ldr	r1, [r7, #12]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 fe2f 	bl	800f774 <_ZN9tNMEA200020SendPendingTPMessageEi>
      #endif
      if ( Devices[i].QueryPendingIsoAddressClaim() ) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	69da      	ldr	r2, [r3, #28]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800db20:	fb01 f303 	mul.w	r3, r1, r3
 800db24:	4413      	add	r3, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd fd85 	bl	800b636 <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d010      	beq.n	800db54 <_ZN9tNMEA200022SendPendingInformationEv+0x74>
        SendIsoAddressClaim(0xff,i);
 800db32:	2300      	movs	r3, #0
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	21ff      	movs	r1, #255	; 0xff
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f002 f90c 	bl	800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        Devices[i].ClearPendingIsoAddressClaim();
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	69da      	ldr	r2, [r3, #28]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800db48:	fb01 f303 	mul.w	r3, r1, r3
 800db4c:	4413      	add	r3, r2
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fd fd7f 	bl	800b652 <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>
      }
      if ( Devices[i].QueryPendingProductInformation() ) SendProductInformation(i);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	69da      	ldr	r2, [r3, #28]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800db5e:	fb01 f303 	mul.w	r3, r1, r3
 800db62:	4413      	add	r3, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f7fd fdab 	bl	800b6c0 <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d003      	beq.n	800db78 <_ZN9tNMEA200022SendPendingInformationEv+0x98>
 800db70:	68f9      	ldr	r1, [r7, #12]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f002 fca6 	bl	80104c4 <_ZN9tNMEA200022SendProductInformationEi>
      if ( Devices[i].QueryPendingConfigurationInformation() ) SendConfigurationInformation(i);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	69da      	ldr	r2, [r3, #28]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800db82:	fb01 f303 	mul.w	r3, r1, r3
 800db86:	4413      	add	r3, r2
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fd fdd2 	bl	800b732 <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
 800db94:	68f9      	ldr	r1, [r7, #12]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f002 fe2b 	bl	80107f2 <_ZN9tNMEA200028SendConfigurationInformationEi>
  for (int i=0; i<DeviceCount; i++ ) {
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	3301      	adds	r3, #1
 800dba0:	60fb      	str	r3, [r7, #12]
 800dba2:	e7a3      	b.n	800daec <_ZN9tNMEA200022SendPendingInformationEv+0xc>
    }
  }
}
 800dba4:	bf00      	nop
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>:

//*****************************************************************************
// Sends message to N2k bus
//
bool tNMEA2000::SendMsg(const tN2kMsg &N2kMsg, int DeviceIndex) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b090      	sub	sp, #64	; 0x40
 800dbb0:	af02      	add	r7, sp, #8
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
  if ( dbMode==dm_None ) {
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	791b      	ldrb	r3, [r3, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d117      	bne.n	800dbf0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
    if ( OpenState!=os_Open ) {
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	7e1b      	ldrb	r3, [r3, #24]
 800dbc4:	2b03      	cmp	r3, #3
 800dbc6:	d013      	beq.n	800dbf0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
      if ( !(Open() && OpenState==os_Open) ) return false;  // Can not do much
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f7ff fae1 	bl	800d190 <_ZN9tNMEA20004OpenEv>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f083 0301 	eor.w	r3, r3, #1
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d103      	bne.n	800dbe2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x36>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	7e1b      	ldrb	r3, [r3, #24]
 800dbde:	2b03      	cmp	r3, #3
 800dbe0:	d001      	beq.n	800dbe6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d001      	beq.n	800dbf0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
 800dbec:	2300      	movs	r3, #0
 800dbee:	e1af      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>
    }
  }

  bool result=false;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if ( DeviceIndex>=DeviceCount) return result;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	db02      	blt.n	800dc06 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x5a>
 800dc00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc04:	e1a4      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>
  N2kMsg.CheckDestination();
 800dc06:	68b8      	ldr	r0, [r7, #8]
 800dc08:	f7fd fad0 	bl	800b1ac <_ZNK7tN2kMsg16CheckDestinationEv>
  if (DeviceIndex>=0) { N2kMsg.ForceSource(Devices[DeviceIndex].N2kSource); } else { DeviceIndex=0; }
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	db0d      	blt.n	800dc2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x82>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	69da      	ldr	r2, [r3, #28]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800dc1c:	fb01 f303 	mul.w	r3, r1, r3
 800dc20:	4413      	add	r3, r2
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	4619      	mov	r1, r3
 800dc26:	68b8      	ldr	r0, [r7, #8]
 800dc28:	f7fd fab2 	bl	800b190 <_ZNK7tN2kMsg11ForceSourceEh>
 800dc2c:	e001      	b.n	800dc32 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x86>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	607b      	str	r3, [r7, #4]

  if ( N2kMsg.Source>N2kMaxCanBusAddress && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false; // CAN bus address range is 0-251. Anyway allow ISO address claim mgs.
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	7b1b      	ldrb	r3, [r3, #12]
 800dc36:	2bfb      	cmp	r3, #251	; 0xfb
 800dc38:	d906      	bls.n	800dc48 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9c>
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800dc42:	d001      	beq.n	800dc48 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9c>
 800dc44:	2300      	movs	r3, #0
 800dc46:	e183      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>

  unsigned long canId=N2ktoCanID(N2kMsg.Priority,N2kMsg.PGN,N2kMsg.Source, N2kMsg.Destination);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	7918      	ldrb	r0, [r3, #4]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	6899      	ldr	r1, [r3, #8]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	7b1b      	ldrb	r3, [r3, #12]
 800dc54:	461a      	mov	r2, r3
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	7b5b      	ldrb	r3, [r3, #13]
 800dc5a:	f7ff fc2f 	bl	800d4bc <_Z10N2ktoCanIDhmmh>
 800dc5e:	6238      	str	r0, [r7, #32]

  if ( canId==0 ) { // PGN validity - N2ktoCanID returns 0 for invalid PGN
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xbe>
//    if (ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("Invalid PGN ")); ForwardStream->println(N2kMsg.PGN); }
    return false;
 800dc66:	2300      	movs	r3, #0
 800dc68:	e172      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>
  }

  if (N2kMode==N2km_ListenOnly) return false; // Do not send anything on listen only mode
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	795b      	ldrb	r3, [r3, #5]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xca>
 800dc72:	2300      	movs	r3, #0
 800dc74:	e16c      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>

  if (N2kMsg.PGN==0) return false;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xd6>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e166      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>

  switch (dbMode) {
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	791b      	ldrb	r3, [r3, #4]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	f000 8155 	beq.w	800df36 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x38a>
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	f300 815d 	bgt.w	800df4c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xf2>
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	f000 8142 	beq.w	800df20 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x374>
 800dc9c:	e156      	b.n	800df4c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
    case dm_None:
      N2kMsgDbgStart("Send PGN:"); N2kMsgDbgln(N2kMsg.PGN);
      N2kMsgDbgStart(" - can ID:"); N2kMsgDbgln(canId);
      if ( IsAddressClaimStarted(DeviceIndex) && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false;
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f003 f8e4 	bl	8010e6e <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d006      	beq.n	800dcba <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x10e>
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800dcb4:	d001      	beq.n	800dcba <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x10e>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e000      	b.n	800dcbc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x118>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	e145      	b.n	800df50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a4>

      if (N2kMsg.DataLen<=8 && !IsFastPacket(N2kMsg) ) { // We can send single frame
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	691b      	ldr	r3, [r3, #16]
 800dcc8:	2b08      	cmp	r3, #8
 800dcca:	dc0b      	bgt.n	800dce4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x138>
 800dccc:	68b9      	ldr	r1, [r7, #8]
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 f9b8 	bl	800e044 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	f083 0301 	eor.w	r3, r3, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x138>
 800dce0:	2301      	movs	r3, #1
 800dce2:	e000      	b.n	800dce6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 800dce4:	2300      	movs	r3, #0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d034      	beq.n	800dd54 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1a8>
          DbgPrintBuf(N2kMsg.DataLen, N2kMsg.Data,true);
          result=SendFrame(canId, N2kMsg.DataLen, N2kMsg.Data,false);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	3314      	adds	r3, #20
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	9100      	str	r1, [sp, #0]
 800dcf8:	6a39      	ldr	r1, [r7, #32]
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f7ff fc5d 	bl	800d5ba <_ZN9tNMEA20009SendFrameEmhPKhb>
 800dd00:	4603      	mov	r3, r0
 800dd02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN); ForwardStream->println(F(" send failed")); }
 800dd06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd0a:	f083 0301 	eor.w	r3, r3, #1
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 80fa 	beq.w	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f000 80f5 	beq.w	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	799b      	ldrb	r3, [r3, #6]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	f040 80f0 	bne.w	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	498a      	ldr	r1, [pc, #552]	; (800df58 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3ac>)
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd f94a 	bl	800afca <_ZN9N2kStream5printEPKc>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	68d8      	ldr	r0, [r3, #12]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	220a      	movs	r2, #10
 800dd40:	4619      	mov	r1, r3
 800dd42:	f7fd f95f 	bl	800b004 <_ZN9N2kStream5printEih>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	4984      	ldr	r1, [pc, #528]	; (800df5c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fd f999 	bl	800b084 <_ZN9N2kStream7printlnEPKc>
 800dd52:	e0da      	b.n	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
          N2kPrintFreeMemory("SendMsg, single frame");
      } else { // Send it as fast packet in multiple frames
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
        if ( N2kMsg.IsTPMessage() ) {
 800dd54:	68b8      	ldr	r0, [r7, #8]
 800dd56:	f7fa fa51 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d008      	beq.n	800dd72 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1c6>
          result=StartSendTPMessage(N2kMsg,DeviceIndex);
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f001 fc60 	bl	800f62a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd70:	e0cb      	b.n	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
        } else
#endif
        {
          unsigned char temp[8]; // {0,0,0,0,0,0,0,0};
          int cur=0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	633b      	str	r3, [r7, #48]	; 0x30
          int frames=(N2kMsg.DataLen>6 ? (N2kMsg.DataLen-6-1)/7+1+1 : 1 );
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b06      	cmp	r3, #6
 800dd7c:	dd0b      	ble.n	800dd96 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ea>
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	3b07      	subs	r3, #7
 800dd84:	4a76      	ldr	r2, [pc, #472]	; (800df60 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 800dd86:	fb82 1203 	smull	r1, r2, r2, r3
 800dd8a:	441a      	add	r2, r3
 800dd8c:	1092      	asrs	r2, r2, #2
 800dd8e:	17db      	asrs	r3, r3, #31
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	3302      	adds	r3, #2
 800dd94:	e000      	b.n	800dd98 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ec>
 800dd96:	2301      	movs	r3, #1
 800dd98:	61fb      	str	r3, [r7, #28]
          int Order=GetSequenceCounter(N2kMsg.PGN,DeviceIndex)<<5;
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	4619      	mov	r1, r3
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f7fe fca6 	bl	800c6f4 <_ZN9tNMEA200018GetSequenceCounterEmi>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	015b      	lsls	r3, r3, #5
 800ddac:	61bb      	str	r3, [r7, #24]
          result=true;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          for (int i = 0; i<frames && result; i++) {
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	f280 80a4 	bge.w	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
 800ddc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddc6:	f083 0301 	eor.w	r3, r3, #1
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f040 809c 	bne.w	800df0a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x35e>
              temp[0] = i|Order; //frame counter
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	b25a      	sxtb	r2, r3
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	b25b      	sxtb	r3, r3
 800ddda:	4313      	orrs	r3, r2
 800dddc:	b25b      	sxtb	r3, r3
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	743b      	strb	r3, [r7, #16]
              if (i==0) {
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d11a      	bne.n	800de1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x272>
                  temp[1] = N2kMsg.DataLen; //total bytes in fast packet
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	747b      	strb	r3, [r7, #17]
                  //send the first 6 bytes
                  for (int j = 2; j<8; j++) {
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	2b07      	cmp	r3, #7
 800ddf8:	dc3a      	bgt.n	800de70 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c4>
                       temp[j]=N2kMsg.Data[cur];
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	4413      	add	r3, r2
 800de00:	3314      	adds	r3, #20
 800de02:	7819      	ldrb	r1, [r3, #0]
 800de04:	f107 0210 	add.w	r2, r7, #16
 800de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0a:	4413      	add	r3, r2
 800de0c:	460a      	mov	r2, r1
 800de0e:	701a      	strb	r2, [r3, #0]
                       cur++;
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	3301      	adds	r3, #1
 800de14:	633b      	str	r3, [r7, #48]	; 0x30
                  for (int j = 2; j<8; j++) {
 800de16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de18:	3301      	adds	r3, #1
 800de1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800de1c:	e7ea      	b.n	800ddf4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x248>
                   }
                  N2kPrintFreeMemory("SendMsg, fastpacket");
              } else {
                   int j=1;
 800de1e:	2301      	movs	r3, #1
 800de20:	627b      	str	r3, [r7, #36]	; 0x24
                   //send the next 7 data bytes
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	2b07      	cmp	r3, #7
 800de26:	dc16      	bgt.n	800de56 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2aa>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de2e:	429a      	cmp	r2, r3
 800de30:	da11      	bge.n	800de56 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2aa>
                       temp[j]=N2kMsg.Data[cur];
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de36:	4413      	add	r3, r2
 800de38:	3314      	adds	r3, #20
 800de3a:	7819      	ldrb	r1, [r3, #0]
 800de3c:	f107 0210 	add.w	r2, r7, #16
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	4413      	add	r3, r2
 800de44:	460a      	mov	r2, r1
 800de46:	701a      	strb	r2, [r3, #0]
                       cur++;
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	3301      	adds	r3, #1
 800de4c:	633b      	str	r3, [r7, #48]	; 0x30
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	3301      	adds	r3, #1
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
 800de54:	e7e5      	b.n	800de22 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x276>
                   }
                   for (; j<8; j++) {
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	2b07      	cmp	r3, #7
 800de5a:	dc09      	bgt.n	800de70 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c4>
                       temp[j]=0xff;
 800de5c:	f107 0210 	add.w	r2, r7, #16
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	4413      	add	r3, r2
 800de64:	22ff      	movs	r2, #255	; 0xff
 800de66:	701a      	strb	r2, [r3, #0]
                   for (; j<8; j++) {
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	3301      	adds	r3, #1
 800de6c:	627b      	str	r3, [r7, #36]	; 0x24
 800de6e:	e7f2      	b.n	800de56 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2aa>
                   }
              }

              DbgPrintBuf(8,temp,true);
              result=SendFrame(canId, 8, temp, true);
 800de70:	f107 0310 	add.w	r3, r7, #16
 800de74:	2201      	movs	r2, #1
 800de76:	9200      	str	r2, [sp, #0]
 800de78:	2208      	movs	r2, #8
 800de7a:	6a39      	ldr	r1, [r7, #32]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff fb9c 	bl	800d5ba <_ZN9tNMEA20009SendFrameEmhPKhb>
 800de82:	4603      	mov	r3, r0
 800de84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
              if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) {
 800de88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de8c:	f083 0301 	eor.w	r3, r3, #1
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d035      	beq.n	800df02 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x356>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d031      	beq.n	800df02 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x356>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	799b      	ldrb	r3, [r3, #6]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d12d      	bne.n	800df02 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x356>
                ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	492b      	ldr	r1, [pc, #172]	; (800df58 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3ac>)
 800deac:	4618      	mov	r0, r3
 800deae:	f7fd f88c 	bl	800afca <_ZN9N2kStream5printEPKc>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	68d8      	ldr	r0, [r3, #12]
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	689b      	ldr	r3, [r3, #8]
 800deba:	220a      	movs	r2, #10
 800debc:	4619      	mov	r1, r3
 800debe:	f7fd f8a1 	bl	800b004 <_ZN9N2kStream5printEih>
                ForwardStream->print(F(", frame:")); ForwardStream->print(i); ForwardStream->print(F("/")); ForwardStream->print(frames);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	4927      	ldr	r1, [pc, #156]	; (800df64 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b8>)
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd f87e 	bl	800afca <_ZN9N2kStream5printEPKc>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	220a      	movs	r2, #10
 800ded4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fd f894 	bl	800b004 <_ZN9N2kStream5printEih>
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	4921      	ldr	r1, [pc, #132]	; (800df68 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3bc>)
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd f871 	bl	800afca <_ZN9N2kStream5printEPKc>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	220a      	movs	r2, #10
 800deee:	69f9      	ldr	r1, [r7, #28]
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd f887 	bl	800b004 <_ZN9N2kStream5printEih>
                ForwardStream->println(F(" send failed"));
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4918      	ldr	r1, [pc, #96]	; (800df5c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 800defc:	4618      	mov	r0, r3
 800defe:	f7fd f8c1 	bl	800b084 <_ZN9N2kStream7printlnEPKc>
          for (int i = 0; i<frames && result; i++) {
 800df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df04:	3301      	adds	r3, #1
 800df06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df08:	e756      	b.n	800ddb8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x20c>
              }
          }
        }
      };
      if ( ForwardOwnMessages() ) ForwardMessage(N2kMsg);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7fd fcb9 	bl	800b882 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d019      	beq.n	800df4a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x39e>
 800df16:	68b9      	ldr	r1, [r7, #8]
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f001 feb5 	bl	800fc88 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      break;
 800df1e:	e014      	b.n	800df4a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x39e>
    case dm_ClearText:
      result=true;
 800df20:	2301      	movs	r3, #1
 800df22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.Print(ForwardStream);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	4619      	mov	r1, r3
 800df2e:	68b8      	ldr	r0, [r7, #8]
 800df30:	f7fc fcda 	bl	800a8e8 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 800df34:	e00a      	b.n	800df4c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
    case dm_Actisense:
      result=true;
 800df36:	2301      	movs	r3, #1
 800df38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.SendInActisenseFormat(ForwardStream);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	4619      	mov	r1, r3
 800df42:	68b8      	ldr	r0, [r7, #8]
 800df44:	f7fc fd84 	bl	800aa50 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 800df48:	e000      	b.n	800df4c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
      break;
 800df4a:	bf00      	nop
  }

  return result;
 800df4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800df50:	4618      	mov	r0, r3
 800df52:	3738      	adds	r7, #56	; 0x38
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	08016f90 	.word	0x08016f90
 800df5c:	08016f98 	.word	0x08016f98
 800df60:	92492493 	.word	0x92492493
 800df64:	08016fa8 	.word	0x08016fa8
 800df68:	08016fb4 	.word	0x08016fb4

0800df6c <_ZN9tNMEA200015IsFastPacketPGNEm>:
void tNMEA2000::SetDebugMode(tDebugMode _dbMode) {
  dbMode=_dbMode;
}

//*****************************************************************************
bool tNMEA2000::IsFastPacketPGN(unsigned long PGN) {
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800df76:	6838      	ldr	r0, [r7, #0]
 800df78:	f7fd fe80 	bl	800bc7c <_Z25IsFastPacketSystemMessagem>
 800df7c:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d115      	bne.n	800dfae <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800df82:	6838      	ldr	r0, [r7, #0]
 800df84:	f7fd ff5e 	bl	800be44 <_Z28IsMandatoryFastPacketMessagem>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10f      	bne.n	800dfae <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800df92:	2b00      	cmp	r3, #0
 800df94:	d105      	bne.n	800dfa2 <_ZN9tNMEA200015IsFastPacketPGNEm+0x36>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800df96:	6838      	ldr	r0, [r7, #0]
 800df98:	f7fd ff74 	bl	800be84 <_Z26IsDefaultFastPacketMessagem>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d105      	bne.n	800dfae <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f7fe f8ca 	bl	800c13c <_Z30IsProprietaryFastPacketMessagem>
 800dfa8:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <_ZN9tNMEA200015IsFastPacketPGNEm+0x46>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <_ZN9tNMEA200015IsFastPacketPGNEm+0x48>
 800dfb2:	2300      	movs	r3, #0
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <_ZN9tNMEA200015IsFastPacketPGNEm+0x50>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e03f      	b.n	800e03c <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>

  int i;

    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	72fb      	strb	r3, [r7, #11]
 800dfc0:	7afb      	ldrb	r3, [r7, #11]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d839      	bhi.n	800e03a <_ZN9tNMEA200015IsFastPacketPGNEm+0xce>
      if (FastPacketMessages[igroup]!=0) {
 800dfc6:	7afb      	ldrb	r3, [r7, #11]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	330e      	adds	r3, #14
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d02d      	beq.n	800e032 <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60fb      	str	r3, [r7, #12]
 800dfda:	7afb      	ldrb	r3, [r7, #11]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	330e      	adds	r3, #14
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4413      	add	r3, r2
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d00f      	beq.n	800e014 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 800dff4:	7afb      	ldrb	r3, [r7, #11]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	330e      	adds	r3, #14
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3301      	adds	r3, #1
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e7e2      	b.n	800dfda <_ZN9tNMEA200015IsFastPacketPGNEm+0x6e>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 800e014:	7afb      	ldrb	r3, [r7, #11]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	330e      	adds	r3, #14
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d101      	bne.n	800e032 <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
         return true;
 800e02e:	2301      	movs	r3, #1
 800e030:	e004      	b.n	800e03c <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800e032:	7afb      	ldrb	r3, [r7, #11]
 800e034:	3301      	adds	r3, #1
 800e036:	72fb      	strb	r3, [r7, #11]
 800e038:	e7c2      	b.n	800dfc0 <_ZN9tNMEA200015IsFastPacketPGNEm+0x54>
        }
      }
    }

    return false;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>:

//*****************************************************************************
bool tNMEA2000::IsFastPacket(const tN2kMsg &N2kMsg) {
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  if (N2kMsg.Priority>=0x80) return false; // Special handling for force to send message as single frame.
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	791b      	ldrb	r3, [r3, #4]
 800e052:	b25b      	sxtb	r3, r3
 800e054:	2b00      	cmp	r3, #0
 800e056:	da01      	bge.n	800e05c <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x18>
 800e058:	2300      	movs	r3, #0
 800e05a:	e007      	b.n	800e06c <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x28>

  return IsFastPacketPGN(N2kMsg.PGN);
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	4619      	mov	r1, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff ff82 	bl	800df6c <_ZN9tNMEA200015IsFastPacketPGNEm>
 800e068:	4603      	mov	r3, r0
 800e06a:	bf00      	nop
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>:

//*****************************************************************************
bool tNMEA2000::CheckKnownMessage(unsigned long PGN, bool &SystemMessage, bool &FastPacket) {
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	603b      	str	r3, [r7, #0]
  int i;
//    return true;
    FastPacket=false;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2200      	movs	r2, #0
 800e086:	701a      	strb	r2, [r3, #0]
    SystemMessage=false;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	701a      	strb	r2, [r3, #0]
    if ( PGN==0 ) { return false; }  // Unknown
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x24>
 800e094:	2300      	movs	r3, #0
 800e096:	e0ce      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check other messages
    if ( SingleFrameMessages[0]==0 && IsDefaultSingleFrameMessage(PGN) ) return true;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d107      	bne.n	800e0b0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 800e0a0:	68b8      	ldr	r0, [r7, #8]
 800e0a2:	f7fd fe03 	bl	800bcac <_Z27IsDefaultSingleFrameMessagem>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e000      	b.n	800e0b2 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3e>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x46>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e0bd      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( (FastPacket=IsMandatoryFastPacketMessage(PGN)) ) return true;
 800e0ba:	68b8      	ldr	r0, [r7, #8]
 800e0bc:	f7fd fec2 	bl	800be44 <_Z28IsMandatoryFastPacketMessagem>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x60>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e0b0      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( FastPacketMessages[0]==0 && (FastPacket=IsDefaultFastPacketMessage(PGN))==true ) return true;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10c      	bne.n	800e0f6 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 800e0dc:	68b8      	ldr	r0, [r7, #8]
 800e0de:	f7fd fed1 	bl	800be84 <_Z26IsDefaultFastPacketMessagem>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	701a      	strb	r2, [r3, #0]
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d101      	bne.n	800e0f6 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e000      	b.n	800e0f8 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x84>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x8c>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e09a      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check system messages
    if ( IsSingleFrameSystemMessage(PGN) || (FastPacket=IsFastPacketSystemMessage(PGN))==true ) {
 800e100:	68b8      	ldr	r0, [r7, #8]
 800e102:	f7fd fd8f 	bl	800bc24 <_Z26IsSingleFrameSystemMessagem>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10a      	bne.n	800e122 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xae>
 800e10c:	68b8      	ldr	r0, [r7, #8]
 800e10e:	f7fd fdb5 	bl	800bc7c <_Z25IsFastPacketSystemMessagem>
 800e112:	4603      	mov	r3, r0
 800e114:	461a      	mov	r2, r3
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	701a      	strb	r2, [r3, #0]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d101      	bne.n	800e126 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb2>
 800e122:	2301      	movs	r3, #1
 800e124:	e000      	b.n	800e128 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb4>
 800e126:	2300      	movs	r3, #0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc2>
      SystemMessage=true;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	701a      	strb	r2, [r3, #0]
      return true;
 800e132:	2301      	movs	r3, #1
 800e134:	e07f      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    }

    // Check user defined messages
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800e136:	2300      	movs	r3, #0
 800e138:	74fb      	strb	r3, [r7, #19]
 800e13a:	7cfb      	ldrb	r3, [r7, #19]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d872      	bhi.n	800e226 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1b2>
      if (SingleFrameMessages[igroup]!=0) {
 800e140:	7cfb      	ldrb	r3, [r7, #19]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	330c      	adds	r3, #12
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4413      	add	r3, r2
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d02d      	beq.n	800e1ac <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
        for (i=0; pgm_read_dword(&SingleFrameMessages[igroup][i])!=PGN && pgm_read_dword(&SingleFrameMessages[igroup][i])!=0; i++);
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
 800e154:	7cfb      	ldrb	r3, [r7, #19]
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	330c      	adds	r3, #12
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d00f      	beq.n	800e18e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 800e16e:	7cfb      	ldrb	r3, [r7, #19]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	330c      	adds	r3, #12
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4413      	add	r3, r2
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d003      	beq.n	800e18e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	3301      	adds	r3, #1
 800e18a:	617b      	str	r3, [r7, #20]
 800e18c:	e7e2      	b.n	800e154 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xe0>
        if (pgm_read_dword(&SingleFrameMessages[igroup][i])==PGN) return true;
 800e18e:	7cfb      	ldrb	r3, [r7, #19]
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	330c      	adds	r3, #12
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d101      	bne.n	800e1ac <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e044      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
      }

      if (FastPacketMessages[igroup]!=0) {
 800e1ac:	7cfb      	ldrb	r3, [r7, #19]
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	330e      	adds	r3, #14
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d030      	beq.n	800e21e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 800e1bc:	2300      	movs	r3, #0
 800e1be:	617b      	str	r3, [r7, #20]
 800e1c0:	7cfb      	ldrb	r3, [r7, #19]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	330e      	adds	r3, #14
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d00f      	beq.n	800e1fa <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 800e1da:	7cfb      	ldrb	r3, [r7, #19]
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	330e      	adds	r3, #14
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4413      	add	r3, r2
 800e1e4:	685a      	ldr	r2, [r3, #4]
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	617b      	str	r3, [r7, #20]
 800e1f8:	e7e2      	b.n	800e1c0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x14c>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 800e1fa:	7cfb      	ldrb	r3, [r7, #19]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	330e      	adds	r3, #14
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	685a      	ldr	r2, [r3, #4]
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	429a      	cmp	r2, r3
 800e212:	d104      	bne.n	800e21e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
         FastPacket=true;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2201      	movs	r2, #1
 800e218:	701a      	strb	r2, [r3, #0]
         return true;
 800e21a:	2301      	movs	r3, #1
 800e21c:	e00b      	b.n	800e236 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800e21e:	7cfb      	ldrb	r3, [r7, #19]
 800e220:	3301      	adds	r3, #1
 800e222:	74fb      	strb	r3, [r7, #19]
 800e224:	e789      	b.n	800e13a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc6>
        }
      }
    }

    FastPacket=IsProprietaryFastPacketMessage(PGN);
 800e226:	68b8      	ldr	r0, [r7, #8]
 800e228:	f7fd ff88 	bl	800c13c <_Z30IsProprietaryFastPacketMessagem>
 800e22c:	4603      	mov	r3, r0
 800e22e:	461a      	mov	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	701a      	strb	r2, [r3, #0]
    
    return false;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>:
 * \param CANMsg  Reference to an CANMsg Object with the result
 * \param start   Startbyte inside the buffer
 * \param len     Length of the buffer
 * \param buf     Pointer to a buffer
 */
void CopyBufToCANMsg(tN2kCANMsg &CANMsg, unsigned char start, unsigned char len, unsigned char *buf) {
 800e23e:	b480      	push	{r7}
 800e240:	b087      	sub	sp, #28
 800e242:	af00      	add	r7, sp, #0
 800e244:	60f8      	str	r0, [r7, #12]
 800e246:	607b      	str	r3, [r7, #4]
 800e248:	460b      	mov	r3, r1
 800e24a:	72fb      	strb	r3, [r7, #11]
 800e24c:	4613      	mov	r3, r2
 800e24e:	72bb      	strb	r3, [r7, #10]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 800e250:	7afb      	ldrb	r3, [r7, #11]
 800e252:	617b      	str	r3, [r7, #20]
 800e254:	7abb      	ldrb	r3, [r7, #10]
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	429a      	cmp	r2, r3
 800e25a:	bfb4      	ite	lt
 800e25c:	2301      	movlt	r3, #1
 800e25e:	2300      	movge	r3, #0
 800e260:	b2da      	uxtb	r2, r3
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800e268:	2bde      	cmp	r3, #222	; 0xde
 800e26a:	bf94      	ite	ls
 800e26c:	2301      	movls	r3, #1
 800e26e:	2300      	movhi	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	4013      	ands	r3, r2
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d016      	beq.n	800e2a8 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x6a>
          CANMsg.N2kMsg.Data[CANMsg.CopiedLen]=buf[j];
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	4413      	add	r3, r2
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
 800e286:	4611      	mov	r1, r2
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	440b      	add	r3, r1
 800e28e:	751a      	strb	r2, [r3, #20]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	3301      	adds	r3, #1
 800e294:	617b      	str	r3, [r7, #20]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800e29c:	3301      	adds	r3, #1
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 800e2a6:	e7d5      	b.n	800e254 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x16>
        }
}
 800e2a8:	bf00      	nop
 800e2aa:	371c      	adds	r7, #28
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bc80      	pop	{r7}
 800e2b0:	4770      	bx	lr

0800e2b2 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, bool TPMsg, uint8_t &MsgIndex) {
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b088      	sub	sp, #32
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	60f8      	str	r0, [r7, #12]
 800e2ba:	60b9      	str	r1, [r7, #8]
 800e2bc:	4611      	mov	r1, r2
 800e2be:	461a      	mov	r2, r3
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	71fb      	strb	r3, [r7, #7]
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	71bb      	strb	r3, [r7, #6]
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, uint8_t &MsgIndex) {
#endif
  unsigned long OldestMsgTime,CurTime;
  int OldestIndex;

  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	f7fc ff09 	bl	800b0e4 <_Z9N2kMillisv>
 800e2d2:	61f8      	str	r0, [r7, #28]
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	617b      	str	r3, [r7, #20]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e2de:	61bb      	str	r3, [r7, #24]
       MsgIndex<MaxN2kCANMsgs &&
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d24f      	bcs.n	800e38e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	019b      	lsls	r3, r3, #6
 800e2fc:	440b      	add	r3, r1
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800e306:	f083 0301 	eor.w	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
       MsgIndex<MaxN2kCANMsgs &&
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d03e      	beq.n	800e38e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
         ( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	4619      	mov	r1, r3
 800e31a:	460b      	mov	r3, r1
 800e31c:	019b      	lsls	r3, r3, #6
 800e31e:	440b      	add	r3, r1
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	689b      	ldr	r3, [r3, #8]
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d12e      	bne.n	800e38a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	4619      	mov	r1, r3
 800e336:	460b      	mov	r3, r1
 800e338:	019b      	lsls	r3, r3, #6
 800e33a:	440b      	add	r3, r1
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	7b1b      	ldrb	r3, [r3, #12]
 800e342:	79fa      	ldrb	r2, [r7, #7]
 800e344:	429a      	cmp	r2, r3
 800e346:	d120      	bne.n	800e38a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	4619      	mov	r1, r3
 800e352:	460b      	mov	r3, r1
 800e354:	019b      	lsls	r3, r3, #6
 800e356:	440b      	add	r3, r1
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	7b5b      	ldrb	r3, [r3, #13]
 800e35e:	79ba      	ldrb	r2, [r7, #6]
 800e360:	429a      	cmp	r2, r3
 800e362:	d112      	bne.n	800e38a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
           && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()==TPMsg
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	4619      	mov	r1, r3
 800e36e:	460b      	mov	r3, r1
 800e370:	019b      	lsls	r3, r3, #6
 800e372:	440b      	add	r3, r1
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	4413      	add	r3, r2
 800e378:	4618      	mov	r0, r3
 800e37a:	f7f9 ff3f 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 800e37e:	4603      	mov	r3, r0
 800e380:	461a      	mov	r2, r3
 800e382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e386:	4293      	cmp	r3, r2
 800e388:	d001      	beq.n	800e38e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       MsgIndex<MaxN2kCANMsgs &&
 800e38a:	2301      	movs	r3, #1
 800e38c:	e000      	b.n	800e390 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xde>
 800e38e:	2300      	movs	r3, #0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d029      	beq.n	800e3e8 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x136>
#endif
         )
        );
       MsgIndex++) { // Find free message place
    if ( N2kIsTimeBefore(N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime,OldestMsgTime) ) {
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	4619      	mov	r1, r3
 800e39e:	460b      	mov	r3, r1
 800e3a0:	019b      	lsls	r3, r3, #6
 800e3a2:	440b      	add	r3, r1
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e3ac:	69f9      	ldr	r1, [r7, #28]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fc ff5d 	bl	800b26e <_Z15N2kIsTimeBeforemm>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00f      	beq.n	800e3da <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x128>
      OldestIndex=MsgIndex;
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	61bb      	str	r3, [r7, #24]
      OldestMsgTime=N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	019b      	lsls	r3, r3, #6
 800e3ce:	440b      	add	r3, r1
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e3d8:	61fb      	str	r3, [r7, #28]
       MsgIndex++) { // Find free message place
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	781b      	ldrb	r3, [r3, #0]
  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 800e3de:	3301      	adds	r3, #1
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	701a      	strb	r2, [r3, #0]
 800e3e6:	e77b      	b.n	800e2e0 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x2e>
    }
  }
  if ( MsgIndex==MaxN2kCANMsgs && N2kHasElapsed(OldestMsgTime,Max_N2kMsgBuf_Time,CurTime) ) {
 800e3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ea:	781a      	ldrb	r2, [r3, #0]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d109      	bne.n	800e40a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	2164      	movs	r1, #100	; 0x64
 800e3fa:	69f8      	ldr	r0, [r7, #28]
 800e3fc:	f7f9 f98e 	bl	800771c <_Z13N2kHasElapsedmmm>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 800e406:	2301      	movs	r3, #1
 800e408:	e000      	b.n	800e40c <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x15a>
 800e40a:	2300      	movs	r3, #0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d010      	beq.n	800e432 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x180>
    MsgIndex=OldestIndex; // Use the old one, which has timed out
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	b2da      	uxtb	r2, r3
 800e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e416:	701a      	strb	r2, [r3, #0]
    N2kCANMsgBuf[MsgIndex].FreeMessage();
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	4619      	mov	r1, r3
 800e422:	460b      	mov	r3, r1
 800e424:	019b      	lsls	r3, r3, #6
 800e426:	440b      	add	r3, r1
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fc fefb 	bl	800b228 <_ZN10tN2kCANMsg11FreeMessageEv>
  }

}
 800e432:	bf00      	nop
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
	...

0800e43c <_ZN9tNMEA200012SendTPCM_BAMEi>:

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)

//*****************************************************************************
bool tNMEA2000::SendTPCM_BAM(int iDev) {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b0c4      	sub	sp, #272	; 0x110
 800e440:	af02      	add	r7, sp, #8
 800e442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e44a:	6018      	str	r0, [r3, #0]
 800e44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e454:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 800e456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e45a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e45e:	6818      	ldr	r0, [r3, #0]
 800e460:	f7fd fa33 	bl	800b8ca <_ZN9tNMEA200012IsActiveNodeEv>
 800e464:	4603      	mov	r3, r0
 800e466:	f083 0301 	eor.w	r3, r3, #1
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <_ZN9tNMEA200012SendTPCM_BAMEi+0x38>
 800e470:	2300      	movs	r3, #0
 800e472:	e0a5      	b.n	800e5c0 <_ZN9tNMEA200012SendTPCM_BAMEi+0x184>

  tN2kMsg N2kMsg;
 800e474:	f107 0008 	add.w	r0, r7, #8
 800e478:	2300      	movs	r3, #0
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	2300      	movs	r3, #0
 800e47e:	2206      	movs	r2, #6
 800e480:	210f      	movs	r1, #15
 800e482:	f7fb fd4d 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  N2kMsg.Source=Devices[iDev].N2kSource;
 800e486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	69da      	ldr	r2, [r3, #28]
 800e492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e4a0:	fb01 f303 	mul.w	r3, r1, r3
 800e4a4:	4413      	add	r3, r2
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e4b0:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=0xff;
 800e4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e4ba:	22ff      	movs	r2, #255	; 0xff
 800e4bc:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 800e4be:	f107 0308 	add.w	r3, r7, #8
 800e4c2:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fb fd5c 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e4d4:	2206      	movs	r2, #6
 800e4d6:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_BAM);
 800e4d8:	f107 0308 	add.w	r3, r7, #8
 800e4dc:	2120      	movs	r1, #32
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fb fe90 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 800e4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	69da      	ldr	r2, [r3, #28]
 800e4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e4fe:	fb01 f303 	mul.w	r3, r1, r3
 800e502:	4413      	add	r3, r2
 800e504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e506:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 800e50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e50e:	b29a      	uxth	r2, r3
 800e510:	f107 0308 	add.w	r3, r7, #8
 800e514:	4611      	mov	r1, r2
 800e516:	4618      	mov	r0, r3
 800e518:	f7fb fe29 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 800e51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e520:	4a2a      	ldr	r2, [pc, #168]	; (800e5cc <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 800e522:	fb82 1203 	smull	r1, r2, r2, r3
 800e526:	441a      	add	r2, r3
 800e528:	1092      	asrs	r2, r2, #2
 800e52a:	17db      	asrs	r3, r3, #31
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	b2d8      	uxtb	r0, r3
 800e530:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e534:	4b25      	ldr	r3, [pc, #148]	; (800e5cc <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 800e536:	fb83 1302 	smull	r1, r3, r3, r2
 800e53a:	4413      	add	r3, r2
 800e53c:	1099      	asrs	r1, r3, #2
 800e53e:	17d3      	asrs	r3, r2, #31
 800e540:	1ac9      	subs	r1, r1, r3
 800e542:	460b      	mov	r3, r1
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	1a5b      	subs	r3, r3, r1
 800e548:	1ad1      	subs	r1, r2, r3
 800e54a:	2900      	cmp	r1, #0
 800e54c:	d001      	beq.n	800e552 <_ZN9tNMEA200012SendTPCM_BAMEi+0x116>
 800e54e:	2301      	movs	r3, #1
 800e550:	e000      	b.n	800e554 <_ZN9tNMEA200012SendTPCM_BAMEi+0x118>
 800e552:	2300      	movs	r3, #0
 800e554:	4403      	add	r3, r0
 800e556:	b2da      	uxtb	r2, r3
 800e558:	f107 0308 	add.w	r3, r7, #8
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fb fe50 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e564:	f107 0308 	add.w	r3, r7, #8
 800e568:	21ff      	movs	r1, #255	; 0xff
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fb fe4a 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 800e570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	69da      	ldr	r2, [r3, #28]
 800e57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e58a:	fb01 f303 	mul.w	r3, r1, r3
 800e58e:	4413      	add	r3, r2
 800e590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e592:	461a      	mov	r2, r3
 800e594:	f107 0308 	add.w	r3, r7, #8
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fb fdfb 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 800e5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5a4:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800e5a8:	f107 0108 	add.w	r1, r7, #8
 800e5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5b4:	6812      	ldr	r2, [r2, #0]
 800e5b6:	6818      	ldr	r0, [r3, #0]
 800e5b8:	f7ff faf8 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	bf00      	nop
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	92492493 	.word	0x92492493

0800e5d0 <_ZN9tNMEA200012SendTPCM_RTSEi>:

//*****************************************************************************
bool tNMEA2000::SendTPCM_RTS(int iDev) {
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b0c4      	sub	sp, #272	; 0x110
 800e5d4:	af02      	add	r7, sp, #8
 800e5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5de:	6018      	str	r0, [r3, #0]
 800e5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5e8:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 800e5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	f7fd f969 	bl	800b8ca <_ZN9tNMEA200012IsActiveNodeEv>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f083 0301 	eor.w	r3, r3, #1
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <_ZN9tNMEA200012SendTPCM_RTSEi+0x38>
 800e604:	2300      	movs	r3, #0
 800e606:	e0b6      	b.n	800e776 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1a6>

  tN2kMsg N2kMsg;
 800e608:	f107 0008 	add.w	r0, r7, #8
 800e60c:	2300      	movs	r3, #0
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	2300      	movs	r3, #0
 800e612:	2206      	movs	r2, #6
 800e614:	210f      	movs	r1, #15
 800e616:	f7fb fc83 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e61e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	69da      	ldr	r2, [r3, #28]
 800e626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e634:	fb01 f303 	mul.w	r3, r1, r3
 800e638:	4413      	add	r3, r2
 800e63a:	781a      	ldrb	r2, [r3, #0]
 800e63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e640:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e644:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 800e646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	69da      	ldr	r2, [r3, #28]
 800e652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e660:	fb01 f303 	mul.w	r3, r1, r3
 800e664:	4413      	add	r3, r2
 800e666:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800e66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e66e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e672:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 800e674:	f107 0308 	add.w	r3, r7, #8
 800e678:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fb fc81 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e686:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e68a:	2206      	movs	r2, #6
 800e68c:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_RTS);
 800e68e:	f107 0308 	add.w	r3, r7, #8
 800e692:	2110      	movs	r1, #16
 800e694:	4618      	mov	r0, r3
 800e696:	f7fb fdb5 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 800e69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e69e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	69da      	ldr	r2, [r3, #28]
 800e6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e6b4:	fb01 f303 	mul.w	r3, r1, r3
 800e6b8:	4413      	add	r3, r2
 800e6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 800e6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	f107 0308 	add.w	r3, r7, #8
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fb fd4e 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 800e6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6d6:	4a2a      	ldr	r2, [pc, #168]	; (800e780 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b0>)
 800e6d8:	fb82 1203 	smull	r1, r2, r2, r3
 800e6dc:	441a      	add	r2, r3
 800e6de:	1092      	asrs	r2, r2, #2
 800e6e0:	17db      	asrs	r3, r3, #31
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	b2d8      	uxtb	r0, r3
 800e6e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e6ea:	4b25      	ldr	r3, [pc, #148]	; (800e780 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b0>)
 800e6ec:	fb83 1302 	smull	r1, r3, r3, r2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	1099      	asrs	r1, r3, #2
 800e6f4:	17d3      	asrs	r3, r2, #31
 800e6f6:	1ac9      	subs	r1, r1, r3
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	1a5b      	subs	r3, r3, r1
 800e6fe:	1ad1      	subs	r1, r2, r3
 800e700:	2900      	cmp	r1, #0
 800e702:	d001      	beq.n	800e708 <_ZN9tNMEA200012SendTPCM_RTSEi+0x138>
 800e704:	2301      	movs	r3, #1
 800e706:	e000      	b.n	800e70a <_ZN9tNMEA200012SendTPCM_RTSEi+0x13a>
 800e708:	2300      	movs	r3, #0
 800e70a:	4403      	add	r3, r0
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	f107 0308 	add.w	r3, r7, #8
 800e712:	4611      	mov	r1, r2
 800e714:	4618      	mov	r0, r3
 800e716:	f7fb fd75 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e71a:	f107 0308 	add.w	r3, r7, #8
 800e71e:	21ff      	movs	r1, #255	; 0xff
 800e720:	4618      	mov	r0, r3
 800e722:	f7fb fd6f 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 800e726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e72a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	69da      	ldr	r2, [r3, #28]
 800e732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e740:	fb01 f303 	mul.w	r3, r1, r3
 800e744:	4413      	add	r3, r2
 800e746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e748:	461a      	mov	r2, r3
 800e74a:	f107 0308 	add.w	r3, r7, #8
 800e74e:	4611      	mov	r1, r2
 800e750:	4618      	mov	r0, r3
 800e752:	f7fb fd20 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 800e756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e75a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800e75e:	f107 0108 	add.w	r1, r7, #8
 800e762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e76a:	6812      	ldr	r2, [r2, #0]
 800e76c:	6818      	ldr	r0, [r3, #0]
 800e76e:	f7ff fa1d 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e772:	4603      	mov	r3, r0
 800e774:	bf00      	nop
}
 800e776:	4618      	mov	r0, r3
 800e778:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	92492493 	.word	0x92492493

0800e784 <_Z12TPCtsPacketsh>:

unsigned char TPCtsPackets(unsigned char nPackets) { return tNMEA2000::N2kMax<unsigned char>(1,tNMEA2000::N2kMin<unsigned char>(nPackets,TP_MAX_FRAMES)); }
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	71fb      	strb	r3, [r7, #7]
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	2105      	movs	r1, #5
 800e792:	4618      	mov	r0, r3
 800e794:	f003 f962 	bl	8011a5c <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 800e798:	4603      	mov	r3, r0
 800e79a:	4619      	mov	r1, r3
 800e79c:	2001      	movs	r0, #1
 800e79e:	f003 f971 	bl	8011a84 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <_ZN9tNMEA200012SendTPCM_CTSEmhihh>:

//*****************************************************************************
void tNMEA2000::SendTPCM_CTS(unsigned long PGN, unsigned char Destination, int iDev, unsigned char nPackets, unsigned char NextPacketNumber) {
 800e7ac:	b590      	push	{r4, r7, lr}
 800e7ae:	b0c7      	sub	sp, #284	; 0x11c
 800e7b0:	af02      	add	r7, sp, #8
 800e7b2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800e7b6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800e7ba:	6020      	str	r0, [r4, #0]
 800e7bc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800e7c0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800e7c4:	6001      	str	r1, [r0, #0]
 800e7c6:	4611      	mov	r1, r2
 800e7c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e7cc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800e7d0:	6013      	str	r3, [r2, #0]
 800e7d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7d6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e7da:	460a      	mov	r2, r1
 800e7dc:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800e7de:	f107 0014 	add.w	r0, r7, #20
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	2206      	movs	r2, #6
 800e7ea:	210f      	movs	r1, #15
 800e7ec:	f7fb fb98 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800e7f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7f8:	6818      	ldr	r0, [r3, #0]
 800e7fa:	f7fd f866 	bl	800b8ca <_ZN9tNMEA200012IsActiveNodeEv>
 800e7fe:	4603      	mov	r3, r0
 800e800:	f083 0301 	eor.w	r3, r3, #1
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d163      	bne.n	800e8d2 <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x126>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e80a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e80e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	69da      	ldr	r2, [r3, #28]
 800e816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e81a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e824:	fb01 f303 	mul.w	r3, r1, r3
 800e828:	4413      	add	r3, r2
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800e830:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e834:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800e83e:	f107 0314 	add.w	r3, r7, #20
 800e842:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e846:	4618      	mov	r0, r3
 800e848:	f7fb fb9c 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e84c:	2306      	movs	r3, #6
 800e84e:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_CTS);
 800e850:	f107 0314 	add.w	r3, r7, #20
 800e854:	2111      	movs	r1, #17
 800e856:	4618      	mov	r0, r3
 800e858:	f7fb fcd4 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(TPCtsPackets(nPackets));
 800e85c:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff ff8f 	bl	800e784 <_Z12TPCtsPacketsh>
 800e866:	4603      	mov	r3, r0
 800e868:	461a      	mov	r2, r3
 800e86a:	f107 0314 	add.w	r3, r7, #20
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f7fb fcc7 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NextPacketNumber);
 800e876:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 800e87a:	f107 0314 	add.w	r3, r7, #20
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7fb fcbf 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e886:	f107 0314 	add.w	r3, r7, #20
 800e88a:	21ff      	movs	r1, #255	; 0xff
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fb fcb9 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e892:	f107 0314 	add.w	r3, r7, #20
 800e896:	21ff      	movs	r1, #255	; 0xff
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fb fcb3 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800e89e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	f107 0314 	add.w	r3, r7, #20
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fb fc71 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800e8b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8b8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e8bc:	f107 0114 	add.w	r1, r7, #20
 800e8c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8c8:	6812      	ldr	r2, [r2, #0]
 800e8ca:	6818      	ldr	r0, [r3, #0]
 800e8cc:	f7ff f96e 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e8d0:	e000      	b.n	800e8d4 <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x128>
  if ( !IsActiveNode() ) return;
 800e8d2:	bf00      	nop
}
 800e8d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd90      	pop	{r4, r7, pc}

0800e8dc <_ZN9tNMEA200015SendTPCM_EndAckEmhith>:

//*****************************************************************************
void tNMEA2000::SendTPCM_EndAck(unsigned long PGN, unsigned char Destination, int iDev, uint16_t nBytes, unsigned char nPackets) {
 800e8dc:	b590      	push	{r4, r7, lr}
 800e8de:	b0c7      	sub	sp, #284	; 0x11c
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800e8e6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800e8ea:	6020      	str	r0, [r4, #0]
 800e8ec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800e8f0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800e8f4:	6001      	str	r1, [r0, #0]
 800e8f6:	4611      	mov	r1, r2
 800e8f8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e8fc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800e900:	6013      	str	r3, [r2, #0]
 800e902:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e906:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e90a:	460a      	mov	r2, r1
 800e90c:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800e90e:	f107 0014 	add.w	r0, r7, #20
 800e912:	2300      	movs	r3, #0
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	2300      	movs	r3, #0
 800e918:	2206      	movs	r2, #6
 800e91a:	210f      	movs	r1, #15
 800e91c:	f7fb fb00 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800e920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	f7fc ffce 	bl	800b8ca <_ZN9tNMEA200012IsActiveNodeEv>
 800e92e:	4603      	mov	r3, r0
 800e930:	f083 0301 	eor.w	r3, r3, #1
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d158      	bne.n	800e9ec <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x110>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e93a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e93e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	69da      	ldr	r2, [r3, #28]
 800e946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e94a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e954:	fb01 f303 	mul.w	r3, r1, r3
 800e958:	4413      	add	r3, r2
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800e960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e964:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800e96e:	f107 0314 	add.w	r3, r7, #20
 800e972:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e976:	4618      	mov	r0, r3
 800e978:	f7fb fb04 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e97c:	2306      	movs	r3, #6
 800e97e:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_ACK);
 800e980:	f107 0314 	add.w	r3, r7, #20
 800e984:	2113      	movs	r1, #19
 800e986:	4618      	mov	r0, r3
 800e988:	f7fb fc3c 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add2ByteUInt(nBytes);
 800e98c:	f8b7 2120 	ldrh.w	r2, [r7, #288]	; 0x120
 800e990:	f107 0314 	add.w	r3, r7, #20
 800e994:	4611      	mov	r1, r2
 800e996:	4618      	mov	r0, r3
 800e998:	f7fb fbe9 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nPackets);
 800e99c:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 800e9a0:	f107 0314 	add.w	r3, r7, #20
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fb fc2c 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e9ac:	f107 0314 	add.w	r3, r7, #20
 800e9b0:	21ff      	movs	r1, #255	; 0xff
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fb fc26 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800e9b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	f107 0314 	add.w	r3, r7, #20
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fb fbe4 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800e9ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9d2:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e9d6:	f107 0114 	add.w	r1, r7, #20
 800e9da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9e2:	6812      	ldr	r2, [r2, #0]
 800e9e4:	6818      	ldr	r0, [r3, #0]
 800e9e6:	f7ff f8e1 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e9ea:	e000      	b.n	800e9ee <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x112>
  if ( !IsActiveNode() ) return;
 800e9ec:	bf00      	nop
}
 800e9ee:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd90      	pop	{r4, r7, pc}

0800e9f6 <_ZN9tNMEA200014SendTPCM_AbortEmhih>:

//*****************************************************************************
void tNMEA2000::SendTPCM_Abort(unsigned long PGN, unsigned char Destination, int iDev, unsigned char AbortCode) {
 800e9f6:	b590      	push	{r4, r7, lr}
 800e9f8:	b0c7      	sub	sp, #284	; 0x11c
 800e9fa:	af02      	add	r7, sp, #8
 800e9fc:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800ea00:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800ea04:	6020      	str	r0, [r4, #0]
 800ea06:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800ea0a:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800ea0e:	6001      	str	r1, [r0, #0]
 800ea10:	4611      	mov	r1, r2
 800ea12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ea16:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800ea1a:	6013      	str	r3, [r2, #0]
 800ea1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea20:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800ea24:	460a      	mov	r2, r1
 800ea26:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800ea28:	f107 0014 	add.w	r0, r7, #20
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	2300      	movs	r3, #0
 800ea32:	2206      	movs	r2, #6
 800ea34:	210f      	movs	r1, #15
 800ea36:	f7fb fa73 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800ea3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea42:	6818      	ldr	r0, [r3, #0]
 800ea44:	f7fc ff41 	bl	800b8ca <_ZN9tNMEA200012IsActiveNodeEv>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	f083 0301 	eor.w	r3, r3, #1
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d15c      	bne.n	800eb0e <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x118>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800ea54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	69da      	ldr	r2, [r3, #28]
 800ea60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ea6e:	fb01 f303 	mul.w	r3, r1, r3
 800ea72:	4413      	add	r3, r2
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800ea7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea7e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800ea88:	f107 0314 	add.w	r3, r7, #20
 800ea8c:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fb fa77 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800ea96:	2306      	movs	r3, #6
 800ea98:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_Abort);
 800ea9a:	f107 0314 	add.w	r3, r7, #20
 800ea9e:	21ff      	movs	r1, #255	; 0xff
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fb fbaf 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(AbortCode);
 800eaa6:	f897 2120 	ldrb.w	r2, [r7, #288]	; 0x120
 800eaaa:	f107 0314 	add.w	r3, r7, #20
 800eaae:	4611      	mov	r1, r2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fb fba7 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800eab6:	f107 0314 	add.w	r3, r7, #20
 800eaba:	21ff      	movs	r1, #255	; 0xff
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fb fba1 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800eac2:	f107 0314 	add.w	r3, r7, #20
 800eac6:	21ff      	movs	r1, #255	; 0xff
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7fb fb9b 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800eace:	f107 0314 	add.w	r3, r7, #20
 800ead2:	21ff      	movs	r1, #255	; 0xff
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fb fb95 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800eada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	f107 0314 	add.w	r3, r7, #20
 800eae8:	4611      	mov	r1, r2
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fb fb53 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800eaf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eaf4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800eaf8:	f107 0114 	add.w	r1, r7, #20
 800eafc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb04:	6812      	ldr	r2, [r2, #0]
 800eb06:	6818      	ldr	r0, [r3, #0]
 800eb08:	f7ff f850 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800eb0c:	e000      	b.n	800eb10 <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11a>
  if ( !IsActiveNode() ) return;
 800eb0e:	bf00      	nop
}
 800eb10:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd90      	pop	{r4, r7, pc}

0800eb18 <_ZN9tNMEA20008SendTPDTEi>:

//*****************************************************************************
// Caller should take care of not calling this after all has been done.
// Use HasAllTPDTSent for checking.
bool tNMEA2000::SendTPDT(int iDev) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b0c6      	sub	sp, #280	; 0x118
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800eb26:	6018      	str	r0, [r3, #0]
 800eb28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eb30:	6019      	str	r1, [r3, #0]
  tN2kMsg N2kMsg;
 800eb32:	f107 000c 	add.w	r0, r7, #12
 800eb36:	2300      	movs	r3, #0
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	2206      	movs	r2, #6
 800eb3e:	210f      	movs	r1, #15
 800eb40:	f7fb f9ee 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800eb44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	69da      	ldr	r2, [r3, #28]
 800eb50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800eb5e:	fb01 f303 	mul.w	r3, r1, r3
 800eb62:	4413      	add	r3, r2
 800eb64:	781a      	ldrb	r2, [r3, #0]
 800eb66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb6e:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 800eb70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	69da      	ldr	r2, [r3, #28]
 800eb7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800eb8a:	fb01 f303 	mul.w	r3, r1, r3
 800eb8e:	4413      	add	r3, r2
 800eb90:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800eb94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb9c:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_DT);
 800eb9e:	f107 030c 	add.w	r3, r7, #12
 800eba2:	f44f 416b 	mov.w	r1, #60160	; 0xeb00
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fb f9ec 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800ebac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebb4:	2206      	movs	r2, #6
 800ebb6:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(Devices[iDev].NextDTSequence+1);
 800ebb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	69da      	ldr	r2, [r3, #28]
 800ebc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ebd2:	fb01 f303 	mul.w	r3, r1, r3
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ebdc:	3301      	adds	r3, #1
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	f107 030c 	add.w	r3, r7, #12
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fb fb0c 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  int iByteToSend=Devices[iDev].NextDTSequence*7;
 800ebec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	69da      	ldr	r2, [r3, #28]
 800ebf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ec06:	fb01 f303 	mul.w	r3, r1, r3
 800ec0a:	4413      	add	r3, r2
 800ec0c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ec10:	461a      	mov	r2, r3
 800ec12:	4613      	mov	r3, r2
 800ec14:	00db      	lsls	r3, r3, #3
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ec22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ec26:	2b06      	cmp	r3, #6
 800ec28:	dc41      	bgt.n	800ecae <_ZN9tNMEA20008SendTPDTEi+0x196>
    if ( iByteToSend<Devices[iDev].PendingTPMsg.DataLen ) {
 800ec2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	69da      	ldr	r2, [r3, #28]
 800ec36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ec44:	fb01 f303 	mul.w	r3, r1, r3
 800ec48:	4413      	add	r3, r2
 800ec4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec4c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ec50:	429a      	cmp	r2, r3
 800ec52:	da1b      	bge.n	800ec8c <_ZN9tNMEA20008SendTPDTEi+0x174>
      N2kMsg.AddByte(Devices[iDev].PendingTPMsg.Data[iByteToSend]);
 800ec54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	69da      	ldr	r2, [r3, #28]
 800ec60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ec6e:	fb01 f303 	mul.w	r3, r1, r3
 800ec72:	441a      	add	r2, r3
 800ec74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec78:	4413      	add	r3, r2
 800ec7a:	3354      	adds	r3, #84	; 0x54
 800ec7c:	781a      	ldrb	r2, [r3, #0]
 800ec7e:	f107 030c 	add.w	r3, r7, #12
 800ec82:	4611      	mov	r1, r2
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fb fabd 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 800ec8a:	e005      	b.n	800ec98 <_ZN9tNMEA20008SendTPDTEi+0x180>
    } else N2kMsg.AddByte(0xff);
 800ec8c:	f107 030c 	add.w	r3, r7, #12
 800ec90:	21ff      	movs	r1, #255	; 0xff
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fb fab6 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 800ec98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800eca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eca6:	3301      	adds	r3, #1
 800eca8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ecac:	e7b9      	b.n	800ec22 <_ZN9tNMEA20008SendTPDTEi+0x10a>
  }
  Devices[iDev].NextDTSequence++;
 800ecae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	69da      	ldr	r2, [r3, #28]
 800ecba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ecc8:	fb01 f303 	mul.w	r3, r1, r3
 800eccc:	4413      	add	r3, r2
 800ecce:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	b2d2      	uxtb	r2, r2
 800ecd6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  return SendMsg(N2kMsg,iDev);
 800ecda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecde:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800ece2:	f107 010c 	add.w	r1, r7, #12
 800ece6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ecee:	6812      	ldr	r2, [r2, #0]
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	f7fe ff5b 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800ecf6:	4603      	mov	r3, r0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <_ZN9tNMEA200014HasAllTPDTSentEi>:

//*****************************************************************************
bool tNMEA2000::HasAllTPDTSent(int iDev) {
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
  return ( Devices[iDev].NextDTSequence*7>=Devices[iDev].PendingTPMsg.DataLen );
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	69da      	ldr	r2, [r3, #28]
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ed16:	fb01 f303 	mul.w	r3, r1, r3
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ed20:	461a      	mov	r2, r3
 800ed22:	4613      	mov	r3, r2
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	1a9a      	subs	r2, r3, r2
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	69d9      	ldr	r1, [r3, #28]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800ed32:	fb00 f303 	mul.w	r3, r0, r3
 800ed36:	440b      	add	r3, r1
 800ed38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	bfac      	ite	ge
 800ed3e:	2301      	movge	r3, #1
 800ed40:	2300      	movlt	r3, #0
 800ed42:	b2db      	uxtb	r3, r3
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bc80      	pop	{r7}
 800ed4c:	4770      	bx	lr
	...

0800ed50 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>:

//*****************************************************************************
bool tNMEA2000::TestHandleTPMessage(unsigned long PGN, unsigned char Source, unsigned char Destination,
                                    unsigned char len, unsigned char *buf,
                                    uint8_t &MsgIndex) {
 800ed50:	b590      	push	{r4, r7, lr}
 800ed52:	b08f      	sub	sp, #60	; 0x3c
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	460b      	mov	r3, r1
 800ed60:	71fb      	strb	r3, [r7, #7]
 800ed62:	4613      	mov	r3, r2
 800ed64:	71bb      	strb	r3, [r7, #6]
  MsgIndex=MaxN2kCANMsgs;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ed6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed6e:	701a      	strb	r2, [r3, #0]
  int iDev=FindSourceDeviceIndex(Destination);
 800ed70:	79bb      	ldrb	r3, [r7, #6]
 800ed72:	4619      	mov	r1, r3
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f000 ff40 	bl	800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800ed7a:	62b8      	str	r0, [r7, #40]	; 0x28

  if ( PGN==TP_CM ) {
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800ed82:	f040 8268 	bne.w	800f256 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x506>
    unsigned char TP_CM_Control=buf[0];
 800ed86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int Index=5;
 800ed8e:	2305      	movs	r3, #5
 800ed90:	617b      	str	r3, [r7, #20]
    unsigned long TransportPGN=GetBuf3ByteUInt(Index,buf);
 800ed92:	f107 0314 	add.w	r3, r7, #20
 800ed96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fb fbb4 	bl	800a506 <_Z15GetBuf3ByteUIntRiPKh>
 800ed9e:	6238      	str	r0, [r7, #32]

    switch (TP_CM_Control) {
 800eda0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda4:	2b20      	cmp	r3, #32
 800eda6:	dc2b      	bgt.n	800ee00 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0xb0>
 800eda8:	2b10      	cmp	r3, #16
 800edaa:	f2c0 824d 	blt.w	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 800edae:	3b10      	subs	r3, #16
 800edb0:	2b10      	cmp	r3, #16
 800edb2:	f200 8249 	bhi.w	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 800edb6:	a201      	add	r2, pc, #4	; (adr r2, 800edbc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x6c>)
 800edb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edbc:	0800ee09 	.word	0x0800ee09
 800edc0:	0800f085 	.word	0x0800f085
 800edc4:	0800f249 	.word	0x0800f249
 800edc8:	0800f1b3 	.word	0x0800f1b3
 800edcc:	0800f249 	.word	0x0800f249
 800edd0:	0800f249 	.word	0x0800f249
 800edd4:	0800f249 	.word	0x0800f249
 800edd8:	0800f249 	.word	0x0800f249
 800eddc:	0800f249 	.word	0x0800f249
 800ede0:	0800f249 	.word	0x0800f249
 800ede4:	0800f249 	.word	0x0800f249
 800ede8:	0800f249 	.word	0x0800f249
 800edec:	0800f249 	.word	0x0800f249
 800edf0:	0800f249 	.word	0x0800f249
 800edf4:	0800f249 	.word	0x0800f249
 800edf8:	0800f249 	.word	0x0800f249
 800edfc:	0800ee09 	.word	0x0800ee09
 800ee00:	2bff      	cmp	r3, #255	; 0xff
 800ee02:	f000 81f5 	beq.w	800f1f0 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4a0>
 800ee06:	e21f      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_BAM:
      case TP_CM_RTS: {
        N2kMsgDbgln("Got TP Command");
        Index=1;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	617b      	str	r3, [r7, #20]
        uint16_t nBytes=GetBuf2ByteUInt(Index,buf);
 800ee0c:	f107 0314 	add.w	r3, r7, #20
 800ee10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fb fb68 	bl	800a4e8 <_Z15GetBuf2ByteUIntRiPKh>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	83bb      	strh	r3, [r7, #28]
        uint8_t TPMaxPackets=buf[Index++];
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	1c5a      	adds	r2, r3, #1
 800ee20:	617a      	str	r2, [r7, #20]
 800ee22:	461a      	mov	r2, r3
 800ee24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee26:	4413      	add	r3, r2
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	76fb      	strb	r3, [r7, #27]
        //Index++; // reserved

        FindFreeCANMsgIndex(TransportPGN,Source,Destination,true,MsgIndex);
 800ee2c:	79b9      	ldrb	r1, [r7, #6]
 800ee2e:	79fa      	ldrb	r2, [r7, #7]
 800ee30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	2301      	movs	r3, #1
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	6a39      	ldr	r1, [r7, #32]
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f7ff fa38 	bl	800e2b2 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>

        if (MsgIndex==MaxN2kCANMsgs) { // No free msg place
 800ee42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee44:	781a      	ldrb	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d111      	bne.n	800ee74 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x124>
          N2kMsgDbgStart("No free msg slot"); N2kMsgDbgln();
          if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to abort transport
 800ee50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee54:	2b10      	cmp	r3, #16
 800ee56:	f040 81ea 	bne.w	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f2c0 81e6 	blt.w	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);
 800ee62:	79fa      	ldrb	r2, [r7, #7]
 800ee64:	2301      	movs	r3, #1
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	6a39      	ldr	r1, [r7, #32]
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7ff fdc2 	bl	800e9f6 <_ZN9tNMEA200014SendTPCM_AbortEmhih>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
            }
          }
        }
        break;
 800ee72:	e1dc      	b.n	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
          N2kCANMsgBuf[MsgIndex].KnownMessage=CheckKnownMessage(TransportPGN,N2kCANMsgBuf[MsgIndex].SystemMessage,FastPacket);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	460b      	mov	r3, r1
 800ee80:	019b      	lsls	r3, r3, #6
 800ee82:	440b      	add	r3, r1
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	4413      	add	r3, r2
 800ee88:	f103 01fe 	add.w	r1, r3, #254	; 0xfe
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	4618      	mov	r0, r3
 800ee96:	4603      	mov	r3, r0
 800ee98:	019b      	lsls	r3, r3, #6
 800ee9a:	4403      	add	r3, r0
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	18d4      	adds	r4, r2, r3
 800eea0:	f107 0313 	add.w	r3, r7, #19
 800eea4:	460a      	mov	r2, r1
 800eea6:	6a39      	ldr	r1, [r7, #32]
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f7ff f8e3 	bl	800e074 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800eeb4:	8bbb      	ldrh	r3, [r7, #28]
 800eeb6:	2bde      	cmp	r3, #222	; 0xde
 800eeb8:	d818      	bhi.n	800eeec <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	4619      	mov	r1, r3
 800eec4:	460b      	mov	r3, r1
 800eec6:	019b      	lsls	r3, r3, #6
 800eec8:	440b      	add	r3, r1
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d108      	bne.n	800eee8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x198>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f7fc fce5 	bl	800b8a6 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 800eedc:	4603      	mov	r3, r0
 800eede:	f083 0301 	eor.w	r3, r3, #1
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800eee8:	2301      	movs	r3, #1
 800eeea:	e000      	b.n	800eeee <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19e>
 800eeec:	2300      	movs	r3, #0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f000 80b6 	beq.w	800f060 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x310>
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	4619      	mov	r1, r3
 800eefe:	460b      	mov	r3, r1
 800ef00:	019b      	lsls	r3, r3, #6
 800ef02:	440b      	add	r3, r1
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	4413      	add	r3, r2
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(7 /* Priority? */,TransportPGN,Source,Destination);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	4619      	mov	r1, r3
 800ef18:	460b      	mov	r3, r1
 800ef1a:	019b      	lsls	r3, r3, #6
 800ef1c:	440b      	add	r3, r1
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	4413      	add	r3, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	79fa      	ldrb	r2, [r7, #7]
 800ef26:	79bb      	ldrb	r3, [r7, #6]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	6a3a      	ldr	r2, [r7, #32]
 800ef2e:	2107      	movs	r1, #7
 800ef30:	f7fb f843 	bl	8009fba <_ZN7tN2kMsg4InitEhmhh>
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	460b      	mov	r3, r1
 800ef40:	019b      	lsls	r3, r3, #6
 800ef42:	440b      	add	r3, r1
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            N2kCANMsgBuf[MsgIndex].LastFrame=0;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	4619      	mov	r1, r3
 800ef58:	460b      	mov	r3, r1
 800ef5a:	019b      	lsls	r3, r3, #6
 800ef5c:	440b      	add	r3, r1
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=nBytes;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	4619      	mov	r1, r3
 800ef72:	460b      	mov	r3, r1
 800ef74:	019b      	lsls	r3, r3, #6
 800ef76:	440b      	add	r3, r1
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	8bba      	ldrh	r2, [r7, #28]
 800ef7e:	611a      	str	r2, [r3, #16]
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage();
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	4619      	mov	r1, r3
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	019b      	lsls	r3, r3, #6
 800ef8e:	440b      	add	r3, r1
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	4413      	add	r3, r2
 800ef94:	2101      	movs	r1, #1
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fc f8eb 	bl	800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>
            N2kCANMsgBuf[MsgIndex].TPMaxPackets=TPMaxPackets;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	4619      	mov	r1, r3
 800efa6:	460b      	mov	r3, r1
 800efa8:	019b      	lsls	r3, r3, #6
 800efaa:	440b      	add	r3, r1
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4413      	add	r3, r2
 800efb0:	7efa      	ldrb	r2, [r7, #27]
 800efb2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 800efb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efba:	2b10      	cmp	r3, #16
 800efbc:	d142      	bne.n	800f044 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	db3f      	blt.n	800f044 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
              SendTPCM_CTS(TransportPGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	4619      	mov	r1, r3
 800efce:	460b      	mov	r3, r1
 800efd0:	019b      	lsls	r3, r3, #6
 800efd2:	440b      	add	r3, r1
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4413      	add	r3, r2
 800efd8:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800efe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	4618      	mov	r0, r3
 800efe6:	4603      	mov	r3, r0
 800efe8:	019b      	lsls	r3, r3, #6
 800efea:	4403      	add	r3, r0
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	440b      	add	r3, r1
 800eff0:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800eff4:	3301      	adds	r3, #1
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	79f9      	ldrb	r1, [r7, #7]
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	9200      	str	r2, [sp, #0]
 800effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f000:	460a      	mov	r2, r1
 800f002:	6a39      	ldr	r1, [r7, #32]
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f7ff fbd1 	bl	800e7ac <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
              N2kCANMsgBuf[MsgIndex].TPRequireCTS=TPCtsPackets(N2kCANMsgBuf[MsgIndex].TPMaxPackets);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	4619      	mov	r1, r3
 800f014:	460b      	mov	r3, r1
 800f016:	019b      	lsls	r3, r3, #6
 800f018:	440b      	add	r3, r1
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	4413      	add	r3, r2
 800f01e:	f893 1101 	ldrb.w	r1, [r3, #257]	; 0x101
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	4603      	mov	r3, r0
 800f02e:	019b      	lsls	r3, r3, #6
 800f030:	4403      	add	r3, r0
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	18d4      	adds	r4, r2, r3
 800f036:	4608      	mov	r0, r1
 800f038:	f7ff fba4 	bl	800e784 <_Z12TPCtsPacketsh>
 800f03c:	4603      	mov	r3, r0
 800f03e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
        break;
 800f042:	e0f4      	b.n	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              N2kCANMsgBuf[MsgIndex].TPMaxPackets=0xff; // TPMaxPackets>0 indicates that it is TP message
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	4619      	mov	r1, r3
 800f04e:	460b      	mov	r3, r1
 800f050:	019b      	lsls	r3, r3, #6
 800f052:	440b      	add	r3, r1
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	4413      	add	r3, r2
 800f058:	22ff      	movs	r2, #255	; 0xff
 800f05a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        break;
 800f05e:	e0e6      	b.n	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 800f060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f064:	2b10      	cmp	r3, #16
 800f066:	f040 80e2 	bne.w	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f2c0 80de 	blt.w	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
 800f072:	79fa      	ldrb	r2, [r7, #7]
 800f074:	2301      	movs	r3, #1
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	6a39      	ldr	r1, [r7, #32]
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f7ff fcba 	bl	800e9f6 <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        break;
 800f082:	e0d4      	b.n	800f22e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
      }
      case TP_CM_CTS:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800f084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7fc fc33 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800f08c:	4603      	mov	r3, r0
 800f08e:	f083 0301 	eor.w	r3, r3, #1
 800f092:	b2db      	uxtb	r3, r3
 800f094:	2b00      	cmp	r3, #0
 800f096:	f040 80cc 	bne.w	800f232 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e2>
        N2kMsgDbgStart("Got TP CTS"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	69da      	ldr	r2, [r3, #28]
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f0a4:	fb01 f303 	mul.w	r3, r1, r3
 800f0a8:	4413      	add	r3, r2
 800f0aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f8 fb83 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f040 80bd 	bne.w	800f236 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e6>
        if ( Devices[iDev].PendingTPMsg.PGN!=TransportPGN ) { // Some failure on communication
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	69da      	ldr	r2, [r3, #28]
 800f0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f0c6:	fb01 f303 	mul.w	r3, r1, r3
 800f0ca:	4413      	add	r3, r2
 800f0cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ce:	6a3a      	ldr	r2, [r7, #32]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d004      	beq.n	800f0de <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x38e>
          EndSendTPMessage(iDev); // Should we retry from beginning?
 800f0d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f000 fb1f 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
          break;
 800f0dc:	e0b4      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        }
        // Now respond with next data packets
        if ( buf[1]>0 ) { // Note that with 0, receiver wants to have break
 800f0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d055      	beq.n	800f194 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
          if ( buf[2]-1!=Devices[iDev].NextDTSequence ) { // We got sequence error
 800f0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ea:	3302      	adds	r3, #2
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	69d1      	ldr	r1, [r2, #28]
 800f0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0f6:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800f0fa:	fb00 f202 	mul.w	r2, r0, r2
 800f0fe:	440a      	add	r2, r1
 800f100:	f892 2140 	ldrb.w	r2, [r2, #320]	; 0x140
 800f104:	4293      	cmp	r3, r2
 800f106:	d004      	beq.n	800f112 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3c2>
            EndSendTPMessage(iDev); // Should we retry from beginning?
 800f108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f000 fb05 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
            break;
 800f110:	e09a      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
          }
          uint8_t MaxTPSequences=buf[1];
 800f112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f114:	785b      	ldrb	r3, [r3, #1]
 800f116:	77fb      	strb	r3, [r7, #31]
          bool TPDTResult=true;
 800f118:	2301      	movs	r3, #1
 800f11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          for ( uint8_t iSeq=0; TPDTResult &&iSeq<MaxTPSequences && !HasAllTPDTSent(iDev); iSeq++ ) TPDTResult&=SendTPDT(iDev);
 800f11e:	2300      	movs	r3, #0
 800f120:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d010      	beq.n	800f14e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800f12c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f130:	7ffb      	ldrb	r3, [r7, #31]
 800f132:	429a      	cmp	r2, r3
 800f134:	d20b      	bcs.n	800f14e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800f136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f7ff fde2 	bl	800ed02 <_ZN9tNMEA200014HasAllTPDTSentEi>
 800f13e:	4603      	mov	r3, r0
 800f140:	f083 0301 	eor.w	r3, r3, #1
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800f14a:	2301      	movs	r3, #1
 800f14c:	e000      	b.n	800f150 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x400>
 800f14e:	2300      	movs	r3, #0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d014      	beq.n	800f17e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x42e>
 800f154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f7ff fcde 	bl	800eb18 <_ZN9tNMEA20008SendTPDTEi>
 800f15c:	4603      	mov	r3, r0
 800f15e:	461a      	mov	r2, r3
 800f160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f164:	4013      	ands	r3, r2
 800f166:	2b00      	cmp	r3, #0
 800f168:	bf14      	ite	ne
 800f16a:	2301      	movne	r3, #1
 800f16c:	2300      	moveq	r3, #0
 800f16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f172:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f176:	3301      	adds	r3, #1
 800f178:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f17c:	e7d2      	b.n	800f124 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3d4>
          if ( !TPDTResult ) EndSendTPMessage(iDev);
 800f17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f182:	f083 0301 	eor.w	r3, r3, #1
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d003      	beq.n	800f194 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
 800f18c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f000 fac3 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
        }
        Devices[iDev].NextDTSendTime.FromNow(100); // Set timeout for next response
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	69da      	ldr	r2, [r3, #28]
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f19e:	fb01 f303 	mul.w	r3, r1, r3
 800f1a2:	4413      	add	r3, r2
 800f1a4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f1a8:	2164      	movs	r1, #100	; 0x64
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fc f90d 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
        break;
 800f1b0:	e04a      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_ACK:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800f1b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f7fc fb9c 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	f083 0301 	eor.w	r3, r3, #1
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d139      	bne.n	800f23a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ea>
        N2kMsgDbgStart("Got TP ACK"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	69da      	ldr	r2, [r3, #28]
 800f1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1cc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f1d0:	fb01 f303 	mul.w	r3, r1, r3
 800f1d4:	4413      	add	r3, r2
 800f1d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7f8 faed 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d12b      	bne.n	800f23e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ee>
        EndSendTPMessage(iDev);
 800f1e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 fa96 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 800f1ee:	e02b      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_Abort:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800f1f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f7fc fb7d 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	f083 0301 	eor.w	r3, r3, #1
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b00      	cmp	r3, #0
 800f202:	d11e      	bne.n	800f242 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f2>
        N2kMsgDbgStart("Got TP Abort"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	69da      	ldr	r2, [r3, #28]
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f20e:	fb01 f303 	mul.w	r3, r1, r3
 800f212:	4413      	add	r3, r2
 800f214:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f218:	4618      	mov	r0, r3
 800f21a:	f7f8 face 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d110      	bne.n	800f246 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f6>
        EndSendTPMessage(iDev);
 800f224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 fa77 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 800f22c:	e00c      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        break;
 800f22e:	bf00      	nop
 800f230:	e00a      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800f232:	bf00      	nop
 800f234:	e008      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800f236:	bf00      	nop
 800f238:	e006      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800f23a:	bf00      	nop
 800f23c:	e004      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800f23e:	bf00      	nop
 800f240:	e002      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800f242:	bf00      	nop
 800f244:	e000      	b.n	800f248 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800f246:	bf00      	nop
      default:
        ;
    }
    MsgIndex=MaxN2kCANMsgs;  // After TP_CM, message is newer ready.
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f250:	701a      	strb	r2, [r3, #0]
    return true;
 800f252:	2301      	movs	r3, #1
 800f254:	e1ab      	b.n	800f5ae <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  } else if ( PGN==TP_DT ) { // Datapacket
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800f25c:	f040 81a6 	bne.w	800f5ac <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85c>
    N2kMsgDbgStart("Got TP data"); N2kMsgDbgln(MsgIndex);
    // So we need to find TP msg which sender and destination matches.
    for (MsgIndex=0;
 800f260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f262:	2200      	movs	r2, #0
 800f264:	701a      	strb	r2, [r3, #0]
         MsgIndex<MaxN2kCANMsgs &&
 800f266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f268:	781a      	ldrb	r2, [r3, #0]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f270:	429a      	cmp	r2, r3
 800f272:	d23e      	bcs.n	800f2f2 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	4619      	mov	r1, r3
 800f27e:	460b      	mov	r3, r1
 800f280:	019b      	lsls	r3, r3, #6
 800f282:	440b      	add	r3, r1
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4413      	add	r3, r2
 800f288:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
         MsgIndex<MaxN2kCANMsgs &&
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d12e      	bne.n	800f2ee <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	4619      	mov	r1, r3
 800f29a:	460b      	mov	r3, r1
 800f29c:	019b      	lsls	r3, r3, #6
 800f29e:	440b      	add	r3, r1
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7f8 ffa9 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	f083 0301 	eor.w	r3, r3, #1
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d11b      	bne.n	800f2ee <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	019b      	lsls	r3, r3, #6
 800f2c4:	440b      	add	r3, r1
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	4413      	add	r3, r2
 800f2ca:	7b5b      	ldrb	r3, [r3, #13]
 800f2cc:	79ba      	ldrb	r2, [r7, #6]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d10d      	bne.n	800f2ee <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	460b      	mov	r3, r1
 800f2de:	019b      	lsls	r3, r3, #6
 800f2e0:	440b      	add	r3, r1
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	4413      	add	r3, r2
 800f2e6:	7b1b      	ldrb	r3, [r3, #12]
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 800f2e8:	79fa      	ldrb	r2, [r7, #7]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d001      	beq.n	800f2f2 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         MsgIndex<MaxN2kCANMsgs &&
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e000      	b.n	800f2f4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a4>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d006      	beq.n	800f306 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5b6>
          );
         MsgIndex++);
 800f2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2fa:	781b      	ldrb	r3, [r3, #0]
    for (MsgIndex=0;
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f302:	701a      	strb	r2, [r3, #0]
 800f304:	e7af      	b.n	800f266 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x516>
    // if (MsgIndex==MaxN2kCANMsgs) N2kMsgDbgln("TP data msg not found");
    // for (int i=1; i<len; i++) N2kMsgDbgln(buf[i]);
    if (MsgIndex<MaxN2kCANMsgs) { // found TP message under reception
 800f306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f308:	781a      	ldrb	r2, [r3, #0]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f310:	429a      	cmp	r2, r3
 800f312:	f080 8149 	bcs.w	800f5a8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
      N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
      if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right packet is coming
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	4619      	mov	r1, r3
 800f320:	460b      	mov	r3, r1
 800f322:	019b      	lsls	r3, r3, #6
 800f324:	440b      	add	r3, r1
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f32e:	3301      	adds	r3, #1
 800f330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f332:	7812      	ldrb	r2, [r2, #0]
 800f334:	4293      	cmp	r3, r2
 800f336:	f040 80f1 	bne.w	800f51c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x7cc>
        // Add packet to the message
        CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	4619      	mov	r1, r3
 800f344:	460b      	mov	r3, r1
 800f346:	019b      	lsls	r3, r3, #6
 800f348:	440b      	add	r3, r1
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	18d0      	adds	r0, r2, r3
 800f34e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800f352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f354:	2101      	movs	r1, #1
 800f356:	f7fe ff72 	bl	800e23e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
        N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	4619      	mov	r1, r3
 800f364:	460b      	mov	r3, r1
 800f366:	019b      	lsls	r3, r3, #6
 800f368:	440b      	add	r3, r1
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	4413      	add	r3, r2
 800f36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f370:	7812      	ldrb	r2, [r2, #0]
 800f372:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        // Transport protocol is slower, so to avoid timeout, we reset message time
        N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime=N2kMillis();
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f37a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	4619      	mov	r1, r3
 800f380:	460b      	mov	r3, r1
 800f382:	019b      	lsls	r3, r3, #6
 800f384:	440b      	add	r3, r1
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	18d4      	adds	r4, r2, r3
 800f38a:	f7fb feab 	bl	800b0e4 <_Z9N2kMillisv>
 800f38e:	4603      	mov	r3, r0
 800f390:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if ( N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen ) { // all done
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	4619      	mov	r1, r3
 800f39e:	460b      	mov	r3, r1
 800f3a0:	019b      	lsls	r3, r3, #6
 800f3a2:	440b      	add	r3, r1
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	4413      	add	r3, r2
 800f3a8:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	019b      	lsls	r3, r3, #6
 800f3bc:	440b      	add	r3, r1
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	4413      	add	r3, r2
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	4298      	cmp	r0, r3
 800f3c6:	db4c      	blt.n	800f462 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x712>
          N2kCANMsgBuf[MsgIndex].Ready=true;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	019b      	lsls	r3, r3, #6
 800f3d6:	440b      	add	r3, r1
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4413      	add	r3, r2
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // send response
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	019b      	lsls	r3, r3, #6
 800f3f0:	440b      	add	r3, r1
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4413      	add	r3, r2
 800f3f6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f000 80be 	beq.w	800f57c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	2b00      	cmp	r3, #0
 800f404:	f2c0 80ba 	blt.w	800f57c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_EndAck(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen,N2kCANMsgBuf[MsgIndex].LastFrame);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	4619      	mov	r1, r3
 800f412:	460b      	mov	r3, r1
 800f414:	019b      	lsls	r3, r3, #6
 800f416:	440b      	add	r3, r1
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	6898      	ldr	r0, [r3, #8]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	4619      	mov	r1, r3
 800f428:	460b      	mov	r3, r1
 800f42a:	019b      	lsls	r3, r3, #6
 800f42c:	440b      	add	r3, r1
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4413      	add	r3, r2
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	b29a      	uxth	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	461c      	mov	r4, r3
 800f440:	4623      	mov	r3, r4
 800f442:	019b      	lsls	r3, r3, #6
 800f444:	4423      	add	r3, r4
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f44e:	79f9      	ldrb	r1, [r7, #7]
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	9200      	str	r2, [sp, #0]
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	460a      	mov	r2, r1
 800f458:	4601      	mov	r1, r0
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fa3e 	bl	800e8dc <_ZN9tNMEA200015SendTPCM_EndAckEmhith>
 800f460:	e08c      	b.n	800f57c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        } else {
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && ((N2kCANMsgBuf[MsgIndex].LastFrame)%N2kCANMsgBuf[MsgIndex].TPRequireCTS)==0 ) { // send response
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	4619      	mov	r1, r3
 800f46c:	460b      	mov	r3, r1
 800f46e:	019b      	lsls	r3, r3, #6
 800f470:	440b      	add	r3, r1
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	4413      	add	r3, r2
 800f476:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d07e      	beq.n	800f57c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	4619      	mov	r1, r3
 800f488:	460b      	mov	r3, r1
 800f48a:	019b      	lsls	r3, r3, #6
 800f48c:	440b      	add	r3, r1
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	019b      	lsls	r3, r3, #6
 800f4a4:	4403      	add	r3, r0
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	440b      	add	r3, r1
 800f4aa:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f4ae:	fbb2 f1f3 	udiv	r1, r2, r3
 800f4b2:	fb01 f303 	mul.w	r3, r1, r3
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d15e      	bne.n	800f57c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_CTS(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	019b      	lsls	r3, r3, #6
 800f4cc:	440b      	add	r3, r1
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	6898      	ldr	r0, [r3, #8]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	460b      	mov	r3, r1
 800f4e0:	019b      	lsls	r3, r3, #6
 800f4e2:	440b      	add	r3, r1
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	4413      	add	r3, r2
 800f4e8:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	461c      	mov	r4, r3
 800f4f6:	4623      	mov	r3, r4
 800f4f8:	019b      	lsls	r3, r3, #6
 800f4fa:	4423      	add	r3, r4
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	440b      	add	r3, r1
 800f500:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f504:	3301      	adds	r3, #1
 800f506:	b2db      	uxtb	r3, r3
 800f508:	79f9      	ldrb	r1, [r7, #7]
 800f50a:	9301      	str	r3, [sp, #4]
 800f50c:	9200      	str	r2, [sp, #0]
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	460a      	mov	r2, r1
 800f512:	4601      	mov	r1, r0
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f7ff f949 	bl	800e7ac <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
 800f51a:	e02f      	b.n	800f57c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        }
      } else { // Wrong packet - either we lost packet or sender sends wrong, so free this
        N2kMsgDbgStart("Invalid packet: "); N2kMsgDbgln(buf[0]);
        if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // We need to abort transport
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	4619      	mov	r1, r3
 800f526:	460b      	mov	r3, r1
 800f528:	019b      	lsls	r3, r3, #6
 800f52a:	440b      	add	r3, r1
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f534:	2b00      	cmp	r3, #0
 800f536:	d014      	beq.n	800f562 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
 800f538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	db11      	blt.n	800f562 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
          SendTPCM_Abort(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,TP_CM_AbortTimeout);  // Abort transport
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	4619      	mov	r1, r3
 800f548:	460b      	mov	r3, r1
 800f54a:	019b      	lsls	r3, r3, #6
 800f54c:	440b      	add	r3, r1
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	6899      	ldr	r1, [r3, #8]
 800f554:	79fa      	ldrb	r2, [r7, #7]
 800f556:	2303      	movs	r3, #3
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f7ff fa4a 	bl	800e9f6 <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        }
        N2kCANMsgBuf[MsgIndex].FreeMessage();
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	4619      	mov	r1, r3
 800f56c:	460b      	mov	r3, r1
 800f56e:	019b      	lsls	r3, r3, #6
 800f570:	440b      	add	r3, r1
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	4618      	mov	r0, r3
 800f578:	f7fb fe56 	bl	800b228 <_ZN10tN2kCANMsg11FreeMessageEv>

      }
      if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	4619      	mov	r1, r3
 800f586:	460b      	mov	r3, r1
 800f588:	019b      	lsls	r3, r3, #6
 800f58a:	440b      	add	r3, r1
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f594:	f083 0301 	eor.w	r3, r3, #1
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d004      	beq.n	800f5a8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f5a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5a6:	701a      	strb	r2, [r3, #0]
    }
    return true; // We handled message
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e000      	b.n	800f5ae <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  }

  return false;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3734      	adds	r7, #52	; 0x34
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd90      	pop	{r4, r7, pc}
 800f5b6:	bf00      	nop

0800f5b8 <_ZN7tN2kMsgaSERKS_>:
class tN2kMsg
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	791a      	ldrb	r2, [r3, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	711a      	strb	r2, [r3, #4]
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	689a      	ldr	r2, [r3, #8]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	609a      	str	r2, [r3, #8]
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	7b1a      	ldrb	r2, [r3, #12]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	731a      	strb	r2, [r3, #12]
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	7b5a      	ldrb	r2, [r3, #13]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	735a      	strb	r2, [r3, #13]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	691a      	ldr	r2, [r3, #16]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	611a      	str	r2, [r3, #16]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f103 0114 	add.w	r1, r3, #20
 800f5f0:	22de      	movs	r2, #222	; 0xde
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	3314      	adds	r3, #20
 800f5f6:	2a00      	cmp	r2, #0
 800f5f8:	db05      	blt.n	800f606 <_ZN7tN2kMsgaSERKS_+0x4e>
 800f5fa:	7818      	ldrb	r0, [r3, #0]
 800f5fc:	7008      	strb	r0, [r1, #0]
 800f5fe:	3101      	adds	r1, #1
 800f600:	3301      	adds	r3, #1
 800f602:	3a01      	subs	r2, #1
 800f604:	e7f7      	b.n	800f5f6 <_ZN7tN2kMsgaSERKS_+0x3e>
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4618      	mov	r0, r3
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	bc80      	pop	{r7}
 800f628:	4770      	bx	lr

0800f62a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>:

//*****************************************************************************
bool tNMEA2000::StartSendTPMessage(const tN2kMsg& msg, int iDev) {
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b086      	sub	sp, #24
 800f62e:	af00      	add	r7, sp, #0
 800f630:	60f8      	str	r0, [r7, #12]
 800f632:	60b9      	str	r1, [r7, #8]
 800f634:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 800f636:	6879      	ldr	r1, [r7, #4]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f7fc f95a 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800f63e:	4603      	mov	r3, r0
 800f640:	f083 0301 	eor.w	r3, r3, #1
 800f644:	b2db      	uxtb	r3, r3
 800f646:	2b00      	cmp	r3, #0
 800f648:	d001      	beq.n	800f64e <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x24>
 800f64a:	2300      	movs	r3, #0
 800f64c:	e061      	b.n	800f712 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  if ( Devices[iDev].PendingTPMsg.PGN!=0 ) return false; // No room for sending TP message
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	69da      	ldr	r2, [r3, #28]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f658:	fb01 f303 	mul.w	r3, r1, r3
 800f65c:	4413      	add	r3, r2
 800f65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f660:	2b00      	cmp	r3, #0
 800f662:	d001      	beq.n	800f668 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x3e>
 800f664:	2300      	movs	r3, #0
 800f666:	e054      	b.n	800f712 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  int result=false;
 800f668:	2300      	movs	r3, #0
 800f66a:	617b      	str	r3, [r7, #20]

  Devices[iDev].HasPendingInformation=true;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	69da      	ldr	r2, [r3, #28]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f676:	fb01 f303 	mul.w	r3, r1, r3
 800f67a:	4413      	add	r3, r2
 800f67c:	2201      	movs	r2, #1
 800f67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  Devices[iDev].PendingTPMsg=msg;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	69da      	ldr	r2, [r3, #28]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f68c:	fb01 f303 	mul.w	r3, r1, r3
 800f690:	4413      	add	r3, r2
 800f692:	3340      	adds	r3, #64	; 0x40
 800f694:	68b9      	ldr	r1, [r7, #8]
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff ff8e 	bl	800f5b8 <_ZN7tN2kMsgaSERKS_>
  Devices[iDev].NextDTSequence=0;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	69da      	ldr	r2, [r3, #28]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f6a6:	fb01 f303 	mul.w	r3, r1, r3
 800f6aa:	4413      	add	r3, r2
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  Devices[iDev].NextDTSendTime.FromNow(50);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	69da      	ldr	r2, [r3, #28]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f6bc:	fb01 f303 	mul.w	r3, r1, r3
 800f6c0:	4413      	add	r3, r2
 800f6c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f6c6:	2132      	movs	r1, #50	; 0x32
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fb fe7e 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
  if ( IsBroadcast(msg.Destination) ) { // Start with BAM
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	7b5b      	ldrb	r3, [r3, #13]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7f8 f871 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d006      	beq.n	800f6ec <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xc2>
    result=SendTPCM_BAM(iDev);
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f7fe feab 	bl	800e43c <_ZN9tNMEA200012SendTPCM_BAMEi>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	617b      	str	r3, [r7, #20]
 800f6ea:	e005      	b.n	800f6f8 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xce>
  } else {
    result=SendTPCM_RTS(iDev);
 800f6ec:	6879      	ldr	r1, [r7, #4]
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7fe ff6e 	bl	800e5d0 <_ZN9tNMEA200012SendTPCM_RTSEi>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	617b      	str	r3, [r7, #20]
  }

  if ( !result ) EndSendTPMessage(iDev); // Currently no retry
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d103      	bne.n	800f706 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xdc>
 800f6fe:	6879      	ldr	r1, [r7, #4]
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 f80a 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>

  return result;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	bf14      	ite	ne
 800f70c:	2301      	movne	r3, #1
 800f70e:	2300      	moveq	r3, #0
 800f710:	b2db      	uxtb	r3, r3
}
 800f712:	4618      	mov	r0, r3
 800f714:	3718      	adds	r7, #24
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <_ZN9tNMEA200016EndSendTPMessageEi>:

//*****************************************************************************
void tNMEA2000::EndSendTPMessage(int iDev) {
 800f71a:	b580      	push	{r7, lr}
 800f71c:	b082      	sub	sp, #8
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	6039      	str	r1, [r7, #0]
  Devices[iDev].PendingTPMsg.Clear();
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	69da      	ldr	r2, [r3, #28]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f72e:	fb01 f303 	mul.w	r3, r1, r3
 800f732:	4413      	add	r3, r2
 800f734:	3340      	adds	r3, #64	; 0x40
 800f736:	4618      	mov	r0, r3
 800f738:	f7fa fc79 	bl	800a02e <_ZN7tN2kMsg5ClearEv>
  Devices[iDev].NextDTSendTime.Disable();
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	69da      	ldr	r2, [r3, #28]
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f746:	fb01 f303 	mul.w	r3, r1, r3
 800f74a:	4413      	add	r3, r2
 800f74c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f750:	4618      	mov	r0, r3
 800f752:	f7fb fded 	bl	800b330 <_ZN13tN2kScheduler7DisableEv>
  Devices[iDev].UpdateHasPendingInformation();
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	69da      	ldr	r2, [r3, #28]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f760:	fb01 f303 	mul.w	r3, r1, r3
 800f764:	4413      	add	r3, r2
 800f766:	4618      	mov	r0, r3
 800f768:	f7fc f811 	bl	800b78e <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
}
 800f76c:	bf00      	nop
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <_ZN9tNMEA200020SendPendingTPMessageEi>:

//*****************************************************************************
void tNMEA2000::SendPendingTPMessage(int iDev) {
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  if ( Devices[iDev].PendingTPMsg.PGN!=0 && Devices[iDev].NextDTSendTime.IsTime() ) { // Pending message and timed out
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	69da      	ldr	r2, [r3, #28]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f788:	fb01 f303 	mul.w	r3, r1, r3
 800f78c:	4413      	add	r3, r2
 800f78e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f790:	2b00      	cmp	r3, #0
 800f792:	d011      	beq.n	800f7b8 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	69da      	ldr	r2, [r3, #28]
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f79e:	fb01 f303 	mul.w	r3, r1, r3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fb fdf0 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e000      	b.n	800f7ba <_ZN9tNMEA200020SendPendingTPMessageEi+0x46>
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d031      	beq.n	800f822 <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
    if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) { // For broadcast we just send next data
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	69da      	ldr	r2, [r3, #28]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f7c8:	fb01 f303 	mul.w	r3, r1, r3
 800f7cc:	4413      	add	r3, r2
 800f7ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f7 fff1 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d01d      	beq.n	800f81a <_ZN9tNMEA200020SendPendingTPMessageEi+0xa6>
      SendTPDT(iDev);
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7ff f999 	bl	800eb18 <_ZN9tNMEA20008SendTPDTEi>
      Devices[iDev].NextDTSendTime.FromNow(50);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	69da      	ldr	r2, [r3, #28]
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f7f0:	fb01 f303 	mul.w	r3, r1, r3
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f7fa:	2132      	movs	r1, #50	; 0x32
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fb fde4 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
      if ( HasAllTPDTSent(iDev) ) EndSendTPMessage(iDev); // All done
 800f802:	6839      	ldr	r1, [r7, #0]
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff fa7c 	bl	800ed02 <_ZN9tNMEA200014HasAllTPDTSentEi>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d008      	beq.n	800f822 <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7ff ff81 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
    } else { // We have not got response from receiver within timeout, so just end. Or should we retry?
      EndSendTPMessage(iDev);
    }
  }
}
 800f818:	e003      	b.n	800f822 <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
      EndSendTPMessage(iDev);
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff ff7c 	bl	800f71a <_ZN9tNMEA200016EndSendTPMessageEi>
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <_Z22IsFastPacketFirstFrameh>:

#endif

//*****************************************************************************
inline bool IsFastPacketFirstFrame(unsigned char b) { return ((b & 0x1F)==0); }
 800f82a:	b480      	push	{r7}
 800f82c:	b083      	sub	sp, #12
 800f82e:	af00      	add	r7, sp, #0
 800f830:	4603      	mov	r3, r0
 800f832:	71fb      	strb	r3, [r7, #7]
 800f834:	79fb      	ldrb	r3, [r7, #7]
 800f836:	f003 031f 	and.w	r3, r3, #31
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	bf0c      	ite	eq
 800f83e:	2301      	moveq	r3, #1
 800f840:	2300      	movne	r3, #0
 800f842:	b2db      	uxtb	r3, r3
 800f844:	4618      	mov	r0, r3
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	bc80      	pop	{r7}
 800f84c:	4770      	bx	lr

0800f84e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>:

//*****************************************************************************
// Function handles received CAN frame and adds it to tN2kCANMsg.
// Returns: Index to ready tN2kCANMsg or MaxN2kCANMsgs, if we skipped the frame
//          or message is not ready (fast packet or ISO Multi-Packet)
uint8_t tNMEA2000::SetN2kCANBufMsg(unsigned long canId, unsigned char len, unsigned char *buf) {
 800f84e:	b590      	push	{r4, r7, lr}
 800f850:	b08d      	sub	sp, #52	; 0x34
 800f852:	af04      	add	r7, sp, #16
 800f854:	60f8      	str	r0, [r7, #12]
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	4613      	mov	r3, r2
 800f85c:	71fb      	strb	r3, [r7, #7]
  unsigned char Source;
  unsigned char Destination;
  bool FastPacket;
  bool SystemMessage;
  bool KnownMessage;
  uint8_t MsgIndex=MaxN2kCANMsgs;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f864:	74fb      	strb	r3, [r7, #19]

    CanIdToN2k(canId,Priority,PGN,Source,Destination);
 800f866:	f107 0017 	add.w	r0, r7, #23
 800f86a:	f107 0218 	add.w	r2, r7, #24
 800f86e:	f107 011e 	add.w	r1, r7, #30
 800f872:	f107 0316 	add.w	r3, r7, #22
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	4603      	mov	r3, r0
 800f87a:	68b8      	ldr	r0, [r7, #8]
 800f87c:	f7fd fde0 	bl	800d440 <_Z10CanIdToN2kmRhRmS_S_>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    if ( !TestHandleTPMessage(PGN,Source,Destination,len,buf,MsgIndex) )
 800f880:	69b9      	ldr	r1, [r7, #24]
 800f882:	7dfa      	ldrb	r2, [r7, #23]
 800f884:	7db8      	ldrb	r0, [r7, #22]
 800f886:	f107 0313 	add.w	r3, r7, #19
 800f88a:	9302      	str	r3, [sp, #8]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	9301      	str	r3, [sp, #4]
 800f890:	79fb      	ldrb	r3, [r7, #7]
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	4603      	mov	r3, r0
 800f896:	68f8      	ldr	r0, [r7, #12]
 800f898:	f7ff fa5a 	bl	800ed50 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>
 800f89c:	4603      	mov	r3, r0
 800f89e:	f083 0301 	eor.w	r3, r3, #1
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f000 81a3 	beq.w	800fbf0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
#endif
    {
      KnownMessage=CheckKnownMessage(PGN,SystemMessage,FastPacket);
 800f8aa:	69b9      	ldr	r1, [r7, #24]
 800f8ac:	f107 0315 	add.w	r3, r7, #21
 800f8b0:	f107 0214 	add.w	r2, r7, #20
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7fe fbdd 	bl	800e074 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	77fb      	strb	r3, [r7, #31]
      if ( KnownMessage || !HandleOnlyKnownMessages() ) {
 800f8be:	7ffb      	ldrb	r3, [r7, #31]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d108      	bne.n	800f8d6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x88>
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7fb ffee 	bl	800b8a6 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	f083 0301 	eor.w	r3, r3, #1
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8c>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e000      	b.n	800f8dc <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8e>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f000 8187 	beq.w	800fbf0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
        if (FastPacket && !IsFastPacketFirstFrame(buf[0]) ) { // Not first frame
 800f8e2:	7d7b      	ldrb	r3, [r7, #21]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00c      	beq.n	800f902 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7ff ff9c 	bl	800f82a <_Z22IsFastPacketFirstFrameh>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	f083 0301 	eor.w	r3, r3, #1
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e000      	b.n	800f904 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb6>
 800f902:	2300      	movs	r3, #0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d07e      	beq.n	800fa06 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x1b8>
        N2kFrameInDbgStart("New frame="); N2kFrameInDbg(PGN); N2kFrameInDbg(" frame="); N2kFrameInDbg(buf[0],HEX); N2kFrameInDbgln();
          // Find previous slot for this PGN
          for (MsgIndex=0;
 800f908:	2300      	movs	r3, #0
 800f90a:	74fb      	strb	r3, [r7, #19]
               MsgIndex<MaxN2kCANMsgs &&
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f912:	7cfb      	ldrb	r3, [r7, #19]
 800f914:	429a      	cmp	r2, r3
 800f916:	d92a      	bls.n	800f96e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f91c:	7cfb      	ldrb	r3, [r7, #19]
 800f91e:	4619      	mov	r1, r3
 800f920:	460b      	mov	r3, r1
 800f922:	019b      	lsls	r3, r3, #6
 800f924:	440b      	add	r3, r1
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	689a      	ldr	r2, [r3, #8]
 800f92c:	69bb      	ldr	r3, [r7, #24]
               MsgIndex<MaxN2kCANMsgs &&
 800f92e:	429a      	cmp	r2, r3
 800f930:	d11b      	bne.n	800f96a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
                  && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f936:	7cfb      	ldrb	r3, [r7, #19]
 800f938:	4619      	mov	r1, r3
 800f93a:	460b      	mov	r3, r1
 800f93c:	019b      	lsls	r3, r3, #6
 800f93e:	440b      	add	r3, r1
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	4413      	add	r3, r2
 800f944:	7b1a      	ldrb	r2, [r3, #12]
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d10e      	bne.n	800f96a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
                  && !N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f950:	7cfb      	ldrb	r3, [r7, #19]
 800f952:	4619      	mov	r1, r3
 800f954:	460b      	mov	r3, r1
 800f956:	019b      	lsls	r3, r3, #6
 800f958:	440b      	add	r3, r1
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4413      	add	r3, r2
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f8 fc4c 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 800f964:	4603      	mov	r3, r0
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               MsgIndex<MaxN2kCANMsgs &&
 800f96a:	2301      	movs	r3, #1
 800f96c:	e000      	b.n	800f970 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x122>
 800f96e:	2300      	movs	r3, #0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d004      	beq.n	800f97e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x130>
          for (MsgIndex=0;
 800f974:	7cfb      	ldrb	r3, [r7, #19]
 800f976:	3301      	adds	r3, #1
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	74fb      	strb	r3, [r7, #19]
 800f97c:	e7c6      	b.n	800f90c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xbe>
#endif
                );
               MsgIndex++);
          if (MsgIndex<MaxN2kCANMsgs) { // we found start for this message, so add data to it.
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f984:	7cfb      	ldrb	r3, [r7, #19]
 800f986:	429a      	cmp	r2, r3
 800f988:	f240 80f2 	bls.w	800fb70 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right frame is coming
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f990:	7cfb      	ldrb	r3, [r7, #19]
 800f992:	4619      	mov	r1, r3
 800f994:	460b      	mov	r3, r1
 800f996:	019b      	lsls	r3, r3, #6
 800f998:	440b      	add	r3, r1
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	7812      	ldrb	r2, [r2, #0]
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d11b      	bne.n	800f9e4 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x196>
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9b0:	7cfb      	ldrb	r3, [r7, #19]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	019b      	lsls	r3, r3, #6
 800f9b8:	440b      	add	r3, r1
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	4413      	add	r3, r2
 800f9be:	683a      	ldr	r2, [r7, #0]
 800f9c0:	7812      	ldrb	r2, [r2, #0]
 800f9c2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9ca:	7cfb      	ldrb	r3, [r7, #19]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	019b      	lsls	r3, r3, #6
 800f9d2:	440b      	add	r3, r1
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	18d0      	adds	r0, r2, r3
 800f9d8:	79fa      	ldrb	r2, [r7, #7]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	2101      	movs	r1, #1
 800f9de:	f7fe fc2e 	bl	800e23e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
 800f9e2:	e0c5      	b.n	800fb70 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else { // We have lost frame, so free this
              N2kFrameErrDbgStart("Lost frame ");  N2kFrameErrDbg(N2kCANMsgBuf[MsgIndex].LastFrame); N2kFrameErrDbg("/");  N2kFrameErrDbg(buf[0]);
              N2kFrameErrDbg(", source ");  N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
              N2kCANMsgBuf[MsgIndex].FreeMessage();
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9e8:	7cfb      	ldrb	r3, [r7, #19]
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	019b      	lsls	r3, r3, #6
 800f9f0:	440b      	add	r3, r1
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	4413      	add	r3, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fb fc16 	bl	800b228 <_ZN10tN2kCANMsg11FreeMessageEv>
              MsgIndex=MaxN2kCANMsgs;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fa02:	74fb      	strb	r3, [r7, #19]
 800fa04:	e0b4      	b.n	800fb70 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
              N2kFrameErrDbgStart("Orphan frame "); N2kFrameErrDbg(buf[0]); N2kFrameErrDbg(", source ");
              N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
          }
        } else { // Handle first frame
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
          FindFreeCANMsgIndex(PGN,Source,Destination,false,MsgIndex);
 800fa06:	69b9      	ldr	r1, [r7, #24]
 800fa08:	7dfa      	ldrb	r2, [r7, #23]
 800fa0a:	7db8      	ldrb	r0, [r7, #22]
 800fa0c:	f107 0313 	add.w	r3, r7, #19
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	2300      	movs	r3, #0
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	4603      	mov	r3, r0
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f7fe fc4a 	bl	800e2b2 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>
#else
          FindFreeCANMsgIndex(PGN,Source,Destination,MsgIndex);
#endif
          if ( MsgIndex<MaxN2kCANMsgs ) { // we found free place, so handle frame
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fa24:	7cfb      	ldrb	r3, [r7, #19]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	f240 80a2 	bls.w	800fb70 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa30:	7cfb      	ldrb	r3, [r7, #19]
 800fa32:	4619      	mov	r1, r3
 800fa34:	460b      	mov	r3, r1
 800fa36:	019b      	lsls	r3, r3, #6
 800fa38:	440b      	add	r3, r1
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	4413      	add	r3, r2
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].KnownMessage=KnownMessage;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa48:	7cfb      	ldrb	r3, [r7, #19]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	019b      	lsls	r3, r3, #6
 800fa50:	440b      	add	r3, r1
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4413      	add	r3, r2
 800fa56:	7ffa      	ldrb	r2, [r7, #31]
 800fa58:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            N2kCANMsgBuf[MsgIndex].SystemMessage=SystemMessage;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa60:	7cfb      	ldrb	r3, [r7, #19]
 800fa62:	4619      	mov	r1, r3
 800fa64:	460b      	mov	r3, r1
 800fa66:	019b      	lsls	r3, r3, #6
 800fa68:	440b      	add	r3, r1
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	7d3a      	ldrb	r2, [r7, #20]
 800fa70:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(Priority,PGN,Source,Destination);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa78:	7cfb      	ldrb	r3, [r7, #19]
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	019b      	lsls	r3, r3, #6
 800fa80:	440b      	add	r3, r1
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	461c      	mov	r4, r3
 800fa88:	7fb9      	ldrb	r1, [r7, #30]
 800fa8a:	69ba      	ldr	r2, [r7, #24]
 800fa8c:	7df8      	ldrb	r0, [r7, #23]
 800fa8e:	7dbb      	ldrb	r3, [r7, #22]
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	4603      	mov	r3, r0
 800fa94:	4620      	mov	r0, r4
 800fa96:	f7fa fa90 	bl	8009fba <_ZN7tN2kMsg4InitEhmhh>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage(false);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa9e:	7cfb      	ldrb	r3, [r7, #19]
 800faa0:	4619      	mov	r1, r3
 800faa2:	460b      	mov	r3, r1
 800faa4:	019b      	lsls	r3, r3, #6
 800faa6:	440b      	add	r3, r1
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	2100      	movs	r1, #0
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fb fb5f 	bl	800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fab8:	7cfb      	ldrb	r3, [r7, #19]
 800faba:	4619      	mov	r1, r3
 800fabc:	460b      	mov	r3, r1
 800fabe:	019b      	lsls	r3, r3, #6
 800fac0:	440b      	add	r3, r1
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	4413      	add	r3, r2
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            if (FastPacket) {
 800facc:	7d7b      	ldrb	r3, [r7, #21]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d029      	beq.n	800fb26 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x2d8>
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],2,len,buf);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fad6:	7cfb      	ldrb	r3, [r7, #19]
 800fad8:	4619      	mov	r1, r3
 800fada:	460b      	mov	r3, r1
 800fadc:	019b      	lsls	r3, r3, #6
 800fade:	440b      	add	r3, r1
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	18d0      	adds	r0, r2, r3
 800fae4:	79fa      	ldrb	r2, [r7, #7]
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	2102      	movs	r1, #2
 800faea:	f7fe fba8 	bl	800e23e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("First frame="); N2kFrameInDbg(PGN);  N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800faf2:	7cfb      	ldrb	r3, [r7, #19]
 800faf4:	4619      	mov	r1, r3
 800faf6:	460b      	mov	r3, r1
 800faf8:	019b      	lsls	r3, r3, #6
 800fafa:	440b      	add	r3, r1
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	4413      	add	r3, r2
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	7812      	ldrb	r2, [r2, #0]
 800fb04:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=buf[1];
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	7818      	ldrb	r0, [r3, #0]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb12:	7cfb      	ldrb	r3, [r7, #19]
 800fb14:	4619      	mov	r1, r3
 800fb16:	460b      	mov	r3, r1
 800fb18:	019b      	lsls	r3, r3, #6
 800fb1a:	440b      	add	r3, r1
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	4413      	add	r3, r2
 800fb20:	4602      	mov	r2, r0
 800fb22:	611a      	str	r2, [r3, #16]
 800fb24:	e024      	b.n	800fb70 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else {
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],0,len,buf);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb2a:	7cfb      	ldrb	r3, [r7, #19]
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	460b      	mov	r3, r1
 800fb30:	019b      	lsls	r3, r3, #6
 800fb32:	440b      	add	r3, r1
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	18d0      	adds	r0, r2, r3
 800fb38:	79fa      	ldrb	r2, [r7, #7]
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	f7fe fb7e 	bl	800e23e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("Single frame="); N2kFrameInDbg(PGN); N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=0;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb46:	7cfb      	ldrb	r3, [r7, #19]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	019b      	lsls	r3, r3, #6
 800fb4e:	440b      	add	r3, r1
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	4413      	add	r3, r2
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=len;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb5e:	7cfb      	ldrb	r3, [r7, #19]
 800fb60:	4619      	mov	r1, r3
 800fb62:	460b      	mov	r3, r1
 800fb64:	019b      	lsls	r3, r3, #6
 800fb66:	440b      	add	r3, r1
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4413      	add	r3, r2
 800fb6c:	79fa      	ldrb	r2, [r7, #7]
 800fb6e:	611a      	str	r2, [r3, #16]
            }
          }
        }

        if ( MsgIndex<MaxN2kCANMsgs ) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fb76:	7cfb      	ldrb	r3, [r7, #19]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d939      	bls.n	800fbf0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
          N2kCANMsgBuf[MsgIndex].Ready=(N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb80:	7cfb      	ldrb	r3, [r7, #19]
 800fb82:	4619      	mov	r1, r3
 800fb84:	460b      	mov	r3, r1
 800fb86:	019b      	lsls	r3, r3, #6
 800fb88:	440b      	add	r3, r1
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	4413      	add	r3, r2
 800fb8e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800fb92:	461c      	mov	r4, r3
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb98:	7cfb      	ldrb	r3, [r7, #19]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	019b      	lsls	r3, r3, #6
 800fba0:	440b      	add	r3, r1
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	691a      	ldr	r2, [r3, #16]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800fbac:	7cfb      	ldrb	r3, [r7, #19]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	019b      	lsls	r3, r3, #6
 800fbb4:	4403      	add	r3, r0
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	440b      	add	r3, r1
 800fbba:	4294      	cmp	r4, r2
 800fbbc:	bfac      	ite	ge
 800fbbe:	2201      	movge	r2, #1
 800fbc0:	2200      	movlt	r2, #0
 800fbc2:	b2d2      	uxtb	r2, r2
 800fbc4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs; // If packet is not ready, do not return index to it
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbcc:	7cfb      	ldrb	r3, [r7, #19]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	019b      	lsls	r3, r3, #6
 800fbd4:	440b      	add	r3, r1
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	4413      	add	r3, r2
 800fbda:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fbde:	f083 0301 	eor.w	r3, r3, #1
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d003      	beq.n	800fbf0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fbee:	74fb      	strb	r3, [r7, #19]
        }
      }
    }

    return MsgIndex;
 800fbf0:	7cfb      	ldrb	r3, [r7, #19]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3724      	adds	r7, #36	; 0x24
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd90      	pop	{r4, r7, pc}

0800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>:

//*****************************************************************************
 int tNMEA2000::FindSourceDeviceIndex(unsigned char Source) {
 800fbfa:	b480      	push	{r7}
 800fbfc:	b085      	sub	sp, #20
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
 800fc02:	460b      	mov	r3, r1
 800fc04:	70fb      	strb	r3, [r7, #3]
   int i=DeviceCount;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	60fb      	str	r3, [r7, #12]

     if ( Source<=253 ) {
 800fc0c:	78fb      	ldrb	r3, [r7, #3]
 800fc0e:	2bfd      	cmp	r3, #253	; 0xfd
 800fc10:	d816      	bhi.n	800fc40 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x46>
       for (i=0; i<DeviceCount && Devices[i].N2kSource!=Source; i++);
 800fc12:	2300      	movs	r3, #0
 800fc14:	60fb      	str	r3, [r7, #12]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	da0f      	bge.n	800fc40 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x46>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	69da      	ldr	r2, [r3, #28]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fc2a:	fb01 f303 	mul.w	r3, r1, r3
 800fc2e:	4413      	add	r3, r2
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	78fa      	ldrb	r2, [r7, #3]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d003      	beq.n	800fc40 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x46>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e7ea      	b.n	800fc16 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x1c>
     }

     return (i<DeviceCount?i:-1);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	da01      	bge.n	800fc4e <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x54>
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	e001      	b.n	800fc52 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x58>
 800fc4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bc80      	pop	{r7}
 800fc5a:	4770      	bx	lr

0800fc5c <_ZN9tNMEA200010IsMySourceEh>:

//*****************************************************************************
bool tNMEA2000::IsMySource(unsigned char Source) {
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	460b      	mov	r3, r1
 800fc66:	70fb      	strb	r3, [r7, #3]
    return (FindSourceDeviceIndex(Source)!=-1);
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff ffc4 	bl	800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800fc72:	4603      	mov	r3, r0
 800fc74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc78:	bf14      	ite	ne
 800fc7a:	2301      	movne	r3, #1
 800fc7c:	2300      	moveq	r3, #0
 800fc7e:	b2db      	uxtb	r3, r3
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kMsg &N2kMsg) {
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7fb fdbb 	bl	800b80e <_ZNK9tNMEA200014ForwardEnabledEv>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	f083 0301 	eor.w	r3, r3, #1
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d118      	bne.n	800fcd6 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x4e>
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7fb fdec 	bl	800b882 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	f083 0301 	eor.w	r3, r3, #1
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d10b      	bne.n	800fcce <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x46>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	7b1b      	ldrb	r3, [r3, #12]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff ffcd 	bl	800fc5c <_ZN9tNMEA200010IsMySourceEh>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	f083 0301 	eor.w	r3, r3, #1
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d005      	beq.n	800fcda <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	795b      	ldrb	r3, [r3, #5]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d101      	bne.n	800fcda <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e000      	b.n	800fcdc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x54>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d115      	bne.n	800fd0c <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x84>

  switch (ForwardType) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	799b      	ldrb	r3, [r3, #6]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d002      	beq.n	800fcee <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x66>
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d007      	beq.n	800fcfc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x74>
 800fcec:	e00f      	b.n	800fd0e <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Actisense:
      N2kMsg.SendInActisenseFormat(ForwardStream);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6838      	ldr	r0, [r7, #0]
 800fcf6:	f7fa feab 	bl	800aa50 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 800fcfa:	e008      	b.n	800fd0e <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Text:
      N2kMsg.Print(ForwardStream);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	68db      	ldr	r3, [r3, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	4619      	mov	r1, r3
 800fd04:	6838      	ldr	r0, [r7, #0]
 800fd06:	f7fa fdef 	bl	800a8e8 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 800fd0a:	e000      	b.n	800fd0e <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 800fd0c:	bf00      	nop
  }
}
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kCANMsg &N2kCanMsg) {
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  if ( N2kCanMsg.KnownMessage || !ForwardOnlyKnownMessages() ) ForwardMessage(N2kCanMsg.N2kMsg);
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d108      	bne.n	800fd3a <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x26>
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7fb fd98 	bl	800b85e <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	f083 0301 	eor.w	r3, r3, #1
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2a>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e000      	b.n	800fd40 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2c>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d004      	beq.n	800fd4e <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x3a>
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	4619      	mov	r1, r3
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff ff9d 	bl	800fc88 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
}
 800fd4e:	bf00      	nop
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>:

//*****************************************************************************
void tNMEA2000::SendIsoAddressClaim(unsigned char Destination, int DeviceIndex, unsigned long FromNow) {
 800fd56:	b590      	push	{r4, r7, lr}
 800fd58:	b0c7      	sub	sp, #284	; 0x11c
 800fd5a:	af02      	add	r7, sp, #8
 800fd5c:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800fd60:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800fd64:	6020      	str	r0, [r4, #0]
 800fd66:	4608      	mov	r0, r1
 800fd68:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800fd6c:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800fd70:	600a      	str	r2, [r1, #0]
 800fd72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fd76:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd80:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800fd84:	4602      	mov	r2, r0
 800fd86:	701a      	strb	r2, [r3, #0]

  // Some devices (Garmin) request constantly information on network about others
  // 59904 ISO Request:  PGN = 60928
  // So we need to Re-send Address claim, or they will stop detecting us
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800fd88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd8c:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	2bff      	cmp	r3, #255	; 0xff
 800fd94:	d10d      	bne.n	800fdb2 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 800fd96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fda4:	d105      	bne.n	800fdb2 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 800fda6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fdae:	2200      	movs	r2, #0
 800fdb0:	601a      	str	r2, [r3, #0]

  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 800fdb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	db76      	blt.n	800feae <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>
 800fdc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fdd0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800fdd4:	6812      	ldr	r2, [r2, #0]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	da69      	bge.n	800feae <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>

  // Set pending, if we have delayed it.
  if ( FromNow>0 ) {
 800fdda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d018      	beq.n	800fe1a <_ZN9tNMEA200019SendIsoAddressClaimEhim+0xc4>
    Devices[DeviceIndex].SetPendingIsoAddressClaim(FromNow);
 800fde8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69da      	ldr	r2, [r3, #28]
 800fdf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdf8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fe02:	fb01 f303 	mul.w	r3, r1, r3
 800fe06:	441a      	add	r2, r3
 800fe08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fe10:	6819      	ldr	r1, [r3, #0]
 800fe12:	4610      	mov	r0, r2
 800fe14:	f7fb fbfc 	bl	800b610 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>
    return;
 800fe18:	e04a      	b.n	800feb0 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  }

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800fe1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	69da      	ldr	r2, [r3, #28]
 800fe26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fe34:	fb01 f303 	mul.w	r3, r1, r3
 800fe38:	4413      	add	r3, r2
 800fe3a:	7819      	ldrb	r1, [r3, #0]
 800fe3c:	f107 0014 	add.w	r0, r7, #20
 800fe40:	2300      	movs	r3, #0
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	2300      	movs	r3, #0
 800fe46:	2206      	movs	r2, #6
 800fe48:	f7fa f86a 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

    RespondMsg.Destination=Destination;
 800fe4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe50:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    SetN2kISOAddressClaim(RespondMsg,Devices[DeviceIndex].DeviceInformation.GetName());
 800fe5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	69da      	ldr	r2, [r3, #28]
 800fe66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fe74:	fb01 f303 	mul.w	r3, r1, r3
 800fe78:	4413      	add	r3, r2
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7f7 fc8f 	bl	80077a0 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	f107 0114 	add.w	r1, r7, #20
 800fe8a:	4608      	mov	r0, r1
 800fe8c:	f7fb fdf8 	bl	800ba80 <_Z21SetN2kISOAddressClaimR7tN2kMsgy>
    SendMsg(RespondMsg,DeviceIndex);
 800fe90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe94:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800fe98:	f107 0114 	add.w	r1, r7, #20
 800fe9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fea4:	6812      	ldr	r2, [r2, #0]
 800fea6:	6818      	ldr	r0, [r3, #0]
 800fea8:	f7fd fe80 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800feac:	e000      	b.n	800feb0 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 800feae:	bf00      	nop
}
 800feb0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd90      	pop	{r4, r7, pc}

0800feb8 <_ZN9tNMEA200013SendTxPGNListEhib>:

#define MAX_PGNS_IN_LIST 74

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 800feb8:	b590      	push	{r4, r7, lr}
 800feba:	b0cb      	sub	sp, #300	; 0x12c
 800febc:	af02      	add	r7, sp, #8
 800febe:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800fec2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800fec6:	6020      	str	r0, [r4, #0]
 800fec8:	4608      	mov	r0, r1
 800feca:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800fece:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800fed2:	600a      	str	r2, [r1, #0]
 800fed4:	4619      	mov	r1, r3
 800fed6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800feda:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800fede:	4602      	mov	r2, r0
 800fee0:	701a      	strb	r2, [r3, #0]
 800fee2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fee6:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800feea:	460a      	mov	r2, r1
 800feec:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800feee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fef2:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2bff      	cmp	r3, #255	; 0xff
 800fefa:	d10d      	bne.n	800ff18 <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 800fefc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff0a:	d105      	bne.n	800ff18 <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 800ff0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ff14:	2200      	movs	r2, #0
 800ff16:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 800ff18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff1c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800ff20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ff28:	6811      	ldr	r1, [r2, #0]
 800ff2a:	6818      	ldr	r0, [r3, #0]
 800ff2c:	f7fb fce1 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 800ff30:	4603      	mov	r3, r0
 800ff32:	f083 0301 	eor.w	r3, r3, #1
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f040 80cb 	bne.w	80100d4 <_ZN9tNMEA200013SendTxPGNListEhib+0x21c>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800ff3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	69da      	ldr	r2, [r3, #28]
 800ff4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ff58:	fb01 f303 	mul.w	r3, r1, r3
 800ff5c:	4413      	add	r3, r2
 800ff5e:	7819      	ldrb	r1, [r3, #0]
 800ff60:	f107 0014 	add.w	r0, r7, #20
 800ff64:	2300      	movs	r3, #0
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	2300      	movs	r3, #0
 800ff6a:	2206      	movs	r2, #6
 800ff6c:	f7f9 ffd8 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 800ff70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ff78:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800ff7c:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 800ff80:	7812      	ldrb	r2, [r2, #0]
 800ff82:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 800ff84:	f107 0314 	add.w	r3, r7, #20
 800ff88:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7f9 fff9 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 800ff92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ff9a:	2206      	movs	r2, #6
 800ff9c:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 800ff9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ffa2:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800ffa6:	781a      	ldrb	r2, [r3, #0]
 800ffa8:	f107 0314 	add.w	r3, r7, #20
 800ffac:	4611      	mov	r1, r2
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fb f8df 	bl	800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_transmit);
 800ffb4:	f107 0314 	add.w	r3, r7, #20
 800ffb8:	2100      	movs	r1, #0
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fa f922 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ffcc:	4a44      	ldr	r2, [pc, #272]	; (80100e0 <_ZN9tNMEA200013SendTxPGNListEhib+0x228>)
 800ffce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ffd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ffda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d005      	beq.n	800ffee <_ZN9tNMEA200013SendTxPGNListEhib+0x136>
 800ffe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ffe6:	2b49      	cmp	r3, #73	; 0x49
 800ffe8:	d801      	bhi.n	800ffee <_ZN9tNMEA200013SendTxPGNListEhib+0x136>
 800ffea:	2301      	movs	r3, #1
 800ffec:	e000      	b.n	800fff0 <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 800ffee:	2300      	movs	r3, #0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d012      	beq.n	801001a <_ZN9tNMEA200013SendTxPGNListEhib+0x162>
      RespondMsg.Add3ByteInt(PGN);
 800fff4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fff8:	f107 0314 	add.w	r3, r7, #20
 800fffc:	4611      	mov	r1, r2
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fa f8c9 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8010004:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010008:	3301      	adds	r3, #1
 801000a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801000e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010012:	3301      	adds	r3, #1
 8010014:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010018:	e7d8      	b.n	800ffcc <_ZN9tNMEA200013SendTxPGNListEhib+0x114>
    }
    if (Devices[DeviceIndex].TransmitMessages!=0) {
 801001a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801001e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	69da      	ldr	r2, [r3, #28]
 8010026:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801002a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010034:	fb01 f303 	mul.w	r3, r1, r3
 8010038:	4413      	add	r3, r2
 801003a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003c:	2b00      	cmp	r3, #0
 801003e:	d03a      	beq.n	80100b6 <_ZN9tNMEA200013SendTxPGNListEhib+0x1fe>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8010040:	2300      	movs	r3, #0
 8010042:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010046:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801004a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	69da      	ldr	r2, [r3, #28]
 8010052:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010056:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010060:	fb01 f303 	mul.w	r3, r1, r3
 8010064:	4413      	add	r3, r2
 8010066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4413      	add	r3, r2
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8010076:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801007a:	2b00      	cmp	r3, #0
 801007c:	d005      	beq.n	801008a <_ZN9tNMEA200013SendTxPGNListEhib+0x1d2>
 801007e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010082:	2b49      	cmp	r3, #73	; 0x49
 8010084:	d801      	bhi.n	801008a <_ZN9tNMEA200013SendTxPGNListEhib+0x1d2>
 8010086:	2301      	movs	r3, #1
 8010088:	e000      	b.n	801008c <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 801008a:	2300      	movs	r3, #0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d012      	beq.n	80100b6 <_ZN9tNMEA200013SendTxPGNListEhib+0x1fe>
        RespondMsg.Add3ByteInt(PGN);
 8010090:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8010094:	f107 0314 	add.w	r3, r7, #20
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f7fa f87b 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 80100a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100a4:	3301      	adds	r3, #1
 80100a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80100aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80100ae:	3301      	adds	r3, #1
 80100b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80100b4:	e7c7      	b.n	8010046 <_ZN9tNMEA200013SendTxPGNListEhib+0x18e>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 80100b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80100ba:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80100be:	f107 0114 	add.w	r1, r7, #20
 80100c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80100c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80100ca:	6812      	ldr	r2, [r2, #0]
 80100cc:	6818      	ldr	r0, [r3, #0]
 80100ce:	f7fd fd6d 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80100d2:	e000      	b.n	80100d6 <_ZN9tNMEA200013SendTxPGNListEhib+0x21e>
  if ( !IsValidDevice(DeviceIndex) ) return;
 80100d4:	bf00      	nop
}
 80100d6:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd90      	pop	{r4, r7, pc}
 80100de:	bf00      	nop
 80100e0:	080176a0 	.word	0x080176a0

080100e4 <_ZN9tNMEA200013SendRxPGNListEhib>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 80100e4:	b590      	push	{r4, r7, lr}
 80100e6:	b0cb      	sub	sp, #300	; 0x12c
 80100e8:	af02      	add	r7, sp, #8
 80100ea:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80100ee:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80100f2:	6020      	str	r0, [r4, #0]
 80100f4:	4608      	mov	r0, r1
 80100f6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80100fa:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80100fe:	600a      	str	r2, [r1, #0]
 8010100:	4619      	mov	r1, r3
 8010102:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010106:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 801010a:	4602      	mov	r2, r0
 801010c:	701a      	strb	r2, [r3, #0]
 801010e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010112:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8010116:	460a      	mov	r2, r1
 8010118:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 801011a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801011e:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	2bff      	cmp	r3, #255	; 0xff
 8010126:	d10d      	bne.n	8010144 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 8010128:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801012c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010136:	d105      	bne.n	8010144 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 8010138:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801013c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010140:	2200      	movs	r2, #0
 8010142:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 8010144:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010148:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801014c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010150:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010154:	6811      	ldr	r1, [r2, #0]
 8010156:	6818      	ldr	r0, [r3, #0]
 8010158:	f7fb fbcb 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 801015c:	4603      	mov	r3, r0
 801015e:	f083 0301 	eor.w	r3, r3, #1
 8010162:	b2db      	uxtb	r3, r3
 8010164:	2b00      	cmp	r3, #0
 8010166:	f040 80cb 	bne.w	8010300 <_ZN9tNMEA200013SendRxPGNListEhib+0x21c>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 801016a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801016e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	69da      	ldr	r2, [r3, #28]
 8010176:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801017a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010184:	fb01 f303 	mul.w	r3, r1, r3
 8010188:	4413      	add	r3, r2
 801018a:	7819      	ldrb	r1, [r3, #0]
 801018c:	f107 0014 	add.w	r0, r7, #20
 8010190:	2300      	movs	r3, #0
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	2300      	movs	r3, #0
 8010196:	2206      	movs	r2, #6
 8010198:	f7f9 fec2 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 801019c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80101a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80101a4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80101a8:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 80101ac:	7812      	ldrb	r2, [r2, #0]
 80101ae:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 80101b0:	f107 0314 	add.w	r3, r7, #20
 80101b4:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7f9 fee3 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 80101be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80101c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80101c6:	2206      	movs	r2, #6
 80101c8:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 80101ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80101ce:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 80101d2:	781a      	ldrb	r2, [r3, #0]
 80101d4:	f107 0314 	add.w	r3, r7, #20
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fa ffc9 	bl	800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_receive);
 80101e0:	f107 0314 	add.w	r3, r7, #20
 80101e4:	2101      	movs	r1, #1
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fa f80c 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 80101ec:	2300      	movs	r3, #0
 80101ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 80101f2:	2300      	movs	r3, #0
 80101f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80101f8:	4a44      	ldr	r2, [pc, #272]	; (801030c <_ZN9tNMEA200013SendRxPGNListEhib+0x228>)
 80101fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80101fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010202:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8010206:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <_ZN9tNMEA200013SendRxPGNListEhib+0x136>
 801020e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010212:	2b49      	cmp	r3, #73	; 0x49
 8010214:	d801      	bhi.n	801021a <_ZN9tNMEA200013SendRxPGNListEhib+0x136>
 8010216:	2301      	movs	r3, #1
 8010218:	e000      	b.n	801021c <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 801021a:	2300      	movs	r3, #0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d012      	beq.n	8010246 <_ZN9tNMEA200013SendRxPGNListEhib+0x162>
      RespondMsg.Add3ByteInt(PGN);
 8010220:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8010224:	f107 0314 	add.w	r3, r7, #20
 8010228:	4611      	mov	r1, r2
 801022a:	4618      	mov	r0, r3
 801022c:	f7f9 ffb3 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8010230:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010234:	3301      	adds	r3, #1
 8010236:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801023a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801023e:	3301      	adds	r3, #1
 8010240:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010244:	e7d8      	b.n	80101f8 <_ZN9tNMEA200013SendRxPGNListEhib+0x114>
    }
    if (Devices[DeviceIndex].ReceiveMessages!=0) {
 8010246:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801024a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	69da      	ldr	r2, [r3, #28]
 8010252:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010256:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010260:	fb01 f303 	mul.w	r3, r1, r3
 8010264:	4413      	add	r3, r2
 8010266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010268:	2b00      	cmp	r3, #0
 801026a:	d03a      	beq.n	80102e2 <_ZN9tNMEA200013SendRxPGNListEhib+0x1fe>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 801026c:	2300      	movs	r3, #0
 801026e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010276:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	69da      	ldr	r2, [r3, #28]
 801027e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010282:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801028c:	fb01 f303 	mul.w	r3, r1, r3
 8010290:	4413      	add	r3, r2
 8010292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80102a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d005      	beq.n	80102b6 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d2>
 80102aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80102ae:	2b49      	cmp	r3, #73	; 0x49
 80102b0:	d801      	bhi.n	80102b6 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d2>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 80102b6:	2300      	movs	r3, #0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d012      	beq.n	80102e2 <_ZN9tNMEA200013SendRxPGNListEhib+0x1fe>
        RespondMsg.Add3ByteInt(PGN);
 80102bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80102c0:	f107 0314 	add.w	r3, r7, #20
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f9 ff65 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 80102cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102d0:	3301      	adds	r3, #1
 80102d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80102d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80102da:	3301      	adds	r3, #1
 80102dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80102e0:	e7c7      	b.n	8010272 <_ZN9tNMEA200013SendRxPGNListEhib+0x18e>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 80102e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80102e6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80102ea:	f107 0114 	add.w	r1, r7, #20
 80102ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80102f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80102f6:	6812      	ldr	r2, [r2, #0]
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f7fd fc57 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80102fe:	e000      	b.n	8010302 <_ZN9tNMEA200013SendRxPGNListEhib+0x21e>
  if ( !IsValidDevice(DeviceIndex) ) return;
 8010300:	bf00      	nop
}
 8010302:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8010306:	46bd      	mov	sp, r7
 8010308:	bd90      	pop	{r4, r7, pc}
 801030a:	bf00      	nop
 801030c:	080176cc 	.word	0x080176cc

08010310 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>:

//*****************************************************************************
void SetN2kPGN126996Progmem(tN2kMsg &N2kMsg, const tNMEA2000::tProductInformation *ProductInformation, char *OptionalSerialCode=0) {
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
  int i;

    N2kMsg.SetPGN(126996L);
 801031c:	4968      	ldr	r1, [pc, #416]	; (80104c0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x1b0>)
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7f9 fe30 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2206      	movs	r2, #6
 8010328:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->N2kVersion));
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	b21b      	sxth	r3, r3
 8010330:	4619      	mov	r1, r3
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f7f9 ff06 	bl	800a144 <_ZN7tN2kMsg11Add2ByteIntEs>
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->ProductCode));
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	885b      	ldrh	r3, [r3, #2]
 801033c:	b21b      	sxth	r3, r3
 801033e:	4619      	mov	r1, r3
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f7f9 feff 	bl	800a144 <_ZN7tN2kMsg11Add2ByteIntEs>
    for (i=0; i<Max_N2kModelID_len && pgm_read_byte(&ProductInformation->N2kModelID[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelID[i])); }
 8010346:	2300      	movs	r3, #0
 8010348:	617b      	str	r3, [r7, #20]
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	2b1f      	cmp	r3, #31
 801034e:	dc13      	bgt.n	8010378 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	4413      	add	r3, r2
 8010356:	3304      	adds	r3, #4
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00c      	beq.n	8010378 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 801035e:	68ba      	ldr	r2, [r7, #8]
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	4413      	add	r3, r2
 8010364:	3304      	adds	r3, #4
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	4619      	mov	r1, r3
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7f9 ff4a 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	3301      	adds	r3, #1
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	e7e8      	b.n	801034a <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x3a>
    for (; i<Max_N2kModelID_len; i++ ) { N2kMsg.AddByte(0xff); }
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2b1f      	cmp	r3, #31
 801037c:	dc07      	bgt.n	801038e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x7e>
 801037e:	21ff      	movs	r1, #255	; 0xff
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7f9 ff3f 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	3301      	adds	r3, #1
 801038a:	617b      	str	r3, [r7, #20]
 801038c:	e7f4      	b.n	8010378 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
    for (i=0; i<Max_N2kSwCode_len && pgm_read_byte(&ProductInformation->N2kSwCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kSwCode[i])); }
 801038e:	2300      	movs	r3, #0
 8010390:	617b      	str	r3, [r7, #20]
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	2b1f      	cmp	r3, #31
 8010396:	dc13      	bgt.n	80103c0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	4413      	add	r3, r2
 801039e:	3325      	adds	r3, #37	; 0x25
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00c      	beq.n	80103c0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	4413      	add	r3, r2
 80103ac:	3325      	adds	r3, #37	; 0x25
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	4619      	mov	r1, r3
 80103b2:	68f8      	ldr	r0, [r7, #12]
 80103b4:	f7f9 ff26 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	3301      	adds	r3, #1
 80103bc:	617b      	str	r3, [r7, #20]
 80103be:	e7e8      	b.n	8010392 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x82>
    for (; i<Max_N2kSwCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	2b1f      	cmp	r3, #31
 80103c4:	dc07      	bgt.n	80103d6 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xc6>
 80103c6:	21ff      	movs	r1, #255	; 0xff
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f7f9 ff1b 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	3301      	adds	r3, #1
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	e7f4      	b.n	80103c0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
    for (i=0; i<Max_N2kModelVersion_len && pgm_read_byte(&ProductInformation->N2kModelVersion[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelVersion[i])); }
 80103d6:	2300      	movs	r3, #0
 80103d8:	617b      	str	r3, [r7, #20]
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	2b1f      	cmp	r3, #31
 80103de:	dc13      	bgt.n	8010408 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	4413      	add	r3, r2
 80103e6:	3346      	adds	r3, #70	; 0x46
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00c      	beq.n	8010408 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 80103ee:	68ba      	ldr	r2, [r7, #8]
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	4413      	add	r3, r2
 80103f4:	3346      	adds	r3, #70	; 0x46
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	4619      	mov	r1, r3
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f7f9 ff02 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	3301      	adds	r3, #1
 8010404:	617b      	str	r3, [r7, #20]
 8010406:	e7e8      	b.n	80103da <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xca>
    for (; i<Max_N2kModelVersion_len; i++ ) { N2kMsg.AddByte(0xff); }
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2b1f      	cmp	r3, #31
 801040c:	dc07      	bgt.n	801041e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x10e>
 801040e:	21ff      	movs	r1, #255	; 0xff
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7f9 fef7 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	3301      	adds	r3, #1
 801041a:	617b      	str	r3, [r7, #20]
 801041c:	e7f4      	b.n	8010408 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
    if (OptionalSerialCode) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d016      	beq.n	8010452 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x142>
      for (i=0; i<Max_N2kModelSerialCode_len && OptionalSerialCode[i]; i++ ) { N2kMsg.AddByte(OptionalSerialCode[i]); }
 8010424:	2300      	movs	r3, #0
 8010426:	617b      	str	r3, [r7, #20]
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	2b1f      	cmp	r3, #31
 801042c:	dc2a      	bgt.n	8010484 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	4413      	add	r3, r2
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d024      	beq.n	8010484 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	4413      	add	r3, r2
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	4619      	mov	r1, r3
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f7f9 fedd 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	3301      	adds	r3, #1
 801044e:	617b      	str	r3, [r7, #20]
 8010450:	e7ea      	b.n	8010428 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x118>
    } else {
      for (i=0; i<Max_N2kModelSerialCode_len && pgm_read_byte(&ProductInformation->N2kModelSerialCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelSerialCode[i])); }
 8010452:	2300      	movs	r3, #0
 8010454:	617b      	str	r3, [r7, #20]
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	2b1f      	cmp	r3, #31
 801045a:	dc13      	bgt.n	8010484 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	4413      	add	r3, r2
 8010462:	3367      	adds	r3, #103	; 0x67
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00c      	beq.n	8010484 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801046a:	68ba      	ldr	r2, [r7, #8]
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	4413      	add	r3, r2
 8010470:	3367      	adds	r3, #103	; 0x67
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	4619      	mov	r1, r3
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f7f9 fec4 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	3301      	adds	r3, #1
 8010480:	617b      	str	r3, [r7, #20]
 8010482:	e7e8      	b.n	8010456 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x146>
    }
    for (; i<Max_N2kModelSerialCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	2b1f      	cmp	r3, #31
 8010488:	dc07      	bgt.n	801049a <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x18a>
 801048a:	21ff      	movs	r1, #255	; 0xff
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	f7f9 feb9 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	3301      	adds	r3, #1
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	e7f4      	b.n	8010484 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->CertificationLevel));
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80104a0:	4619      	mov	r1, r3
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f7f9 feae 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->LoadEquivalency));
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80104ae:	4619      	mov	r1, r3
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7f9 fea7 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
}
 80104b6:	bf00      	nop
 80104b8:	3718      	adds	r7, #24
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	0001f014 	.word	0x0001f014

080104c4 <_ZN9tNMEA200022SendProductInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendProductInformation(int iDev) {
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  return SendProductInformation(0xff,iDev,false);
 80104ce:	2300      	movs	r3, #0
 80104d0:	683a      	ldr	r2, [r7, #0]
 80104d2:	21ff      	movs	r1, #255	; 0xff
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f000 f805 	bl	80104e4 <_ZN9tNMEA200022SendProductInformationEhib>
 80104da:	4603      	mov	r3, r0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <_ZN9tNMEA200022SendProductInformationEhib>:

bool tNMEA2000::SendProductInformation(unsigned char Destination, int iDev, bool UseTP) {
 80104e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e8:	b0ca      	sub	sp, #296	; 0x128
 80104ea:	af06      	add	r7, sp, #24
 80104ec:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80104f0:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80104f4:	6020      	str	r0, [r4, #0]
 80104f6:	4608      	mov	r0, r1
 80104f8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80104fc:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8010500:	600a      	str	r2, [r1, #0]
 8010502:	4619      	mov	r1, r3
 8010504:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010508:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 801050c:	4602      	mov	r2, r0
 801050e:	701a      	strb	r2, [r3, #0]
 8010510:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010514:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8010518:	460a      	mov	r2, r1
 801051a:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendProductInformation(int iDev) {
#endif
  if ( !IsValidDevice(iDev) ) return false;
 801051c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010520:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8010524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801052c:	6811      	ldr	r1, [r2, #0]
 801052e:	6818      	ldr	r0, [r3, #0]
 8010530:	f7fb f9df 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 8010534:	4603      	mov	r3, r0
 8010536:	f083 0301 	eor.w	r3, r3, #1
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <_ZN9tNMEA200022SendProductInformationEhib+0x60>
 8010540:	2300      	movs	r3, #0
 8010542:	e150      	b.n	80107e6 <_ZN9tNMEA200022SendProductInformationEhib+0x302>
  tN2kMsg RespondMsg(Devices[iDev].N2kSource);
 8010544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	69da      	ldr	r2, [r3, #28]
 8010550:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010554:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801055e:	fb01 f303 	mul.w	r3, r1, r3
 8010562:	4413      	add	r3, r2
 8010564:	7819      	ldrb	r1, [r3, #0]
 8010566:	f107 0010 	add.w	r0, r7, #16
 801056a:	2300      	movs	r3, #0
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	2300      	movs	r3, #0
 8010570:	2206      	movs	r2, #6
 8010572:	f7f9 fcd5 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
  int iPIDev=iDev;
 8010576:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801057a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 8010584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	69da      	ldr	r2, [r3, #28]
 8010590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010594:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010598:	fb01 f303 	mul.w	r3, r1, r3
 801059c:	4413      	add	r3, r2
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d102      	bne.n	80105aa <_ZN9tNMEA200022SendProductInformationEhib+0xc6>
 80105a4:	2300      	movs	r3, #0
 80105a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    if ( Devices[iPIDev].ProductInformation==0 ) return false; // Can not do anything.
 80105aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	69da      	ldr	r2, [r3, #28]
 80105b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105ba:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80105be:	fb01 f303 	mul.w	r3, r1, r3
 80105c2:	4413      	add	r3, r2
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d101      	bne.n	80105ce <_ZN9tNMEA200022SendProductInformationEhib+0xea>
 80105ca:	2300      	movs	r3, #0
 80105cc:	e10b      	b.n	80107e6 <_ZN9tNMEA200022SendProductInformationEhib+0x302>

    if ( Devices[iPIDev].ProductInformation==Devices[iPIDev].LocalProductInformation ) {
 80105ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	69da      	ldr	r2, [r3, #28]
 80105da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105de:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80105e2:	fb01 f303 	mul.w	r3, r1, r3
 80105e6:	4413      	add	r3, r2
 80105e8:	691a      	ldr	r2, [r3, #16]
 80105ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	69d9      	ldr	r1, [r3, #28]
 80105f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105fa:	f44f 70b0 	mov.w	r0, #352	; 0x160
 80105fe:	fb00 f303 	mul.w	r3, r0, r3
 8010602:	440b      	add	r3, r1
 8010604:	695b      	ldr	r3, [r3, #20]
 8010606:	429a      	cmp	r2, r3
 8010608:	f040 808a 	bne.w	8010720 <_ZN9tNMEA200022SendProductInformationEhib+0x23c>
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 801060c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	69da      	ldr	r2, [r3, #28]
 8010618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801061c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010620:	fb01 f303 	mul.w	r3, r1, r3
 8010624:	4413      	add	r3, r2
 8010626:	691b      	ldr	r3, [r3, #16]
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	469e      	mov	lr, r3
                                          Devices[iPIDev].ProductInformation->ProductCode,
 801062c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	69da      	ldr	r2, [r3, #28]
 8010638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801063c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010640:	fb01 f303 	mul.w	r3, r1, r3
 8010644:	4413      	add	r3, r2
 8010646:	691b      	ldr	r3, [r3, #16]
 8010648:	885b      	ldrh	r3, [r3, #2]
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 801064a:	4698      	mov	r8, r3
                                          Devices[iPIDev].ProductInformation->N2kModelID,
 801064c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	69da      	ldr	r2, [r3, #28]
 8010658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801065c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010660:	fb01 f303 	mul.w	r3, r1, r3
 8010664:	4413      	add	r3, r2
 8010666:	691b      	ldr	r3, [r3, #16]
 8010668:	1d1e      	adds	r6, r3, #4
                                          Devices[iPIDev].ProductInformation->N2kSwCode,
 801066a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801066e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	69da      	ldr	r2, [r3, #28]
 8010676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801067a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801067e:	fb01 f303 	mul.w	r3, r1, r3
 8010682:	4413      	add	r3, r2
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	3325      	adds	r3, #37	; 0x25
                                          Devices[iPIDev].ProductInformation->N2kModelVersion,
 8010688:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801068c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8010690:	6812      	ldr	r2, [r2, #0]
 8010692:	69d1      	ldr	r1, [r2, #28]
 8010694:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8010698:	f44f 70b0 	mov.w	r0, #352	; 0x160
 801069c:	fb00 f202 	mul.w	r2, r0, r2
 80106a0:	440a      	add	r2, r1
 80106a2:	6912      	ldr	r2, [r2, #16]
 80106a4:	3246      	adds	r2, #70	; 0x46
                                          Devices[iPIDev].ProductInformation->N2kModelSerialCode,
 80106a6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80106aa:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80106ae:	6809      	ldr	r1, [r1, #0]
 80106b0:	69c8      	ldr	r0, [r1, #28]
 80106b2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80106b6:	f44f 74b0 	mov.w	r4, #352	; 0x160
 80106ba:	fb04 f101 	mul.w	r1, r4, r1
 80106be:	4401      	add	r1, r0
 80106c0:	6909      	ldr	r1, [r1, #16]
 80106c2:	3167      	adds	r1, #103	; 0x67
                                          Devices[iPIDev].ProductInformation->CertificationLevel,
 80106c4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80106c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80106cc:	6800      	ldr	r0, [r0, #0]
 80106ce:	69c4      	ldr	r4, [r0, #28]
 80106d0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80106d4:	f44f 75b0 	mov.w	r5, #352	; 0x160
 80106d8:	fb05 f000 	mul.w	r0, r5, r0
 80106dc:	4420      	add	r0, r4
 80106de:	6900      	ldr	r0, [r0, #16]
 80106e0:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
                                          Devices[iPIDev].ProductInformation->LoadEquivalency);
 80106e4:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80106e8:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80106ec:	6824      	ldr	r4, [r4, #0]
 80106ee:	69e5      	ldr	r5, [r4, #28]
 80106f0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80106f4:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 80106f8:	fb0c f404 	mul.w	r4, ip, r4
 80106fc:	442c      	add	r4, r5
 80106fe:	6924      	ldr	r4, [r4, #16]
 8010700:	f894 4089 	ldrb.w	r4, [r4, #137]	; 0x89
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 8010704:	f107 0510 	add.w	r5, r7, #16
 8010708:	9404      	str	r4, [sp, #16]
 801070a:	9003      	str	r0, [sp, #12]
 801070c:	9102      	str	r1, [sp, #8]
 801070e:	9201      	str	r2, [sp, #4]
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	4633      	mov	r3, r6
 8010714:	4642      	mov	r2, r8
 8010716:	4671      	mov	r1, lr
 8010718:	4628      	mov	r0, r5
 801071a:	f7fb f9c0 	bl	800ba9e <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>
 801071e:	e013      	b.n	8010748 <_ZN9tNMEA200022SendProductInformationEhib+0x264>
    } else {
      SetN2kPGN126996Progmem(RespondMsg,Devices[iPIDev].ProductInformation);
 8010720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	69da      	ldr	r2, [r3, #28]
 801072c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010730:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010734:	fb01 f303 	mul.w	r3, r1, r3
 8010738:	4413      	add	r3, r2
 801073a:	6919      	ldr	r1, [r3, #16]
 801073c:	f107 0310 	add.w	r3, r7, #16
 8010740:	2200      	movs	r2, #0
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff fde4 	bl	8010310 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>
    }
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 8010748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801074c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010750:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010754:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8010758:	7812      	ldrb	r2, [r2, #0]
 801075a:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetIsTPMessage(UseTP);
 801075c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010760:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8010764:	781a      	ldrb	r2, [r3, #0]
 8010766:	f107 0310 	add.w	r3, r7, #16
 801076a:	4611      	mov	r1, r2
 801076c:	4618      	mov	r0, r3
 801076e:	f7fa fd00 	bl	800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,iDev) ) {
 8010772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010776:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 801077a:	f107 0110 	add.w	r1, r7, #16
 801077e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010786:	6812      	ldr	r2, [r2, #0]
 8010788:	6818      	ldr	r0, [r3, #0]
 801078a:	f7fd fa0f 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d014      	beq.n	80107be <_ZN9tNMEA200022SendProductInformationEhib+0x2da>
      Devices[iDev].ClearPendingProductInformation();
 8010794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	69da      	ldr	r2, [r3, #28]
 80107a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80107ae:	fb01 f303 	mul.w	r3, r1, r3
 80107b2:	4413      	add	r3, r2
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fa ff73 	bl	800b6a0 <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>
      return true;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e013      	b.n	80107e6 <_ZN9tNMEA200022SendProductInformationEhib+0x302>
    }

    Devices[iDev].SetPendingProductInformation();
 80107be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	69da      	ldr	r2, [r3, #28]
 80107ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80107d8:	fb01 f303 	mul.w	r3, r1, r3
 80107dc:	4413      	add	r3, r2
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fa ff47 	bl	800b672 <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>
    return false;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80107ec:	46bd      	mov	sp, r7
 80107ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107f2 <_ZN9tNMEA200028SendConfigurationInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b082      	sub	sp, #8
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
 80107fa:	6039      	str	r1, [r7, #0]
  return SendConfigurationInformation(0xff,DeviceIndex,false);
 80107fc:	2300      	movs	r3, #0
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	21ff      	movs	r1, #255	; 0xff
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f806 	bl	8010814 <_ZN9tNMEA200028SendConfigurationInformationEhib>
 8010808:	4603      	mov	r3, r0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
	...

08010814 <_ZN9tNMEA200028SendConfigurationInformationEhib>:

bool tNMEA2000::SendConfigurationInformation(unsigned char Destination, int DeviceIndex, bool UseTP) {
 8010814:	b590      	push	{r4, r7, lr}
 8010816:	b0c7      	sub	sp, #284	; 0x11c
 8010818:	af02      	add	r7, sp, #8
 801081a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801081e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8010822:	6020      	str	r0, [r4, #0]
 8010824:	4608      	mov	r0, r1
 8010826:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801082a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801082e:	600a      	str	r2, [r1, #0]
 8010830:	4619      	mov	r1, r3
 8010832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010836:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 801083a:	4602      	mov	r2, r0
 801083c:	701a      	strb	r2, [r3, #0]
 801083e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010842:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8010846:	460a      	mov	r2, r1
 8010848:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
#endif
  if ( !IsValidDevice(DeviceIndex) ) return false;
 801084a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801084e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8010852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801085a:	6811      	ldr	r1, [r2, #0]
 801085c:	6818      	ldr	r0, [r3, #0]
 801085e:	f7fb f848 	bl	800b8f2 <_ZNK9tNMEA200013IsValidDeviceEi>
 8010862:	4603      	mov	r3, r0
 8010864:	f083 0301 	eor.w	r3, r3, #1
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x5e>
 801086e:	2300      	movs	r3, #0
 8010870:	e0a7      	b.n	80109c2 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1ae>
  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 8010872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	69da      	ldr	r2, [r3, #28]
 801087e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801088c:	fb01 f303 	mul.w	r3, r1, r3
 8010890:	4413      	add	r3, r2
 8010892:	7819      	ldrb	r1, [r3, #0]
 8010894:	f107 0014 	add.w	r0, r7, #20
 8010898:	2300      	movs	r3, #0
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	2300      	movs	r3, #0
 801089e:	2206      	movs	r2, #6
 80108a0:	f7f9 fb3e 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>

    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 80108a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d10f      	bne.n	80108d4 <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc0>
         ConfigurationInformation.InstallationDescription1!=0 ||
 80108b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d107      	bne.n	80108d4 <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc0>
         ConfigurationInformation.InstallationDescription2!=0 ) {
 80108c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         ConfigurationInformation.InstallationDescription1!=0 ||
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d023      	beq.n	801091c <_ZN9tNMEA200028SendConfigurationInformationEhib+0x108>
        SetN2kConfigurationInformation(RespondMsg,
 80108d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80108e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
                                       ConfigurationInformation.ManufacturerInformation,
                                       ConfigurationInformation.InstallationDescription1,
                                       ConfigurationInformation.InstallationDescription2,
                                       LocalConfigurationInformationData==0);
 80108f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        SetN2kConfigurationInformation(RespondMsg,
 8010904:	2b00      	cmp	r3, #0
 8010906:	bf0c      	ite	eq
 8010908:	2301      	moveq	r3, #1
 801090a:	2300      	movne	r3, #0
 801090c:	b2db      	uxtb	r3, r3
 801090e:	f107 0014 	add.w	r0, r7, #20
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	4623      	mov	r3, r4
 8010916:	f7fb f8df 	bl	800bad8 <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>
 801091a:	e006      	b.n	801092a <_ZN9tNMEA200028SendConfigurationInformationEhib+0x116>
    } else { // No information provided, so respond not available
      SetN2kPGNISOAcknowledgement(RespondMsg,1,0xff,126998L);
 801091c:	f107 0014 	add.w	r0, r7, #20
 8010920:	4b2a      	ldr	r3, [pc, #168]	; (80109cc <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b8>)
 8010922:	22ff      	movs	r2, #255	; 0xff
 8010924:	2101      	movs	r1, #1
 8010926:	f7fb f898 	bl	800ba5a <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
    }

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 801092a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801092e:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    RespondMsg.SetIsTPMessage(UseTP);
 8010938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801093c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8010940:	781a      	ldrb	r2, [r3, #0]
 8010942:	f107 0314 	add.w	r3, r7, #20
 8010946:	4611      	mov	r1, r2
 8010948:	4618      	mov	r0, r3
 801094a:	f7fa fc12 	bl	800b172 <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,DeviceIndex) ) {
 801094e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010952:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8010956:	f107 0114 	add.w	r1, r7, #20
 801095a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801095e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010962:	6812      	ldr	r2, [r2, #0]
 8010964:	6818      	ldr	r0, [r3, #0]
 8010966:	f7fd f921 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d014      	beq.n	801099a <_ZN9tNMEA200028SendConfigurationInformationEhib+0x186>
      Devices[DeviceIndex].ClearPendingConfigurationInformation();
 8010970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	69da      	ldr	r2, [r3, #28]
 801097c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010980:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801098a:	fb01 f303 	mul.w	r3, r1, r3
 801098e:	4413      	add	r3, r2
 8010990:	4618      	mov	r0, r3
 8010992:	f7fa febe 	bl	800b712 <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>
      return true;
 8010996:	2301      	movs	r3, #1
 8010998:	e013      	b.n	80109c2 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1ae>
    }

    Devices[DeviceIndex].SetPendingConfigurationInformation();
 801099a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801099e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	69da      	ldr	r2, [r3, #28]
 80109a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80109b4:	fb01 f303 	mul.w	r3, r1, r3
 80109b8:	4413      	add	r3, r2
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fa fe8e 	bl	800b6dc <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>
    return false;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd90      	pop	{r4, r7, pc}
 80109cc:	0001f016 	.word	0x0001f016

080109d0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>:

//*****************************************************************************
void tNMEA2000::RespondISORequest(const tN2kMsg &N2kMsg, unsigned long RequestedPGN, int iDev) {
 80109d0:	b590      	push	{r4, r7, lr}
 80109d2:	b0c7      	sub	sp, #284	; 0x11c
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80109da:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80109de:	6020      	str	r0, [r4, #0]
 80109e0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80109e4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80109e8:	6001      	str	r1, [r0, #0]
 80109ea:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80109ee:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80109f2:	600a      	str	r2, [r1, #0]
 80109f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80109f8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80109fc:	6013      	str	r3, [r2, #0]
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 80109fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a02:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a0e:	6811      	ldr	r1, [r2, #0]
 8010a10:	6818      	ldr	r0, [r3, #0]
 8010a12:	f000 fa2c 	bl	8010e6e <_ZN9tNMEA200021IsAddressClaimStartedEi>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f040 80ce 	bne.w	8010bba <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ea>

    switch (RequestedPGN) {
 8010a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a67      	ldr	r2, [pc, #412]	; (8010bc8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d06b      	beq.n	8010b06 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x136>
 8010a2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a63      	ldr	r2, [pc, #396]	; (8010bc8 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d870      	bhi.n	8010b20 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 8010a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a60      	ldr	r2, [pc, #384]	; (8010bcc <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d04e      	beq.n	8010aec <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x11c>
 8010a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a5c      	ldr	r2, [pc, #368]	; (8010bcc <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d860      	bhi.n	8010b20 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 8010a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8010a6c:	d008      	beq.n	8010a80 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xb0>
 8010a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 8010a7c:	d00f      	beq.n	8010a9e <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xce>
 8010a7e:	e04f      	b.n	8010b20 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
      case 60928L: /*ISO Address Claim*/  // Someone is asking others to claim their addresses
        SendIsoAddressClaim(0xff,iDev);
 8010a80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a84:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010a88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a8c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8010a90:	2300      	movs	r3, #0
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	21ff      	movs	r1, #255	; 0xff
 8010a96:	6800      	ldr	r0, [r0, #0]
 8010a98:	f7ff f95d 	bl	800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        break;
 8010a9c:	e090      	b.n	8010bc0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126464L:
        SendTxPGNList(N2kMsg.Source,iDev);
 8010a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	7b19      	ldrb	r1, [r3, #12]
 8010aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010aae:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010ab2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ab6:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8010aba:	2300      	movs	r3, #0
 8010abc:	6812      	ldr	r2, [r2, #0]
 8010abe:	6800      	ldr	r0, [r0, #0]
 8010ac0:	f7ff f9fa 	bl	800feb8 <_ZN9tNMEA200013SendTxPGNListEhib>
        SendRxPGNList(N2kMsg.Source,iDev);
 8010ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	7b19      	ldrb	r1, [r3, #12]
 8010ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ad4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010ad8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010adc:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	6812      	ldr	r2, [r2, #0]
 8010ae4:	6800      	ldr	r0, [r0, #0]
 8010ae6:	f7ff fafd 	bl	80100e4 <_ZN9tNMEA200013SendRxPGNListEhib>
        break;
 8010aea:	e069      	b.n	8010bc0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126996L: /* Product information */
        SendProductInformation(iDev);
 8010aec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010af0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010af4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010afc:	6811      	ldr	r1, [r2, #0]
 8010afe:	6818      	ldr	r0, [r3, #0]
 8010b00:	f7ff fce0 	bl	80104c4 <_ZN9tNMEA200022SendProductInformationEi>
        break;
 8010b04:	e05c      	b.n	8010bc0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126998L: /* Configuration information */
        SendConfigurationInformation(iDev);
 8010b06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b0a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b16:	6811      	ldr	r1, [r2, #0]
 8010b18:	6818      	ldr	r0, [r3, #0]
 8010b1a:	f7ff fe6a 	bl	80107f2 <_ZN9tNMEA200028SendConfigurationInformationEi>
        break;
 8010b1e:	e04f      	b.n	8010bc0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      default:
        /* If user has established a handler */
        if (ISORqstHandler!=0) {
 8010b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d019      	beq.n	8010b64 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x194>
          /* and if it handled the request, we are done */
          if (ISORqstHandler(RequestedPGN,N2kMsg.Source,iDev)) {
 8010b30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b3c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010b40:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010b44:	6812      	ldr	r2, [r2, #0]
 8010b46:	7b11      	ldrb	r1, [r2, #12]
 8010b48:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010b4c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010b50:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8010b54:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8010b58:	6812      	ldr	r2, [r2, #0]
 8010b5a:	6800      	ldr	r0, [r0, #0]
 8010b5c:	4798      	blx	r3
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d12c      	bne.n	8010bbe <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ee>
            return;
          }
        }

        tN2kMsg   N2kMsgR;
 8010b64:	f107 0014 	add.w	r0, r7, #20
 8010b68:	2300      	movs	r3, #0
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	2206      	movs	r2, #6
 8010b70:	210f      	movs	r1, #15
 8010b72:	f7f9 f9d5 	bl	8009f20 <_ZN7tN2kMsgC1Ehhmi>
        // No user handler, or there was one and it retured FALSE.  Send NAK
        SetN2kPGNISOAcknowledgement(N2kMsgR,1,0xff,RequestedPGN);
 8010b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010b7e:	f107 0014 	add.w	r0, r7, #20
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	22ff      	movs	r2, #255	; 0xff
 8010b86:	2101      	movs	r1, #1
 8010b88:	f7fa ff67 	bl	800ba5a <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
        // Direct the response to original requester.
        N2kMsgR.Destination  = N2kMsg.Source;
 8010b8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	7b1b      	ldrb	r3, [r3, #12]
 8010b98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        SendMsg(N2kMsgR,iDev);
 8010b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ba0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010ba4:	f107 0114 	add.w	r1, r7, #20
 8010ba8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	6818      	ldr	r0, [r3, #0]
 8010bb4:	f7fc fffa 	bl	800dbac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8010bb8:	e002      	b.n	8010bc0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 8010bba:	bf00      	nop
 8010bbc:	e000      	b.n	8010bc0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
            return;
 8010bbe:	bf00      	nop
    }
}
 8010bc0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd90      	pop	{r4, r7, pc}
 8010bc8:	0001f016 	.word	0x0001f016
 8010bcc:	0001f014 	.word	0x0001f014

08010bd0 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISORequest(const tN2kMsg &N2kMsg) {
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  unsigned long RequestedPGN;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	7b5b      	ldrb	r3, [r3, #13]
 8010bde:	4619      	mov	r1, r3
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff f80a 	bl	800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010be6:	60f8      	str	r0, [r7, #12]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	7b5b      	ldrb	r3, [r3, #13]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f6 fde4 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f083 0301 	eor.w	r3, r3, #1
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d005      	beq.n	8010c0a <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c04:	d101      	bne.n	8010c0a <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 8010c06:	2301      	movs	r3, #1
 8010c08:	e000      	b.n	8010c0c <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3c>
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d125      	bne.n	8010c5c <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8c>

    ParseN2kPGNISORequest(N2kMsg,RequestedPGN);
 8010c10:	f107 0308 	add.w	r3, r7, #8
 8010c14:	4619      	mov	r1, r3
 8010c16:	6838      	ldr	r0, [r7, #0]
 8010c18:	f7fa ff71 	bl	800bafe <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>
    N2kMsgDbgStart("ISO request: "); N2kMsgDbgln(RequestedPGN);
    if (tNMEA2000::IsBroadcast(N2kMsg.Destination)) { // broadcast -> respond from all devices
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	7b5b      	ldrb	r3, [r3, #13]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7f6 fdca 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d010      	beq.n	8010c4e <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x7e>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondISORequest(N2kMsg,RequestedPGN,iDev);
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	da11      	bge.n	8010c5e <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff fec5 	bl	80109d0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	e7f0      	b.n	8010c30 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x60>
    } else {
      RespondISORequest(N2kMsg,RequestedPGN,iDev);
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6839      	ldr	r1, [r7, #0]
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff febb 	bl	80109d0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 8010c5a:	e000      	b.n	8010c5e <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010c5c:	bf00      	nop
    }
}
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// Here we first call callback and if that will not handle function, we use default handler.
void tNMEA2000::RespondGroupFunction(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 8010c64:	b590      	push	{r4, r7, lr}
 8010c66:	b089      	sub	sp, #36	; 0x24
 8010c68:	af02      	add	r7, sp, #8
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	603b      	str	r3, [r7, #0]
 8010c70:	4613      	mov	r3, r2
 8010c72:	71fb      	strb	r3, [r7, #7]
    // Find group function handler for PGN
    tN2kGroupFunctionHandler *pGroupFunctionHandler;
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c78:	617b      	str	r3, [r7, #20]
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d02c      	beq.n	8010cda <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      if ( pGroupFunctionHandler->PGN==PGNForGroupFunction ) {
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	683a      	ldr	r2, [r7, #0]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d10b      	bne.n	8010ca2 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x3e>
        // For matching PGN we run handler and exit always
        pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	3320      	adds	r3, #32
 8010c90:	681c      	ldr	r4, [r3, #0]
 8010c92:	79fa      	ldrb	r2, [r7, #7]
 8010c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	68b9      	ldr	r1, [r7, #8]
 8010c9c:	6978      	ldr	r0, [r7, #20]
 8010c9e:	47a0      	blx	r4
        return;
 8010ca0:	e01b      	b.n	8010cda <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      } else if ( pGroupFunctionHandler->PGN==0 &&
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	689b      	ldr	r3, [r3, #8]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10f      	bne.n	8010cca <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
                  pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev)
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	3320      	adds	r3, #32
 8010cb0:	681c      	ldr	r4, [r3, #0]
 8010cb2:	79fa      	ldrb	r2, [r7, #7]
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	9300      	str	r3, [sp, #0]
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	68b9      	ldr	r1, [r7, #8]
 8010cbc:	6978      	ldr	r0, [r7, #20]
 8010cbe:	47a0      	blx	r4
 8010cc0:	4603      	mov	r3, r0
      } else if ( pGroupFunctionHandler->PGN==0 &&
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	e000      	b.n	8010ccc <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>
 8010cca:	2300      	movs	r3, #0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d103      	bne.n	8010cd8 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x74>
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	617b      	str	r3, [r7, #20]
 8010cd6:	e7d0      	b.n	8010c7a <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x16>
                ) {
        // If handler PGN is 0, we try handler and exit, if it does it. Default handler has PGN=0, but
        // it is at end of list. This allows user to add handlers, which tries to handle all PGNs.
        return;
 8010cd8:	bf00      	nop
      }
    }
}
 8010cda:	371c      	adds	r7, #28
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd90      	pop	{r4, r7, pc}

08010ce0 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>:

//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// On the document it is not clear can request be send as broadcast, so we handle it, if we can.
void tNMEA2000::HandleGroupFunction(const tN2kMsg &N2kMsg) {
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b088      	sub	sp, #32
 8010ce4:	af02      	add	r7, sp, #8
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  tN2kGroupFunctionCode GroupFunctionCode;
  unsigned long PGNForGroupFunction;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	7b5b      	ldrb	r3, [r3, #13]
 8010cee:	4619      	mov	r1, r3
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f7fe ff82 	bl	800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010cf6:	6178      	str	r0, [r7, #20]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	7b5b      	ldrb	r3, [r3, #13]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7f6 fd5c 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8010d02:	4603      	mov	r3, r0
 8010d04:	f083 0301 	eor.w	r3, r3, #1
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d005      	beq.n	8010d1a <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d14:	d101      	bne.n	8010d1a <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3c>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d133      	bne.n	8010d88 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xa8>

    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 8010d20:	f107 020c 	add.w	r2, r7, #12
 8010d24:	f107 0313 	add.w	r3, r7, #19
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6838      	ldr	r0, [r7, #0]
 8010d2c:	f7f7 f858 	bl	8007de0 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>
 8010d30:	4603      	mov	r3, r0
 8010d32:	f083 0301 	eor.w	r3, r3, #1
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d127      	bne.n	8010d8c <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xac>
    N2kMsgDbgStart("Group function: "); N2kMsgDbgln(PGNForGroupFunction);
    if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) { // broadcast -> respond from all devices
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	7b5b      	ldrb	r3, [r3, #13]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7f6 fd3a 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d013      	beq.n	8010d74 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x94>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	617b      	str	r3, [r7, #20]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6a1b      	ldr	r3, [r3, #32]
 8010d54:	697a      	ldr	r2, [r7, #20]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	da19      	bge.n	8010d8e <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
 8010d5a:	7cfa      	ldrb	r2, [r7, #19]
 8010d5c:	68f9      	ldr	r1, [r7, #12]
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	460b      	mov	r3, r1
 8010d64:	6839      	ldr	r1, [r7, #0]
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7ff ff7c 	bl	8010c64 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	617b      	str	r3, [r7, #20]
 8010d72:	e7ed      	b.n	8010d50 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x70>
    } else {
      RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 8010d74:	7cfa      	ldrb	r2, [r7, #19]
 8010d76:	68f9      	ldr	r1, [r7, #12]
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	6839      	ldr	r1, [r7, #0]
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7ff ff6f 	bl	8010c64 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 8010d86:	e002      	b.n	8010d8e <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010d88:	bf00      	nop
 8010d8a:	e000      	b.n	8010d8e <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 8010d8c:	bf00      	nop
    }
}
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <_ZN9tNMEA200017StartAddressClaimEi>:
#endif

//*****************************************************************************
void tNMEA2000::StartAddressClaim(int iDev) {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
  if ( IsReadyToSend() ) { // Start address claim automatically
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7fa fdbc 	bl	800b91c <_ZNK9tNMEA200013IsReadyToSendEv>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d033      	beq.n	8010e12 <_ZN9tNMEA200017StartAddressClaimEi+0x7e>
    Devices[iDev].AddressClaimTimer.Disable();
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	69da      	ldr	r2, [r3, #28]
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010db4:	fb01 f303 	mul.w	r3, r1, r3
 8010db8:	4413      	add	r3, r2
 8010dba:	3328      	adds	r3, #40	; 0x28
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7fa fab7 	bl	800b330 <_ZN13tN2kScheduler7DisableEv>
    if ( (ForwardStream!=0) && ( ForwardType==tNMEA2000::fwdt_Text) ) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d010      	beq.n	8010dec <_ZN9tNMEA200017StartAddressClaimEi+0x58>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	799b      	ldrb	r3, [r3, #6]
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d10c      	bne.n	8010dec <_ZN9tNMEA200017StartAddressClaimEi+0x58>
      ForwardStream->print(F("Start address claim for device "));
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	4911      	ldr	r1, [pc, #68]	; (8010e1c <_ZN9tNMEA200017StartAddressClaimEi+0x88>)
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fa f8f6 	bl	800afca <_ZN9N2kStream5printEPKc>
      ForwardStream->println(iDev);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	220a      	movs	r2, #10
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7fa f962 	bl	800b0b0 <_ZN9N2kStream7printlnEih>
    }
    SendIsoAddressClaim(0xff,iDev);
 8010dec:	2300      	movs	r3, #0
 8010dee:	683a      	ldr	r2, [r7, #0]
 8010df0:	21ff      	movs	r1, #255	; 0xff
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7fe ffaf 	bl	800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
    Devices[iDev].AddressClaimTimer.FromNow(N2kAddressClaimTimeout);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	69da      	ldr	r2, [r3, #28]
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010e02:	fb01 f303 	mul.w	r3, r1, r3
 8010e06:	4413      	add	r3, r2
 8010e08:	3328      	adds	r3, #40	; 0x28
 8010e0a:	21fa      	movs	r1, #250	; 0xfa
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fa fadc 	bl	800b3ca <_ZN13tN2kScheduler7FromNowEm>
  }
}
 8010e12:	bf00      	nop
 8010e14:	3708      	adds	r7, #8
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08016fb8 	.word	0x08016fb8

08010e20 <_ZN9tNMEA200017StartAddressClaimEv>:

//*****************************************************************************
void tNMEA2000::StartAddressClaim() {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++) {
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60fb      	str	r3, [r7, #12]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6a1b      	ldr	r3, [r3, #32]
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	da17      	bge.n	8010e66 <_ZN9tNMEA200017StartAddressClaimEv+0x46>
    if ( Devices[i].N2kSource==N2kNullCanBusAddress ) GetNextAddress(i,true); // On restart try address claiming from the beginning
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	69da      	ldr	r2, [r3, #28]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010e40:	fb01 f303 	mul.w	r3, r1, r3
 8010e44:	4413      	add	r3, r2
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	2bfe      	cmp	r3, #254	; 0xfe
 8010e4a:	d104      	bne.n	8010e56 <_ZN9tNMEA200017StartAddressClaimEv+0x36>
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	68f9      	ldr	r1, [r7, #12]
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 f9a6 	bl	80111a2 <_ZN9tNMEA200014GetNextAddressEib>
    StartAddressClaim(i);
 8010e56:	68f9      	ldr	r1, [r7, #12]
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7ff ff9b 	bl	8010d94 <_ZN9tNMEA200017StartAddressClaimEi>
  for (int i=0; i<DeviceCount; i++) {
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3301      	adds	r3, #1
 8010e62:	60fb      	str	r3, [r7, #12]
 8010e64:	e7e2      	b.n	8010e2c <_ZN9tNMEA200017StartAddressClaimEv+0xc>
  }
}
 8010e66:	bf00      	nop
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <_ZN9tNMEA200021IsAddressClaimStartedEi>:

//*****************************************************************************
bool tNMEA2000::IsAddressClaimStarted(int iDev) {
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b084      	sub	sp, #16
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
 8010e76:	6039      	str	r1, [r7, #0]
  // Reset address claim after timeout
  bool result=Devices[iDev].AddressClaimTimer.IsEnabled();
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	69da      	ldr	r2, [r3, #28]
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010e82:	fb01 f303 	mul.w	r3, r1, r3
 8010e86:	4413      	add	r3, r2
 8010e88:	3328      	adds	r3, #40	; 0x28
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fa fa6e 	bl	800b36c <_ZNK13tN2kScheduler9IsEnabledEv>
 8010e90:	4603      	mov	r3, r0
 8010e92:	73fb      	strb	r3, [r7, #15]
  if ( result ) {
 8010e94:	7bfb      	ldrb	r3, [r7, #15]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d027      	beq.n	8010eea <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
    if ( Devices[iDev].AddressClaimTimer.IsTime() ) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	69da      	ldr	r2, [r3, #28]
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010ea4:	fb01 f303 	mul.w	r3, r1, r3
 8010ea8:	4413      	add	r3, r2
 8010eaa:	3328      	adds	r3, #40	; 0x28
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fa fa6e 	bl	800b38e <_ZNK13tN2kScheduler6IsTimeEv>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d018      	beq.n	8010eea <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
      Devices[iDev].AddressClaimTimer.Disable();
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	69da      	ldr	r2, [r3, #28]
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010ec2:	fb01 f303 	mul.w	r3, r1, r3
 8010ec6:	4413      	add	r3, r2
 8010ec8:	3328      	adds	r3, #40	; 0x28
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fa fa30 	bl	800b330 <_ZN13tN2kScheduler7DisableEv>
      result=false;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	73fb      	strb	r3, [r7, #15]
      // We have claimed our address, so save end source for next possible claim run.
      Devices[iDev].UpdateAddressClaimEndSource();
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	69da      	ldr	r2, [r3, #28]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010ede:	fb01 f303 	mul.w	r3, r1, r3
 8010ee2:	4413      	add	r3, r2
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fa fc32 	bl	800b74e <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    }
  }

  return result;
 8010eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3710      	adds	r7, #16
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISOAddressClaim(const tN2kMsg &N2kMsg) {
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b089      	sub	sp, #36	; 0x24
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  int iDev=FindSourceDeviceIndex(N2kMsg.Source);
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	7b1b      	ldrb	r3, [r3, #12]
 8010f02:	4619      	mov	r1, r3
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7fe fe78 	bl	800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010f0a:	61f8      	str	r0, [r7, #28]
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	7b1b      	ldrb	r3, [r3, #12]
 8010f10:	2bfe      	cmp	r3, #254	; 0xfe
 8010f12:	d077      	beq.n	8011004 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x110>
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f1a:	d073      	beq.n	8011004 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x110>

  int Index=0;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	60fb      	str	r3, [r7, #12]
  uint64_t CallerName=N2kMsg.GetUInt64(Index);
 8010f20:	f107 010c 	add.w	r1, r7, #12
 8010f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f2c:	6838      	ldr	r0, [r7, #0]
 8010f2e:	f7f9 fa02 	bl	800a336 <_ZNK7tN2kMsg9GetUInt64ERiy>
 8010f32:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (Devices[iDev].DeviceInformation.GetName()<CallerName) { // We can keep our address, so just reclaim it
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	69da      	ldr	r2, [r3, #28]
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010f40:	fb01 f303 	mul.w	r3, r1, r3
 8010f44:	4413      	add	r3, r2
 8010f46:	3308      	adds	r3, #8
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7f6 fc29 	bl	80077a0 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8010f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f52:	4290      	cmp	r0, r2
 8010f54:	eb71 0303 	sbcs.w	r3, r1, r3
 8010f58:	bf34      	ite	cc
 8010f5a:	2301      	movcc	r3, #1
 8010f5c:	2300      	movcs	r3, #0
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d006      	beq.n	8010f72 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x7e>
      SendIsoAddressClaim(0xff,iDev);
 8010f64:	2300      	movs	r3, #0
 8010f66:	69fa      	ldr	r2, [r7, #28]
 8010f68:	21ff      	movs	r1, #255	; 0xff
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7fe fef3 	bl	800fd56 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 8010f70:	e049      	b.n	8011006 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x112>
    } else { // we have to try an other address
      if ( Devices[iDev].DeviceInformation.GetName()==CallerName && IsAddressClaimStarted(iDev) ) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	69da      	ldr	r2, [r3, #28]
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010f7c:	fb01 f303 	mul.w	r3, r1, r3
 8010f80:	4413      	add	r3, r2
 8010f82:	3308      	adds	r3, #8
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f6 fc0b 	bl	80077a0 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8010f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f8e:	428b      	cmp	r3, r1
 8010f90:	bf08      	it	eq
 8010f92:	4282      	cmpeq	r2, r0
 8010f94:	d108      	bne.n	8010fa8 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb4>
 8010f96:	69f9      	ldr	r1, [r7, #28]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7ff ff68 	bl	8010e6e <_ZN9tNMEA200021IsAddressClaimStartedEi>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb4>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e000      	b.n	8010faa <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb6>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d020      	beq.n	8010ff0 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xfc>
        // If the name is same, then the first instance will get claim and change its address.
        // This should not happen, if user takes care of setting unique ID for device information.
        // If he does not there is no problem with this class, but e.g. Garmin gets crazy.
        // Try to solve situation by changing our device instance.
        Devices[iDev].DeviceInformation.SetDeviceInstance(Devices[iDev].DeviceInformation.GetDeviceInstance()+1);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	69da      	ldr	r2, [r3, #28]
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010fb8:	fb01 f303 	mul.w	r3, r1, r3
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f103 0408 	add.w	r4, r3, #8
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	69da      	ldr	r2, [r3, #28]
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8010fcc:	fb01 f303 	mul.w	r3, r1, r3
 8010fd0:	4413      	add	r3, r2
 8010fd2:	3308      	adds	r3, #8
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fa fa47 	bl	800b468 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	3301      	adds	r3, #1
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f7fa fa32 	bl	800b44c <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
        DeviceInformationChanged=true;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2201      	movs	r2, #1
 8010fec:	769a      	strb	r2, [r3, #26]
 8010fee:	e004      	b.n	8010ffa <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x106>
      } else {
        GetNextAddress(iDev);
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	69f9      	ldr	r1, [r7, #28]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f8d4 	bl	80111a2 <_ZN9tNMEA200014GetNextAddressEib>
      }
      StartAddressClaim(iDev);
 8010ffa:	69f9      	ldr	r1, [r7, #28]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff fec9 	bl	8010d94 <_ZN9tNMEA200017StartAddressClaimEi>
 8011002:	e000      	b.n	8011006 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x112>
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 8011004:	bf00      	nop
    }
}
 8011006:	3724      	adds	r7, #36	; 0x24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd90      	pop	{r4, r7, pc}

0801100c <_ZN9tNMEA200022HandleCommandedAddressEyhi>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(uint64_t CommandedName, unsigned char NewAddress, int iDev) {
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	e9c7 2300 	strd	r2, r3, [r7]
  if ( IsBroadcast(NewAddress) ) return;
 8011018:	7e3b      	ldrb	r3, [r7, #24]
 801101a:	4618      	mov	r0, r3
 801101c:	f7f6 fbcd 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d13f      	bne.n	80110a6 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9a>
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	69da      	ldr	r2, [r3, #28]
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011030:	fb01 f303 	mul.w	r3, r1, r3
 8011034:	4413      	add	r3, r2
 8011036:	3308      	adds	r3, #8
 8011038:	4618      	mov	r0, r3
 801103a:	f7f6 fbb1 	bl	80077a0 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 801103e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011042:	428b      	cmp	r3, r1
 8011044:	bf08      	it	eq
 8011046:	4282      	cmpeq	r2, r0
 8011048:	d10d      	bne.n	8011066 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
      Devices[iDev].N2kSource!=NewAddress) { // We have been commanded to set our address
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	69da      	ldr	r2, [r3, #28]
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011054:	fb01 f303 	mul.w	r3, r1, r3
 8011058:	4413      	add	r3, r2
 801105a:	781b      	ldrb	r3, [r3, #0]
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 801105c:	7e3a      	ldrb	r2, [r7, #24]
 801105e:	429a      	cmp	r2, r3
 8011060:	d001      	beq.n	8011066 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
 8011062:	2301      	movs	r3, #1
 8011064:	e000      	b.n	8011068 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5c>
 8011066:	2300      	movs	r3, #0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d01d      	beq.n	80110a8 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9c>
    Devices[iDev].N2kSource=NewAddress;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	69da      	ldr	r2, [r3, #28]
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011076:	fb01 f303 	mul.w	r3, r1, r3
 801107a:	4413      	add	r3, r2
 801107c:	7e3a      	ldrb	r2, [r7, #24]
 801107e:	701a      	strb	r2, [r3, #0]
    Devices[iDev].UpdateAddressClaimEndSource();
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	69da      	ldr	r2, [r3, #28]
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801108a:	fb01 f303 	mul.w	r3, r1, r3
 801108e:	4413      	add	r3, r2
 8011090:	4618      	mov	r0, r3
 8011092:	f7fa fb5c 	bl	800b74e <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    StartAddressClaim(iDev);
 8011096:	69f9      	ldr	r1, [r7, #28]
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f7ff fe7b 	bl	8010d94 <_ZN9tNMEA200017StartAddressClaimEi>
    AddressChanged=true;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2201      	movs	r2, #1
 80110a2:	765a      	strb	r2, [r3, #25]
 80110a4:	e000      	b.n	80110a8 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9c>
  if ( IsBroadcast(NewAddress) ) return;
 80110a6:	bf00      	nop
  }
}
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(const tN2kMsg &N2kMsg) {
 80110ae:	b580      	push	{r7, lr}
 80110b0:	b08a      	sub	sp, #40	; 0x28
 80110b2:	af02      	add	r7, sp, #8
 80110b4:	6078      	str	r0, [r7, #4]
 80110b6:	6039      	str	r1, [r7, #0]
  N2kMsgDbgStart(" Commanded address:"); N2kMsgDbgln(N2kMsg.Destination);

  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	689b      	ldr	r3, [r3, #8]
 80110bc:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d10c      	bne.n	80110de <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 80110c4:	6838      	ldr	r0, [r7, #0]
 80110c6:	f7f7 f899 	bl	80081fc <_ZNK7tN2kMsg11IsTPMessageEv>
 80110ca:	4603      	mov	r3, r0
 80110cc:	f083 0301 	eor.w	r3, r3, #1
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d103      	bne.n	80110de <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	691b      	ldr	r3, [r3, #16]
 80110da:	2b09      	cmp	r3, #9
 80110dc:	d001      	beq.n	80110e2 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x34>
 80110de:	2301      	movs	r3, #1
 80110e0:	e000      	b.n	80110e4 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x36>
 80110e2:	2300      	movs	r3, #0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d154      	bne.n	8011192 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe4>

  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	7b5b      	ldrb	r3, [r3, #13]
 80110ec:	4619      	mov	r1, r3
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7fe fd83 	bl	800fbfa <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 80110f4:	61f8      	str	r0, [r7, #28]
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	7b5b      	ldrb	r3, [r3, #13]
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7f6 fb5d 	bl	80077ba <_ZN9tNMEA200011IsBroadcastEh>
 8011100:	4603      	mov	r3, r0
 8011102:	f083 0301 	eor.w	r3, r3, #1
 8011106:	b2db      	uxtb	r3, r3
 8011108:	2b00      	cmp	r3, #0
 801110a:	d005      	beq.n	8011118 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011112:	d101      	bne.n	8011118 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 8011114:	2301      	movs	r3, #1
 8011116:	e000      	b.n	801111a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6c>
 8011118:	2300      	movs	r3, #0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d13b      	bne.n	8011196 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe8>

  int Index=0;
 801111e:	2300      	movs	r3, #0
 8011120:	60bb      	str	r3, [r7, #8]
  uint64_t CommandedName=N2kMsg.GetUInt64(Index);
 8011122:	f107 0108 	add.w	r1, r7, #8
 8011126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801112a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801112e:	6838      	ldr	r0, [r7, #0]
 8011130:	f7f9 f901 	bl	800a336 <_ZNK7tN2kMsg9GetUInt64ERiy>
 8011134:	e9c7 0104 	strd	r0, r1, [r7, #16]
  unsigned char NewAddress=N2kMsg.GetByte(Index);
 8011138:	f107 0308 	add.w	r3, r7, #8
 801113c:	4619      	mov	r1, r3
 801113e:	6838      	ldr	r0, [r7, #0]
 8011140:	f7f9 f890 	bl	800a264 <_ZNK7tN2kMsg7GetByteERi>
 8011144:	4603      	mov	r3, r0
 8011146:	73fb      	strb	r3, [r7, #15]
  if  ( NewAddress>=252 ) return;
 8011148:	7bfb      	ldrb	r3, [r7, #15]
 801114a:	2bfb      	cmp	r3, #251	; 0xfb
 801114c:	d825      	bhi.n	801119a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xec>

  if ( iDev==-1 ) {
 801114e:	69fb      	ldr	r3, [r7, #28]
 8011150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011154:	d113      	bne.n	801117e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xd0>
    for (iDev=0; iDev<DeviceCount; iDev++) HandleCommandedAddress(CommandedName,NewAddress,iDev);
 8011156:	2300      	movs	r3, #0
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	69fa      	ldr	r2, [r7, #28]
 8011160:	429a      	cmp	r2, r3
 8011162:	da1b      	bge.n	801119c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	9301      	str	r3, [sp, #4]
 8011168:	7bfb      	ldrb	r3, [r7, #15]
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff ff4b 	bl	801100c <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	3301      	adds	r3, #1
 801117a:	61fb      	str	r3, [r7, #28]
 801117c:	e7ed      	b.n	801115a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xac>
  } else {
    HandleCommandedAddress(CommandedName,NewAddress,iDev);
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	9301      	str	r3, [sp, #4]
 8011182:	7bfb      	ldrb	r3, [r7, #15]
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff ff3e 	bl	801100c <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 8011190:	e004      	b.n	801119c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 8011192:	bf00      	nop
 8011194:	e002      	b.n	801119c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8011196:	bf00      	nop
 8011198:	e000      	b.n	801119c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if  ( NewAddress>=252 ) return;
 801119a:	bf00      	nop
  }
}
 801119c:	3720      	adds	r7, #32
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <_ZN9tNMEA200014GetNextAddressEib>:
  DeviceInformationChanged=false;
  return result;
}

//*****************************************************************************
void tNMEA2000::GetNextAddress(int DeviceIndex, bool RestartAtEnd) {
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b086      	sub	sp, #24
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	4613      	mov	r3, r2
 80111ae:	71fb      	strb	r3, [r7, #7]
  bool FoundSame;
  // Currently simply add address
  // Note that 251 is the last source. We do not send data if address is higher than that.

  do {
    if ( Devices[DeviceIndex].N2kSource==N2kNullCanBusAddress ) {
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	69da      	ldr	r2, [r3, #28]
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80111ba:	fb01 f303 	mul.w	r3, r1, r3
 80111be:	4413      	add	r3, r2
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2bfe      	cmp	r3, #254	; 0xfe
 80111c4:	d119      	bne.n	80111fa <_ZN9tNMEA200014GetNextAddressEib+0x58>
      if ( RestartAtEnd ) {
 80111c6:	79fb      	ldrb	r3, [r7, #7]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 808e 	beq.w	80112ea <_ZN9tNMEA200014GetNextAddressEib+0x148>
        // For null address start from beginning.
        Devices[DeviceIndex].N2kSource=14;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	69da      	ldr	r2, [r3, #28]
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80111d8:	fb01 f303 	mul.w	r3, r1, r3
 80111dc:	4413      	add	r3, r2
 80111de:	220e      	movs	r2, #14
 80111e0:	701a      	strb	r2, [r3, #0]
        Devices[DeviceIndex].UpdateAddressClaimEndSource();
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	69da      	ldr	r2, [r3, #28]
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80111ec:	fb01 f303 	mul.w	r3, r1, r3
 80111f0:	4413      	add	r3, r2
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fa faab 	bl	800b74e <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
 80111f8:	e044      	b.n	8011284 <_ZN9tNMEA200014GetNextAddressEib+0xe2>
      } else return;
    } else if (Devices[DeviceIndex].N2kSource!=Devices[DeviceIndex].AddressClaimEndSource) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	69da      	ldr	r2, [r3, #28]
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011204:	fb01 f303 	mul.w	r3, r1, r3
 8011208:	4413      	add	r3, r2
 801120a:	781a      	ldrb	r2, [r3, #0]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	69d9      	ldr	r1, [r3, #28]
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	f44f 70b0 	mov.w	r0, #352	; 0x160
 8011216:	fb00 f303 	mul.w	r3, r0, r3
 801121a:	440b      	add	r3, r1
 801121c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011220:	429a      	cmp	r2, r3
 8011222:	d021      	beq.n	8011268 <_ZN9tNMEA200014GetNextAddressEib+0xc6>
      Devices[DeviceIndex].N2kSource++;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	69da      	ldr	r2, [r3, #28]
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801122e:	fb01 f303 	mul.w	r3, r1, r3
 8011232:	4413      	add	r3, r2
 8011234:	781a      	ldrb	r2, [r3, #0]
 8011236:	3201      	adds	r2, #1
 8011238:	b2d2      	uxtb	r2, r2
 801123a:	701a      	strb	r2, [r3, #0]
      // Roll to start?
      if ( Devices[DeviceIndex].N2kSource>N2kMaxCanBusAddress ) Devices[DeviceIndex].N2kSource=0;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	69da      	ldr	r2, [r3, #28]
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011246:	fb01 f303 	mul.w	r3, r1, r3
 801124a:	4413      	add	r3, r2
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	2bfb      	cmp	r3, #251	; 0xfb
 8011250:	d918      	bls.n	8011284 <_ZN9tNMEA200014GetNextAddressEib+0xe2>
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	69da      	ldr	r2, [r3, #28]
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801125c:	fb01 f303 	mul.w	r3, r1, r3
 8011260:	4413      	add	r3, r2
 8011262:	2200      	movs	r2, #0
 8011264:	701a      	strb	r2, [r3, #0]
 8011266:	e00d      	b.n	8011284 <_ZN9tNMEA200014GetNextAddressEib+0xe2>
    } else {
      Devices[DeviceIndex].N2kSource=N2kNullCanBusAddress; // Force null address = cannot claim address
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	69da      	ldr	r2, [r3, #28]
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011272:	fb01 f303 	mul.w	r3, r1, r3
 8011276:	4413      	add	r3, r2
 8011278:	22fe      	movs	r2, #254	; 0xfe
 801127a:	701a      	strb	r2, [r3, #0]
      AddressChanged=true;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2201      	movs	r2, #1
 8011280:	765a      	strb	r2, [r3, #25]
      return;
 8011282:	e033      	b.n	80112ec <_ZN9tNMEA200014GetNextAddressEib+0x14a>
    }
    FoundSame=false;
 8011284:	2300      	movs	r3, #0
 8011286:	75fb      	strb	r3, [r7, #23]
    // Check that we do not have same on our list
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 8011288:	2300      	movs	r3, #0
 801128a:	613b      	str	r3, [r7, #16]
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	6a1b      	ldr	r3, [r3, #32]
 8011290:	693a      	ldr	r2, [r7, #16]
 8011292:	429a      	cmp	r2, r3
 8011294:	da21      	bge.n	80112da <_ZN9tNMEA200014GetNextAddressEib+0x138>
 8011296:	7dfb      	ldrb	r3, [r7, #23]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d11e      	bne.n	80112da <_ZN9tNMEA200014GetNextAddressEib+0x138>
      if (i!=DeviceIndex) FoundSame=(Devices[DeviceIndex].N2kSource==Devices[i].N2kSource);
 801129c:	693a      	ldr	r2, [r7, #16]
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d016      	beq.n	80112d2 <_ZN9tNMEA200014GetNextAddressEib+0x130>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	69da      	ldr	r2, [r3, #28]
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80112ae:	fb01 f303 	mul.w	r3, r1, r3
 80112b2:	4413      	add	r3, r2
 80112b4:	781a      	ldrb	r2, [r3, #0]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	69d9      	ldr	r1, [r3, #28]
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	f44f 70b0 	mov.w	r0, #352	; 0x160
 80112c0:	fb00 f303 	mul.w	r3, r0, r3
 80112c4:	440b      	add	r3, r1
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	bf0c      	ite	eq
 80112cc:	2301      	moveq	r3, #1
 80112ce:	2300      	movne	r3, #0
 80112d0:	75fb      	strb	r3, [r7, #23]
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	3301      	adds	r3, #1
 80112d6:	613b      	str	r3, [r7, #16]
 80112d8:	e7d8      	b.n	801128c <_ZN9tNMEA200014GetNextAddressEib+0xea>
  do {
 80112da:	7dfb      	ldrb	r3, [r7, #23]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d000      	beq.n	80112e2 <_ZN9tNMEA200014GetNextAddressEib+0x140>
 80112e0:	e766      	b.n	80111b0 <_ZN9tNMEA200014GetNextAddressEib+0xe>
    }
  } while (FoundSame);
  AddressChanged=true;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2201      	movs	r2, #1
 80112e6:	765a      	strb	r2, [r3, #25]
 80112e8:	e000      	b.n	80112ec <_ZN9tNMEA200014GetNextAddressEib+0x14a>
      } else return;
 80112ea:	bf00      	nop
}
 80112ec:	3718      	adds	r7, #24
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
	...

080112f4 <_ZN9tNMEA200027HandleReceivedSystemMessageEi>:

//*****************************************************************************
bool tNMEA2000::HandleReceivedSystemMessage(int MsgIndex) {
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  bool result=false;
 80112fe:	2300      	movs	r3, #0
 8011300:	73fb      	strb	r3, [r7, #15]

   if ( N2kMode==N2km_SendOnly || N2kMode==N2km_ListenAndSend ) return result;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	795b      	ldrb	r3, [r3, #5]
 8011306:	2b03      	cmp	r3, #3
 8011308:	d003      	beq.n	8011312 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x1e>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	795b      	ldrb	r3, [r3, #5]
 801130e:	2b04      	cmp	r3, #4
 8011310:	d101      	bne.n	8011316 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x22>
 8011312:	7bfb      	ldrb	r3, [r7, #15]
 8011314:	e07c      	b.n	8011410 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11c>

    if ( N2kCANMsgBuf[MsgIndex].SystemMessage ) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801131a:	683a      	ldr	r2, [r7, #0]
 801131c:	4613      	mov	r3, r2
 801131e:	019b      	lsls	r3, r3, #6
 8011320:	4413      	add	r3, r2
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	440b      	add	r3, r1
 8011326:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801132a:	2b00      	cmp	r3, #0
 801132c:	d06f      	beq.n	801140e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11a>
      if ( ForwardSystemMessages() ) ForwardMessage(N2kCANMsgBuf[MsgIndex].N2kMsg);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f7fa fa83 	bl	800b83a <_ZNK9tNMEA200021ForwardSystemMessagesEv>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00b      	beq.n	8011352 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x5e>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	4613      	mov	r3, r2
 8011342:	019b      	lsls	r3, r3, #6
 8011344:	4413      	add	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	440b      	add	r3, r1
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7fe fc9b 	bl	800fc88 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      if ( N2kMode!=N2km_ListenOnly ) { // Note that in listen only mode we will not inform us to the bus
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	795b      	ldrb	r3, [r3, #5]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d057      	beq.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
        switch (N2kCANMsgBuf[MsgIndex].N2kMsg.PGN) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	4613      	mov	r3, r2
 8011362:	019b      	lsls	r3, r3, #6
 8011364:	4413      	add	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	440b      	add	r3, r1
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	4a2a      	ldr	r2, [pc, #168]	; (8011418 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d03d      	beq.n	80113ee <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xfa>
 8011372:	4a29      	ldr	r2, [pc, #164]	; (8011418 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d848      	bhi.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 8011378:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 801137c:	4293      	cmp	r3, r2
 801137e:	d029      	beq.n	80113d4 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xe0>
 8011380:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 8011384:	4293      	cmp	r3, r2
 8011386:	d840      	bhi.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 8011388:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 801138c:	d015      	beq.n	80113ba <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xc6>
 801138e:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8011392:	d83a      	bhi.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 8011394:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 8011398:	d036      	beq.n	8011408 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x114>
 801139a:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 801139e:	d134      	bne.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 59392L: /*ISO Acknowledgement*/
            break;
          case 59904L: /*ISO Request*/
            HandleISORequest(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80113a4:	683a      	ldr	r2, [r7, #0]
 80113a6:	4613      	mov	r3, r2
 80113a8:	019b      	lsls	r3, r3, #6
 80113aa:	4413      	add	r3, r2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	440b      	add	r3, r1
 80113b0:	4619      	mov	r1, r3
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7ff fc0c 	bl	8010bd0 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>
            break;
 80113b8:	e027      	b.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 60928L: /*ISO Address Claim*/
            HandleISOAddressClaim(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80113be:	683a      	ldr	r2, [r7, #0]
 80113c0:	4613      	mov	r3, r2
 80113c2:	019b      	lsls	r3, r3, #6
 80113c4:	4413      	add	r3, r2
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	440b      	add	r3, r1
 80113ca:	4619      	mov	r1, r3
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7ff fd91 	bl	8010ef4 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>
            break;
 80113d2:	e01a      	b.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 65240L: /*Commanded Address*/
            HandleCommandedAddress(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	4613      	mov	r3, r2
 80113dc:	019b      	lsls	r3, r3, #6
 80113de:	4413      	add	r3, r2
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	440b      	add	r3, r1
 80113e4:	4619      	mov	r1, r3
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7ff fe61 	bl	80110ae <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>
            break;
 80113ec:	e00d      	b.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
          case 126208L: /*NMEA Request/Command/Acknowledge group function*/
            HandleGroupFunction(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	4613      	mov	r3, r2
 80113f6:	019b      	lsls	r3, r3, #6
 80113f8:	4413      	add	r3, r2
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	440b      	add	r3, r1
 80113fe:	4619      	mov	r1, r3
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7ff fc6d 	bl	8010ce0 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>
            break;
 8011406:	e000      	b.n	801140a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
            break;
 8011408:	bf00      	nop
#endif
        }
      }
      result=true;
 801140a:	2301      	movs	r3, #1
 801140c:	73fb      	strb	r3, [r7, #15]
    }

  return result;
 801140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	0001ed00 	.word	0x0001ed00

0801141c <_ZN9tNMEA200013ParseMessagesEv>:

//*****************************************************************************
void tNMEA2000::ParseMessages() {
 801141c:	b590      	push	{r4, r7, lr}
 801141e:	b089      	sub	sp, #36	; 0x24
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
    unsigned long canId;
    unsigned char len = 0;
 8011424:	2300      	movs	r3, #0
 8011426:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    uint8_t MsgIndex;
    static const int MaxReadFramesOnParse=20;
    int FramesRead=0;
 8011428:	2300      	movs	r3, #0
 801142a:	61fb      	str	r3, [r7, #28]
//    tN2kMsg N2kMsg;

    if ( OpenState!=os_Open ) {
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	7e1b      	ldrb	r3, [r3, #24]
 8011430:	2b03      	cmp	r3, #3
 8011432:	d011      	beq.n	8011458 <_ZN9tNMEA200013ParseMessagesEv+0x3c>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7fb feab 	bl	800d190 <_ZN9tNMEA20004OpenEv>
 801143a:	4603      	mov	r3, r0
 801143c:	f083 0301 	eor.w	r3, r3, #1
 8011440:	b2db      	uxtb	r3, r3
 8011442:	2b00      	cmp	r3, #0
 8011444:	d103      	bne.n	801144e <_ZN9tNMEA200013ParseMessagesEv+0x32>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	7e1b      	ldrb	r3, [r3, #24]
 801144a:	2b03      	cmp	r3, #3
 801144c:	d001      	beq.n	8011452 <_ZN9tNMEA200013ParseMessagesEv+0x36>
 801144e:	2301      	movs	r3, #1
 8011450:	e000      	b.n	8011454 <_ZN9tNMEA200013ParseMessagesEv+0x38>
 8011452:	2300      	movs	r3, #0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d166      	bne.n	8011526 <_ZN9tNMEA200013ParseMessagesEv+0x10a>
    }

    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	791b      	ldrb	r3, [r3, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d164      	bne.n	801152a <_ZN9tNMEA200013ParseMessagesEv+0x10e>

    SendFrames();
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7fc f85c 	bl	800d51e <_ZN9tNMEA200010SendFramesEv>
    SendPendingInformation();
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7fc fb3a 	bl	800dae0 <_ZN9tNMEA200022SendPendingInformationEv>
#if defined(DEBUG_NMEA2000_ISR)
    TestISR();
#endif

    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	2b13      	cmp	r3, #19
 8011470:	dc10      	bgt.n	8011494 <_ZN9tNMEA200013ParseMessagesEv+0x78>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	3308      	adds	r3, #8
 8011478:	681c      	ldr	r4, [r3, #0]
 801147a:	f107 0308 	add.w	r3, r7, #8
 801147e:	f107 0213 	add.w	r2, r7, #19
 8011482:	f107 0114 	add.w	r1, r7, #20
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	47a0      	blx	r4
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d001      	beq.n	8011494 <_ZN9tNMEA200013ParseMessagesEv+0x78>
 8011490:	2301      	movs	r3, #1
 8011492:	e000      	b.n	8011496 <_ZN9tNMEA200013ParseMessagesEv+0x7a>
 8011494:	2300      	movs	r3, #0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d040      	beq.n	801151c <_ZN9tNMEA200013ParseMessagesEv+0x100>
        FramesRead++;
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	3301      	adds	r3, #1
 801149e:	61fb      	str	r3, [r7, #28]
        N2kMsgDbgStart("Received frame, can ID:"); N2kMsgDbg(canId); N2kMsgDbg(" len:"); N2kMsgDbg(len); N2kMsgDbg(" data:"); DbgPrintBuf(len,buf,false); N2kMsgDbgln();
        MsgIndex=SetN2kCANBufMsg(canId,len,buf);
 80114a0:	6979      	ldr	r1, [r7, #20]
 80114a2:	7cfa      	ldrb	r2, [r7, #19]
 80114a4:	f107 0308 	add.w	r3, r7, #8
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7fe f9d0 	bl	800f84e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>
 80114ae:	4603      	mov	r3, r0
 80114b0:	76fb      	strb	r3, [r7, #27]
        if (MsgIndex<MaxN2kCANMsgs) {
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80114b8:	7efa      	ldrb	r2, [r7, #27]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d2d6      	bcs.n	801146c <_ZN9tNMEA200013ParseMessagesEv+0x50>
          if ( !HandleReceivedSystemMessage(MsgIndex) ) {
 80114be:	7efb      	ldrb	r3, [r7, #27]
 80114c0:	4619      	mov	r1, r3
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7ff ff16 	bl	80112f4 <_ZN9tNMEA200027HandleReceivedSystemMessageEi>
 80114c8:	4603      	mov	r3, r0
 80114ca:	f083 0301 	eor.w	r3, r3, #1
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00b      	beq.n	80114ec <_ZN9tNMEA200013ParseMessagesEv+0xd0>
            N2kMsgDbgStart(" - Non system message, MsgIndex: "); N2kMsgDbgln(MsgIndex);
            ForwardMessage(N2kCANMsgBuf[MsgIndex]);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80114d8:	7efa      	ldrb	r2, [r7, #27]
 80114da:	4613      	mov	r3, r2
 80114dc:	019b      	lsls	r3, r3, #6
 80114de:	4413      	add	r3, r2
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	440b      	add	r3, r1
 80114e4:	4619      	mov	r1, r3
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7fe fc14 	bl	800fd14 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>
          }
//          N2kCANMsgBuf[MsgIndex].N2kMsg.Print(Serial);
          RunMessageHandlers(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80114f0:	7efa      	ldrb	r2, [r7, #27]
 80114f2:	4613      	mov	r3, r2
 80114f4:	019b      	lsls	r3, r3, #6
 80114f6:	4413      	add	r3, r2
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	440b      	add	r3, r1
 80114fc:	4619      	mov	r1, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 f817 	bl	8011532 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>
          N2kCANMsgBuf[MsgIndex].FreeMessage();
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011508:	7efa      	ldrb	r2, [r7, #27]
 801150a:	4613      	mov	r3, r2
 801150c:	019b      	lsls	r3, r3, #6
 801150e:	4413      	add	r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	440b      	add	r3, r1
 8011514:	4618      	mov	r0, r3
 8011516:	f7f9 fe87 	bl	800b228 <_ZN10tN2kCANMsg11FreeMessageEv>
    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 801151a:	e7a7      	b.n	801146c <_ZN9tNMEA200013ParseMessagesEv+0x50>
          N2kMsgDbgStart(" - Free message, MsgIndex: "); N2kMsgDbg(MsgIndex); N2kMsgDbgln();
        }
    }

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
    SendHeartbeat();
 801151c:	2100      	movs	r1, #0
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7fc f9b4 	bl	800d88c <_ZN9tNMEA200013SendHeartbeatEb>
 8011524:	e002      	b.n	801152c <_ZN9tNMEA200013ParseMessagesEv+0x110>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <_ZN9tNMEA200013ParseMessagesEv+0x110>
    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 801152a:	bf00      	nop
#endif
}
 801152c:	3724      	adds	r7, #36	; 0x24
 801152e:	46bd      	mov	sp, r7
 8011530:	bd90      	pop	{r4, r7, pc}

08011532 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::RunMessageHandlers(const tN2kMsg &N2kMsg) {
 8011532:	b580      	push	{r7, lr}
 8011534:	b084      	sub	sp, #16
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
  if ( MsgHandler!=0 ) MsgHandler(N2kMsg);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011540:	2b00      	cmp	r3, #0
 8011542:	d003      	beq.n	801154c <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x1a>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011548:	6838      	ldr	r0, [r7, #0]
 801154a:	4798      	blx	r3

  tMsgHandler *MsgHandler=MsgHandlers;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	691b      	ldr	r3, [r3, #16]
 8011550:	60fb      	str	r3, [r7, #12]
  // Loop through all pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()==0; MsgHandler=MsgHandler->pNext) MsgHandler->HandleMsg(N2kMsg);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d007      	beq.n	8011568 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7f9 ffe2 	bl	800b522 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 8011564:	2301      	movs	r3, #1
 8011566:	e000      	b.n	801156a <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x38>
 8011568:	2300      	movs	r3, #0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d009      	beq.n	8011582 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	4798      	blx	r3
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	60fb      	str	r3, [r7, #12]
 8011580:	e7e7      	b.n	8011552 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x20>
  // Loop through specific pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d009      	beq.n	801159c <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f7f9 ffca 	bl	800b522 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 801158e:	4602      	mov	r2, r0
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	429a      	cmp	r2, r3
 8011596:	d801      	bhi.n	801159c <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 8011598:	2301      	movs	r3, #1
 801159a:	e000      	b.n	801159e <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6c>
 801159c:	2300      	movs	r3, #0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d016      	beq.n	80115d0 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x9e>
    if ( MsgHandler->GetPGN()==N2kMsg.PGN ) MsgHandler->HandleMsg(N2kMsg);
 80115a2:	68f8      	ldr	r0, [r7, #12]
 80115a4:	f7f9 ffbd 	bl	800b522 <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 80115a8:	4602      	mov	r2, r0
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	bf0c      	ite	eq
 80115b2:	2301      	moveq	r3, #1
 80115b4:	2300      	movne	r3, #0
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d005      	beq.n	80115c8 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x96>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	6839      	ldr	r1, [r7, #0]
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	4798      	blx	r3
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	60fb      	str	r3, [r7, #12]
 80115ce:	e7d8      	b.n	8011582 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
  }
}
 80115d0:	bf00      	nop
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <_ZN9tNMEA20009SetOnOpenEPFvvE>:

//*****************************************************************************
void tNMEA2000::SetOnOpen(void (*_OnOpen)()) {
 80115d8:	b480      	push	{r7}
 80115da:	b083      	sub	sp, #12
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  OnOpen=_OnOpen;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	683a      	ldr	r2, [r7, #0]
 80115e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80115e8:	bf00      	nop
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bc80      	pop	{r7}
 80115f0:	4770      	bx	lr

080115f2 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:
  ISORqstHandler=ISORequestHandler;
}

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
void tNMEA2000::RemoveGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 80115f2:	b480      	push	{r7}
 80115f4:	b085      	sub	sp, #20
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
 80115fa:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d02b      	beq.n	801165a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011606:	2b00      	cmp	r3, #0
 8011608:	d027      	beq.n	801165a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>

  tN2kGroupFunctionHandler* pPrevGroupFunctionHandler=pGroupFunctionHandlers;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801160e:	60fb      	str	r3, [r7, #12]
  // Handle, if first
  if ( pPrevGroupFunctionHandler==pGroupFunctionHandler ) {
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	429a      	cmp	r2, r3
 8011616:	d104      	bne.n	8011622 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    pGroupFunctionHandlers=pPrevGroupFunctionHandler->pNext;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	685a      	ldr	r2, [r3, #4]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	665a      	str	r2, [r3, #100]	; 0x64
 8011620:	e017      	b.n	8011652 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
  } else {
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d008      	beq.n	801163a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	683a      	ldr	r2, [r7, #0]
 801162e:	429a      	cmp	r2, r3
 8011630:	d003      	beq.n	801163a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pPrevGroupFunctionHandler = pPrevGroupFunctionHandler->pNext);
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	60fb      	str	r3, [r7, #12]
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 8011638:	e7f3      	b.n	8011622 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    if ( pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext==pGroupFunctionHandler ) {
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d008      	beq.n	8011652 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	683a      	ldr	r2, [r7, #0]
 8011646:	429a      	cmp	r2, r3
 8011648:	d103      	bne.n	8011652 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
      pPrevGroupFunctionHandler->pNext=pGroupFunctionHandler->pNext;
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	685a      	ldr	r2, [r3, #4]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	605a      	str	r2, [r3, #4]
    }
  }
  pGroupFunctionHandler->pNext=0;
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2200      	movs	r2, #0
 8011656:	605a      	str	r2, [r3, #4]
 8011658:	e000      	b.n	801165c <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 801165a:	bf00      	nop
}
 801165c:	3714      	adds	r7, #20
 801165e:	46bd      	mov	sp, r7
 8011660:	bc80      	pop	{r7}
 8011662:	4770      	bx	lr

08011664 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:

//*****************************************************************************
void tNMEA2000::AddGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0) return;
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d02c      	beq.n	80116ce <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  RemoveGroupFunctionHandler(pGroupFunctionHandler);
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7ff ffbb 	bl	80115f2 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
  // Add to the end on the list
  if ( pGroupFunctionHandlers==0 ) { // If there is none set, put it to first
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011680:	2b00      	cmp	r3, #0
 8011682:	d103      	bne.n	801168c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x28>
    pGroupFunctionHandlers=pGroupFunctionHandler;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	683a      	ldr	r2, [r7, #0]
 8011688:	665a      	str	r2, [r3, #100]	; 0x64
 801168a:	e021      	b.n	80116d0 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  } else {
    tN2kGroupFunctionHandler* pLastGroupFunctionHandler;
    // find last
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011690:	60fb      	str	r3, [r7, #12]
      pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN != 0;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d008      	beq.n	80116ac <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d003      	beq.n	80116ac <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pLastGroupFunctionHandler = pLastGroupFunctionHandler->pNext);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	60fb      	str	r3, [r7, #12]
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 80116aa:	e7f2      	b.n	8011692 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x2e>
    // Insert the new handler before the default handler if the default handler is present.
    if ( pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN == 0 ) {
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d008      	beq.n	80116c6 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d103      	bne.n	80116c6 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
      pGroupFunctionHandler->pNext = pLastGroupFunctionHandler->pNext;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	605a      	str	r2, [r3, #4]
    }
    // Add the new handler to the list.
    pLastGroupFunctionHandler->pNext = pGroupFunctionHandler;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	605a      	str	r2, [r3, #4]
 80116cc:	e000      	b.n	80116d0 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  if (pGroupFunctionHandler==0) return;
 80116ce:	bf00      	nop
  }
}
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <_Z14SetN2kPGN59392R7tN2kMsghhm>:
#endif

//*****************************************************************************
/// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b084      	sub	sp, #16
 80116da:	af00      	add	r7, sp, #0
 80116dc:	60f8      	str	r0, [r7, #12]
 80116de:	607b      	str	r3, [r7, #4]
 80116e0:	460b      	mov	r3, r1
 80116e2:	72fb      	strb	r3, [r7, #11]
 80116e4:	4613      	mov	r3, r2
 80116e6:	72bb      	strb	r3, [r7, #10]
    N2kMsg.SetPGN(59392L);
 80116e8:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 80116ec:	68f8      	ldr	r0, [r7, #12]
 80116ee:	f7f8 fc49 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2206      	movs	r2, #6
 80116f6:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddByte(Control);
 80116f8:	7afb      	ldrb	r3, [r7, #11]
 80116fa:	4619      	mov	r1, r3
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f7f8 fd81 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(GroupFunction);
 8011702:	7abb      	ldrb	r3, [r7, #10]
 8011704:	4619      	mov	r1, r3
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f7f8 fd7c 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 801170c:	21ff      	movs	r1, #255	; 0xff
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f7f8 fd78 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 8011714:	21ff      	movs	r1, #255	; 0xff
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f7f8 fd74 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 801171c:	21ff      	movs	r1, #255	; 0xff
 801171e:	68f8      	ldr	r0, [r7, #12]
 8011720:	f7f8 fd70 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add3ByteInt(PGN);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4619      	mov	r1, r3
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f7f8 fd34 	bl	800a196 <_ZN7tN2kMsg11Add3ByteIntEl>
}
 801172e:	bf00      	nop
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <_Z14SetN2kPGN60928R7tN2kMsgy>:
    N2kMsg.AddByte( 0x80 | ((IndustryGroup&0x7)<<4) | (SystemInstance&0x0f) );
}

//*****************************************************************************
// ISO Address Claim
void SetN2kPGN60928(tN2kMsg &N2kMsg, uint64_t Name) {
 8011736:	b580      	push	{r7, lr}
 8011738:	b084      	sub	sp, #16
 801173a:	af00      	add	r7, sp, #0
 801173c:	60f8      	str	r0, [r7, #12]
 801173e:	e9c7 2300 	strd	r2, r3, [r7]
    N2kMsg.SetPGN(N2kPGNIsoAddressClaim);
 8011742:	f44f 416e 	mov.w	r1, #60928	; 0xee00
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f7f8 fc1c 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2206      	movs	r2, #6
 8011750:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddUInt64(Name);
 8011752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7f8 fd41 	bl	800a1de <_ZN7tN2kMsg9AddUInt64Ey>
}
 801175c:	bf00      	nop
 801175e:	3710      	adds	r7, #16
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>:
//*****************************************************************************
// Product Information
void SetN2kPGN126996(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel, unsigned char LoadEquivalency) {
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	603b      	str	r3, [r7, #0]

    N2kMsg.SetPGN(N2kPGNProductInformation);
 8011772:	491d      	ldr	r1, [pc, #116]	; (80117e8 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh+0x84>)
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f7f8 fc05 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2206      	movs	r2, #6
 801177e:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteUInt(N2kVersion);
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	b29b      	uxth	r3, r3
 8011784:	4619      	mov	r1, r3
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f7f8 fcf1 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.Add2ByteUInt(ProductCode);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	b29b      	uxth	r3, r3
 8011790:	4619      	mov	r1, r3
 8011792:	68f8      	ldr	r0, [r7, #12]
 8011794:	f7f8 fceb 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.AddStr(ModelID, Max_N2kModelID_len);
 8011798:	2300      	movs	r3, #0
 801179a:	2220      	movs	r2, #32
 801179c:	6839      	ldr	r1, [r7, #0]
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f7f8 fd46 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(SwCode, Max_N2kSwCode_len);
 80117a4:	2300      	movs	r3, #0
 80117a6:	2220      	movs	r2, #32
 80117a8:	69b9      	ldr	r1, [r7, #24]
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f7f8 fd40 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelVersion, Max_N2kModelVersion_len);
 80117b0:	2300      	movs	r3, #0
 80117b2:	2220      	movs	r2, #32
 80117b4:	69f9      	ldr	r1, [r7, #28]
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	f7f8 fd3a 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelSerialCode, Max_N2kModelSerialCode_len);
 80117bc:	2300      	movs	r3, #0
 80117be:	2220      	movs	r2, #32
 80117c0:	6a39      	ldr	r1, [r7, #32]
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f7f8 fd34 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddByte(CertificationLevel);
 80117c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80117cc:	4619      	mov	r1, r3
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7f8 fd18 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(LoadEquivalency);
 80117d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117d8:	4619      	mov	r1, r3
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f7f8 fd12 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
}
 80117e0:	bf00      	nop
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	0001f014 	.word	0x0001f014

080117ec <_Z13ProgmemStrLenPKc>:

  return true;
}

//*****************************************************************************
size_t ProgmemStrLen(const char *str) {
 80117ec:	b480      	push	{r7}
 80117ee:	b085      	sub	sp, #20
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  size_t len;
    if (str==0) return 0;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d101      	bne.n	80117fe <_Z13ProgmemStrLenPKc+0x12>
 80117fa:	2300      	movs	r3, #0
 80117fc:	e00c      	b.n	8011818 <_Z13ProgmemStrLenPKc+0x2c>
    for (len=0; pgm_read_byte(&(str[len]))!=0; len++ );
 80117fe:	2300      	movs	r3, #0
 8011800:	60fb      	str	r3, [r7, #12]
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	4413      	add	r3, r2
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d003      	beq.n	8011816 <_Z13ProgmemStrLenPKc+0x2a>
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3301      	adds	r3, #1
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	e7f5      	b.n	8011802 <_Z13ProgmemStrLenPKc+0x16>
    return len;
 8011816:	68fb      	ldr	r3, [r7, #12]
}
 8011818:	4618      	mov	r0, r3
 801181a:	3714      	adds	r7, #20
 801181c:	46bd      	mov	sp, r7
 801181e:	bc80      	pop	{r7}
 8011820:	4770      	bx	lr

08011822 <_Z6StrLenPKc>:

//*****************************************************************************
size_t StrLen(const char *str) {
 8011822:	b580      	push	{r7, lr}
 8011824:	b082      	sub	sp, #8
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
    if (str==0) return 0;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d101      	bne.n	8011834 <_Z6StrLenPKc+0x12>
 8011830:	2300      	movs	r3, #0
 8011832:	e004      	b.n	801183e <_Z6StrLenPKc+0x1c>
    return strlen(str);
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ee fd01 	bl	800023c <strlen>
 801183a:	4603      	mov	r3, r0
 801183c:	bf00      	nop
}
 801183e:	4618      	mov	r0, r3
 8011840:	3708      	adds	r7, #8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
	...

08011848 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>:
// Configuration information
void SetN2kPGN126998(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1,
                     const char *InstallationDescription2,
                     bool UsePgm) {
 8011848:	b580      	push	{r7, lr}
 801184a:	b08a      	sub	sp, #40	; 0x28
 801184c:	af00      	add	r7, sp, #0
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	603b      	str	r3, [r7, #0]
  size_t TotalLen;
  size_t MaxLen=tN2kMsg::MaxDataLen-6; // Each field has 2 extra bytes
 8011856:	23d9      	movs	r3, #217	; 0xd9
 8011858:	61bb      	str	r3, [r7, #24]
  size_t ManInfoLen;
  size_t InstDesc1Len;
  size_t InstDesc2Len;

    if ( UsePgm ) {
 801185a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801185e:	2b00      	cmp	r3, #0
 8011860:	d00c      	beq.n	801187c <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x34>
      ManInfoLen=ProgmemStrLen(ManufacturerInformation);
 8011862:	68b8      	ldr	r0, [r7, #8]
 8011864:	f7ff ffc2 	bl	80117ec <_Z13ProgmemStrLenPKc>
 8011868:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=ProgmemStrLen(InstallationDescription1);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff ffbe 	bl	80117ec <_Z13ProgmemStrLenPKc>
 8011870:	6238      	str	r0, [r7, #32]
      InstDesc2Len=ProgmemStrLen(InstallationDescription2);
 8011872:	6838      	ldr	r0, [r7, #0]
 8011874:	f7ff ffba 	bl	80117ec <_Z13ProgmemStrLenPKc>
 8011878:	61f8      	str	r0, [r7, #28]
 801187a:	e00b      	b.n	8011894 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x4c>
    } else {
      ManInfoLen=StrLen(ManufacturerInformation);
 801187c:	68b8      	ldr	r0, [r7, #8]
 801187e:	f7ff ffd0 	bl	8011822 <_Z6StrLenPKc>
 8011882:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=StrLen(InstallationDescription1);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7ff ffcc 	bl	8011822 <_Z6StrLenPKc>
 801188a:	6238      	str	r0, [r7, #32]
      InstDesc2Len=StrLen(InstallationDescription2);
 801188c:	6838      	ldr	r0, [r7, #0]
 801188e:	f7ff ffc8 	bl	8011822 <_Z6StrLenPKc>
 8011892:	61f8      	str	r0, [r7, #28]
    }

    if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 8011894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011896:	2b47      	cmp	r3, #71	; 0x47
 8011898:	d901      	bls.n	801189e <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x56>
 801189a:	2347      	movs	r3, #71	; 0x47
 801189c:	627b      	str	r3, [r7, #36]	; 0x24
    if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 801189e:	6a3b      	ldr	r3, [r7, #32]
 80118a0:	2b47      	cmp	r3, #71	; 0x47
 80118a2:	d901      	bls.n	80118a8 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x60>
 80118a4:	2347      	movs	r3, #71	; 0x47
 80118a6:	623b      	str	r3, [r7, #32]
    if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	2b47      	cmp	r3, #71	; 0x47
 80118ac:	d901      	bls.n	80118b2 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x6a>
 80118ae:	2347      	movs	r3, #71	; 0x47
 80118b0:	61fb      	str	r3, [r7, #28]

    TotalLen=0;
 80118b2:	2300      	movs	r3, #0
 80118b4:	617b      	str	r3, [r7, #20]
    if (TotalLen+ManInfoLen>MaxLen) ManInfoLen=MaxLen-TotalLen;
 80118b6:	697a      	ldr	r2, [r7, #20]
 80118b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ba:	4413      	add	r3, r2
 80118bc:	69ba      	ldr	r2, [r7, #24]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d203      	bcs.n	80118ca <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x82>
 80118c2:	69ba      	ldr	r2, [r7, #24]
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	627b      	str	r3, [r7, #36]	; 0x24
    TotalLen+=ManInfoLen;
 80118ca:	697a      	ldr	r2, [r7, #20]
 80118cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ce:	4413      	add	r3, r2
 80118d0:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc1Len>MaxLen) InstDesc1Len=MaxLen-TotalLen;
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	6a3b      	ldr	r3, [r7, #32]
 80118d6:	4413      	add	r3, r2
 80118d8:	69ba      	ldr	r2, [r7, #24]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d203      	bcs.n	80118e6 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x9e>
 80118de:	69ba      	ldr	r2, [r7, #24]
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	623b      	str	r3, [r7, #32]
    TotalLen+=InstDesc1Len;
 80118e6:	697a      	ldr	r2, [r7, #20]
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	4413      	add	r3, r2
 80118ec:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc2Len>MaxLen) InstDesc2Len=MaxLen-TotalLen;
 80118ee:	697a      	ldr	r2, [r7, #20]
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	4413      	add	r3, r2
 80118f4:	69ba      	ldr	r2, [r7, #24]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d203      	bcs.n	8011902 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0xba>
 80118fa:	69ba      	ldr	r2, [r7, #24]
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	1ad3      	subs	r3, r2, r3
 8011900:	61fb      	str	r3, [r7, #28]
    TotalLen+=InstDesc2Len;
 8011902:	697a      	ldr	r2, [r7, #20]
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	4413      	add	r3, r2
 8011908:	617b      	str	r3, [r7, #20]

    N2kMsg.SetPGN(N2kPGNConfigurationInformation);
 801190a:	4922      	ldr	r1, [pc, #136]	; (8011994 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x14c>)
 801190c:	68f8      	ldr	r0, [r7, #12]
 801190e:	f7f8 fb39 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2206      	movs	r2, #6
 8011916:	711a      	strb	r2, [r3, #4]
    // InstallationDescription1
    N2kMsg.AddByte(InstDesc1Len+2);
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	b2db      	uxtb	r3, r3
 801191c:	3302      	adds	r3, #2
 801191e:	b2db      	uxtb	r3, r3
 8011920:	4619      	mov	r1, r3
 8011922:	68f8      	ldr	r0, [r7, #12]
 8011924:	f7f8 fc6e 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 8011928:	2101      	movs	r1, #1
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f7f8 fc6a 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription1,InstDesc1Len,UsePgm);
 8011930:	6a3a      	ldr	r2, [r7, #32]
 8011932:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011936:	6879      	ldr	r1, [r7, #4]
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	f7f8 fc79 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>

    // InstallationDescription2
    N2kMsg.AddByte(InstDesc2Len+2);
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	b2db      	uxtb	r3, r3
 8011942:	3302      	adds	r3, #2
 8011944:	b2db      	uxtb	r3, r3
 8011946:	4619      	mov	r1, r3
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f7f8 fc5b 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 801194e:	2101      	movs	r1, #1
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f7f8 fc57 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription2,InstDesc2Len,UsePgm);
 8011956:	69fa      	ldr	r2, [r7, #28]
 8011958:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801195c:	6839      	ldr	r1, [r7, #0]
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f7f8 fc66 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>
    // ManufacturerInformation
    N2kMsg.AddByte(ManInfoLen+2);
 8011964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011966:	b2db      	uxtb	r3, r3
 8011968:	3302      	adds	r3, #2
 801196a:	b2db      	uxtb	r3, r3
 801196c:	4619      	mov	r1, r3
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f7f8 fc48 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 8011974:	2101      	movs	r1, #1
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	f7f8 fc44 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(ManufacturerInformation,ManInfoLen,UsePgm);
 801197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801197e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011982:	68b9      	ldr	r1, [r7, #8]
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f7f8 fc53 	bl	800a230 <_ZN7tN2kMsg6AddStrEPKcib>
}
 801198a:	bf00      	nop
 801198c:	3728      	adds	r7, #40	; 0x28
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	0001f016 	.word	0x0001f016

08011998 <_Z16ParseN2kPGN59904RK7tN2kMsgRm>:
    N2kMsg.Destination=Destination;
    N2kMsg.Priority=6;
    N2kMsg.Add3ByteInt(RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
  int result=((N2kMsg.DataLen>=3) && (N2kMsg.DataLen<=8));
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	691b      	ldr	r3, [r3, #16]
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	dd05      	ble.n	80119b6 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	2b08      	cmp	r3, #8
 80119b0:	dc01      	bgt.n	80119b6 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 80119b2:	2301      	movs	r3, #1
 80119b4:	e000      	b.n	80119b8 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x20>
 80119b6:	2300      	movs	r3, #0
 80119b8:	60fb      	str	r3, [r7, #12]
  RequestedPGN=0;
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	2200      	movs	r2, #0
 80119be:	601a      	str	r2, [r3, #0]
  if (result) {
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d00c      	beq.n	80119e0 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x48>
    int Index=0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	60bb      	str	r3, [r7, #8]
    RequestedPGN=N2kMsg.Get3ByteUInt(Index);
 80119ca:	f107 0308 	add.w	r3, r7, #8
 80119ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119d2:	4619      	mov	r1, r3
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7f8 fc7a 	bl	800a2ce <_ZNK7tN2kMsg12Get3ByteUIntERim>
 80119da:	4602      	mov	r2, r0
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	601a      	str	r2, [r3, #0]
  }

  return result;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	bf14      	ite	ne
 80119e6:	2301      	movne	r3, #1
 80119e8:	2300      	moveq	r3, #0
 80119ea:	b2db      	uxtb	r3, r3
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <_Z15SetN2kPGN126993R7tN2kMsgmh>:
}

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
// Heartbeat
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	4613      	mov	r3, r2
 8011a00:	71fb      	strb	r3, [r7, #7]
	N2kMsg.SetPGN(126993L);
 8011a02:	4914      	ldr	r1, [pc, #80]	; (8011a54 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x60>)
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f7f8 fabd 	bl	8009f84 <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=7;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2207      	movs	r2, #7
 8011a0e:	711a      	strb	r2, [r3, #4]
	if ( timeInterval_ms>MaxHeartbeatInterval ) {
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	4a11      	ldr	r2, [pc, #68]	; (8011a58 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x64>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d905      	bls.n	8011a24 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x30>
	  N2kMsg.Add2ByteUInt(0xfffe); // Error
 8011a18:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	f7f8 fba6 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
 8011a22:	e005      	b.n	8011a30 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x3c>
	} else {
	  N2kMsg.Add2ByteUInt((uint16_t)(timeInterval_ms));
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	4619      	mov	r1, r3
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	f7f8 fb9f 	bl	800a16e <_ZN7tN2kMsg12Add2ByteUIntEt>
	}
	N2kMsg.AddByte(sequenceCounter);
 8011a30:	79fb      	ldrb	r3, [r7, #7]
 8011a32:	4619      	mov	r1, r3
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f7f8 fbe5 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.AddByte(0xff); // Reserved
 8011a3a:	21ff      	movs	r1, #255	; 0xff
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	f7f8 fbe1 	bl	800a204 <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.Add4ByteUInt(0xffffffff); // Reserved
 8011a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	f7f8 fbb7 	bl	800a1ba <_ZN7tN2kMsg12Add4ByteUIntEm>
}
 8011a4c:	bf00      	nop
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	0001f011 	.word	0x0001f011
 8011a58:	0009ffd8 	.word	0x0009ffd8

08011a5c <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>:
  template <typename T> static T N2kMin(T a, T b) { return (a<b?a:b); }
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	4603      	mov	r3, r0
 8011a64:	460a      	mov	r2, r1
 8011a66:	71fb      	strb	r3, [r7, #7]
 8011a68:	4613      	mov	r3, r2
 8011a6a:	71bb      	strb	r3, [r7, #6]
 8011a6c:	79fa      	ldrb	r2, [r7, #7]
 8011a6e:	79bb      	ldrb	r3, [r7, #6]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d201      	bcs.n	8011a78 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1c>
 8011a74:	79fb      	ldrb	r3, [r7, #7]
 8011a76:	e000      	b.n	8011a7a <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1e>
 8011a78:	79bb      	ldrb	r3, [r7, #6]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	370c      	adds	r7, #12
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bc80      	pop	{r7}
 8011a82:	4770      	bx	lr

08011a84 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>:
  template <typename T> static T N2kMax(T a, T b) { return (a>b?a:b); }
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	460a      	mov	r2, r1
 8011a8e:	71fb      	strb	r3, [r7, #7]
 8011a90:	4613      	mov	r3, r2
 8011a92:	71bb      	strb	r3, [r7, #6]
 8011a94:	79fa      	ldrb	r2, [r7, #7]
 8011a96:	79bb      	ldrb	r3, [r7, #6]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d901      	bls.n	8011aa0 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1c>
 8011a9c:	79fb      	ldrb	r3, [r7, #7]
 8011a9e:	e000      	b.n	8011aa2 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1e>
 8011aa0:	79bb      	ldrb	r3, [r7, #6]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bc80      	pop	{r7}
 8011aaa:	4770      	bx	lr

08011aac <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>:

#include "NMEA2000_STM32.hpp"


//*****************************************************************************
tNMEA2000_STM32::tNMEA2000_STM32(CAN_HandleTypeDef *_canBus) :
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b082      	sub	sp, #8
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
		tSTM32_CAN(_canBus, tSTM32_CAN::CAN250kbit), // NMEA2000 CAN is allways 250kbit
		tNMEA2000() {
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	336c      	adds	r3, #108	; 0x6c
 8011aba:	2204      	movs	r2, #4
 8011abc:	6839      	ldr	r1, [r7, #0]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f000 f8c2 	bl	8011c48 <_ZN10tSTM32_CANC1EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fa fbb6 	bl	800c238 <_ZN9tNMEA2000C1Ev>
 8011acc:	4a03      	ldr	r2, [pc, #12]	; (8011adc <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x30>)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	601a      	str	r2, [r3, #0]

}
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	080177e4 	.word	0x080177e4

08011ae0 <_ZN15tNMEA2000_STM32D1Ev>:

tNMEA2000_STM32::~tNMEA2000_STM32() {
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	4a04      	ldr	r2, [pc, #16]	; (8011afc <_ZN15tNMEA2000_STM32D1Ev+0x1c>)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	601a      	str	r2, [r3, #0]
}
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	4618      	mov	r0, r3
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bc80      	pop	{r7}
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	080177e4 	.word	0x080177e4

08011b00 <_ZN15tNMEA2000_STM32D0Ev>:
tNMEA2000_STM32::~tNMEA2000_STM32() {
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
}
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff ffe9 	bl	8011ae0 <_ZN15tNMEA2000_STM32D1Ev>
 8011b0e:	21d4      	movs	r1, #212	; 0xd4
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f003 fff9 	bl	8015b08 <_ZdlPvj>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <_ZN15tNMEA2000_STM327CANOpenEv>:

// forwarding of tNMEA2000 virtual functions to the corresponding functions in tSTM32_CAN base class
bool tNMEA2000_STM32::CANOpen() {
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b086      	sub	sp, #24
 8011b24:	af02      	add	r7, sp, #8
 8011b26:	6078      	str	r0, [r7, #4]
	bool ret;
	ret = tSTM32_CAN::CANOpen();
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	336c      	adds	r3, #108	; 0x6c
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f000 f8c5 	bl	8011cbc <_ZN10tSTM32_CAN7CANOpenEv>
 8011b32:	4603      	mov	r3, r0
 8011b34:	73fb      	strb	r3, [r7, #15]

	// only accept extended frames on NMEA2000 CAN bus
	if (ret == HAL_OK) {
 8011b36:	7bfb      	ldrb	r3, [r7, #15]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10f      	bne.n	8011b5c <_ZN15tNMEA2000_STM327CANOpenEv+0x3c>
		ret = tSTM32_CAN::SetCANFilter( true, 0, 0x00000000, 0x00000000 );
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011b42:	2300      	movs	r3, #0
 8011b44:	9300      	str	r3, [sp, #0]
 8011b46:	2300      	movs	r3, #0
 8011b48:	2200      	movs	r2, #0
 8011b4a:	2101      	movs	r1, #1
 8011b4c:	f000 fb86 	bl	801225c <_ZN10tSTM32_CAN12SetCANFilterEbmmm>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	bf14      	ite	ne
 8011b56:	2301      	movne	r3, #1
 8011b58:	2300      	moveq	r3, #0
 8011b5a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8011b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb>:

bool tNMEA2000_STM32::CANSendFrame(unsigned long id, unsigned char len, const unsigned char* buf, bool wait_sent) {
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b086      	sub	sp, #24
 8011b6a:	af02      	add	r7, sp, #8
 8011b6c:	60f8      	str	r0, [r7, #12]
 8011b6e:	60b9      	str	r1, [r7, #8]
 8011b70:	603b      	str	r3, [r7, #0]
 8011b72:	4613      	mov	r3, r2
 8011b74:	71fb      	strb	r3, [r7, #7]
	return tSTM32_CAN::CANSendFrame(id, len, buf, wait_sent);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011b7c:	79fa      	ldrb	r2, [r7, #7]
 8011b7e:	7e3b      	ldrb	r3, [r7, #24]
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	68b9      	ldr	r1, [r7, #8]
 8011b86:	f000 f8d9 	bl	8011d3c <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb>
 8011b8a:	4603      	mov	r3, r0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh>:

bool tNMEA2000_STM32::CANGetFrame(unsigned long& id, unsigned char& len, unsigned char* buf) {
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b084      	sub	sp, #16
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	60f8      	str	r0, [r7, #12]
 8011b9c:	60b9      	str	r1, [r7, #8]
 8011b9e:	607a      	str	r2, [r7, #4]
 8011ba0:	603b      	str	r3, [r7, #0]
	return tSTM32_CAN::CANGetFrame(id, len, buf);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	68b9      	ldr	r1, [r7, #8]
 8011bae:	f000 f94d 	bl	8011e4c <_ZN10tSTM32_CAN11CANGetFrameERmRhPh>
 8011bb2:	4603      	mov	r3, r0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3710      	adds	r7, #16
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <millis>:

void delay(const uint32_t ms) {
	HAL_Delay(ms);
};

uint32_t millis(void) {
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8011bc0:	f7f0 fb28 	bl	8002214 <HAL_GetTick>
 8011bc4:	4603      	mov	r3, r0
};
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	bd80      	pop	{r7, pc}
	...

08011bcc <_Z41__static_initialization_and_destruction_0ii>:

// N2kStream is using write() function
int write(char *str, int len) {
	return _write(0, str, len);
}
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d107      	bne.n	8011bec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d102      	bne.n	8011bec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011be6:	4809      	ldr	r0, [pc, #36]	; (8011c0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011be8:	f7ef fcf8 	bl	80015dc <_ZNSt6vectorIP10tSTM32_CANSaIS1_EEC1Ev>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d107      	bne.n	8011c02 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d102      	bne.n	8011c02 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8011bfc:	4803      	ldr	r0, [pc, #12]	; (8011c0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011bfe:	f7ef ff3d 	bl	8001a7c <_ZNSt6vectorIP10tSTM32_CANSaIS1_EED1Ev>
 8011c02:	bf00      	nop
 8011c04:	3708      	adds	r7, #8
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20000370 	.word	0x20000370

08011c10 <_GLOBAL__sub_I__ZN15tNMEA2000_STM32C2EP19__CAN_HandleTypeDef>:
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c18:	2001      	movs	r0, #1
 8011c1a:	f7ff ffd7 	bl	8011bcc <_Z41__static_initialization_and_destruction_0ii>
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <_GLOBAL__sub_D__ZN15tNMEA2000_STM32C2EP19__CAN_HandleTypeDef>:
 8011c20:	b580      	push	{r7, lr}
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c28:	2000      	movs	r0, #0
 8011c2a:	f7ff ffcf 	bl	8011bcc <_Z41__static_initialization_and_destruction_0ii>
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bc80      	pop	{r7}
 8011c44:	4770      	bx	lr
	...

08011c48 <_ZN10tSTM32_CANC1EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE>:
# define DbgPrintfSWDErr(fmt, args...)
#endif


//*****************************************************************************
tSTM32_CAN::tSTM32_CAN(CAN_HandleTypeDef *_canBus, CANbaudRatePrescaler _CANbaudRate) :
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b086      	sub	sp, #24
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	4613      	mov	r3, r2
 8011c54:	71fb      	strb	r3, [r7, #7]
		canBus(_canBus),
		CANbaudRate(_CANbaudRate) {
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	601a      	str	r2, [r3, #0]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	79fa      	ldrb	r2, [r7, #7]
 8011c60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	//NMEA2000_STM32_instance = this;
	canInstances.push_back(this); // add this instance to canInstances
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	f107 0314 	add.w	r3, r7, #20
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	4812      	ldr	r0, [pc, #72]	; (8011cb8 <_ZN10tSTM32_CANC1EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE+0x70>)
 8011c70:	f000 fd88 	bl	8012784 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE9push_backEOS1_>

	CANRxFIFO = CAN_RX_FIFO0; //  fpr now only use fifo 0
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2200      	movs	r2, #0
 8011c78:	65da      	str	r2, [r3, #92]	; 0x5c

	rxRing = 0;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	661a      	str	r2, [r3, #96]	; 0x60
	txRing = 0;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2200      	movs	r2, #0
 8011c84:	665a      	str	r2, [r3, #100]	; 0x64

	MaxCANReceiveFrames = 32;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2220      	movs	r2, #32
 8011c8a:	809a      	strh	r2, [r3, #4]
	MaxCANSendFrames = 16;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2210      	movs	r2, #16
 8011c90:	80da      	strh	r2, [r3, #6]

	prioBits = 3; // For NMEA2000 or SAE J1939 we use only the 3 highest bits of the ID for the priority
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2203      	movs	r2, #3
 8011c96:	721a      	strb	r2, [r3, #8]
	maxPrio = pow(2, prioBits) - 1; // max unsigned value is 2^prioBits -1   (for 3 bits priority 0...7)
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	7a1b      	ldrb	r3, [r3, #8]
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	2002      	movs	r0, #2
 8011ca0:	f000 fd4e 	bl	8012740 <_Z3powmm>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	1e5a      	subs	r2, r3, #1
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	60da      	str	r2, [r3, #12]

}
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3718      	adds	r7, #24
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	2000037c 	.word	0x2000037c

08011cbc <_ZN10tSTM32_CAN7CANOpenEv>:

//*****************************************************************************
bool tSTM32_CAN::CANOpen() {
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]

	bool ret = true;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	73fb      	strb	r3, [r7, #15]

	// CAN initialisation instead of using the by the STM32cubeIDE configuration tool generated init function
	if (CANInit() != HAL_OK) {
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fa0b 	bl	80120e4 <_ZN10tSTM32_CAN7CANInitEv>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	bf14      	ite	ne
 8011cd4:	2301      	movne	r3, #1
 8011cd6:	2300      	moveq	r3, #0
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d001      	beq.n	8011ce2 <_ZN10tSTM32_CAN7CANOpenEv+0x26>
		ret = false;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	73fb      	strb	r3, [r7, #15]
	}

	// activate CAN callback interrupts
	if (HAL_CAN_ActivateNotification(canBus,
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f248 1103 	movw	r1, #33027	; 0x8103
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7f1 f9ef 	bl	80030ce <HAL_CAN_ActivateNotification>
 8011cf0:	4603      	mov	r3, r0
			CAN_IT_RX_FIFO0_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY |
			CAN_IT_ERROR |
			CAN_IT_ERROR_WARNING
		) != HAL_OK) {
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	bf14      	ite	ne
 8011cf6:	2301      	movne	r3, #1
 8011cf8:	2300      	moveq	r3, #0
 8011cfa:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(canBus,
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d001      	beq.n	8011d04 <_ZN10tSTM32_CAN7CANOpenEv+0x48>
		ret = false;
 8011d00:	2300      	movs	r3, #0
 8011d02:	73fb      	strb	r3, [r7, #15]
	}

	// Enable CAN
	if (HAL_CAN_Start(canBus) != HAL_OK) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7f0 ff7d 	bl	8002c08 <HAL_CAN_Start>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bf14      	ite	ne
 8011d14:	2301      	movne	r3, #1
 8011d16:	2300      	moveq	r3, #0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <_ZN10tSTM32_CAN7CANOpenEv+0x66>
		ret = false;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	73fb      	strb	r3, [r7, #15]
	}

	DbgPrintfSWD("CAN started");
 8011d22:	4805      	ldr	r0, [pc, #20]	; (8011d38 <_ZN10tSTM32_CAN7CANOpenEv+0x7c>)
 8011d24:	f004 f97a 	bl	801601c <iprintf>
 8011d28:	200a      	movs	r0, #10
 8011d2a:	f004 f98f 	bl	801604c <putchar>
	return ret;
 8011d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3710      	adds	r7, #16
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}
 8011d38:	08016fd8 	.word	0x08016fd8

08011d3c <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb>:

//*****************************************************************************
bool tSTM32_CAN::CANSendFrame(unsigned long id, unsigned char len, const unsigned char* buf, bool wait_sent) {
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b088      	sub	sp, #32
 8011d40:	af02      	add	r7, sp, #8
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	603b      	str	r3, [r7, #0]
 8011d48:	4613      	mov	r3, r2
 8011d4a:	71fb      	strb	r3, [r7, #7]
	//TODO wait_sent
	uint8_t prio = (uint8_t)((id >> 26) & 0x7);
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	0e9b      	lsrs	r3, r3, #26
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	f003 0307 	and.w	r3, r3, #7
 8011d56:	757b      	strb	r3, [r7, #21]

	bool ret = false;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_DeactivateNotification(canBus, CAN_IT_TX_MAILBOX_EMPTY);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2101      	movs	r1, #1
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7f1 f9d8 	bl	8003118 <HAL_CAN_DeactivateNotification>

	bool TxMailboxesFull = HAL_CAN_GetTxMailboxesFreeLevel(canBus) == 0;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f1 f869 	bl	8002e44 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	bf0c      	ite	eq
 8011d78:	2301      	moveq	r3, #1
 8011d7a:	2300      	movne	r3, #0
 8011d7c:	753b      	strb	r3, [r7, #20]
	bool SendFromBuffer = false;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	75bb      	strb	r3, [r7, #22]

	// If TX buffer has already some frames waiting with higher prio or mailbox is full, buffer frame
	if ( !txRing->isEmpty(prio) || TxMailboxesFull ) {
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d86:	7d7a      	ldrb	r2, [r7, #21]
 8011d88:	4611      	mov	r1, r2
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 fd0b 	bl	80127a6 <_ZNK19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE7isEmptyEh>
 8011d90:	4603      	mov	r3, r0
 8011d92:	f083 0301 	eor.w	r3, r3, #1
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0x66>
 8011d9c:	7d3b      	ldrb	r3, [r7, #20]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d001      	beq.n	8011da6 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0x6a>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e000      	b.n	8011da8 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0x6c>
 8011da6:	2300      	movs	r3, #0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d029      	beq.n	8011e00 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0xc4>
		CAN_message_t *msg = txRing->getAddRef(prio);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011db0:	7d7a      	ldrb	r2, [r7, #21]
 8011db2:	4611      	mov	r1, r2
 8011db4:	4618      	mov	r0, r3
 8011db6:	f000 fd1d 	bl	80127f4 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh>
 8011dba:	6138      	str	r0, [r7, #16]
		if ( msg!=0 ) {
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d01c      	beq.n	8011dfc <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0xc0>
			msg->id = id;
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	68ba      	ldr	r2, [r7, #8]
 8011dc6:	601a      	str	r2, [r3, #0]
			msg->flags.extended = 1;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	711a      	strb	r2, [r3, #4]
			if ( len > 8 ) len = 8;
 8011dce:	79fb      	ldrb	r3, [r7, #7]
 8011dd0:	2b08      	cmp	r3, #8
 8011dd2:	d901      	bls.n	8011dd8 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0x9c>
 8011dd4:	2308      	movs	r3, #8
 8011dd6:	71fb      	strb	r3, [r7, #7]
			msg->len = len;
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	79fa      	ldrb	r2, [r7, #7]
 8011ddc:	721a      	strb	r2, [r3, #8]
			memcpy(msg->buf, buf, len);
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	3309      	adds	r3, #9
 8011de2:	79fa      	ldrb	r2, [r7, #7]
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	4618      	mov	r0, r3
 8011de8:	f004 f80c 	bl	8015e04 <memcpy>
			ret = true;
 8011dec:	2301      	movs	r3, #1
 8011dee:	75fb      	strb	r3, [r7, #23]
			//frame buffered
			DbgPrintfSWD("frame buffered");
 8011df0:	4815      	ldr	r0, [pc, #84]	; (8011e48 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0x10c>)
 8011df2:	f004 f913 	bl	801601c <iprintf>
 8011df6:	200a      	movs	r0, #10
 8011df8:	f004 f928 	bl	801604c <putchar>
		}
		SendFromBuffer = true;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	75bb      	strb	r3, [r7, #22]
	}

	if ( !TxMailboxesFull ) {
 8011e00:	7d3b      	ldrb	r3, [r7, #20]
 8011e02:	f083 0301 	eor.w	r3, r3, #1
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d012      	beq.n	8011e32 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0xf6>
		if ( SendFromBuffer ) {
 8011e0c:	7dbb      	ldrb	r3, [r7, #22]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d005      	beq.n	8011e1e <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0xe2>
			ret = SendFromTxRing();
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f000 f8bc 	bl	8011f90 <_ZN10tSTM32_CAN14SendFromTxRingEv>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	75fb      	strb	r3, [r7, #23]
 8011e1c:	e009      	b.n	8011e32 <_ZN10tSTM32_CAN12CANSendFrameEmhPKhb+0xf6>
		} else {
			ret = CANWriteTxMailbox(id, len, buf, 1);
 8011e1e:	79fa      	ldrb	r2, [r7, #7]
 8011e20:	2301      	movs	r3, #1
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	68b9      	ldr	r1, [r7, #8]
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 f84d 	bl	8011ec8 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	75fb      	strb	r3, [r7, #23]
		}
		/* transmit entry accepted */
	}

	HAL_CAN_ActivateNotification(canBus, CAN_IT_TX_MAILBOX_EMPTY);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2101      	movs	r1, #1
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7f1 f948 	bl	80030ce <HAL_CAN_ActivateNotification>

	return ret;
 8011e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3718      	adds	r7, #24
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	08016fe4 	.word	0x08016fe4

08011e4c <_ZN10tSTM32_CAN11CANGetFrameERmRhPh>:
//*****************************************************************************
bool tSTM32_CAN::CANSendFrameStruct(tSTM32_CAN::CAN_message_t* message) {
	return CANSendFrame(message->id, message->len, message->buf, message->flags.extended);
}
//*****************************************************************************
bool tSTM32_CAN::CANGetFrame(unsigned long& id, unsigned char& len, unsigned char* buf) {
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
 8011e58:	603b      	str	r3, [r7, #0]

	bool ret = false;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_DeactivateNotification(canBus, CAN_IT_RX_FIFO0_MSG_PENDING);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2102      	movs	r1, #2
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7f1 f957 	bl	8003118 <HAL_CAN_DeactivateNotification>

	const CAN_message_t *msg = rxRing->getReadRef();
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011e6e:	2100      	movs	r1, #0
 8011e70:	4618      	mov	r0, r3
 8011e72:	f000 fd42 	bl	80128fa <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh>
 8011e76:	6138      	str	r0, [r7, #16]
	if ( msg!=0 ) {
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d019      	beq.n	8011eb2 <_ZN10tSTM32_CAN11CANGetFrameERmRhPh+0x66>
	    id = msg->id;
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	601a      	str	r2, [r3, #0]
	    len = msg->len;
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	7a1a      	ldrb	r2, [r3, #8]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	701a      	strb	r2, [r3, #0]
		if ( len > 8 ) len = 8;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	2b08      	cmp	r3, #8
 8011e94:	d902      	bls.n	8011e9c <_ZN10tSTM32_CAN11CANGetFrameERmRhPh+0x50>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2208      	movs	r2, #8
 8011e9a:	701a      	strb	r2, [r3, #0]
	    memcpy(buf, msg->buf, len);
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	f103 0109 	add.w	r1, r3, #9
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	6838      	ldr	r0, [r7, #0]
 8011eaa:	f003 ffab 	bl	8015e04 <memcpy>
	    ret = true;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	75fb      	strb	r3, [r7, #23]
	}

	HAL_CAN_ActivateNotification(canBus, CAN_IT_RX_FIFO0_MSG_PENDING);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2102      	movs	r1, #2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7f1 f908 	bl	80030ce <HAL_CAN_ActivateNotification>

	return ret;
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]

}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3718      	adds	r7, #24
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb>:


}

// *****************************************************************************
bool tSTM32_CAN::CANWriteTxMailbox(unsigned long id, unsigned char len, const unsigned char *buf, bool extended) {
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	60b9      	str	r1, [r7, #8]
 8011ed2:	603b      	str	r3, [r7, #0]
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	71fb      	strb	r3, [r7, #7]

	if (extended) {
 8011ed8:	7e3b      	ldrb	r3, [r7, #24]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d008      	beq.n	8011ef0 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0x28>
		CANTxHeader.IDE = CAN_ID_EXT;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2204      	movs	r2, #4
 8011ee2:	619a      	str	r2, [r3, #24]
		CANTxHeader.ExtId = id & 0x1FFFFFFF;
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	615a      	str	r2, [r3, #20]
 8011eee:	e007      	b.n	8011f00 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0x38>
	} else {
		CANTxHeader.IDE = CAN_ID_STD;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	619a      	str	r2, [r3, #24]
		CANTxHeader.StdId = id & 0x7FF;
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	611a      	str	r2, [r3, #16]
	}
	CANTxHeader.RTR = CAN_RTR_DATA;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2200      	movs	r2, #0
 8011f04:	61da      	str	r2, [r3, #28]
	CANTxHeader.DLC = len;
 8011f06:	79fa      	ldrb	r2, [r7, #7]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	621a      	str	r2, [r3, #32]
	CANTxHeader.TransmitGlobalTime = DISABLE;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if ( len > 8 ) len = 8;
 8011f14:	79fb      	ldrb	r3, [r7, #7]
 8011f16:	2b08      	cmp	r3, #8
 8011f18:	d901      	bls.n	8011f1e <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0x56>
 8011f1a:	2308      	movs	r3, #8
 8011f1c:	71fb      	strb	r3, [r7, #7]
    memcpy(CANTxdata, buf, len);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	3344      	adds	r3, #68	; 0x44
 8011f22:	79fa      	ldrb	r2, [r7, #7]
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f003 ff6c 	bl	8015e04 <memcpy>
	//for (int i = 0; i < len; i++) {
	//	CANTxdata[i] = buf[i];
	//}

	// send message
	if (HAL_CAN_AddTxMessage(canBus, &CANTxHeader, CANTxdata, &CANTxMailbox) == HAL_OK) {
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	6818      	ldr	r0, [r3, #0]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f103 0110 	add.w	r1, r3, #16
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	3354      	adds	r3, #84	; 0x54
 8011f40:	f7f0 fea6 	bl	8002c90 <HAL_CAN_AddTxMessage>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	bf0c      	ite	eq
 8011f4a:	2301      	moveq	r3, #1
 8011f4c:	2300      	movne	r3, #0
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d008      	beq.n	8011f66 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0x9e>
		DbgPrintfSWD("Added frame to TX mailbox %lx", id);
 8011f54:	68b9      	ldr	r1, [r7, #8]
 8011f56:	480b      	ldr	r0, [pc, #44]	; (8011f84 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0xbc>)
 8011f58:	f004 f860 	bl	801601c <iprintf>
 8011f5c:	200a      	movs	r0, #10
 8011f5e:	f004 f875 	bl	801604c <putchar>
		return true;
 8011f62:	2301      	movs	r3, #1
 8011f64:	e00a      	b.n	8011f7c <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0xb4>
	} else {
		DbgPrintfSWDErr("Failed to write TX mailbox %lx", id);
 8011f66:	4808      	ldr	r0, [pc, #32]	; (8011f88 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0xc0>)
 8011f68:	f004 f858 	bl	801601c <iprintf>
 8011f6c:	68b9      	ldr	r1, [r7, #8]
 8011f6e:	4807      	ldr	r0, [pc, #28]	; (8011f8c <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb+0xc4>)
 8011f70:	f004 f854 	bl	801601c <iprintf>
 8011f74:	200a      	movs	r0, #10
 8011f76:	f004 f869 	bl	801604c <putchar>
		return false;
 8011f7a:	2300      	movs	r3, #0
	}

}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3710      	adds	r7, #16
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	08017078 	.word	0x08017078
 8011f88:	08017098 	.word	0x08017098
 8011f8c:	080170a0 	.word	0x080170a0

08011f90 <_ZN10tSTM32_CAN14SendFromTxRingEv>:

// *****************************************************************************
bool tSTM32_CAN::SendFromTxRing() {
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b086      	sub	sp, #24
 8011f94:	af02      	add	r7, sp, #8
 8011f96:	6078      	str	r0, [r7, #4]
	const CAN_message_t *txMsg;
	txMsg = txRing->getReadRef(); // always get highest prio message from the buffer
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f000 fcab 	bl	80128fa <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh>
 8011fa4:	60f8      	str	r0, [r7, #12]
	if ( txMsg != 0 ) {
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d00f      	beq.n	8011fcc <_ZN10tSTM32_CAN14SendFromTxRingEv+0x3c>
		return CANWriteTxMailbox(txMsg->id, txMsg->len, txMsg->buf, txMsg->flags.extended);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6819      	ldr	r1, [r3, #0]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	7a1a      	ldrb	r2, [r3, #8]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f103 0009 	add.w	r0, r3, #9
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	791b      	ldrb	r3, [r3, #4]
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f7ff ff80 	bl	8011ec8 <_ZN10tSTM32_CAN17CANWriteTxMailboxEmhPKhb>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	e000      	b.n	8011fce <_ZN10tSTM32_CAN14SendFromTxRingEv+0x3e>
	} else {
		return false;
 8011fcc:	2300      	movs	r3, #0
	}

}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3710      	adds	r7, #16
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
	...

08011fd8 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm>:

// *****************************************************************************
void tSTM32_CAN::CANReadRxMailbox(CAN_HandleTypeDef *hcan, uint32_t CANRxFIFO) {
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b088      	sub	sp, #32
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
	CAN_message_t *rxMsg;
	uint32_t id;
	uint8_t prio;
	if (hcan == canBus) {
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	68ba      	ldr	r2, [r7, #8]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d174      	bne.n	80120d8 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0x100>
		if (HAL_CAN_GetRxMessage(hcan, CANRxFIFO, &CANRxHeader, CANRxdata) == HAL_OK) {
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	334c      	adds	r3, #76	; 0x4c
 8011ff8:	6879      	ldr	r1, [r7, #4]
 8011ffa:	68b8      	ldr	r0, [r7, #8]
 8011ffc:	f7f0 ff56 	bl	8002eac <HAL_CAN_GetRxMessage>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	bf0c      	ite	eq
 8012006:	2301      	moveq	r3, #1
 8012008:	2300      	movne	r3, #0
 801200a:	b2db      	uxtb	r3, r3
 801200c:	2b00      	cmp	r3, #0
 801200e:	d063      	beq.n	80120d8 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0x100>
			if (CANRxHeader.IDE == CAN_ID_EXT) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012014:	2b04      	cmp	r3, #4
 8012016:	d110      	bne.n	801203a <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0x62>
				id = CANRxHeader.ExtId;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801201c:	61fb      	str	r3, [r7, #28]
				prio = (uint8_t)(id >> (29-prioBits) & maxPrio);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	7a1b      	ldrb	r3, [r3, #8]
 8012022:	f1c3 031d 	rsb	r3, r3, #29
 8012026:	69fa      	ldr	r2, [r7, #28]
 8012028:	fa22 f303 	lsr.w	r3, r2, r3
 801202c:	b2da      	uxtb	r2, r3
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	b2db      	uxtb	r3, r3
 8012034:	4013      	ands	r3, r2
 8012036:	76fb      	strb	r3, [r7, #27]
 8012038:	e00f      	b.n	801205a <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0x82>
			}
			else {
				id = CANRxHeader.StdId;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801203e:	61fb      	str	r3, [r7, #28]
				prio = (uint8_t)(id >> (11-prioBits) & maxPrio);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	7a1b      	ldrb	r3, [r3, #8]
 8012044:	f1c3 030b 	rsb	r3, r3, #11
 8012048:	69fa      	ldr	r2, [r7, #28]
 801204a:	fa22 f303 	lsr.w	r3, r2, r3
 801204e:	b2da      	uxtb	r2, r3
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	b2db      	uxtb	r3, r3
 8012056:	4013      	ands	r3, r2
 8012058:	76fb      	strb	r3, [r7, #27]
			}
			rxMsg = rxRing->getAddRef(prio);
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801205e:	7efa      	ldrb	r2, [r7, #27]
 8012060:	4611      	mov	r1, r2
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fbc6 	bl	80127f4 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh>
 8012068:	6178      	str	r0, [r7, #20]
			if ( rxMsg!=0 ) {
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d021      	beq.n	80120b4 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0xdc>
				rxMsg->len = CANRxHeader.DLC;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012074:	b2da      	uxtb	r2, r3
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	721a      	strb	r2, [r3, #8]
				if ( rxMsg->len > 8 ) rxMsg->len = 8;
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	7a1b      	ldrb	r3, [r3, #8]
 801207e:	2b08      	cmp	r3, #8
 8012080:	d902      	bls.n	8012088 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0xb0>
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	2208      	movs	r2, #8
 8012086:	721a      	strb	r2, [r3, #8]
				rxMsg->flags.remote = CANRxHeader.RTR == CAN_RTR_REMOTE;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801208c:	2b02      	cmp	r3, #2
 801208e:	bf0c      	ite	eq
 8012090:	2301      	moveq	r3, #1
 8012092:	2300      	movne	r3, #0
 8012094:	b2da      	uxtb	r2, r3
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	715a      	strb	r2, [r3, #5]
				rxMsg->flags.extended = CANRxHeader.IDE == CAN_ID_EXT;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801209e:	2b04      	cmp	r3, #4
 80120a0:	bf0c      	ite	eq
 80120a2:	2301      	moveq	r3, #1
 80120a4:	2300      	movne	r3, #0
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	711a      	strb	r2, [r3, #4]
				rxMsg->id = CANRxHeader.ExtId;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	601a      	str	r2, [r3, #0]
			}
			memcpy(rxMsg->buf, CANRxdata, rxMsg->len);
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f103 0009 	add.w	r0, r3, #9
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	7a1b      	ldrb	r3, [r3, #8]
 80120c4:	461a      	mov	r2, r3
 80120c6:	f003 fe9d 	bl	8015e04 <memcpy>
			DbgPrintfSWD("Received CAN message 0x%lx", id);
 80120ca:	69f9      	ldr	r1, [r7, #28]
 80120cc:	4804      	ldr	r0, [pc, #16]	; (80120e0 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm+0x108>)
 80120ce:	f003 ffa5 	bl	801601c <iprintf>
 80120d2:	200a      	movs	r0, #10
 80120d4:	f003 ffba 	bl	801604c <putchar>
	}

	// I think we don't have to check the fifo fill level if we use interrups?
	// HAL_CAN_GetRxFifoFillLevel(*canBus, CAN_RX_FIFO1);

}
 80120d8:	bf00      	nop
 80120da:	3720      	adds	r7, #32
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	080170c0 	.word	0x080170c0

080120e4 <_ZN10tSTM32_CAN7CANInitEv>:
/**
  * @brief CAN Initialization Function
  * @retval bool success or not
  */
HAL_StatusTypeDef tSTM32_CAN::CANInit()
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b088      	sub	sp, #32
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
	// CAN1000kbitPrescaler, TimeSeg1 and TimeSeg2 are configured for 1000 kbit/s @ defined clock speed
	// Baud rate has to be dividable by 1000 (500, 250, 200, 125, 100...)

	CAN_TypeDef *CANinstance;
#ifdef CAN1
	if (canBus == &hcan1) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4a4e      	ldr	r2, [pc, #312]	; (801222c <_ZN10tSTM32_CAN7CANInitEv+0x148>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d108      	bne.n	8012108 <_ZN10tSTM32_CAN7CANInitEv+0x24>
		CANinstance = CAN1;
 80120f6:	4b4e      	ldr	r3, [pc, #312]	; (8012230 <_ZN10tSTM32_CAN7CANInitEv+0x14c>)
 80120f8:	61fb      	str	r3, [r7, #28]
		DbgPrintfSWD("Start init CAN 1");
 80120fa:	484e      	ldr	r0, [pc, #312]	; (8012234 <_ZN10tSTM32_CAN7CANInitEv+0x150>)
 80120fc:	f003 ff8e 	bl	801601c <iprintf>
 8012100:	200a      	movs	r0, #10
 8012102:	f003 ffa3 	bl	801604c <putchar>
 8012106:	e00f      	b.n	8012128 <_ZN10tSTM32_CAN7CANInitEv+0x44>
	}
#ifdef CAN2
	else if (canBus == &hcan2) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a4a      	ldr	r2, [pc, #296]	; (8012238 <_ZN10tSTM32_CAN7CANInitEv+0x154>)
 801210e:	4293      	cmp	r3, r2
 8012110:	d108      	bne.n	8012124 <_ZN10tSTM32_CAN7CANInitEv+0x40>
		CANinstance = CAN2;
 8012112:	4b4a      	ldr	r3, [pc, #296]	; (801223c <_ZN10tSTM32_CAN7CANInitEv+0x158>)
 8012114:	61fb      	str	r3, [r7, #28]
		DbgPrintfSWD("Start init CAN 2");
 8012116:	484a      	ldr	r0, [pc, #296]	; (8012240 <_ZN10tSTM32_CAN7CANInitEv+0x15c>)
 8012118:	f003 ff80 	bl	801601c <iprintf>
 801211c:	200a      	movs	r0, #10
 801211e:	f003 ff95 	bl	801604c <putchar>
 8012122:	e001      	b.n	8012128 <_ZN10tSTM32_CAN7CANInitEv+0x44>
		DbgPrintfSWD("Start init CAN 3");
	}
#endif
	else {
		// CAN_HandleTypeDef *hcan is unknown
		return HAL_ERROR;
 8012124:	2301      	movs	r3, #1
 8012126:	e07d      	b.n	8012224 <_ZN10tSTM32_CAN7CANInitEv+0x140>


	// usually the APB1 clock is running at the following speed if max clock frequencies are used:
	// STM32F103/105/107   36'000'000 Hz
	// STM32F405/407       42 000'000 Hz
	uint32_t APB1clockSpeed = HAL_RCC_GetPCLK1Freq();
 8012128:	f7f3 fc84 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 801212c:	60f8      	str	r0, [r7, #12]

	if (APB1clockSpeed == 24000000) {
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	4a44      	ldr	r2, [pc, #272]	; (8012244 <_ZN10tSTM32_CAN7CANInitEv+0x160>)
 8012132:	4293      	cmp	r3, r2
 8012134:	d107      	bne.n	8012146 <_ZN10tSTM32_CAN7CANInitEv+0x62>
		CAN1000kbitPrescaler = 2;
 8012136:	2302      	movs	r3, #2
 8012138:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_10TQ;
 801213a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 801213e:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_1TQ;
 8012140:	2300      	movs	r3, #0
 8012142:	613b      	str	r3, [r7, #16]
 8012144:	e031      	b.n	80121aa <_ZN10tSTM32_CAN7CANInitEv+0xc6>
	}
	else if (APB1clockSpeed == 36000000) {
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	4a3f      	ldr	r2, [pc, #252]	; (8012248 <_ZN10tSTM32_CAN7CANInitEv+0x164>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d108      	bne.n	8012160 <_ZN10tSTM32_CAN7CANInitEv+0x7c>
		CAN1000kbitPrescaler = 2;
 801214e:	2302      	movs	r3, #2
 8012150:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_15TQ;
 8012152:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8012156:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_2TQ;
 8012158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801215c:	613b      	str	r3, [r7, #16]
 801215e:	e024      	b.n	80121aa <_ZN10tSTM32_CAN7CANInitEv+0xc6>
	}
	else if (APB1clockSpeed == 42000000) {
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	4a3a      	ldr	r2, [pc, #232]	; (801224c <_ZN10tSTM32_CAN7CANInitEv+0x168>)
 8012164:	4293      	cmp	r3, r2
 8012166:	d108      	bne.n	801217a <_ZN10tSTM32_CAN7CANInitEv+0x96>
		CAN1000kbitPrescaler = 3;
 8012168:	2303      	movs	r3, #3
 801216a:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_11TQ;
 801216c:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8012170:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_2TQ;
 8012172:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012176:	613b      	str	r3, [r7, #16]
 8012178:	e017      	b.n	80121aa <_ZN10tSTM32_CAN7CANInitEv+0xc6>
	}
	else if (APB1clockSpeed == 48000000) {
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	4a34      	ldr	r2, [pc, #208]	; (8012250 <_ZN10tSTM32_CAN7CANInitEv+0x16c>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d108      	bne.n	8012194 <_ZN10tSTM32_CAN7CANInitEv+0xb0>
		CAN1000kbitPrescaler = 3;
 8012182:	2303      	movs	r3, #3
 8012184:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_13TQ;
 8012186:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 801218a:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_2TQ;
 801218c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012190:	613b      	str	r3, [r7, #16]
 8012192:	e00a      	b.n	80121aa <_ZN10tSTM32_CAN7CANInitEv+0xc6>
	else {
		// There are no settings four your ABT1 clock speed yet!
		// On the following website you can find a matching prescaler, TS1 and TS2
		// Add the values for your clock speed and 1000kbit/s
		// http://www.bittiming.can-wiki.info/?CLK=36&ctype=bxCAN&SamplePoint=87.5
		DbgPrintfSWDErr("Could not init CAN! No CAN settings for this clock speed.");
 8012194:	482f      	ldr	r0, [pc, #188]	; (8012254 <_ZN10tSTM32_CAN7CANInitEv+0x170>)
 8012196:	f003 ff41 	bl	801601c <iprintf>
 801219a:	482f      	ldr	r0, [pc, #188]	; (8012258 <_ZN10tSTM32_CAN7CANInitEv+0x174>)
 801219c:	f003 ff3e 	bl	801601c <iprintf>
 80121a0:	200a      	movs	r0, #10
 80121a2:	f003 ff53 	bl	801604c <putchar>
		return HAL_ERROR;
 80121a6:	2301      	movs	r3, #1
 80121a8:	e03c      	b.n	8012224 <_ZN10tSTM32_CAN7CANInitEv+0x140>
	}

	canBus->Instance = CANinstance;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	69fa      	ldr	r2, [r7, #28]
 80121b0:	601a      	str	r2, [r3, #0]
	canBus->Init.Prescaler = (CAN1000kbitPrescaler * CANbaudRate);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80121b8:	4619      	mov	r1, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	69ba      	ldr	r2, [r7, #24]
 80121c0:	fb01 f202 	mul.w	r2, r1, r2
 80121c4:	605a      	str	r2, [r3, #4]
	canBus->Init.Mode = CAN_MODE_NORMAL;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2200      	movs	r2, #0
 80121cc:	609a      	str	r2, [r3, #8]
	canBus->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2200      	movs	r2, #0
 80121d4:	60da      	str	r2, [r3, #12]
	canBus->Init.TimeSeg1 = CANtimeSeg1;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	697a      	ldr	r2, [r7, #20]
 80121dc:	611a      	str	r2, [r3, #16]
	canBus->Init.TimeSeg2 = CANtimeSeg2;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	615a      	str	r2, [r3, #20]
	canBus->Init.TimeTriggeredMode = DISABLE;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2200      	movs	r2, #0
 80121ec:	761a      	strb	r2, [r3, #24]
	canBus->Init.AutoBusOff = DISABLE;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	2200      	movs	r2, #0
 80121f4:	765a      	strb	r2, [r3, #25]
	canBus->Init.AutoWakeUp = DISABLE;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2200      	movs	r2, #0
 80121fc:	769a      	strb	r2, [r3, #26]
	canBus->Init.AutoRetransmission = ENABLE;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2201      	movs	r2, #1
 8012204:	76da      	strb	r2, [r3, #27]
	canBus->Init.ReceiveFifoLocked = DISABLE;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2200      	movs	r2, #0
 801220c:	771a      	strb	r2, [r3, #28]
	canBus->Init.TransmitFifoPriority = ENABLE;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2201      	movs	r2, #1
 8012214:	775a      	strb	r2, [r3, #29]

	return HAL_CAN_Init(canBus);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4618      	mov	r0, r3
 801221c:	f7f0 fb18 	bl	8002850 <HAL_CAN_Init>
 8012220:	4603      	mov	r3, r0
 8012222:	bf00      	nop
}
 8012224:	4618      	mov	r0, r3
 8012226:	3720      	adds	r7, #32
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	20000220 	.word	0x20000220
 8012230:	40006400 	.word	0x40006400
 8012234:	080170dc 	.word	0x080170dc
 8012238:	20000248 	.word	0x20000248
 801223c:	40006800 	.word	0x40006800
 8012240:	080170f0 	.word	0x080170f0
 8012244:	016e3600 	.word	0x016e3600
 8012248:	02255100 	.word	0x02255100
 801224c:	0280de80 	.word	0x0280de80
 8012250:	02dc6c00 	.word	0x02dc6c00
 8012254:	08017098 	.word	0x08017098
 8012258:	08017104 	.word	0x08017104

0801225c <_ZN10tSTM32_CAN12SetCANFilterEbmmm>:
  * @param  Mask uint32_t bit mask
  * @param  Filter uint32_t CAN identifier
  * @retval success or not
  */
HAL_StatusTypeDef tSTM32_CAN::SetCANFilter( bool ExtendedIdentifier, uint32_t FilterNum, uint32_t Mask, uint32_t Filter )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b092      	sub	sp, #72	; 0x48
 8012260:	af00      	add	r7, sp, #0
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	607a      	str	r2, [r7, #4]
 8012266:	603b      	str	r3, [r7, #0]
 8012268:	460b      	mov	r3, r1
 801226a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret = HAL_ERROR;
 801226c:	2301      	movs	r3, #1
 801226e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// For dual CAN MCU's we have 28 filter banks to share between the CAN busses
	// For single CAN SlaveStartFilterBank does nothing and we have 14 filter banks.
	// If not defined different we use filter 0 .. 13 for primary CAN bus and 14 ... 27 for secondary CAN bus
	#if !defined(SlaveStartFilterBank)
	const uint32_t SlaveStartFilterBank = 14;
 8012272:	230e      	movs	r3, #14
 8012274:	63fb      	str	r3, [r7, #60]	; 0x3c
	#endif

	#if defined(CAN2) // we have two CAN busses
		const int32_t TotalFilterBanks = 27;
 8012276:	231b      	movs	r3, #27
 8012278:	63bb      	str	r3, [r7, #56]	; 0x38
		const int32_t TotalFilterBanks = 13;
	#else // we have no CAN defined
		const int32_t TotalFilterBanks = -1;
	#endif

	int32_t FilterBank = -1;
 801227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801227e:	643b      	str	r3, [r7, #64]	; 0x40
	if (canBus->Instance == CAN1
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4a39      	ldr	r2, [pc, #228]	; (801236c <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x110>)
 8012288:	4293      	cmp	r3, r2
 801228a:	d108      	bne.n	801229e <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x42>
			&& FilterNum <= TotalFilterBanks
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2b1b      	cmp	r3, #27
 8012290:	d805      	bhi.n	801229e <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x42>
			&& FilterNum < SlaveStartFilterBank ) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2b0d      	cmp	r3, #13
 8012296:	d802      	bhi.n	801229e <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x42>
		FilterBank = FilterNum;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	643b      	str	r3, [r7, #64]	; 0x40
 801229c:	e00b      	b.n	80122b6 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x5a>
	}
	else if (canBus->Instance == CAN2
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4a32      	ldr	r2, [pc, #200]	; (8012370 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x114>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d105      	bne.n	80122b6 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x5a>
			&& FilterNum <= TotalFilterBanks - SlaveStartFilterBank) {
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2b0d      	cmp	r3, #13
 80122ae:	d802      	bhi.n	80122b6 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x5a>
		FilterBank = FilterNum + SlaveStartFilterBank;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	330e      	adds	r3, #14
 80122b4:	643b      	str	r3, [r7, #64]	; 0x40
	}

	if ( FilterBank >= 0
 80122b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	db50      	blt.n	801235e <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x102>
			&& IS_CAN_ALL_INSTANCE(canBus->Instance) )
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	4a2a      	ldr	r2, [pc, #168]	; (801236c <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x110>)
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d005      	beq.n	80122d4 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x78>
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	4a28      	ldr	r2, [pc, #160]	; (8012370 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x114>)
 80122d0:	4293      	cmp	r3, r2
 80122d2:	d144      	bne.n	801235e <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x102>
	{
		CAN_FilterTypeDef sFilterConfig;

		sFilterConfig.FilterBank = FilterBank;
 80122d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d6:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80122d8:	2300      	movs	r3, #0
 80122da:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80122dc:	2301      	movs	r3, #1
 80122de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (ExtendedIdentifier == false)
 80122e0:	7afb      	ldrb	r3, [r7, #11]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d10c      	bne.n	8012300 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0xa4>
		{
			sFilterConfig.FilterMaskIdHigh = Mask << 5 & 0xFFFF;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	015b      	lsls	r3, r3, #5
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = 0x0000; // allows both remote request and data frames
 80122ee:	2300      	movs	r3, #0
 80122f0:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter << 5 & 0xFFFF;
 80122f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122f4:	015b      	lsls	r3, r3, #5
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow =  0x0000;
 80122fa:	2300      	movs	r3, #0
 80122fc:	617b      	str	r3, [r7, #20]
 80122fe:	e013      	b.n	8012328 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0xcc>
		}
		else
		{ // ExtendedIdentifier == true
			sFilterConfig.FilterMaskIdHigh = Mask >> 13 & 0xFFFF;
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	0b5b      	lsrs	r3, r3, #13
 8012304:	b29b      	uxth	r3, r3
 8012306:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = (Mask << 3 & 0xFFF8) | (0x1 << 2);
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	b29b      	uxth	r3, r3
 801230e:	f043 0304 	orr.w	r3, r3, #4
 8012312:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter >> 13 & 0xFFFF; // EXTID[28:13]
 8012314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012316:	0b5b      	lsrs	r3, r3, #13
 8012318:	b29b      	uxth	r3, r3
 801231a:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow = (Filter << 3 & 0xFFF8) | (0x1 << 2); // EXTID[12:0] + IDE
 801231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801231e:	00db      	lsls	r3, r3, #3
 8012320:	b29b      	uxth	r3, r3
 8012322:	f043 0304 	orr.w	r3, r3, #4
 8012326:	617b      	str	r3, [r7, #20]
		}

		sFilterConfig.FilterFIFOAssignment = CANRxFIFO;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801232c:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 801232e:	2301      	movs	r3, #1
 8012330:	633b      	str	r3, [r7, #48]	; 0x30
		sFilterConfig.SlaveStartFilterBank = SlaveStartFilterBank; // CAN 0: 0...13 // CAN 1: 14...27 (28 filter banks in total)
 8012332:	230e      	movs	r3, #14
 8012334:	637b      	str	r3, [r7, #52]	; 0x34

		ret = HAL_CAN_ConfigFilter(canBus, &sFilterConfig);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f107 0210 	add.w	r2, r7, #16
 801233e:	4611      	mov	r1, r2
 8012340:	4618      	mov	r0, r3
 8012342:	f7f0 fb81 	bl	8002a48 <HAL_CAN_ConfigFilter>
 8012346:	4603      	mov	r3, r0
 8012348:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		DbgPrintfSWD("CAN filter bank %li mask: %lx, filter: %lx", FilterBank, Mask, Filter);
 801234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801234e:	683a      	ldr	r2, [r7, #0]
 8012350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012352:	4808      	ldr	r0, [pc, #32]	; (8012374 <_ZN10tSTM32_CAN12SetCANFilterEbmmm+0x118>)
 8012354:	f003 fe62 	bl	801601c <iprintf>
 8012358:	200a      	movs	r0, #10
 801235a:	f003 fe77 	bl	801604c <putchar>
	}
	return ret;
 801235e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012362:	4618      	mov	r0, r3
 8012364:	3748      	adds	r7, #72	; 0x48
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	40006400 	.word	0x40006400
 8012370:	40006800 	.word	0x40006800
 8012374:	08017140 	.word	0x08017140

08012378 <_Z11getInstanceP19__CAN_HandleTypeDef>:
  * @brief  returns pointer to tSTM32_CAN instance from certain CAN_HandleTypeDef struct
  * @param  hcan CAN_HandleTypeDef pointer
  * @retval tSTM32_CAN  pointer
  */
tSTM32_CAN* getInstance(CAN_HandleTypeDef *hcan)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b088      	sub	sp, #32
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
	tSTM32_CAN* instance;
	for (auto & inst : canInstances) { // iterate over all canInstances
 8012380:	4b18      	ldr	r3, [pc, #96]	; (80123e4 <_Z11getInstanceP19__CAN_HandleTypeDef+0x6c>)
 8012382:	61bb      	str	r3, [r7, #24]
 8012384:	69b8      	ldr	r0, [r7, #24]
 8012386:	f000 fae4 	bl	8012952 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE5beginEv>
 801238a:	4603      	mov	r3, r0
 801238c:	613b      	str	r3, [r7, #16]
 801238e:	69b8      	ldr	r0, [r7, #24]
 8012390:	f000 faef 	bl	8012972 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE3endEv>
 8012394:	4603      	mov	r3, r0
 8012396:	60fb      	str	r3, [r7, #12]
 8012398:	f107 020c 	add.w	r2, r7, #12
 801239c:	f107 0310 	add.w	r3, r7, #16
 80123a0:	4611      	mov	r1, r2
 80123a2:	4618      	mov	r0, r3
 80123a4:	f000 faf6 	bl	8012994 <_ZN9__gnu_cxxneIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80123a8:	4603      	mov	r3, r0
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d014      	beq.n	80123d8 <_Z11getInstanceP19__CAN_HandleTypeDef+0x60>
 80123ae:	f107 0310 	add.w	r3, r7, #16
 80123b2:	4618      	mov	r0, r3
 80123b4:	f000 fb15 	bl	80129e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEdeEv>
 80123b8:	6178      	str	r0, [r7, #20]
		if (inst->canBus == hcan) {
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d102      	bne.n	80123cc <_Z11getInstanceP19__CAN_HandleTypeDef+0x54>
			instance = inst;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	61fb      	str	r3, [r7, #28]
	for (auto & inst : canInstances) { // iterate over all canInstances
 80123cc:	f107 0310 	add.w	r3, r7, #16
 80123d0:	4618      	mov	r0, r3
 80123d2:	f000 faf7 	bl	80129c4 <_ZN9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEppEv>
 80123d6:	e7df      	b.n	8012398 <_Z11getInstanceP19__CAN_HandleTypeDef+0x20>
		}
	}
	return instance;
 80123d8:	69fb      	ldr	r3, [r7, #28]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	2000037c 	.word	0x2000037c

080123e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
	getInstance(hcan)->CANReadRxMailbox(hcan, CAN_RX_FIFO0);
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7ff ffc1 	bl	8012378 <_Z11getInstanceP19__CAN_HandleTypeDef>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2200      	movs	r2, #0
 80123fa:	6879      	ldr	r1, [r7, #4]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ff fdeb 	bl	8011fd8 <_ZN10tSTM32_CAN16CANReadRxMailboxEP19__CAN_HandleTypeDefm>
	//NMEA2000_STM32_instance->CANReadRxMailbox(hcan);
}
 8012402:	bf00      	nop
 8012404:	3708      	adds	r7, #8
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b082      	sub	sp, #8
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
	// Call TX Interrupt method
	//NMEA2000_STM32_instance->SendFromTxRing(); // send message with highest priority on ring buffer
	getInstance(hcan)->SendFromTxRing(); // send message with highest priority on ring buffer
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7ff ffb0 	bl	8012378 <_Z11getInstanceP19__CAN_HandleTypeDef>
 8012418:	4603      	mov	r3, r0
 801241a:	4618      	mov	r0, r3
 801241c:	f7ff fdb8 	bl	8011f90 <_ZN10tSTM32_CAN14SendFromTxRingEv>
}
 8012420:	bf00      	nop
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
	// Call TX Interrupt method
	getInstance(hcan)->SendFromTxRing(); // send message with highest priority on ring buffer
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f7ff ffa1 	bl	8012378 <_Z11getInstanceP19__CAN_HandleTypeDef>
 8012436:	4603      	mov	r3, r0
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff fda9 	bl	8011f90 <_ZN10tSTM32_CAN14SendFromTxRingEv>
}
 801243e:	bf00      	nop
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b082      	sub	sp, #8
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
	// Call TX Interrupt method
	getInstance(hcan)->SendFromTxRing(); // send message with highest priority on ring buffer
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f7ff ff92 	bl	8012378 <_Z11getInstanceP19__CAN_HandleTypeDef>
 8012454:	4603      	mov	r3, r0
 8012456:	4618      	mov	r0, r3
 8012458:	f7ff fd9a 	bl	8011f90 <_ZN10tSTM32_CAN14SendFromTxRingEv>
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
   uint32_t errorCode = hcan->ErrorCode;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012470:	60fb      	str	r3, [r7, #12]

   if(errorCode & HAL_CAN_ERROR_NONE)            {DbgPrintfSWDErr("No error");}
   if(errorCode & HAL_CAN_ERROR_EWG)             {DbgPrintfSWDErr("Protocol Error Warning");}
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f003 0301 	and.w	r3, r3, #1
 8012478:	2b00      	cmp	r3, #0
 801247a:	d008      	beq.n	801248e <HAL_CAN_ErrorCallback+0x2a>
 801247c:	4899      	ldr	r0, [pc, #612]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801247e:	f003 fdcd 	bl	801601c <iprintf>
 8012482:	4899      	ldr	r0, [pc, #612]	; (80126e8 <HAL_CAN_ErrorCallback+0x284>)
 8012484:	f003 fdca 	bl	801601c <iprintf>
 8012488:	200a      	movs	r0, #10
 801248a:	f003 fddf 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_EPV)             {DbgPrintfSWDErr("Error Passive");}
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f003 0302 	and.w	r3, r3, #2
 8012494:	2b00      	cmp	r3, #0
 8012496:	d008      	beq.n	80124aa <HAL_CAN_ErrorCallback+0x46>
 8012498:	4892      	ldr	r0, [pc, #584]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801249a:	f003 fdbf 	bl	801601c <iprintf>
 801249e:	4893      	ldr	r0, [pc, #588]	; (80126ec <HAL_CAN_ErrorCallback+0x288>)
 80124a0:	f003 fdbc 	bl	801601c <iprintf>
 80124a4:	200a      	movs	r0, #10
 80124a6:	f003 fdd1 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_BOF)             {DbgPrintfSWDErr("Bus-off error");}
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f003 0304 	and.w	r3, r3, #4
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d008      	beq.n	80124c6 <HAL_CAN_ErrorCallback+0x62>
 80124b4:	488b      	ldr	r0, [pc, #556]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80124b6:	f003 fdb1 	bl	801601c <iprintf>
 80124ba:	488d      	ldr	r0, [pc, #564]	; (80126f0 <HAL_CAN_ErrorCallback+0x28c>)
 80124bc:	f003 fdae 	bl	801601c <iprintf>
 80124c0:	200a      	movs	r0, #10
 80124c2:	f003 fdc3 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_STF)             {DbgPrintfSWDErr("Stuff error");}
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f003 0308 	and.w	r3, r3, #8
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d008      	beq.n	80124e2 <HAL_CAN_ErrorCallback+0x7e>
 80124d0:	4884      	ldr	r0, [pc, #528]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80124d2:	f003 fda3 	bl	801601c <iprintf>
 80124d6:	4887      	ldr	r0, [pc, #540]	; (80126f4 <HAL_CAN_ErrorCallback+0x290>)
 80124d8:	f003 fda0 	bl	801601c <iprintf>
 80124dc:	200a      	movs	r0, #10
 80124de:	f003 fdb5 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_FOR)             {DbgPrintfSWDErr("Form error");}
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f003 0310 	and.w	r3, r3, #16
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d008      	beq.n	80124fe <HAL_CAN_ErrorCallback+0x9a>
 80124ec:	487d      	ldr	r0, [pc, #500]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80124ee:	f003 fd95 	bl	801601c <iprintf>
 80124f2:	4881      	ldr	r0, [pc, #516]	; (80126f8 <HAL_CAN_ErrorCallback+0x294>)
 80124f4:	f003 fd92 	bl	801601c <iprintf>
 80124f8:	200a      	movs	r0, #10
 80124fa:	f003 fda7 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_ACK)             {DbgPrintfSWDErr("Acknowledgment error");}
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f003 0320 	and.w	r3, r3, #32
 8012504:	2b00      	cmp	r3, #0
 8012506:	d008      	beq.n	801251a <HAL_CAN_ErrorCallback+0xb6>
 8012508:	4876      	ldr	r0, [pc, #472]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801250a:	f003 fd87 	bl	801601c <iprintf>
 801250e:	487b      	ldr	r0, [pc, #492]	; (80126fc <HAL_CAN_ErrorCallback+0x298>)
 8012510:	f003 fd84 	bl	801601c <iprintf>
 8012514:	200a      	movs	r0, #10
 8012516:	f003 fd99 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_BR)              {DbgPrintfSWDErr("Bit recessive error");}
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012520:	2b00      	cmp	r3, #0
 8012522:	d008      	beq.n	8012536 <HAL_CAN_ErrorCallback+0xd2>
 8012524:	486f      	ldr	r0, [pc, #444]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012526:	f003 fd79 	bl	801601c <iprintf>
 801252a:	4875      	ldr	r0, [pc, #468]	; (8012700 <HAL_CAN_ErrorCallback+0x29c>)
 801252c:	f003 fd76 	bl	801601c <iprintf>
 8012530:	200a      	movs	r0, #10
 8012532:	f003 fd8b 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_BD)              {DbgPrintfSWDErr("Bit dominant error");}
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801253c:	2b00      	cmp	r3, #0
 801253e:	d008      	beq.n	8012552 <HAL_CAN_ErrorCallback+0xee>
 8012540:	4868      	ldr	r0, [pc, #416]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012542:	f003 fd6b 	bl	801601c <iprintf>
 8012546:	486f      	ldr	r0, [pc, #444]	; (8012704 <HAL_CAN_ErrorCallback+0x2a0>)
 8012548:	f003 fd68 	bl	801601c <iprintf>
 801254c:	200a      	movs	r0, #10
 801254e:	f003 fd7d 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_CRC)             {DbgPrintfSWDErr("CRC error");}
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <HAL_CAN_ErrorCallback+0x10a>
 801255c:	4861      	ldr	r0, [pc, #388]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801255e:	f003 fd5d 	bl	801601c <iprintf>
 8012562:	4869      	ldr	r0, [pc, #420]	; (8012708 <HAL_CAN_ErrorCallback+0x2a4>)
 8012564:	f003 fd5a 	bl	801601c <iprintf>
 8012568:	200a      	movs	r0, #10
 801256a:	f003 fd6f 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_RX_FOV0)         {DbgPrintfSWDErr("Rx FIFO 0 overrun error");}
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012574:	2b00      	cmp	r3, #0
 8012576:	d008      	beq.n	801258a <HAL_CAN_ErrorCallback+0x126>
 8012578:	485a      	ldr	r0, [pc, #360]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801257a:	f003 fd4f 	bl	801601c <iprintf>
 801257e:	4863      	ldr	r0, [pc, #396]	; (801270c <HAL_CAN_ErrorCallback+0x2a8>)
 8012580:	f003 fd4c 	bl	801601c <iprintf>
 8012584:	200a      	movs	r0, #10
 8012586:	f003 fd61 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_RX_FOV1)         {DbgPrintfSWDErr("Rx FIFO 1 overrun error");}
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012590:	2b00      	cmp	r3, #0
 8012592:	d008      	beq.n	80125a6 <HAL_CAN_ErrorCallback+0x142>
 8012594:	4853      	ldr	r0, [pc, #332]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012596:	f003 fd41 	bl	801601c <iprintf>
 801259a:	485d      	ldr	r0, [pc, #372]	; (8012710 <HAL_CAN_ErrorCallback+0x2ac>)
 801259c:	f003 fd3e 	bl	801601c <iprintf>
 80125a0:	200a      	movs	r0, #10
 80125a2:	f003 fd53 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TX_ALST0)        {DbgPrintfSWDErr("TxMailbox 0 transmit failure due to arbitration lost");}
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d008      	beq.n	80125c2 <HAL_CAN_ErrorCallback+0x15e>
 80125b0:	484c      	ldr	r0, [pc, #304]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80125b2:	f003 fd33 	bl	801601c <iprintf>
 80125b6:	4857      	ldr	r0, [pc, #348]	; (8012714 <HAL_CAN_ErrorCallback+0x2b0>)
 80125b8:	f003 fd30 	bl	801601c <iprintf>
 80125bc:	200a      	movs	r0, #10
 80125be:	f003 fd45 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TX_TERR0)        {DbgPrintfSWDErr("TxMailbox 0 transmit failure due to transmit error");}
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d008      	beq.n	80125de <HAL_CAN_ErrorCallback+0x17a>
 80125cc:	4845      	ldr	r0, [pc, #276]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80125ce:	f003 fd25 	bl	801601c <iprintf>
 80125d2:	4851      	ldr	r0, [pc, #324]	; (8012718 <HAL_CAN_ErrorCallback+0x2b4>)
 80125d4:	f003 fd22 	bl	801601c <iprintf>
 80125d8:	200a      	movs	r0, #10
 80125da:	f003 fd37 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TX_ALST1)        {DbgPrintfSWDErr("TxMailbox 1 transmit failure due to arbitration lost");}
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d008      	beq.n	80125fa <HAL_CAN_ErrorCallback+0x196>
 80125e8:	483e      	ldr	r0, [pc, #248]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80125ea:	f003 fd17 	bl	801601c <iprintf>
 80125ee:	484b      	ldr	r0, [pc, #300]	; (801271c <HAL_CAN_ErrorCallback+0x2b8>)
 80125f0:	f003 fd14 	bl	801601c <iprintf>
 80125f4:	200a      	movs	r0, #10
 80125f6:	f003 fd29 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TX_TERR1)        {DbgPrintfSWDErr("TxMailbox 1 transmit failure due to transmit error");}
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012600:	2b00      	cmp	r3, #0
 8012602:	d008      	beq.n	8012616 <HAL_CAN_ErrorCallback+0x1b2>
 8012604:	4837      	ldr	r0, [pc, #220]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012606:	f003 fd09 	bl	801601c <iprintf>
 801260a:	4845      	ldr	r0, [pc, #276]	; (8012720 <HAL_CAN_ErrorCallback+0x2bc>)
 801260c:	f003 fd06 	bl	801601c <iprintf>
 8012610:	200a      	movs	r0, #10
 8012612:	f003 fd1b 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TX_ALST2)        {DbgPrintfSWDErr("TxMailbox 2 transmit failure due to arbitration lost");}
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801261c:	2b00      	cmp	r3, #0
 801261e:	d008      	beq.n	8012632 <HAL_CAN_ErrorCallback+0x1ce>
 8012620:	4830      	ldr	r0, [pc, #192]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012622:	f003 fcfb 	bl	801601c <iprintf>
 8012626:	483f      	ldr	r0, [pc, #252]	; (8012724 <HAL_CAN_ErrorCallback+0x2c0>)
 8012628:	f003 fcf8 	bl	801601c <iprintf>
 801262c:	200a      	movs	r0, #10
 801262e:	f003 fd0d 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TX_TERR2)        {DbgPrintfSWDErr("TxMailbox 2 transmit failure due to transmit error");}
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d008      	beq.n	801264e <HAL_CAN_ErrorCallback+0x1ea>
 801263c:	4829      	ldr	r0, [pc, #164]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801263e:	f003 fced 	bl	801601c <iprintf>
 8012642:	4839      	ldr	r0, [pc, #228]	; (8012728 <HAL_CAN_ErrorCallback+0x2c4>)
 8012644:	f003 fcea 	bl	801601c <iprintf>
 8012648:	200a      	movs	r0, #10
 801264a:	f003 fcff 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_TIMEOUT)         {DbgPrintfSWDErr("Timeout error");}
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012654:	2b00      	cmp	r3, #0
 8012656:	d008      	beq.n	801266a <HAL_CAN_ErrorCallback+0x206>
 8012658:	4822      	ldr	r0, [pc, #136]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 801265a:	f003 fcdf 	bl	801601c <iprintf>
 801265e:	4833      	ldr	r0, [pc, #204]	; (801272c <HAL_CAN_ErrorCallback+0x2c8>)
 8012660:	f003 fcdc 	bl	801601c <iprintf>
 8012664:	200a      	movs	r0, #10
 8012666:	f003 fcf1 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_NOT_INITIALIZED) {DbgPrintfSWDErr("Peripheral not initialized");}
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012670:	2b00      	cmp	r3, #0
 8012672:	d008      	beq.n	8012686 <HAL_CAN_ErrorCallback+0x222>
 8012674:	481b      	ldr	r0, [pc, #108]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012676:	f003 fcd1 	bl	801601c <iprintf>
 801267a:	482d      	ldr	r0, [pc, #180]	; (8012730 <HAL_CAN_ErrorCallback+0x2cc>)
 801267c:	f003 fcce 	bl	801601c <iprintf>
 8012680:	200a      	movs	r0, #10
 8012682:	f003 fce3 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_NOT_READY)       {DbgPrintfSWDErr("Peripheral not ready");}
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d008      	beq.n	80126a2 <HAL_CAN_ErrorCallback+0x23e>
 8012690:	4814      	ldr	r0, [pc, #80]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 8012692:	f003 fcc3 	bl	801601c <iprintf>
 8012696:	4827      	ldr	r0, [pc, #156]	; (8012734 <HAL_CAN_ErrorCallback+0x2d0>)
 8012698:	f003 fcc0 	bl	801601c <iprintf>
 801269c:	200a      	movs	r0, #10
 801269e:	f003 fcd5 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_NOT_STARTED)     {DbgPrintfSWDErr("Peripheral not started");}
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d008      	beq.n	80126be <HAL_CAN_ErrorCallback+0x25a>
 80126ac:	480d      	ldr	r0, [pc, #52]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80126ae:	f003 fcb5 	bl	801601c <iprintf>
 80126b2:	4821      	ldr	r0, [pc, #132]	; (8012738 <HAL_CAN_ErrorCallback+0x2d4>)
 80126b4:	f003 fcb2 	bl	801601c <iprintf>
 80126b8:	200a      	movs	r0, #10
 80126ba:	f003 fcc7 	bl	801604c <putchar>
   if(errorCode & HAL_CAN_ERROR_PARAM)           {DbgPrintfSWDErr("Parameter error");}
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d008      	beq.n	80126da <HAL_CAN_ErrorCallback+0x276>
 80126c8:	4806      	ldr	r0, [pc, #24]	; (80126e4 <HAL_CAN_ErrorCallback+0x280>)
 80126ca:	f003 fca7 	bl	801601c <iprintf>
 80126ce:	481b      	ldr	r0, [pc, #108]	; (801273c <HAL_CAN_ErrorCallback+0x2d8>)
 80126d0:	f003 fca4 	bl	801601c <iprintf>
 80126d4:	200a      	movs	r0, #10
 80126d6:	f003 fcb9 	bl	801604c <putchar>

}
 80126da:	bf00      	nop
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	08017098 	.word	0x08017098
 80126e8:	0801716c 	.word	0x0801716c
 80126ec:	08017184 	.word	0x08017184
 80126f0:	08017194 	.word	0x08017194
 80126f4:	080171a4 	.word	0x080171a4
 80126f8:	080171b0 	.word	0x080171b0
 80126fc:	080171bc 	.word	0x080171bc
 8012700:	080171d4 	.word	0x080171d4
 8012704:	080171e8 	.word	0x080171e8
 8012708:	080171fc 	.word	0x080171fc
 801270c:	08017208 	.word	0x08017208
 8012710:	08017220 	.word	0x08017220
 8012714:	08017238 	.word	0x08017238
 8012718:	08017270 	.word	0x08017270
 801271c:	080172a4 	.word	0x080172a4
 8012720:	080172dc 	.word	0x080172dc
 8012724:	08017310 	.word	0x08017310
 8012728:	08017348 	.word	0x08017348
 801272c:	0801737c 	.word	0x0801737c
 8012730:	0801738c 	.word	0x0801738c
 8012734:	080173a8 	.word	0x080173a8
 8012738:	080173c0 	.word	0x080173c0
 801273c:	080173d8 	.word	0x080173d8

08012740 <_Z3powmm>:
	ITM_SendChar(*ptr++);
	}
	return len;
}

uint32_t pow(uint32_t base, uint32_t exp) {
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
	uint32_t result = 1;
 801274a:	2301      	movs	r3, #1
 801274c:	60fb      	str	r3, [r7, #12]
	while (exp)
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d011      	beq.n	8012778 <_Z3powmm+0x38>
	{
		if (exp & 1)
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	f003 0301 	and.w	r3, r3, #1
 801275a:	2b00      	cmp	r3, #0
 801275c:	d004      	beq.n	8012768 <_Z3powmm+0x28>
			result *= base;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	fb02 f303 	mul.w	r3, r2, r3
 8012766:	60fb      	str	r3, [r7, #12]
		exp >>= 1;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	085b      	lsrs	r3, r3, #1
 801276c:	603b      	str	r3, [r7, #0]
		base *= base;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	fb03 f303 	mul.w	r3, r3, r3
 8012774:	607b      	str	r3, [r7, #4]
	while (exp)
 8012776:	e7ea      	b.n	801274e <_Z3powmm+0xe>
	}

	return result;
 8012778:	68fb      	ldr	r3, [r7, #12]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3714      	adds	r7, #20
 801277e:	46bd      	mov	sp, r7
 8012780:	bc80      	pop	{r7}
 8012782:	4770      	bx	lr

08012784 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801278e:	6838      	ldr	r0, [r7, #0]
 8012790:	f000 f932 	bl	80129f8 <_ZSt4moveIRP10tSTM32_CANEONSt16remove_referenceIT_E4typeEOS4_>
 8012794:	4603      	mov	r3, r0
 8012796:	4619      	mov	r1, r3
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 f937 	bl	8012a0c <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 801279e:	bf00      	nop
 80127a0:	3708      	adds	r7, #8
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <_ZNK19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE7isEmptyEh>:
  delete[] priorityReferencies;
}

// *****************************************************************************
template<typename T>
bool tPriorityRingBuffer<T>::isEmpty(uint8_t _priority) const {
 80127a6:	b480      	push	{r7}
 80127a8:	b083      	sub	sp, #12
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
 80127ae:	460b      	mov	r3, r1
 80127b0:	70fb      	strb	r3, [r7, #3]
  if ( _priority>=maxPriorities) {
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	7a9b      	ldrb	r3, [r3, #10]
 80127b6:	78fa      	ldrb	r2, [r7, #3]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d309      	bcc.n	80127d0 <_ZNK19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE7isEmptyEh+0x2a>
    return head==tail;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	889a      	ldrh	r2, [r3, #4]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	88db      	ldrh	r3, [r3, #6]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	bf0c      	ite	eq
 80127c8:	2301      	moveq	r3, #1
 80127ca:	2300      	movne	r3, #0
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	e00c      	b.n	80127ea <_ZNK19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE7isEmptyEh+0x44>
  } else {
    return priorityReferencies[_priority].next==INVALID_RING_REF;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	691a      	ldr	r2, [r3, #16]
 80127d4:	78fb      	ldrb	r3, [r7, #3]
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	4413      	add	r3, r2
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127e0:	4293      	cmp	r3, r2
 80127e2:	bf0c      	ite	eq
 80127e4:	2301      	moveq	r3, #1
 80127e6:	2300      	movne	r3, #0
 80127e8:	b2db      	uxtb	r3, r3
  }
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	370c      	adds	r7, #12
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bc80      	pop	{r7}
 80127f2:	4770      	bx	lr

080127f4 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh>:
  return false;
}

// *****************************************************************************
template<typename T>
T *tPriorityRingBuffer<T>::getAddRef(uint8_t _priority) {
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	70fb      	strb	r3, [r7, #3]
  T *ret=0;
 8012800:	2300      	movs	r3, #0
 8012802:	60fb      	str	r3, [r7, #12]

  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7a9b      	ldrb	r3, [r3, #10]
 8012808:	78fa      	ldrb	r2, [r7, #3]
 801280a:	429a      	cmp	r2, r3
 801280c:	d303      	bcc.n	8012816 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh+0x22>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	7a9b      	ldrb	r3, [r3, #10]
 8012812:	3b01      	subs	r3, #1
 8012814:	70fb      	strb	r3, [r7, #3]

  uint16_t nextEntry = (head + 1) % size;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	889b      	ldrh	r3, [r3, #4]
 801281a:	3301      	adds	r3, #1
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	8912      	ldrh	r2, [r2, #8]
 8012820:	fb93 f1f2 	sdiv	r1, r3, r2
 8012824:	fb01 f202 	mul.w	r2, r1, r2
 8012828:	1a9b      	subs	r3, r3, r2
 801282a:	817b      	strh	r3, [r7, #10]

  // Check if the ring buffer is full
  if ( nextEntry == tail ) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	88db      	ldrh	r3, [r3, #6]
 8012830:	897a      	ldrh	r2, [r7, #10]
 8012832:	429a      	cmp	r2, r3
 8012834:	d109      	bne.n	801284a <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh+0x56>
    clean();
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 f916 	bl	8012a68 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE5cleanEv>
    // check again
    if ( nextEntry == tail ) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	88db      	ldrh	r3, [r3, #6]
 8012840:	897a      	ldrh	r2, [r7, #10]
 8012842:	429a      	cmp	r2, r3
 8012844:	d101      	bne.n	801284a <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh+0x56>
      RingBufferErrDbgf("tPriorityRingBuffer<T>::getAddRef, ring buffer full\n");
      return ret;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	e053      	b.n	80128f2 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh+0xfe>
    }
  }

  ret=&(buffer[head].Value);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	68da      	ldr	r2, [r3, #12]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	889b      	ldrh	r3, [r3, #4]
 8012852:	4619      	mov	r1, r3
 8012854:	460b      	mov	r3, r1
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	440b      	add	r3, r1
 801285a:	00db      	lsls	r3, r3, #3
 801285c:	4413      	add	r3, r2
 801285e:	60fb      	str	r3, [r7, #12]
  buffer[head].priority=_priority;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	68da      	ldr	r2, [r3, #12]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	889b      	ldrh	r3, [r3, #4]
 8012868:	4619      	mov	r1, r3
 801286a:	460b      	mov	r3, r1
 801286c:	005b      	lsls	r3, r3, #1
 801286e:	440b      	add	r3, r1
 8012870:	00db      	lsls	r3, r3, #3
 8012872:	4413      	add	r3, r2
 8012874:	78fa      	ldrb	r2, [r7, #3]
 8012876:	759a      	strb	r2, [r3, #22]
  buffer[head].next=INVALID_RING_REF;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	68da      	ldr	r2, [r3, #12]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	889b      	ldrh	r3, [r3, #4]
 8012880:	4619      	mov	r1, r3
 8012882:	460b      	mov	r3, r1
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	440b      	add	r3, r1
 8012888:	00db      	lsls	r3, r3, #3
 801288a:	4413      	add	r3, r2
 801288c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012890:	829a      	strh	r2, [r3, #20]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	691a      	ldr	r2, [r3, #16]
 8012896:	78fb      	ldrb	r3, [r7, #3]
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4413      	add	r3, r2
 801289c:	881b      	ldrh	r3, [r3, #0]
 801289e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128a2:	4293      	cmp	r3, r2
 80128a4:	d108      	bne.n	80128b8 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh+0xc4>
    priorityReferencies[_priority].next=head;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	691a      	ldr	r2, [r3, #16]
 80128aa:	78fb      	ldrb	r3, [r7, #3]
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	4413      	add	r3, r2
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	8892      	ldrh	r2, [r2, #4]
 80128b4:	801a      	strh	r2, [r3, #0]
 80128b6:	e010      	b.n	80128da <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE9getAddRefEh+0xe6>
  } else {
    buffer[priorityReferencies[_priority].last].next=head;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	68da      	ldr	r2, [r3, #12]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6919      	ldr	r1, [r3, #16]
 80128c0:	78fb      	ldrb	r3, [r7, #3]
 80128c2:	009b      	lsls	r3, r3, #2
 80128c4:	440b      	add	r3, r1
 80128c6:	885b      	ldrh	r3, [r3, #2]
 80128c8:	4619      	mov	r1, r3
 80128ca:	460b      	mov	r3, r1
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	440b      	add	r3, r1
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	4413      	add	r3, r2
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	8892      	ldrh	r2, [r2, #4]
 80128d8:	829a      	strh	r2, [r3, #20]
  }
  priorityReferencies[_priority].last=head;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	691a      	ldr	r2, [r3, #16]
 80128de:	78fb      	ldrb	r3, [r7, #3]
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4413      	add	r3, r2
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	8892      	ldrh	r2, [r2, #4]
 80128e8:	805a      	strh	r2, [r3, #2]

  RingBufferDbgf("tPriorityRingBuffer<T>::getAddRef, added new item head:%u, priority:%u\n",head,_priority);

  // Bump the head to point to the next free entry
  head = nextEntry;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	897a      	ldrh	r2, [r7, #10]
 80128ee:	809a      	strh	r2, [r3, #4]

  return ret;
 80128f0:	68fb      	ldr	r3, [r7, #12]
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3710      	adds	r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}

080128fa <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh>:
  return ret;
}

// *****************************************************************************
template<typename T>
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t *_priority) {
 80128fa:	b580      	push	{r7, lr}
 80128fc:	b084      	sub	sp, #16
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
 8012902:	6039      	str	r1, [r7, #0]
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 8012904:	2300      	movs	r3, #0
 8012906:	73fb      	strb	r3, [r7, #15]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	7a9b      	ldrb	r3, [r3, #10]
 801290c:	7bfa      	ldrb	r2, [r7, #15]
 801290e:	429a      	cmp	r2, r3
 8012910:	d21a      	bcs.n	8012948 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh+0x4e>
    if ( priorityReferencies[_pri].next!=INVALID_RING_REF ) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	691a      	ldr	r2, [r3, #16]
 8012916:	7bfb      	ldrb	r3, [r7, #15]
 8012918:	009b      	lsls	r3, r3, #2
 801291a:	4413      	add	r3, r2
 801291c:	881b      	ldrh	r3, [r3, #0]
 801291e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012922:	4293      	cmp	r3, r2
 8012924:	d00c      	beq.n	8012940 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh+0x46>
      if ( _priority!=0 ) *_priority=_pri;
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d002      	beq.n	8012932 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh+0x38>
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	7bfa      	ldrb	r2, [r7, #15]
 8012930:	701a      	strb	r2, [r3, #0]
      return getReadRef(_pri);
 8012932:	7bfb      	ldrb	r3, [r7, #15]
 8012934:	4619      	mov	r1, r3
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 f89f 	bl	8012a7a <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh>
 801293c:	4603      	mov	r3, r0
 801293e:	e004      	b.n	801294a <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh+0x50>
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 8012940:	7bfb      	ldrb	r3, [r7, #15]
 8012942:	3301      	adds	r3, #1
 8012944:	73fb      	strb	r3, [r7, #15]
 8012946:	e7df      	b.n	8012908 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEPh+0xe>
    }
  }

  return 0;
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	f107 030c 	add.w	r3, r7, #12
 8012960:	4611      	mov	r1, r2
 8012962:	4618      	mov	r0, r3
 8012964:	f000 f918 	bl	8012b98 <_ZN9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	4618      	mov	r0, r3
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8012972:	b580      	push	{r7, lr}
 8012974:	b084      	sub	sp, #16
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	1d1a      	adds	r2, r3, #4
 801297e:	f107 030c 	add.w	r3, r7, #12
 8012982:	4611      	mov	r1, r2
 8012984:	4618      	mov	r0, r3
 8012986:	f000 f907 	bl	8012b98 <_ZN9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	4618      	mov	r0, r3
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <_ZN9__gnu_cxxneIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012994:	b590      	push	{r4, r7, lr}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 f909 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 80129a4:	4603      	mov	r3, r0
 80129a6:	681c      	ldr	r4, [r3, #0]
 80129a8:	6838      	ldr	r0, [r7, #0]
 80129aa:	f000 f904 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 80129ae:	4603      	mov	r3, r0
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	429c      	cmp	r4, r3
 80129b4:	bf14      	ite	ne
 80129b6:	2301      	movne	r3, #1
 80129b8:	2300      	moveq	r3, #0
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd90      	pop	{r4, r7, pc}

080129c4 <_ZN9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
	++_M_current;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	1d1a      	adds	r2, r3, #4
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	601a      	str	r2, [r3, #0]
	return *this;
 80129d6:	687b      	ldr	r3, [r7, #4]
      }
 80129d8:	4618      	mov	r0, r3
 80129da:	370c      	adds	r7, #12
 80129dc:	46bd      	mov	sp, r7
 80129de:	bc80      	pop	{r7}
 80129e0:	4770      	bx	lr

080129e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80129e2:	b480      	push	{r7}
 80129e4:	b083      	sub	sp, #12
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	4618      	mov	r0, r3
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bc80      	pop	{r7}
 80129f6:	4770      	bx	lr

080129f8 <_ZSt4moveIRP10tSTM32_CANEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4618      	mov	r0, r3
 8012a04:	370c      	adds	r7, #12
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bc80      	pop	{r7}
 8012a0a:	4770      	bx	lr

08012a0c <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8012a0c:	b5b0      	push	{r4, r5, r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	685a      	ldr	r2, [r3, #4]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d011      	beq.n	8012a46 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8012a22:	687c      	ldr	r4, [r7, #4]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	685d      	ldr	r5, [r3, #4]
 8012a28:	6838      	ldr	r0, [r7, #0]
 8012a2a:	f000 f8ce 	bl	8012bca <_ZSt7forwardIP10tSTM32_CANEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	461a      	mov	r2, r3
 8012a32:	4629      	mov	r1, r5
 8012a34:	4620      	mov	r0, r4
 8012a36:	f000 f8d2 	bl	8012bde <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	1d1a      	adds	r2, r3, #4
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8012a44:	e00c      	b.n	8012a60 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff ff93 	bl	8012972 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE3endEv>
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	6838      	ldr	r0, [r7, #0]
 8012a50:	f000 f8bb 	bl	8012bca <_ZSt7forwardIP10tSTM32_CANEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a54:	4603      	mov	r3, r0
 8012a56:	461a      	mov	r2, r3
 8012a58:	4621      	mov	r1, r4
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f000 f8e8 	bl	8012c30 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8012a60:	bf00      	nop
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bdb0      	pop	{r4, r5, r7, pc}

08012a68 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE5cleanEv>:
void tPriorityRingBuffer<T>::clean() {
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
}
 8012a70:	bf00      	nop
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bc80      	pop	{r7}
 8012a78:	4770      	bx	lr

08012a7a <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh>:
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t _priority) {
 8012a7a:	b480      	push	{r7}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
 8012a82:	460b      	mov	r3, r1
 8012a84:	70fb      	strb	r3, [r7, #3]
  const T *ret=0;
 8012a86:	2300      	movs	r3, #0
 8012a88:	60fb      	str	r3, [r7, #12]
  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	7a9b      	ldrb	r3, [r3, #10]
 8012a8e:	78fa      	ldrb	r2, [r7, #3]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d303      	bcc.n	8012a9c <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0x22>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	7a9b      	ldrb	r3, [r3, #10]
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	70fb      	strb	r3, [r7, #3]
  uint16_t ref=priorityReferencies[_priority].next;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	691a      	ldr	r2, [r3, #16]
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	009b      	lsls	r3, r3, #2
 8012aa4:	4413      	add	r3, r2
 8012aa6:	881b      	ldrh	r3, [r3, #0]
 8012aa8:	817b      	strh	r3, [r7, #10]
  if ( ref==INVALID_RING_REF ) {
 8012aaa:	897b      	ldrh	r3, [r7, #10]
 8012aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d101      	bne.n	8012ab8 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0x3e>
    return ret;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	e06a      	b.n	8012b8e <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0x114>
  ret=&(buffer[ref].Value);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	68d9      	ldr	r1, [r3, #12]
 8012abc:	897a      	ldrh	r2, [r7, #10]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	4413      	add	r3, r2
 8012ac4:	00db      	lsls	r3, r3, #3
 8012ac6:	440b      	add	r3, r1
 8012ac8:	60fb      	str	r3, [r7, #12]
  priorityReferencies[_priority].next=buffer[ref].next;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	68d9      	ldr	r1, [r3, #12]
 8012ace:	897a      	ldrh	r2, [r7, #10]
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	005b      	lsls	r3, r3, #1
 8012ad4:	4413      	add	r3, r2
 8012ad6:	00db      	lsls	r3, r3, #3
 8012ad8:	18ca      	adds	r2, r1, r3
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6919      	ldr	r1, [r3, #16]
 8012ade:	78fb      	ldrb	r3, [r7, #3]
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	440b      	add	r3, r1
 8012ae4:	8a92      	ldrh	r2, [r2, #20]
 8012ae6:	801a      	strh	r2, [r3, #0]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	691a      	ldr	r2, [r3, #16]
 8012aec:	78fb      	ldrb	r3, [r7, #3]
 8012aee:	009b      	lsls	r3, r3, #2
 8012af0:	4413      	add	r3, r2
 8012af2:	881b      	ldrh	r3, [r3, #0]
 8012af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d107      	bne.n	8012b0c <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0x92>
    priorityReferencies[_priority].last=INVALID_RING_REF;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	691a      	ldr	r2, [r3, #16]
 8012b00:	78fb      	ldrb	r3, [r7, #3]
 8012b02:	009b      	lsls	r3, r3, #2
 8012b04:	4413      	add	r3, r2
 8012b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b0a:	805a      	strh	r2, [r3, #2]
  if ( ref==tail ) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	88db      	ldrh	r3, [r3, #6]
 8012b10:	897a      	ldrh	r2, [r7, #10]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d12f      	bne.n	8012b76 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0xfc>
    for ( tail = (tail + 1) % size; tail!=head && buffer[tail].next==INVALID_RING_REF; tail = (tail + 1) % size );
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	88db      	ldrh	r3, [r3, #6]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	8912      	ldrh	r2, [r2, #8]
 8012b20:	fb93 f1f2 	sdiv	r1, r3, r2
 8012b24:	fb01 f202 	mul.w	r2, r1, r2
 8012b28:	1a9b      	subs	r3, r3, r2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	80da      	strh	r2, [r3, #6]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	88da      	ldrh	r2, [r3, #6]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	889b      	ldrh	r3, [r3, #4]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d01c      	beq.n	8012b76 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0xfc>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	68da      	ldr	r2, [r3, #12]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	88db      	ldrh	r3, [r3, #6]
 8012b44:	4619      	mov	r1, r3
 8012b46:	460b      	mov	r3, r1
 8012b48:	005b      	lsls	r3, r3, #1
 8012b4a:	440b      	add	r3, r1
 8012b4c:	00db      	lsls	r3, r3, #3
 8012b4e:	4413      	add	r3, r2
 8012b50:	8a9b      	ldrh	r3, [r3, #20]
 8012b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d10d      	bne.n	8012b76 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0xfc>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	88db      	ldrh	r3, [r3, #6]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	8912      	ldrh	r2, [r2, #8]
 8012b64:	fb93 f1f2 	sdiv	r1, r3, r2
 8012b68:	fb01 f202 	mul.w	r2, r1, r2
 8012b6c:	1a9b      	subs	r3, r3, r2
 8012b6e:	b29a      	uxth	r2, r3
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	80da      	strh	r2, [r3, #6]
 8012b74:	e7dc      	b.n	8012b30 <_ZN19tPriorityRingBufferIN10tSTM32_CAN13CAN_message_tEE10getReadRefEh+0xb6>
  buffer[ref].next=INVALID_RING_REF; // Release slot
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	68d9      	ldr	r1, [r3, #12]
 8012b7a:	897a      	ldrh	r2, [r7, #10]
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	4413      	add	r3, r2
 8012b82:	00db      	lsls	r3, r3, #3
 8012b84:	440b      	add	r3, r1
 8012b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b8a:	829a      	strh	r2, [r3, #20]
  return ret;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3714      	adds	r7, #20
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bc80      	pop	{r7}
 8012b96:	4770      	bx	lr

08012b98 <_ZN9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4618      	mov	r0, r3
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bc80      	pop	{r7}
 8012bb4:	4770      	bx	lr

08012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8012bb6:	b480      	push	{r7}
 8012bb8:	b083      	sub	sp, #12
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	370c      	adds	r7, #12
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bc80      	pop	{r7}
 8012bc8:	4770      	bx	lr

08012bca <_ZSt7forwardIP10tSTM32_CANEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012bca:	b480      	push	{r7}
 8012bcc:	b083      	sub	sp, #12
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	370c      	adds	r7, #12
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bc80      	pop	{r7}
 8012bdc:	4770      	bx	lr

08012bde <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b084      	sub	sp, #16
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	60f8      	str	r0, [r7, #12]
 8012be6:	60b9      	str	r1, [r7, #8]
 8012be8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7ff ffed 	bl	8012bca <_ZSt7forwardIP10tSTM32_CANEOT_RNSt16remove_referenceIS2_E4typeE>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	68b9      	ldr	r1, [r7, #8]
 8012bf6:	68f8      	ldr	r0, [r7, #12]
 8012bf8:	f000 f8d6 	bl	8012da8 <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8012bfc:	bf00      	nop
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f000 f805 	bl	8012c1a <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8012c10:	4603      	mov	r3, r0
      }
 8012c12:	4618      	mov	r0, r3
 8012c14:	3708      	adds	r7, #8
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8012c1a:	b480      	push	{r7}
 8012c1c:	b083      	sub	sp, #12
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8012c22:	2301      	movs	r3, #1
      }
 8012c24:	4618      	mov	r0, r3
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bc80      	pop	{r7}
 8012c2c:	4770      	bx	lr
	...

08012c30 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8012c30:	b5b0      	push	{r4, r5, r7, lr}
 8012c32:	b08c      	sub	sp, #48	; 0x30
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012c3c:	4a59      	ldr	r2, [pc, #356]	; (8012da4 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8012c3e:	2101      	movs	r1, #1
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f000 f8c7 	bl	8012dd4 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE12_M_check_lenEjPKc>
 8012c46:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ff fe7c 	bl	8012952 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE5beginEv>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	617b      	str	r3, [r7, #20]
 8012c5e:	f107 0214 	add.w	r2, r7, #20
 8012c62:	f107 0308 	add.w	r3, r7, #8
 8012c66:	4611      	mov	r1, r2
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f000 f8fa 	bl	8012e62 <_ZN9__gnu_cxxmiIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c76:	4618      	mov	r0, r3
 8012c78:	f000 f908 	bl	8012e8c <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE11_M_allocateEj>
 8012c7c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8012c82:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8012c88:	69ba      	ldr	r2, [r7, #24]
 8012c8a:	18d5      	adds	r5, r2, r3
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f7ff ff9c 	bl	8012bca <_ZSt7forwardIP10tSTM32_CANEOT_RNSt16remove_referenceIS2_E4typeE>
 8012c92:	4603      	mov	r3, r0
 8012c94:	461a      	mov	r2, r3
 8012c96:	4629      	mov	r1, r5
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f7ff ffa0 	bl	8012bde <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8012ca2:	f7ff ffaf 	bl	8012c04 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE15_S_use_relocateEv>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d027      	beq.n	8012cfc <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012cac:	f107 0308 	add.w	r3, r7, #8
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff ff80 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ee fef8 	bl	8001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8012cc2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012cc4:	69ba      	ldr	r2, [r7, #24]
 8012cc6:	4621      	mov	r1, r4
 8012cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cca:	f000 f8f3 	bl	8012eb4 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8012cce:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8012cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd2:	3304      	adds	r3, #4
 8012cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012cd6:	f107 0308 	add.w	r3, r7, #8
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff ff6b 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7ee fee3 	bl	8001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8012cec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cf0:	6a39      	ldr	r1, [r7, #32]
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f000 f8de 	bl	8012eb4 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8012cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012cfa:	e026      	b.n	8012d4a <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8012cfc:	f107 0308 	add.w	r3, r7, #8
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff ff58 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 8012d06:	4603      	mov	r3, r0
 8012d08:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ee fed0 	bl	8001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8012d12:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8012d14:	69ba      	ldr	r2, [r7, #24]
 8012d16:	4621      	mov	r1, r4
 8012d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d1a:	f000 f8df 	bl	8012edc <_ZSt34__uninitialized_move_if_noexcept_aIPP10tSTM32_CANS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012d1e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8012d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d22:	3304      	adds	r3, #4
 8012d24:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8012d26:	f107 0308 	add.w	r3, r7, #8
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff ff43 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 8012d30:	4603      	mov	r3, r0
 8012d32:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7ee febb 	bl	8001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8012d3c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8012d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d40:	6a39      	ldr	r1, [r7, #32]
 8012d42:	4620      	mov	r0, r4
 8012d44:	f000 f8ca 	bl	8012edc <_ZSt34__uninitialized_move_if_noexcept_aIPP10tSTM32_CANS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012d48:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8012d4a:	f7ff ff5b 	bl	8012c04 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE15_S_use_relocateEv>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	f083 0301 	eor.w	r3, r3, #1
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d009      	beq.n	8012d6e <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ee fea8 	bl	8001ab2 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8012d62:	4603      	mov	r3, r0
 8012d64:	461a      	mov	r2, r3
 8012d66:	6a39      	ldr	r1, [r7, #32]
 8012d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d6a:	f7ee feac 	bl	8001ac6 <_ZSt8_DestroyIPP10tSTM32_CANS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8012d6e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	689a      	ldr	r2, [r3, #8]
 8012d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d76:	1ad3      	subs	r3, r2, r3
 8012d78:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d7e:	f7ee fdf1 	bl	8001964 <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	69ba      	ldr	r2, [r7, #24]
 8012d86:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d8c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d90:	009b      	lsls	r3, r3, #2
 8012d92:	69ba      	ldr	r2, [r7, #24]
 8012d94:	441a      	add	r2, r3
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	609a      	str	r2, [r3, #8]
    }
 8012d9a:	bf00      	nop
 8012d9c:	3730      	adds	r7, #48	; 0x30
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bdb0      	pop	{r4, r5, r7, pc}
 8012da2:	bf00      	nop
 8012da4:	080173e8 	.word	0x080173e8

08012da8 <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8012da8:	b590      	push	{r4, r7, lr}
 8012daa:	b085      	sub	sp, #20
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ff08 	bl	8012bca <_ZSt7forwardIP10tSTM32_CANEOT_RNSt16remove_referenceIS2_E4typeE>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	681c      	ldr	r4, [r3, #0]
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	2004      	movs	r0, #4
 8012dc4:	f7fe ff34 	bl	8011c30 <_ZnwjPv>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	601c      	str	r4, [r3, #0]
 8012dcc:	bf00      	nop
 8012dce:	3714      	adds	r7, #20
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd90      	pop	{r4, r7, pc}

08012dd4 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8012dd4:	b590      	push	{r4, r7, lr}
 8012dd6:	b087      	sub	sp, #28
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8012de0:	68f8      	ldr	r0, [r7, #12]
 8012de2:	f000 f894 	bl	8012f0e <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE8max_sizeEv>
 8012de6:	4604      	mov	r4, r0
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f000 f8a1 	bl	8012f30 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE4sizeEv>
 8012dee:	4603      	mov	r3, r0
 8012df0:	1ae2      	subs	r2, r4, r3
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	bf34      	ite	cc
 8012df8:	2301      	movcc	r3, #1
 8012dfa:	2300      	movcs	r3, #0
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d002      	beq.n	8012e08 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f002 fe9b 	bl	8015b3e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f000 f891 	bl	8012f30 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE4sizeEv>
 8012e0e:	4604      	mov	r4, r0
 8012e10:	68f8      	ldr	r0, [r7, #12]
 8012e12:	f000 f88d 	bl	8012f30 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE4sizeEv>
 8012e16:	4603      	mov	r3, r0
 8012e18:	613b      	str	r3, [r7, #16]
 8012e1a:	f107 0208 	add.w	r2, r7, #8
 8012e1e:	f107 0310 	add.w	r3, r7, #16
 8012e22:	4611      	mov	r1, r2
 8012e24:	4618      	mov	r0, r3
 8012e26:	f000 f892 	bl	8012f4e <_ZSt3maxIjERKT_S2_S2_>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4423      	add	r3, r4
 8012e30:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012e32:	68f8      	ldr	r0, [r7, #12]
 8012e34:	f000 f87c 	bl	8012f30 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE4sizeEv>
 8012e38:	4602      	mov	r2, r0
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d306      	bcc.n	8012e4e <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	f000 f864 	bl	8012f0e <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE8max_sizeEv>
 8012e46:	4602      	mov	r2, r0
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d904      	bls.n	8012e58 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f000 f85d 	bl	8012f0e <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE8max_sizeEv>
 8012e54:	4603      	mov	r3, r0
 8012e56:	e000      	b.n	8012e5a <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE12_M_check_lenEjPKc+0x86>
 8012e58:	697b      	ldr	r3, [r7, #20]
      }
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	371c      	adds	r7, #28
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd90      	pop	{r4, r7, pc}

08012e62 <_ZN9__gnu_cxxmiIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012e62:	b590      	push	{r4, r7, lr}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
 8012e6a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff fea2 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 8012e72:	4603      	mov	r3, r0
 8012e74:	681c      	ldr	r4, [r3, #0]
 8012e76:	6838      	ldr	r0, [r7, #0]
 8012e78:	f7ff fe9d 	bl	8012bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPP10tSTM32_CANSt6vectorIS2_SaIS2_EEE4baseEv>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	1ae3      	subs	r3, r4, r3
 8012e82:	109b      	asrs	r3, r3, #2
 8012e84:	4618      	mov	r0, r3
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd90      	pop	{r4, r7, pc}

08012e8c <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d006      	beq.n	8012eaa <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE11_M_allocateEj+0x1e>
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6839      	ldr	r1, [r7, #0]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f000 f867 	bl	8012f74 <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE8allocateERS2_j>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	e000      	b.n	8012eac <_ZNSt12_Vector_baseIP10tSTM32_CANSaIS1_EE11_M_allocateEj+0x20>
 8012eaa:	2300      	movs	r3, #0
      }
 8012eac:	4618      	mov	r0, r3
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b087      	sub	sp, #28
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012ec2:	f88d 4000 	strb.w	r4, [sp]
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	687a      	ldr	r2, [r7, #4]
 8012eca:	68b9      	ldr	r1, [r7, #8]
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f000 f860 	bl	8012f92 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012ed2:	4603      	mov	r3, r0
      }
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3714      	adds	r7, #20
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd90      	pop	{r4, r7, pc}

08012edc <_ZSt34__uninitialized_move_if_noexcept_aIPP10tSTM32_CANS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8012edc:	b590      	push	{r4, r7, lr}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
 8012ee8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f000 f863 	bl	8012fb6 <_ZSt32__make_move_if_noexcept_iteratorIP10tSTM32_CANSt13move_iteratorIPS1_EET0_PT_>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	68b8      	ldr	r0, [r7, #8]
 8012ef4:	f000 f85f 	bl	8012fb6 <_ZSt32__make_move_if_noexcept_iteratorIP10tSTM32_CANSt13move_iteratorIPS1_EET0_PT_>
 8012ef8:	4601      	mov	r1, r0
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	4620      	mov	r0, r4
 8012f00:	f000 f868 	bl	8012fd4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10tSTM32_CANES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8012f04:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8012f06:	4618      	mov	r0, r3
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd90      	pop	{r4, r7, pc}

08012f0e <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b082      	sub	sp, #8
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f000 f886 	bl	801302a <_ZNKSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 f868 	bl	8012ff6 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE11_S_max_sizeERKS2_>
 8012f26:	4603      	mov	r3, r0
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <_ZNKSt6vectorIP10tSTM32_CANSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685a      	ldr	r2, [r3, #4]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	109b      	asrs	r3, r3, #2
 8012f44:	4618      	mov	r0, r3
 8012f46:	370c      	adds	r7, #12
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bc80      	pop	{r7}
 8012f4c:	4770      	bx	lr

08012f4e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8012f4e:	b480      	push	{r7}
 8012f50:	b083      	sub	sp, #12
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
 8012f56:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d201      	bcs.n	8012f68 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	e000      	b.n	8012f6a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8012f68:	687b      	ldr	r3, [r7, #4]
    }
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	370c      	adds	r7, #12
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bc80      	pop	{r7}
 8012f72:	4770      	bx	lr

08012f74 <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012f7e:	2200      	movs	r2, #0
 8012f80:	6839      	ldr	r1, [r7, #0]
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 f85b 	bl	801303e <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE8allocateEjPKv>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b084      	sub	sp, #16
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	60b9      	str	r1, [r7, #8]
 8012f9c:	607a      	str	r2, [r7, #4]
 8012f9e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	687a      	ldr	r2, [r7, #4]
 8012fa4:	68b9      	ldr	r1, [r7, #8]
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f000 f867 	bl	801307a <_ZSt12__relocate_aIPP10tSTM32_CANS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012fac:	4603      	mov	r3, r0
      }
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <_ZSt32__make_move_if_noexcept_iteratorIP10tSTM32_CANSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b084      	sub	sp, #16
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8012fbe:	f107 030c 	add.w	r3, r7, #12
 8012fc2:	6879      	ldr	r1, [r7, #4]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f000 f875 	bl	80130b4 <_ZNSt13move_iteratorIPP10tSTM32_CANEC1ES2_>
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3710      	adds	r7, #16
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10tSTM32_CANES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8012fe2:	687a      	ldr	r2, [r7, #4]
 8012fe4:	68b9      	ldr	r1, [r7, #8]
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f000 f876 	bl	80130d8 <_ZSt18uninitialized_copyISt13move_iteratorIPP10tSTM32_CANES3_ET0_T_S6_S5_>
 8012fec:	4603      	mov	r3, r0
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <_ZNSt6vectorIP10tSTM32_CANSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b084      	sub	sp, #16
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8012ffe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013002:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f000 f879 	bl	80130fc <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE8max_sizeERKS2_>
 801300a:	4603      	mov	r3, r0
 801300c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801300e:	f107 0208 	add.w	r2, r7, #8
 8013012:	f107 030c 	add.w	r3, r7, #12
 8013016:	4611      	mov	r1, r2
 8013018:	4618      	mov	r0, r3
 801301a:	f000 f87b 	bl	8013114 <_ZSt3minIjERKT_S2_S2_>
 801301e:	4603      	mov	r3, r0
 8013020:	681b      	ldr	r3, [r3, #0]
      }
 8013022:	4618      	mov	r0, r3
 8013024:	3710      	adds	r7, #16
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <_ZNKSt12_Vector_baseIP10tSTM32_CANSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801302a:	b480      	push	{r7}
 801302c:	b083      	sub	sp, #12
 801302e:	af00      	add	r7, sp, #0
 8013030:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	4618      	mov	r0, r3
 8013036:	370c      	adds	r7, #12
 8013038:	46bd      	mov	sp, r7
 801303a:	bc80      	pop	{r7}
 801303c:	4770      	bx	lr

0801303e <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801303e:	b580      	push	{r7, lr}
 8013040:	b084      	sub	sp, #16
 8013042:	af00      	add	r7, sp, #0
 8013044:	60f8      	str	r0, [r7, #12]
 8013046:	60b9      	str	r1, [r7, #8]
 8013048:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f000 f875 	bl	801313a <_ZNK9__gnu_cxx13new_allocatorIP10tSTM32_CANE11_M_max_sizeEv>
 8013050:	4602      	mov	r2, r0
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	4293      	cmp	r3, r2
 8013056:	bf8c      	ite	hi
 8013058:	2301      	movhi	r3, #1
 801305a:	2300      	movls	r3, #0
 801305c:	b2db      	uxtb	r3, r3
 801305e:	2b00      	cmp	r3, #0
 8013060:	d001      	beq.n	8013066 <_ZN9__gnu_cxx13new_allocatorIP10tSTM32_CANE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013062:	f002 fd69 	bl	8015b38 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	4618      	mov	r0, r3
 801306c:	f002 fd4e 	bl	8015b0c <_Znwj>
 8013070:	4603      	mov	r3, r0
      }
 8013072:	4618      	mov	r0, r3
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <_ZSt12__relocate_aIPP10tSTM32_CANS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801307a:	b5b0      	push	{r4, r5, r7, lr}
 801307c:	b084      	sub	sp, #16
 801307e:	af00      	add	r7, sp, #0
 8013080:	60f8      	str	r0, [r7, #12]
 8013082:	60b9      	str	r1, [r7, #8]
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8013088:	68f8      	ldr	r0, [r7, #12]
 801308a:	f000 f861 	bl	8013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>
 801308e:	4604      	mov	r4, r0
 8013090:	68b8      	ldr	r0, [r7, #8]
 8013092:	f000 f85d 	bl	8013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>
 8013096:	4605      	mov	r5, r0
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f000 f859 	bl	8013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>
 801309e:	4602      	mov	r2, r0
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	4629      	mov	r1, r5
 80130a4:	4620      	mov	r0, r4
 80130a6:	f000 f85d 	bl	8013164 <_ZSt14__relocate_a_1IP10tSTM32_CANS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80130aa:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80130ac:	4618      	mov	r0, r3
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bdb0      	pop	{r4, r5, r7, pc}

080130b4 <_ZNSt13move_iteratorIPP10tSTM32_CANEC1ES2_>:
      move_iterator(iterator_type __i)
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80130be:	463b      	mov	r3, r7
 80130c0:	4618      	mov	r0, r3
 80130c2:	f000 f86d 	bl	80131a0 <_ZSt4moveIRPP10tSTM32_CANEONSt16remove_referenceIT_E4typeEOS5_>
 80130c6:	4603      	mov	r3, r0
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	601a      	str	r2, [r3, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4618      	mov	r0, r3
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <_ZSt18uninitialized_copyISt13move_iteratorIPP10tSTM32_CANES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80130e4:	2301      	movs	r3, #1
 80130e6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80130e8:	687a      	ldr	r2, [r7, #4]
 80130ea:	68b9      	ldr	r1, [r7, #8]
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f000 f861 	bl	80131b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10tSTM32_CANES5_EET0_T_S8_S7_>
 80130f2:	4603      	mov	r3, r0
    }
 80130f4:	4618      	mov	r0, r3
 80130f6:	3718      	adds	r7, #24
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <_ZNSt16allocator_traitsISaIP10tSTM32_CANEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 f865 	bl	80131d4 <_ZNK9__gnu_cxx13new_allocatorIP10tSTM32_CANE8max_sizeEv>
 801310a:	4603      	mov	r3, r0
      }
 801310c:	4618      	mov	r0, r3
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	429a      	cmp	r2, r3
 8013128:	d201      	bcs.n	801312e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	e000      	b.n	8013130 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 801312e:	687b      	ldr	r3, [r7, #4]
    }
 8013130:	4618      	mov	r0, r3
 8013132:	370c      	adds	r7, #12
 8013134:	46bd      	mov	sp, r7
 8013136:	bc80      	pop	{r7}
 8013138:	4770      	bx	lr

0801313a <_ZNK9__gnu_cxx13new_allocatorIP10tSTM32_CANE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801313a:	b480      	push	{r7}
 801313c:	b083      	sub	sp, #12
 801313e:	af00      	add	r7, sp, #0
 8013140:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013142:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8013146:	4618      	mov	r0, r3
 8013148:	370c      	adds	r7, #12
 801314a:	46bd      	mov	sp, r7
 801314c:	bc80      	pop	{r7}
 801314e:	4770      	bx	lr

08013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	bc80      	pop	{r7}
 8013162:	4770      	bx	lr

08013164 <_ZSt14__relocate_a_1IP10tSTM32_CANS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013172:	68ba      	ldr	r2, [r7, #8]
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	1ad3      	subs	r3, r2, r3
 8013178:	109b      	asrs	r3, r3, #2
 801317a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	2b00      	cmp	r3, #0
 8013180:	dd06      	ble.n	8013190 <_ZSt14__relocate_a_1IP10tSTM32_CANS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	461a      	mov	r2, r3
 8013188:	68f9      	ldr	r1, [r7, #12]
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f002 fe48 	bl	8015e20 <memmove>
      return __result + __count;
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	4413      	add	r3, r2
    }
 8013198:	4618      	mov	r0, r3
 801319a:	3718      	adds	r7, #24
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <_ZSt4moveIRPP10tSTM32_CANEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	4618      	mov	r0, r3
 80131ac:	370c      	adds	r7, #12
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bc80      	pop	{r7}
 80131b2:	4770      	bx	lr

080131b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10tSTM32_CANES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	68b9      	ldr	r1, [r7, #8]
 80131c4:	68f8      	ldr	r0, [r7, #12]
 80131c6:	f000 f811 	bl	80131ec <_ZSt4copyISt13move_iteratorIPP10tSTM32_CANES3_ET0_T_S6_S5_>
 80131ca:	4603      	mov	r3, r0
 80131cc:	4618      	mov	r0, r3
 80131ce:	3710      	adds	r7, #16
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <_ZNK9__gnu_cxx13new_allocatorIP10tSTM32_CANE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ff ffac 	bl	801313a <_ZNK9__gnu_cxx13new_allocatorIP10tSTM32_CANE11_M_max_sizeEv>
 80131e2:	4603      	mov	r3, r0
 80131e4:	4618      	mov	r0, r3
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <_ZSt4copyISt13move_iteratorIPP10tSTM32_CANES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b085      	sub	sp, #20
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80131f8:	68f8      	ldr	r0, [r7, #12]
 80131fa:	f000 f80f 	bl	801321c <_ZSt12__miter_baseIPP10tSTM32_CANEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80131fe:	4604      	mov	r4, r0
 8013200:	68b8      	ldr	r0, [r7, #8]
 8013202:	f000 f80b 	bl	801321c <_ZSt12__miter_baseIPP10tSTM32_CANEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8013206:	4603      	mov	r3, r0
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	4619      	mov	r1, r3
 801320c:	4620      	mov	r0, r4
 801320e:	f000 f816 	bl	801323e <_ZSt13__copy_move_aILb1EPP10tSTM32_CANS2_ET1_T0_S4_S3_>
 8013212:	4603      	mov	r3, r0
    }
 8013214:	4618      	mov	r0, r3
 8013216:	3714      	adds	r7, #20
 8013218:	46bd      	mov	sp, r7
 801321a:	bd90      	pop	{r4, r7, pc}

0801321c <_ZSt12__miter_baseIPP10tSTM32_CANEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8013224:	1d3b      	adds	r3, r7, #4
 8013226:	4618      	mov	r0, r3
 8013228:	f000 f82c 	bl	8013284 <_ZNKSt13move_iteratorIPP10tSTM32_CANE4baseEv>
 801322c:	4603      	mov	r3, r0
 801322e:	4618      	mov	r0, r3
 8013230:	f000 f833 	bl	801329a <_ZSt12__miter_baseIPP10tSTM32_CANET_S3_>
 8013234:	4603      	mov	r3, r0
 8013236:	4618      	mov	r0, r3
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <_ZSt13__copy_move_aILb1EPP10tSTM32_CANS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801323e:	b5b0      	push	{r4, r5, r7, lr}
 8013240:	b084      	sub	sp, #16
 8013242:	af00      	add	r7, sp, #0
 8013244:	60f8      	str	r0, [r7, #12]
 8013246:	60b9      	str	r1, [r7, #8]
 8013248:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f7ff ff80 	bl	8013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>
 8013250:	4604      	mov	r4, r0
 8013252:	68b8      	ldr	r0, [r7, #8]
 8013254:	f7ff ff7c 	bl	8013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>
 8013258:	4605      	mov	r5, r0
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	f7ff ff77 	bl	8013150 <_ZSt12__niter_baseIPP10tSTM32_CANET_S3_>
 8013262:	4603      	mov	r3, r0
 8013264:	461a      	mov	r2, r3
 8013266:	4629      	mov	r1, r5
 8013268:	4620      	mov	r0, r4
 801326a:	f000 f820 	bl	80132ae <_ZSt14__copy_move_a1ILb1EPP10tSTM32_CANS2_ET1_T0_S4_S3_>
 801326e:	4602      	mov	r2, r0
 8013270:	1d3b      	adds	r3, r7, #4
 8013272:	4611      	mov	r1, r2
 8013274:	4618      	mov	r0, r3
 8013276:	f000 f82a 	bl	80132ce <_ZSt12__niter_wrapIPP10tSTM32_CANET_RKS3_S3_>
 801327a:	4603      	mov	r3, r0
    }
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bdb0      	pop	{r4, r5, r7, pc}

08013284 <_ZNKSt13move_iteratorIPP10tSTM32_CANE4baseEv>:
      base() const
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4618      	mov	r0, r3
 8013292:	370c      	adds	r7, #12
 8013294:	46bd      	mov	sp, r7
 8013296:	bc80      	pop	{r7}
 8013298:	4770      	bx	lr

0801329a <_ZSt12__miter_baseIPP10tSTM32_CANET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801329a:	b480      	push	{r7}
 801329c:	b083      	sub	sp, #12
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	4618      	mov	r0, r3
 80132a6:	370c      	adds	r7, #12
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bc80      	pop	{r7}
 80132ac:	4770      	bx	lr

080132ae <_ZSt14__copy_move_a1ILb1EPP10tSTM32_CANS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b084      	sub	sp, #16
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	60f8      	str	r0, [r7, #12]
 80132b6:	60b9      	str	r1, [r7, #8]
 80132b8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80132ba:	687a      	ldr	r2, [r7, #4]
 80132bc:	68b9      	ldr	r1, [r7, #8]
 80132be:	68f8      	ldr	r0, [r7, #12]
 80132c0:	f000 f810 	bl	80132e4 <_ZSt14__copy_move_a2ILb1EPP10tSTM32_CANS2_ET1_T0_S4_S3_>
 80132c4:	4603      	mov	r3, r0
 80132c6:	4618      	mov	r0, r3
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <_ZSt12__niter_wrapIPP10tSTM32_CANET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80132ce:	b480      	push	{r7}
 80132d0:	b083      	sub	sp, #12
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	6078      	str	r0, [r7, #4]
 80132d6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	4618      	mov	r0, r3
 80132dc:	370c      	adds	r7, #12
 80132de:	46bd      	mov	sp, r7
 80132e0:	bc80      	pop	{r7}
 80132e2:	4770      	bx	lr

080132e4 <_ZSt14__copy_move_a2ILb1EPP10tSTM32_CANS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	68b9      	ldr	r1, [r7, #8]
 80132f4:	68f8      	ldr	r0, [r7, #12]
 80132f6:	f000 f805 	bl	8013304 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10tSTM32_CANEEPT_PKS5_S8_S6_>
 80132fa:	4603      	mov	r3, r0
    }
 80132fc:	4618      	mov	r0, r3
 80132fe:	3710      	adds	r7, #16
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10tSTM32_CANEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8013310:	68ba      	ldr	r2, [r7, #8]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	109b      	asrs	r3, r3, #2
 8013318:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d006      	beq.n	801332e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10tSTM32_CANEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	461a      	mov	r2, r3
 8013326:	68f9      	ldr	r1, [r7, #12]
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f002 fd79 	bl	8015e20 <memmove>
	  return __result + _Num;
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	4413      	add	r3, r2
	}
 8013336:	4618      	mov	r0, r3
 8013338:	3718      	adds	r7, #24
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
	...

08013340 <_Z41__static_initialization_and_destruction_0ii>:
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d107      	bne.n	8013360 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013356:	4293      	cmp	r3, r2
 8013358:	d102      	bne.n	8013360 <_Z41__static_initialization_and_destruction_0ii+0x20>
    bool SendFromTxRing();


};

static std::vector<tSTM32_CAN *> canInstances;
 801335a:	4809      	ldr	r0, [pc, #36]	; (8013380 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801335c:	f7ee f93e 	bl	80015dc <_ZNSt6vectorIP10tSTM32_CANSaIS1_EEC1Ev>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d107      	bne.n	8013376 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801336c:	4293      	cmp	r3, r2
 801336e:	d102      	bne.n	8013376 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8013370:	4803      	ldr	r0, [pc, #12]	; (8013380 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013372:	f7ee fb83 	bl	8001a7c <_ZNSt6vectorIP10tSTM32_CANSaIS1_EED1Ev>
 8013376:	bf00      	nop
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	2000037c 	.word	0x2000037c

08013384 <_GLOBAL__sub_I__ZN10tSTM32_CANC2EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE>:
 8013384:	b580      	push	{r7, lr}
 8013386:	af00      	add	r7, sp, #0
 8013388:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801338c:	2001      	movs	r0, #1
 801338e:	f7ff ffd7 	bl	8013340 <_Z41__static_initialization_and_destruction_0ii>
 8013392:	bd80      	pop	{r7, pc}

08013394 <_GLOBAL__sub_D__ZN10tSTM32_CANC2EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE>:
 8013394:	b580      	push	{r7, lr}
 8013396:	af00      	add	r7, sp, #0
 8013398:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801339c:	2000      	movs	r0, #0
 801339e:	f7ff ffcf 	bl	8013340 <_Z41__static_initialization_and_destruction_0ii>
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <__NVIC_SystemReset>:
{
 80133a4:	b480      	push	{r7}
 80133a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80133a8:	f3bf 8f4f 	dsb	sy
}
 80133ac:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80133ae:	4b06      	ldr	r3, [pc, #24]	; (80133c8 <__NVIC_SystemReset+0x24>)
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80133b6:	4904      	ldr	r1, [pc, #16]	; (80133c8 <__NVIC_SystemReset+0x24>)
 80133b8:	4b04      	ldr	r3, [pc, #16]	; (80133cc <__NVIC_SystemReset+0x28>)
 80133ba:	4313      	orrs	r3, r2
 80133bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80133be:	f3bf 8f4f 	dsb	sy
}
 80133c2:	bf00      	nop
    __NOP();
 80133c4:	bf00      	nop
 80133c6:	e7fd      	b.n	80133c4 <__NVIC_SystemReset+0x20>
 80133c8:	e000ed00 	.word	0xe000ed00
 80133cc:	05fa0004 	.word	0x05fa0004

080133d0 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80133dc:	f240 401c 	movw	r0, #1052	; 0x41c
 80133e0:	f002 fb50 	bl	8015a84 <USBD_static_malloc>
 80133e4:	4602      	mov	r2, r0
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 80133f6:	2302      	movs	r3, #2
 80133f8:	e03f      	b.n	801347a <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013400:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2200      	movs	r2, #0
 8013406:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013410:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2200      	movs	r2, #0
 8013418:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	2200      	movs	r2, #0
 8013420:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2200      	movs	r2, #0
 8013428:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2202      	movs	r2, #2
 8013430:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2200      	movs	r2, #0
 8013438:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2200      	movs	r2, #0
 8013448:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2200      	movs	r2, #0
 8013450:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2202      	movs	r2, #2
 8013458:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2200      	movs	r2, #0
 8013460:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	4798      	blx	r3
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d001      	beq.n	8013478 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8013474:	2302      	movs	r3, #2
 8013476:	e000      	b.n	801347a <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8013478:	2300      	movs	r3, #0
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b084      	sub	sp, #16
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
 801348a:	460b      	mov	r3, r1
 801348c:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013494:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2200      	movs	r2, #0
 801349a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2200      	movs	r2, #0
 80134a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2202      	movs	r2, #2
 80134aa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2202      	movs	r2, #2
 80134ba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d00e      	beq.n	80134e6 <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134d8:	4618      	mov	r0, r3
 80134da:	f002 fadf 	bl	8015a9c <USBD_static_free>
    pdev->pClassData = NULL;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2200      	movs	r2, #0
 80134e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80134e6:	2300      	movs	r3, #0
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3710      	adds	r7, #16
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 80134fa:	2300      	movs	r3, #0
 80134fc:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 80134fe:	2300      	movs	r3, #0
 8013500:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8013502:	2300      	movs	r3, #0
 8013504:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8013506:	2300      	movs	r3, #0
 8013508:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013510:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801351a:	2b00      	cmp	r3, #0
 801351c:	d03f      	beq.n	801359e <USBD_DFU_Setup+0xae>
 801351e:	2b20      	cmp	r3, #32
 8013520:	f040 80c2 	bne.w	80136a8 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	785b      	ldrb	r3, [r3, #1]
 8013528:	2b06      	cmp	r3, #6
 801352a:	d830      	bhi.n	801358e <USBD_DFU_Setup+0x9e>
 801352c:	a201      	add	r2, pc, #4	; (adr r2, 8013534 <USBD_DFU_Setup+0x44>)
 801352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013532:	bf00      	nop
 8013534:	08013585 	.word	0x08013585
 8013538:	08013551 	.word	0x08013551
 801353c:	0801355b 	.word	0x0801355b
 8013540:	08013565 	.word	0x08013565
 8013544:	0801356d 	.word	0x0801356d
 8013548:	08013575 	.word	0x08013575
 801354c:	0801357d 	.word	0x0801357d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8013550:	6839      	ldr	r1, [r7, #0]
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f000 fa8e 	bl	8013a74 <DFU_Download>
          break;
 8013558:	e020      	b.n	801359c <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 801355a:	6839      	ldr	r1, [r7, #0]
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 faf3 	bl	8013b48 <DFU_Upload>
          break;
 8013562:	e01b      	b.n	801359c <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f000 fbc7 	bl	8013cf8 <DFU_GetStatus>
          break;
 801356a:	e017      	b.n	801359c <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f000 fc75 	bl	8013e5c <DFU_ClearStatus>
          break;
 8013572:	e013      	b.n	801359c <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f000 fcc0 	bl	8013efa <DFU_GetState>
          break;
 801357a:	e00f      	b.n	801359c <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f000 fcd0 	bl	8013f22 <DFU_Abort>
          break;
 8013582:	e00b      	b.n	801359c <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8013584:	6839      	ldr	r1, [r7, #0]
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f000 fa14 	bl	80139b4 <DFU_Detach>
          break;
 801358c:	e006      	b.n	801359c <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 801358e:	6839      	ldr	r1, [r7, #0]
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f001 fd6e 	bl	8015072 <USBD_CtlError>
          ret = USBD_FAIL;
 8013596:	2302      	movs	r3, #2
 8013598:	747b      	strb	r3, [r7, #17]
          break;
 801359a:	bf00      	nop
      }
      break;
 801359c:	e08b      	b.n	80136b6 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	785b      	ldrb	r3, [r3, #1]
 80135a2:	2b0b      	cmp	r3, #11
 80135a4:	d878      	bhi.n	8013698 <USBD_DFU_Setup+0x1a8>
 80135a6:	a201      	add	r2, pc, #4	; (adr r2, 80135ac <USBD_DFU_Setup+0xbc>)
 80135a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135ac:	080135dd 	.word	0x080135dd
 80135b0:	08013699 	.word	0x08013699
 80135b4:	08013699 	.word	0x08013699
 80135b8:	08013699 	.word	0x08013699
 80135bc:	08013699 	.word	0x08013699
 80135c0:	08013699 	.word	0x08013699
 80135c4:	08013605 	.word	0x08013605
 80135c8:	08013699 	.word	0x08013699
 80135cc:	08013699 	.word	0x08013699
 80135d0:	08013699 	.word	0x08013699
 80135d4:	0801362f 	.word	0x0801362f
 80135d8:	08013659 	.word	0x08013659
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135e2:	2b03      	cmp	r3, #3
 80135e4:	d107      	bne.n	80135f6 <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80135e6:	f107 030a 	add.w	r3, r7, #10
 80135ea:	2202      	movs	r2, #2
 80135ec:	4619      	mov	r1, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f001 fda9 	bl	8015146 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135f4:	e057      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80135f6:	6839      	ldr	r1, [r7, #0]
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f001 fd3a 	bl	8015072 <USBD_CtlError>
            ret = USBD_FAIL;
 80135fe:	2302      	movs	r3, #2
 8013600:	747b      	strb	r3, [r7, #17]
          break;
 8013602:	e050      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	885b      	ldrh	r3, [r3, #2]
 8013608:	0a1b      	lsrs	r3, r3, #8
 801360a:	b29b      	uxth	r3, r3
 801360c:	2b21      	cmp	r3, #33	; 0x21
 801360e:	d107      	bne.n	8013620 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8013610:	4b2b      	ldr	r3, [pc, #172]	; (80136c0 <USBD_DFU_Setup+0x1d0>)
 8013612:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	88db      	ldrh	r3, [r3, #6]
 8013618:	2b09      	cmp	r3, #9
 801361a:	bf28      	it	cs
 801361c:	2309      	movcs	r3, #9
 801361e:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8013620:	8a7b      	ldrh	r3, [r7, #18]
 8013622:	461a      	mov	r2, r3
 8013624:	6979      	ldr	r1, [r7, #20]
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f001 fd8d 	bl	8015146 <USBD_CtlSendData>
          break;
 801362c:	e03b      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013634:	2b03      	cmp	r3, #3
 8013636:	d108      	bne.n	801364a <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801363e:	2201      	movs	r2, #1
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f001 fd7f 	bl	8015146 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013648:	e02d      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 801364a:	6839      	ldr	r1, [r7, #0]
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f001 fd10 	bl	8015072 <USBD_CtlError>
            ret = USBD_FAIL;
 8013652:	2302      	movs	r3, #2
 8013654:	747b      	strb	r3, [r7, #17]
          break;
 8013656:	e026      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	885b      	ldrh	r3, [r3, #2]
 801365c:	b2db      	uxtb	r3, r3
 801365e:	2b00      	cmp	r3, #0
 8013660:	d113      	bne.n	801368a <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013668:	2b03      	cmp	r3, #3
 801366a:	d107      	bne.n	801367c <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	885b      	ldrh	r3, [r3, #2]
 8013670:	b2db      	uxtb	r3, r3
 8013672:	461a      	mov	r2, r3
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801367a:	e014      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 801367c:	6839      	ldr	r1, [r7, #0]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f001 fcf7 	bl	8015072 <USBD_CtlError>
              ret = USBD_FAIL;
 8013684:	2302      	movs	r3, #2
 8013686:	747b      	strb	r3, [r7, #17]
          break;
 8013688:	e00d      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 801368a:	6839      	ldr	r1, [r7, #0]
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f001 fcf0 	bl	8015072 <USBD_CtlError>
            ret = USBD_FAIL;
 8013692:	2302      	movs	r3, #2
 8013694:	747b      	strb	r3, [r7, #17]
          break;
 8013696:	e006      	b.n	80136a6 <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 8013698:	6839      	ldr	r1, [r7, #0]
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f001 fce9 	bl	8015072 <USBD_CtlError>
          ret = USBD_FAIL;
 80136a0:	2302      	movs	r3, #2
 80136a2:	747b      	strb	r3, [r7, #17]
          break;
 80136a4:	bf00      	nop
      }
      break;
 80136a6:	e006      	b.n	80136b6 <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f001 fce1 	bl	8015072 <USBD_CtlError>
      ret = USBD_FAIL;
 80136b0:	2302      	movs	r3, #2
 80136b2:	747b      	strb	r3, [r7, #17]
      break;
 80136b4:	bf00      	nop
  }

  return ret;
 80136b6:	7c7b      	ldrb	r3, [r7, #17]
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3718      	adds	r7, #24
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	200000a6 	.word	0x200000a6

080136c4 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	221b      	movs	r2, #27
 80136d0:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 80136d2:	4b03      	ldr	r3, [pc, #12]	; (80136e0 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	370c      	adds	r7, #12
 80136d8:	46bd      	mov	sp, r7
 80136da:	bc80      	pop	{r7}
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop
 80136e0:	20000094 	.word	0x20000094

080136e4 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b083      	sub	sp, #12
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	460b      	mov	r3, r1
 80136ee:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bc80      	pop	{r7}
 80136fa:	4770      	bx	lr

080136fc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80136fc:	b480      	push	{r7}
 80136fe:	b083      	sub	sp, #12
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8013704:	2300      	movs	r3, #0
}
 8013706:	4618      	mov	r0, r3
 8013708:	370c      	adds	r7, #12
 801370a:	46bd      	mov	sp, r7
 801370c:	bc80      	pop	{r7}
 801370e:	4770      	bx	lr

08013710 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b086      	sub	sp, #24
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801371e:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013726:	2b04      	cmp	r3, #4
 8013728:	f040 80ca 	bne.w	80138c0 <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013732:	2b00      	cmp	r3, #0
 8013734:	f040 8086 	bne.w	8013844 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d105      	bne.n	801374c <USBD_DFU_EP0_TxReady+0x3c>
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013746:	2b01      	cmp	r3, #1
 8013748:	f000 809a 	beq.w	8013880 <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2b21      	cmp	r3, #33	; 0x21
 8013752:	d129      	bne.n	80137a8 <USBD_DFU_EP0_TxReady+0x98>
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801375a:	2b05      	cmp	r3, #5
 801375c:	d124      	bne.n	80137a8 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	785b      	ldrb	r3, [r3, #1]
 8013762:	461a      	mov	r2, r3
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	789b      	ldrb	r3, [r3, #2]
 8013774:	021b      	lsls	r3, r3, #8
 8013776:	441a      	add	r2, r3
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	78db      	ldrb	r3, [r3, #3]
 8013788:	041b      	lsls	r3, r3, #16
 801378a:	441a      	add	r2, r3
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	791b      	ldrb	r3, [r3, #4]
 801379c:	061b      	lsls	r3, r3, #24
 801379e:	441a      	add	r2, r3
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80137a6:	e06b      	b.n	8013880 <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	2b41      	cmp	r3, #65	; 0x41
 80137ae:	d136      	bne.n	801381e <USBD_DFU_EP0_TxReady+0x10e>
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80137b6:	2b05      	cmp	r3, #5
 80137b8:	d131      	bne.n	801381e <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	785b      	ldrb	r3, [r3, #1]
 80137be:	461a      	mov	r2, r3
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	789b      	ldrb	r3, [r3, #2]
 80137d0:	021b      	lsls	r3, r3, #8
 80137d2:	441a      	add	r2, r3
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	78db      	ldrb	r3, [r3, #3]
 80137e4:	041b      	lsls	r3, r3, #16
 80137e6:	441a      	add	r2, r3
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	791b      	ldrb	r3, [r3, #4]
 80137f8:	061b      	lsls	r3, r3, #24
 80137fa:	441a      	add	r2, r3
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	697a      	ldr	r2, [r7, #20]
 801380c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8013810:	4610      	mov	r0, r2
 8013812:	4798      	blx	r3
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d032      	beq.n	8013880 <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 801381a:	2302      	movs	r3, #2
 801381c:	e059      	b.n	80138d2 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	2200      	movs	r2, #0
 8013822:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	2200      	movs	r2, #0
 801382a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 801382e:	2300      	movs	r3, #0
 8013830:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8013832:	2301      	movs	r3, #1
 8013834:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8013836:	f107 0308 	add.w	r3, r7, #8
 801383a:	4619      	mov	r1, r3
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f001 fc18 	bl	8015072 <USBD_CtlError>
 8013842:	e01d      	b.n	8013880 <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801384a:	2b01      	cmp	r3, #1
 801384c:	d918      	bls.n	8013880 <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013854:	3b02      	subs	r3, #2
 8013856:	029a      	lsls	r2, r3, #10
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 801385e:	4413      	add	r3, r2
 8013860:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013868:	691b      	ldr	r3, [r3, #16]
 801386a:	6978      	ldr	r0, [r7, #20]
 801386c:	6939      	ldr	r1, [r7, #16]
 801386e:	697a      	ldr	r2, [r7, #20]
 8013870:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8013874:	4798      	blx	r3
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d001      	beq.n	8013880 <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 801387c:	2302      	movs	r3, #2
 801387e:	e028      	b.n	80138d2 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	2200      	movs	r2, #0
 8013884:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	2200      	movs	r2, #0
 801388c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	2203      	movs	r2, #3
 8013894:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	2200      	movs	r2, #0
 801389c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	2200      	movs	r2, #0
 80138a4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	2200      	movs	r2, #0
 80138ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 80138bc:	2300      	movs	r3, #0
 80138be:	e008      	b.n	80138d2 <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80138c6:	2b07      	cmp	r3, #7
 80138c8:	d102      	bne.n	80138d0 <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f000 fb76 	bl	8013fbc <DFU_Leave>
    }
  }

  return USBD_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3718      	adds	r7, #24
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}

080138da <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80138da:	b480      	push	{r7}
 80138dc:	b083      	sub	sp, #12
 80138de:	af00      	add	r7, sp, #0
 80138e0:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	370c      	adds	r7, #12
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bc80      	pop	{r7}
 80138ec:	4770      	bx	lr

080138ee <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138ee:	b480      	push	{r7}
 80138f0:	b083      	sub	sp, #12
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
 80138f6:	460b      	mov	r3, r1
 80138f8:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	bc80      	pop	{r7}
 8013904:	4770      	bx	lr

08013906 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013906:	b480      	push	{r7}
 8013908:	b083      	sub	sp, #12
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
 801390e:	460b      	mov	r3, r1
 8013910:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8013912:	2300      	movs	r3, #0
}
 8013914:	4618      	mov	r0, r3
 8013916:	370c      	adds	r7, #12
 8013918:	46bd      	mov	sp, r7
 801391a:	bc80      	pop	{r7}
 801391c:	4770      	bx	lr

0801391e <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 801391e:	b480      	push	{r7}
 8013920:	b083      	sub	sp, #12
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
 8013926:	460b      	mov	r3, r1
 8013928:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 801392a:	2300      	movs	r3, #0
}
 801392c:	4618      	mov	r0, r3
 801392e:	370c      	adds	r7, #12
 8013930:	46bd      	mov	sp, r7
 8013932:	bc80      	pop	{r7}
 8013934:	4770      	bx	lr
	...

08013938 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8013938:	b480      	push	{r7}
 801393a:	b083      	sub	sp, #12
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	220a      	movs	r2, #10
 8013944:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8013946:	4b03      	ldr	r3, [pc, #12]	; (8013954 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8013948:	4618      	mov	r0, r3
 801394a:	370c      	adds	r7, #12
 801394c:	46bd      	mov	sp, r7
 801394e:	bc80      	pop	{r7}
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	200000b0 	.word	0x200000b0

08013958 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	460b      	mov	r3, r1
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8013966:	7afb      	ldrb	r3, [r7, #11]
 8013968:	2b06      	cmp	r3, #6
 801396a:	d80a      	bhi.n	8013982 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	4905      	ldr	r1, [pc, #20]	; (801398c <USBD_DFU_GetUsrStringDesc+0x34>)
 8013978:	4618      	mov	r0, r3
 801397a:	f001 fb8b 	bl	8015094 <USBD_GetString>
    return USBD_StrDesc;
 801397e:	4b03      	ldr	r3, [pc, #12]	; (801398c <USBD_DFU_GetUsrStringDesc+0x34>)
 8013980:	e000      	b.n	8013984 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8013982:	2300      	movs	r3, #0
  }
}
 8013984:	4618      	mov	r0, r3
 8013986:	3710      	adds	r7, #16
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	20000388 	.word	0x20000388

08013990 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d003      	beq.n	80139a8 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	683a      	ldr	r2, [r7, #0]
 80139a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 80139a8:	2300      	movs	r3, #0
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	370c      	adds	r7, #12
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bc80      	pop	{r7}
 80139b2:	4770      	bx	lr

080139b4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139c4:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d013      	beq.n	80139f8 <DFU_Detach+0x44>
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139d6:	2b03      	cmp	r3, #3
 80139d8:	d00e      	beq.n	80139f8 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139e0:	2b05      	cmp	r3, #5
 80139e2:	d009      	beq.n	80139f8 <DFU_Detach+0x44>
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139ea:	2b06      	cmp	r3, #6
 80139ec:	d004      	beq.n	80139f8 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139f4:	2b09      	cmp	r3, #9
 80139f6:	d125      	bne.n	8013a44 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2202      	movs	r2, #2
 80139fc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2200      	movs	r2, #0
 8013a04:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2200      	movs	r2, #0
 8013a38:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8013a44:	4b0a      	ldr	r3, [pc, #40]	; (8013a70 <DFU_Detach+0xbc>)
 8013a46:	7d5b      	ldrb	r3, [r3, #21]
 8013a48:	f003 0310 	and.w	r3, r3, #16
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d006      	beq.n	8013a5e <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f000 fb51 	bl	80140f8 <USBD_Stop>
    USBD_Start(pdev);
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f000 fb42 	bl	80140e0 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8013a5c:	e004      	b.n	8013a68 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	885b      	ldrh	r3, [r3, #2]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7ee fbe0 	bl	8002228 <HAL_Delay>
}
 8013a68:	bf00      	nop
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	20000094 	.word	0x20000094

08013a74 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a84:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	88db      	ldrh	r3, [r3, #6]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d02e      	beq.n	8013aec <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	d004      	beq.n	8013aa2 <DFU_Download+0x2e>
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013a9e:	2b05      	cmp	r3, #5
 8013aa0:	d11f      	bne.n	8013ae2 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	885b      	ldrh	r3, [r3, #2]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	88db      	ldrh	r3, [r3, #6]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2203      	movs	r2, #3
 8013abe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8013ace:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	461a      	mov	r2, r3
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f001 fb61 	bl	80151a2 <USBD_CtlPrepareRx>
 8013ae0:	e02e      	b.n	8013b40 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8013ae2:	6839      	ldr	r1, [r7, #0]
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f001 fac4 	bl	8015072 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8013aea:	e029      	b.n	8013b40 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013af2:	2b05      	cmp	r3, #5
 8013af4:	d004      	beq.n	8013b00 <DFU_Download+0x8c>
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d11a      	bne.n	8013b36 <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2201      	movs	r2, #1
 8013b04:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2206      	movs	r2, #6
 8013b0c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2200      	movs	r2, #0
 8013b14:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2200      	movs	r2, #0
 8013b24:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8013b34:	e004      	b.n	8013b40 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 8013b36:	6839      	ldr	r1, [r7, #0]
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f001 fa9a 	bl	8015072 <USBD_CtlError>
}
 8013b3e:	e7ff      	b.n	8013b40 <DFU_Download+0xcc>
 8013b40:	bf00      	nop
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b086      	sub	sp, #24
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b58:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	88db      	ldrh	r3, [r3, #6]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f000 80ab 	beq.w	8013cc2 <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013b72:	2b02      	cmp	r3, #2
 8013b74:	d005      	beq.n	8013b82 <DFU_Upload+0x3a>
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013b7c:	2b09      	cmp	r3, #9
 8013b7e:	f040 8093 	bne.w	8013ca8 <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	885b      	ldrh	r3, [r3, #2]
 8013b86:	461a      	mov	r2, r3
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	88db      	ldrh	r3, [r3, #6]
 8013b92:	461a      	mov	r2, r3
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d12c      	bne.n	8013bfe <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013baa:	2b03      	cmp	r3, #3
 8013bac:	d901      	bls.n	8013bb2 <DFU_Upload+0x6a>
 8013bae:	2202      	movs	r2, #2
 8013bb0:	e000      	b.n	8013bb4 <DFU_Upload+0x6c>
 8013bb2:	2209      	movs	r2, #9
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	2200      	movs	r2, #0
 8013be2:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	2221      	movs	r2, #33	; 0x21
 8013be8:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	2241      	movs	r2, #65	; 0x41
 8013bee:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	2203      	movs	r2, #3
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f001 faa5 	bl	8015146 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8013bfc:	e078      	b.n	8013cf0 <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d934      	bls.n	8013c72 <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	2209      	movs	r2, #9
 8013c0c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	2200      	movs	r2, #0
 8013c14:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	2200      	movs	r2, #0
 8013c24:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013c3a:	3b02      	subs	r3, #2
 8013c3c:	029a      	lsls	r2, r3, #10
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8013c44:	4413      	add	r3, r2
 8013c46:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c4e:	695b      	ldr	r3, [r3, #20]
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	6979      	ldr	r1, [r7, #20]
 8013c54:	697a      	ldr	r2, [r7, #20]
 8013c56:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8013c5a:	4798      	blx	r3
 8013c5c:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	461a      	mov	r2, r3
 8013c68:	6939      	ldr	r1, [r7, #16]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f001 fa6b 	bl	8015146 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8013c70:	e03e      	b.n	8013cf0 <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	220f      	movs	r2, #15
 8013c76:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	2200      	movs	r2, #0
 8013c86:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8013c9e:	6839      	ldr	r1, [r7, #0]
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f001 f9e6 	bl	8015072 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8013ca6:	e023      	b.n	8013cf0 <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	2200      	movs	r2, #0
 8013cac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8013cb8:	6839      	ldr	r1, [r7, #0]
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f001 f9d9 	bl	8015072 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8013cc0:	e016      	b.n	8013cf0 <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8013cee:	e7ff      	b.n	8013cf0 <DFU_Upload+0x1a8>
 8013cf0:	bf00      	nop
 8013cf2:	3718      	adds	r7, #24
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d06:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013d0e:	2b03      	cmp	r3, #3
 8013d10:	d002      	beq.n	8013d18 <DFU_GetStatus+0x20>
 8013d12:	2b06      	cmp	r3, #6
 8013d14:	d055      	beq.n	8013dc2 <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 8013d16:	e092      	b.n	8013e3e <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d038      	beq.n	8013d94 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2204      	movs	r2, #4
 8013d26:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	2200      	movs	r2, #0
 8013d36:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d110      	bne.n	8013d7a <DFU_GetStatus+0x82>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	2b41      	cmp	r3, #65	; 0x41
 8013d5e:	d10c      	bne.n	8013d7a <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d66:	699b      	ldr	r3, [r3, #24]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8013d74:	2100      	movs	r1, #0
 8013d76:	4798      	blx	r3
      break;
 8013d78:	e061      	b.n	8013e3e <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d80:	699b      	ldr	r3, [r3, #24]
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8013d88:	68fa      	ldr	r2, [r7, #12]
 8013d8a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8013d8e:	2101      	movs	r1, #1
 8013d90:	4798      	blx	r3
      break;
 8013d92:	e054      	b.n	8013e3e <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2205      	movs	r2, #5
 8013d98:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2200      	movs	r2, #0
 8013da8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2200      	movs	r2, #0
 8013db0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8013dc0:	e03d      	b.n	8013e3e <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d116      	bne.n	8013dfa <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2207      	movs	r2, #7
 8013dd0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2200      	movs	r2, #0
 8013de8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8013df8:	e020      	b.n	8013e3c <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d11b      	bne.n	8013e3c <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8013e04:	4b14      	ldr	r3, [pc, #80]	; (8013e58 <DFU_GetStatus+0x160>)
 8013e06:	7d1b      	ldrb	r3, [r3, #20]
 8013e08:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d015      	beq.n	8013e3c <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2202      	movs	r2, #2
 8013e14:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8013e3c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013e44:	2206      	movs	r2, #6
 8013e46:	4619      	mov	r1, r3
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f001 f97c 	bl	8015146 <USBD_CtlSendData>
}
 8013e4e:	bf00      	nop
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	20000094 	.word	0x20000094

08013e5c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e6a:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013e72:	2b0a      	cmp	r3, #10
 8013e74:	d11e      	bne.n	8013eb4 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2202      	movs	r2, #2
 8013e7a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2200      	movs	r2, #0
 8013e82:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2200      	movs	r2, #0
 8013e92:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	2200      	movs	r2, #0
 8013eae:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8013eb2:	e01d      	b.n	8013ef0 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	220a      	movs	r2, #10
 8013eb8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	220e      	movs	r2, #14
 8013ec0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2200      	movs	r2, #0
 8013eec:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8013ef0:	bf00      	nop
 8013ef2:	3714      	adds	r7, #20
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bc80      	pop	{r7}
 8013ef8:	4770      	bx	lr

08013efa <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b084      	sub	sp, #16
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f08:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8013f10:	2201      	movs	r2, #1
 8013f12:	4619      	mov	r1, r3
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f001 f916 	bl	8015146 <USBD_CtlSendData>
}
 8013f1a:	bf00      	nop
 8013f1c:	3710      	adds	r7, #16
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8013f22:	b480      	push	{r7}
 8013f24:	b085      	sub	sp, #20
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f30:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013f38:	2b02      	cmp	r3, #2
 8013f3a:	d013      	beq.n	8013f64 <DFU_Abort+0x42>
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013f42:	2b03      	cmp	r3, #3
 8013f44:	d00e      	beq.n	8013f64 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013f4c:	2b05      	cmp	r3, #5
 8013f4e:	d009      	beq.n	8013f64 <DFU_Abort+0x42>
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013f56:	2b06      	cmp	r3, #6
 8013f58:	d004      	beq.n	8013f64 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013f60:	2b09      	cmp	r3, #9
 8013f62:	d125      	bne.n	8013fb0 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2202      	movs	r2, #2
 8013f68:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	2200      	movs	r2, #0
 8013f78:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8013fb0:	bf00      	nop
 8013fb2:	3714      	adds	r7, #20
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bc80      	pop	{r7}
 8013fb8:	4770      	bx	lr
	...

08013fbc <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fca:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8013fd4:	4b1f      	ldr	r3, [pc, #124]	; (8014054 <DFU_Leave+0x98>)
 8013fd6:	7d1b      	ldrb	r3, [r3, #20]
 8013fd8:	f003 0304 	and.w	r3, r3, #4
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d016      	beq.n	801400e <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2206      	movs	r2, #6
 8013fe4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	2200      	movs	r2, #0
 8013fec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 801400c:	e01f      	b.n	801404e <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	2208      	movs	r2, #8
 8014012:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2200      	movs	r2, #0
 801401a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2200      	movs	r2, #0
 8014022:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f000 f85c 	bl	80140f8 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014046:	689b      	ldr	r3, [r3, #8]
 8014048:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 801404a:	f7ff f9ab 	bl	80133a4 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 801404e:	3710      	adds	r7, #16
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}
 8014054:	20000094 	.word	0x20000094

08014058 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	4613      	mov	r3, r2
 8014064:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d101      	bne.n	8014070 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801406c:	2302      	movs	r3, #2
 801406e:	e01a      	b.n	80140a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014076:	2b00      	cmp	r3, #0
 8014078:	d003      	beq.n	8014082 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2200      	movs	r2, #0
 801407e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d003      	beq.n	8014090 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	68ba      	ldr	r2, [r7, #8]
 801408c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2201      	movs	r2, #1
 8014094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	79fa      	ldrb	r2, [r7, #7]
 801409c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f001 fb82 	bl	80157a8 <USBD_LL_Init>

  return USBD_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3710      	adds	r7, #16
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80140ae:	b480      	push	{r7}
 80140b0:	b085      	sub	sp, #20
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
 80140b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80140b8:	2300      	movs	r3, #0
 80140ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d006      	beq.n	80140d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	683a      	ldr	r2, [r7, #0]
 80140c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80140ca:	2300      	movs	r3, #0
 80140cc:	73fb      	strb	r3, [r7, #15]
 80140ce:	e001      	b.n	80140d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80140d0:	2302      	movs	r3, #2
 80140d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80140d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3714      	adds	r7, #20
 80140da:	46bd      	mov	sp, r7
 80140dc:	bc80      	pop	{r7}
 80140de:	4770      	bx	lr

080140e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f001 fba1 	bl	8015830 <USBD_LL_Start>

  return USBD_OK;
 80140ee:	2300      	movs	r3, #0
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	687a      	ldr	r2, [r7, #4]
 801410a:	6852      	ldr	r2, [r2, #4]
 801410c:	b2d2      	uxtb	r2, r2
 801410e:	4611      	mov	r1, r2
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f001 fba6 	bl	8015866 <USBD_LL_Stop>

  return USBD_OK;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801412c:	2300      	movs	r3, #0
}
 801412e:	4618      	mov	r0, r3
 8014130:	370c      	adds	r7, #12
 8014132:	46bd      	mov	sp, r7
 8014134:	bc80      	pop	{r7}
 8014136:	4770      	bx	lr

08014138 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	460b      	mov	r3, r1
 8014142:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014144:	2302      	movs	r3, #2
 8014146:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801414e:	2b00      	cmp	r3, #0
 8014150:	d00c      	beq.n	801416c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	78fa      	ldrb	r2, [r7, #3]
 801415c:	4611      	mov	r1, r2
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	4798      	blx	r3
 8014162:	4603      	mov	r3, r0
 8014164:	2b00      	cmp	r3, #0
 8014166:	d101      	bne.n	801416c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8014168:	2300      	movs	r3, #0
 801416a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801416c:	7bfb      	ldrb	r3, [r7, #15]
}
 801416e:	4618      	mov	r0, r3
 8014170:	3710      	adds	r7, #16
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}

08014176 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014176:	b580      	push	{r7, lr}
 8014178:	b082      	sub	sp, #8
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	460b      	mov	r3, r1
 8014180:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	78fa      	ldrb	r2, [r7, #3]
 801418c:	4611      	mov	r1, r2
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	4798      	blx	r3

  return USBD_OK;
 8014192:	2300      	movs	r3, #0
}
 8014194:	4618      	mov	r0, r3
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80141ac:	6839      	ldr	r1, [r7, #0]
 80141ae:	4618      	mov	r0, r3
 80141b0:	f000 ff23 	bl	8014ffa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2201      	movs	r2, #1
 80141b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80141c2:	461a      	mov	r2, r3
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80141d0:	f003 031f 	and.w	r3, r3, #31
 80141d4:	2b02      	cmp	r3, #2
 80141d6:	d016      	beq.n	8014206 <USBD_LL_SetupStage+0x6a>
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d81c      	bhi.n	8014216 <USBD_LL_SetupStage+0x7a>
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d002      	beq.n	80141e6 <USBD_LL_SetupStage+0x4a>
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d008      	beq.n	80141f6 <USBD_LL_SetupStage+0x5a>
 80141e4:	e017      	b.n	8014216 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80141ec:	4619      	mov	r1, r3
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f000 fa04 	bl	80145fc <USBD_StdDevReq>
      break;
 80141f4:	e01a      	b.n	801422c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80141fc:	4619      	mov	r1, r3
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 fa66 	bl	80146d0 <USBD_StdItfReq>
      break;
 8014204:	e012      	b.n	801422c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801420c:	4619      	mov	r1, r3
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f000 faa6 	bl	8014760 <USBD_StdEPReq>
      break;
 8014214:	e00a      	b.n	801422c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801421c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014220:	b2db      	uxtb	r3, r3
 8014222:	4619      	mov	r1, r3
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f001 fb5f 	bl	80158e8 <USBD_LL_StallEP>
      break;
 801422a:	bf00      	nop
  }

  return USBD_OK;
 801422c:	2300      	movs	r3, #0
}
 801422e:	4618      	mov	r0, r3
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}

08014236 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014236:	b580      	push	{r7, lr}
 8014238:	b086      	sub	sp, #24
 801423a:	af00      	add	r7, sp, #0
 801423c:	60f8      	str	r0, [r7, #12]
 801423e:	460b      	mov	r3, r1
 8014240:	607a      	str	r2, [r7, #4]
 8014242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8014244:	7afb      	ldrb	r3, [r7, #11]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d14b      	bne.n	80142e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014250:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014258:	2b03      	cmp	r3, #3
 801425a:	d134      	bne.n	80142c6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	68da      	ldr	r2, [r3, #12]
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	691b      	ldr	r3, [r3, #16]
 8014264:	429a      	cmp	r2, r3
 8014266:	d919      	bls.n	801429c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	68da      	ldr	r2, [r3, #12]
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	691b      	ldr	r3, [r3, #16]
 8014270:	1ad2      	subs	r2, r2, r3
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	68da      	ldr	r2, [r3, #12]
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801427e:	429a      	cmp	r2, r3
 8014280:	d203      	bcs.n	801428a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8014286:	b29b      	uxth	r3, r3
 8014288:	e002      	b.n	8014290 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801428e:	b29b      	uxth	r3, r3
 8014290:	461a      	mov	r2, r3
 8014292:	6879      	ldr	r1, [r7, #4]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 ffa2 	bl	80151de <USBD_CtlContinueRx>
 801429a:	e038      	b.n	801430e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142a2:	691b      	ldr	r3, [r3, #16]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00a      	beq.n	80142be <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80142ae:	2b03      	cmp	r3, #3
 80142b0:	d105      	bne.n	80142be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142b8:	691b      	ldr	r3, [r3, #16]
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	f000 ff9f 	bl	8015202 <USBD_CtlSendStatus>
 80142c4:	e023      	b.n	801430e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80142cc:	2b05      	cmp	r3, #5
 80142ce:	d11e      	bne.n	801430e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2200      	movs	r2, #0
 80142d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80142d8:	2100      	movs	r1, #0
 80142da:	68f8      	ldr	r0, [r7, #12]
 80142dc:	f001 fb04 	bl	80158e8 <USBD_LL_StallEP>
 80142e0:	e015      	b.n	801430e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142e8:	699b      	ldr	r3, [r3, #24]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d00d      	beq.n	801430a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80142f4:	2b03      	cmp	r3, #3
 80142f6:	d108      	bne.n	801430a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142fe:	699b      	ldr	r3, [r3, #24]
 8014300:	7afa      	ldrb	r2, [r7, #11]
 8014302:	4611      	mov	r1, r2
 8014304:	68f8      	ldr	r0, [r7, #12]
 8014306:	4798      	blx	r3
 8014308:	e001      	b.n	801430e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801430a:	2302      	movs	r3, #2
 801430c:	e000      	b.n	8014310 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801430e:	2300      	movs	r3, #0
}
 8014310:	4618      	mov	r0, r3
 8014312:	3718      	adds	r7, #24
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	460b      	mov	r3, r1
 8014322:	607a      	str	r2, [r7, #4]
 8014324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8014326:	7afb      	ldrb	r3, [r7, #11]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d17f      	bne.n	801442c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	3314      	adds	r3, #20
 8014330:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014338:	2b02      	cmp	r3, #2
 801433a:	d15c      	bne.n	80143f6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	68da      	ldr	r2, [r3, #12]
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	691b      	ldr	r3, [r3, #16]
 8014344:	429a      	cmp	r2, r3
 8014346:	d915      	bls.n	8014374 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	68da      	ldr	r2, [r3, #12]
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	691b      	ldr	r3, [r3, #16]
 8014350:	1ad2      	subs	r2, r2, r3
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	b29b      	uxth	r3, r3
 801435c:	461a      	mov	r2, r3
 801435e:	6879      	ldr	r1, [r7, #4]
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	f000 ff0c 	bl	801517e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014366:	2300      	movs	r3, #0
 8014368:	2200      	movs	r2, #0
 801436a:	2100      	movs	r1, #0
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f001 fb66 	bl	8015a3e <USBD_LL_PrepareReceive>
 8014372:	e04e      	b.n	8014412 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	689b      	ldr	r3, [r3, #8]
 8014378:	697a      	ldr	r2, [r7, #20]
 801437a:	6912      	ldr	r2, [r2, #16]
 801437c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014380:	fb01 f202 	mul.w	r2, r1, r2
 8014384:	1a9b      	subs	r3, r3, r2
 8014386:	2b00      	cmp	r3, #0
 8014388:	d11c      	bne.n	80143c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	689a      	ldr	r2, [r3, #8]
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014392:	429a      	cmp	r2, r3
 8014394:	d316      	bcc.n	80143c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	689a      	ldr	r2, [r3, #8]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d20f      	bcs.n	80143c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80143a4:	2200      	movs	r2, #0
 80143a6:	2100      	movs	r1, #0
 80143a8:	68f8      	ldr	r0, [r7, #12]
 80143aa:	f000 fee8 	bl	801517e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2200      	movs	r2, #0
 80143b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143b6:	2300      	movs	r3, #0
 80143b8:	2200      	movs	r2, #0
 80143ba:	2100      	movs	r1, #0
 80143bc:	68f8      	ldr	r0, [r7, #12]
 80143be:	f001 fb3e 	bl	8015a3e <USBD_LL_PrepareReceive>
 80143c2:	e026      	b.n	8014412 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00a      	beq.n	80143e6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143d6:	2b03      	cmp	r3, #3
 80143d8:	d105      	bne.n	80143e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143e0:	68db      	ldr	r3, [r3, #12]
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80143e6:	2180      	movs	r1, #128	; 0x80
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f001 fa7d 	bl	80158e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f000 ff1a 	bl	8015228 <USBD_CtlReceiveStatus>
 80143f4:	e00d      	b.n	8014412 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80143fc:	2b04      	cmp	r3, #4
 80143fe:	d004      	beq.n	801440a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014406:	2b00      	cmp	r3, #0
 8014408:	d103      	bne.n	8014412 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801440a:	2180      	movs	r1, #128	; 0x80
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f001 fa6b 	bl	80158e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014418:	2b01      	cmp	r3, #1
 801441a:	d11d      	bne.n	8014458 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f7ff fe81 	bl	8014124 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2200      	movs	r2, #0
 8014426:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801442a:	e015      	b.n	8014458 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014432:	695b      	ldr	r3, [r3, #20]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d00d      	beq.n	8014454 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801443e:	2b03      	cmp	r3, #3
 8014440:	d108      	bne.n	8014454 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014448:	695b      	ldr	r3, [r3, #20]
 801444a:	7afa      	ldrb	r2, [r7, #11]
 801444c:	4611      	mov	r1, r2
 801444e:	68f8      	ldr	r0, [r7, #12]
 8014450:	4798      	blx	r3
 8014452:	e001      	b.n	8014458 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014454:	2302      	movs	r3, #2
 8014456:	e000      	b.n	801445a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	3718      	adds	r7, #24
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014462:	b580      	push	{r7, lr}
 8014464:	b082      	sub	sp, #8
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801446a:	2340      	movs	r3, #64	; 0x40
 801446c:	2200      	movs	r2, #0
 801446e:	2100      	movs	r1, #0
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f001 fa13 	bl	801589c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2201      	movs	r2, #1
 801447a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2240      	movs	r2, #64	; 0x40
 8014482:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014486:	2340      	movs	r3, #64	; 0x40
 8014488:	2200      	movs	r2, #0
 801448a:	2180      	movs	r1, #128	; 0x80
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f001 fa05 	bl	801589c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2201      	movs	r2, #1
 8014496:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2240      	movs	r2, #64	; 0x40
 801449c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2201      	movs	r2, #1
 80144a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2200      	movs	r2, #0
 80144b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2200      	movs	r2, #0
 80144b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d009      	beq.n	80144da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	6852      	ldr	r2, [r2, #4]
 80144d2:	b2d2      	uxtb	r2, r2
 80144d4:	4611      	mov	r1, r2
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	4798      	blx	r3
  }

  return USBD_OK;
 80144da:	2300      	movs	r3, #0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3708      	adds	r7, #8
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	460b      	mov	r3, r1
 80144ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	78fa      	ldrb	r2, [r7, #3]
 80144f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bc80      	pop	{r7}
 8014500:	4770      	bx	lr

08014502 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014502:	b480      	push	{r7}
 8014504:	b083      	sub	sp, #12
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2204      	movs	r2, #4
 801451a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801451e:	2300      	movs	r3, #0
}
 8014520:	4618      	mov	r0, r3
 8014522:	370c      	adds	r7, #12
 8014524:	46bd      	mov	sp, r7
 8014526:	bc80      	pop	{r7}
 8014528:	4770      	bx	lr

0801452a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801452a:	b480      	push	{r7}
 801452c:	b083      	sub	sp, #12
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014538:	2b04      	cmp	r3, #4
 801453a:	d105      	bne.n	8014548 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	370c      	adds	r7, #12
 801454e:	46bd      	mov	sp, r7
 8014550:	bc80      	pop	{r7}
 8014552:	4770      	bx	lr

08014554 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014562:	2b03      	cmp	r3, #3
 8014564:	d10b      	bne.n	801457e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801456c:	69db      	ldr	r3, [r3, #28]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d005      	beq.n	801457e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014578:	69db      	ldr	r3, [r3, #28]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801457e:	2300      	movs	r3, #0
}
 8014580:	4618      	mov	r0, r3
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014588:	b480      	push	{r7}
 801458a:	b083      	sub	sp, #12
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	460b      	mov	r3, r1
 8014592:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014594:	2300      	movs	r3, #0
}
 8014596:	4618      	mov	r0, r3
 8014598:	370c      	adds	r7, #12
 801459a:	46bd      	mov	sp, r7
 801459c:	bc80      	pop	{r7}
 801459e:	4770      	bx	lr

080145a0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80145a0:	b480      	push	{r7}
 80145a2:	b083      	sub	sp, #12
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	460b      	mov	r3, r1
 80145aa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80145ac:	2300      	movs	r3, #0
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	370c      	adds	r7, #12
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bc80      	pop	{r7}
 80145b6:	4770      	bx	lr

080145b8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80145b8:	b480      	push	{r7}
 80145ba:	b083      	sub	sp, #12
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80145c0:	2300      	movs	r3, #0
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	370c      	adds	r7, #12
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bc80      	pop	{r7}
 80145ca:	4770      	bx	lr

080145cc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2201      	movs	r2, #1
 80145d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	6852      	ldr	r2, [r2, #4]
 80145e8:	b2d2      	uxtb	r2, r2
 80145ea:	4611      	mov	r1, r2
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	4798      	blx	r3

  return USBD_OK;
 80145f0:	2300      	movs	r3, #0
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3708      	adds	r7, #8
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
	...

080145fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014606:	2300      	movs	r3, #0
 8014608:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014612:	2b40      	cmp	r3, #64	; 0x40
 8014614:	d005      	beq.n	8014622 <USBD_StdDevReq+0x26>
 8014616:	2b40      	cmp	r3, #64	; 0x40
 8014618:	d84f      	bhi.n	80146ba <USBD_StdDevReq+0xbe>
 801461a:	2b00      	cmp	r3, #0
 801461c:	d009      	beq.n	8014632 <USBD_StdDevReq+0x36>
 801461e:	2b20      	cmp	r3, #32
 8014620:	d14b      	bne.n	80146ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014628:	689b      	ldr	r3, [r3, #8]
 801462a:	6839      	ldr	r1, [r7, #0]
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	4798      	blx	r3
      break;
 8014630:	e048      	b.n	80146c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	785b      	ldrb	r3, [r3, #1]
 8014636:	2b09      	cmp	r3, #9
 8014638:	d839      	bhi.n	80146ae <USBD_StdDevReq+0xb2>
 801463a:	a201      	add	r2, pc, #4	; (adr r2, 8014640 <USBD_StdDevReq+0x44>)
 801463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014640:	08014691 	.word	0x08014691
 8014644:	080146a5 	.word	0x080146a5
 8014648:	080146af 	.word	0x080146af
 801464c:	0801469b 	.word	0x0801469b
 8014650:	080146af 	.word	0x080146af
 8014654:	08014673 	.word	0x08014673
 8014658:	08014669 	.word	0x08014669
 801465c:	080146af 	.word	0x080146af
 8014660:	08014687 	.word	0x08014687
 8014664:	0801467d 	.word	0x0801467d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014668:	6839      	ldr	r1, [r7, #0]
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f000 f9dc 	bl	8014a28 <USBD_GetDescriptor>
          break;
 8014670:	e022      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014672:	6839      	ldr	r1, [r7, #0]
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f000 fb51 	bl	8014d1c <USBD_SetAddress>
          break;
 801467a:	e01d      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801467c:	6839      	ldr	r1, [r7, #0]
 801467e:	6878      	ldr	r0, [r7, #4]
 8014680:	f000 fb90 	bl	8014da4 <USBD_SetConfig>
          break;
 8014684:	e018      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014686:	6839      	ldr	r1, [r7, #0]
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f000 fc19 	bl	8014ec0 <USBD_GetConfig>
          break;
 801468e:	e013      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014690:	6839      	ldr	r1, [r7, #0]
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 fc49 	bl	8014f2a <USBD_GetStatus>
          break;
 8014698:	e00e      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 fc77 	bl	8014f90 <USBD_SetFeature>
          break;
 80146a2:	e009      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80146a4:	6839      	ldr	r1, [r7, #0]
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f000 fc86 	bl	8014fb8 <USBD_ClrFeature>
          break;
 80146ac:	e004      	b.n	80146b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80146ae:	6839      	ldr	r1, [r7, #0]
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 fcde 	bl	8015072 <USBD_CtlError>
          break;
 80146b6:	bf00      	nop
      }
      break;
 80146b8:	e004      	b.n	80146c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80146ba:	6839      	ldr	r1, [r7, #0]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 fcd8 	bl	8015072 <USBD_CtlError>
      break;
 80146c2:	bf00      	nop
  }

  return ret;
 80146c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3710      	adds	r7, #16
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop

080146d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b084      	sub	sp, #16
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80146da:	2300      	movs	r3, #0
 80146dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146e6:	2b40      	cmp	r3, #64	; 0x40
 80146e8:	d005      	beq.n	80146f6 <USBD_StdItfReq+0x26>
 80146ea:	2b40      	cmp	r3, #64	; 0x40
 80146ec:	d82e      	bhi.n	801474c <USBD_StdItfReq+0x7c>
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d001      	beq.n	80146f6 <USBD_StdItfReq+0x26>
 80146f2:	2b20      	cmp	r3, #32
 80146f4:	d12a      	bne.n	801474c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146fc:	3b01      	subs	r3, #1
 80146fe:	2b02      	cmp	r3, #2
 8014700:	d81d      	bhi.n	801473e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	889b      	ldrh	r3, [r3, #4]
 8014706:	b2db      	uxtb	r3, r3
 8014708:	2b01      	cmp	r3, #1
 801470a:	d813      	bhi.n	8014734 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014712:	689b      	ldr	r3, [r3, #8]
 8014714:	6839      	ldr	r1, [r7, #0]
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	4798      	blx	r3
 801471a:	4603      	mov	r3, r0
 801471c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	88db      	ldrh	r3, [r3, #6]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d110      	bne.n	8014748 <USBD_StdItfReq+0x78>
 8014726:	7bfb      	ldrb	r3, [r7, #15]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d10d      	bne.n	8014748 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f000 fd68 	bl	8015202 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014732:	e009      	b.n	8014748 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8014734:	6839      	ldr	r1, [r7, #0]
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 fc9b 	bl	8015072 <USBD_CtlError>
          break;
 801473c:	e004      	b.n	8014748 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f000 fc96 	bl	8015072 <USBD_CtlError>
          break;
 8014746:	e000      	b.n	801474a <USBD_StdItfReq+0x7a>
          break;
 8014748:	bf00      	nop
      }
      break;
 801474a:	e004      	b.n	8014756 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 801474c:	6839      	ldr	r1, [r7, #0]
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f000 fc8f 	bl	8015072 <USBD_CtlError>
      break;
 8014754:	bf00      	nop
  }

  return USBD_OK;
 8014756:	2300      	movs	r3, #0
}
 8014758:	4618      	mov	r0, r3
 801475a:	3710      	adds	r7, #16
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801476a:	2300      	movs	r3, #0
 801476c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	889b      	ldrh	r3, [r3, #4]
 8014772:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801477c:	2b40      	cmp	r3, #64	; 0x40
 801477e:	d007      	beq.n	8014790 <USBD_StdEPReq+0x30>
 8014780:	2b40      	cmp	r3, #64	; 0x40
 8014782:	f200 8146 	bhi.w	8014a12 <USBD_StdEPReq+0x2b2>
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00a      	beq.n	80147a0 <USBD_StdEPReq+0x40>
 801478a:	2b20      	cmp	r3, #32
 801478c:	f040 8141 	bne.w	8014a12 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	4798      	blx	r3
      break;
 801479e:	e13d      	b.n	8014a1c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147a8:	2b20      	cmp	r3, #32
 80147aa:	d10a      	bne.n	80147c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147b2:	689b      	ldr	r3, [r3, #8]
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	4798      	blx	r3
 80147ba:	4603      	mov	r3, r0
 80147bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80147be:	7bfb      	ldrb	r3, [r7, #15]
 80147c0:	e12d      	b.n	8014a1e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	785b      	ldrb	r3, [r3, #1]
 80147c6:	2b03      	cmp	r3, #3
 80147c8:	d007      	beq.n	80147da <USBD_StdEPReq+0x7a>
 80147ca:	2b03      	cmp	r3, #3
 80147cc:	f300 811b 	bgt.w	8014a06 <USBD_StdEPReq+0x2a6>
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d072      	beq.n	80148ba <USBD_StdEPReq+0x15a>
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d03a      	beq.n	801484e <USBD_StdEPReq+0xee>
 80147d8:	e115      	b.n	8014a06 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147e0:	2b02      	cmp	r3, #2
 80147e2:	d002      	beq.n	80147ea <USBD_StdEPReq+0x8a>
 80147e4:	2b03      	cmp	r3, #3
 80147e6:	d015      	beq.n	8014814 <USBD_StdEPReq+0xb4>
 80147e8:	e02b      	b.n	8014842 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147ea:	7bbb      	ldrb	r3, [r7, #14]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d00c      	beq.n	801480a <USBD_StdEPReq+0xaa>
 80147f0:	7bbb      	ldrb	r3, [r7, #14]
 80147f2:	2b80      	cmp	r3, #128	; 0x80
 80147f4:	d009      	beq.n	801480a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80147f6:	7bbb      	ldrb	r3, [r7, #14]
 80147f8:	4619      	mov	r1, r3
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f001 f874 	bl	80158e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014800:	2180      	movs	r1, #128	; 0x80
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f001 f870 	bl	80158e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014808:	e020      	b.n	801484c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801480a:	6839      	ldr	r1, [r7, #0]
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fc30 	bl	8015072 <USBD_CtlError>
              break;
 8014812:	e01b      	b.n	801484c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	885b      	ldrh	r3, [r3, #2]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d10e      	bne.n	801483a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 801481c:	7bbb      	ldrb	r3, [r7, #14]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d00b      	beq.n	801483a <USBD_StdEPReq+0xda>
 8014822:	7bbb      	ldrb	r3, [r7, #14]
 8014824:	2b80      	cmp	r3, #128	; 0x80
 8014826:	d008      	beq.n	801483a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	88db      	ldrh	r3, [r3, #6]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d104      	bne.n	801483a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014830:	7bbb      	ldrb	r3, [r7, #14]
 8014832:	4619      	mov	r1, r3
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f001 f857 	bl	80158e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f000 fce1 	bl	8015202 <USBD_CtlSendStatus>

              break;
 8014840:	e004      	b.n	801484c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8014842:	6839      	ldr	r1, [r7, #0]
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f000 fc14 	bl	8015072 <USBD_CtlError>
              break;
 801484a:	bf00      	nop
          }
          break;
 801484c:	e0e0      	b.n	8014a10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014854:	2b02      	cmp	r3, #2
 8014856:	d002      	beq.n	801485e <USBD_StdEPReq+0xfe>
 8014858:	2b03      	cmp	r3, #3
 801485a:	d015      	beq.n	8014888 <USBD_StdEPReq+0x128>
 801485c:	e026      	b.n	80148ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801485e:	7bbb      	ldrb	r3, [r7, #14]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d00c      	beq.n	801487e <USBD_StdEPReq+0x11e>
 8014864:	7bbb      	ldrb	r3, [r7, #14]
 8014866:	2b80      	cmp	r3, #128	; 0x80
 8014868:	d009      	beq.n	801487e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801486a:	7bbb      	ldrb	r3, [r7, #14]
 801486c:	4619      	mov	r1, r3
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f001 f83a 	bl	80158e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014874:	2180      	movs	r1, #128	; 0x80
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f001 f836 	bl	80158e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801487c:	e01c      	b.n	80148b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801487e:	6839      	ldr	r1, [r7, #0]
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 fbf6 	bl	8015072 <USBD_CtlError>
              break;
 8014886:	e017      	b.n	80148b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	885b      	ldrh	r3, [r3, #2]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d112      	bne.n	80148b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014890:	7bbb      	ldrb	r3, [r7, #14]
 8014892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014896:	2b00      	cmp	r3, #0
 8014898:	d004      	beq.n	80148a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801489a:	7bbb      	ldrb	r3, [r7, #14]
 801489c:	4619      	mov	r1, r3
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f001 f841 	bl	8015926 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f000 fcac 	bl	8015202 <USBD_CtlSendStatus>
              }
              break;
 80148aa:	e004      	b.n	80148b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 fbdf 	bl	8015072 <USBD_CtlError>
              break;
 80148b4:	e000      	b.n	80148b8 <USBD_StdEPReq+0x158>
              break;
 80148b6:	bf00      	nop
          }
          break;
 80148b8:	e0aa      	b.n	8014a10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148c0:	2b02      	cmp	r3, #2
 80148c2:	d002      	beq.n	80148ca <USBD_StdEPReq+0x16a>
 80148c4:	2b03      	cmp	r3, #3
 80148c6:	d032      	beq.n	801492e <USBD_StdEPReq+0x1ce>
 80148c8:	e097      	b.n	80149fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148ca:	7bbb      	ldrb	r3, [r7, #14]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d007      	beq.n	80148e0 <USBD_StdEPReq+0x180>
 80148d0:	7bbb      	ldrb	r3, [r7, #14]
 80148d2:	2b80      	cmp	r3, #128	; 0x80
 80148d4:	d004      	beq.n	80148e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80148d6:	6839      	ldr	r1, [r7, #0]
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f000 fbca 	bl	8015072 <USBD_CtlError>
                break;
 80148de:	e091      	b.n	8014a04 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	da0b      	bge.n	8014900 <USBD_StdEPReq+0x1a0>
 80148e8:	7bbb      	ldrb	r3, [r7, #14]
 80148ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80148ee:	4613      	mov	r3, r2
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	4413      	add	r3, r2
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	3310      	adds	r3, #16
 80148f8:	687a      	ldr	r2, [r7, #4]
 80148fa:	4413      	add	r3, r2
 80148fc:	3304      	adds	r3, #4
 80148fe:	e00b      	b.n	8014918 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014900:	7bbb      	ldrb	r3, [r7, #14]
 8014902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014906:	4613      	mov	r3, r2
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	4413      	add	r3, r2
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	4413      	add	r3, r2
 8014916:	3304      	adds	r3, #4
 8014918:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	2200      	movs	r2, #0
 801491e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	2202      	movs	r2, #2
 8014924:	4619      	mov	r1, r3
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 fc0d 	bl	8015146 <USBD_CtlSendData>
              break;
 801492c:	e06a      	b.n	8014a04 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801492e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014932:	2b00      	cmp	r3, #0
 8014934:	da11      	bge.n	801495a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014936:	7bbb      	ldrb	r3, [r7, #14]
 8014938:	f003 020f 	and.w	r2, r3, #15
 801493c:	6879      	ldr	r1, [r7, #4]
 801493e:	4613      	mov	r3, r2
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	4413      	add	r3, r2
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	440b      	add	r3, r1
 8014948:	3318      	adds	r3, #24
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d117      	bne.n	8014980 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014950:	6839      	ldr	r1, [r7, #0]
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 fb8d 	bl	8015072 <USBD_CtlError>
                  break;
 8014958:	e054      	b.n	8014a04 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801495a:	7bbb      	ldrb	r3, [r7, #14]
 801495c:	f003 020f 	and.w	r2, r3, #15
 8014960:	6879      	ldr	r1, [r7, #4]
 8014962:	4613      	mov	r3, r2
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	4413      	add	r3, r2
 8014968:	009b      	lsls	r3, r3, #2
 801496a:	440b      	add	r3, r1
 801496c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d104      	bne.n	8014980 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014976:	6839      	ldr	r1, [r7, #0]
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 fb7a 	bl	8015072 <USBD_CtlError>
                  break;
 801497e:	e041      	b.n	8014a04 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014984:	2b00      	cmp	r3, #0
 8014986:	da0b      	bge.n	80149a0 <USBD_StdEPReq+0x240>
 8014988:	7bbb      	ldrb	r3, [r7, #14]
 801498a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801498e:	4613      	mov	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	4413      	add	r3, r2
 8014994:	009b      	lsls	r3, r3, #2
 8014996:	3310      	adds	r3, #16
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	4413      	add	r3, r2
 801499c:	3304      	adds	r3, #4
 801499e:	e00b      	b.n	80149b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149a0:	7bbb      	ldrb	r3, [r7, #14]
 80149a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149a6:	4613      	mov	r3, r2
 80149a8:	009b      	lsls	r3, r3, #2
 80149aa:	4413      	add	r3, r2
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	4413      	add	r3, r2
 80149b6:	3304      	adds	r3, #4
 80149b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80149ba:	7bbb      	ldrb	r3, [r7, #14]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d002      	beq.n	80149c6 <USBD_StdEPReq+0x266>
 80149c0:	7bbb      	ldrb	r3, [r7, #14]
 80149c2:	2b80      	cmp	r3, #128	; 0x80
 80149c4:	d103      	bne.n	80149ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	2200      	movs	r2, #0
 80149ca:	601a      	str	r2, [r3, #0]
 80149cc:	e00e      	b.n	80149ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80149ce:	7bbb      	ldrb	r3, [r7, #14]
 80149d0:	4619      	mov	r1, r3
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 ffc6 	bl	8015964 <USBD_LL_IsStallEP>
 80149d8:	4603      	mov	r3, r0
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d003      	beq.n	80149e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	2201      	movs	r2, #1
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	e002      	b.n	80149ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	2202      	movs	r2, #2
 80149f0:	4619      	mov	r1, r3
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 fba7 	bl	8015146 <USBD_CtlSendData>
              break;
 80149f8:	e004      	b.n	8014a04 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80149fa:	6839      	ldr	r1, [r7, #0]
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f000 fb38 	bl	8015072 <USBD_CtlError>
              break;
 8014a02:	bf00      	nop
          }
          break;
 8014a04:	e004      	b.n	8014a10 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8014a06:	6839      	ldr	r1, [r7, #0]
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f000 fb32 	bl	8015072 <USBD_CtlError>
          break;
 8014a0e:	bf00      	nop
      }
      break;
 8014a10:	e004      	b.n	8014a1c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8014a12:	6839      	ldr	r1, [r7, #0]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 fb2c 	bl	8015072 <USBD_CtlError>
      break;
 8014a1a:	bf00      	nop
  }

  return ret;
 8014a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3710      	adds	r7, #16
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
	...

08014a28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a32:	2300      	movs	r3, #0
 8014a34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	885b      	ldrh	r3, [r3, #2]
 8014a42:	0a1b      	lsrs	r3, r3, #8
 8014a44:	b29b      	uxth	r3, r3
 8014a46:	3b01      	subs	r3, #1
 8014a48:	2b06      	cmp	r3, #6
 8014a4a:	f200 813b 	bhi.w	8014cc4 <USBD_GetDescriptor+0x29c>
 8014a4e:	a201      	add	r2, pc, #4	; (adr r2, 8014a54 <USBD_GetDescriptor+0x2c>)
 8014a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a54:	08014a71 	.word	0x08014a71
 8014a58:	08014a89 	.word	0x08014a89
 8014a5c:	08014ac9 	.word	0x08014ac9
 8014a60:	08014cc5 	.word	0x08014cc5
 8014a64:	08014cc5 	.word	0x08014cc5
 8014a68:	08014c65 	.word	0x08014c65
 8014a6c:	08014c91 	.word	0x08014c91
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	7c12      	ldrb	r2, [r2, #16]
 8014a7c:	f107 0108 	add.w	r1, r7, #8
 8014a80:	4610      	mov	r0, r2
 8014a82:	4798      	blx	r3
 8014a84:	60f8      	str	r0, [r7, #12]
      break;
 8014a86:	e125      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	7c1b      	ldrb	r3, [r3, #16]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d10d      	bne.n	8014aac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a98:	f107 0208 	add.w	r2, r7, #8
 8014a9c:	4610      	mov	r0, r2
 8014a9e:	4798      	blx	r3
 8014aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	2202      	movs	r2, #2
 8014aa8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014aaa:	e113      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ab4:	f107 0208 	add.w	r2, r7, #8
 8014ab8:	4610      	mov	r0, r2
 8014aba:	4798      	blx	r3
 8014abc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	2202      	movs	r2, #2
 8014ac4:	701a      	strb	r2, [r3, #0]
      break;
 8014ac6:	e105      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	885b      	ldrh	r3, [r3, #2]
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	2b05      	cmp	r3, #5
 8014ad0:	f200 80ac 	bhi.w	8014c2c <USBD_GetDescriptor+0x204>
 8014ad4:	a201      	add	r2, pc, #4	; (adr r2, 8014adc <USBD_GetDescriptor+0xb4>)
 8014ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ada:	bf00      	nop
 8014adc:	08014af5 	.word	0x08014af5
 8014ae0:	08014b29 	.word	0x08014b29
 8014ae4:	08014b5d 	.word	0x08014b5d
 8014ae8:	08014b91 	.word	0x08014b91
 8014aec:	08014bc5 	.word	0x08014bc5
 8014af0:	08014bf9 	.word	0x08014bf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00b      	beq.n	8014b18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	7c12      	ldrb	r2, [r2, #16]
 8014b0c:	f107 0108 	add.w	r1, r7, #8
 8014b10:	4610      	mov	r0, r2
 8014b12:	4798      	blx	r3
 8014b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b16:	e0a4      	b.n	8014c62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014b18:	6839      	ldr	r1, [r7, #0]
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 faa9 	bl	8015072 <USBD_CtlError>
            err++;
 8014b20:	7afb      	ldrb	r3, [r7, #11]
 8014b22:	3301      	adds	r3, #1
 8014b24:	72fb      	strb	r3, [r7, #11]
          break;
 8014b26:	e09c      	b.n	8014c62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d00b      	beq.n	8014b4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	7c12      	ldrb	r2, [r2, #16]
 8014b40:	f107 0108 	add.w	r1, r7, #8
 8014b44:	4610      	mov	r0, r2
 8014b46:	4798      	blx	r3
 8014b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b4a:	e08a      	b.n	8014c62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014b4c:	6839      	ldr	r1, [r7, #0]
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 fa8f 	bl	8015072 <USBD_CtlError>
            err++;
 8014b54:	7afb      	ldrb	r3, [r7, #11]
 8014b56:	3301      	adds	r3, #1
 8014b58:	72fb      	strb	r3, [r7, #11]
          break;
 8014b5a:	e082      	b.n	8014c62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00b      	beq.n	8014b80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b6e:	68db      	ldr	r3, [r3, #12]
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	7c12      	ldrb	r2, [r2, #16]
 8014b74:	f107 0108 	add.w	r1, r7, #8
 8014b78:	4610      	mov	r0, r2
 8014b7a:	4798      	blx	r3
 8014b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b7e:	e070      	b.n	8014c62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014b80:	6839      	ldr	r1, [r7, #0]
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 fa75 	bl	8015072 <USBD_CtlError>
            err++;
 8014b88:	7afb      	ldrb	r3, [r7, #11]
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b8e:	e068      	b.n	8014c62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b96:	691b      	ldr	r3, [r3, #16]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d00b      	beq.n	8014bb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ba2:	691b      	ldr	r3, [r3, #16]
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	7c12      	ldrb	r2, [r2, #16]
 8014ba8:	f107 0108 	add.w	r1, r7, #8
 8014bac:	4610      	mov	r0, r2
 8014bae:	4798      	blx	r3
 8014bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bb2:	e056      	b.n	8014c62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014bb4:	6839      	ldr	r1, [r7, #0]
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 fa5b 	bl	8015072 <USBD_CtlError>
            err++;
 8014bbc:	7afb      	ldrb	r3, [r7, #11]
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8014bc2:	e04e      	b.n	8014c62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014bca:	695b      	ldr	r3, [r3, #20]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d00b      	beq.n	8014be8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014bd6:	695b      	ldr	r3, [r3, #20]
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	7c12      	ldrb	r2, [r2, #16]
 8014bdc:	f107 0108 	add.w	r1, r7, #8
 8014be0:	4610      	mov	r0, r2
 8014be2:	4798      	blx	r3
 8014be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014be6:	e03c      	b.n	8014c62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014be8:	6839      	ldr	r1, [r7, #0]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f000 fa41 	bl	8015072 <USBD_CtlError>
            err++;
 8014bf0:	7afb      	ldrb	r3, [r7, #11]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8014bf6:	e034      	b.n	8014c62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014bfe:	699b      	ldr	r3, [r3, #24]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d00b      	beq.n	8014c1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014c0a:	699b      	ldr	r3, [r3, #24]
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	7c12      	ldrb	r2, [r2, #16]
 8014c10:	f107 0108 	add.w	r1, r7, #8
 8014c14:	4610      	mov	r0, r2
 8014c16:	4798      	blx	r3
 8014c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c1a:	e022      	b.n	8014c62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014c1c:	6839      	ldr	r1, [r7, #0]
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f000 fa27 	bl	8015072 <USBD_CtlError>
            err++;
 8014c24:	7afb      	ldrb	r3, [r7, #11]
 8014c26:	3301      	adds	r3, #1
 8014c28:	72fb      	strb	r3, [r7, #11]
          break;
 8014c2a:	e01a      	b.n	8014c62 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00c      	beq.n	8014c52 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c40:	683a      	ldr	r2, [r7, #0]
 8014c42:	8852      	ldrh	r2, [r2, #2]
 8014c44:	b2d1      	uxtb	r1, r2
 8014c46:	f107 0208 	add.w	r2, r7, #8
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	4798      	blx	r3
 8014c4e:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c50:	e006      	b.n	8014c60 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8014c52:	6839      	ldr	r1, [r7, #0]
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f000 fa0c 	bl	8015072 <USBD_CtlError>
            err++;
 8014c5a:	7afb      	ldrb	r3, [r7, #11]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	72fb      	strb	r3, [r7, #11]
          break;
 8014c60:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 8014c62:	e037      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	7c1b      	ldrb	r3, [r3, #16]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d109      	bne.n	8014c80 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c74:	f107 0208 	add.w	r2, r7, #8
 8014c78:	4610      	mov	r0, r2
 8014c7a:	4798      	blx	r3
 8014c7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c7e:	e029      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8014c80:	6839      	ldr	r1, [r7, #0]
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f000 f9f5 	bl	8015072 <USBD_CtlError>
        err++;
 8014c88:	7afb      	ldrb	r3, [r7, #11]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	72fb      	strb	r3, [r7, #11]
      break;
 8014c8e:	e021      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	7c1b      	ldrb	r3, [r3, #16]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d10d      	bne.n	8014cb4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ca0:	f107 0208 	add.w	r2, r7, #8
 8014ca4:	4610      	mov	r0, r2
 8014ca6:	4798      	blx	r3
 8014ca8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	3301      	adds	r3, #1
 8014cae:	2207      	movs	r2, #7
 8014cb0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014cb2:	e00f      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 f9db 	bl	8015072 <USBD_CtlError>
        err++;
 8014cbc:	7afb      	ldrb	r3, [r7, #11]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	72fb      	strb	r3, [r7, #11]
      break;
 8014cc2:	e007      	b.n	8014cd4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8014cc4:	6839      	ldr	r1, [r7, #0]
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f000 f9d3 	bl	8015072 <USBD_CtlError>
      err++;
 8014ccc:	7afb      	ldrb	r3, [r7, #11]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8014cd2:	bf00      	nop
  }

  if (err != 0U)
 8014cd4:	7afb      	ldrb	r3, [r7, #11]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d11c      	bne.n	8014d14 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014cda:	893b      	ldrh	r3, [r7, #8]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d011      	beq.n	8014d04 <USBD_GetDescriptor+0x2dc>
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	88db      	ldrh	r3, [r3, #6]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00d      	beq.n	8014d04 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	88da      	ldrh	r2, [r3, #6]
 8014cec:	893b      	ldrh	r3, [r7, #8]
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	bf28      	it	cs
 8014cf2:	4613      	movcs	r3, r2
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014cf8:	893b      	ldrh	r3, [r7, #8]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	68f9      	ldr	r1, [r7, #12]
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 fa21 	bl	8015146 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	88db      	ldrh	r3, [r3, #6]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d104      	bne.n	8014d16 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f000 fa78 	bl	8015202 <USBD_CtlSendStatus>
 8014d12:	e000      	b.n	8014d16 <USBD_GetDescriptor+0x2ee>
    return;
 8014d14:	bf00      	nop
    }
  }
}
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	889b      	ldrh	r3, [r3, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d130      	bne.n	8014d90 <USBD_SetAddress+0x74>
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	88db      	ldrh	r3, [r3, #6]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d12c      	bne.n	8014d90 <USBD_SetAddress+0x74>
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	885b      	ldrh	r3, [r3, #2]
 8014d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8014d3c:	d828      	bhi.n	8014d90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	885b      	ldrh	r3, [r3, #2]
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d50:	2b03      	cmp	r3, #3
 8014d52:	d104      	bne.n	8014d5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014d54:	6839      	ldr	r1, [r7, #0]
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 f98b 	bl	8015072 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d5c:	e01d      	b.n	8014d9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	7bfa      	ldrb	r2, [r7, #15]
 8014d62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014d66:	7bfb      	ldrb	r3, [r7, #15]
 8014d68:	4619      	mov	r1, r3
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 fe25 	bl	80159ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f000 fa46 	bl	8015202 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014d76:	7bfb      	ldrb	r3, [r7, #15]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d004      	beq.n	8014d86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2202      	movs	r2, #2
 8014d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d84:	e009      	b.n	8014d9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d8e:	e004      	b.n	8014d9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014d90:	6839      	ldr	r1, [r7, #0]
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f000 f96d 	bl	8015072 <USBD_CtlError>
  }
}
 8014d98:	bf00      	nop
 8014d9a:	bf00      	nop
 8014d9c:	3710      	adds	r7, #16
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
	...

08014da4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	885b      	ldrh	r3, [r3, #2]
 8014db2:	b2da      	uxtb	r2, r3
 8014db4:	4b41      	ldr	r3, [pc, #260]	; (8014ebc <USBD_SetConfig+0x118>)
 8014db6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014db8:	4b40      	ldr	r3, [pc, #256]	; (8014ebc <USBD_SetConfig+0x118>)
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d904      	bls.n	8014dca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8014dc0:	6839      	ldr	r1, [r7, #0]
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 f955 	bl	8015072 <USBD_CtlError>
 8014dc8:	e075      	b.n	8014eb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dd0:	2b02      	cmp	r3, #2
 8014dd2:	d002      	beq.n	8014dda <USBD_SetConfig+0x36>
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	d023      	beq.n	8014e20 <USBD_SetConfig+0x7c>
 8014dd8:	e062      	b.n	8014ea0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014dda:	4b38      	ldr	r3, [pc, #224]	; (8014ebc <USBD_SetConfig+0x118>)
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d01a      	beq.n	8014e18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8014de2:	4b36      	ldr	r3, [pc, #216]	; (8014ebc <USBD_SetConfig+0x118>)
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2203      	movs	r2, #3
 8014df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014df4:	4b31      	ldr	r3, [pc, #196]	; (8014ebc <USBD_SetConfig+0x118>)
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	4619      	mov	r1, r3
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f7ff f99c 	bl	8014138 <USBD_SetClassConfig>
 8014e00:	4603      	mov	r3, r0
 8014e02:	2b02      	cmp	r3, #2
 8014e04:	d104      	bne.n	8014e10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8014e06:	6839      	ldr	r1, [r7, #0]
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f000 f932 	bl	8015072 <USBD_CtlError>
            return;
 8014e0e:	e052      	b.n	8014eb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f000 f9f6 	bl	8015202 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014e16:	e04e      	b.n	8014eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 f9f2 	bl	8015202 <USBD_CtlSendStatus>
        break;
 8014e1e:	e04a      	b.n	8014eb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014e20:	4b26      	ldr	r3, [pc, #152]	; (8014ebc <USBD_SetConfig+0x118>)
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d112      	bne.n	8014e4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2202      	movs	r2, #2
 8014e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8014e30:	4b22      	ldr	r3, [pc, #136]	; (8014ebc <USBD_SetConfig+0x118>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	461a      	mov	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014e3a:	4b20      	ldr	r3, [pc, #128]	; (8014ebc <USBD_SetConfig+0x118>)
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	4619      	mov	r1, r3
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7ff f998 	bl	8014176 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f000 f9db 	bl	8015202 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014e4c:	e033      	b.n	8014eb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014e4e:	4b1b      	ldr	r3, [pc, #108]	; (8014ebc <USBD_SetConfig+0x118>)
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	685b      	ldr	r3, [r3, #4]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d01d      	beq.n	8014e98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	685b      	ldr	r3, [r3, #4]
 8014e60:	b2db      	uxtb	r3, r3
 8014e62:	4619      	mov	r1, r3
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7ff f986 	bl	8014176 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014e6a:	4b14      	ldr	r3, [pc, #80]	; (8014ebc <USBD_SetConfig+0x118>)
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	461a      	mov	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014e74:	4b11      	ldr	r3, [pc, #68]	; (8014ebc <USBD_SetConfig+0x118>)
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7ff f95c 	bl	8014138 <USBD_SetClassConfig>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b02      	cmp	r3, #2
 8014e84:	d104      	bne.n	8014e90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8014e86:	6839      	ldr	r1, [r7, #0]
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f000 f8f2 	bl	8015072 <USBD_CtlError>
            return;
 8014e8e:	e012      	b.n	8014eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f000 f9b6 	bl	8015202 <USBD_CtlSendStatus>
        break;
 8014e96:	e00e      	b.n	8014eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 f9b2 	bl	8015202 <USBD_CtlSendStatus>
        break;
 8014e9e:	e00a      	b.n	8014eb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014ea0:	6839      	ldr	r1, [r7, #0]
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f000 f8e5 	bl	8015072 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014ea8:	4b04      	ldr	r3, [pc, #16]	; (8014ebc <USBD_SetConfig+0x118>)
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	4619      	mov	r1, r3
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7ff f961 	bl	8014176 <USBD_ClrClassConfig>
        break;
 8014eb4:	bf00      	nop
    }
  }
}
 8014eb6:	3708      	adds	r7, #8
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}
 8014ebc:	20000487 	.word	0x20000487

08014ec0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	88db      	ldrh	r3, [r3, #6]
 8014ece:	2b01      	cmp	r3, #1
 8014ed0:	d004      	beq.n	8014edc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014ed2:	6839      	ldr	r1, [r7, #0]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f000 f8cc 	bl	8015072 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014eda:	e022      	b.n	8014f22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ee2:	2b02      	cmp	r3, #2
 8014ee4:	dc02      	bgt.n	8014eec <USBD_GetConfig+0x2c>
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	dc03      	bgt.n	8014ef2 <USBD_GetConfig+0x32>
 8014eea:	e015      	b.n	8014f18 <USBD_GetConfig+0x58>
 8014eec:	2b03      	cmp	r3, #3
 8014eee:	d00b      	beq.n	8014f08 <USBD_GetConfig+0x48>
 8014ef0:	e012      	b.n	8014f18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3308      	adds	r3, #8
 8014efc:	2201      	movs	r2, #1
 8014efe:	4619      	mov	r1, r3
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f000 f920 	bl	8015146 <USBD_CtlSendData>
        break;
 8014f06:	e00c      	b.n	8014f22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	3304      	adds	r3, #4
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	4619      	mov	r1, r3
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 f918 	bl	8015146 <USBD_CtlSendData>
        break;
 8014f16:	e004      	b.n	8014f22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014f18:	6839      	ldr	r1, [r7, #0]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f000 f8a9 	bl	8015072 <USBD_CtlError>
        break;
 8014f20:	bf00      	nop
}
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}

08014f2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f2a:	b580      	push	{r7, lr}
 8014f2c:	b082      	sub	sp, #8
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
 8014f32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f3a:	3b01      	subs	r3, #1
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	d81e      	bhi.n	8014f7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	88db      	ldrh	r3, [r3, #6]
 8014f44:	2b02      	cmp	r3, #2
 8014f46:	d004      	beq.n	8014f52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014f48:	6839      	ldr	r1, [r7, #0]
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f000 f891 	bl	8015072 <USBD_CtlError>
        break;
 8014f50:	e01a      	b.n	8014f88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2201      	movs	r2, #1
 8014f56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d005      	beq.n	8014f6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	f043 0202 	orr.w	r2, r3, #2
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	330c      	adds	r3, #12
 8014f72:	2202      	movs	r2, #2
 8014f74:	4619      	mov	r1, r3
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f000 f8e5 	bl	8015146 <USBD_CtlSendData>
      break;
 8014f7c:	e004      	b.n	8014f88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014f7e:	6839      	ldr	r1, [r7, #0]
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f000 f876 	bl	8015072 <USBD_CtlError>
      break;
 8014f86:	bf00      	nop
  }
}
 8014f88:	bf00      	nop
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}

08014f90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	885b      	ldrh	r3, [r3, #2]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d106      	bne.n	8014fb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f000 f929 	bl	8015202 <USBD_CtlSendStatus>
  }
}
 8014fb0:	bf00      	nop
 8014fb2:	3708      	adds	r7, #8
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}

08014fb8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fc8:	3b01      	subs	r3, #1
 8014fca:	2b02      	cmp	r3, #2
 8014fcc:	d80b      	bhi.n	8014fe6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	885b      	ldrh	r3, [r3, #2]
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d10c      	bne.n	8014ff0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 f90f 	bl	8015202 <USBD_CtlSendStatus>
      }
      break;
 8014fe4:	e004      	b.n	8014ff0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014fe6:	6839      	ldr	r1, [r7, #0]
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 f842 	bl	8015072 <USBD_CtlError>
      break;
 8014fee:	e000      	b.n	8014ff2 <USBD_ClrFeature+0x3a>
      break;
 8014ff0:	bf00      	nop
  }
}
 8014ff2:	bf00      	nop
 8014ff4:	3708      	adds	r7, #8
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	b083      	sub	sp, #12
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
 8015002:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	781a      	ldrb	r2, [r3, #0]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	785a      	ldrb	r2, [r3, #1]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	3302      	adds	r3, #2
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	b29a      	uxth	r2, r3
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	3303      	adds	r3, #3
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	b29b      	uxth	r3, r3
 8015024:	021b      	lsls	r3, r3, #8
 8015026:	b29b      	uxth	r3, r3
 8015028:	4413      	add	r3, r2
 801502a:	b29a      	uxth	r2, r3
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	3304      	adds	r3, #4
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	b29a      	uxth	r2, r3
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	3305      	adds	r3, #5
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	b29b      	uxth	r3, r3
 8015040:	021b      	lsls	r3, r3, #8
 8015042:	b29b      	uxth	r3, r3
 8015044:	4413      	add	r3, r2
 8015046:	b29a      	uxth	r2, r3
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	3306      	adds	r3, #6
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	b29a      	uxth	r2, r3
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	3307      	adds	r3, #7
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	b29b      	uxth	r3, r3
 801505c:	021b      	lsls	r3, r3, #8
 801505e:	b29b      	uxth	r3, r3
 8015060:	4413      	add	r3, r2
 8015062:	b29a      	uxth	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	80da      	strh	r2, [r3, #6]

}
 8015068:	bf00      	nop
 801506a:	370c      	adds	r7, #12
 801506c:	46bd      	mov	sp, r7
 801506e:	bc80      	pop	{r7}
 8015070:	4770      	bx	lr

08015072 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8015072:	b580      	push	{r7, lr}
 8015074:	b082      	sub	sp, #8
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
 801507a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801507c:	2180      	movs	r1, #128	; 0x80
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f000 fc32 	bl	80158e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8015084:	2100      	movs	r1, #0
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 fc2e 	bl	80158e8 <USBD_LL_StallEP>
}
 801508c:	bf00      	nop
 801508e:	3708      	adds	r7, #8
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b086      	sub	sp, #24
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80150a0:	2300      	movs	r3, #0
 80150a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d032      	beq.n	8015110 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80150aa:	68f8      	ldr	r0, [r7, #12]
 80150ac:	f000 f834 	bl	8015118 <USBD_GetLen>
 80150b0:	4603      	mov	r3, r0
 80150b2:	3301      	adds	r3, #1
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	005b      	lsls	r3, r3, #1
 80150b8:	b29a      	uxth	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80150be:	7dfb      	ldrb	r3, [r7, #23]
 80150c0:	1c5a      	adds	r2, r3, #1
 80150c2:	75fa      	strb	r2, [r7, #23]
 80150c4:	461a      	mov	r2, r3
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	4413      	add	r3, r2
 80150ca:	687a      	ldr	r2, [r7, #4]
 80150cc:	7812      	ldrb	r2, [r2, #0]
 80150ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80150d0:	7dfb      	ldrb	r3, [r7, #23]
 80150d2:	1c5a      	adds	r2, r3, #1
 80150d4:	75fa      	strb	r2, [r7, #23]
 80150d6:	461a      	mov	r2, r3
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	4413      	add	r3, r2
 80150dc:	2203      	movs	r2, #3
 80150de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80150e0:	e012      	b.n	8015108 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	1c5a      	adds	r2, r3, #1
 80150e6:	60fa      	str	r2, [r7, #12]
 80150e8:	7dfa      	ldrb	r2, [r7, #23]
 80150ea:	1c51      	adds	r1, r2, #1
 80150ec:	75f9      	strb	r1, [r7, #23]
 80150ee:	4611      	mov	r1, r2
 80150f0:	68ba      	ldr	r2, [r7, #8]
 80150f2:	440a      	add	r2, r1
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80150f8:	7dfb      	ldrb	r3, [r7, #23]
 80150fa:	1c5a      	adds	r2, r3, #1
 80150fc:	75fa      	strb	r2, [r7, #23]
 80150fe:	461a      	mov	r2, r3
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	4413      	add	r3, r2
 8015104:	2200      	movs	r2, #0
 8015106:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1e8      	bne.n	80150e2 <USBD_GetString+0x4e>
    }
  }
}
 8015110:	bf00      	nop
 8015112:	3718      	adds	r7, #24
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015118:	b480      	push	{r7}
 801511a:	b085      	sub	sp, #20
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015120:	2300      	movs	r3, #0
 8015122:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8015124:	e005      	b.n	8015132 <USBD_GetLen+0x1a>
  {
    len++;
 8015126:	7bfb      	ldrb	r3, [r7, #15]
 8015128:	3301      	adds	r3, #1
 801512a:	73fb      	strb	r3, [r7, #15]
    buf++;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	3301      	adds	r3, #1
 8015130:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d1f5      	bne.n	8015126 <USBD_GetLen+0xe>
  }

  return len;
 801513a:	7bfb      	ldrb	r3, [r7, #15]
}
 801513c:	4618      	mov	r0, r3
 801513e:	3714      	adds	r7, #20
 8015140:	46bd      	mov	sp, r7
 8015142:	bc80      	pop	{r7}
 8015144:	4770      	bx	lr

08015146 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8015146:	b580      	push	{r7, lr}
 8015148:	b084      	sub	sp, #16
 801514a:	af00      	add	r7, sp, #0
 801514c:	60f8      	str	r0, [r7, #12]
 801514e:	60b9      	str	r1, [r7, #8]
 8015150:	4613      	mov	r3, r2
 8015152:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2202      	movs	r2, #2
 8015158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801515c:	88fa      	ldrh	r2, [r7, #6]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8015162:	88fa      	ldrh	r2, [r7, #6]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015168:	88fb      	ldrh	r3, [r7, #6]
 801516a:	68ba      	ldr	r2, [r7, #8]
 801516c:	2100      	movs	r1, #0
 801516e:	68f8      	ldr	r0, [r7, #12]
 8015170:	f000 fc42 	bl	80159f8 <USBD_LL_Transmit>

  return USBD_OK;
 8015174:	2300      	movs	r3, #0
}
 8015176:	4618      	mov	r0, r3
 8015178:	3710      	adds	r7, #16
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801517e:	b580      	push	{r7, lr}
 8015180:	b084      	sub	sp, #16
 8015182:	af00      	add	r7, sp, #0
 8015184:	60f8      	str	r0, [r7, #12]
 8015186:	60b9      	str	r1, [r7, #8]
 8015188:	4613      	mov	r3, r2
 801518a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801518c:	88fb      	ldrh	r3, [r7, #6]
 801518e:	68ba      	ldr	r2, [r7, #8]
 8015190:	2100      	movs	r1, #0
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	f000 fc30 	bl	80159f8 <USBD_LL_Transmit>

  return USBD_OK;
 8015198:	2300      	movs	r3, #0
}
 801519a:	4618      	mov	r0, r3
 801519c:	3710      	adds	r7, #16
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b084      	sub	sp, #16
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	60f8      	str	r0, [r7, #12]
 80151aa:	60b9      	str	r1, [r7, #8]
 80151ac:	4613      	mov	r3, r2
 80151ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2203      	movs	r2, #3
 80151b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80151b8:	88fa      	ldrh	r2, [r7, #6]
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80151c0:	88fa      	ldrh	r2, [r7, #6]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80151c8:	88fb      	ldrh	r3, [r7, #6]
 80151ca:	68ba      	ldr	r2, [r7, #8]
 80151cc:	2100      	movs	r1, #0
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f000 fc35 	bl	8015a3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80151d4:	2300      	movs	r3, #0
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3710      	adds	r7, #16
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b084      	sub	sp, #16
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	60f8      	str	r0, [r7, #12]
 80151e6:	60b9      	str	r1, [r7, #8]
 80151e8:	4613      	mov	r3, r2
 80151ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80151ec:	88fb      	ldrh	r3, [r7, #6]
 80151ee:	68ba      	ldr	r2, [r7, #8]
 80151f0:	2100      	movs	r1, #0
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	f000 fc23 	bl	8015a3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3710      	adds	r7, #16
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}

08015202 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015202:	b580      	push	{r7, lr}
 8015204:	b082      	sub	sp, #8
 8015206:	af00      	add	r7, sp, #0
 8015208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2204      	movs	r2, #4
 801520e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015212:	2300      	movs	r3, #0
 8015214:	2200      	movs	r2, #0
 8015216:	2100      	movs	r1, #0
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f000 fbed 	bl	80159f8 <USBD_LL_Transmit>

  return USBD_OK;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2205      	movs	r2, #5
 8015234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015238:	2300      	movs	r3, #0
 801523a:	2200      	movs	r2, #0
 801523c:	2100      	movs	r1, #0
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f000 fbfd 	bl	8015a3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3708      	adds	r7, #8
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
	...

08015250 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015254:	2200      	movs	r2, #0
 8015256:	4912      	ldr	r1, [pc, #72]	; (80152a0 <MX_USB_DEVICE_Init+0x50>)
 8015258:	4812      	ldr	r0, [pc, #72]	; (80152a4 <MX_USB_DEVICE_Init+0x54>)
 801525a:	f7fe fefd 	bl	8014058 <USBD_Init>
 801525e:	4603      	mov	r3, r0
 8015260:	2b00      	cmp	r3, #0
 8015262:	d001      	beq.n	8015268 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015264:	f7ec f800 	bl	8001268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8015268:	490f      	ldr	r1, [pc, #60]	; (80152a8 <MX_USB_DEVICE_Init+0x58>)
 801526a:	480e      	ldr	r0, [pc, #56]	; (80152a4 <MX_USB_DEVICE_Init+0x54>)
 801526c:	f7fe ff1f 	bl	80140ae <USBD_RegisterClass>
 8015270:	4603      	mov	r3, r0
 8015272:	2b00      	cmp	r3, #0
 8015274:	d001      	beq.n	801527a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015276:	f7eb fff7 	bl	8001268 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 801527a:	490c      	ldr	r1, [pc, #48]	; (80152ac <MX_USB_DEVICE_Init+0x5c>)
 801527c:	4809      	ldr	r0, [pc, #36]	; (80152a4 <MX_USB_DEVICE_Init+0x54>)
 801527e:	f7fe fb87 	bl	8013990 <USBD_DFU_RegisterMedia>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d001      	beq.n	801528c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015288:	f7eb ffee 	bl	8001268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801528c:	4805      	ldr	r0, [pc, #20]	; (80152a4 <MX_USB_DEVICE_Init+0x54>)
 801528e:	f7fe ff27 	bl	80140e0 <USBD_Start>
 8015292:	4603      	mov	r3, r0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d001      	beq.n	801529c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015298:	f7eb ffe6 	bl	8001268 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801529c:	bf00      	nop
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	200000bc 	.word	0x200000bc
 80152a4:	20000488 	.word	0x20000488
 80152a8:	20000058 	.word	0x20000058
 80152ac:	2000010c 	.word	0x2000010c

080152b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	6039      	str	r1, [r7, #0]
 80152ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	2212      	movs	r2, #18
 80152c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152c2:	4b03      	ldr	r3, [pc, #12]	; (80152d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bc80      	pop	{r7}
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	200000d8 	.word	0x200000d8

080152d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	4603      	mov	r3, r0
 80152dc:	6039      	str	r1, [r7, #0]
 80152de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	2204      	movs	r2, #4
 80152e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152e6:	4b03      	ldr	r3, [pc, #12]	; (80152f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bc80      	pop	{r7}
 80152f0:	4770      	bx	lr
 80152f2:	bf00      	nop
 80152f4:	200000ec 	.word	0x200000ec

080152f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4603      	mov	r3, r0
 8015300:	6039      	str	r1, [r7, #0]
 8015302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015304:	79fb      	ldrb	r3, [r7, #7]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d105      	bne.n	8015316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801530a:	683a      	ldr	r2, [r7, #0]
 801530c:	4907      	ldr	r1, [pc, #28]	; (801532c <USBD_FS_ProductStrDescriptor+0x34>)
 801530e:	4808      	ldr	r0, [pc, #32]	; (8015330 <USBD_FS_ProductStrDescriptor+0x38>)
 8015310:	f7ff fec0 	bl	8015094 <USBD_GetString>
 8015314:	e004      	b.n	8015320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015316:	683a      	ldr	r2, [r7, #0]
 8015318:	4904      	ldr	r1, [pc, #16]	; (801532c <USBD_FS_ProductStrDescriptor+0x34>)
 801531a:	4805      	ldr	r0, [pc, #20]	; (8015330 <USBD_FS_ProductStrDescriptor+0x38>)
 801531c:	f7ff feba 	bl	8015094 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015320:	4b02      	ldr	r3, [pc, #8]	; (801532c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015322:	4618      	mov	r0, r3
 8015324:	3708      	adds	r7, #8
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	2000074c 	.word	0x2000074c
 8015330:	08017404 	.word	0x08017404

08015334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	4603      	mov	r3, r0
 801533c:	6039      	str	r1, [r7, #0]
 801533e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015340:	683a      	ldr	r2, [r7, #0]
 8015342:	4904      	ldr	r1, [pc, #16]	; (8015354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015344:	4804      	ldr	r0, [pc, #16]	; (8015358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015346:	f7ff fea5 	bl	8015094 <USBD_GetString>
  return USBD_StrDesc;
 801534a:	4b02      	ldr	r3, [pc, #8]	; (8015354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801534c:	4618      	mov	r0, r3
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	2000074c 	.word	0x2000074c
 8015358:	08017424 	.word	0x08017424

0801535c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	4603      	mov	r3, r0
 8015364:	6039      	str	r1, [r7, #0]
 8015366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	221a      	movs	r2, #26
 801536c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801536e:	f000 f843 	bl	80153f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015372:	4b02      	ldr	r3, [pc, #8]	; (801537c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015374:	4618      	mov	r0, r3
 8015376:	3708      	adds	r7, #8
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}
 801537c:	200000f0 	.word	0x200000f0

08015380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	4603      	mov	r3, r0
 8015388:	6039      	str	r1, [r7, #0]
 801538a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801538c:	79fb      	ldrb	r3, [r7, #7]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d105      	bne.n	801539e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	4907      	ldr	r1, [pc, #28]	; (80153b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015396:	4808      	ldr	r0, [pc, #32]	; (80153b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015398:	f7ff fe7c 	bl	8015094 <USBD_GetString>
 801539c:	e004      	b.n	80153a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801539e:	683a      	ldr	r2, [r7, #0]
 80153a0:	4904      	ldr	r1, [pc, #16]	; (80153b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153a2:	4805      	ldr	r0, [pc, #20]	; (80153b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80153a4:	f7ff fe76 	bl	8015094 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153a8:	4b02      	ldr	r3, [pc, #8]	; (80153b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	2000074c 	.word	0x2000074c
 80153b8:	08017438 	.word	0x08017438

080153bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	4603      	mov	r3, r0
 80153c4:	6039      	str	r1, [r7, #0]
 80153c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153c8:	79fb      	ldrb	r3, [r7, #7]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d105      	bne.n	80153da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153ce:	683a      	ldr	r2, [r7, #0]
 80153d0:	4907      	ldr	r1, [pc, #28]	; (80153f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153d2:	4808      	ldr	r0, [pc, #32]	; (80153f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153d4:	f7ff fe5e 	bl	8015094 <USBD_GetString>
 80153d8:	e004      	b.n	80153e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153da:	683a      	ldr	r2, [r7, #0]
 80153dc:	4904      	ldr	r1, [pc, #16]	; (80153f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153de:	4805      	ldr	r0, [pc, #20]	; (80153f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153e0:	f7ff fe58 	bl	8015094 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153e4:	4b02      	ldr	r3, [pc, #8]	; (80153f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	2000074c 	.word	0x2000074c
 80153f4:	08017444 	.word	0x08017444

080153f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153fe:	4b0f      	ldr	r3, [pc, #60]	; (801543c <Get_SerialNum+0x44>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015404:	4b0e      	ldr	r3, [pc, #56]	; (8015440 <Get_SerialNum+0x48>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801540a:	4b0e      	ldr	r3, [pc, #56]	; (8015444 <Get_SerialNum+0x4c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015410:	68fa      	ldr	r2, [r7, #12]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4413      	add	r3, r2
 8015416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d009      	beq.n	8015432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801541e:	2208      	movs	r2, #8
 8015420:	4909      	ldr	r1, [pc, #36]	; (8015448 <Get_SerialNum+0x50>)
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f000 f814 	bl	8015450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015428:	2204      	movs	r2, #4
 801542a:	4908      	ldr	r1, [pc, #32]	; (801544c <Get_SerialNum+0x54>)
 801542c:	68b8      	ldr	r0, [r7, #8]
 801542e:	f000 f80f 	bl	8015450 <IntToUnicode>
  }
}
 8015432:	bf00      	nop
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	1ffff7e8 	.word	0x1ffff7e8
 8015440:	1ffff7ec 	.word	0x1ffff7ec
 8015444:	1ffff7f0 	.word	0x1ffff7f0
 8015448:	200000f2 	.word	0x200000f2
 801544c:	20000102 	.word	0x20000102

08015450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015450:	b480      	push	{r7}
 8015452:	b087      	sub	sp, #28
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	4613      	mov	r3, r2
 801545c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801545e:	2300      	movs	r3, #0
 8015460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015462:	2300      	movs	r3, #0
 8015464:	75fb      	strb	r3, [r7, #23]
 8015466:	e027      	b.n	80154b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	0f1b      	lsrs	r3, r3, #28
 801546c:	2b09      	cmp	r3, #9
 801546e:	d80b      	bhi.n	8015488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	0f1b      	lsrs	r3, r3, #28
 8015474:	b2da      	uxtb	r2, r3
 8015476:	7dfb      	ldrb	r3, [r7, #23]
 8015478:	005b      	lsls	r3, r3, #1
 801547a:	4619      	mov	r1, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	440b      	add	r3, r1
 8015480:	3230      	adds	r2, #48	; 0x30
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	e00a      	b.n	801549e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	0f1b      	lsrs	r3, r3, #28
 801548c:	b2da      	uxtb	r2, r3
 801548e:	7dfb      	ldrb	r3, [r7, #23]
 8015490:	005b      	lsls	r3, r3, #1
 8015492:	4619      	mov	r1, r3
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	440b      	add	r3, r1
 8015498:	3237      	adds	r2, #55	; 0x37
 801549a:	b2d2      	uxtb	r2, r2
 801549c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	011b      	lsls	r3, r3, #4
 80154a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80154a4:	7dfb      	ldrb	r3, [r7, #23]
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	3301      	adds	r3, #1
 80154aa:	68ba      	ldr	r2, [r7, #8]
 80154ac:	4413      	add	r3, r2
 80154ae:	2200      	movs	r2, #0
 80154b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	3301      	adds	r3, #1
 80154b6:	75fb      	strb	r3, [r7, #23]
 80154b8:	7dfa      	ldrb	r2, [r7, #23]
 80154ba:	79fb      	ldrb	r3, [r7, #7]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d3d3      	bcc.n	8015468 <IntToUnicode+0x18>
  }
}
 80154c0:	bf00      	nop
 80154c2:	bf00      	nop
 80154c4:	371c      	adds	r7, #28
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bc80      	pop	{r7}
 80154ca:	4770      	bx	lr

080154cc <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80154cc:	b480      	push	{r7}
 80154ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80154d0:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bc80      	pop	{r7}
 80154d8:	4770      	bx	lr

080154da <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80154da:	b480      	push	{r7}
 80154dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80154de:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bc80      	pop	{r7}
 80154e6:	4770      	bx	lr

080154e8 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80154e8:	b480      	push	{r7}
 80154ea:	b083      	sub	sp, #12
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80154f0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	370c      	adds	r7, #12
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bc80      	pop	{r7}
 80154fa:	4770      	bx	lr

080154fc <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b085      	sub	sp, #20
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8015508:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801550a:	4618      	mov	r0, r3
 801550c:	3714      	adds	r7, #20
 801550e:	46bd      	mov	sp, r7
 8015510:	bc80      	pop	{r7}
 8015512:	4770      	bx	lr

08015514 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8015514:	b480      	push	{r7}
 8015516:	b085      	sub	sp, #20
 8015518:	af00      	add	r7, sp, #0
 801551a:	60f8      	str	r0, [r7, #12]
 801551c:	60b9      	str	r1, [r7, #8]
 801551e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8015520:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015522:	4618      	mov	r0, r3
 8015524:	3714      	adds	r7, #20
 8015526:	46bd      	mov	sp, r7
 8015528:	bc80      	pop	{r7}
 801552a:	4770      	bx	lr

0801552c <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	460b      	mov	r3, r1
 8015536:	607a      	str	r2, [r7, #4]
 8015538:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 801553a:	7afb      	ldrb	r3, [r7, #11]
 801553c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 801553e:	bf00      	nop
  }
  return (USBD_OK);
 8015540:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015542:	4618      	mov	r0, r3
 8015544:	3714      	adds	r7, #20
 8015546:	46bd      	mov	sp, r7
 8015548:	bc80      	pop	{r7}
 801554a:	4770      	bx	lr

0801554c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b088      	sub	sp, #32
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015554:	f107 0310 	add.w	r3, r7, #16
 8015558:	2200      	movs	r2, #0
 801555a:	601a      	str	r2, [r3, #0]
 801555c:	605a      	str	r2, [r3, #4]
 801555e:	609a      	str	r2, [r3, #8]
 8015560:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801556a:	d12c      	bne.n	80155c6 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801556c:	4b18      	ldr	r3, [pc, #96]	; (80155d0 <HAL_PCD_MspInit+0x84>)
 801556e:	699b      	ldr	r3, [r3, #24]
 8015570:	4a17      	ldr	r2, [pc, #92]	; (80155d0 <HAL_PCD_MspInit+0x84>)
 8015572:	f043 0304 	orr.w	r3, r3, #4
 8015576:	6193      	str	r3, [r2, #24]
 8015578:	4b15      	ldr	r3, [pc, #84]	; (80155d0 <HAL_PCD_MspInit+0x84>)
 801557a:	699b      	ldr	r3, [r3, #24]
 801557c:	f003 0304 	and.w	r3, r3, #4
 8015580:	60fb      	str	r3, [r7, #12]
 8015582:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801558a:	2300      	movs	r3, #0
 801558c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801558e:	2300      	movs	r3, #0
 8015590:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015592:	f107 0310 	add.w	r3, r7, #16
 8015596:	4619      	mov	r1, r3
 8015598:	480e      	ldr	r0, [pc, #56]	; (80155d4 <HAL_PCD_MspInit+0x88>)
 801559a:	f7ee fba3 	bl	8003ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801559e:	4b0c      	ldr	r3, [pc, #48]	; (80155d0 <HAL_PCD_MspInit+0x84>)
 80155a0:	695b      	ldr	r3, [r3, #20]
 80155a2:	4a0b      	ldr	r2, [pc, #44]	; (80155d0 <HAL_PCD_MspInit+0x84>)
 80155a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80155a8:	6153      	str	r3, [r2, #20]
 80155aa:	4b09      	ldr	r3, [pc, #36]	; (80155d0 <HAL_PCD_MspInit+0x84>)
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80155b2:	60bb      	str	r3, [r7, #8]
 80155b4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80155b6:	2200      	movs	r2, #0
 80155b8:	2100      	movs	r1, #0
 80155ba:	2043      	movs	r0, #67	; 0x43
 80155bc:	f7ee f8a9 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80155c0:	2043      	movs	r0, #67	; 0x43
 80155c2:	f7ee f8c2 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80155c6:	bf00      	nop
 80155c8:	3720      	adds	r7, #32
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	40021000 	.word	0x40021000
 80155d4:	40010800 	.word	0x40010800

080155d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80155ec:	4619      	mov	r1, r3
 80155ee:	4610      	mov	r0, r2
 80155f0:	f7fe fdd4 	bl	801419c <USBD_LL_SetupStage>
}
 80155f4:	bf00      	nop
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	460b      	mov	r3, r1
 8015606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 801560e:	78fa      	ldrb	r2, [r7, #3]
 8015610:	6879      	ldr	r1, [r7, #4]
 8015612:	4613      	mov	r3, r2
 8015614:	00db      	lsls	r3, r3, #3
 8015616:	1a9b      	subs	r3, r3, r2
 8015618:	009b      	lsls	r3, r3, #2
 801561a:	440b      	add	r3, r1
 801561c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	78fb      	ldrb	r3, [r7, #3]
 8015624:	4619      	mov	r1, r3
 8015626:	f7fe fe06 	bl	8014236 <USBD_LL_DataOutStage>
}
 801562a:	bf00      	nop
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}

08015632 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b082      	sub	sp, #8
 8015636:	af00      	add	r7, sp, #0
 8015638:	6078      	str	r0, [r7, #4]
 801563a:	460b      	mov	r3, r1
 801563c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8015644:	78fa      	ldrb	r2, [r7, #3]
 8015646:	6879      	ldr	r1, [r7, #4]
 8015648:	4613      	mov	r3, r2
 801564a:	00db      	lsls	r3, r3, #3
 801564c:	1a9b      	subs	r3, r3, r2
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	440b      	add	r3, r1
 8015652:	3348      	adds	r3, #72	; 0x48
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	78fb      	ldrb	r3, [r7, #3]
 8015658:	4619      	mov	r1, r3
 801565a:	f7fe fe5d 	bl	8014318 <USBD_LL_DataInStage>
}
 801565e:	bf00      	nop
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8015674:	4618      	mov	r0, r3
 8015676:	f7fe ff6d 	bl	8014554 <USBD_LL_SOF>
}
 801567a:	bf00      	nop
 801567c:	3708      	adds	r7, #8
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}

08015682 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015682:	b580      	push	{r7, lr}
 8015684:	b084      	sub	sp, #16
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801568a:	2301      	movs	r3, #1
 801568c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	2b02      	cmp	r3, #2
 8015694:	d001      	beq.n	801569a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015696:	f7eb fde7 	bl	8001268 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80156a0:	7bfa      	ldrb	r2, [r7, #15]
 80156a2:	4611      	mov	r1, r2
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7fe ff1d 	bl	80144e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7fe fed6 	bl	8014462 <USBD_LL_Reset>
}
 80156b6:	bf00      	nop
 80156b8:	3710      	adds	r7, #16
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
	...

080156c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fe ff17 	bl	8014502 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	6812      	ldr	r2, [r2, #0]
 80156e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80156e6:	f043 0301 	orr.w	r3, r3, #1
 80156ea:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6a1b      	ldr	r3, [r3, #32]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d005      	beq.n	8015700 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156f4:	4b04      	ldr	r3, [pc, #16]	; (8015708 <HAL_PCD_SuspendCallback+0x48>)
 80156f6:	691b      	ldr	r3, [r3, #16]
 80156f8:	4a03      	ldr	r2, [pc, #12]	; (8015708 <HAL_PCD_SuspendCallback+0x48>)
 80156fa:	f043 0306 	orr.w	r3, r3, #6
 80156fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015700:	bf00      	nop
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	e000ed00 	.word	0xe000ed00

0801570c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801571a:	4618      	mov	r0, r3
 801571c:	f7fe ff05 	bl	801452a <USBD_LL_Resume>
}
 8015720:	bf00      	nop
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801573a:	78fa      	ldrb	r2, [r7, #3]
 801573c:	4611      	mov	r1, r2
 801573e:	4618      	mov	r0, r3
 8015740:	f7fe ff2e 	bl	80145a0 <USBD_LL_IsoOUTIncomplete>
}
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	460b      	mov	r3, r1
 8015756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801575e:	78fa      	ldrb	r2, [r7, #3]
 8015760:	4611      	mov	r1, r2
 8015762:	4618      	mov	r0, r3
 8015764:	f7fe ff10 	bl	8014588 <USBD_LL_IsoINIncomplete>
}
 8015768:	bf00      	nop
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801577e:	4618      	mov	r0, r3
 8015780:	f7fe ff1a 	bl	80145b8 <USBD_LL_DevConnected>
}
 8015784:	bf00      	nop
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801579a:	4618      	mov	r0, r3
 801579c:	f7fe ff16 	bl	80145cc <USBD_LL_DevDisconnected>
}
 80157a0:	bf00      	nop
 80157a2:	3708      	adds	r7, #8
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	781b      	ldrb	r3, [r3, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d133      	bne.n	8015820 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80157b8:	4a1c      	ldr	r2, [pc, #112]	; (801582c <USBD_LL_Init+0x84>)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	4a1a      	ldr	r2, [pc, #104]	; (801582c <USBD_LL_Init+0x84>)
 80157c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80157c8:	4b18      	ldr	r3, [pc, #96]	; (801582c <USBD_LL_Init+0x84>)
 80157ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80157ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80157d0:	4b16      	ldr	r3, [pc, #88]	; (801582c <USBD_LL_Init+0x84>)
 80157d2:	2204      	movs	r2, #4
 80157d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80157d6:	4b15      	ldr	r3, [pc, #84]	; (801582c <USBD_LL_Init+0x84>)
 80157d8:	2202      	movs	r2, #2
 80157da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80157dc:	4b13      	ldr	r3, [pc, #76]	; (801582c <USBD_LL_Init+0x84>)
 80157de:	2202      	movs	r2, #2
 80157e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80157e2:	4b12      	ldr	r3, [pc, #72]	; (801582c <USBD_LL_Init+0x84>)
 80157e4:	2200      	movs	r2, #0
 80157e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80157e8:	4b10      	ldr	r3, [pc, #64]	; (801582c <USBD_LL_Init+0x84>)
 80157ea:	2200      	movs	r2, #0
 80157ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80157ee:	4b0f      	ldr	r3, [pc, #60]	; (801582c <USBD_LL_Init+0x84>)
 80157f0:	2201      	movs	r2, #1
 80157f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80157f4:	480d      	ldr	r0, [pc, #52]	; (801582c <USBD_LL_Init+0x84>)
 80157f6:	f7ee fc11 	bl	800401c <HAL_PCD_Init>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d001      	beq.n	8015804 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015800:	f7eb fd32 	bl	8001268 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015804:	2180      	movs	r1, #128	; 0x80
 8015806:	4809      	ldr	r0, [pc, #36]	; (801582c <USBD_LL_Init+0x84>)
 8015808:	f7ef fbe8 	bl	8004fdc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801580c:	2240      	movs	r2, #64	; 0x40
 801580e:	2100      	movs	r1, #0
 8015810:	4806      	ldr	r0, [pc, #24]	; (801582c <USBD_LL_Init+0x84>)
 8015812:	f7ef fb9d 	bl	8004f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015816:	2280      	movs	r2, #128	; 0x80
 8015818:	2101      	movs	r1, #1
 801581a:	4804      	ldr	r0, [pc, #16]	; (801582c <USBD_LL_Init+0x84>)
 801581c:	f7ef fb98 	bl	8004f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015820:	2300      	movs	r3, #0
}
 8015822:	4618      	mov	r0, r3
 8015824:	3708      	adds	r7, #8
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop
 801582c:	2000094c 	.word	0x2000094c

08015830 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015838:	2300      	movs	r3, #0
 801583a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801583c:	2300      	movs	r3, #0
 801583e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015846:	4618      	mov	r0, r3
 8015848:	f7ee fd05 	bl	8004256 <HAL_PCD_Start>
 801584c:	4603      	mov	r3, r0
 801584e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015850:	7bfb      	ldrb	r3, [r7, #15]
 8015852:	4618      	mov	r0, r3
 8015854:	f000 f92c 	bl	8015ab0 <USBD_Get_USB_Status>
 8015858:	4603      	mov	r3, r0
 801585a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801585c:	7bbb      	ldrb	r3, [r7, #14]
}
 801585e:	4618      	mov	r0, r3
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b084      	sub	sp, #16
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801586e:	2300      	movs	r3, #0
 8015870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015872:	2300      	movs	r3, #0
 8015874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801587c:	4618      	mov	r0, r3
 801587e:	f7ee fd0c 	bl	800429a <HAL_PCD_Stop>
 8015882:	4603      	mov	r3, r0
 8015884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015886:	7bfb      	ldrb	r3, [r7, #15]
 8015888:	4618      	mov	r0, r3
 801588a:	f000 f911 	bl	8015ab0 <USBD_Get_USB_Status>
 801588e:	4603      	mov	r3, r0
 8015890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015892:	7bbb      	ldrb	r3, [r7, #14]
}
 8015894:	4618      	mov	r0, r3
 8015896:	3710      	adds	r7, #16
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}

0801589c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b084      	sub	sp, #16
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
 80158a4:	4608      	mov	r0, r1
 80158a6:	4611      	mov	r1, r2
 80158a8:	461a      	mov	r2, r3
 80158aa:	4603      	mov	r3, r0
 80158ac:	70fb      	strb	r3, [r7, #3]
 80158ae:	460b      	mov	r3, r1
 80158b0:	70bb      	strb	r3, [r7, #2]
 80158b2:	4613      	mov	r3, r2
 80158b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158b6:	2300      	movs	r3, #0
 80158b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158ba:	2300      	movs	r3, #0
 80158bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80158c4:	78bb      	ldrb	r3, [r7, #2]
 80158c6:	883a      	ldrh	r2, [r7, #0]
 80158c8:	78f9      	ldrb	r1, [r7, #3]
 80158ca:	f7ef f89c 	bl	8004a06 <HAL_PCD_EP_Open>
 80158ce:	4603      	mov	r3, r0
 80158d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158d2:	7bfb      	ldrb	r3, [r7, #15]
 80158d4:	4618      	mov	r0, r3
 80158d6:	f000 f8eb 	bl	8015ab0 <USBD_Get_USB_Status>
 80158da:	4603      	mov	r3, r0
 80158dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158de:	7bbb      	ldrb	r3, [r7, #14]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	460b      	mov	r3, r1
 80158f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158f4:	2300      	movs	r3, #0
 80158f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158f8:	2300      	movs	r3, #0
 80158fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015902:	78fa      	ldrb	r2, [r7, #3]
 8015904:	4611      	mov	r1, r2
 8015906:	4618      	mov	r0, r3
 8015908:	f7ef f960 	bl	8004bcc <HAL_PCD_EP_SetStall>
 801590c:	4603      	mov	r3, r0
 801590e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015910:	7bfb      	ldrb	r3, [r7, #15]
 8015912:	4618      	mov	r0, r3
 8015914:	f000 f8cc 	bl	8015ab0 <USBD_Get_USB_Status>
 8015918:	4603      	mov	r3, r0
 801591a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801591c:	7bbb      	ldrb	r3, [r7, #14]
}
 801591e:	4618      	mov	r0, r3
 8015920:	3710      	adds	r7, #16
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}

08015926 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015926:	b580      	push	{r7, lr}
 8015928:	b084      	sub	sp, #16
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
 801592e:	460b      	mov	r3, r1
 8015930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015936:	2300      	movs	r3, #0
 8015938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015940:	78fa      	ldrb	r2, [r7, #3]
 8015942:	4611      	mov	r1, r2
 8015944:	4618      	mov	r0, r3
 8015946:	f7ef f9a3 	bl	8004c90 <HAL_PCD_EP_ClrStall>
 801594a:	4603      	mov	r3, r0
 801594c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801594e:	7bfb      	ldrb	r3, [r7, #15]
 8015950:	4618      	mov	r0, r3
 8015952:	f000 f8ad 	bl	8015ab0 <USBD_Get_USB_Status>
 8015956:	4603      	mov	r3, r0
 8015958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801595a:	7bbb      	ldrb	r3, [r7, #14]
}
 801595c:	4618      	mov	r0, r3
 801595e:	3710      	adds	r7, #16
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015964:	b480      	push	{r7}
 8015966:	b085      	sub	sp, #20
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	460b      	mov	r3, r1
 801596e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801597c:	2b00      	cmp	r3, #0
 801597e:	da0b      	bge.n	8015998 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015980:	78fb      	ldrb	r3, [r7, #3]
 8015982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015986:	68f9      	ldr	r1, [r7, #12]
 8015988:	4613      	mov	r3, r2
 801598a:	00db      	lsls	r3, r3, #3
 801598c:	1a9b      	subs	r3, r3, r2
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	440b      	add	r3, r1
 8015992:	333e      	adds	r3, #62	; 0x3e
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	e00b      	b.n	80159b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015998:	78fb      	ldrb	r3, [r7, #3]
 801599a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801599e:	68f9      	ldr	r1, [r7, #12]
 80159a0:	4613      	mov	r3, r2
 80159a2:	00db      	lsls	r3, r3, #3
 80159a4:	1a9b      	subs	r3, r3, r2
 80159a6:	009b      	lsls	r3, r3, #2
 80159a8:	440b      	add	r3, r1
 80159aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80159ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3714      	adds	r7, #20
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bc80      	pop	{r7}
 80159b8:	4770      	bx	lr

080159ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b084      	sub	sp, #16
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
 80159c2:	460b      	mov	r3, r1
 80159c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159c6:	2300      	movs	r3, #0
 80159c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ca:	2300      	movs	r3, #0
 80159cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80159d4:	78fa      	ldrb	r2, [r7, #3]
 80159d6:	4611      	mov	r1, r2
 80159d8:	4618      	mov	r0, r3
 80159da:	f7ee ffef 	bl	80049bc <HAL_PCD_SetAddress>
 80159de:	4603      	mov	r3, r0
 80159e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159e2:	7bfb      	ldrb	r3, [r7, #15]
 80159e4:	4618      	mov	r0, r3
 80159e6:	f000 f863 	bl	8015ab0 <USBD_Get_USB_Status>
 80159ea:	4603      	mov	r3, r0
 80159ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3710      	adds	r7, #16
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b086      	sub	sp, #24
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	607a      	str	r2, [r7, #4]
 8015a02:	461a      	mov	r2, r3
 8015a04:	460b      	mov	r3, r1
 8015a06:	72fb      	strb	r3, [r7, #11]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a10:	2300      	movs	r3, #0
 8015a12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015a1a:	893b      	ldrh	r3, [r7, #8]
 8015a1c:	7af9      	ldrb	r1, [r7, #11]
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	f7ef f897 	bl	8004b52 <HAL_PCD_EP_Transmit>
 8015a24:	4603      	mov	r3, r0
 8015a26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a28:	7dfb      	ldrb	r3, [r7, #23]
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f000 f840 	bl	8015ab0 <USBD_Get_USB_Status>
 8015a30:	4603      	mov	r3, r0
 8015a32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a34:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3718      	adds	r7, #24
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}

08015a3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015a3e:	b580      	push	{r7, lr}
 8015a40:	b086      	sub	sp, #24
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	60f8      	str	r0, [r7, #12]
 8015a46:	607a      	str	r2, [r7, #4]
 8015a48:	461a      	mov	r2, r3
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	72fb      	strb	r3, [r7, #11]
 8015a4e:	4613      	mov	r3, r2
 8015a50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a52:	2300      	movs	r3, #0
 8015a54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a56:	2300      	movs	r3, #0
 8015a58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015a60:	893b      	ldrh	r3, [r7, #8]
 8015a62:	7af9      	ldrb	r1, [r7, #11]
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	f7ef f836 	bl	8004ad6 <HAL_PCD_EP_Receive>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f000 f81d 	bl	8015ab0 <USBD_Get_USB_Status>
 8015a76:	4603      	mov	r3, r0
 8015a78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3718      	adds	r7, #24
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}

08015a84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b083      	sub	sp, #12
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015a8c:	4b02      	ldr	r3, [pc, #8]	; (8015a98 <USBD_static_malloc+0x14>)
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	370c      	adds	r7, #12
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bc80      	pop	{r7}
 8015a96:	4770      	bx	lr
 8015a98:	20000d4c 	.word	0x20000d4c

08015a9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]

}
 8015aa4:	bf00      	nop
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bc80      	pop	{r7}
 8015aac:	4770      	bx	lr
	...

08015ab0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aba:	2300      	movs	r3, #0
 8015abc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015abe:	79fb      	ldrb	r3, [r7, #7]
 8015ac0:	2b03      	cmp	r3, #3
 8015ac2:	d817      	bhi.n	8015af4 <USBD_Get_USB_Status+0x44>
 8015ac4:	a201      	add	r2, pc, #4	; (adr r2, 8015acc <USBD_Get_USB_Status+0x1c>)
 8015ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aca:	bf00      	nop
 8015acc:	08015add 	.word	0x08015add
 8015ad0:	08015ae3 	.word	0x08015ae3
 8015ad4:	08015ae9 	.word	0x08015ae9
 8015ad8:	08015aef 	.word	0x08015aef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015adc:	2300      	movs	r3, #0
 8015ade:	73fb      	strb	r3, [r7, #15]
    break;
 8015ae0:	e00b      	b.n	8015afa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ae2:	2302      	movs	r3, #2
 8015ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ae6:	e008      	b.n	8015afa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ae8:	2301      	movs	r3, #1
 8015aea:	73fb      	strb	r3, [r7, #15]
    break;
 8015aec:	e005      	b.n	8015afa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015aee:	2302      	movs	r3, #2
 8015af0:	73fb      	strb	r3, [r7, #15]
    break;
 8015af2:	e002      	b.n	8015afa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015af4:	2302      	movs	r3, #2
 8015af6:	73fb      	strb	r3, [r7, #15]
    break;
 8015af8:	bf00      	nop
  }
  return usb_status;
 8015afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3714      	adds	r7, #20
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bc80      	pop	{r7}
 8015b04:	4770      	bx	lr
 8015b06:	bf00      	nop

08015b08 <_ZdlPvj>:
 8015b08:	f000 b81c 	b.w	8015b44 <_ZdlPv>

08015b0c <_Znwj>:
 8015b0c:	2801      	cmp	r0, #1
 8015b0e:	bf38      	it	cc
 8015b10:	2001      	movcc	r0, #1
 8015b12:	b510      	push	{r4, lr}
 8015b14:	4604      	mov	r4, r0
 8015b16:	4620      	mov	r0, r4
 8015b18:	f000 f964 	bl	8015de4 <malloc>
 8015b1c:	b930      	cbnz	r0, 8015b2c <_Znwj+0x20>
 8015b1e:	f000 f825 	bl	8015b6c <_ZSt15get_new_handlerv>
 8015b22:	b908      	cbnz	r0, 8015b28 <_Znwj+0x1c>
 8015b24:	f000 f92c 	bl	8015d80 <abort>
 8015b28:	4780      	blx	r0
 8015b2a:	e7f4      	b.n	8015b16 <_Znwj+0xa>
 8015b2c:	bd10      	pop	{r4, pc}

08015b2e <_Znaj>:
 8015b2e:	f7ff bfed 	b.w	8015b0c <_Znwj>

08015b32 <__cxa_pure_virtual>:
 8015b32:	b508      	push	{r3, lr}
 8015b34:	f000 f814 	bl	8015b60 <_ZSt9terminatev>

08015b38 <_ZSt17__throw_bad_allocv>:
 8015b38:	b508      	push	{r3, lr}
 8015b3a:	f000 f921 	bl	8015d80 <abort>

08015b3e <_ZSt20__throw_length_errorPKc>:
 8015b3e:	b508      	push	{r3, lr}
 8015b40:	f000 f91e 	bl	8015d80 <abort>

08015b44 <_ZdlPv>:
 8015b44:	f000 b956 	b.w	8015df4 <free>

08015b48 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015b48:	b508      	push	{r3, lr}
 8015b4a:	4780      	blx	r0
 8015b4c:	f000 f918 	bl	8015d80 <abort>

08015b50 <_ZSt13get_terminatev>:
 8015b50:	4b02      	ldr	r3, [pc, #8]	; (8015b5c <_ZSt13get_terminatev+0xc>)
 8015b52:	6818      	ldr	r0, [r3, #0]
 8015b54:	f3bf 8f5b 	dmb	ish
 8015b58:	4770      	bx	lr
 8015b5a:	bf00      	nop
 8015b5c:	20000128 	.word	0x20000128

08015b60 <_ZSt9terminatev>:
 8015b60:	b508      	push	{r3, lr}
 8015b62:	f7ff fff5 	bl	8015b50 <_ZSt13get_terminatev>
 8015b66:	f7ff ffef 	bl	8015b48 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08015b6c <_ZSt15get_new_handlerv>:
 8015b6c:	4b02      	ldr	r3, [pc, #8]	; (8015b78 <_ZSt15get_new_handlerv+0xc>)
 8015b6e:	6818      	ldr	r0, [r3, #0]
 8015b70:	f3bf 8f5b 	dmb	ish
 8015b74:	4770      	bx	lr
 8015b76:	bf00      	nop
 8015b78:	2000116c 	.word	0x2000116c
 8015b7c:	00000000 	.word	0x00000000

08015b80 <ceil>:
 8015b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8015b88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8015b8c:	2e13      	cmp	r6, #19
 8015b8e:	4602      	mov	r2, r0
 8015b90:	460b      	mov	r3, r1
 8015b92:	4607      	mov	r7, r0
 8015b94:	460c      	mov	r4, r1
 8015b96:	4605      	mov	r5, r0
 8015b98:	dc31      	bgt.n	8015bfe <ceil+0x7e>
 8015b9a:	2e00      	cmp	r6, #0
 8015b9c:	da12      	bge.n	8015bc4 <ceil+0x44>
 8015b9e:	a334      	add	r3, pc, #208	; (adr r3, 8015c70 <ceil+0xf0>)
 8015ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba4:	f7ea fb58 	bl	8000258 <__adddf3>
 8015ba8:	2200      	movs	r2, #0
 8015baa:	2300      	movs	r3, #0
 8015bac:	f7ea ff9a 	bl	8000ae4 <__aeabi_dcmpgt>
 8015bb0:	b128      	cbz	r0, 8015bbe <ceil+0x3e>
 8015bb2:	2c00      	cmp	r4, #0
 8015bb4:	db56      	blt.n	8015c64 <ceil+0xe4>
 8015bb6:	433c      	orrs	r4, r7
 8015bb8:	d058      	beq.n	8015c6c <ceil+0xec>
 8015bba:	2500      	movs	r5, #0
 8015bbc:	4c2e      	ldr	r4, [pc, #184]	; (8015c78 <ceil+0xf8>)
 8015bbe:	4623      	mov	r3, r4
 8015bc0:	462f      	mov	r7, r5
 8015bc2:	e025      	b.n	8015c10 <ceil+0x90>
 8015bc4:	4a2d      	ldr	r2, [pc, #180]	; (8015c7c <ceil+0xfc>)
 8015bc6:	fa42 f806 	asr.w	r8, r2, r6
 8015bca:	ea01 0208 	and.w	r2, r1, r8
 8015bce:	4302      	orrs	r2, r0
 8015bd0:	d01e      	beq.n	8015c10 <ceil+0x90>
 8015bd2:	a327      	add	r3, pc, #156	; (adr r3, 8015c70 <ceil+0xf0>)
 8015bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd8:	f7ea fb3e 	bl	8000258 <__adddf3>
 8015bdc:	2200      	movs	r2, #0
 8015bde:	2300      	movs	r3, #0
 8015be0:	f7ea ff80 	bl	8000ae4 <__aeabi_dcmpgt>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	d0ea      	beq.n	8015bbe <ceil+0x3e>
 8015be8:	2c00      	cmp	r4, #0
 8015bea:	bfc2      	ittt	gt
 8015bec:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015bf0:	fa43 f606 	asrgt.w	r6, r3, r6
 8015bf4:	19a4      	addgt	r4, r4, r6
 8015bf6:	2500      	movs	r5, #0
 8015bf8:	ea24 0408 	bic.w	r4, r4, r8
 8015bfc:	e7df      	b.n	8015bbe <ceil+0x3e>
 8015bfe:	2e33      	cmp	r6, #51	; 0x33
 8015c00:	dd0a      	ble.n	8015c18 <ceil+0x98>
 8015c02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015c06:	d103      	bne.n	8015c10 <ceil+0x90>
 8015c08:	f7ea fb26 	bl	8000258 <__adddf3>
 8015c0c:	4607      	mov	r7, r0
 8015c0e:	460b      	mov	r3, r1
 8015c10:	4638      	mov	r0, r7
 8015c12:	4619      	mov	r1, r3
 8015c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c1c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8015c20:	fa22 f808 	lsr.w	r8, r2, r8
 8015c24:	ea18 0f00 	tst.w	r8, r0
 8015c28:	d0f2      	beq.n	8015c10 <ceil+0x90>
 8015c2a:	a311      	add	r3, pc, #68	; (adr r3, 8015c70 <ceil+0xf0>)
 8015c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c30:	f7ea fb12 	bl	8000258 <__adddf3>
 8015c34:	2200      	movs	r2, #0
 8015c36:	2300      	movs	r3, #0
 8015c38:	f7ea ff54 	bl	8000ae4 <__aeabi_dcmpgt>
 8015c3c:	2800      	cmp	r0, #0
 8015c3e:	d0be      	beq.n	8015bbe <ceil+0x3e>
 8015c40:	2c00      	cmp	r4, #0
 8015c42:	dd02      	ble.n	8015c4a <ceil+0xca>
 8015c44:	2e14      	cmp	r6, #20
 8015c46:	d103      	bne.n	8015c50 <ceil+0xd0>
 8015c48:	3401      	adds	r4, #1
 8015c4a:	ea25 0508 	bic.w	r5, r5, r8
 8015c4e:	e7b6      	b.n	8015bbe <ceil+0x3e>
 8015c50:	2301      	movs	r3, #1
 8015c52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015c56:	fa03 f606 	lsl.w	r6, r3, r6
 8015c5a:	4435      	add	r5, r6
 8015c5c:	42bd      	cmp	r5, r7
 8015c5e:	bf38      	it	cc
 8015c60:	18e4      	addcc	r4, r4, r3
 8015c62:	e7f2      	b.n	8015c4a <ceil+0xca>
 8015c64:	2500      	movs	r5, #0
 8015c66:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015c6a:	e7a8      	b.n	8015bbe <ceil+0x3e>
 8015c6c:	4625      	mov	r5, r4
 8015c6e:	e7a6      	b.n	8015bbe <ceil+0x3e>
 8015c70:	8800759c 	.word	0x8800759c
 8015c74:	7e37e43c 	.word	0x7e37e43c
 8015c78:	3ff00000 	.word	0x3ff00000
 8015c7c:	000fffff 	.word	0x000fffff

08015c80 <floor>:
 8015c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8015c88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8015c8c:	2e13      	cmp	r6, #19
 8015c8e:	4602      	mov	r2, r0
 8015c90:	460b      	mov	r3, r1
 8015c92:	4607      	mov	r7, r0
 8015c94:	460c      	mov	r4, r1
 8015c96:	4605      	mov	r5, r0
 8015c98:	dc33      	bgt.n	8015d02 <floor+0x82>
 8015c9a:	2e00      	cmp	r6, #0
 8015c9c:	da14      	bge.n	8015cc8 <floor+0x48>
 8015c9e:	a334      	add	r3, pc, #208	; (adr r3, 8015d70 <floor+0xf0>)
 8015ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca4:	f7ea fad8 	bl	8000258 <__adddf3>
 8015ca8:	2200      	movs	r2, #0
 8015caa:	2300      	movs	r3, #0
 8015cac:	f7ea ff1a 	bl	8000ae4 <__aeabi_dcmpgt>
 8015cb0:	b138      	cbz	r0, 8015cc2 <floor+0x42>
 8015cb2:	2c00      	cmp	r4, #0
 8015cb4:	da58      	bge.n	8015d68 <floor+0xe8>
 8015cb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015cba:	431d      	orrs	r5, r3
 8015cbc:	d001      	beq.n	8015cc2 <floor+0x42>
 8015cbe:	2500      	movs	r5, #0
 8015cc0:	4c2d      	ldr	r4, [pc, #180]	; (8015d78 <floor+0xf8>)
 8015cc2:	4623      	mov	r3, r4
 8015cc4:	462f      	mov	r7, r5
 8015cc6:	e025      	b.n	8015d14 <floor+0x94>
 8015cc8:	4a2c      	ldr	r2, [pc, #176]	; (8015d7c <floor+0xfc>)
 8015cca:	fa42 f806 	asr.w	r8, r2, r6
 8015cce:	ea01 0208 	and.w	r2, r1, r8
 8015cd2:	4302      	orrs	r2, r0
 8015cd4:	d01e      	beq.n	8015d14 <floor+0x94>
 8015cd6:	a326      	add	r3, pc, #152	; (adr r3, 8015d70 <floor+0xf0>)
 8015cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cdc:	f7ea fabc 	bl	8000258 <__adddf3>
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	f7ea fefe 	bl	8000ae4 <__aeabi_dcmpgt>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d0ea      	beq.n	8015cc2 <floor+0x42>
 8015cec:	2c00      	cmp	r4, #0
 8015cee:	bfbe      	ittt	lt
 8015cf0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015cf4:	fa43 f606 	asrlt.w	r6, r3, r6
 8015cf8:	19a4      	addlt	r4, r4, r6
 8015cfa:	2500      	movs	r5, #0
 8015cfc:	ea24 0408 	bic.w	r4, r4, r8
 8015d00:	e7df      	b.n	8015cc2 <floor+0x42>
 8015d02:	2e33      	cmp	r6, #51	; 0x33
 8015d04:	dd0a      	ble.n	8015d1c <floor+0x9c>
 8015d06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015d0a:	d103      	bne.n	8015d14 <floor+0x94>
 8015d0c:	f7ea faa4 	bl	8000258 <__adddf3>
 8015d10:	4607      	mov	r7, r0
 8015d12:	460b      	mov	r3, r1
 8015d14:	4638      	mov	r0, r7
 8015d16:	4619      	mov	r1, r3
 8015d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d20:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8015d24:	fa22 f808 	lsr.w	r8, r2, r8
 8015d28:	ea18 0f00 	tst.w	r8, r0
 8015d2c:	d0f2      	beq.n	8015d14 <floor+0x94>
 8015d2e:	a310      	add	r3, pc, #64	; (adr r3, 8015d70 <floor+0xf0>)
 8015d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d34:	f7ea fa90 	bl	8000258 <__adddf3>
 8015d38:	2200      	movs	r2, #0
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	f7ea fed2 	bl	8000ae4 <__aeabi_dcmpgt>
 8015d40:	2800      	cmp	r0, #0
 8015d42:	d0be      	beq.n	8015cc2 <floor+0x42>
 8015d44:	2c00      	cmp	r4, #0
 8015d46:	da02      	bge.n	8015d4e <floor+0xce>
 8015d48:	2e14      	cmp	r6, #20
 8015d4a:	d103      	bne.n	8015d54 <floor+0xd4>
 8015d4c:	3401      	adds	r4, #1
 8015d4e:	ea25 0508 	bic.w	r5, r5, r8
 8015d52:	e7b6      	b.n	8015cc2 <floor+0x42>
 8015d54:	2301      	movs	r3, #1
 8015d56:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015d5a:	fa03 f606 	lsl.w	r6, r3, r6
 8015d5e:	4435      	add	r5, r6
 8015d60:	42bd      	cmp	r5, r7
 8015d62:	bf38      	it	cc
 8015d64:	18e4      	addcc	r4, r4, r3
 8015d66:	e7f2      	b.n	8015d4e <floor+0xce>
 8015d68:	2500      	movs	r5, #0
 8015d6a:	462c      	mov	r4, r5
 8015d6c:	e7a9      	b.n	8015cc2 <floor+0x42>
 8015d6e:	bf00      	nop
 8015d70:	8800759c 	.word	0x8800759c
 8015d74:	7e37e43c 	.word	0x7e37e43c
 8015d78:	bff00000 	.word	0xbff00000
 8015d7c:	000fffff 	.word	0x000fffff

08015d80 <abort>:
 8015d80:	2006      	movs	r0, #6
 8015d82:	b508      	push	{r3, lr}
 8015d84:	f000 f9ae 	bl	80160e4 <raise>
 8015d88:	2001      	movs	r0, #1
 8015d8a:	f7ec f916 	bl	8001fba <_exit>
	...

08015d90 <__errno>:
 8015d90:	4b01      	ldr	r3, [pc, #4]	; (8015d98 <__errno+0x8>)
 8015d92:	6818      	ldr	r0, [r3, #0]
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	2000012c 	.word	0x2000012c

08015d9c <__libc_init_array>:
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	2600      	movs	r6, #0
 8015da0:	4d0c      	ldr	r5, [pc, #48]	; (8015dd4 <__libc_init_array+0x38>)
 8015da2:	4c0d      	ldr	r4, [pc, #52]	; (8015dd8 <__libc_init_array+0x3c>)
 8015da4:	1b64      	subs	r4, r4, r5
 8015da6:	10a4      	asrs	r4, r4, #2
 8015da8:	42a6      	cmp	r6, r4
 8015daa:	d109      	bne.n	8015dc0 <__libc_init_array+0x24>
 8015dac:	f001 f88e 	bl	8016ecc <_init>
 8015db0:	2600      	movs	r6, #0
 8015db2:	4d0a      	ldr	r5, [pc, #40]	; (8015ddc <__libc_init_array+0x40>)
 8015db4:	4c0a      	ldr	r4, [pc, #40]	; (8015de0 <__libc_init_array+0x44>)
 8015db6:	1b64      	subs	r4, r4, r5
 8015db8:	10a4      	asrs	r4, r4, #2
 8015dba:	42a6      	cmp	r6, r4
 8015dbc:	d105      	bne.n	8015dca <__libc_init_array+0x2e>
 8015dbe:	bd70      	pop	{r4, r5, r6, pc}
 8015dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dc4:	4798      	blx	r3
 8015dc6:	3601      	adds	r6, #1
 8015dc8:	e7ee      	b.n	8015da8 <__libc_init_array+0xc>
 8015dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dce:	4798      	blx	r3
 8015dd0:	3601      	adds	r6, #1
 8015dd2:	e7f2      	b.n	8015dba <__libc_init_array+0x1e>
 8015dd4:	080178a4 	.word	0x080178a4
 8015dd8:	080178a4 	.word	0x080178a4
 8015ddc:	080178a4 	.word	0x080178a4
 8015de0:	080178b4 	.word	0x080178b4

08015de4 <malloc>:
 8015de4:	4b02      	ldr	r3, [pc, #8]	; (8015df0 <malloc+0xc>)
 8015de6:	4601      	mov	r1, r0
 8015de8:	6818      	ldr	r0, [r3, #0]
 8015dea:	f000 b8a3 	b.w	8015f34 <_malloc_r>
 8015dee:	bf00      	nop
 8015df0:	2000012c 	.word	0x2000012c

08015df4 <free>:
 8015df4:	4b02      	ldr	r3, [pc, #8]	; (8015e00 <free+0xc>)
 8015df6:	4601      	mov	r1, r0
 8015df8:	6818      	ldr	r0, [r3, #0]
 8015dfa:	f000 b833 	b.w	8015e64 <_free_r>
 8015dfe:	bf00      	nop
 8015e00:	2000012c 	.word	0x2000012c

08015e04 <memcpy>:
 8015e04:	440a      	add	r2, r1
 8015e06:	4291      	cmp	r1, r2
 8015e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015e0c:	d100      	bne.n	8015e10 <memcpy+0xc>
 8015e0e:	4770      	bx	lr
 8015e10:	b510      	push	{r4, lr}
 8015e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e16:	4291      	cmp	r1, r2
 8015e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e1c:	d1f9      	bne.n	8015e12 <memcpy+0xe>
 8015e1e:	bd10      	pop	{r4, pc}

08015e20 <memmove>:
 8015e20:	4288      	cmp	r0, r1
 8015e22:	b510      	push	{r4, lr}
 8015e24:	eb01 0402 	add.w	r4, r1, r2
 8015e28:	d902      	bls.n	8015e30 <memmove+0x10>
 8015e2a:	4284      	cmp	r4, r0
 8015e2c:	4623      	mov	r3, r4
 8015e2e:	d807      	bhi.n	8015e40 <memmove+0x20>
 8015e30:	1e43      	subs	r3, r0, #1
 8015e32:	42a1      	cmp	r1, r4
 8015e34:	d008      	beq.n	8015e48 <memmove+0x28>
 8015e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e3e:	e7f8      	b.n	8015e32 <memmove+0x12>
 8015e40:	4601      	mov	r1, r0
 8015e42:	4402      	add	r2, r0
 8015e44:	428a      	cmp	r2, r1
 8015e46:	d100      	bne.n	8015e4a <memmove+0x2a>
 8015e48:	bd10      	pop	{r4, pc}
 8015e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e52:	e7f7      	b.n	8015e44 <memmove+0x24>

08015e54 <memset>:
 8015e54:	4603      	mov	r3, r0
 8015e56:	4402      	add	r2, r0
 8015e58:	4293      	cmp	r3, r2
 8015e5a:	d100      	bne.n	8015e5e <memset+0xa>
 8015e5c:	4770      	bx	lr
 8015e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8015e62:	e7f9      	b.n	8015e58 <memset+0x4>

08015e64 <_free_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	4605      	mov	r5, r0
 8015e68:	2900      	cmp	r1, #0
 8015e6a:	d040      	beq.n	8015eee <_free_r+0x8a>
 8015e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e70:	1f0c      	subs	r4, r1, #4
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	bfb8      	it	lt
 8015e76:	18e4      	addlt	r4, r4, r3
 8015e78:	f000 fa48 	bl	801630c <__malloc_lock>
 8015e7c:	4a1c      	ldr	r2, [pc, #112]	; (8015ef0 <_free_r+0x8c>)
 8015e7e:	6813      	ldr	r3, [r2, #0]
 8015e80:	b933      	cbnz	r3, 8015e90 <_free_r+0x2c>
 8015e82:	6063      	str	r3, [r4, #4]
 8015e84:	6014      	str	r4, [r2, #0]
 8015e86:	4628      	mov	r0, r5
 8015e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e8c:	f000 ba44 	b.w	8016318 <__malloc_unlock>
 8015e90:	42a3      	cmp	r3, r4
 8015e92:	d908      	bls.n	8015ea6 <_free_r+0x42>
 8015e94:	6820      	ldr	r0, [r4, #0]
 8015e96:	1821      	adds	r1, r4, r0
 8015e98:	428b      	cmp	r3, r1
 8015e9a:	bf01      	itttt	eq
 8015e9c:	6819      	ldreq	r1, [r3, #0]
 8015e9e:	685b      	ldreq	r3, [r3, #4]
 8015ea0:	1809      	addeq	r1, r1, r0
 8015ea2:	6021      	streq	r1, [r4, #0]
 8015ea4:	e7ed      	b.n	8015e82 <_free_r+0x1e>
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	b10b      	cbz	r3, 8015eb0 <_free_r+0x4c>
 8015eac:	42a3      	cmp	r3, r4
 8015eae:	d9fa      	bls.n	8015ea6 <_free_r+0x42>
 8015eb0:	6811      	ldr	r1, [r2, #0]
 8015eb2:	1850      	adds	r0, r2, r1
 8015eb4:	42a0      	cmp	r0, r4
 8015eb6:	d10b      	bne.n	8015ed0 <_free_r+0x6c>
 8015eb8:	6820      	ldr	r0, [r4, #0]
 8015eba:	4401      	add	r1, r0
 8015ebc:	1850      	adds	r0, r2, r1
 8015ebe:	4283      	cmp	r3, r0
 8015ec0:	6011      	str	r1, [r2, #0]
 8015ec2:	d1e0      	bne.n	8015e86 <_free_r+0x22>
 8015ec4:	6818      	ldr	r0, [r3, #0]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	4401      	add	r1, r0
 8015eca:	6011      	str	r1, [r2, #0]
 8015ecc:	6053      	str	r3, [r2, #4]
 8015ece:	e7da      	b.n	8015e86 <_free_r+0x22>
 8015ed0:	d902      	bls.n	8015ed8 <_free_r+0x74>
 8015ed2:	230c      	movs	r3, #12
 8015ed4:	602b      	str	r3, [r5, #0]
 8015ed6:	e7d6      	b.n	8015e86 <_free_r+0x22>
 8015ed8:	6820      	ldr	r0, [r4, #0]
 8015eda:	1821      	adds	r1, r4, r0
 8015edc:	428b      	cmp	r3, r1
 8015ede:	bf01      	itttt	eq
 8015ee0:	6819      	ldreq	r1, [r3, #0]
 8015ee2:	685b      	ldreq	r3, [r3, #4]
 8015ee4:	1809      	addeq	r1, r1, r0
 8015ee6:	6021      	streq	r1, [r4, #0]
 8015ee8:	6063      	str	r3, [r4, #4]
 8015eea:	6054      	str	r4, [r2, #4]
 8015eec:	e7cb      	b.n	8015e86 <_free_r+0x22>
 8015eee:	bd38      	pop	{r3, r4, r5, pc}
 8015ef0:	20001170 	.word	0x20001170

08015ef4 <sbrk_aligned>:
 8015ef4:	b570      	push	{r4, r5, r6, lr}
 8015ef6:	4e0e      	ldr	r6, [pc, #56]	; (8015f30 <sbrk_aligned+0x3c>)
 8015ef8:	460c      	mov	r4, r1
 8015efa:	6831      	ldr	r1, [r6, #0]
 8015efc:	4605      	mov	r5, r0
 8015efe:	b911      	cbnz	r1, 8015f06 <sbrk_aligned+0x12>
 8015f00:	f000 f8b8 	bl	8016074 <_sbrk_r>
 8015f04:	6030      	str	r0, [r6, #0]
 8015f06:	4621      	mov	r1, r4
 8015f08:	4628      	mov	r0, r5
 8015f0a:	f000 f8b3 	bl	8016074 <_sbrk_r>
 8015f0e:	1c43      	adds	r3, r0, #1
 8015f10:	d00a      	beq.n	8015f28 <sbrk_aligned+0x34>
 8015f12:	1cc4      	adds	r4, r0, #3
 8015f14:	f024 0403 	bic.w	r4, r4, #3
 8015f18:	42a0      	cmp	r0, r4
 8015f1a:	d007      	beq.n	8015f2c <sbrk_aligned+0x38>
 8015f1c:	1a21      	subs	r1, r4, r0
 8015f1e:	4628      	mov	r0, r5
 8015f20:	f000 f8a8 	bl	8016074 <_sbrk_r>
 8015f24:	3001      	adds	r0, #1
 8015f26:	d101      	bne.n	8015f2c <sbrk_aligned+0x38>
 8015f28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	bd70      	pop	{r4, r5, r6, pc}
 8015f30:	20001174 	.word	0x20001174

08015f34 <_malloc_r>:
 8015f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f38:	1ccd      	adds	r5, r1, #3
 8015f3a:	f025 0503 	bic.w	r5, r5, #3
 8015f3e:	3508      	adds	r5, #8
 8015f40:	2d0c      	cmp	r5, #12
 8015f42:	bf38      	it	cc
 8015f44:	250c      	movcc	r5, #12
 8015f46:	2d00      	cmp	r5, #0
 8015f48:	4607      	mov	r7, r0
 8015f4a:	db01      	blt.n	8015f50 <_malloc_r+0x1c>
 8015f4c:	42a9      	cmp	r1, r5
 8015f4e:	d905      	bls.n	8015f5c <_malloc_r+0x28>
 8015f50:	230c      	movs	r3, #12
 8015f52:	2600      	movs	r6, #0
 8015f54:	603b      	str	r3, [r7, #0]
 8015f56:	4630      	mov	r0, r6
 8015f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f5c:	4e2e      	ldr	r6, [pc, #184]	; (8016018 <_malloc_r+0xe4>)
 8015f5e:	f000 f9d5 	bl	801630c <__malloc_lock>
 8015f62:	6833      	ldr	r3, [r6, #0]
 8015f64:	461c      	mov	r4, r3
 8015f66:	bb34      	cbnz	r4, 8015fb6 <_malloc_r+0x82>
 8015f68:	4629      	mov	r1, r5
 8015f6a:	4638      	mov	r0, r7
 8015f6c:	f7ff ffc2 	bl	8015ef4 <sbrk_aligned>
 8015f70:	1c43      	adds	r3, r0, #1
 8015f72:	4604      	mov	r4, r0
 8015f74:	d14d      	bne.n	8016012 <_malloc_r+0xde>
 8015f76:	6834      	ldr	r4, [r6, #0]
 8015f78:	4626      	mov	r6, r4
 8015f7a:	2e00      	cmp	r6, #0
 8015f7c:	d140      	bne.n	8016000 <_malloc_r+0xcc>
 8015f7e:	6823      	ldr	r3, [r4, #0]
 8015f80:	4631      	mov	r1, r6
 8015f82:	4638      	mov	r0, r7
 8015f84:	eb04 0803 	add.w	r8, r4, r3
 8015f88:	f000 f874 	bl	8016074 <_sbrk_r>
 8015f8c:	4580      	cmp	r8, r0
 8015f8e:	d13a      	bne.n	8016006 <_malloc_r+0xd2>
 8015f90:	6821      	ldr	r1, [r4, #0]
 8015f92:	3503      	adds	r5, #3
 8015f94:	1a6d      	subs	r5, r5, r1
 8015f96:	f025 0503 	bic.w	r5, r5, #3
 8015f9a:	3508      	adds	r5, #8
 8015f9c:	2d0c      	cmp	r5, #12
 8015f9e:	bf38      	it	cc
 8015fa0:	250c      	movcc	r5, #12
 8015fa2:	4638      	mov	r0, r7
 8015fa4:	4629      	mov	r1, r5
 8015fa6:	f7ff ffa5 	bl	8015ef4 <sbrk_aligned>
 8015faa:	3001      	adds	r0, #1
 8015fac:	d02b      	beq.n	8016006 <_malloc_r+0xd2>
 8015fae:	6823      	ldr	r3, [r4, #0]
 8015fb0:	442b      	add	r3, r5
 8015fb2:	6023      	str	r3, [r4, #0]
 8015fb4:	e00e      	b.n	8015fd4 <_malloc_r+0xa0>
 8015fb6:	6822      	ldr	r2, [r4, #0]
 8015fb8:	1b52      	subs	r2, r2, r5
 8015fba:	d41e      	bmi.n	8015ffa <_malloc_r+0xc6>
 8015fbc:	2a0b      	cmp	r2, #11
 8015fbe:	d916      	bls.n	8015fee <_malloc_r+0xba>
 8015fc0:	1961      	adds	r1, r4, r5
 8015fc2:	42a3      	cmp	r3, r4
 8015fc4:	6025      	str	r5, [r4, #0]
 8015fc6:	bf18      	it	ne
 8015fc8:	6059      	strne	r1, [r3, #4]
 8015fca:	6863      	ldr	r3, [r4, #4]
 8015fcc:	bf08      	it	eq
 8015fce:	6031      	streq	r1, [r6, #0]
 8015fd0:	5162      	str	r2, [r4, r5]
 8015fd2:	604b      	str	r3, [r1, #4]
 8015fd4:	4638      	mov	r0, r7
 8015fd6:	f104 060b 	add.w	r6, r4, #11
 8015fda:	f000 f99d 	bl	8016318 <__malloc_unlock>
 8015fde:	f026 0607 	bic.w	r6, r6, #7
 8015fe2:	1d23      	adds	r3, r4, #4
 8015fe4:	1af2      	subs	r2, r6, r3
 8015fe6:	d0b6      	beq.n	8015f56 <_malloc_r+0x22>
 8015fe8:	1b9b      	subs	r3, r3, r6
 8015fea:	50a3      	str	r3, [r4, r2]
 8015fec:	e7b3      	b.n	8015f56 <_malloc_r+0x22>
 8015fee:	6862      	ldr	r2, [r4, #4]
 8015ff0:	42a3      	cmp	r3, r4
 8015ff2:	bf0c      	ite	eq
 8015ff4:	6032      	streq	r2, [r6, #0]
 8015ff6:	605a      	strne	r2, [r3, #4]
 8015ff8:	e7ec      	b.n	8015fd4 <_malloc_r+0xa0>
 8015ffa:	4623      	mov	r3, r4
 8015ffc:	6864      	ldr	r4, [r4, #4]
 8015ffe:	e7b2      	b.n	8015f66 <_malloc_r+0x32>
 8016000:	4634      	mov	r4, r6
 8016002:	6876      	ldr	r6, [r6, #4]
 8016004:	e7b9      	b.n	8015f7a <_malloc_r+0x46>
 8016006:	230c      	movs	r3, #12
 8016008:	4638      	mov	r0, r7
 801600a:	603b      	str	r3, [r7, #0]
 801600c:	f000 f984 	bl	8016318 <__malloc_unlock>
 8016010:	e7a1      	b.n	8015f56 <_malloc_r+0x22>
 8016012:	6025      	str	r5, [r4, #0]
 8016014:	e7de      	b.n	8015fd4 <_malloc_r+0xa0>
 8016016:	bf00      	nop
 8016018:	20001170 	.word	0x20001170

0801601c <iprintf>:
 801601c:	b40f      	push	{r0, r1, r2, r3}
 801601e:	4b0a      	ldr	r3, [pc, #40]	; (8016048 <iprintf+0x2c>)
 8016020:	b513      	push	{r0, r1, r4, lr}
 8016022:	681c      	ldr	r4, [r3, #0]
 8016024:	b124      	cbz	r4, 8016030 <iprintf+0x14>
 8016026:	69a3      	ldr	r3, [r4, #24]
 8016028:	b913      	cbnz	r3, 8016030 <iprintf+0x14>
 801602a:	4620      	mov	r0, r4
 801602c:	f000 f8ce 	bl	80161cc <__sinit>
 8016030:	ab05      	add	r3, sp, #20
 8016032:	4620      	mov	r0, r4
 8016034:	9a04      	ldr	r2, [sp, #16]
 8016036:	68a1      	ldr	r1, [r4, #8]
 8016038:	9301      	str	r3, [sp, #4]
 801603a:	f000 f99b 	bl	8016374 <_vfiprintf_r>
 801603e:	b002      	add	sp, #8
 8016040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016044:	b004      	add	sp, #16
 8016046:	4770      	bx	lr
 8016048:	2000012c 	.word	0x2000012c

0801604c <putchar>:
 801604c:	b538      	push	{r3, r4, r5, lr}
 801604e:	4b08      	ldr	r3, [pc, #32]	; (8016070 <putchar+0x24>)
 8016050:	4605      	mov	r5, r0
 8016052:	681c      	ldr	r4, [r3, #0]
 8016054:	b124      	cbz	r4, 8016060 <putchar+0x14>
 8016056:	69a3      	ldr	r3, [r4, #24]
 8016058:	b913      	cbnz	r3, 8016060 <putchar+0x14>
 801605a:	4620      	mov	r0, r4
 801605c:	f000 f8b6 	bl	80161cc <__sinit>
 8016060:	4629      	mov	r1, r5
 8016062:	4620      	mov	r0, r4
 8016064:	68a2      	ldr	r2, [r4, #8]
 8016066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801606a:	f000 bc49 	b.w	8016900 <_putc_r>
 801606e:	bf00      	nop
 8016070:	2000012c 	.word	0x2000012c

08016074 <_sbrk_r>:
 8016074:	b538      	push	{r3, r4, r5, lr}
 8016076:	2300      	movs	r3, #0
 8016078:	4d05      	ldr	r5, [pc, #20]	; (8016090 <_sbrk_r+0x1c>)
 801607a:	4604      	mov	r4, r0
 801607c:	4608      	mov	r0, r1
 801607e:	602b      	str	r3, [r5, #0]
 8016080:	f7ec f80e 	bl	80020a0 <_sbrk>
 8016084:	1c43      	adds	r3, r0, #1
 8016086:	d102      	bne.n	801608e <_sbrk_r+0x1a>
 8016088:	682b      	ldr	r3, [r5, #0]
 801608a:	b103      	cbz	r3, 801608e <_sbrk_r+0x1a>
 801608c:	6023      	str	r3, [r4, #0]
 801608e:	bd38      	pop	{r3, r4, r5, pc}
 8016090:	2000117c 	.word	0x2000117c

08016094 <_raise_r>:
 8016094:	291f      	cmp	r1, #31
 8016096:	b538      	push	{r3, r4, r5, lr}
 8016098:	4604      	mov	r4, r0
 801609a:	460d      	mov	r5, r1
 801609c:	d904      	bls.n	80160a8 <_raise_r+0x14>
 801609e:	2316      	movs	r3, #22
 80160a0:	6003      	str	r3, [r0, #0]
 80160a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160a6:	bd38      	pop	{r3, r4, r5, pc}
 80160a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80160aa:	b112      	cbz	r2, 80160b2 <_raise_r+0x1e>
 80160ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80160b0:	b94b      	cbnz	r3, 80160c6 <_raise_r+0x32>
 80160b2:	4620      	mov	r0, r4
 80160b4:	f000 f830 	bl	8016118 <_getpid_r>
 80160b8:	462a      	mov	r2, r5
 80160ba:	4601      	mov	r1, r0
 80160bc:	4620      	mov	r0, r4
 80160be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160c2:	f000 b817 	b.w	80160f4 <_kill_r>
 80160c6:	2b01      	cmp	r3, #1
 80160c8:	d00a      	beq.n	80160e0 <_raise_r+0x4c>
 80160ca:	1c59      	adds	r1, r3, #1
 80160cc:	d103      	bne.n	80160d6 <_raise_r+0x42>
 80160ce:	2316      	movs	r3, #22
 80160d0:	6003      	str	r3, [r0, #0]
 80160d2:	2001      	movs	r0, #1
 80160d4:	e7e7      	b.n	80160a6 <_raise_r+0x12>
 80160d6:	2400      	movs	r4, #0
 80160d8:	4628      	mov	r0, r5
 80160da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80160de:	4798      	blx	r3
 80160e0:	2000      	movs	r0, #0
 80160e2:	e7e0      	b.n	80160a6 <_raise_r+0x12>

080160e4 <raise>:
 80160e4:	4b02      	ldr	r3, [pc, #8]	; (80160f0 <raise+0xc>)
 80160e6:	4601      	mov	r1, r0
 80160e8:	6818      	ldr	r0, [r3, #0]
 80160ea:	f7ff bfd3 	b.w	8016094 <_raise_r>
 80160ee:	bf00      	nop
 80160f0:	2000012c 	.word	0x2000012c

080160f4 <_kill_r>:
 80160f4:	b538      	push	{r3, r4, r5, lr}
 80160f6:	2300      	movs	r3, #0
 80160f8:	4d06      	ldr	r5, [pc, #24]	; (8016114 <_kill_r+0x20>)
 80160fa:	4604      	mov	r4, r0
 80160fc:	4608      	mov	r0, r1
 80160fe:	4611      	mov	r1, r2
 8016100:	602b      	str	r3, [r5, #0]
 8016102:	f7eb ff4a 	bl	8001f9a <_kill>
 8016106:	1c43      	adds	r3, r0, #1
 8016108:	d102      	bne.n	8016110 <_kill_r+0x1c>
 801610a:	682b      	ldr	r3, [r5, #0]
 801610c:	b103      	cbz	r3, 8016110 <_kill_r+0x1c>
 801610e:	6023      	str	r3, [r4, #0]
 8016110:	bd38      	pop	{r3, r4, r5, pc}
 8016112:	bf00      	nop
 8016114:	2000117c 	.word	0x2000117c

08016118 <_getpid_r>:
 8016118:	f7eb bf38 	b.w	8001f8c <_getpid>

0801611c <std>:
 801611c:	2300      	movs	r3, #0
 801611e:	b510      	push	{r4, lr}
 8016120:	4604      	mov	r4, r0
 8016122:	e9c0 3300 	strd	r3, r3, [r0]
 8016126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801612a:	6083      	str	r3, [r0, #8]
 801612c:	8181      	strh	r1, [r0, #12]
 801612e:	6643      	str	r3, [r0, #100]	; 0x64
 8016130:	81c2      	strh	r2, [r0, #14]
 8016132:	6183      	str	r3, [r0, #24]
 8016134:	4619      	mov	r1, r3
 8016136:	2208      	movs	r2, #8
 8016138:	305c      	adds	r0, #92	; 0x5c
 801613a:	f7ff fe8b 	bl	8015e54 <memset>
 801613e:	4b05      	ldr	r3, [pc, #20]	; (8016154 <std+0x38>)
 8016140:	6224      	str	r4, [r4, #32]
 8016142:	6263      	str	r3, [r4, #36]	; 0x24
 8016144:	4b04      	ldr	r3, [pc, #16]	; (8016158 <std+0x3c>)
 8016146:	62a3      	str	r3, [r4, #40]	; 0x28
 8016148:	4b04      	ldr	r3, [pc, #16]	; (801615c <std+0x40>)
 801614a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801614c:	4b04      	ldr	r3, [pc, #16]	; (8016160 <std+0x44>)
 801614e:	6323      	str	r3, [r4, #48]	; 0x30
 8016150:	bd10      	pop	{r4, pc}
 8016152:	bf00      	nop
 8016154:	08016991 	.word	0x08016991
 8016158:	080169b3 	.word	0x080169b3
 801615c:	080169eb 	.word	0x080169eb
 8016160:	08016a0f 	.word	0x08016a0f

08016164 <_cleanup_r>:
 8016164:	4901      	ldr	r1, [pc, #4]	; (801616c <_cleanup_r+0x8>)
 8016166:	f000 b8af 	b.w	80162c8 <_fwalk_reent>
 801616a:	bf00      	nop
 801616c:	08016ce1 	.word	0x08016ce1

08016170 <__sfmoreglue>:
 8016170:	2268      	movs	r2, #104	; 0x68
 8016172:	b570      	push	{r4, r5, r6, lr}
 8016174:	1e4d      	subs	r5, r1, #1
 8016176:	4355      	muls	r5, r2
 8016178:	460e      	mov	r6, r1
 801617a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801617e:	f7ff fed9 	bl	8015f34 <_malloc_r>
 8016182:	4604      	mov	r4, r0
 8016184:	b140      	cbz	r0, 8016198 <__sfmoreglue+0x28>
 8016186:	2100      	movs	r1, #0
 8016188:	e9c0 1600 	strd	r1, r6, [r0]
 801618c:	300c      	adds	r0, #12
 801618e:	60a0      	str	r0, [r4, #8]
 8016190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016194:	f7ff fe5e 	bl	8015e54 <memset>
 8016198:	4620      	mov	r0, r4
 801619a:	bd70      	pop	{r4, r5, r6, pc}

0801619c <__sfp_lock_acquire>:
 801619c:	4801      	ldr	r0, [pc, #4]	; (80161a4 <__sfp_lock_acquire+0x8>)
 801619e:	f000 b8b3 	b.w	8016308 <__retarget_lock_acquire_recursive>
 80161a2:	bf00      	nop
 80161a4:	20001179 	.word	0x20001179

080161a8 <__sfp_lock_release>:
 80161a8:	4801      	ldr	r0, [pc, #4]	; (80161b0 <__sfp_lock_release+0x8>)
 80161aa:	f000 b8ae 	b.w	801630a <__retarget_lock_release_recursive>
 80161ae:	bf00      	nop
 80161b0:	20001179 	.word	0x20001179

080161b4 <__sinit_lock_acquire>:
 80161b4:	4801      	ldr	r0, [pc, #4]	; (80161bc <__sinit_lock_acquire+0x8>)
 80161b6:	f000 b8a7 	b.w	8016308 <__retarget_lock_acquire_recursive>
 80161ba:	bf00      	nop
 80161bc:	2000117a 	.word	0x2000117a

080161c0 <__sinit_lock_release>:
 80161c0:	4801      	ldr	r0, [pc, #4]	; (80161c8 <__sinit_lock_release+0x8>)
 80161c2:	f000 b8a2 	b.w	801630a <__retarget_lock_release_recursive>
 80161c6:	bf00      	nop
 80161c8:	2000117a 	.word	0x2000117a

080161cc <__sinit>:
 80161cc:	b510      	push	{r4, lr}
 80161ce:	4604      	mov	r4, r0
 80161d0:	f7ff fff0 	bl	80161b4 <__sinit_lock_acquire>
 80161d4:	69a3      	ldr	r3, [r4, #24]
 80161d6:	b11b      	cbz	r3, 80161e0 <__sinit+0x14>
 80161d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161dc:	f7ff bff0 	b.w	80161c0 <__sinit_lock_release>
 80161e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80161e4:	6523      	str	r3, [r4, #80]	; 0x50
 80161e6:	4b13      	ldr	r3, [pc, #76]	; (8016234 <__sinit+0x68>)
 80161e8:	4a13      	ldr	r2, [pc, #76]	; (8016238 <__sinit+0x6c>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80161ee:	42a3      	cmp	r3, r4
 80161f0:	bf08      	it	eq
 80161f2:	2301      	moveq	r3, #1
 80161f4:	4620      	mov	r0, r4
 80161f6:	bf08      	it	eq
 80161f8:	61a3      	streq	r3, [r4, #24]
 80161fa:	f000 f81f 	bl	801623c <__sfp>
 80161fe:	6060      	str	r0, [r4, #4]
 8016200:	4620      	mov	r0, r4
 8016202:	f000 f81b 	bl	801623c <__sfp>
 8016206:	60a0      	str	r0, [r4, #8]
 8016208:	4620      	mov	r0, r4
 801620a:	f000 f817 	bl	801623c <__sfp>
 801620e:	2200      	movs	r2, #0
 8016210:	2104      	movs	r1, #4
 8016212:	60e0      	str	r0, [r4, #12]
 8016214:	6860      	ldr	r0, [r4, #4]
 8016216:	f7ff ff81 	bl	801611c <std>
 801621a:	2201      	movs	r2, #1
 801621c:	2109      	movs	r1, #9
 801621e:	68a0      	ldr	r0, [r4, #8]
 8016220:	f7ff ff7c 	bl	801611c <std>
 8016224:	2202      	movs	r2, #2
 8016226:	2112      	movs	r1, #18
 8016228:	68e0      	ldr	r0, [r4, #12]
 801622a:	f7ff ff77 	bl	801611c <std>
 801622e:	2301      	movs	r3, #1
 8016230:	61a3      	str	r3, [r4, #24]
 8016232:	e7d1      	b.n	80161d8 <__sinit+0xc>
 8016234:	08017804 	.word	0x08017804
 8016238:	08016165 	.word	0x08016165

0801623c <__sfp>:
 801623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623e:	4607      	mov	r7, r0
 8016240:	f7ff ffac 	bl	801619c <__sfp_lock_acquire>
 8016244:	4b1e      	ldr	r3, [pc, #120]	; (80162c0 <__sfp+0x84>)
 8016246:	681e      	ldr	r6, [r3, #0]
 8016248:	69b3      	ldr	r3, [r6, #24]
 801624a:	b913      	cbnz	r3, 8016252 <__sfp+0x16>
 801624c:	4630      	mov	r0, r6
 801624e:	f7ff ffbd 	bl	80161cc <__sinit>
 8016252:	3648      	adds	r6, #72	; 0x48
 8016254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016258:	3b01      	subs	r3, #1
 801625a:	d503      	bpl.n	8016264 <__sfp+0x28>
 801625c:	6833      	ldr	r3, [r6, #0]
 801625e:	b30b      	cbz	r3, 80162a4 <__sfp+0x68>
 8016260:	6836      	ldr	r6, [r6, #0]
 8016262:	e7f7      	b.n	8016254 <__sfp+0x18>
 8016264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016268:	b9d5      	cbnz	r5, 80162a0 <__sfp+0x64>
 801626a:	4b16      	ldr	r3, [pc, #88]	; (80162c4 <__sfp+0x88>)
 801626c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016270:	60e3      	str	r3, [r4, #12]
 8016272:	6665      	str	r5, [r4, #100]	; 0x64
 8016274:	f000 f847 	bl	8016306 <__retarget_lock_init_recursive>
 8016278:	f7ff ff96 	bl	80161a8 <__sfp_lock_release>
 801627c:	2208      	movs	r2, #8
 801627e:	4629      	mov	r1, r5
 8016280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016288:	6025      	str	r5, [r4, #0]
 801628a:	61a5      	str	r5, [r4, #24]
 801628c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016290:	f7ff fde0 	bl	8015e54 <memset>
 8016294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801629c:	4620      	mov	r0, r4
 801629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162a0:	3468      	adds	r4, #104	; 0x68
 80162a2:	e7d9      	b.n	8016258 <__sfp+0x1c>
 80162a4:	2104      	movs	r1, #4
 80162a6:	4638      	mov	r0, r7
 80162a8:	f7ff ff62 	bl	8016170 <__sfmoreglue>
 80162ac:	4604      	mov	r4, r0
 80162ae:	6030      	str	r0, [r6, #0]
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d1d5      	bne.n	8016260 <__sfp+0x24>
 80162b4:	f7ff ff78 	bl	80161a8 <__sfp_lock_release>
 80162b8:	230c      	movs	r3, #12
 80162ba:	603b      	str	r3, [r7, #0]
 80162bc:	e7ee      	b.n	801629c <__sfp+0x60>
 80162be:	bf00      	nop
 80162c0:	08017804 	.word	0x08017804
 80162c4:	ffff0001 	.word	0xffff0001

080162c8 <_fwalk_reent>:
 80162c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162cc:	4606      	mov	r6, r0
 80162ce:	4688      	mov	r8, r1
 80162d0:	2700      	movs	r7, #0
 80162d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80162d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80162da:	f1b9 0901 	subs.w	r9, r9, #1
 80162de:	d505      	bpl.n	80162ec <_fwalk_reent+0x24>
 80162e0:	6824      	ldr	r4, [r4, #0]
 80162e2:	2c00      	cmp	r4, #0
 80162e4:	d1f7      	bne.n	80162d6 <_fwalk_reent+0xe>
 80162e6:	4638      	mov	r0, r7
 80162e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162ec:	89ab      	ldrh	r3, [r5, #12]
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d907      	bls.n	8016302 <_fwalk_reent+0x3a>
 80162f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80162f6:	3301      	adds	r3, #1
 80162f8:	d003      	beq.n	8016302 <_fwalk_reent+0x3a>
 80162fa:	4629      	mov	r1, r5
 80162fc:	4630      	mov	r0, r6
 80162fe:	47c0      	blx	r8
 8016300:	4307      	orrs	r7, r0
 8016302:	3568      	adds	r5, #104	; 0x68
 8016304:	e7e9      	b.n	80162da <_fwalk_reent+0x12>

08016306 <__retarget_lock_init_recursive>:
 8016306:	4770      	bx	lr

08016308 <__retarget_lock_acquire_recursive>:
 8016308:	4770      	bx	lr

0801630a <__retarget_lock_release_recursive>:
 801630a:	4770      	bx	lr

0801630c <__malloc_lock>:
 801630c:	4801      	ldr	r0, [pc, #4]	; (8016314 <__malloc_lock+0x8>)
 801630e:	f7ff bffb 	b.w	8016308 <__retarget_lock_acquire_recursive>
 8016312:	bf00      	nop
 8016314:	20001178 	.word	0x20001178

08016318 <__malloc_unlock>:
 8016318:	4801      	ldr	r0, [pc, #4]	; (8016320 <__malloc_unlock+0x8>)
 801631a:	f7ff bff6 	b.w	801630a <__retarget_lock_release_recursive>
 801631e:	bf00      	nop
 8016320:	20001178 	.word	0x20001178

08016324 <__sfputc_r>:
 8016324:	6893      	ldr	r3, [r2, #8]
 8016326:	b410      	push	{r4}
 8016328:	3b01      	subs	r3, #1
 801632a:	2b00      	cmp	r3, #0
 801632c:	6093      	str	r3, [r2, #8]
 801632e:	da07      	bge.n	8016340 <__sfputc_r+0x1c>
 8016330:	6994      	ldr	r4, [r2, #24]
 8016332:	42a3      	cmp	r3, r4
 8016334:	db01      	blt.n	801633a <__sfputc_r+0x16>
 8016336:	290a      	cmp	r1, #10
 8016338:	d102      	bne.n	8016340 <__sfputc_r+0x1c>
 801633a:	bc10      	pop	{r4}
 801633c:	f000 bb6c 	b.w	8016a18 <__swbuf_r>
 8016340:	6813      	ldr	r3, [r2, #0]
 8016342:	1c58      	adds	r0, r3, #1
 8016344:	6010      	str	r0, [r2, #0]
 8016346:	7019      	strb	r1, [r3, #0]
 8016348:	4608      	mov	r0, r1
 801634a:	bc10      	pop	{r4}
 801634c:	4770      	bx	lr

0801634e <__sfputs_r>:
 801634e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016350:	4606      	mov	r6, r0
 8016352:	460f      	mov	r7, r1
 8016354:	4614      	mov	r4, r2
 8016356:	18d5      	adds	r5, r2, r3
 8016358:	42ac      	cmp	r4, r5
 801635a:	d101      	bne.n	8016360 <__sfputs_r+0x12>
 801635c:	2000      	movs	r0, #0
 801635e:	e007      	b.n	8016370 <__sfputs_r+0x22>
 8016360:	463a      	mov	r2, r7
 8016362:	4630      	mov	r0, r6
 8016364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016368:	f7ff ffdc 	bl	8016324 <__sfputc_r>
 801636c:	1c43      	adds	r3, r0, #1
 801636e:	d1f3      	bne.n	8016358 <__sfputs_r+0xa>
 8016370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016374 <_vfiprintf_r>:
 8016374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016378:	460d      	mov	r5, r1
 801637a:	4614      	mov	r4, r2
 801637c:	4698      	mov	r8, r3
 801637e:	4606      	mov	r6, r0
 8016380:	b09d      	sub	sp, #116	; 0x74
 8016382:	b118      	cbz	r0, 801638c <_vfiprintf_r+0x18>
 8016384:	6983      	ldr	r3, [r0, #24]
 8016386:	b90b      	cbnz	r3, 801638c <_vfiprintf_r+0x18>
 8016388:	f7ff ff20 	bl	80161cc <__sinit>
 801638c:	4b89      	ldr	r3, [pc, #548]	; (80165b4 <_vfiprintf_r+0x240>)
 801638e:	429d      	cmp	r5, r3
 8016390:	d11b      	bne.n	80163ca <_vfiprintf_r+0x56>
 8016392:	6875      	ldr	r5, [r6, #4]
 8016394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016396:	07d9      	lsls	r1, r3, #31
 8016398:	d405      	bmi.n	80163a6 <_vfiprintf_r+0x32>
 801639a:	89ab      	ldrh	r3, [r5, #12]
 801639c:	059a      	lsls	r2, r3, #22
 801639e:	d402      	bmi.n	80163a6 <_vfiprintf_r+0x32>
 80163a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163a2:	f7ff ffb1 	bl	8016308 <__retarget_lock_acquire_recursive>
 80163a6:	89ab      	ldrh	r3, [r5, #12]
 80163a8:	071b      	lsls	r3, r3, #28
 80163aa:	d501      	bpl.n	80163b0 <_vfiprintf_r+0x3c>
 80163ac:	692b      	ldr	r3, [r5, #16]
 80163ae:	b9eb      	cbnz	r3, 80163ec <_vfiprintf_r+0x78>
 80163b0:	4629      	mov	r1, r5
 80163b2:	4630      	mov	r0, r6
 80163b4:	f000 fb94 	bl	8016ae0 <__swsetup_r>
 80163b8:	b1c0      	cbz	r0, 80163ec <_vfiprintf_r+0x78>
 80163ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163bc:	07dc      	lsls	r4, r3, #31
 80163be:	d50e      	bpl.n	80163de <_vfiprintf_r+0x6a>
 80163c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163c4:	b01d      	add	sp, #116	; 0x74
 80163c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ca:	4b7b      	ldr	r3, [pc, #492]	; (80165b8 <_vfiprintf_r+0x244>)
 80163cc:	429d      	cmp	r5, r3
 80163ce:	d101      	bne.n	80163d4 <_vfiprintf_r+0x60>
 80163d0:	68b5      	ldr	r5, [r6, #8]
 80163d2:	e7df      	b.n	8016394 <_vfiprintf_r+0x20>
 80163d4:	4b79      	ldr	r3, [pc, #484]	; (80165bc <_vfiprintf_r+0x248>)
 80163d6:	429d      	cmp	r5, r3
 80163d8:	bf08      	it	eq
 80163da:	68f5      	ldreq	r5, [r6, #12]
 80163dc:	e7da      	b.n	8016394 <_vfiprintf_r+0x20>
 80163de:	89ab      	ldrh	r3, [r5, #12]
 80163e0:	0598      	lsls	r0, r3, #22
 80163e2:	d4ed      	bmi.n	80163c0 <_vfiprintf_r+0x4c>
 80163e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163e6:	f7ff ff90 	bl	801630a <__retarget_lock_release_recursive>
 80163ea:	e7e9      	b.n	80163c0 <_vfiprintf_r+0x4c>
 80163ec:	2300      	movs	r3, #0
 80163ee:	9309      	str	r3, [sp, #36]	; 0x24
 80163f0:	2320      	movs	r3, #32
 80163f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163f6:	2330      	movs	r3, #48	; 0x30
 80163f8:	f04f 0901 	mov.w	r9, #1
 80163fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016400:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80165c0 <_vfiprintf_r+0x24c>
 8016404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016408:	4623      	mov	r3, r4
 801640a:	469a      	mov	sl, r3
 801640c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016410:	b10a      	cbz	r2, 8016416 <_vfiprintf_r+0xa2>
 8016412:	2a25      	cmp	r2, #37	; 0x25
 8016414:	d1f9      	bne.n	801640a <_vfiprintf_r+0x96>
 8016416:	ebba 0b04 	subs.w	fp, sl, r4
 801641a:	d00b      	beq.n	8016434 <_vfiprintf_r+0xc0>
 801641c:	465b      	mov	r3, fp
 801641e:	4622      	mov	r2, r4
 8016420:	4629      	mov	r1, r5
 8016422:	4630      	mov	r0, r6
 8016424:	f7ff ff93 	bl	801634e <__sfputs_r>
 8016428:	3001      	adds	r0, #1
 801642a:	f000 80aa 	beq.w	8016582 <_vfiprintf_r+0x20e>
 801642e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016430:	445a      	add	r2, fp
 8016432:	9209      	str	r2, [sp, #36]	; 0x24
 8016434:	f89a 3000 	ldrb.w	r3, [sl]
 8016438:	2b00      	cmp	r3, #0
 801643a:	f000 80a2 	beq.w	8016582 <_vfiprintf_r+0x20e>
 801643e:	2300      	movs	r3, #0
 8016440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016448:	f10a 0a01 	add.w	sl, sl, #1
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	9307      	str	r3, [sp, #28]
 8016450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016454:	931a      	str	r3, [sp, #104]	; 0x68
 8016456:	4654      	mov	r4, sl
 8016458:	2205      	movs	r2, #5
 801645a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801645e:	4858      	ldr	r0, [pc, #352]	; (80165c0 <_vfiprintf_r+0x24c>)
 8016460:	f000 fcf2 	bl	8016e48 <memchr>
 8016464:	9a04      	ldr	r2, [sp, #16]
 8016466:	b9d8      	cbnz	r0, 80164a0 <_vfiprintf_r+0x12c>
 8016468:	06d1      	lsls	r1, r2, #27
 801646a:	bf44      	itt	mi
 801646c:	2320      	movmi	r3, #32
 801646e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016472:	0713      	lsls	r3, r2, #28
 8016474:	bf44      	itt	mi
 8016476:	232b      	movmi	r3, #43	; 0x2b
 8016478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801647c:	f89a 3000 	ldrb.w	r3, [sl]
 8016480:	2b2a      	cmp	r3, #42	; 0x2a
 8016482:	d015      	beq.n	80164b0 <_vfiprintf_r+0x13c>
 8016484:	4654      	mov	r4, sl
 8016486:	2000      	movs	r0, #0
 8016488:	f04f 0c0a 	mov.w	ip, #10
 801648c:	9a07      	ldr	r2, [sp, #28]
 801648e:	4621      	mov	r1, r4
 8016490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016494:	3b30      	subs	r3, #48	; 0x30
 8016496:	2b09      	cmp	r3, #9
 8016498:	d94e      	bls.n	8016538 <_vfiprintf_r+0x1c4>
 801649a:	b1b0      	cbz	r0, 80164ca <_vfiprintf_r+0x156>
 801649c:	9207      	str	r2, [sp, #28]
 801649e:	e014      	b.n	80164ca <_vfiprintf_r+0x156>
 80164a0:	eba0 0308 	sub.w	r3, r0, r8
 80164a4:	fa09 f303 	lsl.w	r3, r9, r3
 80164a8:	4313      	orrs	r3, r2
 80164aa:	46a2      	mov	sl, r4
 80164ac:	9304      	str	r3, [sp, #16]
 80164ae:	e7d2      	b.n	8016456 <_vfiprintf_r+0xe2>
 80164b0:	9b03      	ldr	r3, [sp, #12]
 80164b2:	1d19      	adds	r1, r3, #4
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	9103      	str	r1, [sp, #12]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	bfbb      	ittet	lt
 80164bc:	425b      	neglt	r3, r3
 80164be:	f042 0202 	orrlt.w	r2, r2, #2
 80164c2:	9307      	strge	r3, [sp, #28]
 80164c4:	9307      	strlt	r3, [sp, #28]
 80164c6:	bfb8      	it	lt
 80164c8:	9204      	strlt	r2, [sp, #16]
 80164ca:	7823      	ldrb	r3, [r4, #0]
 80164cc:	2b2e      	cmp	r3, #46	; 0x2e
 80164ce:	d10c      	bne.n	80164ea <_vfiprintf_r+0x176>
 80164d0:	7863      	ldrb	r3, [r4, #1]
 80164d2:	2b2a      	cmp	r3, #42	; 0x2a
 80164d4:	d135      	bne.n	8016542 <_vfiprintf_r+0x1ce>
 80164d6:	9b03      	ldr	r3, [sp, #12]
 80164d8:	3402      	adds	r4, #2
 80164da:	1d1a      	adds	r2, r3, #4
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	9203      	str	r2, [sp, #12]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	bfb8      	it	lt
 80164e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80164e8:	9305      	str	r3, [sp, #20]
 80164ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80165c4 <_vfiprintf_r+0x250>
 80164ee:	2203      	movs	r2, #3
 80164f0:	4650      	mov	r0, sl
 80164f2:	7821      	ldrb	r1, [r4, #0]
 80164f4:	f000 fca8 	bl	8016e48 <memchr>
 80164f8:	b140      	cbz	r0, 801650c <_vfiprintf_r+0x198>
 80164fa:	2340      	movs	r3, #64	; 0x40
 80164fc:	eba0 000a 	sub.w	r0, r0, sl
 8016500:	fa03 f000 	lsl.w	r0, r3, r0
 8016504:	9b04      	ldr	r3, [sp, #16]
 8016506:	3401      	adds	r4, #1
 8016508:	4303      	orrs	r3, r0
 801650a:	9304      	str	r3, [sp, #16]
 801650c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016510:	2206      	movs	r2, #6
 8016512:	482d      	ldr	r0, [pc, #180]	; (80165c8 <_vfiprintf_r+0x254>)
 8016514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016518:	f000 fc96 	bl	8016e48 <memchr>
 801651c:	2800      	cmp	r0, #0
 801651e:	d03f      	beq.n	80165a0 <_vfiprintf_r+0x22c>
 8016520:	4b2a      	ldr	r3, [pc, #168]	; (80165cc <_vfiprintf_r+0x258>)
 8016522:	bb1b      	cbnz	r3, 801656c <_vfiprintf_r+0x1f8>
 8016524:	9b03      	ldr	r3, [sp, #12]
 8016526:	3307      	adds	r3, #7
 8016528:	f023 0307 	bic.w	r3, r3, #7
 801652c:	3308      	adds	r3, #8
 801652e:	9303      	str	r3, [sp, #12]
 8016530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016532:	443b      	add	r3, r7
 8016534:	9309      	str	r3, [sp, #36]	; 0x24
 8016536:	e767      	b.n	8016408 <_vfiprintf_r+0x94>
 8016538:	460c      	mov	r4, r1
 801653a:	2001      	movs	r0, #1
 801653c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016540:	e7a5      	b.n	801648e <_vfiprintf_r+0x11a>
 8016542:	2300      	movs	r3, #0
 8016544:	f04f 0c0a 	mov.w	ip, #10
 8016548:	4619      	mov	r1, r3
 801654a:	3401      	adds	r4, #1
 801654c:	9305      	str	r3, [sp, #20]
 801654e:	4620      	mov	r0, r4
 8016550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016554:	3a30      	subs	r2, #48	; 0x30
 8016556:	2a09      	cmp	r2, #9
 8016558:	d903      	bls.n	8016562 <_vfiprintf_r+0x1ee>
 801655a:	2b00      	cmp	r3, #0
 801655c:	d0c5      	beq.n	80164ea <_vfiprintf_r+0x176>
 801655e:	9105      	str	r1, [sp, #20]
 8016560:	e7c3      	b.n	80164ea <_vfiprintf_r+0x176>
 8016562:	4604      	mov	r4, r0
 8016564:	2301      	movs	r3, #1
 8016566:	fb0c 2101 	mla	r1, ip, r1, r2
 801656a:	e7f0      	b.n	801654e <_vfiprintf_r+0x1da>
 801656c:	ab03      	add	r3, sp, #12
 801656e:	9300      	str	r3, [sp, #0]
 8016570:	462a      	mov	r2, r5
 8016572:	4630      	mov	r0, r6
 8016574:	4b16      	ldr	r3, [pc, #88]	; (80165d0 <_vfiprintf_r+0x25c>)
 8016576:	a904      	add	r1, sp, #16
 8016578:	f3af 8000 	nop.w
 801657c:	4607      	mov	r7, r0
 801657e:	1c78      	adds	r0, r7, #1
 8016580:	d1d6      	bne.n	8016530 <_vfiprintf_r+0x1bc>
 8016582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016584:	07d9      	lsls	r1, r3, #31
 8016586:	d405      	bmi.n	8016594 <_vfiprintf_r+0x220>
 8016588:	89ab      	ldrh	r3, [r5, #12]
 801658a:	059a      	lsls	r2, r3, #22
 801658c:	d402      	bmi.n	8016594 <_vfiprintf_r+0x220>
 801658e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016590:	f7ff febb 	bl	801630a <__retarget_lock_release_recursive>
 8016594:	89ab      	ldrh	r3, [r5, #12]
 8016596:	065b      	lsls	r3, r3, #25
 8016598:	f53f af12 	bmi.w	80163c0 <_vfiprintf_r+0x4c>
 801659c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801659e:	e711      	b.n	80163c4 <_vfiprintf_r+0x50>
 80165a0:	ab03      	add	r3, sp, #12
 80165a2:	9300      	str	r3, [sp, #0]
 80165a4:	462a      	mov	r2, r5
 80165a6:	4630      	mov	r0, r6
 80165a8:	4b09      	ldr	r3, [pc, #36]	; (80165d0 <_vfiprintf_r+0x25c>)
 80165aa:	a904      	add	r1, sp, #16
 80165ac:	f000 f882 	bl	80166b4 <_printf_i>
 80165b0:	e7e4      	b.n	801657c <_vfiprintf_r+0x208>
 80165b2:	bf00      	nop
 80165b4:	08017828 	.word	0x08017828
 80165b8:	08017848 	.word	0x08017848
 80165bc:	08017808 	.word	0x08017808
 80165c0:	08017868 	.word	0x08017868
 80165c4:	0801786e 	.word	0x0801786e
 80165c8:	08017872 	.word	0x08017872
 80165cc:	00000000 	.word	0x00000000
 80165d0:	0801634f 	.word	0x0801634f

080165d4 <_printf_common>:
 80165d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d8:	4616      	mov	r6, r2
 80165da:	4699      	mov	r9, r3
 80165dc:	688a      	ldr	r2, [r1, #8]
 80165de:	690b      	ldr	r3, [r1, #16]
 80165e0:	4607      	mov	r7, r0
 80165e2:	4293      	cmp	r3, r2
 80165e4:	bfb8      	it	lt
 80165e6:	4613      	movlt	r3, r2
 80165e8:	6033      	str	r3, [r6, #0]
 80165ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165ee:	460c      	mov	r4, r1
 80165f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165f4:	b10a      	cbz	r2, 80165fa <_printf_common+0x26>
 80165f6:	3301      	adds	r3, #1
 80165f8:	6033      	str	r3, [r6, #0]
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	0699      	lsls	r1, r3, #26
 80165fe:	bf42      	ittt	mi
 8016600:	6833      	ldrmi	r3, [r6, #0]
 8016602:	3302      	addmi	r3, #2
 8016604:	6033      	strmi	r3, [r6, #0]
 8016606:	6825      	ldr	r5, [r4, #0]
 8016608:	f015 0506 	ands.w	r5, r5, #6
 801660c:	d106      	bne.n	801661c <_printf_common+0x48>
 801660e:	f104 0a19 	add.w	sl, r4, #25
 8016612:	68e3      	ldr	r3, [r4, #12]
 8016614:	6832      	ldr	r2, [r6, #0]
 8016616:	1a9b      	subs	r3, r3, r2
 8016618:	42ab      	cmp	r3, r5
 801661a:	dc28      	bgt.n	801666e <_printf_common+0x9a>
 801661c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016620:	1e13      	subs	r3, r2, #0
 8016622:	6822      	ldr	r2, [r4, #0]
 8016624:	bf18      	it	ne
 8016626:	2301      	movne	r3, #1
 8016628:	0692      	lsls	r2, r2, #26
 801662a:	d42d      	bmi.n	8016688 <_printf_common+0xb4>
 801662c:	4649      	mov	r1, r9
 801662e:	4638      	mov	r0, r7
 8016630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016634:	47c0      	blx	r8
 8016636:	3001      	adds	r0, #1
 8016638:	d020      	beq.n	801667c <_printf_common+0xa8>
 801663a:	6823      	ldr	r3, [r4, #0]
 801663c:	68e5      	ldr	r5, [r4, #12]
 801663e:	f003 0306 	and.w	r3, r3, #6
 8016642:	2b04      	cmp	r3, #4
 8016644:	bf18      	it	ne
 8016646:	2500      	movne	r5, #0
 8016648:	6832      	ldr	r2, [r6, #0]
 801664a:	f04f 0600 	mov.w	r6, #0
 801664e:	68a3      	ldr	r3, [r4, #8]
 8016650:	bf08      	it	eq
 8016652:	1aad      	subeq	r5, r5, r2
 8016654:	6922      	ldr	r2, [r4, #16]
 8016656:	bf08      	it	eq
 8016658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801665c:	4293      	cmp	r3, r2
 801665e:	bfc4      	itt	gt
 8016660:	1a9b      	subgt	r3, r3, r2
 8016662:	18ed      	addgt	r5, r5, r3
 8016664:	341a      	adds	r4, #26
 8016666:	42b5      	cmp	r5, r6
 8016668:	d11a      	bne.n	80166a0 <_printf_common+0xcc>
 801666a:	2000      	movs	r0, #0
 801666c:	e008      	b.n	8016680 <_printf_common+0xac>
 801666e:	2301      	movs	r3, #1
 8016670:	4652      	mov	r2, sl
 8016672:	4649      	mov	r1, r9
 8016674:	4638      	mov	r0, r7
 8016676:	47c0      	blx	r8
 8016678:	3001      	adds	r0, #1
 801667a:	d103      	bne.n	8016684 <_printf_common+0xb0>
 801667c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016684:	3501      	adds	r5, #1
 8016686:	e7c4      	b.n	8016612 <_printf_common+0x3e>
 8016688:	2030      	movs	r0, #48	; 0x30
 801668a:	18e1      	adds	r1, r4, r3
 801668c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016690:	1c5a      	adds	r2, r3, #1
 8016692:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016696:	4422      	add	r2, r4
 8016698:	3302      	adds	r3, #2
 801669a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801669e:	e7c5      	b.n	801662c <_printf_common+0x58>
 80166a0:	2301      	movs	r3, #1
 80166a2:	4622      	mov	r2, r4
 80166a4:	4649      	mov	r1, r9
 80166a6:	4638      	mov	r0, r7
 80166a8:	47c0      	blx	r8
 80166aa:	3001      	adds	r0, #1
 80166ac:	d0e6      	beq.n	801667c <_printf_common+0xa8>
 80166ae:	3601      	adds	r6, #1
 80166b0:	e7d9      	b.n	8016666 <_printf_common+0x92>
	...

080166b4 <_printf_i>:
 80166b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166b8:	7e0f      	ldrb	r7, [r1, #24]
 80166ba:	4691      	mov	r9, r2
 80166bc:	2f78      	cmp	r7, #120	; 0x78
 80166be:	4680      	mov	r8, r0
 80166c0:	460c      	mov	r4, r1
 80166c2:	469a      	mov	sl, r3
 80166c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80166ca:	d807      	bhi.n	80166dc <_printf_i+0x28>
 80166cc:	2f62      	cmp	r7, #98	; 0x62
 80166ce:	d80a      	bhi.n	80166e6 <_printf_i+0x32>
 80166d0:	2f00      	cmp	r7, #0
 80166d2:	f000 80d9 	beq.w	8016888 <_printf_i+0x1d4>
 80166d6:	2f58      	cmp	r7, #88	; 0x58
 80166d8:	f000 80a4 	beq.w	8016824 <_printf_i+0x170>
 80166dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166e4:	e03a      	b.n	801675c <_printf_i+0xa8>
 80166e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166ea:	2b15      	cmp	r3, #21
 80166ec:	d8f6      	bhi.n	80166dc <_printf_i+0x28>
 80166ee:	a101      	add	r1, pc, #4	; (adr r1, 80166f4 <_printf_i+0x40>)
 80166f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80166f4:	0801674d 	.word	0x0801674d
 80166f8:	08016761 	.word	0x08016761
 80166fc:	080166dd 	.word	0x080166dd
 8016700:	080166dd 	.word	0x080166dd
 8016704:	080166dd 	.word	0x080166dd
 8016708:	080166dd 	.word	0x080166dd
 801670c:	08016761 	.word	0x08016761
 8016710:	080166dd 	.word	0x080166dd
 8016714:	080166dd 	.word	0x080166dd
 8016718:	080166dd 	.word	0x080166dd
 801671c:	080166dd 	.word	0x080166dd
 8016720:	0801686f 	.word	0x0801686f
 8016724:	08016791 	.word	0x08016791
 8016728:	08016851 	.word	0x08016851
 801672c:	080166dd 	.word	0x080166dd
 8016730:	080166dd 	.word	0x080166dd
 8016734:	08016891 	.word	0x08016891
 8016738:	080166dd 	.word	0x080166dd
 801673c:	08016791 	.word	0x08016791
 8016740:	080166dd 	.word	0x080166dd
 8016744:	080166dd 	.word	0x080166dd
 8016748:	08016859 	.word	0x08016859
 801674c:	682b      	ldr	r3, [r5, #0]
 801674e:	1d1a      	adds	r2, r3, #4
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	602a      	str	r2, [r5, #0]
 8016754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801675c:	2301      	movs	r3, #1
 801675e:	e0a4      	b.n	80168aa <_printf_i+0x1f6>
 8016760:	6820      	ldr	r0, [r4, #0]
 8016762:	6829      	ldr	r1, [r5, #0]
 8016764:	0606      	lsls	r6, r0, #24
 8016766:	f101 0304 	add.w	r3, r1, #4
 801676a:	d50a      	bpl.n	8016782 <_printf_i+0xce>
 801676c:	680e      	ldr	r6, [r1, #0]
 801676e:	602b      	str	r3, [r5, #0]
 8016770:	2e00      	cmp	r6, #0
 8016772:	da03      	bge.n	801677c <_printf_i+0xc8>
 8016774:	232d      	movs	r3, #45	; 0x2d
 8016776:	4276      	negs	r6, r6
 8016778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801677c:	230a      	movs	r3, #10
 801677e:	485e      	ldr	r0, [pc, #376]	; (80168f8 <_printf_i+0x244>)
 8016780:	e019      	b.n	80167b6 <_printf_i+0x102>
 8016782:	680e      	ldr	r6, [r1, #0]
 8016784:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016788:	602b      	str	r3, [r5, #0]
 801678a:	bf18      	it	ne
 801678c:	b236      	sxthne	r6, r6
 801678e:	e7ef      	b.n	8016770 <_printf_i+0xbc>
 8016790:	682b      	ldr	r3, [r5, #0]
 8016792:	6820      	ldr	r0, [r4, #0]
 8016794:	1d19      	adds	r1, r3, #4
 8016796:	6029      	str	r1, [r5, #0]
 8016798:	0601      	lsls	r1, r0, #24
 801679a:	d501      	bpl.n	80167a0 <_printf_i+0xec>
 801679c:	681e      	ldr	r6, [r3, #0]
 801679e:	e002      	b.n	80167a6 <_printf_i+0xf2>
 80167a0:	0646      	lsls	r6, r0, #25
 80167a2:	d5fb      	bpl.n	801679c <_printf_i+0xe8>
 80167a4:	881e      	ldrh	r6, [r3, #0]
 80167a6:	2f6f      	cmp	r7, #111	; 0x6f
 80167a8:	bf0c      	ite	eq
 80167aa:	2308      	moveq	r3, #8
 80167ac:	230a      	movne	r3, #10
 80167ae:	4852      	ldr	r0, [pc, #328]	; (80168f8 <_printf_i+0x244>)
 80167b0:	2100      	movs	r1, #0
 80167b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167b6:	6865      	ldr	r5, [r4, #4]
 80167b8:	2d00      	cmp	r5, #0
 80167ba:	bfa8      	it	ge
 80167bc:	6821      	ldrge	r1, [r4, #0]
 80167be:	60a5      	str	r5, [r4, #8]
 80167c0:	bfa4      	itt	ge
 80167c2:	f021 0104 	bicge.w	r1, r1, #4
 80167c6:	6021      	strge	r1, [r4, #0]
 80167c8:	b90e      	cbnz	r6, 80167ce <_printf_i+0x11a>
 80167ca:	2d00      	cmp	r5, #0
 80167cc:	d04d      	beq.n	801686a <_printf_i+0x1b6>
 80167ce:	4615      	mov	r5, r2
 80167d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80167d4:	fb03 6711 	mls	r7, r3, r1, r6
 80167d8:	5dc7      	ldrb	r7, [r0, r7]
 80167da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80167de:	4637      	mov	r7, r6
 80167e0:	42bb      	cmp	r3, r7
 80167e2:	460e      	mov	r6, r1
 80167e4:	d9f4      	bls.n	80167d0 <_printf_i+0x11c>
 80167e6:	2b08      	cmp	r3, #8
 80167e8:	d10b      	bne.n	8016802 <_printf_i+0x14e>
 80167ea:	6823      	ldr	r3, [r4, #0]
 80167ec:	07de      	lsls	r6, r3, #31
 80167ee:	d508      	bpl.n	8016802 <_printf_i+0x14e>
 80167f0:	6923      	ldr	r3, [r4, #16]
 80167f2:	6861      	ldr	r1, [r4, #4]
 80167f4:	4299      	cmp	r1, r3
 80167f6:	bfde      	ittt	le
 80167f8:	2330      	movle	r3, #48	; 0x30
 80167fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80167fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016802:	1b52      	subs	r2, r2, r5
 8016804:	6122      	str	r2, [r4, #16]
 8016806:	464b      	mov	r3, r9
 8016808:	4621      	mov	r1, r4
 801680a:	4640      	mov	r0, r8
 801680c:	f8cd a000 	str.w	sl, [sp]
 8016810:	aa03      	add	r2, sp, #12
 8016812:	f7ff fedf 	bl	80165d4 <_printf_common>
 8016816:	3001      	adds	r0, #1
 8016818:	d14c      	bne.n	80168b4 <_printf_i+0x200>
 801681a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801681e:	b004      	add	sp, #16
 8016820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016824:	4834      	ldr	r0, [pc, #208]	; (80168f8 <_printf_i+0x244>)
 8016826:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801682a:	6829      	ldr	r1, [r5, #0]
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	f851 6b04 	ldr.w	r6, [r1], #4
 8016832:	6029      	str	r1, [r5, #0]
 8016834:	061d      	lsls	r5, r3, #24
 8016836:	d514      	bpl.n	8016862 <_printf_i+0x1ae>
 8016838:	07df      	lsls	r7, r3, #31
 801683a:	bf44      	itt	mi
 801683c:	f043 0320 	orrmi.w	r3, r3, #32
 8016840:	6023      	strmi	r3, [r4, #0]
 8016842:	b91e      	cbnz	r6, 801684c <_printf_i+0x198>
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	f023 0320 	bic.w	r3, r3, #32
 801684a:	6023      	str	r3, [r4, #0]
 801684c:	2310      	movs	r3, #16
 801684e:	e7af      	b.n	80167b0 <_printf_i+0xfc>
 8016850:	6823      	ldr	r3, [r4, #0]
 8016852:	f043 0320 	orr.w	r3, r3, #32
 8016856:	6023      	str	r3, [r4, #0]
 8016858:	2378      	movs	r3, #120	; 0x78
 801685a:	4828      	ldr	r0, [pc, #160]	; (80168fc <_printf_i+0x248>)
 801685c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016860:	e7e3      	b.n	801682a <_printf_i+0x176>
 8016862:	0659      	lsls	r1, r3, #25
 8016864:	bf48      	it	mi
 8016866:	b2b6      	uxthmi	r6, r6
 8016868:	e7e6      	b.n	8016838 <_printf_i+0x184>
 801686a:	4615      	mov	r5, r2
 801686c:	e7bb      	b.n	80167e6 <_printf_i+0x132>
 801686e:	682b      	ldr	r3, [r5, #0]
 8016870:	6826      	ldr	r6, [r4, #0]
 8016872:	1d18      	adds	r0, r3, #4
 8016874:	6961      	ldr	r1, [r4, #20]
 8016876:	6028      	str	r0, [r5, #0]
 8016878:	0635      	lsls	r5, r6, #24
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	d501      	bpl.n	8016882 <_printf_i+0x1ce>
 801687e:	6019      	str	r1, [r3, #0]
 8016880:	e002      	b.n	8016888 <_printf_i+0x1d4>
 8016882:	0670      	lsls	r0, r6, #25
 8016884:	d5fb      	bpl.n	801687e <_printf_i+0x1ca>
 8016886:	8019      	strh	r1, [r3, #0]
 8016888:	2300      	movs	r3, #0
 801688a:	4615      	mov	r5, r2
 801688c:	6123      	str	r3, [r4, #16]
 801688e:	e7ba      	b.n	8016806 <_printf_i+0x152>
 8016890:	682b      	ldr	r3, [r5, #0]
 8016892:	2100      	movs	r1, #0
 8016894:	1d1a      	adds	r2, r3, #4
 8016896:	602a      	str	r2, [r5, #0]
 8016898:	681d      	ldr	r5, [r3, #0]
 801689a:	6862      	ldr	r2, [r4, #4]
 801689c:	4628      	mov	r0, r5
 801689e:	f000 fad3 	bl	8016e48 <memchr>
 80168a2:	b108      	cbz	r0, 80168a8 <_printf_i+0x1f4>
 80168a4:	1b40      	subs	r0, r0, r5
 80168a6:	6060      	str	r0, [r4, #4]
 80168a8:	6863      	ldr	r3, [r4, #4]
 80168aa:	6123      	str	r3, [r4, #16]
 80168ac:	2300      	movs	r3, #0
 80168ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168b2:	e7a8      	b.n	8016806 <_printf_i+0x152>
 80168b4:	462a      	mov	r2, r5
 80168b6:	4649      	mov	r1, r9
 80168b8:	4640      	mov	r0, r8
 80168ba:	6923      	ldr	r3, [r4, #16]
 80168bc:	47d0      	blx	sl
 80168be:	3001      	adds	r0, #1
 80168c0:	d0ab      	beq.n	801681a <_printf_i+0x166>
 80168c2:	6823      	ldr	r3, [r4, #0]
 80168c4:	079b      	lsls	r3, r3, #30
 80168c6:	d413      	bmi.n	80168f0 <_printf_i+0x23c>
 80168c8:	68e0      	ldr	r0, [r4, #12]
 80168ca:	9b03      	ldr	r3, [sp, #12]
 80168cc:	4298      	cmp	r0, r3
 80168ce:	bfb8      	it	lt
 80168d0:	4618      	movlt	r0, r3
 80168d2:	e7a4      	b.n	801681e <_printf_i+0x16a>
 80168d4:	2301      	movs	r3, #1
 80168d6:	4632      	mov	r2, r6
 80168d8:	4649      	mov	r1, r9
 80168da:	4640      	mov	r0, r8
 80168dc:	47d0      	blx	sl
 80168de:	3001      	adds	r0, #1
 80168e0:	d09b      	beq.n	801681a <_printf_i+0x166>
 80168e2:	3501      	adds	r5, #1
 80168e4:	68e3      	ldr	r3, [r4, #12]
 80168e6:	9903      	ldr	r1, [sp, #12]
 80168e8:	1a5b      	subs	r3, r3, r1
 80168ea:	42ab      	cmp	r3, r5
 80168ec:	dcf2      	bgt.n	80168d4 <_printf_i+0x220>
 80168ee:	e7eb      	b.n	80168c8 <_printf_i+0x214>
 80168f0:	2500      	movs	r5, #0
 80168f2:	f104 0619 	add.w	r6, r4, #25
 80168f6:	e7f5      	b.n	80168e4 <_printf_i+0x230>
 80168f8:	08017879 	.word	0x08017879
 80168fc:	0801788a 	.word	0x0801788a

08016900 <_putc_r>:
 8016900:	b570      	push	{r4, r5, r6, lr}
 8016902:	460d      	mov	r5, r1
 8016904:	4614      	mov	r4, r2
 8016906:	4606      	mov	r6, r0
 8016908:	b118      	cbz	r0, 8016912 <_putc_r+0x12>
 801690a:	6983      	ldr	r3, [r0, #24]
 801690c:	b90b      	cbnz	r3, 8016912 <_putc_r+0x12>
 801690e:	f7ff fc5d 	bl	80161cc <__sinit>
 8016912:	4b1c      	ldr	r3, [pc, #112]	; (8016984 <_putc_r+0x84>)
 8016914:	429c      	cmp	r4, r3
 8016916:	d124      	bne.n	8016962 <_putc_r+0x62>
 8016918:	6874      	ldr	r4, [r6, #4]
 801691a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801691c:	07d8      	lsls	r0, r3, #31
 801691e:	d405      	bmi.n	801692c <_putc_r+0x2c>
 8016920:	89a3      	ldrh	r3, [r4, #12]
 8016922:	0599      	lsls	r1, r3, #22
 8016924:	d402      	bmi.n	801692c <_putc_r+0x2c>
 8016926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016928:	f7ff fcee 	bl	8016308 <__retarget_lock_acquire_recursive>
 801692c:	68a3      	ldr	r3, [r4, #8]
 801692e:	3b01      	subs	r3, #1
 8016930:	2b00      	cmp	r3, #0
 8016932:	60a3      	str	r3, [r4, #8]
 8016934:	da05      	bge.n	8016942 <_putc_r+0x42>
 8016936:	69a2      	ldr	r2, [r4, #24]
 8016938:	4293      	cmp	r3, r2
 801693a:	db1c      	blt.n	8016976 <_putc_r+0x76>
 801693c:	b2eb      	uxtb	r3, r5
 801693e:	2b0a      	cmp	r3, #10
 8016940:	d019      	beq.n	8016976 <_putc_r+0x76>
 8016942:	6823      	ldr	r3, [r4, #0]
 8016944:	1c5a      	adds	r2, r3, #1
 8016946:	6022      	str	r2, [r4, #0]
 8016948:	701d      	strb	r5, [r3, #0]
 801694a:	b2ed      	uxtb	r5, r5
 801694c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801694e:	07da      	lsls	r2, r3, #31
 8016950:	d405      	bmi.n	801695e <_putc_r+0x5e>
 8016952:	89a3      	ldrh	r3, [r4, #12]
 8016954:	059b      	lsls	r3, r3, #22
 8016956:	d402      	bmi.n	801695e <_putc_r+0x5e>
 8016958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801695a:	f7ff fcd6 	bl	801630a <__retarget_lock_release_recursive>
 801695e:	4628      	mov	r0, r5
 8016960:	bd70      	pop	{r4, r5, r6, pc}
 8016962:	4b09      	ldr	r3, [pc, #36]	; (8016988 <_putc_r+0x88>)
 8016964:	429c      	cmp	r4, r3
 8016966:	d101      	bne.n	801696c <_putc_r+0x6c>
 8016968:	68b4      	ldr	r4, [r6, #8]
 801696a:	e7d6      	b.n	801691a <_putc_r+0x1a>
 801696c:	4b07      	ldr	r3, [pc, #28]	; (801698c <_putc_r+0x8c>)
 801696e:	429c      	cmp	r4, r3
 8016970:	bf08      	it	eq
 8016972:	68f4      	ldreq	r4, [r6, #12]
 8016974:	e7d1      	b.n	801691a <_putc_r+0x1a>
 8016976:	4629      	mov	r1, r5
 8016978:	4622      	mov	r2, r4
 801697a:	4630      	mov	r0, r6
 801697c:	f000 f84c 	bl	8016a18 <__swbuf_r>
 8016980:	4605      	mov	r5, r0
 8016982:	e7e3      	b.n	801694c <_putc_r+0x4c>
 8016984:	08017828 	.word	0x08017828
 8016988:	08017848 	.word	0x08017848
 801698c:	08017808 	.word	0x08017808

08016990 <__sread>:
 8016990:	b510      	push	{r4, lr}
 8016992:	460c      	mov	r4, r1
 8016994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016998:	f000 fa64 	bl	8016e64 <_read_r>
 801699c:	2800      	cmp	r0, #0
 801699e:	bfab      	itete	ge
 80169a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80169a2:	89a3      	ldrhlt	r3, [r4, #12]
 80169a4:	181b      	addge	r3, r3, r0
 80169a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169aa:	bfac      	ite	ge
 80169ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80169ae:	81a3      	strhlt	r3, [r4, #12]
 80169b0:	bd10      	pop	{r4, pc}

080169b2 <__swrite>:
 80169b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169b6:	461f      	mov	r7, r3
 80169b8:	898b      	ldrh	r3, [r1, #12]
 80169ba:	4605      	mov	r5, r0
 80169bc:	05db      	lsls	r3, r3, #23
 80169be:	460c      	mov	r4, r1
 80169c0:	4616      	mov	r6, r2
 80169c2:	d505      	bpl.n	80169d0 <__swrite+0x1e>
 80169c4:	2302      	movs	r3, #2
 80169c6:	2200      	movs	r2, #0
 80169c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169cc:	f000 f9c4 	bl	8016d58 <_lseek_r>
 80169d0:	89a3      	ldrh	r3, [r4, #12]
 80169d2:	4632      	mov	r2, r6
 80169d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169d8:	81a3      	strh	r3, [r4, #12]
 80169da:	4628      	mov	r0, r5
 80169dc:	463b      	mov	r3, r7
 80169de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169e6:	f000 b869 	b.w	8016abc <_write_r>

080169ea <__sseek>:
 80169ea:	b510      	push	{r4, lr}
 80169ec:	460c      	mov	r4, r1
 80169ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169f2:	f000 f9b1 	bl	8016d58 <_lseek_r>
 80169f6:	1c43      	adds	r3, r0, #1
 80169f8:	89a3      	ldrh	r3, [r4, #12]
 80169fa:	bf15      	itete	ne
 80169fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80169fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a06:	81a3      	strheq	r3, [r4, #12]
 8016a08:	bf18      	it	ne
 8016a0a:	81a3      	strhne	r3, [r4, #12]
 8016a0c:	bd10      	pop	{r4, pc}

08016a0e <__sclose>:
 8016a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a12:	f000 b8d3 	b.w	8016bbc <_close_r>
	...

08016a18 <__swbuf_r>:
 8016a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1a:	460e      	mov	r6, r1
 8016a1c:	4614      	mov	r4, r2
 8016a1e:	4605      	mov	r5, r0
 8016a20:	b118      	cbz	r0, 8016a2a <__swbuf_r+0x12>
 8016a22:	6983      	ldr	r3, [r0, #24]
 8016a24:	b90b      	cbnz	r3, 8016a2a <__swbuf_r+0x12>
 8016a26:	f7ff fbd1 	bl	80161cc <__sinit>
 8016a2a:	4b21      	ldr	r3, [pc, #132]	; (8016ab0 <__swbuf_r+0x98>)
 8016a2c:	429c      	cmp	r4, r3
 8016a2e:	d12b      	bne.n	8016a88 <__swbuf_r+0x70>
 8016a30:	686c      	ldr	r4, [r5, #4]
 8016a32:	69a3      	ldr	r3, [r4, #24]
 8016a34:	60a3      	str	r3, [r4, #8]
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	071a      	lsls	r2, r3, #28
 8016a3a:	d52f      	bpl.n	8016a9c <__swbuf_r+0x84>
 8016a3c:	6923      	ldr	r3, [r4, #16]
 8016a3e:	b36b      	cbz	r3, 8016a9c <__swbuf_r+0x84>
 8016a40:	6923      	ldr	r3, [r4, #16]
 8016a42:	6820      	ldr	r0, [r4, #0]
 8016a44:	b2f6      	uxtb	r6, r6
 8016a46:	1ac0      	subs	r0, r0, r3
 8016a48:	6963      	ldr	r3, [r4, #20]
 8016a4a:	4637      	mov	r7, r6
 8016a4c:	4283      	cmp	r3, r0
 8016a4e:	dc04      	bgt.n	8016a5a <__swbuf_r+0x42>
 8016a50:	4621      	mov	r1, r4
 8016a52:	4628      	mov	r0, r5
 8016a54:	f000 f944 	bl	8016ce0 <_fflush_r>
 8016a58:	bb30      	cbnz	r0, 8016aa8 <__swbuf_r+0x90>
 8016a5a:	68a3      	ldr	r3, [r4, #8]
 8016a5c:	3001      	adds	r0, #1
 8016a5e:	3b01      	subs	r3, #1
 8016a60:	60a3      	str	r3, [r4, #8]
 8016a62:	6823      	ldr	r3, [r4, #0]
 8016a64:	1c5a      	adds	r2, r3, #1
 8016a66:	6022      	str	r2, [r4, #0]
 8016a68:	701e      	strb	r6, [r3, #0]
 8016a6a:	6963      	ldr	r3, [r4, #20]
 8016a6c:	4283      	cmp	r3, r0
 8016a6e:	d004      	beq.n	8016a7a <__swbuf_r+0x62>
 8016a70:	89a3      	ldrh	r3, [r4, #12]
 8016a72:	07db      	lsls	r3, r3, #31
 8016a74:	d506      	bpl.n	8016a84 <__swbuf_r+0x6c>
 8016a76:	2e0a      	cmp	r6, #10
 8016a78:	d104      	bne.n	8016a84 <__swbuf_r+0x6c>
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	f000 f92f 	bl	8016ce0 <_fflush_r>
 8016a82:	b988      	cbnz	r0, 8016aa8 <__swbuf_r+0x90>
 8016a84:	4638      	mov	r0, r7
 8016a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a88:	4b0a      	ldr	r3, [pc, #40]	; (8016ab4 <__swbuf_r+0x9c>)
 8016a8a:	429c      	cmp	r4, r3
 8016a8c:	d101      	bne.n	8016a92 <__swbuf_r+0x7a>
 8016a8e:	68ac      	ldr	r4, [r5, #8]
 8016a90:	e7cf      	b.n	8016a32 <__swbuf_r+0x1a>
 8016a92:	4b09      	ldr	r3, [pc, #36]	; (8016ab8 <__swbuf_r+0xa0>)
 8016a94:	429c      	cmp	r4, r3
 8016a96:	bf08      	it	eq
 8016a98:	68ec      	ldreq	r4, [r5, #12]
 8016a9a:	e7ca      	b.n	8016a32 <__swbuf_r+0x1a>
 8016a9c:	4621      	mov	r1, r4
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	f000 f81e 	bl	8016ae0 <__swsetup_r>
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	d0cb      	beq.n	8016a40 <__swbuf_r+0x28>
 8016aa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016aac:	e7ea      	b.n	8016a84 <__swbuf_r+0x6c>
 8016aae:	bf00      	nop
 8016ab0:	08017828 	.word	0x08017828
 8016ab4:	08017848 	.word	0x08017848
 8016ab8:	08017808 	.word	0x08017808

08016abc <_write_r>:
 8016abc:	b538      	push	{r3, r4, r5, lr}
 8016abe:	4604      	mov	r4, r0
 8016ac0:	4608      	mov	r0, r1
 8016ac2:	4611      	mov	r1, r2
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	4d05      	ldr	r5, [pc, #20]	; (8016adc <_write_r+0x20>)
 8016ac8:	602a      	str	r2, [r5, #0]
 8016aca:	461a      	mov	r2, r3
 8016acc:	f7eb fa9c 	bl	8002008 <_write>
 8016ad0:	1c43      	adds	r3, r0, #1
 8016ad2:	d102      	bne.n	8016ada <_write_r+0x1e>
 8016ad4:	682b      	ldr	r3, [r5, #0]
 8016ad6:	b103      	cbz	r3, 8016ada <_write_r+0x1e>
 8016ad8:	6023      	str	r3, [r4, #0]
 8016ada:	bd38      	pop	{r3, r4, r5, pc}
 8016adc:	2000117c 	.word	0x2000117c

08016ae0 <__swsetup_r>:
 8016ae0:	4b32      	ldr	r3, [pc, #200]	; (8016bac <__swsetup_r+0xcc>)
 8016ae2:	b570      	push	{r4, r5, r6, lr}
 8016ae4:	681d      	ldr	r5, [r3, #0]
 8016ae6:	4606      	mov	r6, r0
 8016ae8:	460c      	mov	r4, r1
 8016aea:	b125      	cbz	r5, 8016af6 <__swsetup_r+0x16>
 8016aec:	69ab      	ldr	r3, [r5, #24]
 8016aee:	b913      	cbnz	r3, 8016af6 <__swsetup_r+0x16>
 8016af0:	4628      	mov	r0, r5
 8016af2:	f7ff fb6b 	bl	80161cc <__sinit>
 8016af6:	4b2e      	ldr	r3, [pc, #184]	; (8016bb0 <__swsetup_r+0xd0>)
 8016af8:	429c      	cmp	r4, r3
 8016afa:	d10f      	bne.n	8016b1c <__swsetup_r+0x3c>
 8016afc:	686c      	ldr	r4, [r5, #4]
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b04:	0719      	lsls	r1, r3, #28
 8016b06:	d42c      	bmi.n	8016b62 <__swsetup_r+0x82>
 8016b08:	06dd      	lsls	r5, r3, #27
 8016b0a:	d411      	bmi.n	8016b30 <__swsetup_r+0x50>
 8016b0c:	2309      	movs	r3, #9
 8016b0e:	6033      	str	r3, [r6, #0]
 8016b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b18:	81a3      	strh	r3, [r4, #12]
 8016b1a:	e03e      	b.n	8016b9a <__swsetup_r+0xba>
 8016b1c:	4b25      	ldr	r3, [pc, #148]	; (8016bb4 <__swsetup_r+0xd4>)
 8016b1e:	429c      	cmp	r4, r3
 8016b20:	d101      	bne.n	8016b26 <__swsetup_r+0x46>
 8016b22:	68ac      	ldr	r4, [r5, #8]
 8016b24:	e7eb      	b.n	8016afe <__swsetup_r+0x1e>
 8016b26:	4b24      	ldr	r3, [pc, #144]	; (8016bb8 <__swsetup_r+0xd8>)
 8016b28:	429c      	cmp	r4, r3
 8016b2a:	bf08      	it	eq
 8016b2c:	68ec      	ldreq	r4, [r5, #12]
 8016b2e:	e7e6      	b.n	8016afe <__swsetup_r+0x1e>
 8016b30:	0758      	lsls	r0, r3, #29
 8016b32:	d512      	bpl.n	8016b5a <__swsetup_r+0x7a>
 8016b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b36:	b141      	cbz	r1, 8016b4a <__swsetup_r+0x6a>
 8016b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b3c:	4299      	cmp	r1, r3
 8016b3e:	d002      	beq.n	8016b46 <__swsetup_r+0x66>
 8016b40:	4630      	mov	r0, r6
 8016b42:	f7ff f98f 	bl	8015e64 <_free_r>
 8016b46:	2300      	movs	r3, #0
 8016b48:	6363      	str	r3, [r4, #52]	; 0x34
 8016b4a:	89a3      	ldrh	r3, [r4, #12]
 8016b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016b50:	81a3      	strh	r3, [r4, #12]
 8016b52:	2300      	movs	r3, #0
 8016b54:	6063      	str	r3, [r4, #4]
 8016b56:	6923      	ldr	r3, [r4, #16]
 8016b58:	6023      	str	r3, [r4, #0]
 8016b5a:	89a3      	ldrh	r3, [r4, #12]
 8016b5c:	f043 0308 	orr.w	r3, r3, #8
 8016b60:	81a3      	strh	r3, [r4, #12]
 8016b62:	6923      	ldr	r3, [r4, #16]
 8016b64:	b94b      	cbnz	r3, 8016b7a <__swsetup_r+0x9a>
 8016b66:	89a3      	ldrh	r3, [r4, #12]
 8016b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b70:	d003      	beq.n	8016b7a <__swsetup_r+0x9a>
 8016b72:	4621      	mov	r1, r4
 8016b74:	4630      	mov	r0, r6
 8016b76:	f000 f927 	bl	8016dc8 <__smakebuf_r>
 8016b7a:	89a0      	ldrh	r0, [r4, #12]
 8016b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b80:	f010 0301 	ands.w	r3, r0, #1
 8016b84:	d00a      	beq.n	8016b9c <__swsetup_r+0xbc>
 8016b86:	2300      	movs	r3, #0
 8016b88:	60a3      	str	r3, [r4, #8]
 8016b8a:	6963      	ldr	r3, [r4, #20]
 8016b8c:	425b      	negs	r3, r3
 8016b8e:	61a3      	str	r3, [r4, #24]
 8016b90:	6923      	ldr	r3, [r4, #16]
 8016b92:	b943      	cbnz	r3, 8016ba6 <__swsetup_r+0xc6>
 8016b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016b98:	d1ba      	bne.n	8016b10 <__swsetup_r+0x30>
 8016b9a:	bd70      	pop	{r4, r5, r6, pc}
 8016b9c:	0781      	lsls	r1, r0, #30
 8016b9e:	bf58      	it	pl
 8016ba0:	6963      	ldrpl	r3, [r4, #20]
 8016ba2:	60a3      	str	r3, [r4, #8]
 8016ba4:	e7f4      	b.n	8016b90 <__swsetup_r+0xb0>
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	e7f7      	b.n	8016b9a <__swsetup_r+0xba>
 8016baa:	bf00      	nop
 8016bac:	2000012c 	.word	0x2000012c
 8016bb0:	08017828 	.word	0x08017828
 8016bb4:	08017848 	.word	0x08017848
 8016bb8:	08017808 	.word	0x08017808

08016bbc <_close_r>:
 8016bbc:	b538      	push	{r3, r4, r5, lr}
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	4d05      	ldr	r5, [pc, #20]	; (8016bd8 <_close_r+0x1c>)
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	4608      	mov	r0, r1
 8016bc6:	602b      	str	r3, [r5, #0]
 8016bc8:	f7eb fa3a 	bl	8002040 <_close>
 8016bcc:	1c43      	adds	r3, r0, #1
 8016bce:	d102      	bne.n	8016bd6 <_close_r+0x1a>
 8016bd0:	682b      	ldr	r3, [r5, #0]
 8016bd2:	b103      	cbz	r3, 8016bd6 <_close_r+0x1a>
 8016bd4:	6023      	str	r3, [r4, #0]
 8016bd6:	bd38      	pop	{r3, r4, r5, pc}
 8016bd8:	2000117c 	.word	0x2000117c

08016bdc <__sflush_r>:
 8016bdc:	898a      	ldrh	r2, [r1, #12]
 8016bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016be0:	4605      	mov	r5, r0
 8016be2:	0710      	lsls	r0, r2, #28
 8016be4:	460c      	mov	r4, r1
 8016be6:	d457      	bmi.n	8016c98 <__sflush_r+0xbc>
 8016be8:	684b      	ldr	r3, [r1, #4]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	dc04      	bgt.n	8016bf8 <__sflush_r+0x1c>
 8016bee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	dc01      	bgt.n	8016bf8 <__sflush_r+0x1c>
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bfa:	2e00      	cmp	r6, #0
 8016bfc:	d0fa      	beq.n	8016bf4 <__sflush_r+0x18>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016c04:	682f      	ldr	r7, [r5, #0]
 8016c06:	602b      	str	r3, [r5, #0]
 8016c08:	d032      	beq.n	8016c70 <__sflush_r+0x94>
 8016c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016c0c:	89a3      	ldrh	r3, [r4, #12]
 8016c0e:	075a      	lsls	r2, r3, #29
 8016c10:	d505      	bpl.n	8016c1e <__sflush_r+0x42>
 8016c12:	6863      	ldr	r3, [r4, #4]
 8016c14:	1ac0      	subs	r0, r0, r3
 8016c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016c18:	b10b      	cbz	r3, 8016c1e <__sflush_r+0x42>
 8016c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c1c:	1ac0      	subs	r0, r0, r3
 8016c1e:	2300      	movs	r3, #0
 8016c20:	4602      	mov	r2, r0
 8016c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c24:	4628      	mov	r0, r5
 8016c26:	6a21      	ldr	r1, [r4, #32]
 8016c28:	47b0      	blx	r6
 8016c2a:	1c43      	adds	r3, r0, #1
 8016c2c:	89a3      	ldrh	r3, [r4, #12]
 8016c2e:	d106      	bne.n	8016c3e <__sflush_r+0x62>
 8016c30:	6829      	ldr	r1, [r5, #0]
 8016c32:	291d      	cmp	r1, #29
 8016c34:	d82c      	bhi.n	8016c90 <__sflush_r+0xb4>
 8016c36:	4a29      	ldr	r2, [pc, #164]	; (8016cdc <__sflush_r+0x100>)
 8016c38:	40ca      	lsrs	r2, r1
 8016c3a:	07d6      	lsls	r6, r2, #31
 8016c3c:	d528      	bpl.n	8016c90 <__sflush_r+0xb4>
 8016c3e:	2200      	movs	r2, #0
 8016c40:	6062      	str	r2, [r4, #4]
 8016c42:	6922      	ldr	r2, [r4, #16]
 8016c44:	04d9      	lsls	r1, r3, #19
 8016c46:	6022      	str	r2, [r4, #0]
 8016c48:	d504      	bpl.n	8016c54 <__sflush_r+0x78>
 8016c4a:	1c42      	adds	r2, r0, #1
 8016c4c:	d101      	bne.n	8016c52 <__sflush_r+0x76>
 8016c4e:	682b      	ldr	r3, [r5, #0]
 8016c50:	b903      	cbnz	r3, 8016c54 <__sflush_r+0x78>
 8016c52:	6560      	str	r0, [r4, #84]	; 0x54
 8016c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c56:	602f      	str	r7, [r5, #0]
 8016c58:	2900      	cmp	r1, #0
 8016c5a:	d0cb      	beq.n	8016bf4 <__sflush_r+0x18>
 8016c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c60:	4299      	cmp	r1, r3
 8016c62:	d002      	beq.n	8016c6a <__sflush_r+0x8e>
 8016c64:	4628      	mov	r0, r5
 8016c66:	f7ff f8fd 	bl	8015e64 <_free_r>
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8016c6e:	e7c2      	b.n	8016bf6 <__sflush_r+0x1a>
 8016c70:	6a21      	ldr	r1, [r4, #32]
 8016c72:	2301      	movs	r3, #1
 8016c74:	4628      	mov	r0, r5
 8016c76:	47b0      	blx	r6
 8016c78:	1c41      	adds	r1, r0, #1
 8016c7a:	d1c7      	bne.n	8016c0c <__sflush_r+0x30>
 8016c7c:	682b      	ldr	r3, [r5, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d0c4      	beq.n	8016c0c <__sflush_r+0x30>
 8016c82:	2b1d      	cmp	r3, #29
 8016c84:	d001      	beq.n	8016c8a <__sflush_r+0xae>
 8016c86:	2b16      	cmp	r3, #22
 8016c88:	d101      	bne.n	8016c8e <__sflush_r+0xb2>
 8016c8a:	602f      	str	r7, [r5, #0]
 8016c8c:	e7b2      	b.n	8016bf4 <__sflush_r+0x18>
 8016c8e:	89a3      	ldrh	r3, [r4, #12]
 8016c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c94:	81a3      	strh	r3, [r4, #12]
 8016c96:	e7ae      	b.n	8016bf6 <__sflush_r+0x1a>
 8016c98:	690f      	ldr	r7, [r1, #16]
 8016c9a:	2f00      	cmp	r7, #0
 8016c9c:	d0aa      	beq.n	8016bf4 <__sflush_r+0x18>
 8016c9e:	0793      	lsls	r3, r2, #30
 8016ca0:	bf18      	it	ne
 8016ca2:	2300      	movne	r3, #0
 8016ca4:	680e      	ldr	r6, [r1, #0]
 8016ca6:	bf08      	it	eq
 8016ca8:	694b      	ldreq	r3, [r1, #20]
 8016caa:	1bf6      	subs	r6, r6, r7
 8016cac:	600f      	str	r7, [r1, #0]
 8016cae:	608b      	str	r3, [r1, #8]
 8016cb0:	2e00      	cmp	r6, #0
 8016cb2:	dd9f      	ble.n	8016bf4 <__sflush_r+0x18>
 8016cb4:	4633      	mov	r3, r6
 8016cb6:	463a      	mov	r2, r7
 8016cb8:	4628      	mov	r0, r5
 8016cba:	6a21      	ldr	r1, [r4, #32]
 8016cbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8016cc0:	47e0      	blx	ip
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	dc06      	bgt.n	8016cd4 <__sflush_r+0xf8>
 8016cc6:	89a3      	ldrh	r3, [r4, #12]
 8016cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cd0:	81a3      	strh	r3, [r4, #12]
 8016cd2:	e790      	b.n	8016bf6 <__sflush_r+0x1a>
 8016cd4:	4407      	add	r7, r0
 8016cd6:	1a36      	subs	r6, r6, r0
 8016cd8:	e7ea      	b.n	8016cb0 <__sflush_r+0xd4>
 8016cda:	bf00      	nop
 8016cdc:	20400001 	.word	0x20400001

08016ce0 <_fflush_r>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	690b      	ldr	r3, [r1, #16]
 8016ce4:	4605      	mov	r5, r0
 8016ce6:	460c      	mov	r4, r1
 8016ce8:	b913      	cbnz	r3, 8016cf0 <_fflush_r+0x10>
 8016cea:	2500      	movs	r5, #0
 8016cec:	4628      	mov	r0, r5
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	b118      	cbz	r0, 8016cfa <_fflush_r+0x1a>
 8016cf2:	6983      	ldr	r3, [r0, #24]
 8016cf4:	b90b      	cbnz	r3, 8016cfa <_fflush_r+0x1a>
 8016cf6:	f7ff fa69 	bl	80161cc <__sinit>
 8016cfa:	4b14      	ldr	r3, [pc, #80]	; (8016d4c <_fflush_r+0x6c>)
 8016cfc:	429c      	cmp	r4, r3
 8016cfe:	d11b      	bne.n	8016d38 <_fflush_r+0x58>
 8016d00:	686c      	ldr	r4, [r5, #4]
 8016d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d0ef      	beq.n	8016cea <_fflush_r+0xa>
 8016d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016d0c:	07d0      	lsls	r0, r2, #31
 8016d0e:	d404      	bmi.n	8016d1a <_fflush_r+0x3a>
 8016d10:	0599      	lsls	r1, r3, #22
 8016d12:	d402      	bmi.n	8016d1a <_fflush_r+0x3a>
 8016d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d16:	f7ff faf7 	bl	8016308 <__retarget_lock_acquire_recursive>
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	4621      	mov	r1, r4
 8016d1e:	f7ff ff5d 	bl	8016bdc <__sflush_r>
 8016d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d24:	4605      	mov	r5, r0
 8016d26:	07da      	lsls	r2, r3, #31
 8016d28:	d4e0      	bmi.n	8016cec <_fflush_r+0xc>
 8016d2a:	89a3      	ldrh	r3, [r4, #12]
 8016d2c:	059b      	lsls	r3, r3, #22
 8016d2e:	d4dd      	bmi.n	8016cec <_fflush_r+0xc>
 8016d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d32:	f7ff faea 	bl	801630a <__retarget_lock_release_recursive>
 8016d36:	e7d9      	b.n	8016cec <_fflush_r+0xc>
 8016d38:	4b05      	ldr	r3, [pc, #20]	; (8016d50 <_fflush_r+0x70>)
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	d101      	bne.n	8016d42 <_fflush_r+0x62>
 8016d3e:	68ac      	ldr	r4, [r5, #8]
 8016d40:	e7df      	b.n	8016d02 <_fflush_r+0x22>
 8016d42:	4b04      	ldr	r3, [pc, #16]	; (8016d54 <_fflush_r+0x74>)
 8016d44:	429c      	cmp	r4, r3
 8016d46:	bf08      	it	eq
 8016d48:	68ec      	ldreq	r4, [r5, #12]
 8016d4a:	e7da      	b.n	8016d02 <_fflush_r+0x22>
 8016d4c:	08017828 	.word	0x08017828
 8016d50:	08017848 	.word	0x08017848
 8016d54:	08017808 	.word	0x08017808

08016d58 <_lseek_r>:
 8016d58:	b538      	push	{r3, r4, r5, lr}
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	4608      	mov	r0, r1
 8016d5e:	4611      	mov	r1, r2
 8016d60:	2200      	movs	r2, #0
 8016d62:	4d05      	ldr	r5, [pc, #20]	; (8016d78 <_lseek_r+0x20>)
 8016d64:	602a      	str	r2, [r5, #0]
 8016d66:	461a      	mov	r2, r3
 8016d68:	f7eb f98e 	bl	8002088 <_lseek>
 8016d6c:	1c43      	adds	r3, r0, #1
 8016d6e:	d102      	bne.n	8016d76 <_lseek_r+0x1e>
 8016d70:	682b      	ldr	r3, [r5, #0]
 8016d72:	b103      	cbz	r3, 8016d76 <_lseek_r+0x1e>
 8016d74:	6023      	str	r3, [r4, #0]
 8016d76:	bd38      	pop	{r3, r4, r5, pc}
 8016d78:	2000117c 	.word	0x2000117c

08016d7c <__swhatbuf_r>:
 8016d7c:	b570      	push	{r4, r5, r6, lr}
 8016d7e:	460e      	mov	r6, r1
 8016d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d84:	4614      	mov	r4, r2
 8016d86:	2900      	cmp	r1, #0
 8016d88:	461d      	mov	r5, r3
 8016d8a:	b096      	sub	sp, #88	; 0x58
 8016d8c:	da08      	bge.n	8016da0 <__swhatbuf_r+0x24>
 8016d8e:	2200      	movs	r2, #0
 8016d90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016d94:	602a      	str	r2, [r5, #0]
 8016d96:	061a      	lsls	r2, r3, #24
 8016d98:	d410      	bmi.n	8016dbc <__swhatbuf_r+0x40>
 8016d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d9e:	e00e      	b.n	8016dbe <__swhatbuf_r+0x42>
 8016da0:	466a      	mov	r2, sp
 8016da2:	f000 f871 	bl	8016e88 <_fstat_r>
 8016da6:	2800      	cmp	r0, #0
 8016da8:	dbf1      	blt.n	8016d8e <__swhatbuf_r+0x12>
 8016daa:	9a01      	ldr	r2, [sp, #4]
 8016dac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016db0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016db4:	425a      	negs	r2, r3
 8016db6:	415a      	adcs	r2, r3
 8016db8:	602a      	str	r2, [r5, #0]
 8016dba:	e7ee      	b.n	8016d9a <__swhatbuf_r+0x1e>
 8016dbc:	2340      	movs	r3, #64	; 0x40
 8016dbe:	2000      	movs	r0, #0
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	b016      	add	sp, #88	; 0x58
 8016dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016dc8 <__smakebuf_r>:
 8016dc8:	898b      	ldrh	r3, [r1, #12]
 8016dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016dcc:	079d      	lsls	r5, r3, #30
 8016dce:	4606      	mov	r6, r0
 8016dd0:	460c      	mov	r4, r1
 8016dd2:	d507      	bpl.n	8016de4 <__smakebuf_r+0x1c>
 8016dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016dd8:	6023      	str	r3, [r4, #0]
 8016dda:	6123      	str	r3, [r4, #16]
 8016ddc:	2301      	movs	r3, #1
 8016dde:	6163      	str	r3, [r4, #20]
 8016de0:	b002      	add	sp, #8
 8016de2:	bd70      	pop	{r4, r5, r6, pc}
 8016de4:	466a      	mov	r2, sp
 8016de6:	ab01      	add	r3, sp, #4
 8016de8:	f7ff ffc8 	bl	8016d7c <__swhatbuf_r>
 8016dec:	9900      	ldr	r1, [sp, #0]
 8016dee:	4605      	mov	r5, r0
 8016df0:	4630      	mov	r0, r6
 8016df2:	f7ff f89f 	bl	8015f34 <_malloc_r>
 8016df6:	b948      	cbnz	r0, 8016e0c <__smakebuf_r+0x44>
 8016df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dfc:	059a      	lsls	r2, r3, #22
 8016dfe:	d4ef      	bmi.n	8016de0 <__smakebuf_r+0x18>
 8016e00:	f023 0303 	bic.w	r3, r3, #3
 8016e04:	f043 0302 	orr.w	r3, r3, #2
 8016e08:	81a3      	strh	r3, [r4, #12]
 8016e0a:	e7e3      	b.n	8016dd4 <__smakebuf_r+0xc>
 8016e0c:	4b0d      	ldr	r3, [pc, #52]	; (8016e44 <__smakebuf_r+0x7c>)
 8016e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016e10:	89a3      	ldrh	r3, [r4, #12]
 8016e12:	6020      	str	r0, [r4, #0]
 8016e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e18:	81a3      	strh	r3, [r4, #12]
 8016e1a:	9b00      	ldr	r3, [sp, #0]
 8016e1c:	6120      	str	r0, [r4, #16]
 8016e1e:	6163      	str	r3, [r4, #20]
 8016e20:	9b01      	ldr	r3, [sp, #4]
 8016e22:	b15b      	cbz	r3, 8016e3c <__smakebuf_r+0x74>
 8016e24:	4630      	mov	r0, r6
 8016e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e2a:	f000 f83f 	bl	8016eac <_isatty_r>
 8016e2e:	b128      	cbz	r0, 8016e3c <__smakebuf_r+0x74>
 8016e30:	89a3      	ldrh	r3, [r4, #12]
 8016e32:	f023 0303 	bic.w	r3, r3, #3
 8016e36:	f043 0301 	orr.w	r3, r3, #1
 8016e3a:	81a3      	strh	r3, [r4, #12]
 8016e3c:	89a0      	ldrh	r0, [r4, #12]
 8016e3e:	4305      	orrs	r5, r0
 8016e40:	81a5      	strh	r5, [r4, #12]
 8016e42:	e7cd      	b.n	8016de0 <__smakebuf_r+0x18>
 8016e44:	08016165 	.word	0x08016165

08016e48 <memchr>:
 8016e48:	4603      	mov	r3, r0
 8016e4a:	b510      	push	{r4, lr}
 8016e4c:	b2c9      	uxtb	r1, r1
 8016e4e:	4402      	add	r2, r0
 8016e50:	4293      	cmp	r3, r2
 8016e52:	4618      	mov	r0, r3
 8016e54:	d101      	bne.n	8016e5a <memchr+0x12>
 8016e56:	2000      	movs	r0, #0
 8016e58:	e003      	b.n	8016e62 <memchr+0x1a>
 8016e5a:	7804      	ldrb	r4, [r0, #0]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	428c      	cmp	r4, r1
 8016e60:	d1f6      	bne.n	8016e50 <memchr+0x8>
 8016e62:	bd10      	pop	{r4, pc}

08016e64 <_read_r>:
 8016e64:	b538      	push	{r3, r4, r5, lr}
 8016e66:	4604      	mov	r4, r0
 8016e68:	4608      	mov	r0, r1
 8016e6a:	4611      	mov	r1, r2
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	4d05      	ldr	r5, [pc, #20]	; (8016e84 <_read_r+0x20>)
 8016e70:	602a      	str	r2, [r5, #0]
 8016e72:	461a      	mov	r2, r3
 8016e74:	f7eb f8ab 	bl	8001fce <_read>
 8016e78:	1c43      	adds	r3, r0, #1
 8016e7a:	d102      	bne.n	8016e82 <_read_r+0x1e>
 8016e7c:	682b      	ldr	r3, [r5, #0]
 8016e7e:	b103      	cbz	r3, 8016e82 <_read_r+0x1e>
 8016e80:	6023      	str	r3, [r4, #0]
 8016e82:	bd38      	pop	{r3, r4, r5, pc}
 8016e84:	2000117c 	.word	0x2000117c

08016e88 <_fstat_r>:
 8016e88:	b538      	push	{r3, r4, r5, lr}
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	4d06      	ldr	r5, [pc, #24]	; (8016ea8 <_fstat_r+0x20>)
 8016e8e:	4604      	mov	r4, r0
 8016e90:	4608      	mov	r0, r1
 8016e92:	4611      	mov	r1, r2
 8016e94:	602b      	str	r3, [r5, #0]
 8016e96:	f7eb f8de 	bl	8002056 <_fstat>
 8016e9a:	1c43      	adds	r3, r0, #1
 8016e9c:	d102      	bne.n	8016ea4 <_fstat_r+0x1c>
 8016e9e:	682b      	ldr	r3, [r5, #0]
 8016ea0:	b103      	cbz	r3, 8016ea4 <_fstat_r+0x1c>
 8016ea2:	6023      	str	r3, [r4, #0]
 8016ea4:	bd38      	pop	{r3, r4, r5, pc}
 8016ea6:	bf00      	nop
 8016ea8:	2000117c 	.word	0x2000117c

08016eac <_isatty_r>:
 8016eac:	b538      	push	{r3, r4, r5, lr}
 8016eae:	2300      	movs	r3, #0
 8016eb0:	4d05      	ldr	r5, [pc, #20]	; (8016ec8 <_isatty_r+0x1c>)
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	4608      	mov	r0, r1
 8016eb6:	602b      	str	r3, [r5, #0]
 8016eb8:	f7eb f8dc 	bl	8002074 <_isatty>
 8016ebc:	1c43      	adds	r3, r0, #1
 8016ebe:	d102      	bne.n	8016ec6 <_isatty_r+0x1a>
 8016ec0:	682b      	ldr	r3, [r5, #0]
 8016ec2:	b103      	cbz	r3, 8016ec6 <_isatty_r+0x1a>
 8016ec4:	6023      	str	r3, [r4, #0]
 8016ec6:	bd38      	pop	{r3, r4, r5, pc}
 8016ec8:	2000117c 	.word	0x2000117c

08016ecc <_init>:
 8016ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ece:	bf00      	nop
 8016ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ed2:	bc08      	pop	{r3}
 8016ed4:	469e      	mov	lr, r3
 8016ed6:	4770      	bx	lr

08016ed8 <_fini>:
 8016ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eda:	bf00      	nop
 8016edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ede:	bc08      	pop	{r3}
 8016ee0:	469e      	mov	lr, r3
 8016ee2:	4770      	bx	lr
