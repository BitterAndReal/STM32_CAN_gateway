
STM32CubeIDE NMEA2000 battery example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fd4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080151bc  080151bc  000251bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156b8  080156b8  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  080156b8  080156b8  000256b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156c0  080156c0  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080156c0  080156c0  000256c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080156c8  080156c8  000256c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080156cc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd4  20000190  0801585c  00030190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  0801585c  00031164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cc63  00000000  00000000  000301b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074c7  00000000  00000000  0006ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029e0  00000000  00000000  000742e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027b8  00000000  00000000  00076cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c78  00000000  00000000  00079480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c461  00000000  00000000  000a20f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ba9  00000000  00000000  000ce559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a6102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bee8  00000000  00000000  001a6154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000190 	.word	0x20000190
 8000204:	00000000 	.word	0x00000000
 8000208:	080151a4 	.word	0x080151a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000194 	.word	0x20000194
 8000224:	080151a4 	.word	0x080151a4

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 b976 	b.w	8000e8c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9e08      	ldr	r6, [sp, #32]
 8000bbe:	460d      	mov	r5, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14d      	bne.n	8000c64 <__udivmoddi4+0xac>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4694      	mov	ip, r2
 8000bcc:	d968      	bls.n	8000ca0 <__udivmoddi4+0xe8>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b152      	cbz	r2, 8000bea <__udivmoddi4+0x32>
 8000bd4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bd8:	f1c2 0120 	rsb	r1, r2, #32
 8000bdc:	fa20 f101 	lsr.w	r1, r0, r1
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	ea41 0803 	orr.w	r8, r1, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	fb01 8817 	mls	r8, r1, r7, r8
 8000bfa:	fb07 f00e 	mul.w	r0, r7, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	4298      	cmp	r0, r3
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x66>
 8000c08:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000c10:	f080 811e 	bcs.w	8000e50 <__udivmoddi4+0x298>
 8000c14:	4298      	cmp	r0, r3
 8000c16:	f240 811b 	bls.w	8000e50 <__udivmoddi4+0x298>
 8000c1a:	3f02      	subs	r7, #2
 8000c1c:	4463      	add	r3, ip
 8000c1e:	1a1b      	subs	r3, r3, r0
 8000c20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c24:	fb01 3310 	mls	r3, r1, r0, r3
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8109 	bcs.w	8000e54 <__udivmoddi4+0x29c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8106 	bls.w	8000e54 <__udivmoddi4+0x29c>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	eba4 040e 	sub.w	r4, r4, lr
 8000c52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa8>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	40d4      	lsrs	r4, r2
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0xc2>
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	f000 80ee 	beq.w	8000e4a <__udivmoddi4+0x292>
 8000c6e:	2100      	movs	r1, #0
 8000c70:	e9c6 0500 	strd	r0, r5, [r6]
 8000c74:	4608      	mov	r0, r1
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x160>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd4>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fc 	bhi.w	8000e84 <__udivmoddi4+0x2cc>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e2      	beq.n	8000c60 <__udivmoddi4+0xa8>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7df      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xec>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 8091 	bne.w	8000dd0 <__udivmoddi4+0x218>
 8000cae:	eba1 000c 	sub.w	r0, r1, ip
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb8:	fa1f fe8c 	uxth.w	lr, ip
 8000cbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000cc4:	0c25      	lsrs	r5, r4, #16
 8000cc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cca:	fb0e f003 	mul.w	r0, lr, r3
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x12c>
 8000cd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x12a>
 8000cdc:	42a8      	cmp	r0, r5
 8000cde:	f200 80ce 	bhi.w	8000e7e <__udivmoddi4+0x2c6>
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	1a2d      	subs	r5, r5, r0
 8000ce6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cea:	fb07 5510 	mls	r5, r7, r0, r5
 8000cee:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x156>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x154>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80b6 	bhi.w	8000e78 <__udivmoddi4+0x2c0>
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d16:	e79e      	b.n	8000c56 <__udivmoddi4+0x9e>
 8000d18:	f1c1 0720 	rsb	r7, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fbba f8f9 	udiv	r8, sl, r9
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d3a:	408d      	lsls	r5, r1
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	431d      	orrs	r5, r3
 8000d42:	fa00 f301 	lsl.w	r3, r0, r1
 8000d46:	fb08 f00e 	mul.w	r0, r8, lr
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b8>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2bc>
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2bc>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4464      	add	r4, ip
 8000d70:	1a24      	subs	r4, r4, r0
 8000d72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d76:	fb09 4410 	mls	r4, r9, r0, r4
 8000d7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7e:	b2ad      	uxth	r5, r5
 8000d80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1e2>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2b4>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2b4>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4464      	add	r4, ip
 8000d9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46ae      	mov	lr, r5
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x2a4>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x2a0>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2d0>
 8000db4:	ebb3 0208 	subs.w	r2, r3, r8
 8000db8:	eb64 040e 	sbc.w	r4, r4, lr
 8000dbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000dc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc4:	431f      	orrs	r7, r3
 8000dc6:	40cc      	lsrs	r4, r1
 8000dc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	f1c2 0120 	rsb	r1, r2, #32
 8000dd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	4095      	lsls	r5, r2
 8000de6:	430d      	orrs	r5, r1
 8000de8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dec:	fb07 3311 	mls	r3, r7, r1, r3
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000dfe:	4283      	cmp	r3, r0
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x260>
 8000e06:	eb1c 0000 	adds.w	r0, ip, r0
 8000e0a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b8>
 8000e10:	4283      	cmp	r3, r0
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b8>
 8000e14:	3902      	subs	r1, #2
 8000e16:	4460      	add	r0, ip
 8000e18:	1ac0      	subs	r0, r0, r3
 8000e1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000e22:	b2ad      	uxth	r5, r5
 8000e24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e28:	fb03 f00e 	mul.w	r0, r3, lr
 8000e2c:	42a8      	cmp	r0, r5
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x28a>
 8000e30:	eb1c 0505 	adds.w	r5, ip, r5
 8000e34:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3a:	42a8      	cmp	r0, r5
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4465      	add	r5, ip
 8000e42:	1a28      	subs	r0, r5, r0
 8000e44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0x104>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e707      	b.n	8000c60 <__udivmoddi4+0xa8>
 8000e50:	462f      	mov	r7, r5
 8000e52:	e6e4      	b.n	8000c1e <__udivmoddi4+0x66>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6f9      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e58:	454b      	cmp	r3, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f8>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f8>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x28a>
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1e2>
 8000e70:	4641      	mov	r1, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b8>
 8000e78:	4464      	add	r4, ip
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	e747      	b.n	8000d0e <__udivmoddi4+0x156>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4465      	add	r5, ip
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x12c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e706      	b.n	8000c96 <__udivmoddi4+0xde>
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa8>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <cpp_link>:
	extern "C"
	{
#endif

	void cpp_link (void)
		{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
		    myCppProcessInit();
 8000e94:	f000 fc90 	bl	80017b8 <_Z16myCppProcessInitv>
		    myCppProcess();
 8000e98:	f000 fcd6 	bl	8001848 <_Z12myCppProcessv>

		}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f000 ffd6 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f810 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 f986 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb0:	f000 f966 	bl	8001180 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eb4:	f000 f870 	bl	8000f98 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000eb8:	f000 f8c8 	bl	800104c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000ebc:	f013 fa4a 	bl	8014354 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000ec0:	f000 f910 	bl	80010e4 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cpp_link();
 8000ec4:	f7ff ffe4 	bl	8000e90 <cpp_link>
  // we never exit cpp_link()!!!!
  // while (1) should be empty

  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <main+0x28>
	...

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09c      	sub	sp, #112	; 0x70
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed6:	2238      	movs	r2, #56	; 0x38
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f014 f81c 	bl	8014f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f014 f80e 	bl	8014f18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 ff02 	bl	8004d34 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f997 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	2102      	movs	r1, #2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fa02 	bl	8005360 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f62:	f000 f981 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f66:	2312      	movs	r3, #18
 8000f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fc2a 	bl	80057d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f82:	f000 f971 	bl	8001268 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000f86:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <SystemClock_Config+0xc8>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3770      	adds	r7, #112	; 0x70
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	42420070 	.word	0x42420070

08000f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
  //hadc1.Init.DMAContiniousRequests = ENABLE;
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <MX_ADC1_Init+0xac>)
 8000faa:	4a27      	ldr	r2, [pc, #156]	; (8001048 <MX_ADC1_Init+0xb0>)
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fc4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000fc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_ADC1_Init+0xac>)
 8000fd8:	f000 ffc2 	bl	8001f60 <HAL_ADC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fe2:	f000 f941 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_ADC1_Init+0xac>)
 8000ff8:	f001 f960 	bl	80022bc <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f931 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_ADC1_Init+0xac>)
 8001010:	f001 f954 	bl	80022bc <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800101a:	f000 f925 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800101e:	2311      	movs	r3, #17
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001022:	2303      	movs	r3, #3
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_ADC1_Init+0xac>)
 800102c:	f001 f946 	bl	80022bc <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001036:	f000 f917 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001ac 	.word	0x200001ac
 8001048:	40012400 	.word	0x40012400

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM2_Init+0x94>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001072:	2247      	movs	r2, #71	; 0x47
 8001074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_TIM2_Init+0x94>)
 800107e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_TIM2_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_TIM2_Init+0x94>)
 8001092:	f004 fccf 	bl	8005a34 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800109c:	f000 f8e4 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_TIM2_Init+0x94>)
 80010ae:	f004 fe18 	bl	8005ce2 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 f8d6 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010bc:	2320      	movs	r3, #32
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM2_Init+0x94>)
 80010ca:	f004 fffd 	bl	80060c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f000 f8c8 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000270 	.word	0x20000270

080010e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_TIM5_Init+0x94>)
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_TIM5_Init+0x98>)
 8001104:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_TIM5_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_TIM5_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 720-1;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_TIM5_Init+0x94>)
 8001114:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001118:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_TIM5_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_TIM5_Init+0x94>)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <MX_TIM5_Init+0x94>)
 8001128:	f004 fc84 	bl	8005a34 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001132:	f000 f899 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_TIM5_Init+0x94>)
 8001144:	f004 fdcd 	bl	8005ce2 <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800114e:	f000 f88b 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_TIM5_Init+0x94>)
 8001160:	f004 ffb2 	bl	80060c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800116a:	f000 f87d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002b8 	.word	0x200002b8
 800117c:	40000c00 	.word	0x40000c00

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_DMA_Init+0x38>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <MX_DMA_Init+0x38>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_DMA_Init+0x38>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	200b      	movs	r0, #11
 80011a4:	f002 f951 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011a8:	200b      	movs	r0, #11
 80011aa:	f002 f96a 	bl	8003482 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_GPIO_Init+0xa4>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_GPIO_Init+0xa4>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <MX_GPIO_Init+0xa4>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_GPIO_Init+0xa4>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_GPIO_Init+0xa4>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <MX_GPIO_Init+0xa4>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_GPIO_Init+0xa4>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2107      	movs	r1, #7
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_GPIO_Init+0xa8>)
 8001236:	f002 fd75 	bl	8003d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_B_Pin LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_R_Pin|LED_G_Pin;
 800123a:	2307      	movs	r3, #7
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0xa8>)
 8001252:	f002 fbe3 	bl	8003a1c <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010800 	.word	0x40010800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
 8001272:	0000      	movs	r0, r0
 8001274:	0000      	movs	r0, r0
	...

08001278 <_Z7N2kIsNAd>:

#ifndef BIT
#define BIT(n) (1 << n)
#endif

inline bool N2kIsNA(double v) { return v==N2kDoubleNA; }
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	e9c7 0100 	strd	r0, r1, [r7]
 8001282:	2301      	movs	r3, #1
 8001284:	461c      	mov	r4, r3
 8001286:	a308      	add	r3, pc, #32	; (adr r3, 80012a8 <_Z7N2kIsNAd+0x30>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001290:	f7ff fc00 	bl	8000a94 <__aeabi_dcmpeq>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <_Z7N2kIsNAd+0x26>
 800129a:	2300      	movs	r3, #0
 800129c:	461c      	mov	r4, r3
 800129e:	b2e3      	uxtb	r3, r4
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	00000000 	.word	0x00000000
 80012ac:	c1cdcd65 	.word	0xc1cdcd65

080012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>:
  static uint64_t SyncOffset;
  uint64_t NextTime;
  uint32_t Offset;  // Offset to syncronize with others
  uint32_t Period; 
public:
  tN2kSyncScheduler(bool Enable=false, uint32_t _Period=0, uint32_t _Offset=0) { 
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	460b      	mov	r3, r1
 80012be:	72fb      	strb	r3, [r7, #11]
    Offset=_Offset; Period=_Period; 
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	60da      	str	r2, [r3, #12]
    if ( Enable ) {
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <_ZN17tN2kSyncSchedulerC1Ebmm+0x2a>
      UpdateNextTime();
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f82c 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 80012d8:	e002      	b.n	80012e0 <_ZN17tN2kSyncSchedulerC1Ebmm+0x30>
    } else {
      Disable();
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f805 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
    }
  }
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZN17tN2kSyncScheduler7DisableEv>:

  inline void Disable() { NextTime=N2kScheduler64Disabled; }
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fc:	e9c1 2300 	strd	r2, r3, [r1]
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_ZN17tN2kSyncScheduler6IsTimeEv>:
  inline bool IsDisabled() const { return NextTime==N2kScheduler64Disabled; }
  inline bool IsEnabled() const { return NextTime!=N2kScheduler64Disabled; }

  inline bool IsTime() { return N2kMillis64()>NextTime; }
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	f009 fd8b 	bl	800ae2c <_Z11N2kMillis64v>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	4282      	cmp	r2, r0
 800131e:	418b      	sbcs	r3, r1
 8001320:	bf34      	ite	cc
 8001322:	2301      	movcc	r3, #1
 8001324:	2300      	movcs	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>:
  }
  uint32_t GetOffset() const { return Offset; }
  uint32_t GetPeriod() const { return Period; }
  uint64_t GetNextTime() const { return NextTime; }

  void UpdateNextTime() {
 8001330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001334:	b09c      	sub	sp, #112	; 0x70
 8001336:	af00      	add	r7, sp, #0
 8001338:	65f8      	str	r0, [r7, #92]	; 0x5c
    if ( Period==0 ) {
 800133a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x1a>
      Disable();
 8001342:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001344:	f7ff ffd1 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
      return;
 8001348:	e094      	b.n	8001474 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x144>
    }
    uint64_t now=N2kMillis64();
 800134a:	f009 fd6f 	bl	800ae2c <_Z11N2kMillis64v>
 800134e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
    if ( (Offset+SyncOffset)>now ) {
 8001352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2200      	movs	r2, #0
 8001358:	653b      	str	r3, [r7, #80]	; 0x50
 800135a:	657a      	str	r2, [r7, #84]	; 0x54
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001364:	188c      	adds	r4, r1, r2
 8001366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001368:	eb43 0101 	adc.w	r1, r3, r1
 800136c:	460d      	mov	r5, r1
 800136e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001372:	42a2      	cmp	r2, r4
 8001374:	41ab      	sbcs	r3, r5
 8001376:	d216      	bcs.n	80013a6 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x76>
      NextTime=(Offset+SyncOffset);
 8001378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2200      	movs	r2, #0
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001380:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800138c:	4621      	mov	r1, r4
 800138e:	1889      	adds	r1, r1, r2
 8001390:	6439      	str	r1, [r7, #64]	; 0x40
 8001392:	4629      	mov	r1, r5
 8001394:	eb43 0101 	adc.w	r1, r3, r1
 8001398:	6479      	str	r1, [r7, #68]	; 0x44
 800139a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80013a0:	e9c3 1200 	strd	r1, r2, [r3]
 80013a4:	e066      	b.n	8001474 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x144>
    } else {
      uint64_t n=(now-(Offset+SyncOffset))/Period;
 80013a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2200      	movs	r2, #0
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80013ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013b0:	4b32      	ldr	r3, [pc, #200]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013ba:	4604      	mov	r4, r0
 80013bc:	eb14 0a02 	adds.w	sl, r4, r2
 80013c0:	eb41 0b03 	adc.w	fp, r1, r3
 80013c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80013c8:	ebb2 010a 	subs.w	r1, r2, sl
 80013cc:	6339      	str	r1, [r7, #48]	; 0x30
 80013ce:	eb63 030b 	sbc.w	r3, r3, fp
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
 80013d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
 80013dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013e6:	f7ff fbcf 	bl	8000b88 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
      NextTime=SyncOffset+Offset+(n+1)*Period;
 80013f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2200      	movs	r2, #0
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	627a      	str	r2, [r7, #36]	; 0x24
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001406:	4621      	mov	r1, r4
 8001408:	1889      	adds	r1, r1, r2
 800140a:	61b9      	str	r1, [r7, #24]
 800140c:	4629      	mov	r1, r5
 800140e:	eb43 0101 	adc.w	r1, r3, r1
 8001412:	61f9      	str	r1, [r7, #28]
 8001414:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001418:	1c51      	adds	r1, r2, #1
 800141a:	6139      	str	r1, [r7, #16]
 800141c:	f143 0300 	adc.w	r3, r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	60fa      	str	r2, [r7, #12]
 800142c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001430:	4622      	mov	r2, r4
 8001432:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001436:	4651      	mov	r1, sl
 8001438:	fb01 f202 	mul.w	r2, r1, r2
 800143c:	465d      	mov	r5, fp
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	4603      	mov	r3, r0
 8001444:	fb03 f305 	mul.w	r3, r3, r5
 8001448:	4413      	add	r3, r2
 800144a:	4602      	mov	r2, r0
 800144c:	4651      	mov	r1, sl
 800144e:	fba2 8901 	umull	r8, r9, r2, r1
 8001452:	444b      	add	r3, r9
 8001454:	4699      	mov	r9, r3
 8001456:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800145a:	461a      	mov	r2, r3
 800145c:	eb12 0208 	adds.w	r2, r2, r8
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	eb43 0309 	adc.w	r3, r3, r9
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001470:	e9c3 1200 	strd	r1, r2, [r3]
    }
  }
 8001474:	3770      	adds	r7, #112	; 0x70
 8001476:	46bd      	mov	sp, r7
 8001478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800147c:	20000358 	.word	0x20000358

08001480 <_Z9CToKelvind>:
#include <string.h>
#include <stdint.h>

inline double RadToDeg(double v) { return N2kIsNA(v)?v:v*180.0/3.1415926535897932384626433832795L; }
inline double DegToRad(double v) { return N2kIsNA(v)?v:v/180.0*3.1415926535897932384626433832795L; }
inline double CToKelvin(double v) { return N2kIsNA(v)?v:v+273.15L; }
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	e9c7 0100 	strd	r0, r1, [r7]
 800148a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800148e:	f7ff fef3 	bl	8001278 <_Z7N2kIsNAd>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <_Z9CToKelvind+0x1e>
 8001498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800149c:	e008      	b.n	80014b0 <_Z9CToKelvind+0x30>
 800149e:	a308      	add	r3, pc, #32	; (adr r3, 80014c0 <_Z9CToKelvind+0x40>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a8:	f7fe fed6 	bl	8000258 <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	66666666 	.word	0x66666666
 80014c4:	40711266 	.word	0x40711266

080014c8 <_Z14SetN2kDCStatusR7tN2kMsghh10tN2kDCTypehhddd>:
//  - Capacity              Battery capacity in coulombs
void SetN2kPGN127506(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     unsigned char StateOfCharge, unsigned char StateOfHealth, double TimeRemaining, double RippleVoltage=N2kDoubleNA, double Capacity=N2kDoubleNA);

inline void SetN2kDCStatus(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     unsigned char StateOfCharge, unsigned char StateOfHealth, double TimeRemaining, double RippleVoltage=N2kDoubleNA, double Capacity=N2kDoubleNA) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af08      	add	r7, sp, #32
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	70fb      	strb	r3, [r7, #3]
 80014da:	460b      	mov	r3, r1
 80014dc:	70bb      	strb	r3, [r7, #2]
 80014de:	4613      	mov	r3, r2
 80014e0:	707b      	strb	r3, [r7, #1]
  SetN2kPGN127506(N2kMsg,SID,DCInstance,DCType,StateOfCharge,StateOfHealth,TimeRemaining,RippleVoltage,Capacity);
 80014e2:	787c      	ldrb	r4, [r7, #1]
 80014e4:	78b8      	ldrb	r0, [r7, #2]
 80014e6:	78f9      	ldrb	r1, [r7, #3]
 80014e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001500:	7f3b      	ldrb	r3, [r7, #28]
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	7e3b      	ldrb	r3, [r7, #24]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4623      	mov	r3, r4
 800150a:	4602      	mov	r2, r0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f008 f9e7 	bl	80098e0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>:
//  - SID                   Sequence ID.
void SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent=N2kDoubleNA,
                     double BatteryTemperature=N2kDoubleNA, unsigned char SID=1);

inline void SetN2kDCBatStatus(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent=N2kDoubleNA,
                     double BatteryTemperature=N2kDoubleNA, unsigned char SID=1) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b08a      	sub	sp, #40	; 0x28
 800151e:	af06      	add	r7, sp, #24
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	e9c7 2300 	strd	r2, r3, [r7]
 8001526:	460b      	mov	r3, r1
 8001528:	72fb      	strb	r3, [r7, #11]
  SetN2kPGN127508(N2kMsg,BatteryInstance,BatteryVoltage,BatteryCurrent,BatteryTemperature,SID);
 800152a:	7af9      	ldrb	r1, [r7, #11]
 800152c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001530:	9304      	str	r3, [sp, #16]
 8001532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	e9cd 2300 	strd	r2, r3, [sp]
 8001542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f008 fa3a 	bl	80099c0 <_Z15SetN2kPGN127508R7tN2kMsghdddh>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_Z13SetN2kBatConfR7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor);

inline void SetN2kBatConf(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08d      	sub	sp, #52	; 0x34
 8001558:	af0a      	add	r7, sp, #40	; 0x28
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4603      	mov	r3, r0
 8001564:	70fb      	strb	r3, [r7, #3]
 8001566:	460b      	mov	r3, r1
 8001568:	70bb      	strb	r3, [r7, #2]
 800156a:	4613      	mov	r3, r2
 800156c:	707b      	strb	r3, [r7, #1]
   SetN2kPGN127513(N2kMsg,BatInstance,BatType,SupportsEqual,BatNominalVoltage,BatChemistry,BatCapacity,BatTemperatureCoefficient,
 800156e:	787c      	ldrb	r4, [r7, #1]
 8001570:	78b8      	ldrb	r0, [r7, #2]
 8001572:	78f9      	ldrb	r1, [r7, #3]
 8001574:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 8001578:	9308      	str	r3, [sp, #32]
 800157a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800157e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001582:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001586:	9304      	str	r3, [sp, #16]
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001590:	7f3b      	ldrb	r3, [r7, #28]
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	7e3b      	ldrb	r3, [r7, #24]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4623      	mov	r3, r4
 800159a:	4602      	mov	r2, r0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f008 fa6b 	bl	8009a78 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
				PeukertExponent,ChargeEfficiencyFactor);
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	0000      	movs	r0, r0
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <_Z22SendN2kBatteryMessagesv>:
tN2kSyncScheduler DCBatStatusScheduler(false,1500,500);
tN2kSyncScheduler DCStatusScheduler(false,1500,510);
tN2kSyncScheduler BatConfScheduler(false,5000,530); // Non periodic


void SendN2kBatteryMessages() {
 80015b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015b4:	b0cd      	sub	sp, #308	; 0x134
 80015b6:	af0a      	add	r7, sp, #40	; 0x28
    tN2kMsg N2kMsg;
 80015b8:	f107 000c 	add.w	r0, r7, #12
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2206      	movs	r2, #6
 80015c4:	210f      	movs	r1, #15
 80015c6:	f008 fb47 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

    if ( DCBatStatusScheduler.IsTime() ) {
 80015ca:	485d      	ldr	r0, [pc, #372]	; (8001740 <_Z22SendN2kBatteryMessagesv+0x190>)
 80015cc:	f7ff fe9d 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d034      	beq.n	8001640 <_Z22SendN2kBatteryMessagesv+0x90>
      DCBatStatusScheduler.UpdateNextTime();
 80015d6:	485a      	ldr	r0, [pc, #360]	; (8001740 <_Z22SendN2kBatteryMessagesv+0x190>)
 80015d8:	f7ff feaa 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>

      SequenceID ++;
 80015dc:	4b59      	ldr	r3, [pc, #356]	; (8001744 <_Z22SendN2kBatteryMessagesv+0x194>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b57      	ldr	r3, [pc, #348]	; (8001744 <_Z22SendN2kBatteryMessagesv+0x194>)
 80015e6:	701a      	strb	r2, [r3, #0]
      if ( SequenceID > 252 ) {
 80015e8:	4b56      	ldr	r3, [pc, #344]	; (8001744 <_Z22SendN2kBatteryMessagesv+0x194>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2bfc      	cmp	r3, #252	; 0xfc
 80015ee:	d902      	bls.n	80015f6 <_Z22SendN2kBatteryMessagesv+0x46>
        SequenceID = 0;
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <_Z22SendN2kBatteryMessagesv+0x194>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
      }

  //  SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent, double BatteryTemperature, unsigned char SID)
      SetN2kDCBatStatus(N2kMsg, 0, pack_voltage, battery_current, CToKelvin(cel_temp_avg), SequenceID);
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <_Z22SendN2kBatteryMessagesv+0x198>)
 80015f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <_Z22SendN2kBatteryMessagesv+0x19c>)
 80015fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001602:	4b53      	ldr	r3, [pc, #332]	; (8001750 <_Z22SendN2kBatteryMessagesv+0x1a0>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff ff38 	bl	8001480 <_Z9CToKelvind>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	494b      	ldr	r1, [pc, #300]	; (8001744 <_Z22SendN2kBatteryMessagesv+0x194>)
 8001616:	7809      	ldrb	r1, [r1, #0]
 8001618:	f107 000c 	add.w	r0, r7, #12
 800161c:	9104      	str	r1, [sp, #16]
 800161e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001622:	e9cd 4500 	strd	r4, r5, [sp]
 8001626:	4642      	mov	r2, r8
 8001628:	464b      	mov	r3, r9
 800162a:	2100      	movs	r1, #0
 800162c:	f7ff ff75 	bl	800151a <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>
      NMEA2000.SendMsg(N2kMsg);
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <_Z22SendN2kBatteryMessagesv+0x1a4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f107 010c 	add.w	r1, r7, #12
 8001638:	2200      	movs	r2, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f00c f952 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

    }

    if ( DCStatusScheduler.IsTime() ) {
 8001640:	4845      	ldr	r0, [pc, #276]	; (8001758 <_Z22SendN2kBatteryMessagesv+0x1a8>)
 8001642:	f7ff fe62 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d032      	beq.n	80016b2 <_Z22SendN2kBatteryMessagesv+0x102>
      DCStatusScheduler.UpdateNextTime();
 800164c:	4842      	ldr	r0, [pc, #264]	; (8001758 <_Z22SendN2kBatteryMessagesv+0x1a8>)
 800164e:	f7ff fe6f 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127506(const tN2kMsg &N2kMsg, unsigned char &SID, unsigned char &DCInstance, tN2kDCType &DCType,
  //                     uint8_t &StateOfCharge, uint8_t &StateOfHealth, double &TimeRemaining, double &RippleVoltage, double &Capacity)
      SetN2kDCStatus(N2kMsg,SequenceID, 0, N2kDCt_Battery, state_of_charge, state_of_health, time_remaining, 0xFF, estimated_amp_hours_left);
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <_Z22SendN2kBatteryMessagesv+0x194>)
 8001654:	f893 8000 	ldrb.w	r8, [r3]
 8001658:	4b40      	ldr	r3, [pc, #256]	; (800175c <_Z22SendN2kBatteryMessagesv+0x1ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b2dc      	uxtb	r4, r3
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <_Z22SendN2kBatteryMessagesv+0x1b0>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa6e 	bl	8000b48 <__aeabi_d2uiz>
 800166c:	4603      	mov	r3, r0
 800166e:	b2dd      	uxtb	r5, r3
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <_Z22SendN2kBatteryMessagesv+0x1b4>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	493c      	ldr	r1, [pc, #240]	; (8001768 <_Z22SendN2kBatteryMessagesv+0x1b8>)
 8001678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800167c:	f107 060c 	add.w	r6, r7, #12
 8001680:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001684:	a12c      	add	r1, pc, #176	; (adr r1, 8001738 <_Z22SendN2kBatteryMessagesv+0x188>)
 8001686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800168a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800168e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001692:	9501      	str	r5, [sp, #4]
 8001694:	9400      	str	r4, [sp, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	2200      	movs	r2, #0
 800169a:	4641      	mov	r1, r8
 800169c:	4630      	mov	r0, r6
 800169e:	f7ff ff13 	bl	80014c8 <_Z14SetN2kDCStatusR7tN2kMsghh10tN2kDCTypehhddd>
      NMEA2000.SendMsg(N2kMsg);
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <_Z22SendN2kBatteryMessagesv+0x1a4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f107 010c 	add.w	r1, r7, #12
 80016aa:	2200      	movs	r2, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00c f919 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }

    if ( BatConfScheduler.IsTime() ) {
 80016b2:	482e      	ldr	r0, [pc, #184]	; (800176c <_Z22SendN2kBatteryMessagesv+0x1bc>)
 80016b4:	f7ff fe29 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d036      	beq.n	800172c <_Z22SendN2kBatteryMessagesv+0x17c>
      BatConfScheduler.UpdateNextTime();
 80016be:	482b      	ldr	r0, [pc, #172]	; (800176c <_Z22SendN2kBatteryMessagesv+0x1bc>)
 80016c0:	f7ff fe36 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
  //                  tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
  //                  double PeukertExponent, int8_t ChargeEfficiencyFactor)
  //  SetN2kBatConf(N2kMsg, 0, 0, N2kDCES_Unavailable, N2kDCbnv_48v, N2kDCbc_LiIon, 0xFF, 0xFF, 0, 92);
      SetN2kBatConf(N2kMsg, 0, BatType, SupportsEqual, BatNominalVoltage, BatChemistry, BatCapacity, BatTemperatureCoefficient, PeukertExponent, ChargeEfficiencyFactor);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <_Z22SendN2kBatteryMessagesv+0x1c0>)
 80016c6:	f893 e000 	ldrb.w	lr, [r3]
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <_Z22SendN2kBatteryMessagesv+0x1c4>)
 80016cc:	f893 8000 	ldrb.w	r8, [r3]
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <_Z22SendN2kBatteryMessagesv+0x1c8>)
 80016d2:	781c      	ldrb	r4, [r3, #0]
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <_Z22SendN2kBatteryMessagesv+0x1cc>)
 80016d6:	781d      	ldrb	r5, [r3, #0]
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <_Z22SendN2kBatteryMessagesv+0x1d0>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	4929      	ldr	r1, [pc, #164]	; (8001784 <_Z22SendN2kBatteryMessagesv+0x1d4>)
 80016e0:	f991 6000 	ldrsb.w	r6, [r1]
 80016e4:	4928      	ldr	r1, [pc, #160]	; (8001788 <_Z22SendN2kBatteryMessagesv+0x1d8>)
 80016e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ea:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800178c <_Z22SendN2kBatteryMessagesv+0x1dc>
 80016ee:	f99c c000 	ldrsb.w	ip, [ip]
 80016f2:	f8c7 c004 	str.w	ip, [r7, #4]
 80016f6:	f107 0c0c 	add.w	ip, r7, #12
 80016fa:	f8d7 9004 	ldr.w	r9, [r7, #4]
 80016fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8001702:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001706:	9604      	str	r6, [sp, #16]
 8001708:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800170c:	9501      	str	r5, [sp, #4]
 800170e:	9400      	str	r4, [sp, #0]
 8001710:	4643      	mov	r3, r8
 8001712:	4672      	mov	r2, lr
 8001714:	2100      	movs	r1, #0
 8001716:	4660      	mov	r0, ip
 8001718:	f7ff ff1c 	bl	8001554 <_Z13SetN2kBatConfR7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
      NMEA2000.SendMsg(N2kMsg);
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <_Z22SendN2kBatteryMessagesv+0x1a4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f107 010c 	add.w	r1, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00c f8dc 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }
}
 800172c:	bf00      	nop
 800172e:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8001732:	46bd      	mov	sp, r7
 8001734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001738:	00000000 	.word	0x00000000
 800173c:	406fe000 	.word	0x406fe000
 8001740:	20000318 	.word	0x20000318
 8001744:	20000310 	.word	0x20000310
 8001748:	20000008 	.word	0x20000008
 800174c:	20000010 	.word	0x20000010
 8001750:	20000018 	.word	0x20000018
 8001754:	20000314 	.word	0x20000314
 8001758:	20000328 	.word	0x20000328
 800175c:	20000000 	.word	0x20000000
 8001760:	20000028 	.word	0x20000028
 8001764:	20000030 	.word	0x20000030
 8001768:	20000020 	.word	0x20000020
 800176c:	20000338 	.word	0x20000338
 8001770:	20000300 	.word	0x20000300
 8001774:	20000038 	.word	0x20000038
 8001778:	20000039 	.word	0x20000039
 800177c:	2000003a 	.word	0x2000003a
 8001780:	20000040 	.word	0x20000040
 8001784:	20000048 	.word	0x20000048
 8001788:	20000308 	.word	0x20000308
 800178c:	20000049 	.word	0x20000049

08001790 <_Z9OnN2kOpenv>:


// *****************************************************************************
// Call back for NMEA2000 open. This will be called, when library starts bus communication.
// See NMEA2000.SetOnOpen(OnN2kOpen); on setup()
void OnN2kOpen() {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    // Start schedulers now.
    DCBatStatusScheduler.UpdateNextTime();
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <_Z9OnN2kOpenv+0x1c>)
 8001796:	f7ff fdcb 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    DCStatusScheduler.UpdateNextTime();
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <_Z9OnN2kOpenv+0x20>)
 800179c:	f7ff fdc8 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    BatConfScheduler.UpdateNextTime();
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <_Z9OnN2kOpenv+0x24>)
 80017a2:	f7ff fdc5 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000318 	.word	0x20000318
 80017b0:	20000328 	.word	0x20000328
 80017b4:	20000338 	.word	0x20000338

080017b8 <_Z16myCppProcessInitv>:
/////////////////////////////////
// INITIALIZATION
////////////////////////////////

void myCppProcessInit()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af04      	add	r7, sp, #16

    // NMEA2000 setup
	//-----------------------------------------------------------
    // Set Product information
    NMEA2000.SetProductInformation(&ProductInformation);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <_Z16myCppProcessInitv+0x74>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	491a      	ldr	r1, [pc, #104]	; (8001830 <_Z16myCppProcessInitv+0x78>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00a fcdc 	bl	800c184 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>
    // Set Configuration information
    NMEA2000.SetProgmemConfigurationInformation(ManufacturerInformation,InstallationDescription1,InstallationDescription2);
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <_Z16myCppProcessInitv+0x74>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <_Z16myCppProcessInitv+0x7c>)
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <_Z16myCppProcessInitv+0x80>)
 80017d4:	4919      	ldr	r1, [pc, #100]	; (800183c <_Z16myCppProcessInitv+0x84>)
 80017d6:	f00a fda5 	bl	800c324 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
    // Set device information
    NMEA2000.SetDeviceInformation(1,      // Unique number. Use e.g. Serial number.
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <_Z16myCppProcessInitv+0x74>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2304      	movs	r3, #4
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2323      	movs	r3, #35	; 0x23
 80017ec:	22aa      	movs	r2, #170	; 0xaa
 80017ee:	2101      	movs	r1, #1
 80017f0:	f00b f9bd 	bl	800cb6e <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                                  4,      // Marine
                                  0);     // device


    // If you also want to see all traffic on the bus use N2km_ListenAndNode instead of N2km_NodeOnly below
    NMEA2000.SetMode(tNMEA2000::N2km_NodeOnly,80);
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <_Z16myCppProcessInitv+0x74>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2250      	movs	r2, #80	; 0x50
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00b faf1 	bl	800cde4 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>

    //  NMEA2000.SetN2kCANMsgBufSize(2);                    // For this simple example, limit buffer size to 2, since we are only sending data
    // Define OnOpen call back. This will be called, when CAN is open and system starts address claiming.

    // Here we tell library, which PGNs we transmit
    NMEA2000.ExtendTransmitMessages(TransmitMessagesBattery);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <_Z16myCppProcessInitv+0x74>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	490d      	ldr	r1, [pc, #52]	; (8001840 <_Z16myCppProcessInitv+0x88>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00b fac8 	bl	800cda0 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>

    NMEA2000.SetOnOpen(OnN2kOpen);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <_Z16myCppProcessInitv+0x74>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	490b      	ldr	r1, [pc, #44]	; (8001844 <_Z16myCppProcessInitv+0x8c>)
 8001816:	4618      	mov	r0, r3
 8001818:	f00f fd8e 	bl	8011338 <_ZN9tNMEA20009SetOnOpenEPFvvE>
    NMEA2000.Open();
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <_Z16myCppProcessInitv+0x74>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f00b fb51 	bl	800cec8 <_ZN9tNMEA20004OpenEv>

}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000314 	.word	0x20000314
 8001830:	08015374 	.word	0x08015374
 8001834:	0801541c 	.word	0x0801541c
 8001838:	08015418 	.word	0x08015418
 800183c:	08015400 	.word	0x08015400
 8001840:	08015360 	.word	0x08015360
 8001844:	08001791 	.word	0x08001791

08001848 <_Z12myCppProcessv>:

/////////////////////////////////
// CPP program main function
////////////////////////////////

void myCppProcess(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

	// infinite loop
	while (1) {


	    SendN2kBatteryMessages();
 800184c:	f7ff feb0 	bl	80015b0 <_Z22SendN2kBatteryMessagesv>
	    NMEA2000.ParseMessages();
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <_Z12myCppProcessv+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f00f fc91 	bl	801117c <_ZN9tNMEA200013ParseMessagesEv>
	    SendN2kBatteryMessages();
 800185a:	e7f7      	b.n	800184c <_Z12myCppProcessv+0x4>
 800185c:	20000314 	.word	0x20000314

08001860 <_Z41__static_initialization_and_destruction_0ii>:



	}// end myCppProcess while (1) loop

}
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d128      	bne.n	80018c2 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001876:	4293      	cmp	r3, r2
 8001878:	d123      	bne.n	80018c2 <_Z41__static_initialization_and_destruction_0ii+0x62>
tNMEA2000 &NMEA2000 = *( new tNMEA2000_STM32(&hcan2) );
 800187a:	20d0      	movs	r0, #208	; 0xd0
 800187c:	f013 f9ca 	bl	8014c14 <_Znwj>
 8001880:	4603      	mov	r3, r0
 8001882:	461c      	mov	r4, r3
 8001884:	4911      	ldr	r1, [pc, #68]	; (80018cc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001886:	4620      	mov	r0, r4
 8001888:	f00f ffc0 	bl	801180c <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>
 800188c:	4622      	mov	r2, r4
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001890:	601a      	str	r2, [r3, #0]
tN2kSyncScheduler DCBatStatusScheduler(false,1500,500);
 8001892:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001896:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800189a:	2100      	movs	r1, #0
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800189e:	f7ff fd07 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler DCStatusScheduler(false,1500,510);
 80018a2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80018a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80018aa:	2100      	movs	r1, #0
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80018ae:	f7ff fcff 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler BatConfScheduler(false,5000,530); // Non periodic
 80018b2:	f240 2312 	movw	r3, #530	; 0x212
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	2100      	movs	r1, #0
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80018be:	f7ff fcf7 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000248 	.word	0x20000248
 80018d0:	20000314 	.word	0x20000314
 80018d4:	20000318 	.word	0x20000318
 80018d8:	20000328 	.word	0x20000328
 80018dc:	20000338 	.word	0x20000338

080018e0 <_GLOBAL__sub_I_state_of_charge>:
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018e8:	2001      	movs	r0, #1
 80018ea:	f7ff ffb9 	bl	8001860 <_Z41__static_initialization_and_destruction_0ii>
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_MspInit+0x5c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6193      	str	r3, [r2, #24]
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x5c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_MspInit+0x60>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_MspInit+0x60>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <HAL_ADC_MspInit+0xd0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d152      	bne.n	8001a1a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_ADC_MspInit+0xd4>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <HAL_ADC_MspInit+0xd4>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_ADC_MspInit+0xd4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_ADC_MspInit+0xd4>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_ADC_MspInit+0xd4>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_ADC_MspInit+0xd4>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 80019a4:	2320      	movs	r3, #32
 80019a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a8:	2303      	movs	r3, #3
 80019aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	4619      	mov	r1, r3
 80019b2:	481e      	ldr	r0, [pc, #120]	; (8001a2c <HAL_ADC_MspInit+0xd8>)
 80019b4:	f002 f832 	bl	8003a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019ba:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019e2:	2220      	movs	r2, #32
 80019e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ee:	4810      	ldr	r0, [pc, #64]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 80019f0:	f001 fd62 	bl	80034b8 <HAL_DMA_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80019fa:	f7ff fc35 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001a02:	621a      	str	r2, [r3, #32]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2012      	movs	r0, #18
 8001a10:	f001 fd1b 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a14:	2012      	movs	r0, #18
 8001a16:	f001 fd34 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40012400 	.word	0x40012400
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	200001dc 	.word	0x200001dc
 8001a34:	40020008 	.word	0x40020008

08001a38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a60      	ldr	r2, [pc, #384]	; (8001bd4 <HAL_CAN_MspInit+0x19c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d15d      	bne.n	8001b14 <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a58:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_CAN_MspInit+0x1a0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_CAN_MspInit+0x1a0>)
 8001a60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_CAN_MspInit+0x1a0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10b      	bne.n	8001a82 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b56      	ldr	r3, [pc, #344]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	484c      	ldr	r0, [pc, #304]	; (8001be0 <HAL_CAN_MspInit+0x1a8>)
 8001ab0:	f001 ffb4 	bl	8003a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4845      	ldr	r0, [pc, #276]	; (8001be0 <HAL_CAN_MspInit+0x1a8>)
 8001aca:	f001 ffa7 	bl	8003a1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001ace:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <HAL_CAN_MspInit+0x1ac>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	4a3d      	ldr	r2, [pc, #244]	; (8001be4 <HAL_CAN_MspInit+0x1ac>)
 8001aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af0:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2013      	movs	r0, #19
 8001af8:	f001 fca7 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001afc:	2013      	movs	r0, #19
 8001afe:	f001 fcc0 	bl	8003482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2014      	movs	r0, #20
 8001b08:	f001 fc9f 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f001 fcb8 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001b12:	e05b      	b.n	8001bcc <HAL_CAN_MspInit+0x194>
  else if(hcan->Instance==CAN2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <HAL_CAN_MspInit+0x1b0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d156      	bne.n	8001bcc <HAL_CAN_MspInit+0x194>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_CAN_MspInit+0x1a0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_CAN_MspInit+0x1a0>)
 8001b3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_CAN_MspInit+0x1a0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10b      	bne.n	8001b60 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_CAN_MspInit+0x1a4>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4814      	ldr	r0, [pc, #80]	; (8001be0 <HAL_CAN_MspInit+0x1a8>)
 8001b8e:	f001 ff45 	bl	8003a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480e      	ldr	r0, [pc, #56]	; (8001be0 <HAL_CAN_MspInit+0x1a8>)
 8001ba8:	f001 ff38 	bl	8003a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	203f      	movs	r0, #63	; 0x3f
 8001bb2:	f001 fc4a 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001bb6:	203f      	movs	r0, #63	; 0x3f
 8001bb8:	f001 fc63 	bl	8003482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2041      	movs	r0, #65	; 0x41
 8001bc2:	f001 fc42 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001bc6:	2041      	movs	r0, #65	; 0x41
 8001bc8:	f001 fc5b 	bl	8003482 <HAL_NVIC_EnableIRQ>
}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40006400 	.word	0x40006400
 8001bd8:	20000348 	.word	0x20000348
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40006800 	.word	0x40006800

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d114      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_TIM_Base_MspInit+0x68>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_TIM_Base_MspInit+0x68>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_TIM_Base_MspInit+0x68>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f001 fc15 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c20:	201c      	movs	r0, #28
 8001c22:	f001 fc2e 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c26:	e010      	b.n	8001c4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_TIM_Base_MspInit+0x6c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10b      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_TIM_Base_MspInit+0x68>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_TIM_Base_MspInit+0x68>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_TIM_Base_MspInit+0x68>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40000c00 	.word	0x40000c00

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca2:	f000 f91d 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA1_Channel1_IRQHandler+0x10>)
 8001cb2:	f001 fc77 	bl	80035a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001dc 	.word	0x200001dc

08001cc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <ADC1_2_IRQHandler+0x10>)
 8001cc6:	f000 fa23 	bl	8002110 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001ac 	.word	0x200001ac

08001cd4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <CAN1_TX_IRQHandler+0x10>)
 8001cda:	f001 f8bb 	bl	8002e54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000220 	.word	0x20000220

08001ce8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <CAN1_RX0_IRQHandler+0x10>)
 8001cee:	f001 f8b1 	bl	8002e54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000220 	.word	0x20000220

08001cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TIM2_IRQHandler+0x10>)
 8001d02:	f003 fee6 	bl	8005ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000270 	.word	0x20000270

08001d10 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <CAN2_TX_IRQHandler+0x10>)
 8001d16:	f001 f89d 	bl	8002e54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000248 	.word	0x20000248

08001d24 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <CAN2_RX1_IRQHandler+0x10>)
 8001d2a:	f001 f893 	bl	8002e54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000248 	.word	0x20000248

08001d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <OTG_FS_IRQHandler+0x10>)
 8001d3e:	f002 f970 	bl	8004022 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000930 	.word	0x20000930

08001d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
	return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <_kill>:

int _kill(int pid, int sig)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d64:	f013 f890 	bl	8014e88 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2216      	movs	r2, #22
 8001d6c:	601a      	str	r2, [r3, #0]
	return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_exit>:

void _exit (int status)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffe7 	bl	8001d5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d8c:	e7fe      	b.n	8001d8c <_exit+0x12>
	...

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f013 f862 	bl	8014e88 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20010000 	.word	0x20010000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	2000034c 	.word	0x2000034c
 8001df8:	20001168 	.word	0x20001168

08001dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	; (8001e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	; (8001e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e2e:	f7ff ffe5 	bl	8001dfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e32:	f013 f82f 	bl	8014e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e36:	f7ff f833 	bl	8000ea0 <main>
  bx lr
 8001e3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001e44:	080156cc 	.word	0x080156cc
  ldr r2, =_sbss
 8001e48:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001e4c:	20001164 	.word	0x20001164

08001e50 <CAN1_RX1_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <CAN1_RX1_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x28>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x28>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f001 fae5 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fd3e 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 fafd 	bl	800349e <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ebc:	f001 fac5 	bl	800344a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000004c 	.word	0x2000004c
 8001ed8:	20000054 	.word	0x20000054
 8001edc:	20000050 	.word	0x20000050

08001ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x1c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x20>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_IncTick+0x20>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000054 	.word	0x20000054
 8001f00:	20000350 	.word	0x20000350

08001f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_GetTick+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000350 	.word	0x20000350

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffe0 	bl	8001f04 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000054 	.word	0x20000054

08001f60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0be      	b.n	8002100 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fcd8 	bl	8001954 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fa81 	bl	80024ac <ADC_ConversionStop_Disable>
 8001faa:	4603      	mov	r3, r0
 8001fac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8099 	bne.w	80020ee <HAL_ADC_Init+0x18e>
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8095 	bne.w	80020ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fcc:	f023 0302 	bic.w	r3, r3, #2
 8001fd0:	f043 0202 	orr.w	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fe0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7b1b      	ldrb	r3, [r3, #12]
 8001fe6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fe8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff8:	d003      	beq.n	8002002 <HAL_ADC_Init+0xa2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_ADC_Init+0xa8>
 8002002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002006:	e000      	b.n	800200a <HAL_ADC_Init+0xaa>
 8002008:	2300      	movs	r3, #0
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7d1b      	ldrb	r3, [r3, #20]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d119      	bne.n	800204c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7b1b      	ldrb	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	3b01      	subs	r3, #1
 8002026:	035a      	lsls	r2, r3, #13
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	e00b      	b.n	800204c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_ADC_Init+0x1a8>)
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	430b      	orrs	r3, r1
 8002072:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207c:	d003      	beq.n	8002086 <HAL_ADC_Init+0x126>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d104      	bne.n	8002090 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	3b01      	subs	r3, #1
 800208c:	051b      	lsls	r3, r3, #20
 800208e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_ADC_Init+0x1ac>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10b      	bne.n	80020cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ca:	e018      	b.n	80020fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f023 0312 	bic.w	r3, r3, #18
 80020d4:	f043 0210 	orr.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ec:	e007      	b.n	80020fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	f043 0210 	orr.w	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	ffe1f7fd 	.word	0xffe1f7fd
 800210c:	ff1f0efe 	.word	0xff1f0efe

08002110 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	d140      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d139      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002156:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800215a:	d11d      	bne.n	8002198 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002160:	2b00      	cmp	r3, #0
 8002162:	d119      	bne.n	8002198 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0220 	bic.w	r2, r2, #32
 8002172:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f87c 	bl	8002296 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f06f 0212 	mvn.w	r2, #18
 80021a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b80      	cmp	r3, #128	; 0x80
 80021b4:	d14f      	bne.n	8002256 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d148      	bne.n	8002256 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80021e6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80021ea:	d012      	beq.n	8002212 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d125      	bne.n	8002246 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002204:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002208:	d11d      	bne.n	8002246 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d119      	bne.n	8002246 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002220:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f971 	bl	800252e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 020c 	mvn.w	r2, #12
 8002254:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d114      	bne.n	800228e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10d      	bne.n	800228e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f812 	bl	80022a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0201 	mvn.w	r2, #1
 800228c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x20>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0dc      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1da>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d81c      	bhi.n	8002326 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b05      	subs	r3, #5
 80022fe:	221f      	movs	r2, #31
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	4019      	ands	r1, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b05      	subs	r3, #5
 8002318:	fa00 f203 	lsl.w	r2, r0, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
 8002324:	e03c      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d81c      	bhi.n	8002368 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b23      	subs	r3, #35	; 0x23
 8002340:	221f      	movs	r2, #31
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	4019      	ands	r1, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	3b23      	subs	r3, #35	; 0x23
 800235a:	fa00 f203 	lsl.w	r2, r0, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
 8002366:	e01b      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b41      	subs	r3, #65	; 0x41
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b41      	subs	r3, #65	; 0x41
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d91c      	bls.n	80023e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	3b1e      	subs	r3, #30
 80023ba:	2207      	movs	r2, #7
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6898      	ldr	r0, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	3b1e      	subs	r3, #30
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	e019      	b.n	8002416 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	2207      	movs	r2, #7
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4019      	ands	r1, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6898      	ldr	r0, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d003      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002422:	2b11      	cmp	r3, #17
 8002424:	d132      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d125      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d126      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800244c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d11a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9a      	lsrs	r2, r3, #18
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_ConfigChannel+0x1b2>
 800247a:	e007      	b.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012400 	.word	0x40012400
 80024a4:	2000004c 	.word	0x2000004c
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12e      	bne.n	8002524 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024d6:	f7ff fd15 	bl	8001f04 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024dc:	e01b      	b.n	8002516 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024de:	f7ff fd11 	bl	8001f04 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d914      	bls.n	8002516 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10d      	bne.n	8002516 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e007      	b.n	8002526 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d0dc      	beq.n	80024de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0ed      	b.n	800272e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fa6a 	bl	8001a38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002574:	f7ff fcc6 	bl	8001f04 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800257a:	e012      	b.n	80025a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800257c:	f7ff fcc2 	bl	8001f04 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b0a      	cmp	r3, #10
 8002588:	d90b      	bls.n	80025a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2205      	movs	r2, #5
 800259a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0c5      	b.n	800272e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0e5      	beq.n	800257c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0202 	bic.w	r2, r2, #2
 80025be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c0:	f7ff fca0 	bl	8001f04 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025c6:	e012      	b.n	80025ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c8:	f7ff fc9c 	bl	8001f04 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b0a      	cmp	r3, #10
 80025d4:	d90b      	bls.n	80025ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2205      	movs	r2, #5
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e09f      	b.n	800272e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1e5      	bne.n	80025c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d108      	bne.n	8002616 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e007      	b.n	8002626 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7e5b      	ldrb	r3, [r3, #25]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e007      	b.n	8002650 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7e9b      	ldrb	r3, [r3, #26]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d108      	bne.n	800266a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e007      	b.n	800267a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0220 	bic.w	r2, r2, #32
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7edb      	ldrb	r3, [r3, #27]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0210 	bic.w	r2, r2, #16
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e007      	b.n	80026a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0210 	orr.w	r2, r2, #16
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7f1b      	ldrb	r3, [r3, #28]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d108      	bne.n	80026be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0208 	orr.w	r2, r2, #8
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e007      	b.n	80026ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0208 	bic.w	r2, r2, #8
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7f5b      	ldrb	r3, [r3, #29]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0204 	orr.w	r2, r2, #4
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e007      	b.n	80026f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	ea42 0103 	orr.w	r1, r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800274e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d003      	beq.n	800275e <HAL_CAN_ConfigFilter+0x26>
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b02      	cmp	r3, #2
 800275a:	f040 80be 	bne.w	80028da <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800275e:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002760:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002778:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	431a      	orrs	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2201      	movs	r2, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	401a      	ands	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d123      	bne.n	8002808 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3248      	adds	r2, #72	; 0x48
 80027e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027fe:	6979      	ldr	r1, [r7, #20]
 8002800:	3348      	adds	r3, #72	; 0x48
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d122      	bne.n	8002856 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	431a      	orrs	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002830:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3248      	adds	r2, #72	; 0x48
 8002836:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800284a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	3348      	adds	r3, #72	; 0x48
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	401a      	ands	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002870:	e007      	b.n	8002882 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	431a      	orrs	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800289c:	e007      	b.n	80028ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	431a      	orrs	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028cc:	f023 0201 	bic.w	r2, r3, #1
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e006      	b.n	80028e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40006400 	.word	0x40006400

080028f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d12e      	bne.n	800296a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002924:	f7ff faee 	bl	8001f04 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800292a:	e012      	b.n	8002952 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800292c:	f7ff faea 	bl	8001f04 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b0a      	cmp	r3, #10
 8002938:	d90b      	bls.n	8002952 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2205      	movs	r2, #5
 800294a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e012      	b.n	8002978 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e5      	bne.n	800292c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e006      	b.n	8002978 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800299e:	7ffb      	ldrb	r3, [r7, #31]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d003      	beq.n	80029ac <HAL_CAN_AddTxMessage+0x2c>
 80029a4:	7ffb      	ldrb	r3, [r7, #31]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 80b8 	bne.w	8002b1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80a0 	beq.w	8002b0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	0e1b      	lsrs	r3, r3, #24
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d907      	bls.n	80029ec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e09e      	b.n	8002b2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029ec:	2201      	movs	r2, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	409a      	lsls	r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	6809      	ldr	r1, [r1, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3318      	adds	r3, #24
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	440b      	add	r3, r1
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e00f      	b.n	8002a3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	3318      	adds	r3, #24
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	440b      	add	r3, r1
 8002a38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3318      	adds	r3, #24
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	440b      	add	r3, r1
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	7d1b      	ldrb	r3, [r3, #20]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d111      	bne.n	8002a7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3318      	adds	r3, #24
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3318      	adds	r3, #24
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	440b      	add	r3, r1
 8002a76:	3304      	adds	r3, #4
 8002a78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3307      	adds	r3, #7
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	061a      	lsls	r2, r3, #24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3306      	adds	r3, #6
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3305      	adds	r3, #5
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	4313      	orrs	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	3204      	adds	r2, #4
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	ea43 0200 	orr.w	r2, r3, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ab0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	061a      	lsls	r2, r3, #24
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3302      	adds	r3, #2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4313      	orrs	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6811      	ldr	r1, [r2, #0]
 8002ad8:	ea43 0200 	orr.w	r2, r3, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ae6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3318      	adds	r3, #24
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6811      	ldr	r1, [r2, #0]
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3318      	adds	r3, #24
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	440b      	add	r3, r1
 8002b06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e00e      	b.n	8002b2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e006      	b.n	8002b2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b46:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d11d      	bne.n	8002b90 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3301      	adds	r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b90:	68fb      	ldr	r3, [r7, #12]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d003      	beq.n	8002bc0 <HAL_CAN_GetRxMessage+0x24>
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	f040 80f3 	bne.w	8002da6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10e      	bne.n	8002be4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0e7      	b.n	8002db4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0d8      	b.n	8002db4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	331b      	adds	r3, #27
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0204 	and.w	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10c      	bne.n	8002c3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	331b      	adds	r3, #27
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0d5b      	lsrs	r3, r3, #21
 8002c30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e00b      	b.n	8002c52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	331b      	adds	r3, #27
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	331b      	adds	r3, #27
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0202 	and.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	331b      	adds	r3, #27
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	3304      	adds	r3, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	331b      	adds	r3, #27
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	331b      	adds	r3, #27
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0a1a      	lsrs	r2, r3, #8
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0c1a      	lsrs	r2, r3, #16
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e1a      	lsrs	r2, r3, #24
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	3303      	adds	r3, #3
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3304      	adds	r3, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0a1a      	lsrs	r2, r3, #8
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	3305      	adds	r3, #5
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0c1a      	lsrs	r2, r3, #16
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3306      	adds	r3, #6
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0e1a      	lsrs	r2, r3, #24
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	3307      	adds	r3, #7
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d108      	bne.n	8002d92 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	e007      	b.n	8002da2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e006      	b.n	8002db4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d002      	beq.n	8002ddc <HAL_CAN_ActivateNotification+0x1e>
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d109      	bne.n	8002df0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6959      	ldr	r1, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e006      	b.n	8002dfe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e18:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d002      	beq.n	8002e26 <HAL_CAN_DeactivateNotification+0x1e>
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d10a      	bne.n	8002e3c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6959      	ldr	r1, [r3, #20]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	400a      	ands	r2, r1
 8002e36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e006      	b.n	8002e4a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07c      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d023      	beq.n	8002eec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f983 	bl	80031c2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ebc:	e016      	b.n	8002eec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed0:	e00c      	b.n	8002eec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d004      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee4:	e002      	b.n	8002eec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f986 	bl	80031f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d024      	beq.n	8002f40 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f962 	bl	80031d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f10:	e016      	b.n	8002f40 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e00c      	b.n	8002f40 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
 8002f38:	e002      	b.n	8002f40 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f965 	bl	800320a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d024      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f941 	bl	80031e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f64:	e016      	b.n	8002f94 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e00c      	b.n	8002f94 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e002      	b.n	8002f94 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f944 	bl	800321c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f933 	bl	8003240 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f91b 	bl	800322e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00c      	beq.n	800301c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003012:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2210      	movs	r2, #16
 800301a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2208      	movs	r2, #8
 8003036:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f90a 	bl	8003252 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f00e ffae 	bl	8011fb8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2210      	movs	r2, #16
 8003076:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8f3 	bl	8003264 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d006      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2208      	movs	r2, #8
 8003098:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8eb 	bl	8003276 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d07b      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d072      	beq.n	800319a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f043 0302 	orr.w	r3, r3, #2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310e:	2b00      	cmp	r3, #0
 8003110:	d043      	beq.n	800319a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03e      	beq.n	800319a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003122:	2b60      	cmp	r3, #96	; 0x60
 8003124:	d02b      	beq.n	800317e <HAL_CAN_IRQHandler+0x32a>
 8003126:	2b60      	cmp	r3, #96	; 0x60
 8003128:	d82e      	bhi.n	8003188 <HAL_CAN_IRQHandler+0x334>
 800312a:	2b50      	cmp	r3, #80	; 0x50
 800312c:	d022      	beq.n	8003174 <HAL_CAN_IRQHandler+0x320>
 800312e:	2b50      	cmp	r3, #80	; 0x50
 8003130:	d82a      	bhi.n	8003188 <HAL_CAN_IRQHandler+0x334>
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d019      	beq.n	800316a <HAL_CAN_IRQHandler+0x316>
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d826      	bhi.n	8003188 <HAL_CAN_IRQHandler+0x334>
 800313a:	2b30      	cmp	r3, #48	; 0x30
 800313c:	d010      	beq.n	8003160 <HAL_CAN_IRQHandler+0x30c>
 800313e:	2b30      	cmp	r3, #48	; 0x30
 8003140:	d822      	bhi.n	8003188 <HAL_CAN_IRQHandler+0x334>
 8003142:	2b10      	cmp	r3, #16
 8003144:	d002      	beq.n	800314c <HAL_CAN_IRQHandler+0x2f8>
 8003146:	2b20      	cmp	r3, #32
 8003148:	d005      	beq.n	8003156 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800314a:	e01d      	b.n	8003188 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003154:	e019      	b.n	800318a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f043 0310 	orr.w	r3, r3, #16
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800315e:	e014      	b.n	800318a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f043 0320 	orr.w	r3, r3, #32
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003168:	e00f      	b.n	800318a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003172:	e00a      	b.n	800318a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800317c:	e005      	b.n	800318a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003186:	e000      	b.n	800318a <HAL_CAN_IRQHandler+0x336>
            break;
 8003188:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003198:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2204      	movs	r2, #4
 80031a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f867 	bl	8003288 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031ba:	bf00      	nop
 80031bc:	3728      	adds	r7, #40	; 0x28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
	...

0800329c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60d3      	str	r3, [r2, #12]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <__NVIC_GetPriorityGrouping+0x18>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0307 	and.w	r3, r3, #7
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0b      	blt.n	800332a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4906      	ldr	r1, [pc, #24]	; (8003334 <__NVIC_EnableIRQ+0x34>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	; (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003400:	d301      	bcc.n	8003406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003402:	2301      	movs	r3, #1
 8003404:	e00f      	b.n	8003426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <SysTick_Config+0x40>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340e:	210f      	movs	r1, #15
 8003410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003414:	f7ff ff90 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <SysTick_Config+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <SysTick_Config+0x40>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff2d 	bl	800329c <__NVIC_SetPriorityGrouping>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff42 	bl	80032e4 <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff90 	bl	800338c <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5f 	bl	8003338 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff35 	bl	8003300 <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa2 	bl	80033f0 <SysTick_Config>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e059      	b.n	8003582 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_DMA_Init+0xd4>)
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d80f      	bhi.n	80034fa <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_DMA_Init+0xd8>)
 80034e2:	4413      	add	r3, r2
 80034e4:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_DMA_Init+0xdc>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	009a      	lsls	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a28      	ldr	r2, [pc, #160]	; (8003598 <HAL_DMA_Init+0xe0>)
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f8:	e00e      	b.n	8003518 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_DMA_Init+0xe4>)
 8003502:	4413      	add	r3, r2
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_DMA_Init+0xdc>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	009a      	lsls	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <HAL_DMA_Init+0xe8>)
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800352e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800353c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40020407 	.word	0x40020407
 8003590:	bffdfff8 	.word	0xbffdfff8
 8003594:	cccccccd 	.word	0xcccccccd
 8003598:	40020000 	.word	0x40020000
 800359c:	bffdfbf8 	.word	0xbffdfbf8
 80035a0:	40020400 	.word	0x40020400

080035a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2204      	movs	r2, #4
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80f1 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x20c>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80eb 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0204 	bic.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_DMA_IRQHandler+0x1d8>)
 8003600:	429a      	cmp	r2, r3
 8003602:	d958      	bls.n	80036b6 <HAL_DMA_IRQHandler+0x112>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_DMA_IRQHandler+0x1dc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d04f      	beq.n	80036ae <HAL_DMA_IRQHandler+0x10a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5c      	ldr	r2, [pc, #368]	; (8003784 <HAL_DMA_IRQHandler+0x1e0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d048      	beq.n	80036aa <HAL_DMA_IRQHandler+0x106>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5a      	ldr	r2, [pc, #360]	; (8003788 <HAL_DMA_IRQHandler+0x1e4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d040      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x100>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a59      	ldr	r2, [pc, #356]	; (800378c <HAL_DMA_IRQHandler+0x1e8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d038      	beq.n	800369e <HAL_DMA_IRQHandler+0xfa>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a57      	ldr	r2, [pc, #348]	; (8003790 <HAL_DMA_IRQHandler+0x1ec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d030      	beq.n	8003698 <HAL_DMA_IRQHandler+0xf4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a56      	ldr	r2, [pc, #344]	; (8003794 <HAL_DMA_IRQHandler+0x1f0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d028      	beq.n	8003692 <HAL_DMA_IRQHandler+0xee>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a4d      	ldr	r2, [pc, #308]	; (800377c <HAL_DMA_IRQHandler+0x1d8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d020      	beq.n	800368c <HAL_DMA_IRQHandler+0xe8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_DMA_IRQHandler+0x1f4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d019      	beq.n	8003688 <HAL_DMA_IRQHandler+0xe4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a50      	ldr	r2, [pc, #320]	; (800379c <HAL_DMA_IRQHandler+0x1f8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d012      	beq.n	8003684 <HAL_DMA_IRQHandler+0xe0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4f      	ldr	r2, [pc, #316]	; (80037a0 <HAL_DMA_IRQHandler+0x1fc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00a      	beq.n	800367e <HAL_DMA_IRQHandler+0xda>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_DMA_IRQHandler+0x200>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d102      	bne.n	8003678 <HAL_DMA_IRQHandler+0xd4>
 8003672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003676:	e01b      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 8003678:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800367c:	e018      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 800367e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003682:	e015      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 8003684:	2340      	movs	r3, #64	; 0x40
 8003686:	e013      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 8003688:	2304      	movs	r3, #4
 800368a:	e011      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 800368c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003690:	e00e      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 8003692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003696:	e00b      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 8003698:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800369c:	e008      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 800369e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036a2:	e005      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 80036a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a8:	e002      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	e000      	b.n	80036b0 <HAL_DMA_IRQHandler+0x10c>
 80036ae:	2304      	movs	r3, #4
 80036b0:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <HAL_DMA_IRQHandler+0x204>)
 80036b2:	6053      	str	r3, [r2, #4]
 80036b4:	e057      	b.n	8003766 <HAL_DMA_IRQHandler+0x1c2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a31      	ldr	r2, [pc, #196]	; (8003780 <HAL_DMA_IRQHandler+0x1dc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04f      	beq.n	8003760 <HAL_DMA_IRQHandler+0x1bc>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <HAL_DMA_IRQHandler+0x1e0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d048      	beq.n	800375c <HAL_DMA_IRQHandler+0x1b8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <HAL_DMA_IRQHandler+0x1e4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_IRQHandler+0x1b2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2c      	ldr	r2, [pc, #176]	; (800378c <HAL_DMA_IRQHandler+0x1e8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d038      	beq.n	8003750 <HAL_DMA_IRQHandler+0x1ac>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <HAL_DMA_IRQHandler+0x1ec>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d030      	beq.n	800374a <HAL_DMA_IRQHandler+0x1a6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_DMA_IRQHandler+0x1f0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d028      	beq.n	8003744 <HAL_DMA_IRQHandler+0x1a0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <HAL_DMA_IRQHandler+0x1d8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d020      	beq.n	800373e <HAL_DMA_IRQHandler+0x19a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a25      	ldr	r2, [pc, #148]	; (8003798 <HAL_DMA_IRQHandler+0x1f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_DMA_IRQHandler+0x196>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a24      	ldr	r2, [pc, #144]	; (800379c <HAL_DMA_IRQHandler+0x1f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d012      	beq.n	8003736 <HAL_DMA_IRQHandler+0x192>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_DMA_IRQHandler+0x1fc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00a      	beq.n	8003730 <HAL_DMA_IRQHandler+0x18c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <HAL_DMA_IRQHandler+0x200>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d102      	bne.n	800372a <HAL_DMA_IRQHandler+0x186>
 8003724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003728:	e01b      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 800372a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800372e:	e018      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	e015      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	e013      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 800373a:	2304      	movs	r3, #4
 800373c:	e011      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 800373e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003742:	e00e      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 8003744:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003748:	e00b      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 800374a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800374e:	e008      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 8003750:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003754:	e005      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 8003756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375a:	e002      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 800375c:	2340      	movs	r3, #64	; 0x40
 800375e:	e000      	b.n	8003762 <HAL_DMA_IRQHandler+0x1be>
 8003760:	2304      	movs	r3, #4
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <HAL_DMA_IRQHandler+0x208>)
 8003764:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8136 	beq.w	80039dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003778:	e130      	b.n	80039dc <HAL_DMA_IRQHandler+0x438>
 800377a:	bf00      	nop
 800377c:	40020080 	.word	0x40020080
 8003780:	40020008 	.word	0x40020008
 8003784:	4002001c 	.word	0x4002001c
 8003788:	40020030 	.word	0x40020030
 800378c:	40020044 	.word	0x40020044
 8003790:	40020058 	.word	0x40020058
 8003794:	4002006c 	.word	0x4002006c
 8003798:	40020408 	.word	0x40020408
 800379c:	4002041c 	.word	0x4002041c
 80037a0:	40020430 	.word	0x40020430
 80037a4:	40020444 	.word	0x40020444
 80037a8:	40020400 	.word	0x40020400
 80037ac:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2202      	movs	r2, #2
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80dd 	beq.w	800397c <HAL_DMA_IRQHandler+0x3d8>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80d7 	beq.w	800397c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 020a 	bic.w	r2, r2, #10
 80037ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_DMA_IRQHandler+0x444>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d958      	bls.n	80038b2 <HAL_DMA_IRQHandler+0x30e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a79      	ldr	r2, [pc, #484]	; (80039ec <HAL_DMA_IRQHandler+0x448>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04f      	beq.n	80038aa <HAL_DMA_IRQHandler+0x306>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a78      	ldr	r2, [pc, #480]	; (80039f0 <HAL_DMA_IRQHandler+0x44c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d048      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x302>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a76      	ldr	r2, [pc, #472]	; (80039f4 <HAL_DMA_IRQHandler+0x450>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x2fc>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	; (80039f8 <HAL_DMA_IRQHandler+0x454>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d038      	beq.n	800389a <HAL_DMA_IRQHandler+0x2f6>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a73      	ldr	r2, [pc, #460]	; (80039fc <HAL_DMA_IRQHandler+0x458>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d030      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2f0>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a72      	ldr	r2, [pc, #456]	; (8003a00 <HAL_DMA_IRQHandler+0x45c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d028      	beq.n	800388e <HAL_DMA_IRQHandler+0x2ea>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a69      	ldr	r2, [pc, #420]	; (80039e8 <HAL_DMA_IRQHandler+0x444>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d020      	beq.n	8003888 <HAL_DMA_IRQHandler+0x2e4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6e      	ldr	r2, [pc, #440]	; (8003a04 <HAL_DMA_IRQHandler+0x460>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d019      	beq.n	8003884 <HAL_DMA_IRQHandler+0x2e0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6c      	ldr	r2, [pc, #432]	; (8003a08 <HAL_DMA_IRQHandler+0x464>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d012      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2dc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6b      	ldr	r2, [pc, #428]	; (8003a0c <HAL_DMA_IRQHandler+0x468>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00a      	beq.n	800387a <HAL_DMA_IRQHandler+0x2d6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_DMA_IRQHandler+0x46c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d102      	bne.n	8003874 <HAL_DMA_IRQHandler+0x2d0>
 800386e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003872:	e01b      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 8003874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003878:	e018      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 800387a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387e:	e015      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 8003880:	2320      	movs	r3, #32
 8003882:	e013      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 8003884:	2302      	movs	r3, #2
 8003886:	e011      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 8003888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388c:	e00e      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 800388e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003892:	e00b      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 8003894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003898:	e008      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 800389a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800389e:	e005      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 80038a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a4:	e002      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 80038a6:	2320      	movs	r3, #32
 80038a8:	e000      	b.n	80038ac <HAL_DMA_IRQHandler+0x308>
 80038aa:	2302      	movs	r3, #2
 80038ac:	4a59      	ldr	r2, [pc, #356]	; (8003a14 <HAL_DMA_IRQHandler+0x470>)
 80038ae:	6053      	str	r3, [r2, #4]
 80038b0:	e057      	b.n	8003962 <HAL_DMA_IRQHandler+0x3be>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4d      	ldr	r2, [pc, #308]	; (80039ec <HAL_DMA_IRQHandler+0x448>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d04f      	beq.n	800395c <HAL_DMA_IRQHandler+0x3b8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_DMA_IRQHandler+0x44c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d048      	beq.n	8003958 <HAL_DMA_IRQHandler+0x3b4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_DMA_IRQHandler+0x450>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d040      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3ae>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a48      	ldr	r2, [pc, #288]	; (80039f8 <HAL_DMA_IRQHandler+0x454>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d038      	beq.n	800394c <HAL_DMA_IRQHandler+0x3a8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a47      	ldr	r2, [pc, #284]	; (80039fc <HAL_DMA_IRQHandler+0x458>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d030      	beq.n	8003946 <HAL_DMA_IRQHandler+0x3a2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a45      	ldr	r2, [pc, #276]	; (8003a00 <HAL_DMA_IRQHandler+0x45c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d028      	beq.n	8003940 <HAL_DMA_IRQHandler+0x39c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <HAL_DMA_IRQHandler+0x444>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d020      	beq.n	800393a <HAL_DMA_IRQHandler+0x396>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a41      	ldr	r2, [pc, #260]	; (8003a04 <HAL_DMA_IRQHandler+0x460>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_DMA_IRQHandler+0x392>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <HAL_DMA_IRQHandler+0x464>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d012      	beq.n	8003932 <HAL_DMA_IRQHandler+0x38e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <HAL_DMA_IRQHandler+0x468>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00a      	beq.n	800392c <HAL_DMA_IRQHandler+0x388>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <HAL_DMA_IRQHandler+0x46c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d102      	bne.n	8003926 <HAL_DMA_IRQHandler+0x382>
 8003920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003924:	e01b      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800392a:	e018      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 800392c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003930:	e015      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003932:	2320      	movs	r3, #32
 8003934:	e013      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003936:	2302      	movs	r3, #2
 8003938:	e011      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 800393a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393e:	e00e      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003940:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003944:	e00b      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800394a:	e008      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 800394c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003950:	e005      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003956:	e002      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 8003958:	2320      	movs	r3, #32
 800395a:	e000      	b.n	800395e <HAL_DMA_IRQHandler+0x3ba>
 800395c:	2302      	movs	r3, #2
 800395e:	4a2e      	ldr	r2, [pc, #184]	; (8003a18 <HAL_DMA_IRQHandler+0x474>)
 8003960:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d034      	beq.n	80039dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800397a:	e02f      	b.n	80039dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2208      	movs	r2, #8
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d028      	beq.n	80039de <HAL_DMA_IRQHandler+0x43a>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d023      	beq.n	80039de <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 020e 	bic.w	r2, r2, #14
 80039a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
    }
  }
  return;
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
}
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40020080 	.word	0x40020080
 80039ec:	40020008 	.word	0x40020008
 80039f0:	4002001c 	.word	0x4002001c
 80039f4:	40020030 	.word	0x40020030
 80039f8:	40020044 	.word	0x40020044
 80039fc:	40020058 	.word	0x40020058
 8003a00:	4002006c 	.word	0x4002006c
 8003a04:	40020408 	.word	0x40020408
 8003a08:	4002041c 	.word	0x4002041c
 8003a0c:	40020430 	.word	0x40020430
 8003a10:	40020444 	.word	0x40020444
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40020000 	.word	0x40020000

08003a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b08b      	sub	sp, #44	; 0x2c
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2e:	e169      	b.n	8003d04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a30:	2201      	movs	r2, #1
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f040 8158 	bne.w	8003cfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4a9a      	ldr	r2, [pc, #616]	; (8003cbc <HAL_GPIO_Init+0x2a0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d05e      	beq.n	8003b16 <HAL_GPIO_Init+0xfa>
 8003a58:	4a98      	ldr	r2, [pc, #608]	; (8003cbc <HAL_GPIO_Init+0x2a0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d875      	bhi.n	8003b4a <HAL_GPIO_Init+0x12e>
 8003a5e:	4a98      	ldr	r2, [pc, #608]	; (8003cc0 <HAL_GPIO_Init+0x2a4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d058      	beq.n	8003b16 <HAL_GPIO_Init+0xfa>
 8003a64:	4a96      	ldr	r2, [pc, #600]	; (8003cc0 <HAL_GPIO_Init+0x2a4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d86f      	bhi.n	8003b4a <HAL_GPIO_Init+0x12e>
 8003a6a:	4a96      	ldr	r2, [pc, #600]	; (8003cc4 <HAL_GPIO_Init+0x2a8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d052      	beq.n	8003b16 <HAL_GPIO_Init+0xfa>
 8003a70:	4a94      	ldr	r2, [pc, #592]	; (8003cc4 <HAL_GPIO_Init+0x2a8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d869      	bhi.n	8003b4a <HAL_GPIO_Init+0x12e>
 8003a76:	4a94      	ldr	r2, [pc, #592]	; (8003cc8 <HAL_GPIO_Init+0x2ac>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04c      	beq.n	8003b16 <HAL_GPIO_Init+0xfa>
 8003a7c:	4a92      	ldr	r2, [pc, #584]	; (8003cc8 <HAL_GPIO_Init+0x2ac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d863      	bhi.n	8003b4a <HAL_GPIO_Init+0x12e>
 8003a82:	4a92      	ldr	r2, [pc, #584]	; (8003ccc <HAL_GPIO_Init+0x2b0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d046      	beq.n	8003b16 <HAL_GPIO_Init+0xfa>
 8003a88:	4a90      	ldr	r2, [pc, #576]	; (8003ccc <HAL_GPIO_Init+0x2b0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d85d      	bhi.n	8003b4a <HAL_GPIO_Init+0x12e>
 8003a8e:	2b12      	cmp	r3, #18
 8003a90:	d82a      	bhi.n	8003ae8 <HAL_GPIO_Init+0xcc>
 8003a92:	2b12      	cmp	r3, #18
 8003a94:	d859      	bhi.n	8003b4a <HAL_GPIO_Init+0x12e>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_GPIO_Init+0x80>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003b17 	.word	0x08003b17
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003b03 	.word	0x08003b03
 8003aa8:	08003b45 	.word	0x08003b45
 8003aac:	08003b4b 	.word	0x08003b4b
 8003ab0:	08003b4b 	.word	0x08003b4b
 8003ab4:	08003b4b 	.word	0x08003b4b
 8003ab8:	08003b4b 	.word	0x08003b4b
 8003abc:	08003b4b 	.word	0x08003b4b
 8003ac0:	08003b4b 	.word	0x08003b4b
 8003ac4:	08003b4b 	.word	0x08003b4b
 8003ac8:	08003b4b 	.word	0x08003b4b
 8003acc:	08003b4b 	.word	0x08003b4b
 8003ad0:	08003b4b 	.word	0x08003b4b
 8003ad4:	08003b4b 	.word	0x08003b4b
 8003ad8:	08003b4b 	.word	0x08003b4b
 8003adc:	08003b4b 	.word	0x08003b4b
 8003ae0:	08003af9 	.word	0x08003af9
 8003ae4:	08003b0d 	.word	0x08003b0d
 8003ae8:	4a79      	ldr	r2, [pc, #484]	; (8003cd0 <HAL_GPIO_Init+0x2b4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aee:	e02c      	b.n	8003b4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	623b      	str	r3, [r7, #32]
          break;
 8003af6:	e029      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	3304      	adds	r3, #4
 8003afe:	623b      	str	r3, [r7, #32]
          break;
 8003b00:	e024      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	3308      	adds	r3, #8
 8003b08:	623b      	str	r3, [r7, #32]
          break;
 8003b0a:	e01f      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	330c      	adds	r3, #12
 8003b12:	623b      	str	r3, [r7, #32]
          break;
 8003b14:	e01a      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	623b      	str	r3, [r7, #32]
          break;
 8003b22:	e013      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	611a      	str	r2, [r3, #16]
          break;
 8003b36:	e009      	b.n	8003b4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b38:	2308      	movs	r3, #8
 8003b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	615a      	str	r2, [r3, #20]
          break;
 8003b42:	e003      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
          break;
 8003b48:	e000      	b.n	8003b4c <HAL_GPIO_Init+0x130>
          break;
 8003b4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2bff      	cmp	r3, #255	; 0xff
 8003b50:	d801      	bhi.n	8003b56 <HAL_GPIO_Init+0x13a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	e001      	b.n	8003b5a <HAL_GPIO_Init+0x13e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2bff      	cmp	r3, #255	; 0xff
 8003b60:	d802      	bhi.n	8003b68 <HAL_GPIO_Init+0x14c>
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	e002      	b.n	8003b6e <HAL_GPIO_Init+0x152>
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3b08      	subs	r3, #8
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	210f      	movs	r1, #15
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	6a39      	ldr	r1, [r7, #32]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80b1 	beq.w	8003cfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <HAL_GPIO_Init+0x2b8>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	4a4c      	ldr	r2, [pc, #304]	; (8003cd4 <HAL_GPIO_Init+0x2b8>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6193      	str	r3, [r2, #24]
 8003ba8:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <HAL_GPIO_Init+0x2b8>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bb4:	4a48      	ldr	r2, [pc, #288]	; (8003cd8 <HAL_GPIO_Init+0x2bc>)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	3302      	adds	r3, #2
 8003bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a40      	ldr	r2, [pc, #256]	; (8003cdc <HAL_GPIO_Init+0x2c0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <HAL_GPIO_Init+0x1ec>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <HAL_GPIO_Init+0x2c4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00d      	beq.n	8003c04 <HAL_GPIO_Init+0x1e8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <HAL_GPIO_Init+0x2c8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <HAL_GPIO_Init+0x1e4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <HAL_GPIO_Init+0x2cc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_GPIO_Init+0x1e0>
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <HAL_GPIO_Init+0x1ee>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	e004      	b.n	8003c0a <HAL_GPIO_Init+0x1ee>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e002      	b.n	8003c0a <HAL_GPIO_Init+0x1ee>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_GPIO_Init+0x1ee>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	f002 0203 	and.w	r2, r2, #3
 8003c10:	0092      	lsls	r2, r2, #2
 8003c12:	4093      	lsls	r3, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c1a:	492f      	ldr	r1, [pc, #188]	; (8003cd8 <HAL_GPIO_Init+0x2bc>)
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	492c      	ldr	r1, [pc, #176]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	4928      	ldr	r1, [pc, #160]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d006      	beq.n	8003c6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c5c:	4b23      	ldr	r3, [pc, #140]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	4922      	ldr	r1, [pc, #136]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	491e      	ldr	r1, [pc, #120]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4918      	ldr	r1, [pc, #96]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
 8003c90:	e006      	b.n	8003ca0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	4914      	ldr	r1, [pc, #80]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d021      	beq.n	8003cf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	490e      	ldr	r1, [pc, #56]	; (8003cec <HAL_GPIO_Init+0x2d0>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
 8003cb8:	e021      	b.n	8003cfe <HAL_GPIO_Init+0x2e2>
 8003cba:	bf00      	nop
 8003cbc:	10320000 	.word	0x10320000
 8003cc0:	10310000 	.word	0x10310000
 8003cc4:	10220000 	.word	0x10220000
 8003cc8:	10210000 	.word	0x10210000
 8003ccc:	10120000 	.word	0x10120000
 8003cd0:	10110000 	.word	0x10110000
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010800 	.word	0x40010800
 8003ce0:	40010c00 	.word	0x40010c00
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_GPIO_Init+0x304>)
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	4909      	ldr	r1, [pc, #36]	; (8003d20 <HAL_GPIO_Init+0x304>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	3301      	adds	r3, #1
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f ae8e 	bne.w	8003a30 <HAL_GPIO_Init+0x14>
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	372c      	adds	r7, #44	; 0x2c
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	40010400 	.word	0x40010400

08003d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
 8003d30:	4613      	mov	r3, r2
 8003d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d34:	787b      	ldrb	r3, [r7, #1]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d40:	e003      	b.n	8003d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	041a      	lsls	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d56:	b08f      	sub	sp, #60	; 0x3c
 8003d58:	af0a      	add	r7, sp, #40	; 0x28
 8003d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e10f      	b.n	8003f86 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f010 fc65 	bl	8014650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 fad5 	bl	8006354 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	687e      	ldr	r6, [r7, #4]
 8003db2:	466d      	mov	r5, sp
 8003db4:	f106 0410 	add.w	r4, r6, #16
 8003db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc8:	1d33      	adds	r3, r6, #4
 8003dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dcc:	6838      	ldr	r0, [r7, #0]
 8003dce:	f002 f9f3 	bl	80061b8 <USB_CoreInit>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0d0      	b.n	8003f86 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 fac2 	bl	8006374 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e04a      	b.n	8003e8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	333d      	adds	r3, #61	; 0x3d
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	333c      	adds	r3, #60	; 0x3c
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	b298      	uxth	r0, r3
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	3342      	adds	r3, #66	; 0x42
 8003e32:	4602      	mov	r2, r0
 8003e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	333f      	adds	r3, #63	; 0x3f
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3344      	adds	r3, #68	; 0x44
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3348      	adds	r3, #72	; 0x48
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3350      	adds	r3, #80	; 0x50
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3af      	bcc.n	8003df6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
 8003e9a:	e044      	b.n	8003f26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	3301      	adds	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d3b5      	bcc.n	8003e9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	687e      	ldr	r6, [r7, #4]
 8003f38:	466d      	mov	r5, sp
 8003f3a:	f106 0410 	add.w	r4, r6, #16
 8003f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f4e:	1d33      	adds	r3, r6, #4
 8003f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f52:	6838      	ldr	r0, [r7, #0]
 8003f54:	f002 fa5a 	bl	800640c <USB_DevInit>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00d      	b.n	8003f86 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f003 f910 	bl	80071a4 <USB_DevDisconnect>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_PCD_Start+0x16>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e012      	b.n	8003fca <HAL_PCD_Start+0x3c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f002 f9bf 	bl	8006334 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 f8d2 	bl	8007164 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_PCD_Stop+0x16>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e018      	b.n	800401a <HAL_PCD_Stop+0x48>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 f9ad 	bl	8006354 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 f8d0 	bl	80071a4 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2110      	movs	r1, #16
 800400a:	4618      	mov	r0, r3
 800400c:	f002 fb2a 	bl	8006664 <USB_FlushTxFifo>
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004022:	b590      	push	{r4, r7, lr}
 8004024:	b08d      	sub	sp, #52	; 0x34
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f003 f961 	bl	8007300 <USB_GetMode>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 8354 	bne.w	80046ee <HAL_PCD_IRQHandler+0x6cc>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f003 f8ca 	bl	80071e4 <USB_ReadInterrupts>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 834a 	beq.w	80046ec <HAL_PCD_IRQHandler+0x6ca>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f003 f8c1 	bl	80071e4 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b02      	cmp	r3, #2
 800406a:	d107      	bne.n	800407c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f002 0202 	and.w	r2, r2, #2
 800407a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f003 f8af 	bl	80071e4 <USB_ReadInterrupts>
 8004086:	4603      	mov	r3, r0
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b10      	cmp	r3, #16
 800408e:	d161      	bne.n	8004154 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0210 	bic.w	r2, r2, #16
 800409e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	0c5b      	lsrs	r3, r3, #17
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d124      	bne.n	8004116 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d035      	beq.n	8004144 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	6a38      	ldr	r0, [r7, #32]
 80040ec:	f002 feec 	bl	8006ec8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040fc:	441a      	add	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800410e:	441a      	add	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	619a      	str	r2, [r3, #24]
 8004114:	e016      	b.n	8004144 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	0c5b      	lsrs	r3, r3, #17
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	2b06      	cmp	r3, #6
 8004120:	d110      	bne.n	8004144 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004128:	2208      	movs	r2, #8
 800412a:	4619      	mov	r1, r3
 800412c:	6a38      	ldr	r0, [r7, #32]
 800412e:	f002 fecb 	bl	8006ec8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800413e:	441a      	add	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0210 	orr.w	r2, r2, #16
 8004152:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f003 f843 	bl	80071e4 <USB_ReadInterrupts>
 800415e:	4603      	mov	r3, r0
 8004160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004164:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004168:	d16e      	bne.n	8004248 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f003 f848 	bl	8007208 <USB_ReadDevAllOutEpInterrupt>
 8004178:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800417a:	e062      	b.n	8004242 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d057      	beq.n	8004236 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f003 f86b 	bl	800726c <USB_ReadDevOutEPInterrupt>
 8004196:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	2301      	movs	r3, #1
 80041b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fce4 	bl	8004b84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	461a      	mov	r2, r3
 80041d4:	2308      	movs	r3, #8
 80041d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fd20 	bl	8004c20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	461a      	mov	r2, r3
 80041f8:	2310      	movs	r3, #16
 80041fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	2320      	movs	r3, #32
 8004216:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	461a      	mov	r2, r3
 8004230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004234:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d199      	bne.n	800417c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f002 ffc9 	bl	80071e4 <USB_ReadInterrupts>
 8004252:	4603      	mov	r3, r0
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800425c:	f040 8087 	bne.w	800436e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f002 ffe8 	bl	800723a <USB_ReadDevAllInEpInterrupt>
 800426a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004270:	e07a      	b.n	8004368 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d06f      	beq.n	800435c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f003 f80d 	bl	80072a6 <USB_ReadDevInEPInterrupt>
 800428c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	2201      	movs	r2, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69f9      	ldr	r1, [r7, #28]
 80042b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b8:	4013      	ands	r3, r2
 80042ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	461a      	mov	r2, r3
 80042ca:	2301      	movs	r3, #1
 80042cc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f010 fa2e 	bl	8014736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	461a      	mov	r2, r3
 80042f2:	2308      	movs	r3, #8
 80042f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	461a      	mov	r2, r3
 800430e:	2310      	movs	r3, #16
 8004310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004328:	461a      	mov	r2, r3
 800432a:	2340      	movs	r3, #64	; 0x40
 800432c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	461a      	mov	r2, r3
 8004346:	2302      	movs	r3, #2
 8004348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fb8c 	bl	8004a74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	3301      	adds	r3, #1
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d181      	bne.n	8004272 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f002 ff36 	bl	80071e4 <USB_ReadInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800437e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004382:	d114      	bne.n	80043ae <HAL_PCD_IRQHandler+0x38c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f010 fa39 	bl	8014810 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f002 ff16 	bl	80071e4 <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c2:	d112      	bne.n	80043ea <HAL_PCD_IRQHandler+0x3c8>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d102      	bne.n	80043da <HAL_PCD_IRQHandler+0x3b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f010 f9f5 	bl	80147c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043e8:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f002 fef8 	bl	80071e4 <USB_ReadInterrupts>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	f040 80c5 	bne.w	800458c <HAL_PCD_IRQHandler+0x56a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2110      	movs	r1, #16
 800441c:	4618      	mov	r0, r3
 800441e:	f002 f921 	bl	8006664 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004426:	e056      	b.n	80044d6 <HAL_PCD_IRQHandler+0x4b4>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	461a      	mov	r2, r3
 8004436:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800443a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800445a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800447a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800448e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	3301      	adds	r3, #1
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d3a3      	bcc.n	8004428 <HAL_PCD_IRQHandler+0x406>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <HAL_PCD_IRQHandler+0x508>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450c:	f043 030b 	orr.w	r3, r3, #11
 8004510:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004522:	f043 030b 	orr.w	r3, r3, #11
 8004526:	6453      	str	r3, [r2, #68]	; 0x44
 8004528:	e015      	b.n	8004556 <HAL_PCD_IRQHandler+0x534>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800453c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004540:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004550:	f043 030b 	orr.w	r3, r3, #11
 8004554:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004564:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004568:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f002 fef2 	bl	8007360 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800458a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f002 fe27 	bl	80071e4 <USB_ReadInterrupts>
 8004596:	4603      	mov	r3, r0
 8004598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d124      	bne.n	80045ec <HAL_PCD_IRQHandler+0x5ca>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f002 feb7 	bl	800731a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f002 f8b3 	bl	800671c <USB_GetDevSpeed>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681c      	ldr	r4, [r3, #0]
 80045c2:	f001 f8c9 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80045c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	4620      	mov	r0, r4
 80045d2:	f001 fe13 	bl	80061fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f010 f8d5 	bl	8014786 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 fdf7 	bl	80071e4 <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d10a      	bne.n	8004616 <HAL_PCD_IRQHandler+0x5f4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f010 f8b2 	bl	801476a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f002 0208 	and.w	r2, r2, #8
 8004614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f002 fde2 	bl	80071e4 <USB_ReadInterrupts>
 8004620:	4603      	mov	r3, r0
 8004622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462a:	d10f      	bne.n	800464c <HAL_PCD_IRQHandler+0x62a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f010 f90a 	bl	8014850 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800464a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f002 fdc7 	bl	80071e4 <USB_ReadInterrupts>
 8004656:	4603      	mov	r3, r0
 8004658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004660:	d10f      	bne.n	8004682 <HAL_PCD_IRQHandler+0x660>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f010 f8dd 	bl	801482c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f002 fdac 	bl	80071e4 <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d10a      	bne.n	80046ae <HAL_PCD_IRQHandler+0x68c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f010 f8eb 	bl	8014874 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f002 fd96 	bl	80071e4 <USB_ReadInterrupts>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d115      	bne.n	80046ee <HAL_PCD_IRQHandler+0x6cc>
    {
      temp = hpcd->Instance->GOTGINT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_PCD_IRQHandler+0x6b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f010 f8db 	bl	8014890 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e000      	b.n	80046ee <HAL_PCD_IRQHandler+0x6cc>
      return;
 80046ec:	bf00      	nop
    }
  }
}
 80046ee:	3734      	adds	r7, #52	; 0x34
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}

080046f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_PCD_SetAddress+0x1a>
 800470a:	2302      	movs	r3, #2
 800470c:	e013      	b.n	8004736 <HAL_PCD_SetAddress+0x42>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f002 fcf7 	bl	800711a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	4608      	mov	r0, r1
 8004748:	4611      	mov	r1, r2
 800474a:	461a      	mov	r2, r3
 800474c:	4603      	mov	r3, r0
 800474e:	70fb      	strb	r3, [r7, #3]
 8004750:	460b      	mov	r3, r1
 8004752:	803b      	strh	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800475c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da0f      	bge.n	8004784 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	3338      	adds	r3, #56	; 0x38
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	3304      	adds	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	705a      	strb	r2, [r3, #1]
 8004782:	e00f      	b.n	80047a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	3304      	adds	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047b0:	883a      	ldrh	r2, [r7, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	78ba      	ldrb	r2, [r7, #2]
 80047ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047ce:	78bb      	ldrb	r3, [r7, #2]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d102      	bne.n	80047da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_PCD_EP_Open+0xaa>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e00e      	b.n	8004806 <HAL_PCD_EP_Open+0xc8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 ffae 	bl	8006758 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004804:	7afb      	ldrb	r3, [r7, #11]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	460b      	mov	r3, r1
 800481c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2200      	movs	r2, #0
 8004848:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004850:	7afb      	ldrb	r3, [r7, #11]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	b2da      	uxtb	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800485c:	7afb      	ldrb	r3, [r7, #11]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	4618      	mov	r0, r3
 800486e:	f002 f9d5 	bl	8006c1c <USB_EP0StartXfer>
 8004872:	e005      	b.n	8004880 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6979      	ldr	r1, [r7, #20]
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fff2 	bl	8006864 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	460b      	mov	r3, r1
 8004898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3338      	adds	r3, #56	; 0x38
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2201      	movs	r2, #1
 80048c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ca:	7afb      	ldrb	r3, [r7, #11]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f002 f998 	bl	8006c1c <USB_EP0StartXfer>
 80048ec:	e005      	b.n	80048fa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6979      	ldr	r1, [r7, #20]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 ffb5 	bl	8006864 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d901      	bls.n	8004922 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e04e      	b.n	80049c0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	da0f      	bge.n	800494a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3338      	adds	r3, #56	; 0x38
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	705a      	strb	r2, [r3, #1]
 8004948:	e00d      	b.n	8004966 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4413      	add	r3, r2
 800495c:	3304      	adds	r3, #4
 800495e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	b2da      	uxtb	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_PCD_EP_SetStall+0x82>
 8004982:	2302      	movs	r3, #2
 8004984:	e01c      	b.n	80049c0 <HAL_PCD_EP_SetStall+0xbc>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	f002 faee 	bl	8006f76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f002 fcd5 	bl	8007360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 020f 	and.w	r2, r3, #15
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d901      	bls.n	80049e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e042      	b.n	8004a6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da0f      	bge.n	8004a0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 020f 	and.w	r2, r3, #15
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	3338      	adds	r3, #56	; 0x38
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3304      	adds	r3, #4
 8004a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	705a      	strb	r2, [r3, #1]
 8004a0c:	e00f      	b.n	8004a2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	f003 020f 	and.w	r2, r3, #15
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_PCD_EP_ClrStall+0x86>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e00e      	b.n	8004a6c <HAL_PCD_EP_ClrStall+0xa4>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f002 faf7 	bl	8007050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	3338      	adds	r3, #56	; 0x38
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	3304      	adds	r3, #4
 8004a9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d901      	bls.n	8004aac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e067      	b.n	8004b7c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d902      	bls.n	8004ac8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3303      	adds	r3, #3
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad0:	e026      	b.n	8004b20 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d902      	bls.n	8004aee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3303      	adds	r3, #3
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f002 f9a7 	bl	8006e56 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d809      	bhi.n	8004b4a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d203      	bcs.n	8004b4a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1c3      	bne.n	8004ad2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d811      	bhi.n	8004b7a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b76:	4013      	ands	r3, r2
 8004b78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	333c      	adds	r3, #60	; 0x3c
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <PCD_EP_OutXfrComplete_int+0x98>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d124      	bne.n	8004c04 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	6093      	str	r3, [r2, #8]
 8004bd8:	e01a      	b.n	8004c10 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f00f fd7f 	bl	8014700 <HAL_PCD_DataOutStageCallback>
 8004c02:	e005      	b.n	8004c10 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f00f fd78 	bl	8014700 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	4f54310a 	.word	0x4f54310a

08004c20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	333c      	adds	r3, #60	; 0x3c
 8004c38:	3304      	adds	r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d90e      	bls.n	8004c74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f00f fd31 	bl	80146dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	4f54300a 	.word	0x4f54300a

08004c88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
 8004c94:	4613      	mov	r3, r2
 8004c96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ca6:	883b      	ldrh	r3, [r7, #0]
 8004ca8:	0419      	lsls	r1, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb4:	e028      	b.n	8004d08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e00d      	b.n	8004ce6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	3340      	adds	r3, #64	; 0x40
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3ec      	bcc.n	8004cca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cf0:	883b      	ldrh	r3, [r7, #0]
 8004cf2:	0418      	lsls	r0, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	4302      	orrs	r2, r0
 8004d00:	3340      	adds	r3, #64	; 0x40
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e304      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8087 	beq.w	8004e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d54:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d00c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d60:	4b8f      	ldr	r3, [pc, #572]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d112      	bne.n	8004d92 <HAL_RCC_OscConfig+0x5e>
 8004d6c:	4b8c      	ldr	r3, [pc, #560]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d10b      	bne.n	8004d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7a:	4b89      	ldr	r3, [pc, #548]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d06c      	beq.n	8004e60 <HAL_RCC_OscConfig+0x12c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d168      	bne.n	8004e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e2de      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x76>
 8004d9c:	4b80      	ldr	r3, [pc, #512]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7f      	ldr	r2, [pc, #508]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e02e      	b.n	8004e08 <HAL_RCC_OscConfig+0xd4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x98>
 8004db2:	4b7b      	ldr	r3, [pc, #492]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7a      	ldr	r2, [pc, #488]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b78      	ldr	r3, [pc, #480]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a77      	ldr	r2, [pc, #476]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e01d      	b.n	8004e08 <HAL_RCC_OscConfig+0xd4>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0xbc>
 8004dd6:	4b72      	ldr	r3, [pc, #456]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a71      	ldr	r2, [pc, #452]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0xd4>
 8004df0:	4b6b      	ldr	r3, [pc, #428]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	4b68      	ldr	r3, [pc, #416]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a67      	ldr	r2, [pc, #412]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d013      	beq.n	8004e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7fd f878 	bl	8001f04 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e18:	f7fd f874 	bl	8001f04 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	; 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e292      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b5d      	ldr	r3, [pc, #372]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0xe4>
 8004e36:	e014      	b.n	8004e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e38:	f7fd f864 	bl	8001f04 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e40:	f7fd f860 	bl	8001f04 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e27e      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e52:	4b53      	ldr	r3, [pc, #332]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x10c>
 8004e5e:	e000      	b.n	8004e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d063      	beq.n	8004f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e6e:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e7a:	4b49      	ldr	r3, [pc, #292]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d11c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x18c>
 8004e86:	4b46      	ldr	r3, [pc, #280]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d116      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_RCC_OscConfig+0x176>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e252      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4939      	ldr	r1, [pc, #228]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ebe:	e03a      	b.n	8004f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <HAL_RCC_OscConfig+0x270>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fd f819 	bl	8001f04 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed6:	f7fd f815 	bl	8001f04 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e233      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee8:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4927      	ldr	r1, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]
 8004f08:	e015      	b.n	8004f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0a:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fc fff8 	bl	8001f04 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f18:	f7fc fff4 	bl	8001f04 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e212      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d03a      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d019      	beq.n	8004f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4a:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f50:	f7fc ffd8 	bl	8001f04 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f58:	f7fc ffd4 	bl	8001f04 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e1f2      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f76:	2001      	movs	r0, #1
 8004f78:	f000 fc0c 	bl	8005794 <RCC_Delay>
 8004f7c:	e01c      	b.n	8004fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <HAL_RCC_OscConfig+0x274>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f84:	f7fc ffbe 	bl	8001f04 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8a:	e00f      	b.n	8004fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8c:	f7fc ffba 	bl	8001f04 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d908      	bls.n	8004fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1d8      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	42420000 	.word	0x42420000
 8004fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	4b9b      	ldr	r3, [pc, #620]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e9      	bne.n	8004f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a6 	beq.w	8005112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fca:	4b94      	ldr	r3, [pc, #592]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10d      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	4b91      	ldr	r3, [pc, #580]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4a90      	ldr	r2, [pc, #576]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	61d3      	str	r3, [r2, #28]
 8004fe2:	4b8e      	ldr	r3, [pc, #568]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b8b      	ldr	r3, [pc, #556]	; (8005220 <HAL_RCC_OscConfig+0x4ec>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d118      	bne.n	8005030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b88      	ldr	r3, [pc, #544]	; (8005220 <HAL_RCC_OscConfig+0x4ec>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a87      	ldr	r2, [pc, #540]	; (8005220 <HAL_RCC_OscConfig+0x4ec>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fc ff7b 	bl	8001f04 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fc ff77 	bl	8001f04 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e195      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b7e      	ldr	r3, [pc, #504]	; (8005220 <HAL_RCC_OscConfig+0x4ec>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x312>
 8005038:	4b78      	ldr	r3, [pc, #480]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	4a77      	ldr	r2, [pc, #476]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6213      	str	r3, [r2, #32]
 8005044:	e02d      	b.n	80050a2 <HAL_RCC_OscConfig+0x36e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x334>
 800504e:	4b73      	ldr	r3, [pc, #460]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a72      	ldr	r2, [pc, #456]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6213      	str	r3, [r2, #32]
 800505a:	4b70      	ldr	r3, [pc, #448]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	4a6f      	ldr	r2, [pc, #444]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005060:	f023 0304 	bic.w	r3, r3, #4
 8005064:	6213      	str	r3, [r2, #32]
 8005066:	e01c      	b.n	80050a2 <HAL_RCC_OscConfig+0x36e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b05      	cmp	r3, #5
 800506e:	d10c      	bne.n	800508a <HAL_RCC_OscConfig+0x356>
 8005070:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4a69      	ldr	r2, [pc, #420]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	6213      	str	r3, [r2, #32]
 800507c:	4b67      	ldr	r3, [pc, #412]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4a66      	ldr	r2, [pc, #408]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6213      	str	r3, [r2, #32]
 8005088:	e00b      	b.n	80050a2 <HAL_RCC_OscConfig+0x36e>
 800508a:	4b64      	ldr	r3, [pc, #400]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	4a63      	ldr	r2, [pc, #396]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	6213      	str	r3, [r2, #32]
 8005096:	4b61      	ldr	r3, [pc, #388]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4a60      	ldr	r2, [pc, #384]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d015      	beq.n	80050d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fc ff2b 	bl	8001f04 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fc ff27 	bl	8001f04 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e143      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c8:	4b54      	ldr	r3, [pc, #336]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ee      	beq.n	80050b2 <HAL_RCC_OscConfig+0x37e>
 80050d4:	e014      	b.n	8005100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d6:	f7fc ff15 	bl	8001f04 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fc ff11 	bl	8001f04 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e12d      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f4:	4b49      	ldr	r3, [pc, #292]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ee      	bne.n	80050de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d105      	bne.n	8005112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005106:	4b45      	ldr	r3, [pc, #276]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	4a44      	ldr	r2, [pc, #272]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800510c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005110:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 808c 	beq.w	8005234 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800511c:	4b3f      	ldr	r3, [pc, #252]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d10e      	bne.n	8005148 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800512a:	4b3c      	ldr	r3, [pc, #240]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005132:	2b08      	cmp	r3, #8
 8005134:	d108      	bne.n	8005148 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005136:	4b39      	ldr	r3, [pc, #228]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800513e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e103      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	2b02      	cmp	r3, #2
 800514e:	d14e      	bne.n	80051ee <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005150:	4b32      	ldr	r3, [pc, #200]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800515c:	4b2f      	ldr	r3, [pc, #188]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0ef      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005170:	4b2c      	ldr	r3, [pc, #176]	; (8005224 <HAL_RCC_OscConfig+0x4f0>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fc fec5 	bl	8001f04 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800517e:	f7fc fec1 	bl	8001f04 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b64      	cmp	r3, #100	; 0x64
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0df      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005190:	4b22      	ldr	r3, [pc, #136]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f0      	bne.n	800517e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800519c:	4b1f      	ldr	r3, [pc, #124]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	491c      	ldr	r1, [pc, #112]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4918      	ldr	r1, [pc, #96]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_RCC_OscConfig+0x4f0>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c6:	f7fc fe9d 	bl	8001f04 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051ce:	f7fc fe99 	bl	8001f04 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b64      	cmp	r3, #100	; 0x64
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0b7      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80051e0:	4b0e      	ldr	r3, [pc, #56]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x49a>
 80051ec:	e022      	b.n	8005234 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <HAL_RCC_OscConfig+0x4e8>)
 80051f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <HAL_RCC_OscConfig+0x4f0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fc fe80 	bl	8001f04 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005206:	e00f      	b.n	8005228 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005208:	f7fc fe7c 	bl	8001f04 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d908      	bls.n	8005228 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e09a      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	40007000 	.word	0x40007000
 8005224:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005228:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e9      	bne.n	8005208 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8088 	beq.w	800534e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800523e:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b08      	cmp	r3, #8
 8005248:	d068      	beq.n	800531c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d14d      	bne.n	80052ee <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005252:	4b42      	ldr	r3, [pc, #264]	; (800535c <HAL_RCC_OscConfig+0x628>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005258:	f7fc fe54 	bl	8001f04 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fc fe50 	bl	8001f04 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e06e      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005272:	4b39      	ldr	r3, [pc, #228]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005286:	d10f      	bne.n	80052a8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005288:	4b33      	ldr	r3, [pc, #204]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4931      	ldr	r1, [pc, #196]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 8005292:	4313      	orrs	r3, r2
 8005294:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f023 020f 	bic.w	r2, r3, #15
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	492d      	ldr	r1, [pc, #180]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	430b      	orrs	r3, r1
 80052ba:	4927      	ldr	r1, [pc, #156]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <HAL_RCC_OscConfig+0x628>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fc fe1d 	bl	8001f04 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fc fe19 	bl	8001f04 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e037      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x59a>
 80052ec:	e02f      	b.n	800534e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x628>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fc fe06 	bl	8001f04 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fc fe02 	bl	8001f04 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e020      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x5c8>
 800531a:	e018      	b.n	800534e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e013      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_OscConfig+0x624>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	429a      	cmp	r2, r3
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	42420060 	.word	0x42420060

08005360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0d0      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005374:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d910      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b67      	ldr	r3, [pc, #412]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	4965      	ldr	r1, [pc, #404]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0b8      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d020      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053bc:	4b59      	ldr	r3, [pc, #356]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	4a58      	ldr	r2, [pc, #352]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d4:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a52      	ldr	r2, [pc, #328]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e0:	4b50      	ldr	r3, [pc, #320]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	494d      	ldr	r1, [pc, #308]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d040      	beq.n	8005480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d107      	bne.n	8005416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d115      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e07f      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541e:	4b41      	ldr	r3, [pc, #260]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e073      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542e:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e06b      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543e:	4b39      	ldr	r3, [pc, #228]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4936      	ldr	r1, [pc, #216]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005450:	f7fc fd58 	bl	8001f04 <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc fd54 	bl	8001f04 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e053      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 020c 	and.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	429a      	cmp	r2, r3
 800547e:	d1eb      	bne.n	8005458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d210      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	4922      	ldr	r1, [pc, #136]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e032      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054bc:	4b19      	ldr	r3, [pc, #100]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4916      	ldr	r1, [pc, #88]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	490e      	ldr	r1, [pc, #56]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ee:	f000 f821 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	490a      	ldr	r1, [pc, #40]	; (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005500:	5ccb      	ldrb	r3, [r1, r3]
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <HAL_RCC_ClockConfig+0x1cc>)
 8005508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1d0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fc fcb6 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40022000 	.word	0x40022000
 8005524:	40021000 	.word	0x40021000
 8005528:	08015420 	.word	0x08015420
 800552c:	2000004c 	.word	0x2000004c
 8005530:	20000050 	.word	0x20000050

08005534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	b09d      	sub	sp, #116	; 0x74
 800553a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <HAL_RCC_GetSysClockFreq+0x210>)
 800553e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8005542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005544:	c407      	stmia	r4!, {r0, r1, r2}
 8005546:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005548:	4b7f      	ldr	r3, [pc, #508]	; (8005748 <HAL_RCC_GetSysClockFreq+0x214>)
 800554a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800554e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	667b      	str	r3, [r7, #100]	; 0x64
 8005558:	2300      	movs	r3, #0
 800555a:	663b      	str	r3, [r7, #96]	; 0x60
 800555c:	2300      	movs	r3, #0
 800555e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005560:	2300      	movs	r3, #0
 8005562:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	65bb      	str	r3, [r7, #88]	; 0x58
 800556c:	2300      	movs	r3, #0
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005570:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCC_GetSysClockFreq+0x218>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b04      	cmp	r3, #4
 800557e:	d002      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x52>
 8005580:	2b08      	cmp	r3, #8
 8005582:	d003      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x58>
 8005584:	e0d4      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b72      	ldr	r3, [pc, #456]	; (8005750 <HAL_RCC_GetSysClockFreq+0x21c>)
 8005588:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800558a:	e0d4      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800558c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800558e:	0c9b      	lsrs	r3, r3, #18
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	3340      	adds	r3, #64	; 0x40
 8005596:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800559a:	4413      	add	r3, r2
 800559c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80055a0:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80b9 	beq.w	8005720 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80055ae:	4b67      	ldr	r3, [pc, #412]	; (800574c <HAL_RCC_GetSysClockFreq+0x218>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	3340      	adds	r3, #64	; 0x40
 80055b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80055bc:	4413      	add	r3, r2
 80055be:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80055c2:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80055c4:	4b61      	ldr	r3, [pc, #388]	; (800574c <HAL_RCC_GetSysClockFreq+0x218>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8095 	beq.w	80056fc <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80055d2:	4b5e      	ldr	r3, [pc, #376]	; (800574c <HAL_RCC_GetSysClockFreq+0x218>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	3301      	adds	r3, #1
 80055de:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80055e0:	4b5a      	ldr	r3, [pc, #360]	; (800574c <HAL_RCC_GetSysClockFreq+0x218>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	3302      	adds	r3, #2
 80055ec:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80055ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f0:	2200      	movs	r2, #0
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	61fa      	str	r2, [r7, #28]
 80055f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f8:	2200      	movs	r2, #0
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80055fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005602:	4622      	mov	r2, r4
 8005604:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005608:	4684      	mov	ip, r0
 800560a:	fb0c f202 	mul.w	r2, ip, r2
 800560e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8005612:	468c      	mov	ip, r1
 8005614:	4618      	mov	r0, r3
 8005616:	4621      	mov	r1, r4
 8005618:	4603      	mov	r3, r0
 800561a:	fb03 f30c 	mul.w	r3, r3, ip
 800561e:	4413      	add	r3, r2
 8005620:	4602      	mov	r2, r0
 8005622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005624:	fba2 8901 	umull	r8, r9, r2, r1
 8005628:	444b      	add	r3, r9
 800562a:	4699      	mov	r9, r3
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	f04f 0000 	mov.w	r0, #0
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	0159      	lsls	r1, r3, #5
 800563a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800563e:	0150      	lsls	r0, r2, #5
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	ebb2 0508 	subs.w	r5, r2, r8
 8005648:	eb63 0609 	sbc.w	r6, r3, r9
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	01b3      	lsls	r3, r6, #6
 8005656:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 800565a:	01aa      	lsls	r2, r5, #6
 800565c:	ebb2 0a05 	subs.w	sl, r2, r5
 8005660:	eb63 0b06 	sbc.w	fp, r3, r6
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005678:	4692      	mov	sl, r2
 800567a:	469b      	mov	fp, r3
 800567c:	eb1a 0308 	adds.w	r3, sl, r8
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	eb4b 0309 	adc.w	r3, fp, r9
 8005686:	607b      	str	r3, [r7, #4]
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005694:	4629      	mov	r1, r5
 8005696:	024b      	lsls	r3, r1, #9
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	4604      	mov	r4, r0
 800569e:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80056a2:	4601      	mov	r1, r0
 80056a4:	024a      	lsls	r2, r1, #9
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ac:	2200      	movs	r2, #0
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	617a      	str	r2, [r7, #20]
 80056b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b4:	2200      	movs	r2, #0
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	60fa      	str	r2, [r7, #12]
 80056ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80056be:	4622      	mov	r2, r4
 80056c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80056c4:	4645      	mov	r5, r8
 80056c6:	fb05 f202 	mul.w	r2, r5, r2
 80056ca:	464e      	mov	r6, r9
 80056cc:	4625      	mov	r5, r4
 80056ce:	461c      	mov	r4, r3
 80056d0:	4623      	mov	r3, r4
 80056d2:	fb03 f306 	mul.w	r3, r3, r6
 80056d6:	4413      	add	r3, r2
 80056d8:	4622      	mov	r2, r4
 80056da:	4644      	mov	r4, r8
 80056dc:	fba2 2404 	umull	r2, r4, r2, r4
 80056e0:	627c      	str	r4, [r7, #36]	; 0x24
 80056e2:	623a      	str	r2, [r7, #32]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e6:	4413      	add	r3, r2
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ee:	f7fb fa4b 	bl	8000b88 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4613      	mov	r3, r2
 80056f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056fa:	e007      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80056fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fe:	4a14      	ldr	r2, [pc, #80]	; (8005750 <HAL_RCC_GetSysClockFreq+0x21c>)
 8005700:	fb03 f202 	mul.w	r2, r3, r2
 8005704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800570c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005710:	461a      	mov	r2, r3
 8005712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571e:	e004      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005722:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <HAL_RCC_GetSysClockFreq+0x220>)
 8005724:	fb02 f303 	mul.w	r3, r2, r3
 8005728:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800572e:	e002      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <HAL_RCC_GetSysClockFreq+0x21c>)
 8005732:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8005734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8005738:	4618      	mov	r0, r3
 800573a:	3774      	adds	r7, #116	; 0x74
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	bf00      	nop
 8005744:	080151bc 	.word	0x080151bc
 8005748:	080151cc 	.word	0x080151cc
 800574c:	40021000 	.word	0x40021000
 8005750:	007a1200 	.word	0x007a1200
 8005754:	003d0900 	.word	0x003d0900

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <HAL_RCC_GetHCLKFreq+0x10>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	2000004c 	.word	0x2000004c

0800576c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005770:	f7ff fff2 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4903      	ldr	r1, [pc, #12]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	08015430 	.word	0x08015430

08005794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <RCC_Delay+0x34>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <RCC_Delay+0x38>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	0a5b      	lsrs	r3, r3, #9
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057b0:	bf00      	nop
  }
  while (Delay --);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1e5a      	subs	r2, r3, #1
 80057b6:	60fa      	str	r2, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f9      	bne.n	80057b0 <RCC_Delay+0x1c>
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	2000004c 	.word	0x2000004c
 80057cc:	10624dd3 	.word	0x10624dd3

080057d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d07d      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80057f0:	2300      	movs	r3, #0
 80057f2:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f4:	4b8b      	ldr	r3, [pc, #556]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005800:	4b88      	ldr	r3, [pc, #544]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4a87      	ldr	r2, [pc, #540]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580a:	61d3      	str	r3, [r2, #28]
 800580c:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005818:	2301      	movs	r3, #1
 800581a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581c:	4b82      	ldr	r3, [pc, #520]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d118      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005828:	4b7f      	ldr	r3, [pc, #508]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7e      	ldr	r2, [pc, #504]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005834:	f7fc fb66 	bl	8001f04 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583a:	e008      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fc fb62 	bl	8001f04 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e0e5      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b76      	ldr	r3, [pc, #472]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800585a:	4b72      	ldr	r3, [pc, #456]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d02e      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	429a      	cmp	r2, r3
 8005876:	d027      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005878:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005882:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005888:	4b68      	ldr	r3, [pc, #416]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800588e:	4a65      	ldr	r2, [pc, #404]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d014      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fc fb31 	bl	8001f04 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a4:	e00a      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fc fb2d 	bl	8001f04 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e0ae      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	4b59      	ldr	r3, [pc, #356]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ee      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c8:	4b56      	ldr	r3, [pc, #344]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4953      	ldr	r1, [pc, #332]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058da:	7efb      	ldrb	r3, [r7, #27]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e0:	4b50      	ldr	r3, [pc, #320]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4a4f      	ldr	r2, [pc, #316]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058f8:	4b4a      	ldr	r3, [pc, #296]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4947      	ldr	r1, [pc, #284]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005916:	4b43      	ldr	r3, [pc, #268]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	4940      	ldr	r1, [pc, #256]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005924:	4313      	orrs	r3, r2
 8005926:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005934:	4b3b      	ldr	r3, [pc, #236]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	4938      	ldr	r1, [pc, #224]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005942:	4313      	orrs	r3, r2
 8005944:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005946:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005952:	4b34      	ldr	r3, [pc, #208]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800595e:	2301      	movs	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d148      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005968:	4b2e      	ldr	r3, [pc, #184]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d138      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005974:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005980:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e042      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	4920      	ldr	r1, [pc, #128]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80059a6:	4b1f      	ldr	r3, [pc, #124]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	491c      	ldr	r1, [pc, #112]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059be:	f7fc faa1 	bl	8001f04 <HAL_GetTick>
 80059c2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059c6:	f7fc fa9d 	bl	8001f04 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b64      	cmp	r3, #100	; 0x64
 80059d2:	d901      	bls.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e020      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80059e4:	e009      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80059e6:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d001      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e00f      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4904      	ldr	r1, [pc, #16]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	42420440 	.word	0x42420440
 8005a30:	42420070 	.word	0x42420070

08005a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e041      	b.n	8005aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc f8c6 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fa26 	bl	8005ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d122      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d11b      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0202 	mvn.w	r2, #2
 8005afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f9ba 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005b1a:	e005      	b.n	8005b28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9ad 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9bc 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d122      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d11b      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0204 	mvn.w	r2, #4
 8005b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f990 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005b6e:	e005      	b.n	8005b7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f983 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f992 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d122      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0208 	mvn.w	r2, #8
 8005ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f966 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005bc2:	e005      	b.n	8005bd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f959 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f968 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d122      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d11b      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0210 	mvn.w	r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f93c 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005c16:	e005      	b.n	8005c24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f92f 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f93e 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0201 	mvn.w	r2, #1
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f90a 	bl	8005e6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d10e      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d107      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fa92 	bl	80061a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f902 	bl	8005eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0220 	mvn.w	r2, #32
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fa5d 	bl	8006194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_ConfigClockSource+0x18>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e0b3      	b.n	8005e62 <HAL_TIM_ConfigClockSource+0x180>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d20:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d32:	d03e      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0xd0>
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d38:	f200 8087 	bhi.w	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	f000 8085 	beq.w	8005e4e <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d48:	d87f      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d4a:	2b70      	cmp	r3, #112	; 0x70
 8005d4c:	d01a      	beq.n	8005d84 <HAL_TIM_ConfigClockSource+0xa2>
 8005d4e:	2b70      	cmp	r3, #112	; 0x70
 8005d50:	d87b      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d52:	2b60      	cmp	r3, #96	; 0x60
 8005d54:	d050      	beq.n	8005df8 <HAL_TIM_ConfigClockSource+0x116>
 8005d56:	2b60      	cmp	r3, #96	; 0x60
 8005d58:	d877      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d5a:	2b50      	cmp	r3, #80	; 0x50
 8005d5c:	d03c      	beq.n	8005dd8 <HAL_TIM_ConfigClockSource+0xf6>
 8005d5e:	2b50      	cmp	r3, #80	; 0x50
 8005d60:	d873      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	d058      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x136>
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d86f      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d6a:	2b30      	cmp	r3, #48	; 0x30
 8005d6c:	d064      	beq.n	8005e38 <HAL_TIM_ConfigClockSource+0x156>
 8005d6e:	2b30      	cmp	r3, #48	; 0x30
 8005d70:	d86b      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d060      	beq.n	8005e38 <HAL_TIM_ConfigClockSource+0x156>
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d867      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d05c      	beq.n	8005e38 <HAL_TIM_ConfigClockSource+0x156>
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d05a      	beq.n	8005e38 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d82:	e062      	b.n	8005e4a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	6899      	ldr	r1, [r3, #8]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f000 f979 	bl	800608a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005da6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
      break;
 8005db0:	e04e      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6899      	ldr	r1, [r3, #8]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f000 f962 	bl	800608a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dd4:	609a      	str	r2, [r3, #8]
      break;
 8005dd6:	e03b      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6859      	ldr	r1, [r3, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	461a      	mov	r2, r3
 8005de6:	f000 f8d9 	bl	8005f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2150      	movs	r1, #80	; 0x50
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f930 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005df6:	e02b      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	461a      	mov	r2, r3
 8005e06:	f000 f8f7 	bl	8005ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2160      	movs	r1, #96	; 0x60
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f920 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005e16:	e01b      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6859      	ldr	r1, [r3, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	461a      	mov	r2, r3
 8005e26:	f000 f8b9 	bl	8005f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 f910 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005e36:	e00b      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f000 f907 	bl	8006056 <TIM_ITRx_SetConfig>
        break;
 8005e48:	e002      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a2d      	ldr	r2, [pc, #180]	; (8005f8c <TIM_Base_SetConfig+0xc8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00f      	beq.n	8005efc <TIM_Base_SetConfig+0x38>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d00b      	beq.n	8005efc <TIM_Base_SetConfig+0x38>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	; (8005f90 <TIM_Base_SetConfig+0xcc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_Base_SetConfig+0x38>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a29      	ldr	r2, [pc, #164]	; (8005f94 <TIM_Base_SetConfig+0xd0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_Base_SetConfig+0x38>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a28      	ldr	r2, [pc, #160]	; (8005f98 <TIM_Base_SetConfig+0xd4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <TIM_Base_SetConfig+0xc8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_Base_SetConfig+0x72>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1c:	d00b      	beq.n	8005f36 <TIM_Base_SetConfig+0x72>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <TIM_Base_SetConfig+0xcc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_Base_SetConfig+0x72>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <TIM_Base_SetConfig+0xd0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_Base_SetConfig+0x72>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <TIM_Base_SetConfig+0xd4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <TIM_Base_SetConfig+0xc8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d103      	bne.n	8005f7c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	615a      	str	r2, [r3, #20]
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00

08005f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f023 030a 	bic.w	r3, r3, #10
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f023 0210 	bic.w	r2, r3, #16
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	031b      	lsls	r3, r3, #12
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	621a      	str	r2, [r3, #32]
}
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	f043 0307 	orr.w	r3, r3, #7
 8006078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	609a      	str	r2, [r3, #8]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800608a:	b480      	push	{r7}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	021a      	lsls	r2, r3, #8
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	609a      	str	r2, [r3, #8]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060dc:	2302      	movs	r3, #2
 80060de:	e04b      	b.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612c:	d00e      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a13      	ldr	r2, [pc, #76]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10c      	bne.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006152:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00

08006194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061b8:	b084      	sub	sp, #16
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	f107 001c 	add.w	r0, r7, #28
 80061c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 f90a 	bl	80073f0 <USB_CoreReset>
 80061dc:	4603      	mov	r3, r0
 80061de:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061f8:	b004      	add	sp, #16
 80061fa:	4770      	bx	lr

080061fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d165      	bne.n	80062dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a3e      	ldr	r2, [pc, #248]	; (800630c <USB_SetTurnaroundTime+0x110>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d906      	bls.n	8006226 <USB_SetTurnaroundTime+0x2a>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4a3d      	ldr	r2, [pc, #244]	; (8006310 <USB_SetTurnaroundTime+0x114>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d202      	bcs.n	8006226 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006220:	230f      	movs	r3, #15
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e05c      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4a39      	ldr	r2, [pc, #228]	; (8006310 <USB_SetTurnaroundTime+0x114>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d306      	bcc.n	800623c <USB_SetTurnaroundTime+0x40>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4a38      	ldr	r2, [pc, #224]	; (8006314 <USB_SetTurnaroundTime+0x118>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d202      	bcs.n	800623c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006236:	230e      	movs	r3, #14
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e051      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a35      	ldr	r2, [pc, #212]	; (8006314 <USB_SetTurnaroundTime+0x118>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d306      	bcc.n	8006252 <USB_SetTurnaroundTime+0x56>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a34      	ldr	r2, [pc, #208]	; (8006318 <USB_SetTurnaroundTime+0x11c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d202      	bcs.n	8006252 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800624c:	230d      	movs	r3, #13
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e046      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a30      	ldr	r2, [pc, #192]	; (8006318 <USB_SetTurnaroundTime+0x11c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d306      	bcc.n	8006268 <USB_SetTurnaroundTime+0x6c>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4a2f      	ldr	r2, [pc, #188]	; (800631c <USB_SetTurnaroundTime+0x120>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d802      	bhi.n	8006268 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006262:	230c      	movs	r3, #12
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e03b      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4a2c      	ldr	r2, [pc, #176]	; (800631c <USB_SetTurnaroundTime+0x120>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d906      	bls.n	800627e <USB_SetTurnaroundTime+0x82>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <USB_SetTurnaroundTime+0x124>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d802      	bhi.n	800627e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006278:	230b      	movs	r3, #11
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e030      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4a27      	ldr	r2, [pc, #156]	; (8006320 <USB_SetTurnaroundTime+0x124>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d906      	bls.n	8006294 <USB_SetTurnaroundTime+0x98>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4a26      	ldr	r2, [pc, #152]	; (8006324 <USB_SetTurnaroundTime+0x128>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d802      	bhi.n	8006294 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800628e:	230a      	movs	r3, #10
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e025      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4a23      	ldr	r2, [pc, #140]	; (8006324 <USB_SetTurnaroundTime+0x128>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d906      	bls.n	80062aa <USB_SetTurnaroundTime+0xae>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4a22      	ldr	r2, [pc, #136]	; (8006328 <USB_SetTurnaroundTime+0x12c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d202      	bcs.n	80062aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062a4:	2309      	movs	r3, #9
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e01a      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <USB_SetTurnaroundTime+0x12c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d306      	bcc.n	80062c0 <USB_SetTurnaroundTime+0xc4>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <USB_SetTurnaroundTime+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d802      	bhi.n	80062c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062ba:	2308      	movs	r3, #8
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e00f      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <USB_SetTurnaroundTime+0x130>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d906      	bls.n	80062d6 <USB_SetTurnaroundTime+0xda>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4a19      	ldr	r2, [pc, #100]	; (8006330 <USB_SetTurnaroundTime+0x134>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d202      	bcs.n	80062d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062d0:	2307      	movs	r3, #7
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e004      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062d6:	2306      	movs	r3, #6
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e001      	b.n	80062e0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062dc:	2309      	movs	r3, #9
 80062de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062f8:	431a      	orrs	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	00d8acbf 	.word	0x00d8acbf
 8006310:	00e4e1c0 	.word	0x00e4e1c0
 8006314:	00f42400 	.word	0x00f42400
 8006318:	01067380 	.word	0x01067380
 800631c:	011a499f 	.word	0x011a499f
 8006320:	01312cff 	.word	0x01312cff
 8006324:	014ca43f 	.word	0x014ca43f
 8006328:	016e3600 	.word	0x016e3600
 800632c:	01a6ab1f 	.word	0x01a6ab1f
 8006330:	01e84800 	.word	0x01e84800

08006334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f043 0201 	orr.w	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 0201 	bic.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d115      	bne.n	80063c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063a2:	2001      	movs	r0, #1
 80063a4:	f7fb fdb8 	bl	8001f18 <HAL_Delay>
      ms++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 ffa6 	bl	8007300 <USB_GetMode>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d01e      	beq.n	80063f8 <USB_SetCurrentMode+0x84>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b31      	cmp	r3, #49	; 0x31
 80063be:	d9f0      	bls.n	80063a2 <USB_SetCurrentMode+0x2e>
 80063c0:	e01a      	b.n	80063f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d115      	bne.n	80063f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063d4:	2001      	movs	r0, #1
 80063d6:	f7fb fd9f 	bl	8001f18 <HAL_Delay>
      ms++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ff8d 	bl	8007300 <USB_GetMode>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <USB_SetCurrentMode+0x84>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b31      	cmp	r3, #49	; 0x31
 80063f0:	d9f0      	bls.n	80063d4 <USB_SetCurrentMode+0x60>
 80063f2:	e001      	b.n	80063f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e005      	b.n	8006404 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b32      	cmp	r3, #50	; 0x32
 80063fc:	d101      	bne.n	8006402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e009      	b.n	8006440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3340      	adds	r3, #64	; 0x40
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3301      	adds	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b0e      	cmp	r3, #14
 8006444:	d9f2      	bls.n	800642c <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	4619      	mov	r1, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	461a      	mov	r2, r3
 800646e:	680b      	ldr	r3, [r1, #0]
 8006470:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006472:	2103      	movs	r1, #3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f939 	bl	80066ec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800647a:	2110      	movs	r1, #16
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f8f1 	bl	8006664 <USB_FlushTxFifo>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <USB_DevInit+0x80>
  {
    ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f90d 	bl	80066ac <USB_FlushRxFifo>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USB_DevInit+0x90>
  {
    ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	461a      	mov	r2, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	e043      	b.n	800654e <USB_DevInit+0x142>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064dc:	d118      	bne.n	8006510 <USB_DevInit+0x104>
    {
      if (i == 0U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <USB_DevInit+0xee>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e013      	b.n	8006522 <USB_DevInit+0x116>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	461a      	mov	r2, r3
 8006508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e008      	b.n	8006522 <USB_DevInit+0x116>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	461a      	mov	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652e:	461a      	mov	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	461a      	mov	r2, r3
 8006542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3301      	adds	r3, #1
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d3b7      	bcc.n	80064c6 <USB_DevInit+0xba>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e043      	b.n	80065e4 <USB_DevInit+0x1d8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006572:	d118      	bne.n	80065a6 <USB_DevInit+0x19a>
    {
      if (i == 0U)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <USB_DevInit+0x184>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	461a      	mov	r2, r3
 8006588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e013      	b.n	80065b8 <USB_DevInit+0x1ac>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e008      	b.n	80065b8 <USB_DevInit+0x1ac>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	2300      	movs	r3, #0
 80065b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	461a      	mov	r2, r3
 80065d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3301      	adds	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3b7      	bcc.n	800655c <USB_DevInit+0x150>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800660c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f043 0210 	orr.w	r2, r3, #16
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <USB_DevInit+0x254>)
 8006620:	4313      	orrs	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f043 0208 	orr.w	r2, r3, #8
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d107      	bne.n	800664e <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006646:	f043 0304 	orr.w	r3, r3, #4
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665a:	b004      	add	sp, #16
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	803c3800 	.word	0x803c3800

08006664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	019b      	lsls	r3, r3, #6
 8006676:	f043 0220 	orr.w	r2, r3, #32
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <USB_FlushTxFifo+0x44>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e006      	b.n	800669e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b20      	cmp	r3, #32
 800669a:	d0f0      	beq.n	800667e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	00030d40 	.word	0x00030d40

080066ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2210      	movs	r2, #16
 80066bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <USB_FlushRxFifo+0x3c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e006      	b.n	80066de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d0f0      	beq.n	80066be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr
 80066e8:	00030d40 	.word	0x00030d40

080066ec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0306 	and.w	r3, r3, #6
 8006734:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d002      	beq.n	8006742 <USB_GetDevSpeed+0x26>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b06      	cmp	r3, #6
 8006740:	d102      	bne.n	8006748 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006742:	2302      	movs	r3, #2
 8006744:	75fb      	strb	r3, [r7, #23]
 8006746:	e001      	b.n	800674c <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006748:	230f      	movs	r3, #15
 800674a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d13a      	bne.n	80067ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	2101      	movs	r1, #1
 8006786:	fa01 f303 	lsl.w	r3, r1, r3
 800678a:	b29b      	uxth	r3, r3
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006792:	4313      	orrs	r3, r2
 8006794:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d155      	bne.n	8006858 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	78db      	ldrb	r3, [r3, #3]
 80067c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	059b      	lsls	r3, r3, #22
 80067ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d0:	4313      	orrs	r3, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e036      	b.n	8006858 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	2101      	movs	r1, #1
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006808:	4313      	orrs	r3, r2
 800680a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d11a      	bne.n	8006858 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	78db      	ldrb	r3, [r3, #3]
 800683c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800683e:	430b      	orrs	r3, r1
 8006840:	4313      	orrs	r3, r2
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	f040 810a 	bne.w	8006a96 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d132      	bne.n	80068f0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e8:	0cdb      	lsrs	r3, r3, #19
 80068ea:	04db      	lsls	r3, r3, #19
 80068ec:	6113      	str	r3, [r2, #16]
 80068ee:	e074      	b.n	80069da <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690a:	0cdb      	lsrs	r3, r3, #19
 800690c:	04db      	lsls	r3, r3, #19
 800690e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800692e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6959      	ldr	r1, [r3, #20]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	440b      	add	r3, r1
 800694c:	1e59      	subs	r1, r3, #1
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	fbb1 f3f3 	udiv	r3, r1, r3
 8006956:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006958:	4baf      	ldr	r3, [pc, #700]	; (8006c18 <USB_EPStartXfer+0x3b4>)
 800695a:	400b      	ands	r3, r1
 800695c:	6939      	ldr	r1, [r7, #16]
 800695e:	0148      	lsls	r0, r1, #5
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	4401      	add	r1, r0
 8006964:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006968:	4313      	orrs	r3, r2
 800696a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006982:	6939      	ldr	r1, [r7, #16]
 8006984:	0148      	lsls	r0, r1, #5
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	4401      	add	r1, r0
 800698a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800698e:	4313      	orrs	r3, r2
 8006990:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	78db      	ldrb	r3, [r3, #3]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d11f      	bne.n	80069da <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069d8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069f8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	78db      	ldrb	r3, [r3, #3]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d015      	beq.n	8006a2e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8100 	beq.w	8006c0c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a22:	6979      	ldr	r1, [r7, #20]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	634b      	str	r3, [r1, #52]	; 0x34
 8006a2c:	e0ee      	b.n	8006c0c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d110      	bne.n	8006a60 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e00f      	b.n	8006a80 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68d9      	ldr	r1, [r3, #12]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781a      	ldrb	r2, [r3, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f9e1 	bl	8006e56 <USB_WritePacket>
 8006a94:	e0ba      	b.n	8006c0c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	0cdb      	lsrs	r3, r3, #19
 8006ab2:	04db      	lsls	r3, r3, #19
 8006ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ad8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d123      	bne.n	8006b2a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af8:	6939      	ldr	r1, [r7, #16]
 8006afa:	0148      	lsls	r0, r1, #5
 8006afc:	6979      	ldr	r1, [r7, #20]
 8006afe:	4401      	add	r1, r0
 8006b00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b04:	4313      	orrs	r3, r2
 8006b06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b26:	6113      	str	r3, [r2, #16]
 8006b28:	e033      	b.n	8006b92 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695a      	ldr	r2, [r3, #20]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	4413      	add	r3, r2
 8006b34:	1e5a      	subs	r2, r3, #1
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	89fb      	ldrh	r3, [r7, #14]
 8006b50:	04d9      	lsls	r1, r3, #19
 8006b52:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <USB_EPStartXfer+0x3b4>)
 8006b54:	400b      	ands	r3, r1
 8006b56:	6939      	ldr	r1, [r7, #16]
 8006b58:	0148      	lsls	r0, r1, #5
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	4401      	add	r1, r0
 8006b5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	89f9      	ldrh	r1, [r7, #14]
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b82:	6939      	ldr	r1, [r7, #16]
 8006b84:	0148      	lsls	r0, r1, #5
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	4401      	add	r1, r0
 8006b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	78db      	ldrb	r3, [r3, #3]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d128      	bne.n	8006bec <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e00f      	b.n	8006bec <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	1ff80000 	.word	0x1ff80000

08006c1c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 80ab 	bne.w	8006d90 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d132      	bne.n	8006ca8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca0:	0cdb      	lsrs	r3, r3, #19
 8006ca2:	04db      	lsls	r3, r3, #19
 8006ca4:	6113      	str	r3, [r2, #16]
 8006ca6:	e04e      	b.n	8006d46 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc2:	0cdb      	lsrs	r3, r3, #19
 8006cc4:	04db      	lsls	r3, r3, #19
 8006cc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d903      	bls.n	8006d00 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	0148      	lsls	r0, r1, #5
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	4401      	add	r1, r0
 8006d3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d42:	4313      	orrs	r3, r2
 8006d44:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d64:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d06d      	beq.n	8006e4a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	2101      	movs	r1, #1
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	634b      	str	r3, [r1, #52]	; 0x34
 8006d8e:	e05c      	b.n	8006e4a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006daa:	0cdb      	lsrs	r3, r3, #19
 8006dac:	04db      	lsls	r3, r3, #19
 8006dae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	0151      	lsls	r1, r2, #5
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dd2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	0148      	lsls	r0, r1, #5
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	4401      	add	r1, r0
 8006e22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e26:	4313      	orrs	r3, r2
 8006e28:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b089      	sub	sp, #36	; 0x24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	4611      	mov	r1, r2
 8006e62:	461a      	mov	r2, r3
 8006e64:	460b      	mov	r3, r1
 8006e66:	71fb      	strb	r3, [r7, #7]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006e74:	88bb      	ldrh	r3, [r7, #4]
 8006e76:	3303      	adds	r3, #3
 8006e78:	089b      	lsrs	r3, r3, #2
 8006e7a:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	e018      	b.n	8006eb4 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	031a      	lsls	r2, r3, #12
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8e:	461a      	mov	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d3e2      	bcc.n	8006e82 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3724      	adds	r7, #36	; 0x24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b08b      	sub	sp, #44	; 0x2c
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	089b      	lsrs	r3, r3, #2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	623b      	str	r3, [r7, #32]
 8006ef2:	e014      	b.n	8006f1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	3301      	adds	r3, #1
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	3301      	adds	r3, #1
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	3301      	adds	r3, #1
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	3301      	adds	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	623b      	str	r3, [r7, #32]
 8006f1e:	6a3a      	ldr	r2, [r7, #32]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d3e6      	bcc.n	8006ef4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f26:	8bfb      	ldrh	r3, [r7, #30]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01e      	beq.n	8006f6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f36:	461a      	mov	r2, r3
 8006f38:	f107 0310 	add.w	r3, r7, #16
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	701a      	strb	r2, [r3, #0]
      i++;
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	3301      	adds	r3, #1
 8006f56:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f5e:	8bfb      	ldrh	r3, [r7, #30]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f64:	8bfb      	ldrh	r3, [r7, #30]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1ea      	bne.n	8006f40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	372c      	adds	r7, #44	; 0x2c
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d12c      	bne.n	8006fec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	db12      	blt.n	8006fca <USB_EPSetStall+0x54>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00f      	beq.n	8006fca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fc8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e02b      	b.n	8007044 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	db12      	blt.n	8007024 <USB_EPSetStall+0xae>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007022:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d128      	bne.n	80070be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800708a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	78db      	ldrb	r3, [r3, #3]
 8007090:	2b03      	cmp	r3, #3
 8007092:	d003      	beq.n	800709c <USB_EPClearStall+0x4c>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	78db      	ldrb	r3, [r3, #3]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d138      	bne.n	800710e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	e027      	b.n	800710e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	78db      	ldrb	r3, [r3, #3]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d003      	beq.n	80070ee <USB_EPClearStall+0x9e>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	78db      	ldrb	r3, [r3, #3]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d10f      	bne.n	800710e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	440a      	add	r2, r1
 8007104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr

0800711a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007138:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800713c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007192:	f023 0302 	bic.w	r3, r3, #2
 8007196:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr

080071a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d2:	f043 0302 	orr.w	r3, r3, #2
 80071d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4013      	ands	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071fc:	68fb      	ldr	r3, [r7, #12]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	4013      	ands	r3, r2
 800722a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	0c1b      	lsrs	r3, r3, #16
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	4013      	ands	r3, r2
 800725c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	b29b      	uxth	r3, r3
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	4013      	ands	r3, r2
 8007298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800729a:	68bb      	ldr	r3, [r7, #8]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	fa22 f303 	lsr.w	r3, r2, r3
 80072d6:	01db      	lsls	r3, r3, #7
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4013      	ands	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072f4:	68bb      	ldr	r3, [r7, #8]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f003 0301 	and.w	r3, r3, #1
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007334:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800734c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007350:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr
	...

08007360 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	333c      	adds	r3, #60	; 0x3c
 8007372:	3304      	adds	r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <USB_EP0_OutStart+0x8c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d90a      	bls.n	8007396 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800738c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007390:	d101      	bne.n	8007396 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	e024      	b.n	80073e0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	461a      	mov	r2, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	f043 0318 	orr.w	r3, r3, #24
 80073c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073dc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	4f54300a 	.word	0x4f54300a

080073f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4a12      	ldr	r2, [pc, #72]	; (8007450 <USB_CoreReset+0x60>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e01b      	b.n	8007446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	daf2      	bge.n	80073fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a08      	ldr	r2, [pc, #32]	; (8007450 <USB_CoreReset+0x60>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d901      	bls.n	8007438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e006      	b.n	8007446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d0f0      	beq.n	8007426 <USB_CoreReset+0x36>

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr
 8007450:	00030d40 	.word	0x00030d40

08007454 <_Z13N2kHasElapsedmmm>:
// Input:
//   - Start    Start time
//   - Elapsed  How much should be elapsed from start
//   - Now      Compare (current) time, optional, default N2kMillis() 
// Return true, when Now>Start+Elapsed
inline bool N2kHasElapsed(uint32_t Start, uint32_t Elapsed, uint32_t Now=N2kMillis()) { 
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  return Now-(Start+Elapsed)<LONG_MAX; 
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4413      	add	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800746e:	4293      	cmp	r3, r2
 8007470:	bf34      	ite	cc
 8007472:	2301      	movcc	r3, #1
 8007474:	2300      	movcs	r3, #0
 8007476:	b2db      	uxtb	r3, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <_ZN9tNMEA200018tDeviceInformationC1Ev>:
    } tUnionDeviceInformation;

    tUnionDeviceInformation DeviceInformation;

  public:
    tDeviceInformation() { DeviceInformation.Name=0; }
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	e9c1 2300 	strd	r2, r3, [r1]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>:
    void SetUniqueNumber(uint32_t _UniqueNumber) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0xffe00000) | (_UniqueNumber&0x1fffff); }
    uint32_t GetUniqueNumber() const { return DeviceInformation.UnicNumberAndManCode&0x1fffff; }
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr

080074be <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>:
    void SetManufacturerCode(uint16_t _ManufacturerCode) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0x1fffff) | (((unsigned long)(_ManufacturerCode&0x7ff))<<21); }
    uint16_t GetManufacturerCode() const { return DeviceInformation.UnicNumberAndManCode>>21; }
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	0d5b      	lsrs	r3, r3, #21
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>:
    void SetIndustryGroup(unsigned char _IndustryGroup) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0x0f) | (_IndustryGroup<<4) | 0x80; }
    unsigned char GetIndustryGroup() const { return (DeviceInformation.IndustryGroupAndSystemInstance>>4) & 0x07; }
    void SetSystemInstance(unsigned char _SystemInstance) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0xf0) | (_SystemInstance&0x0f); }
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }

    uint64_t GetName() const { return DeviceInformation.Name; }
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr

080074f2 <_ZN9tNMEA200011IsBroadcastEh>:
        if (v) { ForwardMode |= HandleModeBit_OnlyKnownMessages;  } else { ForwardMode &= ~HandleModeBit_OnlyKnownMessages; }
      }

    void SetDebugMode(tDebugMode _dbMode);

    static bool IsBroadcast(unsigned char Source) { return Source==0xff; }
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	4603      	mov	r3, r0
 80074fa:	71fb      	strb	r3, [r7, #7]
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	2bff      	cmp	r3, #255	; 0xff
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr
	...

08007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>:
#include "NMEA2000.h"

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
tN2kGroupFunctionHandler::tN2kGroupFunctionHandler(tNMEA2000 *_pNMEA2000, unsigned long _PGN)  {
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m+0x40>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	601a      	str	r2, [r3, #0]
  pNext=0;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	605a      	str	r2, [r3, #4]
  pNMEA2000=_pNMEA2000;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	611a      	str	r2, [r3, #16]
  PGN=_PGN;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	609a      	str	r2, [r3, #8]
  Proprietary=tNMEA2000::IsProprietaryMessage(PGN);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	4618      	mov	r0, r3
 800753e:	f004 fcb9 	bl	800beb4 <_ZN9tNMEA200020IsProprietaryMessageEm>
 8007542:	4603      	mov	r3, r0
 8007544:	461a      	mov	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	731a      	strb	r2, [r3, #12]
}
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	08015440 	.word	0x08015440

08007558 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Handle(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b08f      	sub	sp, #60	; 0x3c
 800755c:	af04      	add	r7, sp, #16
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	71fb      	strb	r3, [r7, #7]
  if ( PGN!=PGNForGroupFunction && PGN!=0 ) return false;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d005      	beq.n	800757e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 800757a:	2300      	movs	r3, #0
 800757c:	e126      	b.n	80077cc <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x274>

  bool handled=false;
 800757e:	2300      	movs	r3, #0
 8007580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t ManufacturerCode;
  uint8_t IndustryGroup;
  uint8_t UniqueID;
  uint8_t NumberOfSelectionPairs;
  uint8_t NumberOfParameterPairs;
  bool Propr=(PGN!=0?Proprietary:tNMEA2000::IsProprietaryMessage(PGNForGroupFunction));
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x44>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	7b1b      	ldrb	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e008      	b.n	80075ae <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x56>
 800759c:	6838      	ldr	r0, [r7, #0]
 800759e:	f004 fc89 	bl	800beb4 <_ZN9tNMEA200020IsProprietaryMessageEm>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  switch (GroupFunctionCode) {
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2b06      	cmp	r3, #6
 80075b6:	f200 8107 	bhi.w	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	0800761f 	.word	0x0800761f
 80075c8:	08007671 	.word	0x08007671
 80075cc:	080076b3 	.word	0x080076b3
 80075d0:	0800772d 	.word	0x0800772d
 80075d4:	08007735 	.word	0x08007735
 80075d8:	080077af 	.word	0x080077af
    case N2kgfc_Request:
      uint32_t TransmissionInterval;
      uint16_t TransmissionIntervalOffset;

        if (ParseRequestParams(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs)) {
 80075dc:	f107 0320 	add.w	r3, r7, #32
 80075e0:	f107 021a 	add.w	r2, r7, #26
 80075e4:	f107 011c 	add.w	r1, r7, #28
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f000 fab3 	bl	8007b54 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80e0 	beq.w	80077b6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
          handled=HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3304      	adds	r3, #4
 80075fc:	681c      	ldr	r4, [r3, #0]
 80075fe:	69f9      	ldr	r1, [r7, #28]
 8007600:	8b78      	ldrh	r0, [r7, #26]
 8007602:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007608:	9201      	str	r2, [sp, #4]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4603      	mov	r3, r0
 800760e:	460a      	mov	r2, r1
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	47a0      	blx	r4
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 800761c:	e0cb      	b.n	80077b6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
    case N2kgfc_Command:
      uint8_t PrioritySetting;

        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	7b5b      	ldrb	r3, [r3, #13]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff ff65 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0xde>
          handled=true;  // We can mark this handled, since command is not allowed to broadcast.
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
          }
        }
      break;
 8007634:	e0c1      	b.n	80077ba <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
 8007636:	f107 0220 	add.w	r2, r7, #32
 800763a:	f107 0319 	add.w	r3, r7, #25
 800763e:	4619      	mov	r1, r3
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f000 fad7 	bl	8007bf4 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80b6 	beq.w	80077ba <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3308      	adds	r3, #8
 8007654:	681c      	ldr	r4, [r3, #0]
 8007656:	7e7a      	ldrb	r2, [r7, #25]
 8007658:	f897 1020 	ldrb.w	r1, [r7, #32]
 800765c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	460b      	mov	r3, r1
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	47a0      	blx	r4
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800766e:	e0a4      	b.n	80077ba <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
    case N2kgfc_Acknowledge:
      tN2kGroupFunctionPGNErrorCode PGNErrorCode;
      tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode;

        if (ParseAcknowledgeParams(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs)) {
 8007670:	f107 0320 	add.w	r3, r7, #32
 8007674:	f107 0217 	add.w	r2, r7, #23
 8007678:	f107 0118 	add.w	r1, r7, #24
 800767c:	68b8      	ldr	r0, [r7, #8]
 800767e:	f000 fafb 	bl	8007c78 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 809a 	beq.w	80077be <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
          handled=HandleAcknowledge(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs,iDev);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	330c      	adds	r3, #12
 8007690:	681c      	ldr	r4, [r3, #0]
 8007692:	7e39      	ldrb	r1, [r7, #24]
 8007694:	7df8      	ldrb	r0, [r7, #23]
 8007696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800769a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800769c:	9201      	str	r2, [sp, #4]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	4603      	mov	r3, r0
 80076a2:	460a      	mov	r2, r1
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	47a0      	blx	r4
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 80076b0:	e085      	b.n	80077be <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
    case N2kgfc_Read:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	7b5b      	ldrb	r3, [r3, #13]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff ff1b 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x172>
          handled=true;  // We can mark this handled, since read is not allowed to broadcast.
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 80076c8:	e07b      	b.n	80077c2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 80076ca:	f107 0022 	add.w	r0, r7, #34	; 0x22
 80076ce:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80076d2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80076d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	f107 0320 	add.w	r3, r7, #32
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	68b8      	ldr	r0, [r7, #8]
 80076ec:	f000 faf8 	bl	8007ce0 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d065      	beq.n	80077c2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3310      	adds	r3, #16
 80076fc:	681c      	ldr	r4, [r3, #0]
 80076fe:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8007700:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8007704:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007708:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800770c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8007710:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007712:	9003      	str	r0, [sp, #12]
 8007714:	9102      	str	r1, [sp, #8]
 8007716:	9201      	str	r2, [sp, #4]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	4633      	mov	r3, r6
 800771c:	462a      	mov	r2, r5
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	47a0      	blx	r4
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800772a:	e04a      	b.n	80077c2 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
    case N2kgfc_ReadReply:
      handled=true;
 800772c:	2301      	movs	r3, #1
 800772e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007732:	e049      	b.n	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
    case N2kgfc_Write:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	7b5b      	ldrb	r3, [r3, #13]
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff feda 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x1f4>
          handled=true;  // We can mark this handled, since write is not allowed to broadcast.
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 800774a:	e03c      	b.n	80077c6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 800774c:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8007750:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8007754:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	f107 0320 	add.w	r3, r7, #32
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4603      	mov	r3, r0
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f000 fab7 	bl	8007ce0 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d026      	beq.n	80077c6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3318      	adds	r3, #24
 800777e:	681c      	ldr	r4, [r3, #0]
 8007780:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8007782:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8007786:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800778a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800778e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8007792:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007794:	9003      	str	r0, [sp, #12]
 8007796:	9102      	str	r1, [sp, #8]
 8007798:	9201      	str	r2, [sp, #4]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4633      	mov	r3, r6
 800779e:	462a      	mov	r2, r5
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	47a0      	blx	r4
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80077ac:	e00b      	b.n	80077c6 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
    case N2kgfc_WriteReply:
      handled=true;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80077b4:	e008      	b.n	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80077b6:	bf00      	nop
 80077b8:	e006      	b.n	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80077ba:	bf00      	nop
 80077bc:	e004      	b.n	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80077be:	bf00      	nop
 80077c0:	e002      	b.n	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 80077c6:	bf00      	nop

  }

  return handled;
 80077c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	372c      	adds	r7, #44	; 0x2c
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077d4 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt>:
                              bool UseIntervalLimits,
                              uint32_t IntervalMax,
                              uint32_t IntervalMin,
                              bool UseOffsetLimits,
                              uint16_t OffsetMax
                              ) {
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4611      	mov	r1, r2
 80077e0:	461a      	mov	r2, r3
 80077e2:	460b      	mov	r3, r1
 80077e4:	80fb      	strh	r3, [r7, #6]
 80077e6:	4613      	mov	r3, r2
 80077e8:	717b      	strb	r3, [r7, #5]
           // happy, we accept also 0 offset
           (TransmissionIntervalOffset==0xffff
            || TransmissionIntervalOffset==0
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
           )
           ?
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f0:	d014      	beq.n	800781c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0xFFFFFFFE  // Restore default
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f113 0f02 	cmn.w	r3, #2
 80077f8:	d010      	beq.n	800781c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0           // Turn off
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || ( UseIntervalLimits && TransmissionInterval>=IntervalMin && TransmissionInterval<=IntervalMax)
 8007800:	797b      	ldrb	r3, [r7, #5]
 8007802:	f083 0301 	eor.w	r3, r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d11a      	bne.n	8007842 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	429a      	cmp	r2, r3
 8007812:	d316      	bcc.n	8007842 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	429a      	cmp	r2, r3
 800781a:	d812      	bhi.n	8007842 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
           ?
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007822:	4293      	cmp	r3, r2
 8007824:	d00f      	beq.n	8007846 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || TransmissionIntervalOffset==0
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00c      	beq.n	8007846 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
 800782c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007830:	f083 0301 	eor.w	r3, r3, #1
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800783e:	429a      	cmp	r2, r3
 8007840:	d901      	bls.n	8007846 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
           ?
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x74>
 8007846:	2300      	movs	r3, #0
          N2kgfTPec_Acknowledge:
          N2kgfTPec_TransmitIntervalOrPriorityNotSupported);
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8007852:	b5b0      	push	{r4, r5, r7, lr}
 8007854:	b08a      	sub	sp, #40	; 0x28
 8007856:	af04      	add	r7, sp, #16
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	807b      	strh	r3, [r7, #2]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691c      	ldr	r4, [r3, #16]
 8007864:	68b8      	ldr	r0, [r7, #8]
 8007866:	f000 f944 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800786a:	4603      	mov	r3, r0
 800786c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786e:	4619      	mov	r1, r3
 8007870:	4620      	mov	r0, r4
 8007872:	f004 ff39 	bl	800c6e8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007876:	4603      	mov	r3, r0
 8007878:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681c      	ldr	r4, [r3, #0]
 8007880:	887a      	ldrh	r2, [r7, #2]
 8007882:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	2300      	movs	r3, #0
 800788a:	9302      	str	r3, [sp, #8]
 800788c:	2332      	movs	r3, #50	; 0x32
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	f06f 030f 	mvn.w	r3, #15
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	2300      	movs	r3, #0
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	47a0      	blx	r4
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_PGNTemporarilyNotAvailable:N2kgfPGNec_PGNNotSupported);
 80078a2:	7d7b      	ldrb	r3, [r7, #21]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5a>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e000      	b.n	80078ae <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5c>
 80078ac:	2301      	movs	r3, #1
 80078ae:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 80078b0:	2300      	movs	r3, #0
 80078b2:	753b      	strb	r3, [r7, #20]

    if ( PGNec==N2kgfPGNec_PGNNotSupported ) TORec=N2kgfTPec_Acknowledge; // Always acknoledge for unknown PGN.
 80078b4:	7dbb      	ldrb	r3, [r7, #22]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x6c>
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]
    if ( PGNec==N2kgfPGNec_PGNTemporarilyNotAvailable ) {
 80078be:	7dbb      	ldrb	r3, [r7, #22]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d107      	bne.n	80078d4 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      if ( TORec==N2kgfTPec_TransmitIntervalOrPriorityNotSupported ) { // Acknowledge PGN for known PGN but for invalid priority
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d102      	bne.n	80078d0 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x7e>
        PGNec=N2kgfPGNec_Acknowledge;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75bb      	strb	r3, [r7, #22]
 80078ce:	e001      	b.n	80078d4 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      } else {
        TORec=N2kgfTPec_Acknowledge; //N2kgfTPec_RequestNotSupported;
 80078d0:	2300      	movs	r3, #0
 80078d2:	75fb      	strb	r3, [r7, #23]
      }
    }

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	7b5b      	ldrb	r3, [r3, #13]
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fe0a 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80078de:	4603      	mov	r3, r0
 80078e0:	f083 0301 	eor.w	r3, r3, #1
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0xc6>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	691c      	ldr	r4, [r3, #16]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	7b1d      	ldrb	r5, [r3, #12]
 80078f2:	68b8      	ldr	r0, [r7, #8]
 80078f4:	f000 f8fd 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 80078f8:	4602      	mov	r2, r0
 80078fa:	7d3b      	ldrb	r3, [r7, #20]
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	7dbb      	ldrb	r3, [r7, #22]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007910:	4629      	mov	r1, r5
 8007912:	4620      	mov	r0, r4
 8007914:	f000 faaa 	bl	8007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      PGNec,
                      TORec,
                      NumberOfParameterPairs, PARec);
    }

    return true;
 8007918:	2301      	movs	r3, #1
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bdb0      	pop	{r4, r5, r7, pc}

08007922 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t  NumberOfParameterPairs, int iDev) {
 8007922:	b5b0      	push	{r4, r5, r7, lr}
 8007924:	b08a      	sub	sp, #40	; 0x28
 8007926:	af04      	add	r7, sp, #16
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	4611      	mov	r1, r2
 800792e:	461a      	mov	r2, r3
 8007930:	460b      	mov	r3, r1
 8007932:	71fb      	strb	r3, [r7, #7]
 8007934:	4613      	mov	r3, r2
 8007936:	71bb      	strb	r3, [r7, #6]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691c      	ldr	r4, [r3, #16]
 800793c:	68b8      	ldr	r0, [r7, #8]
 800793e:	f000 f8d8 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007942:	4603      	mov	r3, r0
 8007944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007946:	4619      	mov	r1, r3
 8007948:	4620      	mov	r0, r4
 800794a:	f004 fecd 	bl	800c6e8 <_ZN9tNMEA20007IsTxPGNEmi>
 800794e:	4603      	mov	r3, r0
 8007950:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_Acknowledge:N2kgfPGNec_PGNNotSupported);
 8007952:	7dbb      	ldrb	r3, [r7, #22]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3a>
 8007958:	2300      	movs	r3, #0
 800795a:	e000      	b.n	800795e <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3c>
 800795c:	2301      	movs	r3, #1
 800795e:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=N2kgfTPec_Acknowledge;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 8007964:	2300      	movs	r3, #0
 8007966:	753b      	strb	r3, [r7, #20]

		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) TORec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d105      	bne.n	800797a <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	2b0f      	cmp	r3, #15
 8007972:	d102      	bne.n	800797a <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	2b09      	cmp	r3, #9
 8007978:	d001      	beq.n	800797e <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x5c>
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]

    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	691c      	ldr	r4, [r3, #16]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	7b1d      	ldrb	r5, [r3, #12]
 8007986:	68b8      	ldr	r0, [r7, #8]
 8007988:	f000 f8b3 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800798c:	4602      	mov	r2, r0
 800798e:	7d3b      	ldrb	r3, [r7, #20]
 8007990:	9303      	str	r3, [sp, #12]
 8007992:	79bb      	ldrb	r3, [r7, #6]
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	7d7b      	ldrb	r3, [r7, #21]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4613      	mov	r3, r2
 80079a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a2:	4629      	mov	r1, r5
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 fa61 	bl	8007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    TORec,
                    NumberOfParameterPairs, PARec);

    return true;
 80079aa:	2301      	movs	r3, #1
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bdb0      	pop	{r4, r5, r7, pc}

080079b4 <_ZN24tN2kGroupFunctionHandler17HandleAcknowledgeERK7tN2kMsg29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodehi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleAcknowledge(const tN2kMsg &/*N2kMsg*/,
                                   tN2kGroupFunctionPGNErrorCode /*PGNErrorCode*/,
                                   tN2kGroupFunctionTransmissionOrPriorityErrorCode /*TransmissionOrPriorityErrorCode*/,
                                   uint8_t /*ParameterCount*/,
                                   int /*iDev*/) {
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4611      	mov	r1, r2
 80079c0:	461a      	mov	r2, r3
 80079c2:	460b      	mov	r3, r1
 80079c4:	71fb      	strb	r3, [r7, #7]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71bb      	strb	r3, [r7, #6]
    // As default, simply return true meaning that received acknowledge has been handled.
    return true;
 80079ca:	2301      	movs	r3, #1
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 80079d6:	b5b0      	push	{r4, r5, r7, lr}
 80079d8:	b08a      	sub	sp, #40	; 0x28
 80079da:	af04      	add	r7, sp, #16
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	4611      	mov	r1, r2
 80079e2:	461a      	mov	r2, r3
 80079e4:	460b      	mov	r3, r1
 80079e6:	80fb      	strh	r3, [r7, #6]
 80079e8:	4613      	mov	r3, r2
 80079ea:	717b      	strb	r3, [r7, #5]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	691c      	ldr	r4, [r3, #16]
 80079f0:	68b8      	ldr	r0, [r7, #8]
 80079f2:	f000 f87e 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 80079f6:	4603      	mov	r3, r0
 80079f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079fa:	4619      	mov	r1, r3
 80079fc:	4620      	mov	r0, r4
 80079fe:	f004 fe73 	bl	800c6e8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007a02:	4603      	mov	r3, r0
 8007a04:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3a>
 8007a0c:	2306      	movs	r3, #6
 8007a0e:	e000      	b.n	8007a12 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3c>
 8007a10:	2301      	movs	r3, #1
 8007a12:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	691c      	ldr	r4, [r3, #16]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	7b1d      	ldrb	r5, [r3, #12]
 8007a1c:	68b8      	ldr	r0, [r7, #8]
 8007a1e:	f000 f868 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007a22:	4602      	mov	r2, r0
 8007a24:	2300      	movs	r3, #0
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a2c:	9302      	str	r3, [sp, #8]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	7dbb      	ldrb	r3, [r7, #22]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fa15 	bl	8007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);
    return true;
 8007a42:	2301      	movs	r3, #1
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bdb0      	pop	{r4, r5, r7, pc}

08007a4c <_ZN24tN2kGroupFunctionHandler21HandleReadFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleReadFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
    return true;
 8007a58:	2301      	movs	r3, #1
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bc80      	pop	{r7}
 8007a62:	4770      	bx	lr

08007a64 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 8007a64:	b5b0      	push	{r4, r5, r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af04      	add	r7, sp, #16
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	460b      	mov	r3, r1
 8007a74:	80fb      	strh	r3, [r7, #6]
 8007a76:	4613      	mov	r3, r2
 8007a78:	717b      	strb	r3, [r7, #5]
    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691c      	ldr	r4, [r3, #16]
 8007a7e:	68b8      	ldr	r0, [r7, #8]
 8007a80:	f000 f837 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007a84:	4603      	mov	r3, r0
 8007a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f004 fe2c 	bl	800c6e8 <_ZN9tNMEA20007IsTxPGNEmi>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3a>
 8007a9a:	2306      	movs	r3, #6
 8007a9c:	e000      	b.n	8007aa0 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3c>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	691c      	ldr	r4, [r3, #16]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	7b1d      	ldrb	r5, [r3, #12]
 8007aaa:	68b8      	ldr	r0, [r7, #8]
 8007aac:	f000 f821 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9303      	str	r3, [sp, #12]
 8007ab6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	7dbb      	ldrb	r3, [r7, #22]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 f9ce 	bl	8007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);

    return true;
 8007ad0:	2301      	movs	r3, #1
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bdb0      	pop	{r4, r5, r7, pc}

08007ada <_ZN24tN2kGroupFunctionHandler22HandleWriteFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleWriteFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
    return true;
 8007ae6:	2301      	movs	r3, #1
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>:

// Static functions for PGN 126208 handling
//*****************************************************************************
unsigned long tN2kGroupFunctionHandler::GetPGNForGroupFunction(const tN2kMsg &N2kMsg) {
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  int Index=1;
 8007afa:	2301      	movs	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
  return N2kMsg.Get3ByteUInt(Index);
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f002 fa7c 	bl	800a006 <_ZNK7tN2kMsg12Get3ByteUIntERim>
 8007b0e:	4603      	mov	r3, r0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Parse(const tN2kMsg &N2kMsg,
                            tN2kGroupFunctionCode &GroupFunctionCode,
                            unsigned long &PGNForGroupFunction) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x38>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d001      	beq.n	8007b32 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x1a>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e00a      	b.n	8007b48 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x30>

  GroupFunctionCode=(tN2kGroupFunctionCode)(N2kMsg.Data[0]);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7d1a      	ldrb	r2, [r3, #20]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	701a      	strb	r2, [r3, #0]
  PGNForGroupFunction=GetPGNForGroupFunction(N2kMsg);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff ffd9 	bl	8007af2 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 8007b40:	4602      	mov	r2, r0
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]

  return true;
 8007b46:	2301      	movs	r3, #1
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	0001ed00 	.word	0x0001ed00

08007b54 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseRequestParams(const tN2kMsg &N2kMsg,
                               uint32_t &TransmissionInterval,
                               uint16_t &TransmissionIntervalOffset,
                               uint8_t  &NumberOfParameterPairs) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	4a16      	ldr	r2, [pc, #88]	; (8007bc0 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x6c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d001      	beq.n	8007b70 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x1c>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	e023      	b.n	8007bb8 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x64>
  int Index=N2kgf_OffsetToParams;
 8007b70:	2304      	movs	r3, #4
 8007b72:	617b      	str	r3, [r7, #20]
  TransmissionInterval=N2kMsg.Get4ByteUInt(Index);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f002 fa5b 	bl	800a03a <_ZNK7tN2kMsg12Get4ByteUIntERim>
 8007b84:	4602      	mov	r2, r0
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	601a      	str	r2, [r3, #0]
  TransmissionIntervalOffset=N2kMsg.Get2ByteUInt(Index);
 8007b8a:	f107 0314 	add.w	r3, r7, #20
 8007b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b92:	4619      	mov	r1, r3
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f002 fa1b 	bl	8009fd0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	801a      	strh	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8007ba2:	f107 0314 	add.w	r3, r7, #20
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f002 f9f7 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	701a      	strb	r2, [r3, #0]

  return true;
 8007bb6:	2301      	movs	r3, #1
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	0001ed00 	.word	0x0001ed00

08007bc4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseRequestPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	4a07      	ldr	r2, [pc, #28]	; (8007bf0 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x2c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d001      	beq.n	8007bdc <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x18>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e003      	b.n	8007be4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToRequestPairParameters;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	220b      	movs	r2, #11
 8007be0:	601a      	str	r2, [r3, #0]

  return true;
 8007be2:	2301      	movs	r3, #1
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	0001ed00 	.word	0x0001ed00

08007bf4 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseCommandParams(const tN2kMsg &N2kMsg,
                               uint8_t &PrioritySetting,
                               uint8_t &NumberOfParameterPairs) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	4a0f      	ldr	r2, [pc, #60]	; (8007c44 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x50>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d001      	beq.n	8007c0e <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x1a>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e016      	b.n	8007c3c <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x48>
  int Index=N2kgf_OffsetToParams;
 8007c0e:	2304      	movs	r3, #4
 8007c10:	617b      	str	r3, [r7, #20]
  PrioritySetting=N2kMsg.GetByte(Index);
 8007c12:	f107 0314 	add.w	r3, r7, #20
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f002 f9bf 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	461a      	mov	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f002 f9b5 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007c32:	4603      	mov	r3, r0
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	701a      	strb	r2, [r3, #0]

  return true;
 8007c3a:	2301      	movs	r3, #1
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	0001ed00 	.word	0x0001ed00

08007c48 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseCommandPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	4a07      	ldr	r2, [pc, #28]	; (8007c74 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x2c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d001      	beq.n	8007c60 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x18>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e003      	b.n	8007c68 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToCommandPairParameters;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2206      	movs	r2, #6
 8007c64:	601a      	str	r2, [r3, #0]

  return true;
 8007c66:	2301      	movs	r3, #1
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	0001ed00 	.word	0x0001ed00

08007c78 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseAcknowledgeParams(const tN2kMsg &N2kMsg,
                               tN2kGroupFunctionPGNErrorCode &PGNErrorCode,
                               tN2kGroupFunctionTransmissionOrPriorityErrorCode &TransmissionOrPriorityErrorCode,
                               uint8_t &NumberOfParameterPairs) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
  PGNErrorCode=N2kgfPGNec_PGNNotSupported;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=0;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x64>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d001      	beq.n	8007ca6 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x2e>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e015      	b.n	8007cd2 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x5a>
  int Index=N2kgf_OffsetToParams;
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	613b      	str	r3, [r7, #16]
  uint8_t b=N2kMsg.GetByte(Index);
 8007caa:	f107 0310 	add.w	r3, r7, #16
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f002 f973 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
  PGNErrorCode=(tN2kGroupFunctionPGNErrorCode)(b&0x0f);
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=(tN2kGroupFunctionTransmissionOrPriorityErrorCode)(b>>4);
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	091b      	lsrs	r3, r3, #4
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	701a      	strb	r2, [r3, #0]

  return true;
 8007cd0:	2301      	movs	r3, #1
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	0001ed00 	.word	0x0001ed00

08007ce0 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>:
                               uint16_t &ManufacturerCode,
                               uint8_t &IndustryGroup,
                               uint8_t &UniqueID,
                               uint8_t &NumberOfSelectionPairs,
                               uint8_t &NumberOfParameterPairs,
                               bool Proprietary) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4a25      	ldr	r2, [pc, #148]	; (8007d88 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d001      	beq.n	8007cfc <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x1c>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e041      	b.n	8007d80 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa0>
  int Index=N2kgf_OffsetToParams;
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	613b      	str	r3, [r7, #16]
  ManufacturerCode=0xffff; // We need here information is PGN proprietary or not
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d06:	801a      	strh	r2, [r3, #0]
  IndustryGroup=0xff;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	22ff      	movs	r2, #255	; 0xff
 8007d0c:	701a      	strb	r2, [r3, #0]
  if ( Proprietary ) {
 8007d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d015      	beq.n	8007d42 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x62>
    uint16_t ProprietaryInfo=N2kMsg.Get2ByteUInt(Index);
 8007d16:	f107 0310 	add.w	r3, r7, #16
 8007d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f002 f955 	bl	8009fd0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8007d26:	4603      	mov	r3, r0
 8007d28:	82fb      	strh	r3, [r7, #22]
    ManufacturerCode=ProprietaryInfo & 0x07ff;
 8007d2a:	8afb      	ldrh	r3, [r7, #22]
 8007d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	801a      	strh	r2, [r3, #0]
    IndustryGroup=(ProprietaryInfo>>13) &0x07;
 8007d36:	8afb      	ldrh	r3, [r7, #22]
 8007d38:	0b5b      	lsrs	r3, r3, #13
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	701a      	strb	r2, [r3, #0]
  }
  UniqueID=N2kMsg.GetByte(Index);
 8007d42:	f107 0310 	add.w	r3, r7, #16
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f002 f927 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	461a      	mov	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	701a      	strb	r2, [r3, #0]
  NumberOfSelectionPairs=N2kMsg.GetByte(Index);
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f002 f91d 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007d62:	4603      	mov	r3, r0
 8007d64:	461a      	mov	r2, r3
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 8007d6a:	f107 0310 	add.w	r3, r7, #16
 8007d6e:	4619      	mov	r1, r3
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f002 f913 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8007d76:	4603      	mov	r3, r0
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	701a      	strb	r2, [r3, #0]

  return true;
 8007d7e:	2301      	movs	r3, #1
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	0001ed00 	.word	0x0001ed00

08007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>:

//*****************************************************************************
void tN2kGroupFunctionHandler::SetStartAcknowledge(tN2kMsg &N2kMsg, unsigned char Destination, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	461a      	mov	r2, r3
 8007d98:	460b      	mov	r3, r1
 8007d9a:	72fb      	strb	r3, [r7, #11]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	72bb      	strb	r3, [r7, #10]
  N2kMsg.Clear();
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	4798      	blx	r3
	N2kMsg.SetPGN(126208L);
 8007daa:	4914      	ldr	r1, [pc, #80]	; (8007dfc <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh+0x70>)
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f001 ff85 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=3;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2203      	movs	r2, #3
 8007db6:	711a      	strb	r2, [r3, #4]
  N2kMsg.Destination=Destination;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	7afa      	ldrb	r2, [r7, #11]
 8007dbc:	735a      	strb	r2, [r3, #13]
	N2kMsg.AddByte(N2kgfc_Acknowledge);
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f002 f8bb 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f002 f87f 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
  N2kMsg.AddByte(PGNErrorCode | TransmissionOrPriorityErrorCode<<4);
 8007dd0:	7e3b      	ldrb	r3, [r7, #24]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	b25a      	sxtb	r2, r3
 8007dd6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f002 f8aa 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NumberOfParameterPairs);
 8007de8:	7f3b      	ldrb	r3, [r7, #28]
 8007dea:	4619      	mov	r1, r3
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f002 f8a5 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	0001ed00 	.word	0x0001ed00

08007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>:
}

//*****************************************************************************
void tN2kGroupFunctionHandler::AddAcknowledgeParameter(tN2kMsg &N2kMsg,
                                         uint8_t ParameterPairIndex,
                                         tN2kGroupFunctionParameterErrorCode ErrorCode) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	70bb      	strb	r3, [r7, #2]
  if ( ((ParameterPairIndex % 2) == 0) && (N2kMsg.DataLen>0) ) {
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10c      	bne.n	8007e34 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd08      	ble.n	8007e34 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
    N2kMsg.AddByte((uint8_t)(ErrorCode) | 0x0f << 4);
 8007e22:	78bb      	ldrb	r3, [r7, #2]
 8007e24:	f063 030f 	orn	r3, r3, #15
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f002 f885 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 8007e32:	e017      	b.n	8007e64 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x64>
  } else {
    // Should actually add AddBits to N2kMsg
    N2kMsg.Data[N2kMsg.DataLen-1]=(N2kMsg.Data[N2kMsg.DataLen-1] & 0x0f) | ((uint8_t)(ErrorCode) << 4);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	7d1b      	ldrb	r3, [r3, #20]
 8007e40:	b25b      	sxtb	r3, r3
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	b25a      	sxtb	r2, r3
 8007e48:	78bb      	ldrb	r3, [r7, #2]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	b25b      	sxtb	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b25a      	sxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	b2d1      	uxtb	r1, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	460a      	mov	r2, r1
 8007e60:	751a      	strb	r2, [r3, #20]
  }
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>:
//*****************************************************************************
void tN2kGroupFunctionHandler::SendAcknowledge(tNMEA2000 *pNMEA2000, unsigned char Destination, int iDev, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs,
                                         tN2kGroupFunctionParameterErrorCode ParameterErrorCodeForAll) {
 8007e6c:	b590      	push	{r4, r7, lr}
 8007e6e:	b0c7      	sub	sp, #284	; 0x11c
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8007e76:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8007e7a:	6020      	str	r0, [r4, #0]
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8007e82:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8007e86:	600a      	str	r2, [r1, #0]
 8007e88:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007e8c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e96:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kRMsg;
 8007e9e:	f107 0010 	add.w	r0, r7, #16
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	210f      	movs	r1, #15
 8007eac:	f001 fed4 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

    // As default we respond with not supported.
    SetStartAcknowledge(N2kRMsg,Destination,PGN,
 8007eb0:	f897 4120 	ldrb.w	r4, [r7, #288]	; 0x120
 8007eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eb8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8007ebc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ec0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8007ec4:	7819      	ldrb	r1, [r3, #0]
 8007ec6:	f107 0010 	add.w	r0, r7, #16
 8007eca:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	f7ff ff57 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        PGNErrorCode,
                        TransmissionOrPriorityErrorCode,
                        NumberOfParameterPairs);
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007ee4:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8007ee8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d20e      	bcs.n	8007f0e <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0xa2>
      AddAcknowledgeParameter(N2kRMsg,ParamIndex,ParameterErrorCodeForAll);
 8007ef0:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 8007ef4:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8007ef8:	f107 0310 	add.w	r3, r7, #16
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff7f 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 8007f02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007f06:	3301      	adds	r3, #1
 8007f08:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007f0c:	e7ea      	b.n	8007ee4 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0x78>
    }
    pNMEA2000->SendMsg(N2kRMsg,iDev);
 8007f0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f12:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8007f16:	f107 0110 	add.w	r1, r7, #16
 8007f1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f005 fcdd 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
}
 8007f2a:	bf00      	nop
 8007f2c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd90      	pop	{r4, r7, pc}

08007f34 <_ZNK7tN2kMsg11IsTPMessageEv>:
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
protected:
  bool TPMessage;
public:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
  bool IsTPMessage() const { return TPMessage; }
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>:
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
        Match=false;
      } else ErrorCode=N2kgfpec_Acknowledge;
    }

    void MatchRequestField(const char * FieldVal, const char * MatchVal, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
    {
      Match&=(strcmp(FieldVal,MatchVal)==0);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	461c      	mov	r4, r3
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	68b8      	ldr	r0, [r7, #8]
 8007f64:	f7f8 f960 	bl	8000228 <strcmp>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf0c      	ite	eq
 8007f6e:	2301      	moveq	r3, #1
 8007f70:	2300      	movne	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	4023      	ands	r3, r4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bf14      	ite	ne
 8007f7a:	2301      	movne	r3, #1
 8007f7c:	2300      	moveq	r3, #0
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	701a      	strb	r2, [r3, #0]
      ErrorCode = ( Match ? N2kgfpec_Acknowledge : N2kgfpec_RequestOrCommandParameterOutOfRange );
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x44>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	e000      	b.n	8007f92 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x46>
 8007f90:	2203      	movs	r2, #3
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	701a      	strb	r2, [r3, #0]
    }
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd90      	pop	{r4, r7, pc}

08007f9e <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>:
    unsigned char GetDeviceInstanceLower() const { return DeviceInformation.DeviceInstance & 0x07; }
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	791b      	ldrb	r3, [r3, #4]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr

08007fba <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>:
    unsigned char GetDeviceInstanceUpper() const { return (DeviceInformation.DeviceInstance>>3) & 0x1f; }
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	791b      	ldrb	r3, [r3, #4]
 8007fc6:	08db      	lsrs	r3, r3, #3
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>:
    unsigned char GetDeviceFunction() const { return DeviceInformation.DeviceFunction; }
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	795b      	ldrb	r3, [r3, #5]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr

08007fea <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>:
    unsigned char GetDeviceClass() const { return DeviceInformation.DeviceClass>>1; }
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	799b      	ldrb	r3, [r3, #6]
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>:
    unsigned char GetIndustryGroup() const { return (DeviceInformation.IndustryGroupAndSystemInstance>>4) & 0x07; }
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	79db      	ldrb	r3, [r3, #7]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	b2db      	uxtb	r3, r3
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>:
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	79db      	ldrb	r3, [r3, #7]
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	b2db      	uxtb	r3, r3
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr

08008040 <_ZN9tNMEA200020GetDeviceInformationEi>:
    const tDeviceInformation GetDeviceInformation(int iDev=0) { if (iDev<0 || iDev>=DeviceCount) return tDeviceInformation(); return Devices[iDev].DeviceInformation; }
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	db04      	blt.n	800805c <_ZN9tNMEA200020GetDeviceInformationEi+0x1c>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	429a      	cmp	r2, r3
 800805a:	db03      	blt.n	8008064 <_ZN9tNMEA200020GetDeviceInformationEi+0x24>
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff fa10 	bl	8007482 <_ZN9tNMEA200018tDeviceInformationC1Ev>
 8008062:	e00c      	b.n	800807e <_ZN9tNMEA200020GetDeviceInformationEi+0x3e>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	69da      	ldr	r2, [r3, #28]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	4413      	add	r3, r2
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	e9c1 2300 	strd	r2, r3, [r1]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN60928::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8008088:	b5b0      	push	{r4, r5, r7, lr}
 800808a:	b0d0      	sub	sp, #320	; 0x140
 800808c:	af04      	add	r7, sp, #16
 800808e:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8008092:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8008096:	6020      	str	r0, [r4, #0]
 8008098:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800809c:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 80080a0:	6001      	str	r1, [r0, #0]
 80080a2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80080a6:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 80080aa:	600a      	str	r2, [r1, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80080b6:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 80080b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681c      	ldr	r4, [r3, #0]
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80080d8:	881a      	ldrh	r2, [r3, #0]
 80080da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080de:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 80080e2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80080e6:	9303      	str	r3, [sp, #12]
 80080e8:	2300      	movs	r3, #0
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	2332      	movs	r3, #50	; 0x32
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	f06f 030f 	mvn.w	r3, #15
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	2300      	movs	r3, #0
 80080f8:	6809      	ldr	r1, [r1, #0]
 80080fa:	47a0      	blx	r4
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
  bool MatchFilter=true;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  tN2kMsg N2kRMsg;
 8008108:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800810c:	2300      	movs	r3, #0
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	2300      	movs	r3, #0
 8008112:	2206      	movs	r2, #6
 8008114:	210f      	movs	r1, #15
 8008116:	f001 fd9f 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	7b19      	ldrb	r1, [r3, #12]
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008136:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	2300      	movs	r3, #0
 8008144:	f7ff fe22 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // Always acknoledge for mandatory PGN
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	7b1a      	ldrb	r2, [r3, #12]
 8008154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815c:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800815e:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 81d7 	beq.w	8008516 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
    int i;
    int Index;
    uint8_t field;
    tNMEA2000::tDeviceInformation DI=pNMEA2000->GetDeviceInformation(iDev);
 8008168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6919      	ldr	r1, [r3, #16]
 8008174:	f107 0318 	add.w	r3, r7, #24
 8008178:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ff5f 	bl	8008040 <_ZN9tNMEA200020GetDeviceInformationEi>
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 8008182:	2300      	movs	r3, #0
 8008184:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

    StartParseRequestPairParameters(N2kMsg,Index);
 8008188:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008194:	4611      	mov	r1, r2
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	f7ff fd14 	bl	8007bc4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800819c:	2300      	movs	r3, #0
 800819e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80081a2:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80081a6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	da14      	bge.n	80081d8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 80081ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10e      	bne.n	80081d4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x14c>
 80081b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	7b5b      	ldrb	r3, [r3, #13]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff f995 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f083 0301 	eor.w	r3, r3, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x152>
 80081d8:	2300      	movs	r3, #0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 819b 	beq.w	8008516 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
      if ( !FoundInvalidField) {
 80081e0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80081e4:	f083 0301 	eor.w	r3, r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 817a 	beq.w	80084e4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x45c>
        field=N2kMsg.GetByte(Index);
 80081f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80081f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80081fc:	4611      	mov	r1, r2
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	f001 fecc 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        switch (field) {
 800820a:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 800820e:	3b01      	subs	r3, #1
 8008210:	2b09      	cmp	r3, #9
 8008212:	f200 815a 	bhi.w	80084ca <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x442>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x194>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008245 	.word	0x08008245
 8008220:	0800828b 	.word	0x0800828b
 8008224:	080082d7 	.word	0x080082d7
 8008228:	0800831f 	.word	0x0800831f
 800822c:	08008367 	.word	0x08008367
 8008230:	080083af 	.word	0x080083af
 8008234:	080083d1 	.word	0x080083d1
 8008238:	08008419 	.word	0x08008419
 800823c:	08008461 	.word	0x08008461
 8008240:	080084a9 	.word	0x080084a9
          case N2kPGN60928_UniqueNumber_field:
            MatchRequestField(N2kMsg.Get3ByteUInt(Index),(uint32_t)DI.GetUniqueNumber(),(uint32_t)0x001fffff,MatchFilter,FieldErrorCode);
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800824c:	681c      	ldr	r4, [r3, #0]
 800824e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008256:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800825a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	f001 fed1 	bl	800a006 <_ZNK7tN2kMsg12Get3ByteUIntERim>
 8008264:	4605      	mov	r5, r0
 8008266:	f107 0318 	add.w	r3, r7, #24
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff f91a 	bl	80074a4 <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>
 8008270:	4602      	mov	r2, r0
 8008272:	f107 0317 	add.w	r3, r7, #23
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	f207 1327 	addw	r3, r7, #295	; 0x127
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4bc7      	ldr	r3, [pc, #796]	; (800859c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x514>)
 8008280:	4629      	mov	r1, r5
 8008282:	4620      	mov	r0, r4
 8008284:	f001 fac8 	bl	8009818 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008288:	e132      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ManufacturerCode_field:
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),DI.GetManufacturerCode(),(uint16_t)0x07ff,MatchFilter,FieldErrorCode);
 800828a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008292:	681c      	ldr	r4, [r3, #0]
 8008294:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f001 fe93 	bl	8009fd0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461d      	mov	r5, r3
 80082ae:	f107 0318 	add.w	r3, r7, #24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff f903 	bl	80074be <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461a      	mov	r2, r3
 80082bc:	f107 0317 	add.w	r3, r7, #23
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	f207 1327 	addw	r3, r7, #295	; 0x127
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80082cc:	4629      	mov	r1, r5
 80082ce:	4620      	mov	r0, r4
 80082d0:	f001 fabe 	bl	8009850 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80082d4:	e10c      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceLower_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceLower(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 80082d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80082de:	681c      	ldr	r4, [r3, #0]
 80082e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082ec:	4611      	mov	r1, r2
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	f001 fe54 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461d      	mov	r5, r3
 80082f8:	f107 0318 	add.w	r3, r7, #24
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff fe4e 	bl	8007f9e <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	f107 0317 	add.w	r3, r7, #23
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2307      	movs	r3, #7
 8008314:	4629      	mov	r1, r5
 8008316:	4620      	mov	r0, r4
 8008318:	f001 fabd 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800831c:	e0e8      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceUpper_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceUpper(),(uint8_t)0x1f,MatchFilter,FieldErrorCode);
 800831e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008322:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008326:	681c      	ldr	r4, [r3, #0]
 8008328:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800832c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008330:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008334:	4611      	mov	r1, r2
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	f001 fe30 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800833c:	4603      	mov	r3, r0
 800833e:	461d      	mov	r5, r3
 8008340:	f107 0318 	add.w	r3, r7, #24
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff fe38 	bl	8007fba <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	f107 0317 	add.w	r3, r7, #23
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	231f      	movs	r3, #31
 800835c:	4629      	mov	r1, r5
 800835e:	4620      	mov	r0, r4
 8008360:	f001 fa99 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008364:	e0c4      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceFunction_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceFunction(),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 8008366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800836e:	681c      	ldr	r4, [r3, #0]
 8008370:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008378:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800837c:	4611      	mov	r1, r2
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	f001 fe0c 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008384:	4603      	mov	r3, r0
 8008386:	461d      	mov	r5, r3
 8008388:	f107 0318 	add.w	r3, r7, #24
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fe21 	bl	8007fd4 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	f107 0317 	add.w	r3, r7, #23
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	f207 1327 	addw	r3, r7, #295	; 0x127
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	23ff      	movs	r3, #255	; 0xff
 80083a4:	4629      	mov	r1, r5
 80083a6:	4620      	mov	r0, r4
 80083a8:	f001 fa75 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80083ac:	e0a0      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_Reserved_field:
            N2kMsg.GetByte(Index);
 80083ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80083ba:	4611      	mov	r1, r2
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f001 fded 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
            break;
 80083ce:	e08f      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceClass_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceClass(),(uint8_t)0x7f,MatchFilter,FieldErrorCode);
 80083d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80083d8:	681c      	ldr	r4, [r3, #0]
 80083da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80083e6:	4611      	mov	r1, r2
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f001 fdd7 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80083ee:	4603      	mov	r3, r0
 80083f0:	461d      	mov	r5, r3
 80083f2:	f107 0318 	add.w	r3, r7, #24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fdf7 	bl	8007fea <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>
 80083fc:	4603      	mov	r3, r0
 80083fe:	461a      	mov	r2, r3
 8008400:	f107 0317 	add.w	r3, r7, #23
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	f207 1327 	addw	r3, r7, #295	; 0x127
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	237f      	movs	r3, #127	; 0x7f
 800840e:	4629      	mov	r1, r5
 8008410:	4620      	mov	r0, r4
 8008412:	f001 fa40 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008416:	e06b      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_SystemInstance_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetSystemInstance(),(uint8_t)0x0f,MatchFilter,FieldErrorCode);
 8008418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008420:	681c      	ldr	r4, [r3, #0]
 8008422:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800842e:	4611      	mov	r1, r2
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f001 fdb3 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008436:	4603      	mov	r3, r0
 8008438:	461d      	mov	r5, r3
 800843a:	f107 0318 	add.w	r3, r7, #24
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff fdf0 	bl	8008024 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 8008444:	4603      	mov	r3, r0
 8008446:	461a      	mov	r2, r3
 8008448:	f107 0317 	add.w	r3, r7, #23
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f207 1327 	addw	r3, r7, #295	; 0x127
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	230f      	movs	r3, #15
 8008456:	4629      	mov	r1, r5
 8008458:	4620      	mov	r0, r4
 800845a:	f001 fa1c 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800845e:	e047      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_IndustryGroup_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetIndustryGroup(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 8008460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008464:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008468:	681c      	ldr	r4, [r3, #0]
 800846a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008476:	4611      	mov	r1, r2
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f001 fd8f 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800847e:	4603      	mov	r3, r0
 8008480:	461d      	mov	r5, r3
 8008482:	f107 0318 	add.w	r3, r7, #24
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fdbc 	bl	8008004 <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	f107 0317 	add.w	r3, r7, #23
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	f207 1327 	addw	r3, r7, #295	; 0x127
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2307      	movs	r3, #7
 800849e:	4629      	mov	r1, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 f9f8 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80084a6:	e023      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ISOSelfConfigurable_field:
            N2kMsg.GetByte(Index);
 80084a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80084b4:	4611      	mov	r1, r2
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	f001 fd70 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
            break;
 80084c8:	e012      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 80084ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ce:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80084d2:	2201      	movs	r2, #1
 80084d4:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            FoundInvalidField=true;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 80084e2:	e005      	b.n	80084f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 80084e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80084ec:	2202      	movs	r2, #2
 80084ee:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f4:	b2d9      	uxtb	r1, r3
 80084f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fa:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80084fe:	781a      	ldrb	r2, [r3, #0]
 8008500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fc7b 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800850a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850e:	3301      	adds	r3, #1
 8008510:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008514:	e645      	b.n	80081a2 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x11a>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8008516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 800851e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a4>
 800852a:	2300      	movs	r3, #0
 800852c:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8008530:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8008534:	f083 0301 	eor.w	r3, r3, #1
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01c      	beq.n	8008578 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4f0>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800853e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008542:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	7b5b      	ldrb	r3, [r3, #13]
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe ffd1 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8008550:	4603      	mov	r3, r0
 8008552:	f083 0301 	eor.w	r3, r3, #1
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d019      	beq.n	8008590 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
 800855c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008560:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800856c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008570:	4618      	mov	r0, r3
 8008572:	f005 f9b7 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8008576:	e00b      	b.n	8008590 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
  } else {
    // Send delayed - there was problems with test tool with too fast response.
    pNMEA2000->SendIsoAddressClaim(0xff,iDev,2);
 8008578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6918      	ldr	r0, [r3, #16]
 8008584:	2302      	movs	r3, #2
 8008586:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800858a:	21ff      	movs	r1, #255	; 0xff
 800858c:	f007 fa88 	bl	800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
  }

  return true;
 8008590:	2301      	movs	r3, #1
}
 8008592:	4618      	mov	r0, r3
 8008594:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008598:	46bd      	mov	sp, r7
 800859a:	bdb0      	pop	{r4, r5, r7, pc}
 800859c:	001fffff 	.word	0x001fffff

080085a0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 60928 can be used to set Device Instance Lower, Device Instance Upper and System Instance
// values on device name. They all are in padded to one byte.
bool tN2kGroupFunctionHandlerForPGN60928::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b0cb      	sub	sp, #300	; 0x12c
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80085aa:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80085ae:	6020      	str	r0, [r4, #0]
 80085b0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80085b4:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80085b8:	6001      	str	r1, [r0, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80085c0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80085ca:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80085ce:	460a      	mov	r2, r1
 80085d0:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  uint8_t DILower=0xff;
 80085d2:	23ff      	movs	r3, #255	; 0xff
 80085d4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  uint8_t DIUpper=0xff;
 80085d8:	23ff      	movs	r3, #255	; 0xff
 80085da:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
  uint8_t SI=0xff;
 80085de:	23ff      	movs	r3, #255	; 0xff
 80085e0:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  tN2kGroupFunctionParameterErrorCode PARec;
  tN2kMsg N2kRMsg;
 80085ea:	f107 0014 	add.w	r0, r7, #20
 80085ee:	2300      	movs	r3, #0
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	2206      	movs	r2, #6
 80085f6:	210f      	movs	r1, #15
 80085f8:	f001 fb2e 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 80085fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008600:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	7b19      	ldrb	r1, [r3, #12]
 8008608:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800860c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	f107 0014 	add.w	r0, r7, #20
 8008618:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800861c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	2300      	movs	r3, #0
 800862c:	f7ff fbae 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    if (PrioritySetting!=8) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8008630:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008634:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b08      	cmp	r3, #8
 800863c:	d002      	beq.n	8008644 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xa4>
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    StartParseCommandPairParameters(N2kMsg,Index);
 8008644:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008648:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800864c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008650:	4611      	mov	r1, r2
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	f7ff faf8 	bl	8007c48 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 8008658:	2300      	movs	r3, #0
 800865a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800865e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008662:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800866c:	429a      	cmp	r2, r3
 800866e:	da5d      	bge.n	800872c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x18c>
      field=N2kMsg.GetByte(Index);
 8008670:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008674:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008678:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800867c:	4611      	mov	r1, r2
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	f001 fc8c 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      PARec=N2kgfpec_Acknowledge;
 800868a:	2300      	movs	r3, #0
 800868c:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      switch (field) {
 8008690:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8008694:	2b08      	cmp	r3, #8
 8008696:	d026      	beq.n	80086e6 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x146>
 8008698:	2b08      	cmp	r3, #8
 800869a:	dc34      	bgt.n	8008706 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
 800869c:	2b03      	cmp	r3, #3
 800869e:	d002      	beq.n	80086a6 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x106>
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d010      	beq.n	80086c6 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x126>
 80086a4:	e02f      	b.n	8008706 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
        case N2kPGN60928_DeviceInstanceLower_field:
          DILower=N2kMsg.GetByte(Index) & 0x7;
 80086a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80086aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80086b2:	4611      	mov	r1, r2
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	f001 fc71 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f003 0307 	and.w	r3, r3, #7
 80086c0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
          break;
 80086c4:	e022      	b.n	800870c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_DeviceInstanceUpper_field:
          DIUpper=N2kMsg.GetByte(Index) & 0x1f;
 80086c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80086ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80086d2:	4611      	mov	r1, r2
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f001 fc61 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80086da:	4603      	mov	r3, r0
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
          break;
 80086e4:	e012      	b.n	800870c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_SystemInstance_field:
          SI=N2kMsg.GetByte(Index) & 0x0f;
 80086e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80086ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80086f2:	4611      	mov	r1, r2
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	f001 fc51 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f003 030f 	and.w	r3, r3, #15
 8008700:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
          break;
 8008704:	e002      	b.n	800870c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        default:
          PARec=N2kgfpec_InvalidRequestOrCommandParameterField;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      }

      AddAcknowledgeParameter(N2kRMsg,i,PARec);
 800870c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008710:	b2d9      	uxtb	r1, r3
 8008712:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8008716:	f107 0314 	add.w	r3, r7, #20
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fb70 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 8008720:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008724:	3301      	adds	r3, #1
 8008726:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800872a:	e798      	b.n	800865e <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xbe>
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 800872c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008730:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f107 0114 	add.w	r1, r7, #20
 800873c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008740:	4618      	mov	r0, r3
 8008742:	f005 f8cf 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    pNMEA2000->SetDeviceInformationInstances(DILower,DIUpper,SI,iDev);
 8008746:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800874a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6918      	ldr	r0, [r3, #16]
 8008752:	f897 4119 	ldrb.w	r4, [r7, #281]	; 0x119
 8008756:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 800875a:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 800875e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4623      	mov	r3, r4
 8008766:	f004 fa75 	bl	800cc54 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>

    return true;
 800876a:	2301      	movs	r3, #1
}
 800876c:	4618      	mov	r0, r3
 800876e:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008772:	46bd      	mov	sp, r7
 8008774:	bd90      	pop	{r4, r7, pc}

08008776 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126464::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8008776:	b590      	push	{r4, r7, lr}
 8008778:	b0cd      	sub	sp, #308	; 0x134
 800877a:	af04      	add	r7, sp, #16
 800877c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008780:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008784:	6020      	str	r0, [r4, #0]
 8008786:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800878a:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008794:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8008798:	600a      	str	r2, [r1, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80087a0:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80087a4:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 80087a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80087aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80087b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681c      	ldr	r4, [r3, #0]
 80087be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80087c2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80087c6:	881a      	ldrh	r2, [r3, #0]
 80087c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80087cc:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 80087d0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	2300      	movs	r3, #0
 80087d8:	9302      	str	r3, [sp, #8]
 80087da:	2332      	movs	r3, #50	; 0x32
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	f06f 030f 	mvn.w	r3, #15
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	6809      	ldr	r1, [r1, #0]
 80087e8:	47a0      	blx	r4
 80087ea:	4603      	mov	r3, r0
 80087ec:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  bool MatchFilter=true;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t RespondTxRx=0xff;
 80087f6:	23ff      	movs	r3, #255	; 0xff
 80087f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  tN2kMsg N2kRMsg;
 80087fc:	f107 0014 	add.w	r0, r7, #20
 8008800:	2300      	movs	r3, #0
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	2206      	movs	r2, #6
 8008808:	210f      	movs	r1, #15
 800880a:	f001 fa25 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800880e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008812:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	7b19      	ldrb	r1, [r3, #12]
 800881a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800881e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	f107 0014 	add.w	r0, r7, #20
 800882a:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	f7ff faa8 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 800883c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008840:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	7b1a      	ldrb	r2, [r3, #12]
 8008848:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800884c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008850:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 8008852:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8083 	beq.w	8008962 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    StartParseRequestPairParameters(N2kMsg,Index);
 8008862:	f107 0210 	add.w	r2, r7, #16
 8008866:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800886a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800886e:	4611      	mov	r1, r2
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f7ff f9a7 	bl	8007bc4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008876:	2300      	movs	r3, #0
 8008878:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800887c:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8008880:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008884:	429a      	cmp	r2, r3
 8008886:	da14      	bge.n	80088b2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 8008888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10e      	bne.n	80088ae <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x138>
 8008890:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008894:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	7b5b      	ldrb	r3, [r3, #13]
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fe28 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f083 0301 	eor.w	r3, r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13e>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d054      	beq.n	8008962 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
      if ( !FoundInvalidField) {
 80088b8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80088bc:	f083 0301 	eor.w	r3, r3, #1
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d03a      	beq.n	800893c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1c6>
        field=N2kMsg.GetByte(Index);
 80088c6:	f107 0210 	add.w	r2, r7, #16
 80088ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80088d2:	4611      	mov	r1, r2
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	f001 fb61 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
        switch (field) {
 80088e0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d11f      	bne.n	8008928 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1b2>
          case 1: // Selection of Tx or Rx
            RespondTxRx=N2kMsg.GetByte(Index);
 80088e8:	f107 0210 	add.w	r2, r7, #16
 80088ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80088f4:	4611      	mov	r1, r2
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	f001 fb50 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
            if ( RespondTxRx==N2kpgnl_transmit || RespondTxRx==N2kpgnl_receive ) {
 8008902:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x19c>
 800890a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800890e:	2b01      	cmp	r3, #1
 8008910:	d103      	bne.n	800891a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1a4>
              FieldErrorCode=N2kgfpec_Acknowledge;
 8008912:	2300      	movs	r3, #0
 8008914:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            } else {
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
              MatchFilter=false;
            }
            break;
 8008918:	e013      	b.n	8008942 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 800891a:	2303      	movs	r3, #3
 800891c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
              MatchFilter=false;
 8008920:	2300      	movs	r3, #0
 8008922:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8008926:	e00c      	b.n	8008942 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            MatchFilter=false;
 800892e:	2300      	movs	r3, #0
 8008930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            FoundInvalidField=true;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800893a:	e002      	b.n	8008942 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 800893c:	2302      	movs	r3, #2
 800893e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 8008942:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008946:	b2d9      	uxtb	r1, r3
 8008948:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fa55 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008956:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800895a:	3301      	adds	r3, #1
 800895c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008960:	e78c      	b.n	800887c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x106>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8008962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 800896a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x202>
 8008976:	2300      	movs	r3, #0
 8008978:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 800897c:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8008980:	f083 0301 	eor.w	r3, r3, #1
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01c      	beq.n	80089c4 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x24e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800898a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800898e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	7b5b      	ldrb	r3, [r3, #13]
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fdab 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800899c:	4603      	mov	r3, r0
 800899e:	f083 0301 	eor.w	r3, r3, #1
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d072      	beq.n	8008a8e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 80089a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f107 0114 	add.w	r1, r7, #20
 80089b8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80089bc:	4618      	mov	r0, r3
 80089be:	f004 ff91 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80089c2:	e064      	b.n	8008a8e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 80089c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	7b1b      	ldrb	r3, [r3, #12]
 80089d0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 80089d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	f7ff faa9 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00d      	beq.n	8008a04 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 80089e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	7b5b      	ldrb	r3, [r3, #13]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fd7c 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x290>
 8008a04:	2300      	movs	r3, #0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2a4>
 8008a0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	7b5b      	ldrb	r3, [r3, #13]
 8008a16:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 8008a1a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2b4>
 8008a22:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008a26:	2bff      	cmp	r3, #255	; 0xff
 8008a28:	d114      	bne.n	8008a54 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2de>
 8008a2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691c      	ldr	r4, [r3, #16]
 8008a36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	f7ff fa78 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8008a4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f007 f8d8 	bl	800fc04 <_ZN9tNMEA200013SendTxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 8008a54:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d003      	beq.n	8008a64 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2ee>
 8008a5c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008a60:	2bff      	cmp	r3, #255	; 0xff
 8008a62:	d114      	bne.n	8008a8e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 8008a64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	691c      	ldr	r4, [r3, #16]
 8008a70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f7ff fa5b 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8008a84:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f007 f9d1 	bl	800fe30 <_ZN9tNMEA200013SendRxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(N2kMsg.Source,iDev);
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(N2kMsg.Source,iDev);
#endif
  }

  return true;
 8008a8e:	2301      	movs	r3, #1
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd90      	pop	{r4, r7, pc}
	...

08008a9c <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126996::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	b0d5      	sub	sp, #340	; 0x154
 8008aa2:	af04      	add	r7, sp, #16
 8008aa4:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8008aa8:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
 8008aac:	6030      	str	r0, [r6, #0]
 8008aae:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008ab2:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8008ab6:	6001      	str	r1, [r0, #0]
 8008ab8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008abc:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8008ac0:	600a      	str	r2, [r1, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ac8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008acc:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8008ace:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681e      	ldr	r6, [r3, #0]
 8008ae6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008aea:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008aee:	881a      	ldrh	r2, [r3, #0]
 8008af0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008af4:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8008af8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9302      	str	r3, [sp, #8]
 8008b02:	2332      	movs	r3, #50	; 0x32
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	f06f 030f 	mvn.w	r3, #15
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	6809      	ldr	r1, [r1, #0]
 8008b10:	47b0      	blx	r6
 8008b12:	4603      	mov	r3, r0
 8008b14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  bool MatchFilter=true;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
  tN2kMsg N2kRMsg;
 8008b1e:	f107 0020 	add.w	r0, r7, #32
 8008b22:	2300      	movs	r3, #0
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	2206      	movs	r2, #6
 8008b2a:	210f      	movs	r1, #15
 8008b2c:	f001 f894 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8008b30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	7b19      	ldrb	r1, [r3, #12]
 8008b3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	f107 0020 	add.w	r0, r7, #32
 8008b4c:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f7ff f917 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 8008b5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	7b1a      	ldrb	r2, [r3, #12]
 8008b6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008b72:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 8008b74:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 8254 	beq.w	8009026 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x58a>
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
    }
 8008b7e:	466b      	mov	r3, sp
 8008b80:	461e      	mov	r6, r3
    bool FoundInvalidField=false;
 8008b82:	2300      	movs	r3, #0
 8008b84:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    size_t strSize=Max_N2kProductInfoStrLen;
 8008b88:	2321      	movs	r3, #33	; 0x21
 8008b8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    char Query[strSize];
 8008b8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b92:	1e59      	subs	r1, r3, #1
 8008b94:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8008b98:	460b      	mov	r3, r1
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	00c3      	lsls	r3, r0, #3
 8008bae:	6838      	ldr	r0, [r7, #0]
 8008bb0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008bb4:	6838      	ldr	r0, [r7, #0]
 8008bb6:	00c2      	lsls	r2, r0, #3
 8008bb8:	460b      	mov	r3, r1
 8008bba:	3301      	adds	r3, #1
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	469a      	mov	sl, r3
 8008bc0:	4693      	mov	fp, r2
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	3301      	adds	r3, #1
 8008bda:	3307      	adds	r3, #7
 8008bdc:	08db      	lsrs	r3, r3, #3
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	ebad 0d03 	sub.w	sp, sp, r3
 8008be4:	ab04      	add	r3, sp, #16
 8008be6:	3300      	adds	r3, #0
 8008be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    char CurVal[strSize];
 8008bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bf0:	1e59      	subs	r1, r3, #1
 8008bf2:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4698      	mov	r8, r3
 8008bfe:	4691      	mov	r9, r2
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c14:	460b      	mov	r3, r1
 8008c16:	3301      	adds	r3, #1
 8008c18:	2200      	movs	r2, #0
 8008c1a:	461c      	mov	r4, r3
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	f04f 0300 	mov.w	r3, #0
 8008c26:	00eb      	lsls	r3, r5, #3
 8008c28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c2c:	00e2      	lsls	r2, r4, #3
 8008c2e:	460b      	mov	r3, r1
 8008c30:	3301      	adds	r3, #1
 8008c32:	3307      	adds	r3, #7
 8008c34:	08db      	lsrs	r3, r3, #3
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	ebad 0d03 	sub.w	sp, sp, r3
 8008c3c:	ab04      	add	r3, sp, #16
 8008c3e:	3300      	adds	r3, #0
 8008c40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    StartParseRequestPairParameters(N2kMsg,Index);
 8008c44:	f107 021c 	add.w	r2, r7, #28
 8008c48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c50:	4611      	mov	r1, r2
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	f7fe ffb6 	bl	8007bc4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008c5e:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8008c62:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008c66:	429a      	cmp	r2, r3
 8008c68:	da14      	bge.n	8008c94 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 8008c6a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10e      	bne.n	8008c90 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f4>
 8008c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	7b5b      	ldrb	r3, [r3, #13]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fc37 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f083 0301 	eor.w	r3, r3, #1
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1fa>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 81c4 	beq.w	8009024 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x588>
      if ( !FoundInvalidField) {
 8008c9c:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8008ca0:	f083 0301 	eor.w	r3, r3, #1
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 81a3 	beq.w	8008ff2 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x556>
        field=N2kMsg.GetByte(Index);
 8008cac:	f107 021c 	add.w	r2, r7, #28
 8008cb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb8:	4611      	mov	r1, r2
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	f001 f96e 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        switch (field) {
 8008cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	2b07      	cmp	r3, #7
 8008cce:	f200 8183 	bhi.w	8008fd8 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x53c>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x23c>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008cf9 	.word	0x08008cf9
 8008cdc:	08008d51 	.word	0x08008d51
 8008ce0:	08008da9 	.word	0x08008da9
 8008ce4:	08008e0b 	.word	0x08008e0b
 8008ce8:	08008e6d 	.word	0x08008e6d
 8008cec:	08008ecf 	.word	0x08008ecf
 8008cf0:	08008f31 	.word	0x08008f31
 8008cf4:	08008f85 	.word	0x08008f85
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetN2kVersion(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 8008cf8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d00:	681c      	ldr	r4, [r3, #0]
 8008d02:	f107 011c 	add.w	r1, r7, #28
 8008d06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	f001 f95c 	bl	8009fd0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461d      	mov	r5, r3
 8008d1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f003 fd8f 	bl	800c850 <_ZNK9tNMEA200013GetN2kVersionEi>
 8008d32:	4603      	mov	r3, r0
 8008d34:	461a      	mov	r2, r3
 8008d36:	f107 031b 	add.w	r3, r7, #27
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d46:	4629      	mov	r1, r5
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fd81 	bl	8009850 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008d4e:	e156      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetProductCode(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 8008d50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d58:	681c      	ldr	r4, [r3, #0]
 8008d5a:	f107 011c 	add.w	r1, r7, #28
 8008d5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	f001 f930 	bl	8009fd0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461d      	mov	r5, r3
 8008d74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8008d84:	4618      	mov	r0, r3
 8008d86:	f003 fd84 	bl	800c892 <_ZNK9tNMEA200014GetProductCodeEi>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f107 031b 	add.w	r3, r7, #27
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fd55 	bl	8009850 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008da6:	e12a      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelID_len,0xff,Index);
 8008da8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dac:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8008db0:	f107 031c 	add.w	r3, r7, #28
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	23ff      	movs	r3, #255	; 0xff
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008dc0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008dc4:	6800      	ldr	r0, [r0, #0]
 8008dc6:	f001 f970 	bl	800a0aa <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8008dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6918      	ldr	r0, [r3, #16]
 8008dd6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008dda:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008dde:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008de2:	f003 fd77 	bl	800c8d4 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8008de6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8008df4:	f107 031b 	add.w	r3, r7, #27
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008e00:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008e04:	f7ff f8a2 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008e08:	e0f9      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kSwCode_len,0xff,Index);
 8008e0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e0e:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8008e12:	f107 031c 	add.w	r3, r7, #28
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	23ff      	movs	r3, #255	; 0xff
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e22:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	f001 f93f 	bl	800a0aa <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8008e2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6918      	ldr	r0, [r3, #16]
 8008e38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008e3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008e40:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008e44:	f003 fd46 	bl	800c8d4 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8008e48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8008e56:	f107 031b 	add.w	r3, r7, #27
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008e62:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008e66:	f7ff f871 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008e6a:	e0c8      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelVersion_len,0xff,Index);
 8008e6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e70:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8008e74:	f107 031c 	add.w	r3, r7, #28
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	23ff      	movs	r3, #255	; 0xff
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2320      	movs	r3, #32
 8008e80:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e84:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008e88:	6800      	ldr	r0, [r0, #0]
 8008e8a:	f001 f90e 	bl	800a0aa <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8008e8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6918      	ldr	r0, [r3, #16]
 8008e9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008e9e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008ea2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008ea6:	f003 fd15 	bl	800c8d4 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8008eaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8008eb8:	f107 031b 	add.w	r3, r7, #27
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008ec4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008ec8:	f7ff f840 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008ecc:	e097      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelSerialCode_len,0xff,Index);
 8008ece:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ed2:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8008ed6:	f107 031c 	add.w	r3, r7, #28
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	23ff      	movs	r3, #255	; 0xff
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008ee6:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008eea:	6800      	ldr	r0, [r0, #0]
 8008eec:	f001 f8dd 	bl	800a0aa <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 8008ef0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6918      	ldr	r0, [r3, #16]
 8008efc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008f00:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008f04:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008f08:	f003 fce4 	bl	800c8d4 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8008f0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f207 121d 	addw	r2, r7, #285	; 0x11d
 8008f1a:	f107 031b 	add.w	r3, r7, #27
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008f26:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008f2a:	f7ff f80f 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008f2e:	e066      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetCertificationLevel(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 8008f30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f38:	681c      	ldr	r4, [r3, #0]
 8008f3a:	f107 021c 	add.w	r2, r7, #28
 8008f3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f46:	4611      	mov	r1, r2
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f001 f827 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	461d      	mov	r5, r3
 8008f52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8008f62:	4618      	mov	r0, r3
 8008f64:	f003 fcea 	bl	800c93c <_ZNK9tNMEA200021GetCertificationLevelEi>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f107 031b 	add.w	r3, r7, #27
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	23ff      	movs	r3, #255	; 0xff
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 fc8a 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008f82:	e03c      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetLoadEquivalency(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 8008f84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f8c:	681c      	ldr	r4, [r3, #0]
 8008f8e:	f107 021c 	add.w	r2, r7, #28
 8008f92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	f000 fffd 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461d      	mov	r5, r3
 8008fa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f003 fce3 	bl	800c982 <_ZNK9tNMEA200018GetLoadEquivalencyEi>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f107 031b 	add.w	r3, r7, #27
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	f207 131d 	addw	r3, r7, #285	; 0x11d
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	23ff      	movs	r3, #255	; 0xff
 8008fce:	4629      	mov	r1, r5
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fc60 	bl	8009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 8008fd6:	e012      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 8008fd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fdc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
            FoundInvalidField=true;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8008ff0:	e005      	b.n	8008ffe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 8008ff2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ff6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	701a      	strb	r2, [r3, #0]
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 8008ffe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009002:	b2d9      	uxtb	r1, r3
 8009004:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009008:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	f107 0320 	add.w	r3, r7, #32
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fef4 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8009018:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800901c:	3301      	adds	r3, #1
 800901e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009022:	e61c      	b.n	8008c5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1c2>
 8009024:	46b5      	mov	sp, r6
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 8009026:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 800902e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5a0>
 800903a:	2300      	movs	r3, #0
 800903c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8009040:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8009044:	f083 0301 	eor.w	r3, r3, #1
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01c      	beq.n	8009088 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5ec>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800904e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	7b5b      	ldrb	r3, [r3, #13]
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fa49 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8009060:	4603      	mov	r3, r0
 8009062:	f083 0301 	eor.w	r3, r3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d04d      	beq.n	8009108 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
 800906c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	f107 0120 	add.w	r1, r7, #32
 800907c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8009080:	4618      	mov	r0, r3
 8009082:	f004 fc2f 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8009086:	e03f      	b.n	8009108 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 8009088:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800908c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	7b1b      	ldrb	r3, [r3, #12]
 8009094:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 8009098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800909c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f7fe ff47 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00d      	beq.n	80090c8 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 80090ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	7b5b      	ldrb	r3, [r3, #13]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fa1a 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62e>
 80090c8:	2300      	movs	r3, #0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x642>
 80090ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	7b5b      	ldrb	r3, [r3, #13]
 80090da:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    pNMEA2000->SendProductInformation(dest,iDev,N2kMsg.IsTPMessage());
 80090de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	691c      	ldr	r4, [r3, #16]
 80090ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	f7fe ff1e 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 80090fe:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8009102:	4620      	mov	r0, r4
 8009104:	f007 f894 	bl	8010230 <_ZN9tNMEA200022SendProductInformationEhib>
#else
    pNMEA2000->SendProductInformation(iDev);
#endif
  }

  return true;
 8009108:	2301      	movs	r3, #1
}
 800910a:	4618      	mov	r0, r3
 800910c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009110:	46bd      	mov	sp, r7
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	bf00      	nop

08009118 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126998::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b0f3      	sub	sp, #460	; 0x1cc
 800911c:	af04      	add	r7, sp, #16
 800911e:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 8009122:	f5a4 74d6 	sub.w	r4, r4, #428	; 0x1ac
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 800912c:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 8009130:	6001      	str	r1, [r0, #0]
 8009132:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8009136:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 800913a:	600a      	str	r2, [r1, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009142:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 8009146:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 8009148:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800914c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009156:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681c      	ldr	r4, [r3, #0]
 8009160:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009164:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 8009168:	881a      	ldrh	r2, [r3, #0]
 800916a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800916e:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 8009172:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	2300      	movs	r3, #0
 800917a:	9302      	str	r3, [sp, #8]
 800917c:	2332      	movs	r3, #50	; 0x32
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	f06f 030f 	mvn.w	r3, #15
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	6809      	ldr	r1, [r1, #0]
 800918a:	47a0      	blx	r4
 800918c:	4603      	mov	r3, r0
 800918e:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
  bool MatchFilter=true;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
  tN2kMsg N2kRMsg;
 8009198:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800919c:	2300      	movs	r3, #0
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	2206      	movs	r2, #6
 80091a4:	210f      	movs	r1, #15
 80091a6:	f000 fd57 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 80091aa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80091ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	7b19      	ldrb	r1, [r3, #12]
 80091b6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80091ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80091c6:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	f7fe fdda 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 80091d8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80091dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	7b1a      	ldrb	r2, [r3, #12]
 80091e4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80091e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ec:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 80091ee:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8109 	beq.w	800940a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
    char Query[Max_N2kConfigurationInfoField_len];
    char CurVal[Max_N2kConfigurationInfoField_len];
    size_t QueryStrSize;

    StartParseRequestPairParameters(N2kMsg,Index);
 80091fe:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009202:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009206:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800920a:	4611      	mov	r1, r2
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	f7fe fcd9 	bl	8007bc4 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 8009212:	2300      	movs	r3, #0
 8009214:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8009218:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800921c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8009220:	429a      	cmp	r2, r3
 8009222:	da14      	bge.n	800924e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 8009224:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10e      	bne.n	800924a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x132>
 800922c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009230:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	7b5b      	ldrb	r3, [r3, #13]
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe f95a 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800923e:	4603      	mov	r3, r0
 8009240:	f083 0301 	eor.w	r3, r3, #1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x138>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 80da 	beq.w	800940a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
      if ( !FoundInvalidField) {
 8009256:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800925a:	f083 0301 	eor.w	r3, r3, #1
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80b9 	beq.w	80093d8 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2c0>
        field=N2kMsg.GetByte(Index);
 8009266:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800926a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800926e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009272:	4611      	mov	r1, r2
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f000 fe91 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
        switch (field) {
 8009280:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8009284:	2b03      	cmp	r3, #3
 8009286:	d069      	beq.n	800935c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x244>
 8009288:	2b03      	cmp	r3, #3
 800928a:	f300 8098 	bgt.w	80093be <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d002      	beq.n	8009298 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x180>
 8009292:	2b02      	cmp	r3, #2
 8009294:	d031      	beq.n	80092fa <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x1e2>
 8009296:	e092      	b.n	80093be <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
          case N2kPGN126998_InstallationDescription1_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 8009298:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800929c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80092a0:	2247      	movs	r2, #71	; 0x47
 80092a2:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 80092a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80092a8:	f107 0214 	add.w	r2, r7, #20
 80092ac:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80092b0:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 80092b4:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 80092b8:	6800      	ldr	r0, [r0, #0]
 80092ba:	f000 ff76 	bl	800a1aa <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription1(CurVal,Max_N2kConfigurationInfoField_len);
 80092be:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80092c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80092ce:	2247      	movs	r2, #71	; 0x47
 80092d0:	4618      	mov	r0, r3
 80092d2:	f003 fbf5 	bl	800cac0 <_ZN9tNMEA200027GetInstallationDescription1EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 80092d6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80092da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 80092e4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80092e8:	f107 0114 	add.w	r1, r7, #20
 80092ec:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	4623      	mov	r3, r4
 80092f4:	f7fe fe2a 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80092f8:	e074      	b.n	80093e4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_InstallationDescription2_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 80092fa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80092fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009302:	2247      	movs	r2, #71	; 0x47
 8009304:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 8009306:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800930a:	f107 0214 	add.w	r2, r7, #20
 800930e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009312:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8009316:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800931a:	6800      	ldr	r0, [r0, #0]
 800931c:	f000 ff45 	bl	800a1aa <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription2(CurVal,Max_N2kConfigurationInfoField_len);
 8009320:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009324:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8009330:	2247      	movs	r2, #71	; 0x47
 8009332:	4618      	mov	r0, r3
 8009334:	f003 fbe1 	bl	800cafa <_ZN9tNMEA200027GetInstallationDescription2EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 8009338:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800933c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 8009346:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800934a:	f107 0114 	add.w	r1, r7, #20
 800934e:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	4623      	mov	r3, r4
 8009356:	f7fe fdf9 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800935a:	e043      	b.n	80093e4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_ManufacturerInformation_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 800935c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009360:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009364:	2247      	movs	r2, #71	; 0x47
 8009366:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 8009368:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800936c:	f107 0214 	add.w	r2, r7, #20
 8009370:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009374:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8009378:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f000 ff14 	bl	800a1aa <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetManufacturerInformation(CurVal,Max_N2kConfigurationInfoField_len);
 8009382:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009386:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8009392:	2247      	movs	r2, #71	; 0x47
 8009394:	4618      	mov	r0, r3
 8009396:	f003 fbcd 	bl	800cb34 <_ZN9tNMEA200026GetManufacturerInformationEPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800939a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800939e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 80093a8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80093ac:	f107 0114 	add.w	r1, r7, #20
 80093b0:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	4623      	mov	r3, r4
 80093b8:	f7fe fdc8 	bl	8007f4c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 80093bc:	e012      	b.n	80093e4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 80093be:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80093c2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80093c6:	2201      	movs	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 80093ca:	2300      	movs	r3, #0
 80093cc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
            FoundInvalidField=true;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 80093d6:	e005      	b.n	80093e4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 80093d8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80093dc:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80093e0:	2202      	movs	r2, #2
 80093e2:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 80093e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80093e8:	b2d9      	uxtb	r1, r3
 80093ea:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80093ee:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fd01 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 80093fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009402:	3301      	adds	r3, #1
 8009404:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8009408:	e706      	b.n	8009218 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x100>
    }

  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 800940a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 8009412:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x308>
 800941e:	2300      	movs	r3, #0
 8009420:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 8009424:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009428:	f083 0301 	eor.w	r3, r3, #1
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01c      	beq.n	800946c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x354>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 8009432:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009436:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	7b5b      	ldrb	r3, [r3, #13]
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe f857 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8009444:	4603      	mov	r3, r0
 8009446:	f083 0301 	eor.w	r3, r3, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d04d      	beq.n	80094ec <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
 8009450:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009454:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8009460:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8009464:	4618      	mov	r0, r3
 8009466:	f004 fa3d 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800946a:	e03f      	b.n	80094ec <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 800946c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009470:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	7b1b      	ldrb	r3, [r3, #12]
 8009478:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 800947c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009480:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	f7fe fd55 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00d      	beq.n	80094ac <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 8009490:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009494:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	7b5b      	ldrb	r3, [r3, #13]
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe f828 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x396>
 80094ac:	2300      	movs	r3, #0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3aa>
 80094b2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	7b5b      	ldrb	r3, [r3, #13]
 80094be:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    pNMEA2000->SendConfigurationInformation(dest,iDev,N2kMsg.IsTPMessage());
 80094c2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691c      	ldr	r4, [r3, #16]
 80094ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	f7fe fd2c 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 80094dc:	4603      	mov	r3, r0
 80094de:	f897 11b2 	ldrb.w	r1, [r7, #434]	; 0x1b2
 80094e2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80094e6:	4620      	mov	r0, r4
 80094e8:	f007 f83a 	bl	8010560 <_ZN9tNMEA200028SendConfigurationInformationEhib>
#else
    pNMEA2000->SendConfigurationInformation(iDev);
#endif
  }

  return true;
 80094ec:	2301      	movs	r3, #1
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd90      	pop	{r4, r7, pc}

080094f8 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 126998 can be used to set installation description 1 and 2 fields
bool tN2kGroupFunctionHandlerForPGN126998::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 80094f8:	b590      	push	{r4, r7, lr}
 80094fa:	b0dd      	sub	sp, #372	; 0x174
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8009502:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 8009506:	6020      	str	r0, [r4, #0]
 8009508:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800950c:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8009510:	6001      	str	r1, [r0, #0]
 8009512:	4619      	mov	r1, r3
 8009514:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009518:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009522:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8009526:	460a      	mov	r2, r1
 8009528:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  size_t InstallationDescriptionSize;
  char InstallationDescription[Max_N2kConfigurationInfoField_len];
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 800952a:	2300      	movs	r3, #0
 800952c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
  tN2kMsg N2kRMsg;
 8009530:	f107 0014 	add.w	r0, r7, #20
 8009534:	2300      	movs	r3, #0
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2300      	movs	r3, #0
 800953a:	2206      	movs	r2, #6
 800953c:	210f      	movs	r1, #15
 800953e:	f000 fb8b 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

 		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) pec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 8009542:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009546:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b08      	cmp	r3, #8
 800954e:	d10d      	bne.n	800956c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 8009550:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009554:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b0f      	cmp	r3, #15
 800955c:	d106      	bne.n	800956c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 800955e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009562:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b09      	cmp	r3, #9
 800956a:	d002      	beq.n	8009572 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x7a>
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 8009572:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	7b19      	ldrb	r1, [r3, #12]
 800957e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009582:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	f107 0014 	add.w	r0, r7, #20
 800958e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009592:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	f7fe fbf3 	bl	8007d8c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    StartParseCommandPairParameters(N2kMsg,Index);
 80095a6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80095aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80095ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80095b2:	4611      	mov	r1, r2
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	f7fe fb47 	bl	8007c48 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80095c0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80095c4:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80095ce:	429a      	cmp	r2, r3
 80095d0:	da6e      	bge.n	80096b0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1b8>
      field=N2kMsg.GetByte(Index);
 80095d2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80095d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80095da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80095de:	4611      	mov	r1, r2
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	f000 fcdb 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
      switch (field) {
 80095ec:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d002      	beq.n	80095fa <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x102>
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d026      	beq.n	8009646 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x14e>
 80095f8:	e04b      	b.n	8009692 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x19a>
        case 1: // Installation description 1
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 80095fa:	2347      	movs	r3, #71	; 0x47
 80095fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 8009600:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8009604:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009608:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800960c:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8009610:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8009614:	6800      	ldr	r0, [r0, #0]
 8009616:	f000 fdc8 	bl	800a1aa <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription1(InstallationDescription);
 800961a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800961e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f003 fa06 	bl	800ca3e <_ZN9tNMEA200027SetInstallationDescription1EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 8009632:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009636:	b2d9      	uxtb	r1, r3
 8009638:	f107 0314 	add.w	r3, r7, #20
 800963c:	2200      	movs	r2, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fbde 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 8009644:	e02e      	b.n	80096a4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        case 2:  // Installation description 2
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 8009646:	2347      	movs	r3, #71	; 0x47
 8009648:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 800964c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8009650:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009654:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8009658:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800965c:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8009660:	6800      	ldr	r0, [r0, #0]
 8009662:	f000 fda2 	bl	800a1aa <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription2(InstallationDescription);
 8009666:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800966a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f003 fa00 	bl	800ca7e <_ZN9tNMEA200027SetInstallationDescription2EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 800967e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009682:	b2d9      	uxtb	r1, r3
 8009684:	f107 0314 	add.w	r3, r7, #20
 8009688:	2200      	movs	r2, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fbb8 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 8009690:	e008      	b.n	80096a4 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        default:
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_InvalidRequestOrCommandParameterField);
 8009692:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009696:	b2d9      	uxtb	r1, r3
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	2201      	movs	r2, #1
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fbae 	bl	8007e00 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 80096a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80096a8:	3301      	adds	r3, #1
 80096aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80096ae:	e787      	b.n	80095c0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0xc8>
      }
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 80096b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80096b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f107 0114 	add.w	r1, r7, #20
 80096c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80096c4:	4618      	mov	r0, r3
 80096c6:	f004 f90d 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

    return true;
 80096ca:	2301      	movs	r3, #1
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd90      	pop	{r4, r7, pc}

080096d6 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi>:
// Heartbeat settings
bool tN2kGroupFunctionHandlerForPGN126993::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 80096d6:	b590      	push	{r4, r7, lr}
 80096d8:	b08b      	sub	sp, #44	; 0x2c
 80096da:	af04      	add	r7, sp, #16
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
 80096e2:	807b      	strh	r3, [r7, #2]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec = GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset,true,60000U,1000U,true,6000U);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681c      	ldr	r4, [r3, #0]
 80096ec:	887a      	ldrh	r2, [r7, #2]
 80096ee:	f241 7370 	movw	r3, #6000	; 0x1770
 80096f2:	9303      	str	r3, [sp, #12]
 80096f4:	2301      	movs	r3, #1
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	2301      	movs	r3, #1
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	47a0      	blx	r4
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]
  // Turn off is not allowed for heartbeat.
  if ( TransmissionInterval==0 ) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x42>
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
  
  if ( NumberOfParameterPairs==0 ) { // According to doc, there should not be any parameter pairs defined
 8009718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	d158      	bne.n	80097d2 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xfc>
    if ( TransmissionInterval==0xffffffff && TransmissionIntervalOffset==0xffff ) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009726:	d112      	bne.n	800974e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
 8009728:	887b      	ldrh	r3, [r7, #2]
 800972a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800972e:	4293      	cmp	r3, r2
 8009730:	d10d      	bne.n	800974e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
      // Request for 126993 with 0xffffffff and 0xffff is prohibited so use default reponse.
      return tN2kGroupFunctionHandler::HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	887a      	ldrh	r2, [r7, #2]
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	4613      	mov	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	f7fe f884 	bl	8007852 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>
 800974a:	4603      	mov	r3, r0
 800974c:	e060      	b.n	8009810 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x13a>
    }
    if ( pec==N2kgfTPec_Acknowledge ) {
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d120      	bne.n	8009796 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xc0>
      // Request specification with offset is confusing and there is no clear explanation. So to keep
      // test tool happy, we respond always immediately and set offset, if it is >0
      uint32_t Offset=TransmissionIntervalOffset;
 8009754:	887b      	ldrh	r3, [r7, #2]
 8009756:	613b      	str	r3, [r7, #16]
      Offset=(Offset==0xffff || Offset==0?0xffffffff:Offset*10); // Offset comes in 10 ms, convert to ms.
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800975e:	4293      	cmp	r3, r2
 8009760:	d008      	beq.n	8009774 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d005      	beq.n	8009774 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	005b      	lsls	r3, r3, #1
 8009772:	e001      	b.n	8009778 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xa2>
 8009774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009778:	613b      	str	r3, [r7, #16]
      pNMEA2000->SetHeartbeatIntervalAndOffset(TransmissionInterval,Offset,iDev);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6918      	ldr	r0, [r3, #16]
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	f003 fe10 	bl	800d3a8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
      pNMEA2000->SendHeartbeat(iDev);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800978e:	4618      	mov	r0, r3
 8009790:	f003 fec0 	bl	800d514 <_ZN9tNMEA200013SendHeartbeatEi>
 8009794:	e03b      	b.n	800980e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    } else if (!tNMEA2000::IsBroadcast(N2kMsg.Destination)) {
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	7b5b      	ldrb	r3, [r3, #13]
 800979a:	4618      	mov	r0, r3
 800979c:	f7fd fea9 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f083 0301 	eor.w	r3, r3, #1
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d030      	beq.n	800980e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000, N2kMsg.Source, iDev, PGN, N2kgfPGNec_Acknowledge, pec);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6918      	ldr	r0, [r3, #16]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	7b19      	ldrb	r1, [r3, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	2300      	movs	r3, #0
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	2300      	movs	r3, #0
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	2300      	movs	r3, #0
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097cc:	f7fe fb4e 	bl	8007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
 80097d0:	e01d      	b.n	800980e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    }
  } else {
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	7b5b      	ldrb	r3, [r3, #13]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fd fe8b 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 80097dc:	4603      	mov	r3, r0
 80097de:	f083 0301 	eor.w	r3, r3, #1
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d012      	beq.n	800980e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,PGN,
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6918      	ldr	r0, [r3, #16]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	7b19      	ldrb	r1, [r3, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	2305      	movs	r3, #5
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097fc:	9302      	str	r3, [sp, #8]
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	2300      	movs	r3, #0
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	4613      	mov	r3, r2
 8009808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800980a:	f7fe fb2f 	bl	8007e6c <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      N2kgfPGNec_Acknowledge,
                      pec, //N2kgfTPec_TransmitIntervalOrPriorityNotSupported,
                      NumberOfParameterPairs, N2kgfpec_RequestOrCommandNotSupported);
    }
  }
  return true;
 800980e:	2301      	movs	r3, #1
}
 8009810:	4618      	mov	r0, r3
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	bd90      	pop	{r4, r7, pc}

08009818 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
      if ( (FieldVal&Mask)!=MatchVal ) {
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	4013      	ands	r3, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	429a      	cmp	r2, r3
 8009830:	d006      	beq.n	8009840 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x28>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	2203      	movs	r2, #3
 8009836:	701a      	strb	r2, [r3, #0]
        Match=false;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2200      	movs	r2, #0
 800983c:	701a      	strb	r2, [r3, #0]
    }
 800983e:	e002      	b.n	8009846 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x2e>
      } else ErrorCode=N2kgfpec_Acknowledge;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
    }
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr

08009850 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	4608      	mov	r0, r1
 800985a:	4611      	mov	r1, r2
 800985c:	461a      	mov	r2, r3
 800985e:	4603      	mov	r3, r0
 8009860:	817b      	strh	r3, [r7, #10]
 8009862:	460b      	mov	r3, r1
 8009864:	813b      	strh	r3, [r7, #8]
 8009866:	4613      	mov	r3, r2
 8009868:	80fb      	strh	r3, [r7, #6]
      if ( (FieldVal&Mask)!=MatchVal ) {
 800986a:	897a      	ldrh	r2, [r7, #10]
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	4013      	ands	r3, r2
 8009870:	b29b      	uxth	r3, r3
 8009872:	893a      	ldrh	r2, [r7, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	d006      	beq.n	8009886 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	2203      	movs	r2, #3
 800987c:	701a      	strb	r2, [r3, #0]
        Match=false;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
    }
 8009884:	e002      	b.n	800988c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
    }
 800988c:	bf00      	nop
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	bc80      	pop	{r7}
 8009894:	4770      	bx	lr

08009896 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	461a      	mov	r2, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	70fb      	strb	r3, [r7, #3]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70bb      	strb	r3, [r7, #2]
 80098ac:	4613      	mov	r3, r2
 80098ae:	707b      	strb	r3, [r7, #1]
      if ( (FieldVal&Mask)!=MatchVal ) {
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	787b      	ldrb	r3, [r7, #1]
 80098b4:	4013      	ands	r3, r2
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	78ba      	ldrb	r2, [r7, #2]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d006      	beq.n	80098cc <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2203      	movs	r2, #3
 80098c2:	701a      	strb	r2, [r3, #0]
        Match=false;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
    }
 80098ca:	e002      	b.n	80098d2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
    }
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr
 80098dc:	0000      	movs	r0, r0
	...

080098e0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>:

//*****************************************************************************
// DC Detailed Status
//
void SetN2kPGN127506(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     uint8_t StateOfCharge, uint8_t StateOfHealth, double TimeRemaining, double RippleVoltage, double Capacity) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	4608      	mov	r0, r1
 80098ea:	4611      	mov	r1, r2
 80098ec:	461a      	mov	r2, r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	70fb      	strb	r3, [r7, #3]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70bb      	strb	r3, [r7, #2]
 80098f6:	4613      	mov	r3, r2
 80098f8:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127506L);
 80098fa:	492f      	ldr	r1, [pc, #188]	; (80099b8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd8>)
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9dd 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2206      	movs	r2, #6
 8009906:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(SID);
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fb15 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(DCInstance);
 8009912:	78bb      	ldrb	r3, [r7, #2]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fb10 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte((unsigned char)DCType);
 800991c:	787b      	ldrb	r3, [r7, #1]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fb0b 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfCharge);
 8009926:	7c3b      	ldrb	r3, [r7, #16]
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fb06 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfHealth);
 8009930:	7d3b      	ldrb	r3, [r7, #20]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fb01 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(TimeRemaining,60);
 800993a:	a319      	add	r3, pc, #100	; (adr r3, 80099a0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	4b1c      	ldr	r3, [pc, #112]	; (80099bc <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xdc>)
 800994a:	e9cd 2300 	strd	r2, r3, [sp]
 800994e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa44 	bl	8009de0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(RippleVoltage,0.001);
 8009958:	a311      	add	r3, pc, #68	; (adr r3, 80099a0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009962:	a311      	add	r3, pc, #68	; (adr r3, 80099a8 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc8>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	e9cd 2300 	strd	r2, r3, [sp]
 800996c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fa35 	bl	8009de0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(Capacity,3600);
 8009976:	a30a      	add	r3, pc, #40	; (adr r3, 80099a0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009980:	a30b      	add	r3, pc, #44	; (adr r3, 80099b0 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd0>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	e9cd 2300 	strd	r2, r3, [sp]
 800998a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa26 	bl	8009de0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	f3af 8000 	nop.w
 80099a0:	00000000 	.word	0x00000000
 80099a4:	c1cdcd65 	.word	0xc1cdcd65
 80099a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80099ac:	3f50624d 	.word	0x3f50624d
 80099b0:	00000000 	.word	0x00000000
 80099b4:	40ac2000 	.word	0x40ac2000
 80099b8:	0001f212 	.word	0x0001f212
 80099bc:	404e0000 	.word	0x404e0000

080099c0 <_Z15SetN2kPGN127508R7tN2kMsghdddh>:

//*****************************************************************************
// Battery Status
// Temperatures should be in Kelvins
void SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent,
                     double BatteryTemperature, unsigned char SID) {
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af04      	add	r7, sp, #16
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	e9c7 2300 	strd	r2, r3, [r7]
 80099cc:	460b      	mov	r3, r1
 80099ce:	72fb      	strb	r3, [r7, #11]
    N2kMsg.SetPGN(127508L);
 80099d0:	4927      	ldr	r1, [pc, #156]	; (8009a70 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xb0>)
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f972 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2206      	movs	r2, #6
 80099dc:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatteryInstance);
 80099de:	7afb      	ldrb	r3, [r7, #11]
 80099e0:	4619      	mov	r1, r3
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 faaa 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteDouble(BatteryVoltage,0.01);
 80099e8:	a31b      	add	r3, pc, #108	; (adr r3, 8009a58 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099f2:	a31b      	add	r3, pc, #108	; (adr r3, 8009a60 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	e9cd 2300 	strd	r2, r3, [sp]
 80099fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f9c3 	bl	8009d8c <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteDouble(BatteryCurrent,0.1);
 8009a06:	a314      	add	r3, pc, #80	; (adr r3, 8009a58 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a10:	a315      	add	r3, pc, #84	; (adr r3, 8009a68 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa8>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	e9cd 2300 	strd	r2, r3, [sp]
 8009a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 f9b4 	bl	8009d8c <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteUDouble(BatteryTemperature,0.01);
 8009a24:	a30c      	add	r3, pc, #48	; (adr r3, 8009a58 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a2e:	a30c      	add	r3, pc, #48	; (adr r3, 8009a60 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	e9cd 2300 	strd	r2, r3, [sp]
 8009a38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f9cf 	bl	8009de0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte(SID);
 8009a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a46:	4619      	mov	r1, r3
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fa77 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
}
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	00000000 	.word	0x00000000
 8009a5c:	c1cdcd65 	.word	0xc1cdcd65
 8009a60:	47ae147b 	.word	0x47ae147b
 8009a64:	3f847ae1 	.word	0x3f847ae1
 8009a68:	9999999a 	.word	0x9999999a
 8009a6c:	3fb99999 	.word	0x3fb99999
 8009a70:	0001f214 	.word	0x0001f214
 8009a74:	00000000 	.word	0x00000000

08009a78 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:

//*****************************************************************************
// Battery Configuration Status
void SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af04      	add	r7, sp, #16
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	4608      	mov	r0, r1
 8009a82:	4611      	mov	r1, r2
 8009a84:	461a      	mov	r2, r3
 8009a86:	4603      	mov	r3, r0
 8009a88:	70fb      	strb	r3, [r7, #3]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70bb      	strb	r3, [r7, #2]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127513L);
 8009a92:	4949      	ldr	r1, [pc, #292]	; (8009bb8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x140>)
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f911 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2206      	movs	r2, #6
 8009a9e:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatInstance);
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa49 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xc0 | ((SupportsEqual & 0x03) << 4) | (BatType & 0x0f)); // BatType (4 bit), SupportsEqual (2 bit), Reserved (2 bit)
 8009aaa:	787b      	ldrb	r3, [r7, #1]
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	b25b      	sxtb	r3, r3
 8009ab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ab4:	b25b      	sxtb	r3, r3
 8009ab6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009aba:	b25a      	sxtb	r2, r3
 8009abc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	b25b      	sxtb	r3, r3
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b25b      	sxtb	r3, r3
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa34 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte( ((BatChemistry & 0x0f) << 4) | (BatNominalVoltage & 0x0f) ); // BatNominalVoltage (4 bit), BatChemistry (4 bit)
 8009ad4:	7d3b      	ldrb	r3, [r7, #20]
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	b25a      	sxtb	r2, r3
 8009ada:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	b25b      	sxtb	r3, r3
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b25b      	sxtb	r3, r3
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa25 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(BatCapacity,3600);
 8009af2:	a329      	add	r3, pc, #164	; (adr r3, 8009b98 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x120>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009afc:	a328      	add	r3, pc, #160	; (adr r3, 8009ba0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x128>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	e9cd 2300 	strd	r2, r3, [sp]
 8009b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f968 	bl	8009de0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)BatTemperatureCoefficient);
 8009b10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa10 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    PeukertExponent-=1; // Is this right or not I am not yet sure!
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	4b26      	ldr	r3, [pc, #152]	; (8009bbc <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x144>)
 8009b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009b26:	f7f6 fb95 	bl	8000254 <__aeabi_dsub>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (PeukertExponent<0 || PeukertExponent>0.504) { N2kMsg.AddByte(0xff); } else { N2kMsg.Add1ByteUDouble(PeukertExponent,0.002,-1); }
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009b3e:	f7f6 ffb3 	bl	8000aa8 <__aeabi_dcmplt>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d109      	bne.n	8009b5c <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xe4>
 8009b48:	a317      	add	r3, pc, #92	; (adr r3, 8009ba8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x130>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009b52:	f7f6 ffc7 	bl	8000ae4 <__aeabi_dcmpgt>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xee>
 8009b5c:	21ff      	movs	r1, #255	; 0xff
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f9ec 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 8009b64:	e00e      	b.n	8009b84 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x10c>
 8009b66:	f04f 0200 	mov.w	r2, #0
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x148>)
 8009b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b70:	a30f      	add	r3, pc, #60	; (adr r3, 8009bb0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x138>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	e9cd 2300 	strd	r2, r3, [sp]
 8009b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f958 	bl	8009e34 <_ZN7tN2kMsg15Add1ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)ChargeEfficiencyFactor);
 8009b84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f9d6 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	c1cdcd65 	.word	0xc1cdcd65
 8009ba0:	00000000 	.word	0x00000000
 8009ba4:	40ac2000 	.word	0x40ac2000
 8009ba8:	9ba5e354 	.word	0x9ba5e354
 8009bac:	3fe020c4 	.word	0x3fe020c4
 8009bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8009bb4:	3f60624d 	.word	0x3f60624d
 8009bb8:	0001f219 	.word	0x0001f219
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	bff00000 	.word	0xbff00000

08009bc4 <_ZNK7tN2kMsg7IsValidEv>:
  void SetPGN(unsigned long _PGN);
  void ForceSource(unsigned char _Source) const { Source=_Source; }
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; } // We can send to specified destination only for PGN:s low byte=0
  void Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination=0xff);
  virtual void Clear();
  bool IsValid() const { return (PGN!=0 && DataLen>0); }
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	dd01      	ble.n	8009be0 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <_ZNK7tN2kMsg7IsValidEv+0x1e>
 8009be0:	2300      	movs	r3, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bc80      	pop	{r7}
 8009bea:	4770      	bx	lr

08009bec <round>:

//*****************************************************************************
// On Arduino round() is a macro, hence the definition check. On other systems
// it is a function that may or may not be implemented so we do it ourselves.
#if !defined(round)
double round(double val) {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	e9c7 0100 	strd	r0, r1, [r7]
  return val >= 0
      ? floor(val + 0.5)
 8009bf6:	f04f 0200 	mov.w	r2, #0
 8009bfa:	f04f 0300 	mov.w	r3, #0
 8009bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c02:	f7f6 ff65 	bl	8000ad0 <__aeabi_dcmpge>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00f      	beq.n	8009c2c <round+0x40>
 8009c0c:	f04f 0200 	mov.w	r2, #0
 8009c10:	4b10      	ldr	r3, [pc, #64]	; (8009c54 <round+0x68>)
 8009c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c16:	f7f6 fb1f 	bl	8000258 <__adddf3>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	f00b f8a9 	bl	8014d78 <floor>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
      : ceil(val - 0.5);
 8009c2a:	e00e      	b.n	8009c4a <round+0x5e>
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <round+0x68>)
 8009c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c36:	f7f6 fb0d 	bl	8000254 <__aeabi_dsub>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4619      	mov	r1, r3
 8009c42:	f00b f819 	bl	8014c78 <ceil>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
}
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	3fe00000 	.word	0x3fe00000

08009c58 <_ZN7tN2kMsgC1Ehhmi>:
#endif

//*****************************************************************************
tN2kMsg::tN2kMsg(unsigned char _Source, unsigned char _Priority, unsigned long _PGN, int _DataLen) {
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	72fb      	strb	r3, [r7, #11]
 8009c66:	4613      	mov	r3, r2
 8009c68:	72bb      	strb	r3, [r7, #10]
 8009c6a:	4a13      	ldr	r2, [pc, #76]	; (8009cb8 <_ZN7tN2kMsgC1Ehhmi+0x60>)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	601a      	str	r2, [r3, #0]
  Init(_Priority,_PGN,_Source,255);
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	7ab9      	ldrb	r1, [r7, #10]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	9200      	str	r2, [sp, #0]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f839 	bl	8009cf2 <_ZN7tN2kMsg4InitEhmhh>
  if ( _DataLen>0 && _DataLen<MaxDataLen ) DataLen=_DataLen;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd05      	ble.n	8009c92 <_ZN7tN2kMsgC1Ehhmi+0x3a>
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2bde      	cmp	r3, #222	; 0xde
 8009c8a:	dc02      	bgt.n	8009c92 <_ZN7tN2kMsgC1Ehhmi+0x3a>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	611a      	str	r2, [r3, #16]
  ResetData();
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f852 	bl	8009d3c <_ZN7tN2kMsg9ResetDataEv>
  if ( PGN!=0 ) MsgTime=N2kMillis();
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <_ZN7tN2kMsgC1Ehhmi+0x54>
 8009ca0:	f001 f8bc 	bl	800ae1c <_Z9N2kMillisv>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	08015548 	.word	0x08015548

08009cbc <_ZN7tN2kMsg6SetPGNEm>:

//*****************************************************************************
void tN2kMsg::SetPGN(unsigned long _PGN) {
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  Clear();
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	4798      	blx	r3
  if ( PGN==0 ) PGN=_PGN;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <_ZN7tN2kMsg6SetPGNEm+0x22>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	609a      	str	r2, [r3, #8]
  MsgTime=N2kMillis();
 8009cde:	f001 f89d 	bl	800ae1c <_Z9N2kMillisv>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <_ZN7tN2kMsg4InitEhmhh>:

//*****************************************************************************
void tN2kMsg::Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination) {
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	460b      	mov	r3, r1
 8009d00:	72fb      	strb	r3, [r7, #11]
 8009d02:	4613      	mov	r3, r2
 8009d04:	72bb      	strb	r3, [r7, #10]
  DataLen=0;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	611a      	str	r2, [r3, #16]
  Priority=_Priority & 0x7;
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	711a      	strb	r2, [r3, #4]
  SetPGN(_PGN);
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff ffce 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  Source=_Source;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	7aba      	ldrb	r2, [r7, #10]
 8009d24:	731a      	strb	r2, [r3, #12]
  Destination=_Destination;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	7e3a      	ldrb	r2, [r7, #24]
 8009d2a:	735a      	strb	r2, [r3, #13]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
  TPMessage=false;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
#endif
}
 8009d34:	bf00      	nop
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <_ZN7tN2kMsg9ResetDataEv>:

//*****************************************************************************
void tN2kMsg::ResetData() {
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  if ( DataLen>0 ) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dd08      	ble.n	8009d5e <_ZN7tN2kMsg9ResetDataEv+0x22>
    memset(Data,0xff,DataLen);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f103 0014 	add.w	r0, r3, #20
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	461a      	mov	r2, r3
 8009d58:	21ff      	movs	r1, #255	; 0xff
 8009d5a:	f00b f8dd 	bl	8014f18 <memset>
  }
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <_ZN7tN2kMsg5ClearEv>:

//*****************************************************************************
void tN2kMsg::Clear() {
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  PGN=0;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	609a      	str	r2, [r3, #8]
  DataLen=0;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
  MsgTime=0;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr

08009d8c <_ZN7tN2kMsg14Add2ByteDoubleEddd>:
    SetBuf3ByteInt(0x7fffff,DataLen,Data);
  }
}

//*****************************************************************************
void tN2kMsg::Add2ByteDouble(double v, double precision, double UndefVal) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 8009d98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da0:	f7f6 fe78 	bl	8000a94 <__aeabi_dcmpeq>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10c      	bne.n	8009dc4 <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x38>
    SetBuf2ByteDouble(v,precision,DataLen,Data);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3310      	adds	r3, #16
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	3214      	adds	r2, #20
 8009db2:	9201      	str	r2, [sp, #4]
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dbe:	f000 fa6f 	bl	800a2a0 <_Z17SetBuf2ByteDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
  }
}
 8009dc2:	e009      	b.n	8009dd8 <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f103 0110 	add.w	r1, r3, #16
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3314      	adds	r3, #20
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8009dd4:	f000 fb46 	bl	800a464 <_Z15SetBuf2ByteUInttRiPh>
}
 8009dd8:	bf00      	nop
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>:

//*****************************************************************************
void tN2kMsg::Add2ByteUDouble(double v, double precision, double UndefVal) {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 8009dec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009df4:	f7f6 fe4e 	bl	8000a94 <__aeabi_dcmpeq>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10c      	bne.n	8009e18 <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x38>
    SetBuf2ByteUDouble(v,precision,DataLen,Data);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3310      	adds	r3, #16
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	3214      	adds	r2, #20
 8009e06:	9201      	str	r2, [sp, #4]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e12:	f000 fa8d 	bl	800a330 <_Z18SetBuf2ByteUDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
  }
}
 8009e16:	e009      	b.n	8009e2c <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f103 0110 	add.w	r1, r3, #16
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3314      	adds	r3, #20
 8009e22:	461a      	mov	r2, r3
 8009e24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009e28:	f000 fb1c 	bl	800a464 <_Z15SetBuf2ByteUInttRiPh>
}
 8009e2c:	bf00      	nop
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <_ZN7tN2kMsg15Add1ByteUDoubleEddd>:
    AddByte(N2kInt8NA);
  }
}

//*****************************************************************************
void tN2kMsg::Add1ByteUDouble(double v, double precision, double UndefVal) {
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 8009e40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e48:	f7f6 fe24 	bl	8000a94 <__aeabi_dcmpeq>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10c      	bne.n	8009e6c <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x38>
    SetBuf1ByteUDouble(v,precision,DataLen,Data);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3310      	adds	r3, #16
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	3214      	adds	r2, #20
 8009e5a:	9201      	str	r2, [sp, #4]
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e66:	f000 faa7 	bl	800a3b8 <_Z18SetBuf1ByteUDoubleddRiPh>
  } else {
    AddByte(N2kUInt8NA);
  }
}
 8009e6a:	e003      	b.n	8009e74 <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x40>
    AddByte(N2kUInt8NA);
 8009e6c:	21ff      	movs	r1, #255	; 0xff
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f864 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
}
 8009e74:	bf00      	nop
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <_ZN7tN2kMsg11Add2ByteIntEs>:

//*****************************************************************************
void tN2kMsg::Add2ByteInt(int16_t v) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteInt(v,DataLen,Data);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f103 0110 	add.w	r1, r3, #16
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f103 0214 	add.w	r2, r3, #20
 8009e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fad1 	bl	800a440 <_Z14SetBuf2ByteIntsRiPh>
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>:

//*****************************************************************************
void tN2kMsg::Add2ByteUInt(uint16_t v) {
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b082      	sub	sp, #8
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteUInt(v,DataLen,Data);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f103 0110 	add.w	r1, r3, #16
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f103 0214 	add.w	r2, r3, #20
 8009ebe:	887b      	ldrh	r3, [r7, #2]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 facf 	bl	800a464 <_Z15SetBuf2ByteUInttRiPh>
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <_ZN7tN2kMsg11Add3ByteIntEl>:

//*****************************************************************************
void tN2kMsg::Add3ByteInt(int32_t v) {
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
  SetBuf3ByteInt(v,DataLen,Data);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f103 0110 	add.w	r1, r3, #16
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3314      	adds	r3, #20
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6838      	ldr	r0, [r7, #0]
 8009ee6:	f000 face 	bl	800a486 <_Z14SetBuf3ByteIntlRiPh>
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <_ZN7tN2kMsg12Add4ByteUIntEm>:

//*****************************************************************************
void tN2kMsg::Add4ByteUInt(uint32_t v) {
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  SetBuf4ByteUInt(v,DataLen,Data);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f103 0110 	add.w	r1, r3, #16
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3314      	adds	r3, #20
 8009f06:	461a      	mov	r2, r3
 8009f08:	6838      	ldr	r0, [r7, #0]
 8009f0a:	f000 facc 	bl	800a4a6 <_Z15SetBuf4ByteUIntmRiPh>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <_ZN7tN2kMsg9AddUInt64Ey>:

//*****************************************************************************
void tN2kMsg::AddUInt64(uint64_t v) {
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	e9c7 2300 	strd	r2, r3, [r7]
  SetBufUInt64(v,DataLen,Data);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f103 0210 	add.w	r2, r3, #16
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3314      	adds	r3, #20
 8009f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f30:	f000 fac9 	bl	800a4c6 <_Z12SetBufUInt64yRiPh>
}
 8009f34:	bf00      	nop
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZN7tN2kMsg7AddByteEh>:

//*****************************************************************************
void tN2kMsg::AddByte(unsigned char v) {
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  Data[DataLen]=v; DataLen++;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	4413      	add	r3, r2
 8009f50:	78fa      	ldrb	r2, [r7, #3]
 8009f52:	751a      	strb	r2, [r3, #20]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	611a      	str	r2, [r3, #16]
}
 8009f5e:	bf00      	nop
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bc80      	pop	{r7}
 8009f66:	4770      	bx	lr

08009f68 <_ZN7tN2kMsg6AddStrEPKcib>:

//*****************************************************************************
void tN2kMsg::AddStr(const char *str, int len, bool UsePgm) {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	70fb      	strb	r3, [r7, #3]
  SetBufStr(str,len,DataLen,Data,UsePgm,0xff);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f103 0210 	add.w	r2, r3, #16
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f103 0114 	add.w	r1, r3, #20
 8009f82:	23ff      	movs	r3, #255	; 0xff
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	68b8      	ldr	r0, [r7, #8]
 8009f90:	f000 faac 	bl	800a4ec <_Z9SetBufStrPKciRiPhbh>
}
 8009f94:	bf00      	nop
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_ZNK7tN2kMsg7GetByteERi>:
    DataLen+=bufLen;
  }
}

//*****************************************************************************
unsigned char tN2kMsg::GetByte(int &Index) const {
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  if (Index<DataLen) {
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	da08      	bge.n	8009fc4 <_ZNK7tN2kMsg7GetByteERi+0x28>
    return Data[Index++];
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	1c59      	adds	r1, r3, #1
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	6011      	str	r1, [r2, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	7d1b      	ldrb	r3, [r3, #20]
 8009fc2:	e000      	b.n	8009fc6 <_ZNK7tN2kMsg7GetByteERi+0x2a>
  } else return 0xff;
 8009fc4:	23ff      	movs	r3, #255	; 0xff
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bc80      	pop	{r7}
 8009fce:	4770      	bx	lr

08009fd0 <_ZNK7tN2kMsg12Get2ByteUIntERit>:
    return GetBuf2ByteInt(Index,Data);
  } else return def;
}

//*****************************************************************************
uint16_t tN2kMsg::Get2ByteUInt(int &Index, uint16_t def) const {
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80fb      	strh	r3, [r7, #6]
  if (Index+2<=DataLen) {
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	da07      	bge.n	8009ffc <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2c>
    return GetBuf2ByteUInt(Index,Data);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3314      	adds	r3, #20
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	68b8      	ldr	r0, [r7, #8]
 8009ff4:	f000 f914 	bl	800a220 <_Z15GetBuf2ByteUIntRiPKh>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	e000      	b.n	8009ffe <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2e>
  } else return def;
 8009ffc:	88fb      	ldrh	r3, [r7, #6]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <_ZNK7tN2kMsg12Get3ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get3ByteUInt(int &Index, uint32_t def) const {
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
  if (Index+3<=DataLen) {
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	1c9a      	adds	r2, r3, #2
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	da07      	bge.n	800a030 <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2a>
    return GetBuf3ByteUInt(Index,Data);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3314      	adds	r3, #20
 800a024:	4619      	mov	r1, r3
 800a026:	68b8      	ldr	r0, [r7, #8]
 800a028:	f000 f909 	bl	800a23e <_Z15GetBuf3ByteUIntRiPKh>
 800a02c:	4603      	mov	r3, r0
 800a02e:	e000      	b.n	800a032 <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2c>
  } else return def;
 800a030:	687b      	ldr	r3, [r7, #4]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <_ZNK7tN2kMsg12Get4ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get4ByteUInt(int &Index, uint32_t def) const {
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
  if (Index+4<=DataLen) {
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	1cda      	adds	r2, r3, #3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	da07      	bge.n	800a064 <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2a>
    return GetBuf4ByteUInt(Index,Data);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3314      	adds	r3, #20
 800a058:	4619      	mov	r1, r3
 800a05a:	68b8      	ldr	r0, [r7, #8]
 800a05c:	f000 f8fe 	bl	800a25c <_Z15GetBuf4ByteUIntRiPKh>
 800a060:	4603      	mov	r3, r0
 800a062:	e000      	b.n	800a066 <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2c>
  } else return def;
 800a064:	687b      	ldr	r3, [r7, #4]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <_ZNK7tN2kMsg9GetUInt64ERiy>:

//*****************************************************************************
uint64_t tN2kMsg::GetUInt64(int &Index, uint64_t def) const {
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	e9c7 2300 	strd	r2, r3, [r7]
  if (Index+8<=DataLen) {
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	1dda      	adds	r2, r3, #7
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	429a      	cmp	r2, r3
 800a088:	da08      	bge.n	800a09c <_ZNK7tN2kMsg9GetUInt64ERiy+0x2e>
    return GetBuf8ByteUInt(Index,Data);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3314      	adds	r3, #20
 800a08e:	4619      	mov	r1, r3
 800a090:	68b8      	ldr	r0, [r7, #8]
 800a092:	f000 f8f2 	bl	800a27a <_Z15GetBuf8ByteUIntRiPKh>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	e001      	b.n	800a0a0 <_ZNK7tN2kMsg9GetUInt64ERiy+0x32>
  } else return def;
 800a09c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <_ZNK7tN2kMsg6GetStrEjPcjhRi>:
    return true;
  } else return false;
}

//*****************************************************************************
bool tN2kMsg::GetStr(size_t StrBufSize, char *StrBuf, size_t Length, unsigned char nulChar, int &Index) const {
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b088      	sub	sp, #32
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	603b      	str	r3, [r7, #0]
  unsigned char vb;
  bool nullReached = false;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	77fb      	strb	r3, [r7, #31]
  if ( StrBufSize==0 || StrBuf==0 ) {
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x1e>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d109      	bne.n	800a0dc <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x32>
    Index+=Length;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	601a      	str	r2, [r3, #0]
    return true;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e062      	b.n	800a1a2 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  }
  StrBuf[0] = '\0';
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
  if ((size_t)Index+Length<=(size_t)DataLen) {
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	6912      	ldr	r2, [r2, #16]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d855      	bhi.n	800a1a0 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf6>
    size_t i;
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d22f      	bcs.n	800a160 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	429a      	cmp	r2, r3
 800a108:	d22a      	bcs.n	800a160 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
      vb = GetByte(Index);
 800a10a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff ff45 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800a112:	4603      	mov	r3, r0
 800a114:	75fb      	strb	r3, [r7, #23]
      if (! nullReached) {
 800a116:	7ffb      	ldrb	r3, [r7, #31]
 800a118:	f083 0301 	eor.w	r3, r3, #1
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d015      	beq.n	800a14e <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xa4>
        if (vb == 0x00 || vb == nulChar ) {
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x88>
 800a128:	7dfa      	ldrb	r2, [r7, #23]
 800a12a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a12e:	429a      	cmp	r2, r3
 800a130:	d107      	bne.n	800a142 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x98>
          nullReached = true; // either null or '@' (AIS null character)
 800a132:	2301      	movs	r3, #1
 800a134:	77fb      	strb	r3, [r7, #31]
          StrBuf[i] = '\0';
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	4413      	add	r3, r2
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	e00a      	b.n	800a158 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        } else {
          StrBuf[i] = vb;
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	4413      	add	r3, r2
 800a148:	7dfa      	ldrb	r2, [r7, #23]
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	e004      	b.n	800a158 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        }
      } else {
        StrBuf[i] = '\0';
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	4413      	add	r3, r2
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	3301      	adds	r3, #1
 800a15c:	61bb      	str	r3, [r7, #24]
 800a15e:	e7cb      	b.n	800a0f8 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x4e>
      }
    }
    StrBuf[i] = '\0';
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	4413      	add	r3, r2
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
    for (;i<Length;i++) GetByte(Index);  // Stopped by buffer size, so read out bytes from message
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d207      	bcs.n	800a182 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
 800a172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7ff ff11 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	3301      	adds	r3, #1
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	e7f3      	b.n	800a16a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xc0>
    for (;i<StrBufSize;i++) StrBuf[i] = '\0';  // Stopped by length, fill buffer with 0
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	429a      	cmp	r2, r3
 800a188:	d208      	bcs.n	800a19c <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf2>
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	4413      	add	r3, r2
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	3301      	adds	r3, #1
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	e7f2      	b.n	800a182 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
    return true;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  } else return false;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3720      	adds	r7, #32
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <_ZNK7tN2kMsg9GetVarStrERjPcRi>:

//*****************************************************************************
bool tN2kMsg::GetVarStr(size_t &StrBufSize, char *StrBuf, int &Index) const {
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b088      	sub	sp, #32
 800a1ae:	af02      	add	r7, sp, #8
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	603b      	str	r3, [r7, #0]
  size_t Len=GetByte(Index)-2;
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff feee 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	3b02      	subs	r3, #2
 800a1c4:	617b      	str	r3, [r7, #20]
  uint8_t Type=GetByte(Index);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fee7 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	74fb      	strb	r3, [r7, #19]
  if ( Type!=0x01 ) { StrBufSize=0; return false; }
 800a1d2:	7cfb      	ldrb	r3, [r7, #19]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d004      	beq.n	800a1e2 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x38>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e01a      	b.n	800a218 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x6e>
  if ( StrBuf!=0 ) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x56>
    GetStr(StrBufSize,StrBuf,Len,0xff,Index);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	6819      	ldr	r1, [r3, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	23ff      	movs	r3, #255	; 0xff
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff ff56 	bl	800a0aa <_ZNK7tN2kMsg6GetStrEjPcjhRi>
 800a1fe:	e007      	b.n	800a210 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x66>
  } else {
    Index+=Len; // Just pass this string
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	4413      	add	r3, r2
 800a20a:	461a      	mov	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	601a      	str	r2, [r3, #0]
  }
  StrBufSize=Len;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	601a      	str	r2, [r3, #0]
  return true;
 800a216:	2301      	movs	r3, #1
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <_Z15GetBuf2ByteUIntRiPKh>:
int16_t GetBuf2ByteInt(int &index, const unsigned char *buf) {
  return GetBuf<int16_t>(2, index, buf);
}

//*****************************************************************************
uint16_t GetBuf2ByteUInt(int &index, const unsigned char *buf) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  return GetBuf<uint16_t>(2, index, buf);
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	2002      	movs	r0, #2
 800a230:	f000 fc86 	bl	800ab40 <_Z6GetBufItET_jRiPKh>
 800a234:	4603      	mov	r3, r0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <_Z15GetBuf3ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf3ByteUInt(int &index, const unsigned char *buf) {
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(3, index, buf);
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	2003      	movs	r0, #3
 800a24e:	f000 fc97 	bl	800ab80 <_Z6GetBufImET_jRiPKh>
 800a252:	4603      	mov	r3, r0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <_Z15GetBuf4ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf4ByteUInt(int &index, const unsigned char *buf) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(4, index, buf);
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	2004      	movs	r0, #4
 800a26c:	f000 fc88 	bl	800ab80 <_Z6GetBufImET_jRiPKh>
 800a270:	4603      	mov	r3, r0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <_Z15GetBuf8ByteUIntRiPKh>:

//*****************************************************************************
uint64_t GetBuf8ByteUInt(int &index, const unsigned char *buf) {
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  return GetBuf<uint64_t>(8, index, buf);
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	2008      	movs	r0, #8
 800a28a:	f000 fc99 	bl	800abc0 <_Z6GetBufIyET_jRiPKh>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
}
 800a292:	4610      	mov	r0, r2
 800a294:	4619      	mov	r1, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	0000      	movs	r0, r0
	...

0800a2a0 <_Z17SetBuf2ByteDoubleddRiPh>:

  return vl * precision;
}

//*****************************************************************************
void SetBuf2ByteDouble(double v, double precision, int &index, unsigned char *buf) {
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a2aa:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800a2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2b6:	f7f6 faaf 	bl	8000818 <__aeabi_ddiv>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f7ff fc93 	bl	8009bec <round>
 800a2c6:	e9c7 0106 	strd	r0, r1, [r7, #24]
  int16_t vi = (vd>=N2kInt16Min && vd<N2kInt16OR)?(int16_t)vd:N2kInt16OR;
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	4b16      	ldr	r3, [pc, #88]	; (800a328 <_Z17SetBuf2ByteDoubleddRiPh+0x88>)
 800a2d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2d4:	f7f6 fbfc 	bl	8000ad0 <__aeabi_dcmpge>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d010      	beq.n	800a300 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800a2de:	a310      	add	r3, pc, #64	; (adr r3, 800a320 <_Z17SetBuf2ByteDoubleddRiPh+0x80>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2e8:	f7f6 fbde 	bl	8000aa8 <__aeabi_dcmplt>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d006      	beq.n	800a300 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800a2f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2f6:	f7f6 fbff 	bl	8000af8 <__aeabi_d2iz>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	b21b      	sxth	r3, r3
 800a2fe:	e001      	b.n	800a304 <_Z17SetBuf2ByteDoubleddRiPh+0x64>
 800a300:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800a304:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800a306:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a30e:	2102      	movs	r1, #2
 800a310:	f000 fc7c 	bl	800ac0c <_Z6SetBufIsEvT_jRiPh>
}
 800a314:	bf00      	nop
 800a316:	3720      	adds	r7, #32
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	f3af 8000 	nop.w
 800a320:	00000000 	.word	0x00000000
 800a324:	40dfff80 	.word	0x40dfff80
 800a328:	c0e00000 	.word	0xc0e00000
 800a32c:	00000000 	.word	0x00000000

0800a330 <_Z18SetBuf2ByteUDoubleddRiPh>:

//*****************************************************************************
void SetBuf2ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a33a:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800a33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a346:	f7f6 fa67 	bl	8000818 <__aeabi_ddiv>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4610      	mov	r0, r2
 800a350:	4619      	mov	r1, r3
 800a352:	f7ff fc4b 	bl	8009bec <round>
 800a356:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint16_t vi = (vd>=0 && vd<N2kUInt16OR)?(uint16_t)vd:N2kUInt16OR;
 800a35a:	f04f 0200 	mov.w	r2, #0
 800a35e:	f04f 0300 	mov.w	r3, #0
 800a362:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a366:	f7f6 fbb3 	bl	8000ad0 <__aeabi_dcmpge>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d010      	beq.n	800a392 <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800a370:	a30f      	add	r3, pc, #60	; (adr r3, 800a3b0 <_Z18SetBuf2ByteUDoubleddRiPh+0x80>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a37a:	f7f6 fb95 	bl	8000aa8 <__aeabi_dcmplt>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800a384:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a388:	f7f6 fbde 	bl	8000b48 <__aeabi_d2uiz>
 800a38c:	4603      	mov	r3, r0
 800a38e:	b29b      	uxth	r3, r3
 800a390:	e001      	b.n	800a396 <_Z18SetBuf2ByteUDoubleddRiPh+0x66>
 800a392:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a396:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800a398:	8af8      	ldrh	r0, [r7, #22]
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a39e:	2102      	movs	r1, #2
 800a3a0:	f000 fc53 	bl	800ac4a <_Z6SetBufItEvT_jRiPh>
}
 800a3a4:	bf00      	nop
 800a3a6:	3720      	adds	r7, #32
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	f3af 8000 	nop.w
 800a3b0:	00000000 	.word	0x00000000
 800a3b4:	40efffc0 	.word	0x40efffc0

0800a3b8 <_Z18SetBuf1ByteUDoubleddRiPh>:
  int8_t vi = (vd>=N2kInt8Min && vd<N2kInt8OR)?(int8_t)vd:N2kInt8OR;
  SetBuf(vi, 1, index, buf);
}

//*****************************************************************************
void SetBuf1ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a3c2:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800a3c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3ce:	f7f6 fa23 	bl	8000818 <__aeabi_ddiv>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	4619      	mov	r1, r3
 800a3da:	f7ff fc07 	bl	8009bec <round>
 800a3de:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint8_t vi = (vd>=0 && vd<N2kUInt8OR)?(uint8_t)vd:N2kUInt8OR;
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	f04f 0300 	mov.w	r3, #0
 800a3ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a3ee:	f7f6 fb6f 	bl	8000ad0 <__aeabi_dcmpge>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d010      	beq.n	800a41a <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 800a3f8:	a30f      	add	r3, pc, #60	; (adr r3, 800a438 <_Z18SetBuf1ByteUDoubleddRiPh+0x80>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a402:	f7f6 fb51 	bl	8000aa8 <__aeabi_dcmplt>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d006      	beq.n	800a41a <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 800a40c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a410:	f7f6 fb9a 	bl	8000b48 <__aeabi_d2uiz>
 800a414:	4603      	mov	r3, r0
 800a416:	b2db      	uxtb	r3, r3
 800a418:	e000      	b.n	800a41c <_Z18SetBuf1ByteUDoubleddRiPh+0x64>
 800a41a:	23fe      	movs	r3, #254	; 0xfe
 800a41c:	75fb      	strb	r3, [r7, #23]
  SetBuf(vi, 1, index, buf);
 800a41e:	7df8      	ldrb	r0, [r7, #23]
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a424:	2101      	movs	r1, #1
 800a426:	f000 fc2f 	bl	800ac88 <_Z6SetBufIhEvT_jRiPh>
}
 800a42a:	bf00      	nop
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	f3af 8000 	nop.w
 800a438:	00000000 	.word	0x00000000
 800a43c:	406fc000 	.word	0x406fc000

0800a440 <_Z14SetBuf2ByteIntsRiPh>:

//*****************************************************************************
void SetBuf2ByteInt(int16_t v, int &index, unsigned char *buf) {
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800a44e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	2102      	movs	r1, #2
 800a458:	f000 fbd8 	bl	800ac0c <_Z6SetBufIsEvT_jRiPh>
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <_Z15SetBuf2ByteUInttRiPh>:

//*****************************************************************************
void SetBuf2ByteUInt(uint16_t v, int &index, unsigned char *buf) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800a472:	89f8      	ldrh	r0, [r7, #14]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	2102      	movs	r1, #2
 800a47a:	f000 fbe6 	bl	800ac4a <_Z6SetBufItEvT_jRiPh>
}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <_Z14SetBuf3ByteIntlRiPh>:

//*****************************************************************************
void SetBuf3ByteInt(int32_t v, int &index, unsigned char *buf) {
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  SetBuf(v, 3, index, buf);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	2103      	movs	r1, #3
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 fb15 	bl	800aac8 <_Z6SetBufIlEvT_jRiPh>
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <_Z15SetBuf4ByteUIntmRiPh>:

//*****************************************************************************
void SetBuf4ByteUInt(uint32_t v, int &index, unsigned char *buf) {
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
  SetBuf(v, 4, index, buf);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	2104      	movs	r1, #4
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fb23 	bl	800ab04 <_Z6SetBufImEvT_jRiPh>
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <_Z12SetBufUInt64yRiPh>:

//*****************************************************************************
void SetBufUInt64(uint64_t v, int &index, unsigned char *buf) {
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b086      	sub	sp, #24
 800a4ca:	af02      	add	r7, sp, #8
 800a4cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a4d0:	607a      	str	r2, [r7, #4]
 800a4d2:	603b      	str	r3, [r7, #0]
  SetBuf(v, 8, index, buf);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2208      	movs	r2, #8
 800a4dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4e0:	f000 fbf1 	bl	800acc6 <_Z6SetBufIyEvT_jRiPh>
}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <_Z9SetBufStrPKciRiPhbh>:

//*****************************************************************************
void SetBufStr(const char *str, int len, int &index, unsigned char *buf, bool UsePgm, unsigned char fillChar) {
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
  int i=0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	617b      	str	r3, [r7, #20]
  if ( UsePgm ) {
 800a4fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d01c      	beq.n	800a540 <_Z9SetBufStrPKciRiPhbh+0x54>
    for (; i<len && str[i]!=0; i++, index++) {
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	da35      	bge.n	800a57a <_Z9SetBufStrPKciRiPhbh+0x8e>
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02f      	beq.n	800a57a <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=pgm_read_byte(&(str[i]));
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	441a      	add	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4619      	mov	r1, r3
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	440b      	add	r3, r1
 800a52a:	7812      	ldrb	r2, [r2, #0]
 800a52c:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	3301      	adds	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	e7e2      	b.n	800a506 <_Z9SetBufStrPKciRiPhbh+0x1a>
    }
  } else {
    for (; i<len && str[i]!=0; i++, index++) {
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	da18      	bge.n	800a57a <_Z9SetBufStrPKciRiPhbh+0x8e>
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	4413      	add	r3, r2
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d012      	beq.n	800a57a <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=str[i];
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	441a      	add	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4619      	mov	r1, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	440b      	add	r3, r1
 800a564:	7812      	ldrb	r2, [r2, #0]
 800a566:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	3301      	adds	r3, #1
 800a56c:	617b      	str	r3, [r7, #20]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e7e2      	b.n	800a540 <_Z9SetBufStrPKciRiPhbh+0x54>
    }
  }
  for (; i<len; i++, index++) {
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	429a      	cmp	r2, r3
 800a580:	da10      	bge.n	800a5a4 <_Z9SetBufStrPKciRiPhbh+0xb8>
    buf[index]=fillChar;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	4413      	add	r3, r2
 800a58c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a590:	701a      	strb	r2, [r3, #0]
  for (; i<len; i++, index++) {
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	3301      	adds	r3, #1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	e7ea      	b.n	800a57a <_Z9SetBufStrPKciRiPhbh+0x8e>
  }
}
 800a5a4:	bf00      	nop
 800a5a6:	371c      	adds	r7, #28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bc80      	pop	{r7}
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <_Z8PrintBufP9N2kStreamhPKhb>:

//*****************************************************************************
void PrintBuf(N2kStream *port, unsigned char len, const unsigned char *pData, bool AddLF) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	460b      	mov	r3, r1
 800a5be:	72fb      	strb	r3, [r7, #11]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	72bb      	strb	r3, [r7, #10]
  if (port==0) return;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d021      	beq.n	800a60e <_Z8PrintBufP9N2kStreamhPKhb+0x5e>

  for(int i = 0; i<len; i++) {
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	da13      	bge.n	800a5fe <_Z8PrintBufP9N2kStreamhPKhb+0x4e>
    if (i>0) { port->print(F(",")); };
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dd03      	ble.n	800a5e4 <_Z8PrintBufP9N2kStreamhPKhb+0x34>
 800a5dc:	490e      	ldr	r1, [pc, #56]	; (800a618 <_Z8PrintBufP9N2kStreamhPKhb+0x68>)
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fb8f 	bl	800ad02 <_ZN9N2kStream5printEPKc>
    // Print bytes as hex.
    port->print(pData[i], 16);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2210      	movs	r2, #16
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 fba3 	bl	800ad3c <_ZN9N2kStream5printEih>
  for(int i = 0; i<len; i++) {
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	e7e7      	b.n	800a5ce <_Z8PrintBufP9N2kStreamhPKhb+0x1e>
  }

  if (AddLF) port->println(F(""));
 800a5fe:	7abb      	ldrb	r3, [r7, #10]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
 800a604:	4905      	ldr	r1, [pc, #20]	; (800a61c <_Z8PrintBufP9N2kStreamhPKhb+0x6c>)
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 fbd8 	bl	800adbc <_ZN9N2kStream7printlnEPKc>
 800a60c:	e000      	b.n	800a610 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
  if (port==0) return;
 800a60e:	bf00      	nop
}
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	080151dc 	.word	0x080151dc
 800a61c:	080151e0 	.word	0x080151e0

0800a620 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>:

//*****************************************************************************
void tN2kMsg::Print(N2kStream *port, bool NoData) const {
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	71fb      	strb	r3, [r7, #7]
  if (port==0 || !IsValid()) return;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x26>
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff fac5 	bl	8009bc4 <_ZNK7tN2kMsg7IsValidEv>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f083 0301 	eor.w	r3, r3, #1
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2a>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2c>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d15b      	bne.n	800a708 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xe8>
  port->print(N2kMillis()); port->print(F(" : "));
 800a650:	f000 fbe4 	bl	800ae1c <_Z9N2kMillisv>
 800a654:	4603      	mov	r3, r0
 800a656:	220a      	movs	r2, #10
 800a658:	4619      	mov	r1, r3
 800a65a:	68b8      	ldr	r0, [r7, #8]
 800a65c:	f000 fb6e 	bl	800ad3c <_ZN9N2kStream5printEih>
 800a660:	492b      	ldr	r1, [pc, #172]	; (800a710 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf0>)
 800a662:	68b8      	ldr	r0, [r7, #8]
 800a664:	f000 fb4d 	bl	800ad02 <_ZN9N2kStream5printEPKc>
  port->print(F("Pri:")); port->print(Priority);
 800a668:	492a      	ldr	r1, [pc, #168]	; (800a714 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf4>)
 800a66a:	68b8      	ldr	r0, [r7, #8]
 800a66c:	f000 fb49 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	791b      	ldrb	r3, [r3, #4]
 800a674:	220a      	movs	r2, #10
 800a676:	4619      	mov	r1, r3
 800a678:	68b8      	ldr	r0, [r7, #8]
 800a67a:	f000 fb5f 	bl	800ad3c <_ZN9N2kStream5printEih>
  port->print(F(" PGN:")); port->print(PGN);
 800a67e:	4926      	ldr	r1, [pc, #152]	; (800a718 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf8>)
 800a680:	68b8      	ldr	r0, [r7, #8]
 800a682:	f000 fb3e 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	220a      	movs	r2, #10
 800a68c:	4619      	mov	r1, r3
 800a68e:	68b8      	ldr	r0, [r7, #8]
 800a690:	f000 fb54 	bl	800ad3c <_ZN9N2kStream5printEih>
  port->print(F(" Source:")); port->print(Source);
 800a694:	4921      	ldr	r1, [pc, #132]	; (800a71c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xfc>)
 800a696:	68b8      	ldr	r0, [r7, #8]
 800a698:	f000 fb33 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	7b1b      	ldrb	r3, [r3, #12]
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68b8      	ldr	r0, [r7, #8]
 800a6a6:	f000 fb49 	bl	800ad3c <_ZN9N2kStream5printEih>
  port->print(F(" Dest:")); port->print(Destination);
 800a6aa:	491d      	ldr	r1, [pc, #116]	; (800a720 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x100>)
 800a6ac:	68b8      	ldr	r0, [r7, #8]
 800a6ae:	f000 fb28 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	7b5b      	ldrb	r3, [r3, #13]
 800a6b6:	220a      	movs	r2, #10
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68b8      	ldr	r0, [r7, #8]
 800a6bc:	f000 fb3e 	bl	800ad3c <_ZN9N2kStream5printEih>
  port->print(F(" Len:")); port->print(DataLen);
 800a6c0:	4918      	ldr	r1, [pc, #96]	; (800a724 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x104>)
 800a6c2:	68b8      	ldr	r0, [r7, #8]
 800a6c4:	f000 fb1d 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68b8      	ldr	r0, [r7, #8]
 800a6d2:	f000 fb33 	bl	800ad3c <_ZN9N2kStream5printEih>
  if (!NoData) {
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	f083 0301 	eor.w	r3, r3, #1
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xde>
    port->print(F(" Data:"));
 800a6e2:	4911      	ldr	r1, [pc, #68]	; (800a728 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x108>)
 800a6e4:	68b8      	ldr	r0, [r7, #8]
 800a6e6:	f000 fb0c 	bl	800ad02 <_ZN9N2kStream5printEPKc>
    PrintBuf(port,DataLen,Data);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	b2d9      	uxtb	r1, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f103 0214 	add.w	r2, r3, #20
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	68b8      	ldr	r0, [r7, #8]
 800a6fa:	f7ff ff59 	bl	800a5b0 <_Z8PrintBufP9N2kStreamhPKhb>
  }
  port->println(F(""));
 800a6fe:	490b      	ldr	r1, [pc, #44]	; (800a72c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x10c>)
 800a700:	68b8      	ldr	r0, [r7, #8]
 800a702:	f000 fb5b 	bl	800adbc <_ZN9N2kStream7printlnEPKc>
 800a706:	e000      	b.n	800a70a <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xea>
  if (port==0 || !IsValid()) return;
 800a708:	bf00      	nop
}
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	080151e4 	.word	0x080151e4
 800a714:	080151e8 	.word	0x080151e8
 800a718:	080151f0 	.word	0x080151f0
 800a71c:	080151f8 	.word	0x080151f8
 800a720:	08015204 	.word	0x08015204
 800a724:	0801520c 	.word	0x0801520c
 800a728:	08015214 	.word	0x08015214
 800a72c:	080151e0 	.word	0x080151e0

0800a730 <_Z19AddByteEscapedToBufhRhPhRi>:

//*****************************************************************************
void AddByteEscapedToBuf(unsigned char byteToAdd, uint8_t &idx, unsigned char *buf, int &byteSum)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	607a      	str	r2, [r7, #4]
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]
  buf[idx++]=byteToAdd;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	b2d1      	uxtb	r1, r2
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	7011      	strb	r1, [r2, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4413      	add	r3, r2
 800a752:	7bfa      	ldrb	r2, [r7, #15]
 800a754:	701a      	strb	r2, [r3, #0]
  byteSum+=byteToAdd;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	441a      	add	r2, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	601a      	str	r2, [r3, #0]

  if (byteToAdd == Escape) {
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	2b10      	cmp	r3, #16
 800a766:	d10a      	bne.n	800a77e <_Z19AddByteEscapedToBufhRhPhRi+0x4e>
    buf[idx++]=Escape;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	b2d1      	uxtb	r1, r2
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	7011      	strb	r1, [r2, #0]
 800a774:	461a      	mov	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4413      	add	r3, r2
 800a77a:	2210      	movs	r2, #16
 800a77c:	701a      	strb	r2, [r3, #0]
  }
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	bc80      	pop	{r7}
 800a786:	4770      	bx	lr

0800a788 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>:

//*****************************************************************************
// Actisense Format:
// <10><02><93><length (1)><priority (1)><PGN (3)><destination (1)><source (1)><time (4)><len (1)><data (len)><CRC (1)><10><03>
void tN2kMsg::SendInActisenseFormat(N2kStream *port) const {
 800a788:	b590      	push	{r4, r7, lr}
 800a78a:	b0ed      	sub	sp, #436	; 0x1b4
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a792:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a796:	6018      	str	r0, [r3, #0]
 800a798:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a79c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a7a0:	6019      	str	r1, [r3, #0]
  unsigned long _PGN=PGN;
 800a7a2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a7a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  unsigned long _MsgTime=MsgTime;
 800a7b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a7b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  uint8_t msgIdx=0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
  int byteSum = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  uint8_t CheckSum;
  unsigned char ActisenseMsgBuf[MaxActisenseMsgBuf];

  if (port==0 || !IsValid()) return;
 800a7d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a7d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00c      	beq.n	800a7f8 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x70>
 800a7de:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a7e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	f7ff f9ec 	bl	8009bc4 <_ZNK7tN2kMsg7IsValidEv>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f083 0301 	eor.w	r3, r3, #1
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x74>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e000      	b.n	800a7fe <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x76>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 815d 	bne.w	800aabe <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x336>
  // Serial.print("freeMemory()="); Serial.println(freeMemory());

  ActisenseMsgBuf[msgIdx++]=Escape;
 800a804:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800a810:	461a      	mov	r2, r3
 800a812:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a816:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800a81a:	2110      	movs	r1, #16
 800a81c:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++]=StartOfText;
 800a81e:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	b2d2      	uxtb	r2, r2
 800a826:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800a82a:	461a      	mov	r2, r3
 800a82c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a830:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800a834:	2102      	movs	r1, #2
 800a836:	5499      	strb	r1, [r3, r2]
  AddByteEscapedToBuf(MsgTypeN2k,msgIdx,ActisenseMsgBuf,byteSum);
 800a838:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a83c:	f107 020c 	add.w	r2, r7, #12
 800a840:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a844:	2093      	movs	r0, #147	; 0x93
 800a846:	f7ff ff73 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen+11,msgIdx,ActisenseMsgBuf,byteSum); //length does not include escaped chars
 800a84a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a84e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	330b      	adds	r3, #11
 800a85a:	b2d8      	uxtb	r0, r3
 800a85c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a860:	f107 020c 	add.w	r2, r7, #12
 800a864:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a868:	f7ff ff62 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Priority,msgIdx,ActisenseMsgBuf,byteSum);
 800a86c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a870:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	7918      	ldrb	r0, [r3, #4]
 800a878:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a87c:	f107 020c 	add.w	r2, r7, #12
 800a880:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a884:	f7ff ff54 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 800a888:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a88c:	b2d8      	uxtb	r0, r3
 800a88e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a892:	f107 020c 	add.w	r2, r7, #12
 800a896:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a89a:	f7ff ff49 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
 800a89e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a8a2:	0a1b      	lsrs	r3, r3, #8
 800a8a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 800a8a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a8ac:	b2d8      	uxtb	r0, r3
 800a8ae:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a8b2:	f107 020c 	add.w	r2, r7, #12
 800a8b6:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a8ba:	f7ff ff39 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
 800a8be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a8c2:	0a1b      	lsrs	r3, r3, #8
 800a8c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800a8c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a8cc:	b2d8      	uxtb	r0, r3
 800a8ce:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a8d2:	f107 020c 	add.w	r2, r7, #12
 800a8d6:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a8da:	f7ff ff29 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Destination,msgIdx,ActisenseMsgBuf,byteSum);
 800a8de:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a8e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	7b58      	ldrb	r0, [r3, #13]
 800a8ea:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a8ee:	f107 020c 	add.w	r2, r7, #12
 800a8f2:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a8f6:	f7ff ff1b 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Source,msgIdx,ActisenseMsgBuf,byteSum);
 800a8fa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a8fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	7b18      	ldrb	r0, [r3, #12]
 800a906:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a90a:	f107 020c 	add.w	r2, r7, #12
 800a90e:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a912:	f7ff ff0d 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  // Time?
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800a916:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a91a:	b2d8      	uxtb	r0, r3
 800a91c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a920:	f107 020c 	add.w	r2, r7, #12
 800a924:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a928:	f7ff ff02 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
 800a92c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a930:	0a1b      	lsrs	r3, r3, #8
 800a932:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800a936:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a93a:	b2d8      	uxtb	r0, r3
 800a93c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a940:	f107 020c 	add.w	r2, r7, #12
 800a944:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a948:	f7ff fef2 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
 800a94c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a950:	0a1b      	lsrs	r3, r3, #8
 800a952:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800a956:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a95a:	b2d8      	uxtb	r0, r3
 800a95c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a960:	f107 020c 	add.w	r2, r7, #12
 800a964:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a968:	f7ff fee2 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
 800a96c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a970:	0a1b      	lsrs	r3, r3, #8
 800a972:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800a976:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a97a:	b2d8      	uxtb	r0, r3
 800a97c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a980:	f107 020c 	add.w	r2, r7, #12
 800a984:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a988:	f7ff fed2 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen,msgIdx,ActisenseMsgBuf,byteSum);
 800a98c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a990:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	b2d8      	uxtb	r0, r3
 800a99a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a99e:	f107 020c 	add.w	r2, r7, #12
 800a9a2:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a9a6:	f7ff fec3 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>


  for (int i = 0; i < DataLen; i++) AddByteEscapedToBuf(Data[i],msgIdx,ActisenseMsgBuf,byteSum);
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800a9b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a9b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	da17      	bge.n	800a9f4 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x26c>
 800a9c4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a9c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a9d2:	4413      	add	r3, r2
 800a9d4:	3314      	adds	r3, #20
 800a9d6:	7818      	ldrb	r0, [r3, #0]
 800a9d8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a9dc:	f107 020c 	add.w	r2, r7, #12
 800a9e0:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800a9e4:	f7ff fea4 	bl	800a730 <_Z19AddByteEscapedToBufhRhPhRi>
 800a9e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800a9f2:	e7dd      	b.n	800a9b0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x228>
  byteSum %= 256;
 800a9f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a9f8:	425a      	negs	r2, r3
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	b2d2      	uxtb	r2, r2
 800a9fe:	bf58      	it	pl
 800aa00:	4253      	negpl	r3, r2
 800aa02:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

  CheckSum = (uint8_t)((byteSum == 0) ? 0 : (256 - byteSum));
 800aa06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x292>
 800aa0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	425b      	negs	r3, r3
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	e000      	b.n	800aa1c <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x294>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
  ActisenseMsgBuf[msgIdx++]=CheckSum;
 800aa20:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa32:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aa36:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 800aa3a:	545a      	strb	r2, [r3, r1]
  if (CheckSum==Escape) ActisenseMsgBuf[msgIdx++]=CheckSum;
 800aa3c:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800aa40:	2b10      	cmp	r3, #16
 800aa42:	d10d      	bne.n	800aa60 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x2d8>
 800aa44:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800aa50:	4619      	mov	r1, r3
 800aa52:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa56:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aa5a:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 800aa5e:	545a      	strb	r2, [r3, r1]

  ActisenseMsgBuf[msgIdx++] = Escape;
 800aa60:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	b2d2      	uxtb	r2, r2
 800aa68:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa72:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aa76:	2110      	movs	r1, #16
 800aa78:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++] = EndOfText;
 800aa7a:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	b2d2      	uxtb	r2, r2
 800aa82:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800aa86:	461a      	mov	r2, r3
 800aa88:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa8c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aa90:	2103      	movs	r1, #3
 800aa92:	5499      	strb	r1, [r3, r2]

//  if ( port->availableForWrite()>msgIdx ) {  // 16.7.2017 did not work yet
    port->write(ActisenseMsgBuf,msgIdx);
 800aa94:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800aa98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	f107 010c 	add.w	r1, r7, #12
 800aaae:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800aab2:	f5a2 70d8 	sub.w	r0, r2, #432	; 0x1b0
 800aab6:	4622      	mov	r2, r4
 800aab8:	6800      	ldr	r0, [r0, #0]
 800aaba:	4798      	blx	r3
 800aabc:	e000      	b.n	800aac0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x338>
  if (port==0 || !IsValid()) return;
 800aabe:	bf00      	nop
//  }
    //Serial.print("Actisense data:");
    //PrintBuf(msgIdx,ActisenseMsgBuf);
    //Serial.print("\r\n");
}
 800aac0:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd90      	pop	{r4, r7, pc}

0800aac8 <_Z6SetBufIlEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	4413      	add	r3, r2
 800aae0:	f107 010c 	add.w	r1, r7, #12
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f00a fa08 	bl	8014efc <memcpy>
  index += len;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	601a      	str	r2, [r3, #0]
}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <_Z6SetBufImEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f107 010c 	add.w	r1, r7, #12
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f00a f9ea 	bl	8014efc <memcpy>
  index += len;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	4413      	add	r3, r2
 800ab32:	461a      	mov	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	601a      	str	r2, [r3, #0]
}
 800ab38:	bf00      	nop
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <_Z6GetBufItET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  T v{0};
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	82fb      	strh	r3, [r7, #22]
  memcpy(&v, &buf[index], len);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1899      	adds	r1, r3, r2
 800ab5a:	f107 0316 	add.w	r3, r7, #22
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f00a f9cb 	bl	8014efc <memcpy>
  index += len;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	461a      	mov	r2, r3
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	601a      	str	r2, [r3, #0]
  return v;
 800ab76:	8afb      	ldrh	r3, [r7, #22]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <_Z6GetBufImET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  T v{0};
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]
  memcpy(&v, &buf[index], len);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	1899      	adds	r1, r3, r2
 800ab9a:	f107 0314 	add.w	r3, r7, #20
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f00a f9ab 	bl	8014efc <memcpy>
  index += len;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	461a      	mov	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	601a      	str	r2, [r3, #0]
  return v;
 800abb6:	697b      	ldr	r3, [r7, #20]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_Z6GetBufIyET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  T v{0};
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	f04f 0300 	mov.w	r3, #0
 800abd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  memcpy(&v, &buf[index], len);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	461a      	mov	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	1899      	adds	r1, r3, r2
 800abe2:	f107 0310 	add.w	r3, r7, #16
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	4618      	mov	r0, r3
 800abea:	f00a f987 	bl	8014efc <memcpy>
  index += len;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	461a      	mov	r2, r3
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	601a      	str	r2, [r3, #0]
  return v;
 800abfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800ac02:	4610      	mov	r0, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <_Z6SetBufIsEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	4603      	mov	r3, r0
 800ac1a:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	461a      	mov	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	4413      	add	r3, r2
 800ac26:	f107 010e 	add.w	r1, r7, #14
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f00a f965 	bl	8014efc <memcpy>
  index += len;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <_Z6SetBufItEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
 800ac56:	4603      	mov	r3, r0
 800ac58:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	4413      	add	r3, r2
 800ac64:	f107 010e 	add.w	r1, r7, #14
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f00a f946 	bl	8014efc <memcpy>
  index += len;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	4413      	add	r3, r2
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	601a      	str	r2, [r3, #0]
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <_Z6SetBufIhEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]
  memcpy(&buf[index], &v, len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	4413      	add	r3, r2
 800aca2:	f107 010f 	add.w	r1, r7, #15
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f00a f927 	bl	8014efc <memcpy>
  index += len;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4413      	add	r3, r2
 800acb8:	461a      	mov	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
}
 800acbe:	bf00      	nop
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <_Z6SetBufIyEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	4413      	add	r3, r2
 800acde:	f107 0108 	add.w	r1, r7, #8
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f00a f909 	bl	8014efc <memcpy>
  index += len;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	461a      	mov	r2, r3
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	601a      	str	r2, [r3, #0]
}
 800acfa:	bf00      	nop
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <_ZN9N2kStream5printEPKc>:
#include <string.h>

#ifdef ARDUINO
// Arduino uses its own implementation.
#else
size_t N2kStream::print(const char *str) {
 800ad02:	b590      	push	{r4, r7, lr}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
   if(str == 0)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <_ZN9N2kStream5printEPKc+0x14>
      return 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	e00d      	b.n	800ad32 <_ZN9N2kStream5printEPKc+0x30>

   return write(reinterpret_cast<const uint8_t*>(str), strlen(str));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	681c      	ldr	r4, [r3, #0]
 800ad1e:	6838      	ldr	r0, [r7, #0]
 800ad20:	f7f5 fa8c 	bl	800023c <strlen>
 800ad24:	4603      	mov	r3, r0
 800ad26:	461a      	mov	r2, r3
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	47a0      	blx	r4
 800ad2e:	4603      	mov	r3, r0
 800ad30:	bf00      	nop
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd90      	pop	{r4, r7, pc}
	...

0800ad3c <_ZN9N2kStream5printEih>:
   return print(str) + print("\r\n");
}
#endif


size_t N2kStream::print(int val, uint8_t radix) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08e      	sub	sp, #56	; 0x38
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	71fb      	strb	r3, [r7, #7]

   if(val == 0) {
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d109      	bne.n	800ad64 <_ZN9N2kStream5printEih+0x28>
      // 0 is always 0 regardless of radix.
      return write(reinterpret_cast<const uint8_t*>("0"), 1);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3308      	adds	r3, #8
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	4916      	ldr	r1, [pc, #88]	; (800adb4 <_ZN9N2kStream5printEih+0x78>)
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	4798      	blx	r3
 800ad60:	4603      	mov	r3, r0
 800ad62:	e023      	b.n	800adac <_ZN9N2kStream5printEih+0x70>
   }

   // Enough for binary representation.
   char buf[8 * sizeof(val) + 1];
   char *ptr = &buf[sizeof(buf) - 1];
 800ad64:	f107 0310 	add.w	r3, r7, #16
 800ad68:	3320      	adds	r3, #32
 800ad6a:	637b      	str	r3, [r7, #52]	; 0x34
   *ptr = '\0';
 800ad6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]

   do {
      *--ptr="0123456789abcdef"[val % radix];
 800ad72:	79fa      	ldrb	r2, [r7, #7]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad7a:	fb01 f202 	mul.w	r2, r1, r2
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad82:	3a01      	subs	r2, #1
 800ad84:	637a      	str	r2, [r7, #52]	; 0x34
 800ad86:	4a0c      	ldr	r2, [pc, #48]	; (800adb8 <_ZN9N2kStream5printEih+0x7c>)
 800ad88:	5cd2      	ldrb	r2, [r2, r3]
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	701a      	strb	r2, [r3, #0]
      val /= radix;
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	fb92 f3f3 	sdiv	r3, r2, r3
 800ad96:	60bb      	str	r3, [r7, #8]
   } while(val != 0);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d000      	beq.n	800ada0 <_ZN9N2kStream5printEih+0x64>
   do {
 800ad9e:	e7e8      	b.n	800ad72 <_ZN9N2kStream5printEih+0x36>

   return print(ptr);
 800ada0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff ffad 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800ada8:	4603      	mov	r3, r0
 800adaa:	bf00      	nop
}
 800adac:	4618      	mov	r0, r3
 800adae:	3738      	adds	r7, #56	; 0x38
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	0801521c 	.word	0x0801521c
 800adb8:	08015220 	.word	0x08015220

0800adbc <_ZN9N2kStream7printlnEPKc>:

size_t N2kStream::println(const char *str) {
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
   return print(str) + print("\r\n");
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff ff9a 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800adce:	4604      	mov	r4, r0
 800add0:	4904      	ldr	r1, [pc, #16]	; (800ade4 <_ZN9N2kStream7printlnEPKc+0x28>)
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff ff95 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800add8:	4603      	mov	r3, r0
 800adda:	4423      	add	r3, r4
}
 800addc:	4618      	mov	r0, r3
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd90      	pop	{r4, r7, pc}
 800ade4:	08015234 	.word	0x08015234

0800ade8 <_ZN9N2kStream7printlnEih>:

size_t N2kStream::println(int val, uint8_t radix) {
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	71fb      	strb	r3, [r7, #7]
   return print(val, radix) + print("\r\n");
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	461a      	mov	r2, r3
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff ff9d 	bl	800ad3c <_ZN9N2kStream5printEih>
 800ae02:	4604      	mov	r4, r0
 800ae04:	4904      	ldr	r1, [pc, #16]	; (800ae18 <_ZN9N2kStream7printlnEih+0x30>)
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff ff7b 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4423      	add	r3, r4
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd90      	pop	{r4, r7, pc}
 800ae18:	08015234 	.word	0x08015234

0800ae1c <_Z9N2kMillisv>:
  #else
    extern "C" {
    // Current uptime in milliseconds. Must be implemented by application.
    extern uint32_t millis();
    }
    uint32_t N2kMillis() { return millis(); }
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	f007 f8da 	bl	8011fd8 <millis>
 800ae24:	4603      	mov	r3, r0
 800ae26:	4618      	mov	r0, r3
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <_Z11N2kMillis64v>:
  #endif

  uint64_t N2kMillis64() {
 800ae2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
    static uint32_t RollCount=0;
    static uint32_t LastRead=0;
    uint32_t Now=millis();
 800ae34:	f007 f8d0 	bl	8011fd8 <millis>
 800ae38:	6078      	str	r0, [r7, #4]
    if ( LastRead>Now ) RollCount++;
 800ae3a:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <_Z11N2kMillis64v+0x60>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d204      	bcs.n	800ae4e <_Z11N2kMillis64v+0x22>
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <_Z11N2kMillis64v+0x64>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	4a11      	ldr	r2, [pc, #68]	; (800ae90 <_Z11N2kMillis64v+0x64>)
 800ae4c:	6013      	str	r3, [r2, #0]
    LastRead=Now;
 800ae4e:	4a0f      	ldr	r2, [pc, #60]	; (800ae8c <_Z11N2kMillis64v+0x60>)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6013      	str	r3, [r2, #0]
    return ((uint64_t)RollCount)<<32 | Now;
 800ae54:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <_Z11N2kMillis64v+0x64>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	469a      	mov	sl, r3
 800ae5c:	4693      	mov	fp, r2
 800ae5e:	f04f 0200 	mov.w	r2, #0
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	4653      	mov	r3, sl
 800ae68:	2200      	movs	r2, #0
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	4605      	mov	r5, r0
 800ae72:	ea42 0804 	orr.w	r8, r2, r4
 800ae76:	ea43 0905 	orr.w	r9, r3, r5
 800ae7a:	4642      	mov	r2, r8
 800ae7c:	464b      	mov	r3, r9
  }
 800ae7e:	4610      	mov	r0, r2
 800ae80:	4619      	mov	r1, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000364 	.word	0x20000364
 800ae90:	20000360 	.word	0x20000360

0800ae94 <_ZN13tN2kScheduler3NowEv>:
#endif

#if !defined(N2kUse64bitSchedulerTime)
// *****************************************************************************
tN2kSchedulerTime tN2kScheduler::Now() {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  return N2kMillis();
 800ae9c:	f7ff ffbe 	bl	800ae1c <_Z9N2kMillisv>
 800aea0:	4603      	mov	r3, r0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	70fb      	strb	r3, [r7, #3]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	78fa      	ldrb	r2, [r7, #3]
 800aeba:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bc80      	pop	{r7}
 800aec6:	4770      	bx	lr

0800aec8 <_ZNK7tN2kMsg11ForceSourceEh>:
  void ForceSource(unsigned char _Source) const { Source=_Source; }
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	78fa      	ldrb	r2, [r7, #3]
 800aed8:	731a      	strb	r2, [r3, #12]
 800aeda:	bf00      	nop
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	bc80      	pop	{r7}
 800aee2:	4770      	bx	lr

0800aee4 <_ZNK7tN2kMsg16CheckDestinationEv>:
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; } // We can send to specified destination only for PGN:s low byte=0
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <_ZNK7tN2kMsg16CheckDestinationEv+0x18>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	22ff      	movs	r2, #255	; 0xff
 800aefa:	735a      	strb	r2, [r3, #13]
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr

0800af06 <_ZN10tN2kCANMsgC1Ev>:
#include <N2kMsg.h>

class tN2kCANMsg
{
public:
  tN2kCANMsg()
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af02      	add	r7, sp, #8
 800af0c:	6078      	str	r0, [r7, #4]
    : Ready(false),FreeMsg(true),SystemMessage(false), KnownMessage(false) 
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      ,TPRequireCTS(false), TPMaxPackets(0) 
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	2300      	movs	r3, #0
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	2206      	movs	r2, #6
 800af18:	210f      	movs	r1, #15
 800af1a:	f7fe fe9d 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
#endif
    {
	  N2kMsg.Clear();
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe ff08 	bl	8009d66 <_ZN7tN2kMsg5ClearEv>
  }
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <_ZN10tN2kCANMsg11FreeMessageEv>:
#endif
  unsigned char LastFrame; // Last received frame sequence number on fast packets or multi packet
  unsigned char CopiedLen;
  
public:
  void FreeMessage() { 
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
    FreeMsg=true; Ready=false; SystemMessage=false; 
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    TPMaxPackets=0; TPRequireCTS=false; 
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
#endif
    N2kMsg.Clear(); N2kMsg.Source=0; 
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	f7fe fee7 	bl	8009d66 <_ZN7tN2kMsg5ClearEv>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	731a      	strb	r2, [r3, #12]
  }  
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <_Z15N2kIsTimeBeforemm>:
inline bool N2kIsTimeBefore(uint32_t T1, uint32_t T2) { return (T2-T1)<LONG_MAX; }
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	6039      	str	r1, [r7, #0]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800afba:	4293      	cmp	r3, r2
 800afbc:	bf34      	ite	cc
 800afbe:	2301      	movcc	r3, #1
 800afc0:	2300      	movcs	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>:
  inline bool IsTime() { return N2kMillis64()>NextTime; }
  inline uint64_t Remaining() { return IsTime()?0:NextTime-N2kMillis64(); }

  void SetPeriod(uint32_t _Period) { Period=_Period; if ( Period<1 ) Period=1; UpdateNextTime(); }
  void SetOffset(uint32_t _Offset) { Offset=_Offset; UpdateNextTime(); }
  void SetPeriodAndOffset(uint32_t _Period, uint32_t _Offset) { 
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
    Period=_Period; 
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	60da      	str	r2, [r3, #12]
    Offset=_Offset;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	609a      	str	r2, [r3, #8]
    if ( Period==0 ) Disable(); 
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm+0x26>
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7f6 f97b 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
    UpdateNextTime(); 
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7f6 f99b 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  }
 800affa:	bf00      	nop
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <_ZNK17tN2kSyncScheduler9GetOffsetEv>:
  uint32_t GetOffset() const { return Offset; }
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr

0800b018 <_ZNK17tN2kSyncScheduler9GetPeriodEv>:
  uint32_t GetPeriod() const { return Period; }
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	bc80      	pop	{r7}
 800b02c:	4770      	bx	lr
	...

0800b030 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>:
      uint64_t n=(now-(Offset+SyncOffset))/Period;
      NextTime=SyncOffset+Offset+(n+1)*Period;
    }
  }

  static void SetSyncOffset() { SyncOffset=N2kMillis64(); }
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
 800b034:	f7ff fefa 	bl	800ae2c <_Z11N2kMillis64v>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4902      	ldr	r1, [pc, #8]	; (800b048 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv+0x18>)
 800b03e:	e9c1 2300 	strd	r2, r3, [r1]
 800b042:	bf00      	nop
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20000358 	.word	0x20000358

0800b04c <_ZN13tN2kSchedulerC1Em>:
  tN2kSchedulerTime NextTime;
  #if !defined(N2kUse64bitSchedulerTime)
  tN2kSchedulerTime Now();
  #endif
public:
  tN2kScheduler(tN2kSchedulerTime _NextTime=N2kSchedulerDisabled) : NextTime(_NextTime) { }
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr

0800b068 <_ZN13tN2kScheduler7DisableEv>:
  void Disable() { 
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
    NextTime=N2kSchedulerDisabled; 
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b076:	601a      	str	r2, [r3, #0]
  }
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr

0800b082 <_ZNK13tN2kScheduler10IsDisabledEv>:
  bool IsDisabled() const { return NextTime==N2kSchedulerDisabled; }
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b092:	bf0c      	ite	eq
 800b094:	2301      	moveq	r3, #1
 800b096:	2300      	movne	r3, #0
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	4618      	mov	r0, r3
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bc80      	pop	{r7}
 800b0a2:	4770      	bx	lr

0800b0a4 <_ZNK13tN2kScheduler9IsEnabledEv>:
  bool IsEnabled() const { return NextTime!=N2kSchedulerDisabled; }
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0b4:	bf14      	ite	ne
 800b0b6:	2301      	movne	r3, #1
 800b0b8:	2300      	moveq	r3, #0
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bc80      	pop	{r7}
 800b0c4:	4770      	bx	lr

0800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>:
  bool IsTime() const {
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
    #if defined(N2kUse64bitSchedulerTime)
    return N2kMillis64()>NextTime;
    #else
    return !IsDisabled() && ( N2kMillis()-NextTime<LONG_MAX );
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff ffd7 	bl	800b082 <_ZNK13tN2kScheduler10IsDisabledEv>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	f083 0301 	eor.w	r3, r3, #1
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 800b0e0:	f7ff fe9c 	bl	800ae1c <_Z9N2kMillisv>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d201      	bcs.n	800b0f8 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e000      	b.n	800b0fa <_ZNK13tN2kScheduler6IsTimeEv+0x34>
 800b0f8:	2300      	movs	r3, #0
    #endif
  }
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <_ZN13tN2kScheduler7FromNowEm>:
  void FromNow(uint32_t _Add) {
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	6039      	str	r1, [r7, #0]
    #if defined(N2kUse64bitSchedulerTime)
    NextTime=N2kMillis64()+_Add;
    #else
    NextTime=Now()+_Add;
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff fec1 	bl	800ae94 <_ZN13tN2kScheduler3NowEv>
 800b112:	4602      	mov	r2, r0
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	441a      	add	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	601a      	str	r2, [r3, #0]
    if ( NextTime==N2kSchedulerDisabled ) NextTime=0; // Roll over
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b124:	d102      	bne.n	800b12c <_ZN13tN2kScheduler7FromNowEm+0x2a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
    #endif
  }
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>:
    void SetUniqueNumber(uint32_t _UniqueNumber) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0xffe00000) | (_UniqueNumber&0x1fffff); }
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	0d5b      	lsrs	r3, r3, #21
 800b144:	055b      	lsls	r3, r3, #21
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	f3c2 0214 	ubfx	r2, r2, #0, #21
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	bc80      	pop	{r7}
 800b15a:	4770      	bx	lr

0800b15c <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>:
    void SetManufacturerCode(uint16_t _ManufacturerCode) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0x1fffff) | (((unsigned long)(_ManufacturerCode&0x7ff))<<21); }
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	807b      	strh	r3, [r7, #2]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f3c3 0214 	ubfx	r2, r3, #0, #21
 800b170:	887b      	ldrh	r3, [r7, #2]
 800b172:	055b      	lsls	r3, r3, #21
 800b174:	431a      	orrs	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	bc80      	pop	{r7}
 800b182:	4770      	bx	lr

0800b184 <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>:
    void SetDeviceInstance(unsigned char _DeviceInstance) { DeviceInformation.DeviceInstance=_DeviceInstance; }
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	711a      	strb	r2, [r3, #4]
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bc80      	pop	{r7}
 800b19e:	4770      	bx	lr

0800b1a0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>:
    unsigned char GetDeviceInstance() const { return DeviceInformation.DeviceInstance; }
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	791b      	ldrb	r3, [r3, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bc80      	pop	{r7}
 800b1b4:	4770      	bx	lr

0800b1b6 <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>:
    void SetDeviceFunction(unsigned char _DeviceFunction) { DeviceInformation.DeviceFunction=_DeviceFunction; }
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	715a      	strb	r2, [r3, #5]
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr

0800b1d2 <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>:
    void SetDeviceClass(unsigned char _DeviceClass) { DeviceInformation.DeviceClass=((_DeviceClass&0x7f)<<1); }
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	70fb      	strb	r3, [r7, #3]
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	719a      	strb	r2, [r3, #6]
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr

0800b1f2 <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>:
    void SetIndustryGroup(unsigned char _IndustryGroup) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0x0f) | (_IndustryGroup<<4) | 0x80; }
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	70fb      	strb	r3, [r7, #3]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	79db      	ldrb	r3, [r3, #7]
 800b202:	b25b      	sxtb	r3, r3
 800b204:	f003 030f 	and.w	r3, r3, #15
 800b208:	b25a      	sxtb	r2, r3
 800b20a:	78fb      	ldrb	r3, [r7, #3]
 800b20c:	011b      	lsls	r3, r3, #4
 800b20e:	b25b      	sxtb	r3, r3
 800b210:	4313      	orrs	r3, r2
 800b212:	b25b      	sxtb	r3, r3
 800b214:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b218:	b25b      	sxtb	r3, r3
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	71da      	strb	r2, [r3, #7]
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	bc80      	pop	{r7}
 800b228:	4770      	bx	lr

0800b22a <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>:
    void SetSystemInstance(unsigned char _SystemInstance) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0xf0) | (_SystemInstance&0x0f); }
 800b22a:	b480      	push	{r7}
 800b22c:	b083      	sub	sp, #12
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	70fb      	strb	r3, [r7, #3]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	79db      	ldrb	r3, [r3, #7]
 800b23a:	f023 030f 	bic.w	r3, r3, #15
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	f003 030f 	and.w	r3, r3, #15
 800b246:	b2db      	uxtb	r3, r3
 800b248:	4313      	orrs	r3, r2
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	71da      	strb	r2, [r3, #7]
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	bc80      	pop	{r7}
 800b258:	4770      	bx	lr

0800b25a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>:
      inline unsigned long GetPGN() const { return PGN; }
 800b25a:	b480      	push	{r7}
 800b25c:	b083      	sub	sp, #12
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr

0800b270 <_ZN9tNMEA200015tInternalDeviceC1Ev>:
    tInternalDevice() {
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af02      	add	r7, sp, #8
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fc f901 	bl	8007482 <_ZN9tNMEA200018tDeviceInformationC1Ev>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3314      	adds	r3, #20
 800b284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fedf 	bl	800b04c <_ZN13tN2kSchedulerC1Em>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3318      	adds	r3, #24
 800b292:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff fed8 	bl	800b04c <_ZN13tN2kSchedulerC1Em>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	331c      	adds	r3, #28
 800b2a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fed1 	bl	800b04c <_ZN13tN2kSchedulerC1Em>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3320      	adds	r3, #32
 800b2ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff feca 	bl	800b04c <_ZN13tN2kSchedulerC1Em>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	2206      	movs	r2, #6
 800b2c6:	210f      	movs	r1, #15
 800b2c8:	f7fe fcc6 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800b2d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff feb8 	bl	800b04c <_ZN13tN2kSchedulerC1Em>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	f7f5 ffe2 	bl	80012b0 <_ZN17tN2kSyncSchedulerC1Ebmm>
      N2kSource=0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      HasPendingInformation=false;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      ProductInformation=0; LocalProductInformation=0; ManufacturerSerialCode=0;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	609a      	str	r2, [r3, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	60da      	str	r2, [r3, #12]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	611a      	str	r2, [r3, #16]
      AddressClaimEndSource=N2kMaxCanBusAddress; //GetNextAddressFromBeginning=true;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	22fb      	movs	r2, #251	; 0xfb
 800b312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      TransmitMessages=0; ReceiveMessages=0;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	625a      	str	r2, [r3, #36]	; 0x24
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	629a      	str	r2, [r3, #40]	; 0x28
      PGNSequenceCounters=0; MaxPGNSequenceCounters=0;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	62da      	str	r2, [r3, #44]	; 0x2c
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	631a      	str	r2, [r3, #48]	; 0x30
      NextDTSequence=0;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      HeartbeatSequence=0;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    }
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>:
    void SetPendingIsoAddressClaim(unsigned long FromNow=2) { PendingIsoAddressClaim.FromNow(FromNow); HasPendingInformation=true; }
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3314      	adds	r3, #20
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff fed2 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>:
    bool QueryPendingIsoAddressClaim() { return PendingIsoAddressClaim.IsTime(); }
 800b36e:	b580      	push	{r7, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3314      	adds	r3, #20
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fea3 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 800b380:	4603      	mov	r3, r0
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>:
    void ClearPendingIsoAddressClaim() { PendingIsoAddressClaim.Disable(); UpdateHasPendingInformation(); }
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3314      	adds	r3, #20
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff fe66 	bl	800b068 <_ZN13tN2kScheduler7DisableEv>
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f895 	bl	800b4cc <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800b3a2:	bf00      	nop
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>:
    void SetPendingProductInformation() { PendingProductInformation.FromNow(187+N2kSource*8); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f103 0218 	add.w	r2, r3, #24
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	33bb      	adds	r3, #187	; 0xbb
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7ff fe9c 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>:
    void ClearPendingProductInformation() { PendingProductInformation.Disable(); UpdateHasPendingInformation(); }
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3318      	adds	r3, #24
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7ff fe3e 	bl	800b068 <_ZN13tN2kScheduler7DisableEv>
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f86d 	bl	800b4cc <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>:
    bool QueryPendingProductInformation() { return PendingProductInformation.IsTime(); }
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	3318      	adds	r3, #24
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff fe5d 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 800b40c:	4603      	mov	r3, r0
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>:
    void SetPendingConfigurationInformation() { PendingConfigurationInformation.FromNow(187+N2kSource*10); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 800b416:	b580      	push	{r7, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f103 021c 	add.w	r2, r3, #28
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b42a:	4619      	mov	r1, r3
 800b42c:	460b      	mov	r3, r1
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	440b      	add	r3, r1
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	33bb      	adds	r3, #187	; 0xbb
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7ff fe62 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>:
    void ClearPendingConfigurationInformation() { PendingConfigurationInformation.Disable(); UpdateHasPendingInformation(); }
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	331c      	adds	r3, #28
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fe04 	bl	800b068 <_ZN13tN2kScheduler7DisableEv>
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f833 	bl	800b4cc <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>:
    bool QueryPendingConfigurationInformation() { return PendingConfigurationInformation.IsTime(); }
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	331c      	adds	r3, #28
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7ff fe23 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 800b480:	4603      	mov	r3, r0
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>:
    void UpdateAddressClaimEndSource() {
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
      AddressClaimEndSource=N2kSource;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d008      	beq.n	800b4ba <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x30>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800b4b8:	e003      	b.n	800b4c2 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x38>
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	22fb      	movs	r2, #251	; 0xfb
 800b4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800b4c2:	bf00      	nop
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bc80      	pop	{r7}
 800b4ca:	4770      	bx	lr

0800b4cc <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>:
    void UpdateHasPendingInformation() {
 800b4cc:	b590      	push	{r4, r7, lr}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3314      	adds	r3, #20
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff fde3 	bl	800b0a4 <_ZNK13tN2kScheduler9IsEnabledEv>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	461c      	mov	r4, r3
                            | PendingProductInformation.IsEnabled()
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3318      	adds	r3, #24
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff fddc 	bl	800b0a4 <_ZNK13tN2kScheduler9IsEnabledEv>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	4323      	orrs	r3, r4
 800b4f0:	b2dc      	uxtb	r4, r3
                            | PendingConfigurationInformation.IsEnabled()
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	331c      	adds	r3, #28
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff fdd4 	bl	800b0a4 <_ZNK13tN2kScheduler9IsEnabledEv>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	4323      	orrs	r3, r4
 800b500:	b2dc      	uxtb	r4, r3
                            | NextDTSendTime.IsEnabled()
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff fdcb 	bl	800b0a4 <_ZNK13tN2kScheduler9IsEnabledEv>
 800b50e:	4603      	mov	r3, r0
 800b510:	4323      	orrs	r3, r4
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	bf14      	ite	ne
 800b518:	2301      	movne	r3, #1
 800b51a:	2300      	moveq	r3, #0
 800b51c:	b2da      	uxtb	r2, r3
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}

0800b52c <_ZN9tNMEA200013IsInitializedEv>:
    bool IsInitialized() { return (N2kCANMsgBuf!=0); }
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bf14      	ite	ne
 800b53c:	2301      	movne	r3, #1
 800b53e:	2300      	moveq	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	bc80      	pop	{r7}
 800b54a:	4770      	bx	lr

0800b54c <_ZNK9tNMEA200014ForwardEnabledEv>:
    bool ForwardEnabled() const { return ((ForwardMode&FwdModeBit_EnableForward)>0 && (N2kMode!=N2km_SendOnly)); }
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	795b      	ldrb	r3, [r3, #5]
 800b564:	2b03      	cmp	r3, #3
 800b566:	d001      	beq.n	800b56c <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 800b568:	2301      	movs	r3, #1
 800b56a:	e000      	b.n	800b56e <_ZNK9tNMEA200014ForwardEnabledEv+0x22>
 800b56c:	2300      	movs	r3, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	370c      	adds	r7, #12
 800b572:	46bd      	mov	sp, r7
 800b574:	bc80      	pop	{r7}
 800b576:	4770      	bx	lr

0800b578 <_ZNK9tNMEA200021ForwardSystemMessagesEv>:
    bool ForwardSystemMessages() const { return ((ForwardMode&FwdModeBit_SystemMessages)>0); }
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f003 0302 	and.w	r3, r3, #2
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bf14      	ite	ne
 800b58c:	2301      	movne	r3, #1
 800b58e:	2300      	moveq	r3, #0
 800b590:	b2db      	uxtb	r3, r3
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	bc80      	pop	{r7}
 800b59a:	4770      	bx	lr

0800b59c <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>:
    bool ForwardOnlyKnownMessages() const { return ((ForwardMode&FwdModeBit_OnlyKnownMessages)>0); }
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bf14      	ite	ne
 800b5b0:	2301      	movne	r3, #1
 800b5b2:	2300      	moveq	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bc80      	pop	{r7}
 800b5be:	4770      	bx	lr

0800b5c0 <_ZNK9tNMEA200018ForwardOwnMessagesEv>:
    bool ForwardOwnMessages() const { return ((ForwardMode&FwdModeBit_OwnMessages)>0); }
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f003 0308 	and.w	r3, r3, #8
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bf14      	ite	ne
 800b5d4:	2301      	movne	r3, #1
 800b5d6:	2300      	moveq	r3, #0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bc80      	pop	{r7}
 800b5e2:	4770      	bx	lr

0800b5e4 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>:
    bool HandleOnlyKnownMessages() const { return ((ForwardMode&HandleModeBit_OnlyKnownMessages)>0); }
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bf14      	ite	ne
 800b5f8:	2301      	movne	r3, #1
 800b5fa:	2300      	moveq	r3, #0
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	bc80      	pop	{r7}
 800b606:	4770      	bx	lr

0800b608 <_ZN9tNMEA200012IsActiveNodeEv>:
    bool IsActiveNode() { return (N2kMode==N2km_NodeOnly || N2kMode==N2km_ListenAndNode); }
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	795b      	ldrb	r3, [r3, #5]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d003      	beq.n	800b620 <_ZN9tNMEA200012IsActiveNodeEv+0x18>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	795b      	ldrb	r3, [r3, #5]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d101      	bne.n	800b624 <_ZN9tNMEA200012IsActiveNodeEv+0x1c>
 800b620:	2301      	movs	r3, #1
 800b622:	e000      	b.n	800b626 <_ZN9tNMEA200012IsActiveNodeEv+0x1e>
 800b624:	2300      	movs	r3, #0
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr

0800b630 <_ZNK9tNMEA200013IsValidDeviceEi>:
    bool IsValidDevice(int iDev) const { return (iDev>=0 && iDev<DeviceCount ); }
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	db06      	blt.n	800b64e <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	da01      	bge.n	800b64e <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e000      	b.n	800b650 <_ZNK9tNMEA200013IsValidDeviceEi+0x20>
 800b64e:	2300      	movs	r3, #0
 800b650:	4618      	mov	r0, r3
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	bc80      	pop	{r7}
 800b658:	4770      	bx	lr

0800b65a <_ZNK9tNMEA200013IsReadyToSendEv>:
    bool IsReadyToSend() const {
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7e1b      	ldrb	r3, [r3, #24]
               (N2kMode!=N2km_SendOnly) &&
 800b666:	2b03      	cmp	r3, #3
 800b668:	d003      	beq.n	800b672 <_ZNK9tNMEA200013IsReadyToSendEv+0x18>
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	791b      	ldrb	r3, [r3, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00d      	beq.n	800b68e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenOnly) &&
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	795b      	ldrb	r3, [r3, #5]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 800b676:	2b00      	cmp	r3, #0
 800b678:	d009      	beq.n	800b68e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_SendOnly) &&
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_ListenOnly) &&
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d005      	beq.n	800b68e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenAndSend)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_SendOnly) &&
 800b686:	2b04      	cmp	r3, #4
 800b688:	d001      	beq.n	800b68e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <_ZNK9tNMEA200013IsReadyToSendEv+0x36>
 800b68e:	2300      	movs	r3, #0
    }
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	bc80      	pop	{r7}
 800b698:	4770      	bx	lr

0800b69a <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt>:
    virtual void SetN2kCANSendFrameBufSize(const uint16_t _MaxCANSendFrames) { if ( !IsInitialized() ) { MaxCANSendFrames=_MaxCANSendFrames; }; }
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	807b      	strh	r3, [r7, #2]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff ff40 	bl	800b52c <_ZN9tNMEA200013IsInitializedEv>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f083 0301 	eor.w	r3, r3, #1
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt+0x26>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	887a      	ldrh	r2, [r7, #2]
 800b6bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt>:
    virtual void SetN2kCANReceiveFrameBufSize(const uint16_t _MaxCANReceiveFrames) { if ( !IsInitialized() ) MaxCANReceiveFrames=_MaxCANReceiveFrames; }
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	807b      	strh	r3, [r7, #2]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff ff29 	bl	800b52c <_ZN9tNMEA200013IsInitializedEv>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f083 0301 	eor.w	r3, r3, #1
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt+0x26>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	887a      	ldrh	r2, [r7, #2]
 800b6ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800b6ee:	bf00      	nop
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <_ZN9tNMEA200013EnableForwardEb>:
    void EnableForward(bool v=true) {
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 800b702:	78fb      	ldrb	r3, [r7, #3]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d006      	beq.n	800b716 <_ZN9tNMEA200013EnableForwardEb+0x20>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f043 0201 	orr.w	r2, r3, #1
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	609a      	str	r2, [r3, #8]
    }
 800b714:	e005      	b.n	800b722 <_ZN9tNMEA200013EnableForwardEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f023 0201 	bic.w	r2, r3, #1
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	609a      	str	r2, [r3, #8]
    }
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	bc80      	pop	{r7}
 800b72a:	4770      	bx	lr

0800b72c <_ZN9tNMEA200024SetForwardSystemMessagesEb>:
    void SetForwardSystemMessages(bool v=true) {
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	460b      	mov	r3, r1
 800b736:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 800b738:	78fb      	ldrb	r3, [r7, #3]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d006      	beq.n	800b74c <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x20>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f043 0202 	orr.w	r2, r3, #2
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	609a      	str	r2, [r3, #8]
      }
 800b74a:	e005      	b.n	800b758 <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f023 0202 	bic.w	r2, r3, #2
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	609a      	str	r2, [r3, #8]
      }
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bc80      	pop	{r7}
 800b760:	4770      	bx	lr

0800b762 <_ZN9tNMEA200021SetForwardOwnMessagesEb>:
    void SetForwardOwnMessages(bool v=true) {
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	460b      	mov	r3, r1
 800b76c:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d006      	beq.n	800b782 <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x20>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f043 0208 	orr.w	r2, r3, #8
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	609a      	str	r2, [r3, #8]
      }
 800b780:	e005      	b.n	800b78e <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f023 0208 	bic.w	r2, r3, #8
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	609a      	str	r2, [r3, #8]
      }
 800b78e:	bf00      	nop
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	bc80      	pop	{r7}
 800b796:	4770      	bx	lr

0800b798 <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>:
};

//*****************************************************************************
// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN);
inline void SetN2kPGNISOAcknowledgement(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	607b      	str	r3, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	72fb      	strb	r3, [r7, #11]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	72bb      	strb	r3, [r7, #10]
  SetN2kPGN59392(N2kMsg,Control,GroupFunction,PGN);
 800b7aa:	7aba      	ldrb	r2, [r7, #10]
 800b7ac:	7af9      	ldrb	r1, [r7, #11]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f005 fe40 	bl	8011436 <_Z14SetN2kPGN59392R7tN2kMsghhm>
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <_Z21SetN2kISOAddressClaimR7tN2kMsgy>:
                   ) {
  SetN2kPGN60928(N2kMsg, UniqueNumber, ManufacturerCode, DeviceFunction, DeviceClass,
                 DeviceInstance, SystemInstance, IndustryGroup);
}

inline void SetN2kISOAddressClaim(tN2kMsg &N2kMsg, uint64_t Name) {
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	e9c7 2300 	strd	r2, r3, [r7]
  SetN2kPGN60928(N2kMsg, Name);
 800b7ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f005 fe61 	bl	8011496 <_Z14SetN2kPGN60928R7tN2kMsgy>
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>:
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1);

inline void SetN2kProductInformation(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	; 0x28
 800b7e0:	af06      	add	r7, sp, #24
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
  SetN2kPGN126996(N2kMsg,N2kVersion,ProductCode,
 800b7ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7ee:	9304      	str	r3, [sp, #16]
 800b7f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	9302      	str	r3, [sp, #8]
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f005 fe5b 	bl	80114c4 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>
                  ModelID,SwCode,ModelVersion,ModelSerialCode,
                  CertificationLevel,LoadEquivalency);
}
 800b80e:	bf00      	nop
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>:

inline void SetN2kConfigurationInformation(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1=0,
                     const char *InstallationDescription2=0,
                     bool UsePgm=false) {
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af02      	add	r7, sp, #8
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	603b      	str	r3, [r7, #0]
  SetN2kPGN126998(N2kMsg,
 800b824:	7e3b      	ldrb	r3, [r7, #24]
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f005 feba 	bl	80115a8 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>
                  ManufacturerInformation,
                  InstallationDescription1,
                  InstallationDescription2,
                  UsePgm);
}
 800b834:	bf00      	nop
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>:
  SetN2kPGN59904(N2kMsg,Destination,RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN);

inline bool ParseN2kPGNISORequest(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  return ParseN2kPGN59904(N2kMsg, RequestedPGN);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f005 ff55 	bl	80116f8 <_Z16ParseN2kPGN59904RK7tN2kMsgRm>
 800b84e:	4603      	mov	r3, r0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_Z12SetHeartbeatR7tN2kMsgmh>:
//  - sequence counter - set to 0xff for testing purposes
//			/ Output:
//  - N2kMsg NMEA2000 message ready to be send.
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter);

inline void SetHeartbeat(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
	SetN2kPGN126993(N2kMsg, timeInterval_ms, sequenceCounter);
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	461a      	mov	r2, r3
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f005 ff71 	bl	8011754 <_Z15SetN2kPGN126993R7tN2kMsgmh>
}
 800b872:	bf00      	nop
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN60928(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,60928L) {}
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f44f 426e 	mov.w	r2, #60928	; 0xee00
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fb fe40 	bl	8007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800b894:	4a03      	ldr	r2, [pc, #12]	; (800b8a4 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000+0x28>)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	0801551c 	.word	0x0801551c

0800b8a8 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126464(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126464L) {}
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f44f 32f7 	mov.w	r2, #126464	; 0x1ee00
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fb fe2a 	bl	8007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800b8c0:	4a03      	ldr	r2, [pc, #12]	; (800b8d0 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000+0x28>)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	080154f0 	.word	0x080154f0

0800b8d4 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126993(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126993L) {}
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a06      	ldr	r2, [pc, #24]	; (800b8fc <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x28>)
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fb fe15 	bl	8007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800b8ea:	4a05      	ldr	r2, [pc, #20]	; (800b900 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x2c>)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0001f011 	.word	0x0001f011
 800b900:	080154c4 	.word	0x080154c4

0800b904 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126996(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126996L) {}
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a06      	ldr	r2, [pc, #24]	; (800b92c <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x28>)
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	4618      	mov	r0, r3
 800b916:	f7fb fdfd 	bl	8007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800b91a:	4a05      	ldr	r2, [pc, #20]	; (800b930 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x2c>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	0001f014 	.word	0x0001f014
 800b930:	08015498 	.word	0x08015498

0800b934 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126998(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126998L) {}
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a06      	ldr	r2, [pc, #24]	; (800b95c <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x28>)
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	4618      	mov	r0, r3
 800b946:	f7fb fde5 	bl	8007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800b94a:	4a05      	ldr	r2, [pc, #20]	; (800b960 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x2c>)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	0001f016 	.word	0x0001f016
 800b960:	0801546c 	.word	0x0801546c

0800b964 <_Z26IsSingleFrameSystemMessagem>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
                                       126208L, /* NMEA Request/Command/Acknowledge group function */
#endif
                                       0};

bool IsSingleFrameSystemMessage(unsigned long PGN) {
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800b972:	d01b      	beq.n	800b9ac <_Z26IsSingleFrameSystemMessagem+0x48>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800b97a:	d819      	bhi.n	800b9b0 <_Z26IsSingleFrameSystemMessagem+0x4c>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800b982:	d013      	beq.n	800b9ac <_Z26IsSingleFrameSystemMessagem+0x48>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800b98a:	d811      	bhi.n	800b9b0 <_Z26IsSingleFrameSystemMessagem+0x4c>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800b992:	d00b      	beq.n	800b9ac <_Z26IsSingleFrameSystemMessagem+0x48>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800b99a:	d809      	bhi.n	800b9b0 <_Z26IsSingleFrameSystemMessagem+0x4c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 800b9a2:	d003      	beq.n	800b9ac <_Z26IsSingleFrameSystemMessagem+0x48>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 800b9aa:	d101      	bne.n	800b9b0 <_Z26IsSingleFrameSystemMessagem+0x4c>
                                      case  59392L: /* ISO Acknowledgement */
                                      case   TP_DT: /* Multi packet data transfer, TP.DT */
                                      case   TP_CM: /* Multi packet connection management, TP.CM */
                                      case  59904L: /* ISO Request */
                                      case  60928L: /* ISO Address Claim */
                                      return true;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e000      	b.n	800b9b2 <_Z26IsSingleFrameSystemMessagem+0x4e>
                                  }
                                  return false;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bc80      	pop	{r7}
 800b9ba:	4770      	bx	lr

0800b9bc <_Z25IsFastPacketSystemMessagem>:

bool IsFastPacketSystemMessage(unsigned long PGN) {
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d003      	beq.n	800b9d6 <_Z25IsFastPacketSystemMessagem+0x1a>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a05      	ldr	r2, [pc, #20]	; (800b9e8 <_Z25IsFastPacketSystemMessagem+0x2c>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d101      	bne.n	800b9da <_Z25IsFastPacketSystemMessagem+0x1e>
                                      case  65240L: /* Commanded Address*/
                                      case 126208L: /* NMEA Request/Command/Acknowledge group function */
                                      return true;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <_Z25IsFastPacketSystemMessagem+0x20>
                                  }
                                  return false;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bc80      	pop	{r7}
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	0001ed00 	.word	0x0001ed00

0800b9ec <_Z27IsDefaultSingleFrameMessagem>:

bool IsDefaultSingleFrameMessage(unsigned long PGN) {
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a57      	ldr	r2, [pc, #348]	; (800bb54 <_Z27IsDefaultSingleFrameMessagem+0x168>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	f000 80a2 	beq.w	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a54      	ldr	r2, [pc, #336]	; (800bb54 <_Z27IsDefaultSingleFrameMessagem+0x168>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	f200 809f 	bhi.w	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a53      	ldr	r2, [pc, #332]	; (800bb58 <_Z27IsDefaultSingleFrameMessagem+0x16c>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	f200 809a 	bhi.w	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a51      	ldr	r2, [pc, #324]	; (800bb5c <_Z27IsDefaultSingleFrameMessagem+0x170>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d234      	bcs.n	800ba84 <_Z27IsDefaultSingleFrameMessagem+0x98>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a50      	ldr	r2, [pc, #320]	; (800bb60 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	f000 808f 	beq.w	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a4e      	ldr	r2, [pc, #312]	; (800bb60 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	f200 808c 	bhi.w	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a4c      	ldr	r2, [pc, #304]	; (800bb64 <_Z27IsDefaultSingleFrameMessagem+0x178>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	f200 8087 	bhi.w	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f5b3 3ffc 	cmp.w	r3, #129024	; 0x1f800
 800ba3e:	f200 8080 	bhi.w	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a48      	ldr	r2, [pc, #288]	; (800bb68 <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d07b      	beq.n	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a46      	ldr	r2, [pc, #280]	; (800bb68 <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d879      	bhi.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a45      	ldr	r2, [pc, #276]	; (800bb6c <_Z27IsDefaultSingleFrameMessagem+0x180>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d073      	beq.n	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a43      	ldr	r2, [pc, #268]	; (800bb6c <_Z27IsDefaultSingleFrameMessagem+0x180>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d871      	bhi.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a42      	ldr	r2, [pc, #264]	; (800bb70 <_Z27IsDefaultSingleFrameMessagem+0x184>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d86d      	bhi.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 800ba70:	d21a      	bcs.n	800baa8 <_Z27IsDefaultSingleFrameMessagem+0xbc>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a3f      	ldr	r2, [pc, #252]	; (800bb74 <_Z27IsDefaultSingleFrameMessagem+0x188>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d85a      	bhi.n	800bb30 <_Z27IsDefaultSingleFrameMessagem+0x144>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a3e      	ldr	r2, [pc, #248]	; (800bb78 <_Z27IsDefaultSingleFrameMessagem+0x18c>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d25f      	bcs.n	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800ba82:	e060      	b.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 800ba8a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800ba8e:	2201      	movs	r2, #1
 800ba90:	409a      	lsls	r2, r3
 800ba92:	f240 53f1 	movw	r3, #1521	; 0x5f1
 800ba96:	4013      	ands	r3, r2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	bf14      	ite	ne
 800ba9c:	2301      	movne	r3, #1
 800ba9e:	2300      	moveq	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d14d      	bne.n	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800baa6:	e04e      	b.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f5a3 33f9 	sub.w	r3, r3, #127488	; 0x1f200
 800baae:	2b14      	cmp	r3, #20
 800bab0:	d849      	bhi.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bab2:	a201      	add	r2, pc, #4	; (adr r2, 800bab8 <_Z27IsDefaultSingleFrameMessagem+0xcc>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bb43 	.word	0x0800bb43
 800babc:	0800bb47 	.word	0x0800bb47
 800bac0:	0800bb47 	.word	0x0800bb47
 800bac4:	0800bb47 	.word	0x0800bb47
 800bac8:	0800bb47 	.word	0x0800bb47
 800bacc:	0800bb43 	.word	0x0800bb43
 800bad0:	0800bb47 	.word	0x0800bb47
 800bad4:	0800bb47 	.word	0x0800bb47
 800bad8:	0800bb47 	.word	0x0800bb47
 800badc:	0800bb47 	.word	0x0800bb47
 800bae0:	0800bb47 	.word	0x0800bb47
 800bae4:	0800bb47 	.word	0x0800bb47
 800bae8:	0800bb47 	.word	0x0800bb47
 800baec:	0800bb43 	.word	0x0800bb43
 800baf0:	0800bb47 	.word	0x0800bb47
 800baf4:	0800bb47 	.word	0x0800bb47
 800baf8:	0800bb47 	.word	0x0800bb47
 800bafc:	0800bb43 	.word	0x0800bb43
 800bb00:	0800bb47 	.word	0x0800bb47
 800bb04:	0800bb47 	.word	0x0800bb47
 800bb08:	0800bb43 	.word	0x0800bb43
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 800bb12:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800bb16:	2201      	movs	r2, #1
 800bb18:	409a      	lsls	r2, r3
 800bb1a:	f241 0361 	movw	r3, #4193	; 0x1061
 800bb1e:	4013      	ands	r3, r2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bf14      	ite	ne
 800bb24:	2301      	movne	r3, #1
 800bb26:	2300      	moveq	r3, #0
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d109      	bne.n	800bb42 <_Z27IsDefaultSingleFrameMessagem+0x156>
 800bb2e:	e00a      	b.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a12      	ldr	r2, [pc, #72]	; (800bb7c <_Z27IsDefaultSingleFrameMessagem+0x190>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d806      	bhi.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a11      	ldr	r2, [pc, #68]	; (800bb80 <_Z27IsDefaultSingleFrameMessagem+0x194>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d2e5      	bcs.n	800bb0c <_Z27IsDefaultSingleFrameMessagem+0x120>
 800bb40:	e001      	b.n	800bb46 <_Z27IsDefaultSingleFrameMessagem+0x15a>
                                      case 130312L: // Temperature, pri=5, period=2000
                                      case 130313L: // Humidity, pri=5, period=2000
                                      case 130314L: // Pressure, pri=5, period=2000
                                      case 130316L: // Temperature extended range, pri=5, period=NA
                                      case 130576L: // Small Craft Status (Trim Tab position), pri=2, period=200
                                      return true;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e000      	b.n	800bb48 <_Z27IsDefaultSingleFrameMessagem+0x15c>
                                  }
                                  return false;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	0001fe10 	.word	0x0001fe10
 800bb58:	0001fd0c 	.word	0x0001fd0c
 800bb5c:	0001fd02 	.word	0x0001fd02
 800bb60:	0001f903 	.word	0x0001f903
 800bb64:	0001f802 	.word	0x0001f802
 800bb68:	0001f50b 	.word	0x0001f50b
 800bb6c:	0001f503 	.word	0x0001f503
 800bb70:	0001f214 	.word	0x0001f214
 800bb74:	0001f011 	.word	0x0001f011
 800bb78:	0001f010 	.word	0x0001f010
 800bb7c:	0001f119 	.word	0x0001f119
 800bb80:	0001f10d 	.word	0x0001f10d

0800bb84 <_Z28IsMandatoryFastPacketMessagem>:

bool IsMandatoryFastPacketMessage(unsigned long PGN) {
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a0b      	ldr	r2, [pc, #44]	; (800bbbc <_Z28IsMandatoryFastPacketMessagem+0x38>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d00b      	beq.n	800bbac <_Z28IsMandatoryFastPacketMessagem+0x28>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a09      	ldr	r2, [pc, #36]	; (800bbbc <_Z28IsMandatoryFastPacketMessagem+0x38>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d809      	bhi.n	800bbb0 <_Z28IsMandatoryFastPacketMessagem+0x2c>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 800bba2:	d003      	beq.n	800bbac <_Z28IsMandatoryFastPacketMessagem+0x28>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a06      	ldr	r2, [pc, #24]	; (800bbc0 <_Z28IsMandatoryFastPacketMessagem+0x3c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d101      	bne.n	800bbb0 <_Z28IsMandatoryFastPacketMessagem+0x2c>
                                      case 126464L: // PGN List (Transmit and Receive), pri=6, period=NA
                                      case 126996L: // Product information, pri=6, period=NA
                                      case 126998L: // Configuration information, pri=6, period=NA
                                      return true;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <_Z28IsMandatoryFastPacketMessagem+0x2e>
                                  }
                                  return false;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bc80      	pop	{r7}
 800bbba:	4770      	bx	lr
 800bbbc:	0001f016 	.word	0x0001f016
 800bbc0:	0001f014 	.word	0x0001f014

0800bbc4 <_Z26IsDefaultFastPacketMessagem>:

bool IsDefaultFastPacketMessage(unsigned long PGN) {
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a91      	ldr	r2, [pc, #580]	; (800be14 <_Z26IsDefaultFastPacketMessagem+0x250>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	f200 8119 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a8f      	ldr	r2, [pc, #572]	; (800be18 <_Z26IsDefaultFastPacketMessagem+0x254>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	f080 8112 	bcs.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a8e      	ldr	r2, [pc, #568]	; (800be1c <_Z26IsDefaultFastPacketMessagem+0x258>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	f000 810d 	beq.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a8b      	ldr	r2, [pc, #556]	; (800be1c <_Z26IsDefaultFastPacketMessagem+0x258>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	f200 810a 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a8a      	ldr	r2, [pc, #552]	; (800be20 <_Z26IsDefaultFastPacketMessagem+0x25c>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	f200 8105 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a88      	ldr	r2, [pc, #544]	; (800be24 <_Z26IsDefaultFastPacketMessagem+0x260>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	f080 80fe 	bcs.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a87      	ldr	r2, [pc, #540]	; (800be28 <_Z26IsDefaultFastPacketMessagem+0x264>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	f200 80fb 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a85      	ldr	r2, [pc, #532]	; (800be2c <_Z26IsDefaultFastPacketMessagem+0x268>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d261      	bcs.n	800bcde <_Z26IsDefaultFastPacketMessagem+0x11a>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a84      	ldr	r2, [pc, #528]	; (800be30 <_Z26IsDefaultFastPacketMessagem+0x26c>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	f200 80f2 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a83      	ldr	r2, [pc, #524]	; (800be34 <_Z26IsDefaultFastPacketMessagem+0x270>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	f080 80eb 	bcs.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a81      	ldr	r2, [pc, #516]	; (800be38 <_Z26IsDefaultFastPacketMessagem+0x274>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	f200 80e8 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a80      	ldr	r2, [pc, #512]	; (800be3c <_Z26IsDefaultFastPacketMessagem+0x278>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d25f      	bcs.n	800bd00 <_Z26IsDefaultFastPacketMessagem+0x13c>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a7f      	ldr	r2, [pc, #508]	; (800be40 <_Z26IsDefaultFastPacketMessagem+0x27c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	f200 80df 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a7d      	ldr	r2, [pc, #500]	; (800be44 <_Z26IsDefaultFastPacketMessagem+0x280>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	f080 80d8 	bcs.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a7c      	ldr	r2, [pc, #496]	; (800be48 <_Z26IsDefaultFastPacketMessagem+0x284>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	f200 80d5 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a7a      	ldr	r2, [pc, #488]	; (800be4c <_Z26IsDefaultFastPacketMessagem+0x288>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	f080 80ce 	bcs.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a79      	ldr	r2, [pc, #484]	; (800be50 <_Z26IsDefaultFastPacketMessagem+0x28c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	f200 80cb 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a77      	ldr	r2, [pc, #476]	; (800be54 <_Z26IsDefaultFastPacketMessagem+0x290>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d272      	bcs.n	800bd60 <_Z26IsDefaultFastPacketMessagem+0x19c>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a76      	ldr	r2, [pc, #472]	; (800be58 <_Z26IsDefaultFastPacketMessagem+0x294>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	f000 80c0 	beq.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a74      	ldr	r2, [pc, #464]	; (800be58 <_Z26IsDefaultFastPacketMessagem+0x294>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	f200 80bd 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a72      	ldr	r2, [pc, #456]	; (800be5c <_Z26IsDefaultFastPacketMessagem+0x298>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	f000 80b6 	beq.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a70      	ldr	r2, [pc, #448]	; (800be5c <_Z26IsDefaultFastPacketMessagem+0x298>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	f200 80b3 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a6e      	ldr	r2, [pc, #440]	; (800be60 <_Z26IsDefaultFastPacketMessagem+0x29c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	f200 80ae 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 800bcb2:	d865      	bhi.n	800bd80 <_Z26IsDefaultFastPacketMessagem+0x1bc>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a6b      	ldr	r2, [pc, #428]	; (800be64 <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	f000 80a3 	beq.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a68      	ldr	r2, [pc, #416]	; (800be64 <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	f200 80a0 	bhi.w	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a67      	ldr	r2, [pc, #412]	; (800be68 <_Z26IsDefaultFastPacketMessagem+0x2a4>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	f200 8095 	bhi.w	800bdfc <_Z26IsDefaultFastPacketMessagem+0x238>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a65      	ldr	r2, [pc, #404]	; (800be6c <_Z26IsDefaultFastPacketMessagem+0x2a8>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	f080 8094 	bcs.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bcdc:	e094      	b.n	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 800bce4:	3b04      	subs	r3, #4
 800bce6:	2201      	movs	r2, #1
 800bce8:	409a      	lsls	r2, r3
 800bcea:	4b61      	ldr	r3, [pc, #388]	; (800be70 <_Z26IsDefaultFastPacketMessagem+0x2ac>)
 800bcec:	4013      	ands	r3, r2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bf14      	ite	ne
 800bcf2:	2301      	movne	r3, #1
 800bcf4:	2300      	moveq	r3, #0
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f040 8083 	bne.w	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bcfe:	e083      	b.n	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f5a3 33fd 	sub.w	r3, r3, #129536	; 0x1fa00
 800bd06:	3b02      	subs	r3, #2
 800bd08:	2b12      	cmp	r3, #18
 800bd0a:	d87d      	bhi.n	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bd0c:	a201      	add	r2, pc, #4	; (adr r2, 800bd14 <_Z26IsDefaultFastPacketMessagem+0x150>)
 800bd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd12:	bf00      	nop
 800bd14:	0800be05 	.word	0x0800be05
 800bd18:	0800be09 	.word	0x0800be09
 800bd1c:	0800be05 	.word	0x0800be05
 800bd20:	0800be05 	.word	0x0800be05
 800bd24:	0800be05 	.word	0x0800be05
 800bd28:	0800be09 	.word	0x0800be09
 800bd2c:	0800be09 	.word	0x0800be09
 800bd30:	0800be05 	.word	0x0800be05
 800bd34:	0800be09 	.word	0x0800be09
 800bd38:	0800be05 	.word	0x0800be05
 800bd3c:	0800be09 	.word	0x0800be09
 800bd40:	0800be05 	.word	0x0800be05
 800bd44:	0800be09 	.word	0x0800be09
 800bd48:	0800be05 	.word	0x0800be05
 800bd4c:	0800be09 	.word	0x0800be09
 800bd50:	0800be09 	.word	0x0800be09
 800bd54:	0800be09 	.word	0x0800be09
 800bd58:	0800be09 	.word	0x0800be09
 800bd5c:	0800be05 	.word	0x0800be05
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 800bd66:	3b05      	subs	r3, #5
 800bd68:	2201      	movs	r2, #1
 800bd6a:	409a      	lsls	r2, r3
 800bd6c:	4b41      	ldr	r3, [pc, #260]	; (800be74 <_Z26IsDefaultFastPacketMessagem+0x2b0>)
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bf14      	ite	ne
 800bd74:	2301      	movne	r3, #1
 800bd76:	2300      	moveq	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d142      	bne.n	800be04 <_Z26IsDefaultFastPacketMessagem+0x240>
 800bd7e:	e043      	b.n	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f1a3 1301 	sub.w	r3, r3, #65537	; 0x10001
 800bd86:	f5a3 4372 	sub.w	r3, r3, #61952	; 0xf200
 800bd8a:	2b19      	cmp	r3, #25
 800bd8c:	d83c      	bhi.n	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
 800bd8e:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <_Z26IsDefaultFastPacketMessagem+0x1d0>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800be05 	.word	0x0800be05
 800bd98:	0800be09 	.word	0x0800be09
 800bd9c:	0800be09 	.word	0x0800be09
 800bda0:	0800be09 	.word	0x0800be09
 800bda4:	0800be09 	.word	0x0800be09
 800bda8:	0800be09 	.word	0x0800be09
 800bdac:	0800be09 	.word	0x0800be09
 800bdb0:	0800be05 	.word	0x0800be05
 800bdb4:	0800be05 	.word	0x0800be05
 800bdb8:	0800be05 	.word	0x0800be05
 800bdbc:	0800be09 	.word	0x0800be09
 800bdc0:	0800be09 	.word	0x0800be09
 800bdc4:	0800be09 	.word	0x0800be09
 800bdc8:	0800be09 	.word	0x0800be09
 800bdcc:	0800be05 	.word	0x0800be05
 800bdd0:	0800be05 	.word	0x0800be05
 800bdd4:	0800be09 	.word	0x0800be09
 800bdd8:	0800be05 	.word	0x0800be05
 800bddc:	0800be05 	.word	0x0800be05
 800bde0:	0800be09 	.word	0x0800be09
 800bde4:	0800be05 	.word	0x0800be05
 800bde8:	0800be05 	.word	0x0800be05
 800bdec:	0800be05 	.word	0x0800be05
 800bdf0:	0800be05 	.word	0x0800be05
 800bdf4:	0800be05 	.word	0x0800be05
 800bdf8:	0800be05 	.word	0x0800be05
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a1e      	ldr	r2, [pc, #120]	; (800be78 <_Z26IsDefaultFastPacketMessagem+0x2b4>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d101      	bne.n	800be08 <_Z26IsDefaultFastPacketMessagem+0x244>
                                      case 130323L: // Meteorological Station Data, pri=6, period=1000
                                      case 130324L: // Moored Buoy Station Data, pri=6, period=1000
                                      case 130567L: // Watermaker Input Setting and Status, pri=6, period=2500
                                      case 130577L: // Direction Data PGN, pri=3, period=1000
                                      case 130578L: // Vessel Speed Components, pri=2, period=250
                                      return true;
 800be04:	2301      	movs	r3, #1
 800be06:	e000      	b.n	800be0a <_Z26IsDefaultFastPacketMessagem+0x246>
                                  }
                                  return false;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	bc80      	pop	{r7}
 800be12:	4770      	bx	lr
 800be14:	0001fe12 	.word	0x0001fe12
 800be18:	0001fe11 	.word	0x0001fe11
 800be1c:	0001fe07 	.word	0x0001fe07
 800be20:	0001fd14 	.word	0x0001fd14
 800be24:	0001fd10 	.word	0x0001fd10
 800be28:	0001fc1a 	.word	0x0001fc1a
 800be2c:	0001fc04 	.word	0x0001fc04
 800be30:	0001fb15 	.word	0x0001fb15
 800be34:	0001fb00 	.word	0x0001fb00
 800be38:	0001fa14 	.word	0x0001fa14
 800be3c:	0001fa02 	.word	0x0001fa02
 800be40:	0001f916 	.word	0x0001f916
 800be44:	0001f915 	.word	0x0001f915
 800be48:	0001f905 	.word	0x0001f905
 800be4c:	0001f904 	.word	0x0001f904
 800be50:	0001f815 	.word	0x0001f815
 800be54:	0001f805 	.word	0x0001f805
 800be58:	0001f608 	.word	0x0001f608
 800be5c:	0001f513 	.word	0x0001f513
 800be60:	0001f21a 	.word	0x0001f21a
 800be64:	0001f105 	.word	0x0001f105
 800be68:	0001f00c 	.word	0x0001f00c
 800be6c:	0001f007 	.word	0x0001f007
 800be70:	007ff307 	.word	0x007ff307
 800be74:	00019e01 	.word	0x00019e01
 800be78:	0001f101 	.word	0x0001f101

0800be7c <_Z30IsProprietaryFastPacketMessagem>:

bool IsProprietaryFastPacketMessage(unsigned long PGN) {
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  return ( PGN==126720L ) || ( 130816L<=PGN && PGN<=131071L );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a09      	ldr	r2, [pc, #36]	; (800beac <_Z30IsProprietaryFastPacketMessagem+0x30>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d007      	beq.n	800be9c <_Z30IsProprietaryFastPacketMessagem+0x20>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a08      	ldr	r2, [pc, #32]	; (800beb0 <_Z30IsProprietaryFastPacketMessagem+0x34>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d905      	bls.n	800bea0 <_Z30IsProprietaryFastPacketMessagem+0x24>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be9a:	d201      	bcs.n	800bea0 <_Z30IsProprietaryFastPacketMessagem+0x24>
 800be9c:	2301      	movs	r3, #1
 800be9e:	e000      	b.n	800bea2 <_Z30IsProprietaryFastPacketMessagem+0x26>
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bc80      	pop	{r7}
 800beaa:	4770      	bx	lr
 800beac:	0001ef00 	.word	0x0001ef00
 800beb0:	0001feff 	.word	0x0001feff

0800beb4 <_ZN9tNMEA200020IsProprietaryMessageEm>:

bool tNMEA2000::IsProprietaryMessage(unsigned long PGN) {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  return IsProprietaryFastPacketMessage(PGN) || ( PGN==61184L ) || ( 65280L<=PGN && PGN<=65535L );
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff ffdd 	bl	800be7c <_Z30IsProprietaryFastPacketMessagem>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10b      	bne.n	800bee0 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f5b3 4f6f 	cmp.w	r3, #61184	; 0xef00
 800bece:	d007      	beq.n	800bee0 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800bed6:	d305      	bcc.n	800bee4 <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bede:	d201      	bcs.n	800bee4 <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e000      	b.n	800bee6 <_ZN9tNMEA200020IsProprietaryMessageEm+0x32>
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>:
  size_t i=0;
  for (; i<MaxLen; i++) buf[i]=0;
}

//*****************************************************************************
void tNMEA2000::SetCharBuf(const char *str, size_t MaxLen, char *buf) {
 800beee:	b480      	push	{r7}
 800bef0:	b087      	sub	sp, #28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d036      	beq.n	800bf6e <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d033      	beq.n	800bf6e <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
  if ( str==0 ) { buf[0]=0; return; }
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d103      	bne.n	800bf14 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x26>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	701a      	strb	r2, [r3, #0]
 800bf12:	e02d      	b.n	800bf70 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  size_t i=0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	617b      	str	r3, [r7, #20]
  for (; i<MaxLen-1 && str[i]!=0; i++) buf[i]=str[i];
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d211      	bcs.n	800bf46 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	4413      	add	r3, r2
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	441a      	add	r2, r3
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	440b      	add	r3, r1
 800bf3a:	7812      	ldrb	r2, [r2, #0]
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	3301      	adds	r3, #1
 800bf42:	617b      	str	r3, [r7, #20]
 800bf44:	e7e8      	b.n	800bf18 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d208      	bcs.n	800bf60 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x72>
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	4413      	add	r3, r2
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	617b      	str	r3, [r7, #20]
 800bf5e:	e7f2      	b.n	800bf46 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
  buf[MaxLen-1]=0; // Force null termination
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	4413      	add	r3, r2
 800bf68:	2200      	movs	r2, #0
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	e000      	b.n	800bf70 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800bf6e:	bf00      	nop
}
 800bf70:	371c      	adds	r7, #28
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bc80      	pop	{r7}
 800bf76:	4770      	bx	lr

0800bf78 <_ZN9tNMEA2000C1Ev>:
  ClearCharBuf(MaxLen,buf);
  if (str) SetCharBuf(str,MaxLen,buf);
}

//*****************************************************************************
tNMEA2000::tNMEA2000() {
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	4a41      	ldr	r2, [pc, #260]	; (800c088 <_ZN9tNMEA2000C1Ev+0x110>)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3314      	adds	r3, #20
 800bf8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff f85c 	bl	800b04c <_ZN13tN2kSchedulerC1Em>

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  pGroupFunctionHandlers=0;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	665a      	str	r2, [r3, #100]	; 0x64
#endif
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  InstallationDescriptionChanged=false;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
#endif
  ForwardStream=0;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	60da      	str	r2, [r3, #12]

  for (int i=0; i<N2kMessageGroups; i++) {SingleFrameMessages[i]=0; FastPacketMessages[i]=0;}
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	dc11      	bgt.n	800bfd6 <_ZN9tNMEA2000C1Ev+0x5e>
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	330c      	adds	r3, #12
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	605a      	str	r2, [r3, #4]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	330e      	adds	r3, #14
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	605a      	str	r2, [r3, #4]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e7ea      	b.n	800bfac <_ZN9tNMEA2000C1Ev+0x34>

  N2kCANMsgBuf=0;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	645a      	str	r2, [r3, #68]	; 0x44
  MaxN2kCANMsgs=0;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  MaxCANSendFrames=40;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2228      	movs	r2, #40	; 0x28
 800bfe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  MaxCANReceiveFrames=0; // Use driver default
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  CANSendFrameBuf=0;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	64da      	str	r2, [r3, #76]	; 0x4c

  OnOpen=0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	659a      	str	r2, [r3, #88]	; 0x58
  MsgHandler=0;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	65da      	str	r2, [r3, #92]	; 0x5c
  MsgHandlers=0;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	611a      	str	r2, [r3, #16]
  ISORqstHandler=0;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	661a      	str	r2, [r3, #96]	; 0x60

  OpenScheduler.FromNow(0);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3314      	adds	r3, #20
 800c016:	2100      	movs	r1, #0
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff f872 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
  OpenState=os_None;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	761a      	strb	r2, [r3, #24]
  AddressChanged=false;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	765a      	strb	r2, [r3, #25]
  DeviceInformationChanged=false;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	769a      	strb	r2, [r3, #26]
  dbMode=dm_None;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	711a      	strb	r2, [r3, #4]
  N2kMode=N2km_ListenOnly;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	715a      	strb	r2, [r3, #5]
  ForwardType=fwdt_Actisense;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	719a      	strb	r2, [r3, #6]
  ForwardMode=0;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	609a      	str	r2, [r3, #8]
  EnableForward();
 800c048:	2101      	movs	r1, #1
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fb53 	bl	800b6f6 <_ZN9tNMEA200013EnableForwardEb>
  SetForwardSystemMessages();
 800c050:	2101      	movs	r1, #1
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7ff fb6a 	bl	800b72c <_ZN9tNMEA200024SetForwardSystemMessagesEb>
  SetForwardOwnMessages();
 800c058:	2101      	movs	r1, #1
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7ff fb81 	bl	800b762 <_ZN9tNMEA200021SetForwardOwnMessagesEb>
  LocalConfigurationInformationData=0;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	625a      	str	r2, [r3, #36]	; 0x24
  SetProgmemConfigurationInformation(DefManufacturerInformation,
 800c066:	4b09      	ldr	r3, [pc, #36]	; (800c08c <_ZN9tNMEA2000C1Ev+0x114>)
 800c068:	4a09      	ldr	r2, [pc, #36]	; (800c090 <_ZN9tNMEA2000C1Ev+0x118>)
 800c06a:	490a      	ldr	r1, [pc, #40]	; (800c094 <_ZN9tNMEA2000C1Ev+0x11c>)
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f959 	bl	800c324 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
                                     DefInstallationDescription1,
                                     DefInstallationDescription2);
  Devices=0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	61da      	str	r2, [r3, #28]
  DeviceCount=1;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	621a      	str	r2, [r3, #32]
}
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4618      	mov	r0, r3
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	08015670 	.word	0x08015670
 800c08c:	08015664 	.word	0x08015664
 800c090:	08015660 	.word	0x08015660
 800c094:	08015624 	.word	0x08015624

0800c098 <_ZN9tNMEA200011InitDevicesEv>:
  // Note that we can set this only before any initialization. Limit count to 10.
  if ( Devices==0 && _DeviceCount>=1 && _DeviceCount<10 ) DeviceCount=_DeviceCount;
}

//*****************************************************************************
void tNMEA2000::InitDevices() {
 800c098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c09a:	b089      	sub	sp, #36	; 0x24
 800c09c:	af04      	add	r7, sp, #16
 800c09e:	6078      	str	r0, [r7, #4]
  if ( Devices==0 ) {
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d164      	bne.n	800c172 <_ZN9tNMEA200011InitDevicesEv+0xda>
    N2kDbgln("Init devices");
    Devices=new tInternalDevice[DeviceCount];
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	461c      	mov	r4, r3
 800c0ae:	4b33      	ldr	r3, [pc, #204]	; (800c17c <_ZN9tNMEA200011InitDevicesEv+0xe4>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d804      	bhi.n	800c0be <_ZN9tNMEA200011InitDevicesEv+0x26>
 800c0b4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800c0b8:	fb04 f303 	mul.w	r3, r4, r3
 800c0bc:	e001      	b.n	800c0c2 <_ZN9tNMEA200011InitDevicesEv+0x2a>
 800c0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f008 fdb7 	bl	8014c36 <_Znaj>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	461e      	mov	r6, r3
 800c0cc:	4635      	mov	r5, r6
 800c0ce:	1e63      	subs	r3, r4, #1
 800c0d0:	461c      	mov	r4, r3
 800c0d2:	2c00      	cmp	r4, #0
 800c0d4:	db06      	blt.n	800c0e4 <_ZN9tNMEA200011InitDevicesEv+0x4c>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f7ff f8ca 	bl	800b270 <_ZN9tNMEA200015tInternalDeviceC1Ev>
 800c0dc:	f505 75ac 	add.w	r5, r5, #344	; 0x158
 800c0e0:	3c01      	subs	r4, #1
 800c0e2:	e7f6      	b.n	800c0d2 <_ZN9tNMEA200011InitDevicesEv+0x3a>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	61de      	str	r6, [r3, #28]
    MaxCANSendFrames*=DeviceCount; // We need bigger buffer for sending all information
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	6a12      	ldr	r2, [r2, #32]
 800c0f2:	b292      	uxth	r2, r2
 800c0f4:	fb02 f303 	mul.w	r3, r2, r3
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
//    for (int i=0; i<DeviceCount; i++) Devices[i].tDevice();
    // We set default device information here.
    Devices[0].LocalProductInformation=0;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	2200      	movs	r2, #0
 800c106:	60da      	str	r2, [r3, #12]
    Devices[0].ProductInformation=&DefProductInformation;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	4a1c      	ldr	r2, [pc, #112]	; (800c180 <_ZN9tNMEA200011InitDevicesEv+0xe8>)
 800c10e:	609a      	str	r2, [r3, #8]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 800c110:	2300      	movs	r3, #0
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a1b      	ldr	r3, [r3, #32]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	da29      	bge.n	800c172 <_ZN9tNMEA200011InitDevicesEv+0xda>
      SetDeviceInformation(1+i, // 21 bit resolution, max 2097151. Each device from same manufacturer should have unique number.
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3301      	adds	r3, #1
 800c122:	4619      	mov	r1, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	9302      	str	r3, [sp, #8]
 800c128:	2304      	movs	r3, #4
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	2319      	movs	r3, #25
 800c134:	2282      	movs	r2, #130	; 0x82
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fd19 	bl	800cb6e <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                           25, // Inter/Intranetwork Device. See codes on http://www.nmea.org/Assets/20120726%20nmea%202000%20class%20&%20function%20codes%20v%202.00.pdf
                           2046,  // Maximum 2046. See the list of codes on http://www.nmea.org/Assets/20121020%20nmea%202000%20registration%20list.pdf
                           4,  // Marine
                           i
                          );
      if ( i>0 ) {
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	dd13      	ble.n	800c16a <_ZN9tNMEA200011InitDevicesEv+0xd2>
        Devices[i].LocalProductInformation=0;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	69da      	ldr	r2, [r3, #28]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c14c:	fb01 f303 	mul.w	r3, r1, r3
 800c150:	4413      	add	r3, r2
 800c152:	2200      	movs	r2, #0
 800c154:	60da      	str	r2, [r3, #12]
        Devices[i].ProductInformation=0;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	69da      	ldr	r2, [r3, #28]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c160:	fb01 f303 	mul.w	r3, r1, r3
 800c164:	4413      	add	r3, r2
 800c166:	2200      	movs	r2, #0
 800c168:	609a      	str	r2, [r3, #8]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3301      	adds	r3, #1
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e7d0      	b.n	800c114 <_ZN9tNMEA200011InitDevicesEv+0x7c>
      }
    }
  }
}
 800c172:	bf00      	nop
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c17a:	bf00      	nop
 800c17c:	005f417d 	.word	0x005f417d
 800c180:	08015598 	.word	0x08015598

0800c184 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>:

//*****************************************************************************
void tNMEA2000::SetProductInformation(const tProductInformation *_ProductInformation, int iDev) {
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f7ff fa4c 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c198:	4603      	mov	r3, r0
 800c19a:	f083 0301 	eor.w	r3, r3, #1
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d13f      	bne.n	800c224 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa0>
  InitDevices();
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f7ff ff77 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].ProductInformation=_ProductInformation;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	69da      	ldr	r2, [r3, #28]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c1b4:	fb01 f303 	mul.w	r3, r1, r3
 800c1b8:	4413      	add	r3, r2
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	609a      	str	r2, [r3, #8]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=Devices[iDev].LocalProductInformation;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	69da      	ldr	r2, [r3, #28]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c1c8:	fb01 f303 	mul.w	r3, r1, r3
 800c1cc:	4413      	add	r3, r2
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d111      	bne.n	800c1f8 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0x74>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	69da      	ldr	r2, [r3, #28]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c1de:	fb01 f303 	mul.w	r3, r1, r3
 800c1e2:	441a      	add	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	69d9      	ldr	r1, [r3, #28]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800c1ee:	fb00 f303 	mul.w	r3, r0, r3
 800c1f2:	440b      	add	r3, r1
 800c1f4:	68d2      	ldr	r2, [r2, #12]
 800c1f6:	609a      	str	r2, [r3, #8]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=&DefProductInformation;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	69da      	ldr	r2, [r3, #28]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c202:	fb01 f303 	mul.w	r3, r1, r3
 800c206:	4413      	add	r3, r2
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10b      	bne.n	800c226 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	69da      	ldr	r2, [r3, #28]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c218:	fb01 f303 	mul.w	r3, r1, r3
 800c21c:	4413      	add	r3, r2
 800c21e:	4a03      	ldr	r2, [pc, #12]	; (800c22c <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa8>)
 800c220:	609a      	str	r2, [r3, #8]
 800c222:	e000      	b.n	800c226 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
  if ( !IsValidDevice(iDev) ) return;
 800c224:	bf00      	nop
}
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	08015598 	.word	0x08015598

0800c230 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>:
}

//*****************************************************************************
void tNMEA2000::SetConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 800c230:	b580      	push	{r7, lr}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x20>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	4618      	mov	r0, r3
 800c24c:	f008 fe4e 	bl	8014eec <free>
  LocalConfigurationInformationData=0;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	625a      	str	r2, [r3, #36]	; 0x24

  size_t ManInfoLen=(ManufacturerInformation?strlen(ManufacturerInformation)+1:0);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d005      	beq.n	800c268 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x38>
 800c25c:	68b8      	ldr	r0, [r7, #8]
 800c25e:	f7f3 ffed 	bl	800023c <strlen>
 800c262:	4603      	mov	r3, r0
 800c264:	3301      	adds	r3, #1
 800c266:	e000      	b.n	800c26a <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x3a>
 800c268:	2300      	movs	r3, #0
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  size_t InstDesc1Len=Max_N2kConfigurationInfoField_len;
 800c26c:	2347      	movs	r3, #71	; 0x47
 800c26e:	623b      	str	r3, [r7, #32]
  size_t InstDesc2Len=Max_N2kConfigurationInfoField_len;
 800c270:	2347      	movs	r3, #71	; 0x47
 800c272:	61fb      	str	r3, [r7, #28]
#else
  size_t InstDesc1Len=(InstallationDescription1?strlen(InstallationDescription1)+1:0);
  size_t InstDesc2Len=(InstallationDescription2?strlen(InstallationDescription2)+1:0);
#endif

  if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	2b47      	cmp	r3, #71	; 0x47
 800c278:	d901      	bls.n	800c27e <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x4e>
 800c27a:	2347      	movs	r3, #71	; 0x47
 800c27c:	627b      	str	r3, [r7, #36]	; 0x24
  if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	2b47      	cmp	r3, #71	; 0x47
 800c282:	d901      	bls.n	800c288 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x58>
 800c284:	2347      	movs	r3, #71	; 0x47
 800c286:	623b      	str	r3, [r7, #32]
  if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	2b47      	cmp	r3, #71	; 0x47
 800c28c:	d901      	bls.n	800c292 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x62>
 800c28e:	2347      	movs	r3, #71	; 0x47
 800c290:	61fb      	str	r3, [r7, #28]

  size_t TotalSize=ManInfoLen+InstDesc1Len+InstDesc2Len;
 800c292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	4413      	add	r3, r2
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	61bb      	str	r3, [r7, #24]
  void *mem=(TotalSize>0?malloc(TotalSize):0);
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x7e>
 800c2a4:	69b8      	ldr	r0, [r7, #24]
 800c2a6:	f008 fe19 	bl	8014edc <malloc>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	e000      	b.n	800c2b0 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x80>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	617b      	str	r3, [r7, #20]

  LocalConfigurationInformationData=(char*)mem;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	625a      	str	r2, [r3, #36]	; 0x24
  char *Info=LocalConfigurationInformationData;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription1,InstDesc1Len,Info);
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	6a39      	ldr	r1, [r7, #32]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff fe13 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa2>
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	e000      	b.n	800c2d4 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa4>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  Info+=InstDesc1Len;
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	4413      	add	r3, r2
 800c2de:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription2,InstDesc2Len,Info);
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	69f9      	ldr	r1, [r7, #28]
 800c2e4:	6838      	ldr	r0, [r7, #0]
 800c2e6:	f7ff fe02 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc4>
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	e000      	b.n	800c2f6 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc6>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	6313      	str	r3, [r2, #48]	; 0x30
  Info+=InstDesc2Len;
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	4413      	add	r3, r2
 800c300:	613b      	str	r3, [r7, #16]

  SetCharBuf(ManufacturerInformation,ManInfoLen,Info);
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c306:	68b8      	ldr	r0, [r7, #8]
 800c308:	f7ff fdf1 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.ManufacturerInformation=(ManufacturerInformation?Info:0);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe6>
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	e000      	b.n	800c318 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe8>
 800c316:	2300      	movs	r3, #0
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800c31c:	bf00      	nop
 800c31e:	3728      	adds	r7, #40	; 0x28
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>:

//*****************************************************************************
void tNMEA2000::SetProgmemConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
 800c330:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_+0x20>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33e:	4618      	mov	r0, r3
 800c340:	f008 fdd4 	bl	8014eec <free>
  LocalConfigurationInformationData=0;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	625a      	str	r2, [r3, #36]	; 0x24
  ConfigurationInformation.ManufacturerInformation=ManufacturerInformation;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	629a      	str	r2, [r3, #40]	; 0x28
  ConfigurationInformation.InstallationDescription1=InstallationDescription1;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	62da      	str	r2, [r3, #44]	; 0x2c
  ConfigurationInformation.InstallationDescription2=InstallationDescription2;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	683a      	ldr	r2, [r7, #0]
 800c35a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c35c:	bf00      	nop
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>:

//*****************************************************************************
size_t tNMEA2000::GetFastPacketTxPGNCount(int iDev) {
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  if ( !IsValidDevice(iDev) ) return 0;
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff f95d 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c376:	4603      	mov	r3, r0
 800c378:	f083 0301 	eor.w	r3, r3, #1
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x22>
 800c382:	2300      	movs	r3, #0
 800c384:	e050      	b.n	800c428 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc4>
  unsigned long ListPGN;
  size_t FPTxPGNCount=0;
 800c386:	2300      	movs	r3, #0
 800c388:	617b      	str	r3, [r7, #20]

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c38a:	2300      	movs	r3, #0
 800c38c:	613b      	str	r3, [r7, #16]
 800c38e:	4a28      	ldr	r2, [pc, #160]	; (800c430 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xcc>)
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c396:	60bb      	str	r3, [r7, #8]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	bf14      	ite	ne
 800c39e:	2301      	movne	r3, #1
 800c3a0:	2300      	moveq	r3, #0
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00d      	beq.n	800c3c4 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x60>
    if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f001 fc7c 	bl	800dca8 <_ZN9tNMEA200015IsFastPacketPGNEm>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x58>
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	617b      	str	r3, [r7, #20]
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	613b      	str	r3, [r7, #16]
 800c3c2:	e7e4      	b.n	800c38e <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x2a>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	69da      	ldr	r2, [r3, #28]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c3ce:	fb01 f303 	mul.w	r3, r1, r3
 800c3d2:	4413      	add	r3, r2
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d025      	beq.n	800c426 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	69da      	ldr	r2, [r3, #28]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c3e8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	bf14      	ite	ne
 800c400:	2301      	movne	r3, #1
 800c402:	2300      	moveq	r3, #0
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00d      	beq.n	800c426 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
      if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 800c40a:	68b9      	ldr	r1, [r7, #8]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 fc4b 	bl	800dca8 <_ZN9tNMEA200015IsFastPacketPGNEm>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xba>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	3301      	adds	r3, #1
 800c41c:	617b      	str	r3, [r7, #20]
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3301      	adds	r3, #1
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e7db      	b.n	800c3de <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x7a>
    }
  }

  return FPTxPGNCount;
 800c426:	697b      	ldr	r3, [r7, #20]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	0801554c 	.word	0x0801554c

0800c434 <_ZN9tNMEA200018GetSequenceCounterEmi>:

//*****************************************************************************
int tNMEA2000::GetSequenceCounter(unsigned long PGN, int iDev) {
 800c434:	b590      	push	{r4, r7, lr}
 800c436:	b089      	sub	sp, #36	; 0x24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f7ff f8f4 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c448:	4603      	mov	r3, r0
 800c44a:	f083 0301 	eor.w	r3, r3, #1
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <_ZN9tNMEA200018GetSequenceCounterEmi+0x24>
 800c454:	2300      	movs	r3, #0
 800c456:	e0f9      	b.n	800c64c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>

  if ( Devices[iDev].PGNSequenceCounters==0 ) { // Sequence counters has not yet been initialized
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	69da      	ldr	r2, [r3, #28]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c462:	fb01 f303 	mul.w	r3, r1, r3
 800c466:	4413      	add	r3, r2
 800c468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d14c      	bne.n	800c508 <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
    Devices[iDev].MaxPGNSequenceCounters=GetFastPacketTxPGNCount(iDev)+1; // Reserve 1 for undefined PGNs
 800c46e:	6879      	ldr	r1, [r7, #4]
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f7ff ff77 	bl	800c364 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>
 800c476:	4601      	mov	r1, r0
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	69da      	ldr	r2, [r3, #28]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800c482:	fb00 f303 	mul.w	r3, r0, r3
 800c486:	4413      	add	r3, r2
 800c488:	1c4a      	adds	r2, r1, #1
 800c48a:	631a      	str	r2, [r3, #48]	; 0x30
    Devices[iDev].PGNSequenceCounters=new unsigned long[Devices[iDev].MaxPGNSequenceCounters];
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	69da      	ldr	r2, [r3, #28]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c496:	fb01 f303 	mul.w	r3, r1, r3
 800c49a:	4413      	add	r3, r2
 800c49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d201      	bcs.n	800c4aa <_ZN9tNMEA200018GetSequenceCounterEmi+0x76>
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	e001      	b.n	800c4ae <_ZN9tNMEA200018GetSequenceCounterEmi+0x7a>
 800c4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	69d1      	ldr	r1, [r2, #28]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800c4b8:	fb00 f202 	mul.w	r2, r0, r2
 800c4bc:	188c      	adds	r4, r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f008 fbb9 	bl	8014c36 <_Znaj>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	62e3      	str	r3, [r4, #44]	; 0x2c
    for ( size_t i=0; i<Devices[iDev].MaxPGNSequenceCounters; i++ ) Devices[iDev].PGNSequenceCounters[i]=0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61fb      	str	r3, [r7, #28]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	69da      	ldr	r2, [r3, #28]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c4d6:	fb01 f303 	mul.w	r3, r1, r3
 800c4da:	4413      	add	r3, r2
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	69fa      	ldr	r2, [r7, #28]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d211      	bcs.n	800c508 <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c4ee:	fb01 f303 	mul.w	r3, r1, r3
 800c4f2:	4413      	add	r3, r2
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	3301      	adds	r3, #1
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	e7e1      	b.n	800c4cc <_ZN9tNMEA200018GetSequenceCounterEmi+0x98>
  }
  if ( Devices[iDev].PGNSequenceCounters==0 ) return 0; // Should not be. Only in case of memory allocation problem.
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	69da      	ldr	r2, [r3, #28]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c512:	fb01 f303 	mul.w	r3, r1, r3
 800c516:	4413      	add	r3, r2
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <_ZN9tNMEA200018GetSequenceCounterEmi+0xee>
 800c51e:	2300      	movs	r3, #0
 800c520:	e094      	b.n	800c64c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  size_t last=Devices[iDev].MaxPGNSequenceCounters-1;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	69da      	ldr	r2, [r3, #28]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c52c:	fb01 f303 	mul.w	r3, r1, r3
 800c530:	4413      	add	r3, r2
 800c532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c534:	3b01      	subs	r3, #1
 800c536:	613b      	str	r3, [r7, #16]
  unsigned long sc;
  for ( size_t i=0; i<last; i++ ) {
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	429a      	cmp	r2, r3
 800c542:	d25e      	bcs.n	800c602 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1ce>
    if ( Devices[iDev].PGNSequenceCounters[i]==0 ) { // Empty place, use this
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	69da      	ldr	r2, [r3, #28]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c54e:	fb01 f303 	mul.w	r3, r1, r3
 800c552:	4413      	add	r3, r2
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10f      	bne.n	800c582 <_ZN9tNMEA200018GetSequenceCounterEmi+0x14e>
      Devices[iDev].PGNSequenceCounters[i]=PGN;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	69da      	ldr	r2, [r3, #28]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c56c:	fb01 f303 	mul.w	r3, r1, r3
 800c570:	4413      	add	r3, r2
 800c572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	4413      	add	r3, r2
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	601a      	str	r2, [r3, #0]
      return 0; // Start from sequence 0
 800c57e:	2300      	movs	r3, #0
 800c580:	e064      	b.n	800c64c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
    }
    if ( (Devices[iDev].PGNSequenceCounters[i]&0x00ffffff) == PGN ) { // Found counter, use it
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	69da      	ldr	r2, [r3, #28]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c58c:	fb01 f303 	mul.w	r3, r1, r3
 800c590:	4413      	add	r3, r2
 800c592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d129      	bne.n	800c5fa <_ZN9tNMEA200018GetSequenceCounterEmi+0x1c6>
      sc=Devices[iDev].PGNSequenceCounters[i]>>24;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	69da      	ldr	r2, [r3, #28]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c5b0:	fb01 f303 	mul.w	r3, r1, r3
 800c5b4:	4413      	add	r3, r2
 800c5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	0e1b      	lsrs	r3, r3, #24
 800c5c2:	61bb      	str	r3, [r7, #24]
      sc++; if (sc>7) sc=0; // Get next counter
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b07      	cmp	r3, #7
 800c5ce:	d901      	bls.n	800c5d4 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1a0>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61bb      	str	r3, [r7, #24]
      Devices[iDev].PGNSequenceCounters[i]=PGN | (sc << 24);
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	0619      	lsls	r1, r3, #24
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	69da      	ldr	r2, [r3, #28]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800c5e2:	fb00 f303 	mul.w	r3, r0, r3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	601a      	str	r2, [r3, #0]
      return sc;
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	e028      	b.n	800c64c <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  for ( size_t i=0; i<last; i++ ) {
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	617b      	str	r3, [r7, #20]
 800c600:	e79c      	b.n	800c53c <_ZN9tNMEA200018GetSequenceCounterEmi+0x108>
    }
  }
  // PGN counter not found, so use common
  sc=Devices[iDev].PGNSequenceCounters[last];
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	69da      	ldr	r2, [r3, #28]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c60c:	fb01 f303 	mul.w	r3, r1, r3
 800c610:	4413      	add	r3, r2
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	61bb      	str	r3, [r7, #24]
  sc++; if (sc>7) sc=0;
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	3301      	adds	r3, #1
 800c622:	61bb      	str	r3, [r7, #24]
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	2b07      	cmp	r3, #7
 800c628:	d901      	bls.n	800c62e <_ZN9tNMEA200018GetSequenceCounterEmi+0x1fa>
 800c62a:	2300      	movs	r3, #0
 800c62c:	61bb      	str	r3, [r7, #24]
  Devices[iDev].PGNSequenceCounters[last]=sc;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	69da      	ldr	r2, [r3, #28]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c638:	fb01 f303 	mul.w	r3, r1, r3
 800c63c:	4413      	add	r3, r2
 800c63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	601a      	str	r2, [r3, #0]
  return sc;
 800c64a:	69bb      	ldr	r3, [r7, #24]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3724      	adds	r7, #36	; 0x24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd90      	pop	{r4, r7, pc}

0800c654 <_Z17CopyProgmemStringPKcjPc>:

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
void CopyProgmemString(const char *str, size_t MaxLen, char *buf) {
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d03a      	beq.n	800c6dc <_Z17CopyProgmemStringPKcjPc+0x88>
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d037      	beq.n	800c6dc <_Z17CopyProgmemStringPKcjPc+0x88>
  if ( str==0 ) { buf[0]=0; return; }
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <_Z17CopyProgmemStringPKcjPc+0x26>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	701a      	strb	r2, [r3, #0]
 800c678:	e031      	b.n	800c6de <_Z17CopyProgmemStringPKcjPc+0x8a>
  size_t i=0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
  char c;
  for (; i<MaxLen-1 && (c=pgm_read_byte(&(str[i])))!=0; i++) buf[i]=c;
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	3b01      	subs	r3, #1
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	429a      	cmp	r2, r3
 800c686:	d209      	bcs.n	800c69c <_Z17CopyProgmemStringPKcjPc+0x48>
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	4413      	add	r3, r2
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	74fb      	strb	r3, [r7, #19]
 800c692:	7cfb      	ldrb	r3, [r7, #19]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <_Z17CopyProgmemStringPKcjPc+0x48>
 800c698:	2301      	movs	r3, #1
 800c69a:	e000      	b.n	800c69e <_Z17CopyProgmemStringPKcjPc+0x4a>
 800c69c:	2300      	movs	r3, #0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d008      	beq.n	800c6b4 <_Z17CopyProgmemStringPKcjPc+0x60>
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	7cfa      	ldrb	r2, [r7, #19]
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e7e4      	b.n	800c67e <_Z17CopyProgmemStringPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d208      	bcs.n	800c6ce <_Z17CopyProgmemStringPKcjPc+0x7a>
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	701a      	strb	r2, [r3, #0]
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	e7f2      	b.n	800c6b4 <_Z17CopyProgmemStringPKcjPc+0x60>
  buf[MaxLen-1]=0; // Force null termination
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	701a      	strb	r2, [r3, #0]
 800c6da:	e000      	b.n	800c6de <_Z17CopyProgmemStringPKcjPc+0x8a>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 800c6dc:	bf00      	nop
}
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bc80      	pop	{r7}
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <_ZN9tNMEA20007IsTxPGNEmi>:

//*****************************************************************************
bool tNMEA2000::IsTxPGN(unsigned long PGN, int iDev) {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 800c6f4:	6879      	ldr	r1, [r7, #4]
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f7fe ff9a 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f083 0301 	eor.w	r3, r3, #1
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <_ZN9tNMEA20007IsTxPGNEmi+0x24>
 800c708:	2300      	movs	r3, #0
 800c70a:	e046      	b.n	800c79a <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  unsigned long ListPGN;

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c70c:	2300      	movs	r3, #0
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	4a24      	ldr	r2, [pc, #144]	; (800c7a4 <_ZN9tNMEA20007IsTxPGNEmi+0xbc>)
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	bf14      	ite	ne
 800c720:	2301      	movne	r3, #1
 800c722:	2300      	moveq	r3, #0
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d009      	beq.n	800c73e <_ZN9tNMEA20007IsTxPGNEmi+0x56>
    if ( ListPGN==PGN ) return true;
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d101      	bne.n	800c736 <_ZN9tNMEA20007IsTxPGNEmi+0x4e>
 800c732:	2301      	movs	r3, #1
 800c734:	e031      	b.n	800c79a <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	3301      	adds	r3, #1
 800c73a:	61fb      	str	r3, [r7, #28]
 800c73c:	e7e8      	b.n	800c710 <_ZN9tNMEA20007IsTxPGNEmi+0x28>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	69da      	ldr	r2, [r3, #28]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c748:	fb01 f303 	mul.w	r3, r1, r3
 800c74c:	4413      	add	r3, r2
 800c74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c750:	2b00      	cmp	r3, #0
 800c752:	d021      	beq.n	800c798 <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800c754:	2300      	movs	r3, #0
 800c756:	61bb      	str	r3, [r7, #24]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	69da      	ldr	r2, [r3, #28]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c762:	fb01 f303 	mul.w	r3, r1, r3
 800c766:	4413      	add	r3, r2
 800c768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	bf14      	ite	ne
 800c77a:	2301      	movne	r3, #1
 800c77c:	2300      	moveq	r3, #0
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b00      	cmp	r3, #0
 800c782:	d009      	beq.n	800c798 <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
      if ( ListPGN==PGN ) return true;
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d101      	bne.n	800c790 <_ZN9tNMEA20007IsTxPGNEmi+0xa8>
 800c78c:	2301      	movs	r3, #1
 800c78e:	e004      	b.n	800c79a <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	3301      	adds	r3, #1
 800c794:	61bb      	str	r3, [r7, #24]
 800c796:	e7df      	b.n	800c758 <_ZN9tNMEA20007IsTxPGNEmi+0x70>
    }
  }
  return false;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3720      	adds	r7, #32
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	0801554c 	.word	0x0801554c

0800c7a8 <_ZNK9tNMEA200021GetProductInformationEiRb>:

//*****************************************************************************
const tNMEA2000::tProductInformation * tNMEA2000::GetProductInformation(int iDev, bool &IsProgMem) const {
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 800c7b4:	68b9      	ldr	r1, [r7, #8]
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7fe ff3a 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f083 0301 	eor.w	r3, r3, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <_ZNK9tNMEA200021GetProductInformationEiRb+0x24>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e03d      	b.n	800c848 <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
  int iPIDev=iDev;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	617b      	str	r3, [r7, #20]

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	69da      	ldr	r2, [r3, #28]
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c7da:	fb01 f303 	mul.w	r3, r1, r3
 800c7de:	4413      	add	r3, r2
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <_ZNK9tNMEA200021GetProductInformationEiRb+0x42>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	617b      	str	r3, [r7, #20]
    if ( Devices[iPIDev].ProductInformation==0 ) return 0; // Can not do anything.
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	69da      	ldr	r2, [r3, #28]
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c7f4:	fb01 f303 	mul.w	r3, r1, r3
 800c7f8:	4413      	add	r3, r2
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <_ZNK9tNMEA200021GetProductInformationEiRb+0x5c>
 800c800:	2300      	movs	r3, #0
 800c802:	e021      	b.n	800c848 <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
    IsProgMem = (Devices[iPIDev].ProductInformation!=Devices[iPIDev].LocalProductInformation );
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	69da      	ldr	r2, [r3, #28]
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c80e:	fb01 f303 	mul.w	r3, r1, r3
 800c812:	4413      	add	r3, r2
 800c814:	689a      	ldr	r2, [r3, #8]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	69d9      	ldr	r1, [r3, #28]
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800c820:	fb00 f303 	mul.w	r3, r0, r3
 800c824:	440b      	add	r3, r1
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	429a      	cmp	r2, r3
 800c82a:	bf14      	ite	ne
 800c82c:	2301      	movne	r3, #1
 800c82e:	2300      	moveq	r3, #0
 800c830:	b2da      	uxtb	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	701a      	strb	r2, [r3, #0]
    return Devices[iPIDev].ProductInformation;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	69da      	ldr	r2, [r3, #28]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c840:	fb01 f303 	mul.w	r3, r1, r3
 800c844:	4413      	add	r3, r2
 800c846:	689b      	ldr	r3, [r3, #8]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <_ZNK9tNMEA200013GetN2kVersionEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetN2kVersion(int iDev) const {
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800c85a:	f107 030b 	add.w	r3, r7, #11
 800c85e:	461a      	mov	r2, r3
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff ffa0 	bl	800c7a8 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800c868:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <_ZNK9tNMEA200013GetN2kVersionEi+0x24>
 800c870:	2300      	movs	r3, #0
 800c872:	e00a      	b.n	800c88a <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>

  if ( !IsProgMem ) {
 800c874:	7afb      	ldrb	r3, [r7, #11]
 800c876:	f083 0301 	eor.w	r3, r3, #1
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <_ZNK9tNMEA200013GetN2kVersionEi+0x36>
    return ProductInformation->N2kVersion;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	e001      	b.n	800c88a <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->N2kVersion);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	881b      	ldrh	r3, [r3, #0]
  }
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <_ZNK9tNMEA200014GetProductCodeEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetProductCode(int iDev) const {
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800c89c:	f107 030b 	add.w	r3, r7, #11
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7ff ff7f 	bl	800c7a8 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800c8aa:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <_ZNK9tNMEA200014GetProductCodeEi+0x24>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e00a      	b.n	800c8cc <_ZNK9tNMEA200014GetProductCodeEi+0x3a>

  if ( !IsProgMem ) {
 800c8b6:	7afb      	ldrb	r3, [r7, #11]
 800c8b8:	f083 0301 	eor.w	r3, r3, #1
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <_ZNK9tNMEA200014GetProductCodeEi+0x36>
    return ProductInformation->ProductCode;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	e001      	b.n	800c8cc <_ZNK9tNMEA200014GetProductCodeEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->ProductCode);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	885b      	ldrh	r3, [r3, #2]
  }
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <_ZNK9tNMEA200010GetModelIDEPcji>:

//*****************************************************************************
void tNMEA2000::GetModelID(char *buf, size_t max_len, int iDev) const {
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
  if ( max_len==0 ) return;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d023      	beq.n	800c930 <_ZNK9tNMEA200010GetModelIDEPcji+0x5c>
  buf[0]=0;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	701a      	strb	r2, [r3, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800c8ee:	f107 0313 	add.w	r3, r7, #19
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f7ff ff56 	bl	800c7a8 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800c8fc:	6178      	str	r0, [r7, #20]

  if ( ProductInformation==0 ) return;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d017      	beq.n	800c934 <_ZNK9tNMEA200010GetModelIDEPcji+0x60>

  if ( !IsProgMem ) {
 800c904:	7cfb      	ldrb	r3, [r7, #19]
 800c906:	f083 0301 	eor.w	r3, r3, #1
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d007      	beq.n	800c920 <_ZNK9tNMEA200010GetModelIDEPcji+0x4c>
    SetCharBuf(ProductInformation->N2kModelID,max_len,buf);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	3304      	adds	r3, #4
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7ff fae8 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
 800c91e:	e00a      	b.n	800c936 <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  } else {
    CopyProgmemString(ProductInformation->N2kModelID,max_len,buf);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	3304      	adds	r3, #4
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7ff fe93 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
 800c92e:	e002      	b.n	800c936 <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( max_len==0 ) return;
 800c930:	bf00      	nop
 800c932:	e000      	b.n	800c936 <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( ProductInformation==0 ) return;
 800c934:	bf00      	nop
  }
}
 800c936:	3718      	adds	r7, #24
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <_ZNK9tNMEA200021GetCertificationLevelEi>:
    CopyProgmemString(ProductInformation->N2kModelSerialCode,max_len,buf);
  }
}

//*****************************************************************************
unsigned char tNMEA2000::GetCertificationLevel(int iDev) const {
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800c946:	f107 030b 	add.w	r3, r7, #11
 800c94a:	461a      	mov	r2, r3
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff ff2a 	bl	800c7a8 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800c954:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <_ZNK9tNMEA200021GetCertificationLevelEi+0x24>
 800c95c:	2300      	movs	r3, #0
 800c95e:	e00c      	b.n	800c97a <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>

  if ( !IsProgMem ) {
 800c960:	7afb      	ldrb	r3, [r7, #11]
 800c962:	f083 0301 	eor.w	r3, r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <_ZNK9tNMEA200021GetCertificationLevelEi+0x38>
    return ProductInformation->CertificationLevel;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c972:	e002      	b.n	800c97a <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->CertificationLevel);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
  }
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <_ZNK9tNMEA200018GetLoadEquivalencyEi>:

//*****************************************************************************
unsigned char tNMEA2000::GetLoadEquivalency(int iDev) const {
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 800c98c:	f107 030b 	add.w	r3, r7, #11
 800c990:	461a      	mov	r2, r3
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7ff ff07 	bl	800c7a8 <_ZNK9tNMEA200021GetProductInformationEiRb>
 800c99a:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x24>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e00c      	b.n	800c9c0 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>

  if ( !IsProgMem ) {
 800c9a6:	7afb      	ldrb	r3, [r7, #11]
 800c9a8:	f083 0301 	eor.w	r3, r3, #1
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d003      	beq.n	800c9ba <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x38>
    return ProductInformation->LoadEquivalency;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c9b8:	e002      	b.n	800c9c0 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->LoadEquivalency);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
  }
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>:

//*****************************************************************************
void tNMEA2000::CopyProgmemConfigurationInformationToLocal() {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b096      	sub	sp, #88	; 0x58
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  if ( LocalConfigurationInformationData==0 ) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d12e      	bne.n	800ca36 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv+0x6e>
    char Buf[Max_N2kConfigurationInfoField_len];
    const char *ID1=ConfigurationInformation.InstallationDescription1;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9dc:	657b      	str	r3, [r7, #84]	; 0x54
    const char *ID2=ConfigurationInformation.InstallationDescription2;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e2:	653b      	str	r3, [r7, #80]	; 0x50
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,Max_N2kConfigurationInfoField_len,Buf);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e8:	f107 0208 	add.w	r2, r7, #8
 800c9ec:	2147      	movs	r1, #71	; 0x47
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fe30 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
    SetConfigurationInformation(Buf);
 800c9f4:	f107 0108 	add.w	r1, r7, #8
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7ff fc17 	bl	800c230 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>
    CopyProgmemString(ID1,Max_N2kConfigurationInfoField_len,Buf);
 800ca02:	f107 0308 	add.w	r3, r7, #8
 800ca06:	461a      	mov	r2, r3
 800ca08:	2147      	movs	r1, #71	; 0x47
 800ca0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca0c:	f7ff fe22 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription1(Buf);
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f811 	bl	800ca3e <_ZN9tNMEA200027SetInstallationDescription1EPKc>
    CopyProgmemString(ID2,Max_N2kConfigurationInfoField_len,Buf);
 800ca1c:	f107 0308 	add.w	r3, r7, #8
 800ca20:	461a      	mov	r2, r3
 800ca22:	2147      	movs	r1, #71	; 0x47
 800ca24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ca26:	f7ff fe15 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription2(Buf);
 800ca2a:	f107 0308 	add.w	r3, r7, #8
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f824 	bl	800ca7e <_ZN9tNMEA200027SetInstallationDescription2EPKc>
  }
}
 800ca36:	bf00      	nop
 800ca38:	3758      	adds	r7, #88	; 0x58
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <_ZN9tNMEA200027SetInstallationDescription1EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription1(const char *InstallationDescription1) {
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff ffbd 	bl	800c9c8 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  // Get pointer to local InstallationDescription1, which is after
  char *Info=LocalConfigurationInformationData;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca52:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription1,Max_N2kConfigurationInfoField_len,Info);
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	2147      	movs	r1, #71	; 0x47
 800ca58:	6838      	ldr	r0, [r7, #0]
 800ca5a:	f7ff fa48 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2a>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	e000      	b.n	800ca6a <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2c>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  InstallationDescriptionChanged=true;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800ca76:	bf00      	nop
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <_ZN9tNMEA200027SetInstallationDescription2EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription2(const char *InstallationDescription2) {
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff ff9d 	bl	800c9c8 <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  char *Info=LocalConfigurationInformationData+Max_N2kConfigurationInfoField_len;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca92:	3347      	adds	r3, #71	; 0x47
 800ca94:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription2,Max_N2kConfigurationInfoField_len,Info);
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	2147      	movs	r1, #71	; 0x47
 800ca9a:	6838      	ldr	r0, [r7, #0]
 800ca9c:	f7ff fa27 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2c>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	e000      	b.n	800caac <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2e>
 800caaa:	2300      	movs	r3, #0
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	6313      	str	r3, [r2, #48]	; 0x30
  InstallationDescriptionChanged=true;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <_ZN9tNMEA200027GetInstallationDescription1EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription1(char *buf, size_t max_len) {
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d007      	beq.n	800cae4 <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription1,max_len,buf);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	6879      	ldr	r1, [r7, #4]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff fa06 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
  }
}
 800cae2:	e006      	b.n	800caf2 <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	6879      	ldr	r1, [r7, #4]
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff fdb1 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <_ZN9tNMEA200027GetInstallationDescription2EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription2(char *buf, size_t max_len) {
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	60f8      	str	r0, [r7, #12]
 800cb02:	60b9      	str	r1, [r7, #8]
 800cb04:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d007      	beq.n	800cb1e <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription2,max_len,buf);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb12:	68ba      	ldr	r2, [r7, #8]
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff f9e9 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
  }
}
 800cb1c:	e006      	b.n	800cb2c <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff fd94 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
}
 800cb2c:	bf00      	nop
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <_ZN9tNMEA200026GetManufacturerInformationEPcj>:

//*****************************************************************************
void tNMEA2000::GetManufacturerInformation(char *buf, size_t max_len) {
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d007      	beq.n	800cb58 <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x24>
    SetCharBuf(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff f9cc 	bl	800beee <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
  }
}
 800cb56:	e006      	b.n	800cb66 <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x32>
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fd77 	bl	800c654 <_Z17CopyProgmemStringPKcjPc>
}
 800cb66:	bf00      	nop
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <_ZN9tNMEA200020SetDeviceInformationEmhhthi>:
                                     unsigned char _DeviceFunction,
                                     unsigned char _DeviceClass,
                                     uint16_t _ManufacturerCode,
                                     unsigned char _IndustryGroup,
                                     int iDev
                                     ) {
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	4611      	mov	r1, r2
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	71fb      	strb	r3, [r7, #7]
 800cb80:	4613      	mov	r3, r2
 800cb82:	71bb      	strb	r3, [r7, #6]
   if ( !IsValidDevice(iDev) ) return;
 800cb84:	6a39      	ldr	r1, [r7, #32]
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f7fe fd52 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	f083 0301 	eor.w	r3, r3, #1
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d159      	bne.n	800cc4c <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xde>
   InitDevices();
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff fa7d 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>
   if (_ManufacturerCode!=0xffff) Devices[iDev].DeviceInformation.SetManufacturerCode(_ManufacturerCode);
 800cb9e:	8b3b      	ldrh	r3, [r7, #24]
 800cba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d00d      	beq.n	800cbc4 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x56>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cbb2:	fb01 f303 	mul.w	r3, r1, r3
 800cbb6:	4413      	add	r3, r2
 800cbb8:	461a      	mov	r2, r3
 800cbba:	8b3b      	ldrh	r3, [r7, #24]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f7fe facc 	bl	800b15c <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>
   if (_UniqueNumber!=0xffffffff) Devices[iDev].DeviceInformation.SetUniqueNumber(_UniqueNumber);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbca:	d00b      	beq.n	800cbe4 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x76>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	69da      	ldr	r2, [r3, #28]
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cbd6:	fb01 f303 	mul.w	r3, r1, r3
 800cbda:	4413      	add	r3, r2
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe faa8 	bl	800b134 <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>
   if (_DeviceFunction!=0xff) Devices[iDev].DeviceInformation.SetDeviceFunction(_DeviceFunction);
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2bff      	cmp	r3, #255	; 0xff
 800cbe8:	d00d      	beq.n	800cc06 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x98>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	69da      	ldr	r2, [r3, #28]
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cbf4:	fb01 f303 	mul.w	r3, r1, r3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4610      	mov	r0, r2
 800cc02:	f7fe fad8 	bl	800b1b6 <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>
   if (_DeviceClass!=0xff) Devices[iDev].DeviceInformation.SetDeviceClass(_DeviceClass);
 800cc06:	79bb      	ldrb	r3, [r7, #6]
 800cc08:	2bff      	cmp	r3, #255	; 0xff
 800cc0a:	d00d      	beq.n	800cc28 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xba>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	69da      	ldr	r2, [r3, #28]
 800cc10:	6a3b      	ldr	r3, [r7, #32]
 800cc12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cc16:	fb01 f303 	mul.w	r3, r1, r3
 800cc1a:	4413      	add	r3, r2
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	79bb      	ldrb	r3, [r7, #6]
 800cc20:	4619      	mov	r1, r3
 800cc22:	4610      	mov	r0, r2
 800cc24:	f7fe fad5 	bl	800b1d2 <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>
   if (_IndustryGroup!=0xff) Devices[iDev].DeviceInformation.SetIndustryGroup(_IndustryGroup);
 800cc28:	7f3b      	ldrb	r3, [r7, #28]
 800cc2a:	2bff      	cmp	r3, #255	; 0xff
 800cc2c:	d00f      	beq.n	800cc4e <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	69da      	ldr	r2, [r3, #28]
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cc38:	fb01 f303 	mul.w	r3, r1, r3
 800cc3c:	4413      	add	r3, r2
 800cc3e:	461a      	mov	r2, r3
 800cc40:	7f3b      	ldrb	r3, [r7, #28]
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f7fe fad4 	bl	800b1f2 <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>
 800cc4a:	e000      	b.n	800cc4e <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
   if ( !IsValidDevice(iDev) ) return;
 800cc4c:	bf00      	nop
}
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>:
void tNMEA2000::SetDeviceInformationInstances(
                              uint8_t _DeviceInstanceLower,
                              uint8_t _DeviceInstanceUpper,
                              uint8_t _SystemInstance,
                              int iDev
                              ) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	4608      	mov	r0, r1
 800cc5e:	4611      	mov	r1, r2
 800cc60:	461a      	mov	r2, r3
 800cc62:	4603      	mov	r3, r0
 800cc64:	70fb      	strb	r3, [r7, #3]
 800cc66:	460b      	mov	r3, r1
 800cc68:	70bb      	strb	r3, [r7, #2]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	707b      	strb	r3, [r7, #1]
  if ( !IsValidDevice(iDev) ) return;
 800cc6e:	69b9      	ldr	r1, [r7, #24]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7fe fcdd 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800cc76:	4603      	mov	r3, r0
 800cc78:	f083 0301 	eor.w	r3, r3, #1
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f040 808a 	bne.w	800cd98 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x144>

  InitDevices();
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff fa07 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>
  uint8_t DeviceInstance=Devices[iDev].DeviceInformation.GetDeviceInstance();
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	69da      	ldr	r2, [r3, #28]
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cc94:	fb01 f303 	mul.w	r3, r1, r3
 800cc98:	4413      	add	r3, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fa80 	bl	800b1a0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 800cca0:	4603      	mov	r3, r0
 800cca2:	73fb      	strb	r3, [r7, #15]

  if (_DeviceInstanceLower!=0xff ) {
 800cca4:	78fb      	ldrb	r3, [r7, #3]
 800cca6:	2bff      	cmp	r3, #255	; 0xff
 800cca8:	d00c      	beq.n	800ccc4 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x70>
    DeviceInstance=( (DeviceInstance & ~0x07) | (_DeviceInstanceLower & 0x07) );
 800ccaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccae:	f023 0307 	bic.w	r3, r3, #7
 800ccb2:	b25a      	sxtb	r2, r3
 800ccb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccb8:	f003 0307 	and.w	r3, r3, #7
 800ccbc:	b25b      	sxtb	r3, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	73fb      	strb	r3, [r7, #15]
  }
  if (_DeviceInstanceUpper!=0xff ) {
 800ccc4:	78bb      	ldrb	r3, [r7, #2]
 800ccc6:	2bff      	cmp	r3, #255	; 0xff
 800ccc8:	d00a      	beq.n	800cce0 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x8c>
    DeviceInstance=( (DeviceInstance & ~0xF8) | ((_DeviceInstanceUpper&0x1f)<<3) );
 800ccca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	b25a      	sxtb	r2, r3
 800ccd4:	78bb      	ldrb	r3, [r7, #2]
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	b25b      	sxtb	r3, r3
 800ccde:	73fb      	strb	r3, [r7, #15]
  }

  if ( Devices[iDev].DeviceInformation.GetDeviceInstance()!=DeviceInstance) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ccea:	fb01 f303 	mul.w	r3, r1, r3
 800ccee:	4413      	add	r3, r2
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe fa55 	bl	800b1a0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	bf14      	ite	ne
 800cd00:	2301      	movne	r3, #1
 800cd02:	2300      	moveq	r3, #0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d010      	beq.n	800cd2c <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0xd8>
    Devices[iDev].DeviceInformation.SetDeviceInstance(DeviceInstance);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69da      	ldr	r2, [r3, #28]
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cd14:	fb01 f303 	mul.w	r3, r1, r3
 800cd18:	4413      	add	r3, r2
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4610      	mov	r0, r2
 800cd22:	f7fe fa2f 	bl	800b184 <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
    DeviceInformationChanged=true;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	769a      	strb	r2, [r3, #26]
  }

  if (_SystemInstance!=0xff && Devices[iDev].DeviceInformation.GetSystemInstance()!=_SystemInstance) {
 800cd2c:	787b      	ldrb	r3, [r7, #1]
 800cd2e:	2bff      	cmp	r3, #255	; 0xff
 800cd30:	d011      	beq.n	800cd56 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x102>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	69da      	ldr	r2, [r3, #28]
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cd3c:	fb01 f303 	mul.w	r3, r1, r3
 800cd40:	4413      	add	r3, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fb f96e 	bl	8008024 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	787b      	ldrb	r3, [r7, #1]
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d001      	beq.n	800cd56 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x102>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e000      	b.n	800cd58 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x104>
 800cd56:	2300      	movs	r3, #0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d010      	beq.n	800cd7e <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x12a>
    Devices[iDev].DeviceInformation.SetSystemInstance(_SystemInstance);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	69da      	ldr	r2, [r3, #28]
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cd66:	fb01 f303 	mul.w	r3, r1, r3
 800cd6a:	4413      	add	r3, r2
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	787b      	ldrb	r3, [r7, #1]
 800cd70:	4619      	mov	r1, r3
 800cd72:	4610      	mov	r0, r2
 800cd74:	f7fe fa59 	bl	800b22a <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>
    DeviceInformationChanged=true;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	769a      	strb	r2, [r3, #26]
  }

  // Send delayed. Had problems with some devices with too fast response.
  if ( IsReadyToSend() ) SendIsoAddressClaim(0xff,iDev,2);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7fe fc6b 	bl	800b65a <_ZNK9tNMEA200013IsReadyToSendEv>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d007      	beq.n	800cd9a <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x146>
 800cd8a:	2302      	movs	r3, #2
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	21ff      	movs	r1, #255	; 0xff
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f002 fe85 	bl	800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 800cd96:	e000      	b.n	800cd9a <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x146>
  if ( !IsValidDevice(iDev) ) return;
 800cd98:	bf00      	nop
}
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>:
void tNMEA2000::ExtendFastPacketMessages(const unsigned long *_FastPacketMessages) {
  FastPacketMessages[1]=_FastPacketMessages;
}

//*****************************************************************************
void tNMEA2000::ExtendTransmitMessages(const unsigned long *_Messages, int iDev) {
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7fe fc3e 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f083 0301 	eor.w	r3, r3, #1
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10d      	bne.n	800cddc <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3c>
  InitDevices();
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff f969 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].TransmitMessages=_Messages;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	69da      	ldr	r2, [r3, #28]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cdd0:	fb01 f303 	mul.w	r3, r1, r3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	625a      	str	r2, [r3, #36]	; 0x24
 800cdda:	e000      	b.n	800cdde <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3e>
  if ( !IsValidDevice(iDev) ) return;
 800cddc:	bf00      	nop
}
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>:
  InitDevices();
  Devices[iDev].ReceiveMessages=_Messages;
}

//*****************************************************************************
void tNMEA2000::SetMode(tN2kMode _N2kMode, uint8_t _N2kSource) {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	70bb      	strb	r3, [r7, #2]
  InitDevices();
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff f94f 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>
  N2kMode=_N2kMode;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	78fa      	ldrb	r2, [r7, #3]
 800cdfe:	715a      	strb	r2, [r3, #5]
  for (int i=0; i<DeviceCount; i++) {
 800ce00:	2300      	movs	r3, #0
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	da1d      	bge.n	800ce4a <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x66>
    Devices[i].N2kSource=_N2kSource+i;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	b2d9      	uxtb	r1, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	69da      	ldr	r2, [r3, #28]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800ce1c:	fb00 f303 	mul.w	r3, r0, r3
 800ce20:	4413      	add	r3, r2
 800ce22:	78ba      	ldrb	r2, [r7, #2]
 800ce24:	440a      	add	r2, r1
 800ce26:	b2d2      	uxtb	r2, r2
 800ce28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    Devices[i].UpdateAddressClaimEndSource();
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	69da      	ldr	r2, [r3, #28]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ce36:	fb01 f303 	mul.w	r3, r1, r3
 800ce3a:	4413      	add	r3, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe fb24 	bl	800b48a <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
  for (int i=0; i<DeviceCount; i++) {
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60fb      	str	r3, [r7, #12]
 800ce48:	e7dc      	b.n	800ce04 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x20>
  }
  AddressChanged=false;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	765a      	strb	r2, [r3, #25]
}
 800ce50:	bf00      	nop
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZN9tNMEA200019InitCANFrameBuffersEv>:

//*****************************************************************************
void tNMEA2000::InitCANFrameBuffers() {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
    if ( CANSendFrameBuf==0 && !IsInitialized() ) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7fe fb5f 	bl	800b52c <_ZN9tNMEA200013IsInitializedEv>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	f083 0301 	eor.w	r3, r3, #1
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e000      	b.n	800ce80 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x28>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d01d      	beq.n	800cec0 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x68>
      if ( MaxCANSendFrames>0 ) CANSendFrameBuf = new tCANSendFrame[MaxCANSendFrames];
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d010      	beq.n	800ceb0 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x58>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce98:	d201      	bcs.n	800ce9e <_ZN9tNMEA200019InitCANFrameBuffersEv+0x46>
 800ce9a:	011b      	lsls	r3, r3, #4
 800ce9c:	e001      	b.n	800cea2 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x4a>
 800ce9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cea2:	4618      	mov	r0, r3
 800cea4:	f007 fec7 	bl	8014c36 <_Znaj>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	64da      	str	r2, [r3, #76]	; 0x4c
      N2kDbg("Initialize frame buffer. Size: "); N2kDbg(MaxCANSendFrames); N2kDbg(", address:"); N2kDbgln((uint32_t)CANSendFrameBuf);
      CANSendFrameBufferWrite=0;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      CANSendFrameBufferRead=0;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    }

    // Receive buffer has sense only with interrupt handling. So it must be handled on inherited class.
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <_ZN9tNMEA20004OpenEv>:

//*****************************************************************************
bool tNMEA2000::Open() {
 800cec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceca:	b089      	sub	sp, #36	; 0x24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  if ( OpenState==os_Open ) return true;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	7e1b      	ldrb	r3, [r3, #24]
 800ced4:	2b03      	cmp	r3, #3
 800ced6:	d101      	bne.n	800cedc <_ZN9tNMEA20004OpenEv+0x14>
 800ced8:	2301      	movs	r3, #1
 800ceda:	e143      	b.n	800d164 <_ZN9tNMEA20004OpenEv+0x29c>

  if ( OpenState==os_None ) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	7e1b      	ldrb	r3, [r3, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f040 80a2 	bne.w	800d02a <_ZN9tNMEA20004OpenEv+0x162>
    InitCANFrameBuffers();
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	330c      	adds	r3, #12
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	4798      	blx	r3
    InitDevices();
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff f8d0 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>

    if ( N2kCANMsgBuf==0 ) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f040 8091 	bne.w	800d024 <_ZN9tNMEA20004OpenEv+0x15c>
      if ( MaxN2kCANMsgs==0 ) MaxN2kCANMsgs=5;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d103      	bne.n	800cf14 <_ZN9tNMEA20004OpenEv+0x4c>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2205      	movs	r2, #5
 800cf10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      N2kCANMsgBuf = new tN2kCANMsg[MaxN2kCANMsgs];
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	4b93      	ldr	r3, [pc, #588]	; (800d16c <_ZN9tNMEA20004OpenEv+0x2a4>)
 800cf1e:	429c      	cmp	r4, r3
 800cf20:	d804      	bhi.n	800cf2c <_ZN9tNMEA20004OpenEv+0x64>
 800cf22:	4623      	mov	r3, r4
 800cf24:	019b      	lsls	r3, r3, #6
 800cf26:	4423      	add	r3, r4
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	e001      	b.n	800cf30 <_ZN9tNMEA20004OpenEv+0x68>
 800cf2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf30:	4618      	mov	r0, r3
 800cf32:	f007 fe80 	bl	8014c36 <_Znaj>
 800cf36:	4603      	mov	r3, r0
 800cf38:	461e      	mov	r6, r3
 800cf3a:	4635      	mov	r5, r6
 800cf3c:	1e63      	subs	r3, r4, #1
 800cf3e:	461c      	mov	r4, r3
 800cf40:	2c00      	cmp	r4, #0
 800cf42:	db06      	blt.n	800cf52 <_ZN9tNMEA20004OpenEv+0x8a>
 800cf44:	4628      	mov	r0, r5
 800cf46:	f7fd ffde 	bl	800af06 <_ZN10tN2kCANMsgC1Ev>
 800cf4a:	f505 7582 	add.w	r5, r5, #260	; 0x104
 800cf4e:	3c01      	subs	r4, #1
 800cf50:	e7f6      	b.n	800cf40 <_ZN9tNMEA20004OpenEv+0x78>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	645e      	str	r6, [r3, #68]	; 0x44
      for (int i=0; i<MaxN2kCANMsgs; i++) N2kCANMsgBuf[i].FreeMessage();
 800cf56:	2300      	movs	r3, #0
 800cf58:	61fb      	str	r3, [r7, #28]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cf60:	461a      	mov	r2, r3
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	4293      	cmp	r3, r2
 800cf66:	da0e      	bge.n	800cf86 <_ZN9tNMEA20004OpenEv+0xbe>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cf6c:	69fa      	ldr	r2, [r7, #28]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	019b      	lsls	r3, r3, #6
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fd fff1 	bl	800af60 <_ZN10tN2kCANMsg11FreeMessageEv>
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	3301      	adds	r3, #1
 800cf82:	61fb      	str	r3, [r7, #28]
 800cf84:	e7e9      	b.n	800cf5a <_ZN9tNMEA20004OpenEv+0x92>

      #if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
      // On first open try add also default group function handlers
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN60928(this)); // NAME handler
 800cf86:	2014      	movs	r0, #20
 800cf88:	f007 fe44 	bl	8014c14 <_Znwj>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461c      	mov	r4, r3
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	4620      	mov	r0, r4
 800cf94:	f7fe fc72 	bl	800b87c <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>
 800cf98:	4621      	mov	r1, r4
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f004 fa12 	bl	80113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126464(this)); // Rx/Tx list handler
 800cfa0:	2014      	movs	r0, #20
 800cfa2:	f007 fe37 	bl	8014c14 <_Znwj>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461c      	mov	r4, r3
 800cfaa:	6879      	ldr	r1, [r7, #4]
 800cfac:	4620      	mov	r0, r4
 800cfae:	f7fe fc7b 	bl	800b8a8 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f004 fa05 	bl	80113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #if !defined(N2K_NO_HEARTBEAT_SUPPORT)
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126993(this)); // Heartbeat handler
 800cfba:	2014      	movs	r0, #20
 800cfbc:	f007 fe2a 	bl	8014c14 <_Znwj>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	461c      	mov	r4, r3
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7fe fc84 	bl	800b8d4 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>
 800cfcc:	4621      	mov	r1, r4
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f004 f9f8 	bl	80113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126996(this)); // Product information
 800cfd4:	2014      	movs	r0, #20
 800cfd6:	f007 fe1d 	bl	8014c14 <_Znwj>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	461c      	mov	r4, r3
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7fe fc8f 	bl	800b904 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f004 f9eb 	bl	80113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126998(this)); // Configuration information handler
 800cfee:	2014      	movs	r0, #20
 800cff0:	f007 fe10 	bl	8014c14 <_Znwj>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461c      	mov	r4, r3
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7fe fc9a 	bl	800b934 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>
 800d000:	4621      	mov	r1, r4
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f004 f9de 	bl	80113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandler(this,0)); // Default handler at last
 800d008:	2014      	movs	r0, #20
 800d00a:	f007 fe03 	bl	8014c14 <_Znwj>
 800d00e:	4603      	mov	r3, r0
 800d010:	461c      	mov	r4, r3
 800d012:	2200      	movs	r2, #0
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	4620      	mov	r0, r4
 800d018:	f7fa fa7c 	bl	8007514 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 800d01c:	4621      	mov	r1, r4
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f004 f9d0 	bl	80113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
    }
    OpenState=os_OpenCAN;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	761a      	strb	r2, [r3, #24]
  }

  if ( OpenState==os_OpenCAN ) {
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7e1b      	ldrb	r3, [r3, #24]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d155      	bne.n	800d0de <_ZN9tNMEA20004OpenEv+0x216>
    if ( !OpenScheduler.IsTime() ) return false;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3314      	adds	r3, #20
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe f845 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f083 0301 	eor.w	r3, r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <_ZN9tNMEA20004OpenEv+0x184>
 800d048:	2300      	movs	r3, #0
 800d04a:	e08b      	b.n	800d164 <_ZN9tNMEA20004OpenEv+0x29c>
    bool Notify=( (ForwardStream!=0) && (ForwardType==tNMEA2000::fwdt_Text) );
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d005      	beq.n	800d060 <_ZN9tNMEA20004OpenEv+0x198>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	799b      	ldrb	r3, [r3, #6]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d101      	bne.n	800d060 <_ZN9tNMEA20004OpenEv+0x198>
 800d05c:	2301      	movs	r3, #1
 800d05e:	e000      	b.n	800d062 <_ZN9tNMEA20004OpenEv+0x19a>
 800d060:	2300      	movs	r3, #0
 800d062:	76fb      	strb	r3, [r7, #27]
    if ( (dbMode!=dm_None) || CANOpen() ) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	791b      	ldrb	r3, [r3, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d108      	bne.n	800d07e <_ZN9tNMEA20004OpenEv+0x1b6>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3304      	adds	r3, #4
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	4798      	blx	r3
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <_ZN9tNMEA20004OpenEv+0x1ba>
 800d07e:	2301      	movs	r3, #1
 800d080:	e000      	b.n	800d084 <_ZN9tNMEA20004OpenEv+0x1bc>
 800d082:	2300      	movs	r3, #0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d012      	beq.n	800d0ae <_ZN9tNMEA20004OpenEv+0x1e6>
      OpenState=os_WaitOpen;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2202      	movs	r2, #2
 800d08c:	761a      	strb	r2, [r3, #24]
      OpenScheduler.FromNow(200);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3314      	adds	r3, #20
 800d092:	21c8      	movs	r1, #200	; 0xc8
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe f834 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device ready"));
 800d09a:	7efb      	ldrb	r3, [r7, #27]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d016      	beq.n	800d0ce <_ZN9tNMEA20004OpenEv+0x206>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	4932      	ldr	r1, [pc, #200]	; (800d170 <_ZN9tNMEA20004OpenEv+0x2a8>)
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fd fe88 	bl	800adbc <_ZN9N2kStream7printlnEPKc>
 800d0ac:	e00f      	b.n	800d0ce <_ZN9tNMEA20004OpenEv+0x206>
    } else { // Open failed, delay next open
      OpenScheduler.FromNow(1000);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3314      	adds	r3, #20
 800d0b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fe f823 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device failed to open"));
 800d0bc:	7efb      	ldrb	r3, [r7, #27]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d005      	beq.n	800d0ce <_ZN9tNMEA20004OpenEv+0x206>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	492b      	ldr	r1, [pc, #172]	; (800d174 <_ZN9tNMEA20004OpenEv+0x2ac>)
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fd fe77 	bl	800adbc <_ZN9N2kStream7printlnEPKc>
    }
    return OpenState==os_WaitOpen;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	7e1b      	ldrb	r3, [r3, #24]
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	bf0c      	ite	eq
 800d0d6:	2301      	moveq	r3, #1
 800d0d8:	2300      	movne	r3, #0
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	e042      	b.n	800d164 <_ZN9tNMEA20004OpenEv+0x29c>
  }

  // There were problems with some CAN controllers start sending immediately after
  // Initialization so we start sending delayed.
  if ( OpenState==os_WaitOpen && OpenScheduler.IsTime() ) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	7e1b      	ldrb	r3, [r3, #24]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d109      	bne.n	800d0fa <_ZN9tNMEA20004OpenEv+0x232>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3314      	adds	r3, #20
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fd ffeb 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <_ZN9tNMEA20004OpenEv+0x232>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e000      	b.n	800d0fc <_ZN9tNMEA20004OpenEv+0x234>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d018      	beq.n	800d132 <_ZN9tNMEA20004OpenEv+0x26a>
    OpenState=os_Open;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2203      	movs	r2, #3
 800d104:	761a      	strb	r2, [r3, #24]
    StartAddressClaim();
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f003 fd32 	bl	8010b70 <_ZN9tNMEA200017StartAddressClaimEv>
    tN2kSyncScheduler::SetSyncOffset();
 800d10c:	f7fd ff90 	bl	800b030 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>
    if ( OnOpen!=0 ) OnOpen();
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <_ZN9tNMEA20004OpenEv+0x256>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11c:	4798      	blx	r3
    SetHeartbeatIntervalAndOffset(DefaultHeartbeatInterval,10000); // Init default hearbeat interval and offset.
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d122:	f242 7210 	movw	r2, #10000	; 0x2710
 800d126:	f64e 2160 	movw	r1, #60000	; 0xea60
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f93c 	bl	800d3a8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
 800d130:	e011      	b.n	800d156 <_ZN9tNMEA20004OpenEv+0x28e>
  } else {
    unsigned long canId;
    unsigned char len = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    while ( CANGetFrame(canId,len,buf) );
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	681c      	ldr	r4, [r3, #0]
 800d13e:	f107 0308 	add.w	r3, r7, #8
 800d142:	f107 0213 	add.w	r2, r7, #19
 800d146:	f107 0114 	add.w	r1, r7, #20
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	47a0      	blx	r4
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d000      	beq.n	800d156 <_ZN9tNMEA20004OpenEv+0x28e>
 800d154:	e7ef      	b.n	800d136 <_ZN9tNMEA20004OpenEv+0x26e>
  }

  // For compatibility return true, when final open is waiting.
  return OpenState>=os_WaitOpen;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	7e1b      	ldrb	r3, [r3, #24]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	bf8c      	ite	hi
 800d15e:	2301      	movhi	r3, #1
 800d160:	2300      	movls	r3, #0
 800d162:	b2db      	uxtb	r3, r3
}
 800d164:	4618      	mov	r0, r3
 800d166:	3724      	adds	r7, #36	; 0x24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d16c:	007e07e0 	.word	0x007e07e0
 800d170:	08015238 	.word	0x08015238
 800d174:	0801524c 	.word	0x0801524c

0800d178 <_Z10CanIdToN2kmRhRmS_S_>:
void tNMEA2000::Restart() {
  StartAddressClaim();
}

//*****************************************************************************
void CanIdToN2k(unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst) {
 800d178:	b480      	push	{r7}
 800d17a:	b087      	sub	sp, #28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
  unsigned char CanIdPF = (unsigned char) (id >> 16);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	0c1b      	lsrs	r3, r3, #16
 800d18a:	75fb      	strb	r3, [r7, #23]
  unsigned char CanIdPS = (unsigned char) (id >> 8);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	0a1b      	lsrs	r3, r3, #8
 800d190:	75bb      	strb	r3, [r7, #22]
  unsigned char CanIdDP = (unsigned char) (id >> 24) & 1;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	0e1b      	lsrs	r3, r3, #24
 800d196:	b2db      	uxtb	r3, r3
 800d198:	f003 0301 	and.w	r3, r3, #1
 800d19c:	757b      	strb	r3, [r7, #21]

    src = (unsigned char) id >> 0;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	701a      	strb	r2, [r3, #0]
    prio = (unsigned char) ((id >> 26) & 0x7);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	0e9b      	lsrs	r3, r3, #26
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f003 0307 	and.w	r3, r3, #7
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	701a      	strb	r2, [r3, #0]

    if (CanIdPF < 240) {
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
 800d1b8:	2bef      	cmp	r3, #239	; 0xef
 800d1ba:	d80a      	bhi.n	800d1d2 <_Z10CanIdToN2kmRhRmS_S_+0x5a>
      /* PDU1 format, the PS contains the destination address */
        dst = CanIdPS;
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	7dba      	ldrb	r2, [r7, #22]
 800d1c0:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8);
 800d1c2:	7d7b      	ldrb	r3, [r7, #21]
 800d1c4:	041a      	lsls	r2, r3, #16
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	021b      	lsls	r3, r3, #8
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	601a      	str	r2, [r3, #0]
    } else {
      /* PDU2 format, the destination is implied global and the PGN is extended */
        dst = 0xff;
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
    }
}
 800d1d0:	e00b      	b.n	800d1ea <_Z10CanIdToN2kmRhRmS_S_+0x72>
        dst = 0xff;
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	22ff      	movs	r2, #255	; 0xff
 800d1d6:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
 800d1d8:	7d7b      	ldrb	r3, [r7, #21]
 800d1da:	041a      	lsls	r2, r3, #16
 800d1dc:	7dfb      	ldrb	r3, [r7, #23]
 800d1de:	021b      	lsls	r3, r3, #8
 800d1e0:	431a      	orrs	r2, r3
 800d1e2:	7dbb      	ldrb	r3, [r7, #22]
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	601a      	str	r2, [r3, #0]
}
 800d1ea:	bf00      	nop
 800d1ec:	371c      	adds	r7, #28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bc80      	pop	{r7}
 800d1f2:	4770      	bx	lr

0800d1f4 <_Z10N2ktoCanIDhmmh>:

//*****************************************************************************
unsigned long N2ktoCanID(unsigned char priority, unsigned long PGN, unsigned long Source, unsigned char Destination) {
 800d1f4:	b480      	push	{r7}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	607a      	str	r2, [r7, #4]
 800d1fe:	461a      	mov	r2, r3
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]
 800d204:	4613      	mov	r3, r2
 800d206:	73bb      	strb	r3, [r7, #14]
  unsigned char CanIdPF = (unsigned char) (PGN >> 8);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	0a1b      	lsrs	r3, r3, #8
 800d20c:	75fb      	strb	r3, [r7, #23]

  if (CanIdPF < 240) {  // PDU1 format
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
 800d210:	2bef      	cmp	r3, #239	; 0xef
 800d212:	d812      	bhi.n	800d23a <_Z10N2ktoCanIDhmmh+0x46>
     if ( (PGN & 0xff) != 0 ) return 0;  // for PDU1 format PGN lowest byte has to be 0 for the destination.
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <_Z10N2ktoCanIDhmmh+0x2c>
 800d21c:	2300      	movs	r3, #0
 800d21e:	e015      	b.n	800d24c <_Z10N2ktoCanIDhmmh+0x58>
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | ((unsigned long)Destination)<<8 | (unsigned long)Source);
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	069b      	lsls	r3, r3, #26
 800d224:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	431a      	orrs	r2, r3
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	021b      	lsls	r3, r3, #8
 800d232:	431a      	orrs	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4313      	orrs	r3, r2
 800d238:	e008      	b.n	800d24c <_Z10N2ktoCanIDhmmh+0x58>
  } else { // PDU2 format
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | (unsigned long)Source);
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	069b      	lsls	r3, r3, #26
 800d23e:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	021b      	lsls	r3, r3, #8
 800d246:	431a      	orrs	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4313      	orrs	r3, r2
  }
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	371c      	adds	r7, #28
 800d250:	46bd      	mov	sp, r7
 800d252:	bc80      	pop	{r7}
 800d254:	4770      	bx	lr

0800d256 <_ZN9tNMEA200010SendFramesEv>:

//*****************************************************************************
bool tNMEA2000::SendFrames()
{ uint16_t temp;
 800d256:	b5b0      	push	{r4, r5, r7, lr}
 800d258:	b086      	sub	sp, #24
 800d25a:	af02      	add	r7, sp, #8
 800d25c:	6078      	str	r0, [r7, #4]

  if ( CANSendFrameBuf==0 ) return true; // This can be in case, where inherited class defines own buffering.
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <_ZN9tNMEA200010SendFramesEv+0x14>
 800d266:	2301      	movs	r3, #1
 800d268:	e03f      	b.n	800d2ea <_ZN9tNMEA200010SendFramesEv+0x94>

  while (CANSendFrameBufferRead!=CANSendFrameBufferWrite) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d276:	429a      	cmp	r2, r3
 800d278:	d036      	beq.n	800d2e8 <_ZN9tNMEA200010SendFramesEv+0x92>
    temp = (CANSendFrameBufferRead + 1) % MaxCANSendFrames;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d280:	3301      	adds	r3, #1
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800d288:	fb93 f1f2 	sdiv	r1, r3, r2
 800d28c:	fb01 f202 	mul.w	r2, r1, r2
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	81fb      	strh	r3, [r7, #14]
    if ( CANSendFrame(CANSendFrameBuf[temp].id, CANSendFrameBuf[temp].len, CANSendFrameBuf[temp].buf, CANSendFrameBuf[temp].wait_sent) ) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	681c      	ldr	r4, [r3, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d29e:	89fb      	ldrh	r3, [r7, #14]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	4413      	add	r3, r2
 800d2a4:	6819      	ldr	r1, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2aa:	89fb      	ldrh	r3, [r7, #14]
 800d2ac:	011b      	lsls	r3, r3, #4
 800d2ae:	4413      	add	r3, r2
 800d2b0:	7918      	ldrb	r0, [r3, #4]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2b6:	89fb      	ldrh	r3, [r7, #14]
 800d2b8:	011b      	lsls	r3, r3, #4
 800d2ba:	4413      	add	r3, r2
 800d2bc:	1d5d      	adds	r5, r3, #5
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2c2:	89fb      	ldrh	r3, [r7, #14]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	4413      	add	r3, r2
 800d2c8:	7b5b      	ldrb	r3, [r3, #13]
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	462b      	mov	r3, r5
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	47a0      	blx	r4
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d004      	beq.n	800d2e4 <_ZN9tNMEA200010SendFramesEv+0x8e>
      CANSendFrameBufferRead=temp;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	89fa      	ldrh	r2, [r7, #14]
 800d2de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800d2e2:	e7c2      	b.n	800d26a <_ZN9tNMEA200010SendFramesEv+0x14>
      N2kFrameOutDbgStart("Frame unbuffered "); N2kFrameOutDbgln(CANSendFrameBuf[temp].id);
    } else return false;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e000      	b.n	800d2ea <_ZN9tNMEA200010SendFramesEv+0x94>
  }

  return true;
 800d2e8:	2301      	movs	r3, #1
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bdb0      	pop	{r4, r5, r7, pc}

0800d2f2 <_ZN9tNMEA20009SendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000::SendFrame(unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent) {
 800d2f2:	b590      	push	{r4, r7, lr}
 800d2f4:	b089      	sub	sp, #36	; 0x24
 800d2f6:	af02      	add	r7, sp, #8
 800d2f8:	60f8      	str	r0, [r7, #12]
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	603b      	str	r3, [r7, #0]
 800d2fe:	4613      	mov	r3, r2
 800d300:	71fb      	strb	r3, [r7, #7]

  if ( !SendFrames() || !CANSendFrame(id,len,buf,wait_sent) ) { // If we can not sent frame immediately, add it to buffer
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7ff ffa7 	bl	800d256 <_ZN9tNMEA200010SendFramesEv>
 800d308:	4603      	mov	r3, r0
 800d30a:	f083 0301 	eor.w	r3, r3, #1
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d110      	bne.n	800d336 <_ZN9tNMEA20009SendFrameEmhPKhb+0x44>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681c      	ldr	r4, [r3, #0]
 800d31a:	79fa      	ldrb	r2, [r7, #7]
 800d31c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	47a0      	blx	r4
 800d32a:	4603      	mov	r3, r0
 800d32c:	f083 0301 	eor.w	r3, r3, #1
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <_ZN9tNMEA20009SendFrameEmhPKhb+0x48>
 800d336:	2301      	movs	r3, #1
 800d338:	e000      	b.n	800d33c <_ZN9tNMEA20009SendFrameEmhPKhb+0x4a>
 800d33a:	2300      	movs	r3, #0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d02d      	beq.n	800d39c <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
    tCANSendFrame *Frame=GetNextFreeCANSendFrame();
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f000 fa3a 	bl	800d7ba <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>
 800d346:	6138      	str	r0, [r7, #16]
    if ( Frame==0 ) {
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <_ZN9tNMEA20009SendFrameEmhPKhb+0x60>
      N2kFrameOutDbgStart("Frame failed "); N2kFrameOutDbgln(id);
      return false;
 800d34e:	2300      	movs	r3, #0
 800d350:	e025      	b.n	800d39e <_ZN9tNMEA20009SendFrameEmhPKhb+0xac>
    }
    len=N2kMin<unsigned char>(len,8);
 800d352:	79fb      	ldrb	r3, [r7, #7]
 800d354:	2108      	movs	r1, #8
 800d356:	4618      	mov	r0, r3
 800d358:	f004 fa30 	bl	80117bc <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 800d35c:	4603      	mov	r3, r0
 800d35e:	71fb      	strb	r3, [r7, #7]
    Frame->id=id;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	601a      	str	r2, [r3, #0]
    Frame->len=len;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	79fa      	ldrb	r2, [r7, #7]
 800d36a:	711a      	strb	r2, [r3, #4]
    Frame->wait_sent=wait_sent;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d372:	735a      	strb	r2, [r3, #13]
    for (int i=0; i<len; i++) Frame->buf[i]=buf[i];
 800d374:	2300      	movs	r3, #0
 800d376:	617b      	str	r3, [r7, #20]
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	da0d      	bge.n	800d39c <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	4413      	add	r3, r2
 800d386:	7819      	ldrb	r1, [r3, #0]
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	4413      	add	r3, r2
 800d38e:	3305      	adds	r3, #5
 800d390:	460a      	mov	r2, r1
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	3301      	adds	r3, #1
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	e7ed      	b.n	800d378 <_ZN9tNMEA20009SendFrameEmhPKhb+0x86>
    N2kFrameOutDbgStart("Frame buffered "); N2kFrameOutDbgln(id);
  }

  return true;
 800d39c:	2301      	movs	r3, #1
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	371c      	adds	r7, #28
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd90      	pop	{r4, r7, pc}
	...

0800d3a8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>:

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
void tNMEA2000::SetHeartbeatIntervalAndOffset(uint32_t interval, uint32_t offset, int iDev) {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3bc:	d105      	bne.n	800d3ca <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x22>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	f000 809e 	beq.w	800d506 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x15e>
  InitDevices();
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7fe fe64 	bl	800c098 <_ZN9tNMEA200011InitDevicesEv>
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d3d6:	617b      	str	r3, [r7, #20]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	f280 8092 	bge.w	800d508 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	db04      	blt.n	800d3f4 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x4c>
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	f2c0 808a 	blt.w	800d508 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
    if ( interval==0xffffffff ) {
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3fa:	d10e      	bne.n	800d41a <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x72>
      interval=Devices[i].HeartbeatScheduler.GetPeriod();
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	69da      	ldr	r2, [r3, #28]
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d406:	fb01 f303 	mul.w	r3, r1, r3
 800d40a:	4413      	add	r3, r2
 800d40c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d410:	4618      	mov	r0, r3
 800d412:	f7fd fe01 	bl	800b018 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d416:	60b8      	str	r0, [r7, #8]
 800d418:	e006      	b.n	800d428 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
    } else if (interval==0xfffffffe) { // restore default
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	f113 0f02 	cmn.w	r3, #2
 800d420:	d102      	bne.n	800d428 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
      interval=DefaultHeartbeatInterval;
 800d422:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d426:	60bb      	str	r3, [r7, #8]
    }
    if ( offset==0xffffffff ) offset=Devices[i].HeartbeatScheduler.GetOffset();
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d42e:	d10d      	bne.n	800d44c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xa4>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	69da      	ldr	r2, [r3, #28]
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d43a:	fb01 f303 	mul.w	r3, r1, r3
 800d43e:	4413      	add	r3, r2
 800d440:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d444:	4618      	mov	r0, r3
 800d446:	f7fd fddc 	bl	800b002 <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 800d44a:	6078      	str	r0, [r7, #4]

    if ( interval==0 ) { // This is for test purposes
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10d      	bne.n	800d46e <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xc6>
      Devices[i].HeartbeatScheduler.Disable();
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	69da      	ldr	r2, [r3, #28]
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d45c:	fb01 f303 	mul.w	r3, r1, r3
 800d460:	4413      	add	r3, r2
 800d462:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d466:	4618      	mov	r0, r3
 800d468:	f7f3 ff3f 	bl	80012ea <_ZN17tN2kSyncScheduler7DisableEv>
 800d46c:	e047      	b.n	800d4fe <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
    } else {
      if ( interval>MaxHeartbeatInterval ) interval=MaxHeartbeatInterval;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	4a27      	ldr	r2, [pc, #156]	; (800d510 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d901      	bls.n	800d47a <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xd2>
 800d476:	4b26      	ldr	r3, [pc, #152]	; (800d510 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 800d478:	60bb      	str	r3, [r7, #8]
      if ( interval<1000 ) interval=1000;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d480:	d202      	bcs.n	800d488 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xe0>
 800d482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d486:	60bb      	str	r3, [r7, #8]

      bool changed=( Devices[i].HeartbeatScheduler.GetPeriod()!=interval || Devices[i].HeartbeatScheduler.GetOffset()!=offset ); 
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	69da      	ldr	r2, [r3, #28]
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d492:	fb01 f303 	mul.w	r3, r1, r3
 800d496:	4413      	add	r3, r2
 800d498:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fd fdbb 	bl	800b018 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d110      	bne.n	800d4cc <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x124>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	69da      	ldr	r2, [r3, #28]
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d4b4:	fb01 f303 	mul.w	r3, r1, r3
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fd fd9f 	bl	800b002 <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d001      	beq.n	800d4d0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x128>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e000      	b.n	800d4d2 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x12a>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	74fb      	strb	r3, [r7, #19]
      if ( changed ) {
 800d4d4:	7cfb      	ldrb	r3, [r7, #19]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d011      	beq.n	800d4fe <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
        Devices[i].HeartbeatScheduler.SetPeriodAndOffset(interval,offset);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	69da      	ldr	r2, [r3, #28]
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d4e4:	fb01 f303 	mul.w	r3, r1, r3
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	68b9      	ldr	r1, [r7, #8]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fd fd6b 	bl	800afce <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>
        DeviceInformationChanged=true;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	769a      	strb	r2, [r3, #26]
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	3301      	adds	r3, #1
 800d502:	617b      	str	r3, [r7, #20]
 800d504:	e768      	b.n	800d3d8 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x30>
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 800d506:	bf00      	nop
      }
    }
  }
}
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	0009ffd8 	.word	0x0009ffd8

0800d514 <_ZN9tNMEA200013SendHeartbeatEi>:
void tNMEA2000::SetHeartbeatInterval(unsigned long interval, bool /*SetAsDefault*/, int iDev) {
  SetHeartbeatIntervalAndOffset(interval,0xffffffff,iDev);
}

//*****************************************************************************
void tNMEA2000::SendHeartbeat(int iDev) {
 800d514:	b580      	push	{r7, lr}
 800d516:	b0c4      	sub	sp, #272	; 0x110
 800d518:	af02      	add	r7, sp, #8
 800d51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d51e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d522:	6018      	str	r0, [r3, #0]
 800d524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d52c:	6019      	str	r1, [r3, #0]
  if ( !IsValidDevice(iDev) ) return;
 800d52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d532:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800d536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d53a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d53e:	6811      	ldr	r1, [r2, #0]
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	f7fe f875 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800d546:	4603      	mov	r3, r0
 800d548:	f083 0301 	eor.w	r3, r3, #1
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d133      	bne.n	800d5ba <_ZN9tNMEA200013SendHeartbeatEi+0xa6>
  tN2kMsg N2kMsg;
 800d552:	f107 000c 	add.w	r0, r7, #12
 800d556:	2300      	movs	r3, #0
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	2300      	movs	r3, #0
 800d55c:	2206      	movs	r2, #6
 800d55e:	210f      	movs	r1, #15
 800d560:	f7fc fb7a 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
  SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),0xff);
 800d564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	69da      	ldr	r2, [r3, #28]
 800d570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d57e:	fb01 f303 	mul.w	r3, r1, r3
 800d582:	4413      	add	r3, r2
 800d584:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fd fd45 	bl	800b018 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d58e:	4601      	mov	r1, r0
 800d590:	f107 030c 	add.w	r3, r7, #12
 800d594:	22ff      	movs	r2, #255	; 0xff
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe f95e 	bl	800b858 <_Z12SetHeartbeatR7tN2kMsgmh>
  SendMsg(N2kMsg,iDev);
 800d59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5a0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800d5a4:	f107 010c 	add.w	r1, r7, #12
 800d5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5b0:	6812      	ldr	r2, [r2, #0]
 800d5b2:	6818      	ldr	r0, [r3, #0]
 800d5b4:	f000 f996 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d5b8:	e000      	b.n	800d5bc <_ZN9tNMEA200013SendHeartbeatEi+0xa8>
  if ( !IsValidDevice(iDev) ) return;
 800d5ba:	bf00      	nop
}
 800d5bc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <_ZN9tNMEA200013SendHeartbeatEb>:

//*****************************************************************************
void tNMEA2000::SendHeartbeat(bool force) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b0c4      	sub	sp, #272	; 0x110
 800d5c8:	af02      	add	r7, sp, #8
 800d5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5d2:	6018      	str	r0, [r3, #0]
 800d5d4:	460a      	mov	r2, r1
 800d5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5da:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d5de:	701a      	strb	r2, [r3, #0]
  if ( !IsActiveNode() ) return;
 800d5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5e8:	6818      	ldr	r0, [r3, #0]
 800d5ea:	f7fe f80d 	bl	800b608 <_ZN9tNMEA200012IsActiveNodeEv>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	f083 0301 	eor.w	r3, r3, #1
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f040 80da 	bne.w	800d7b0 <_ZN9tNMEA200013SendHeartbeatEb+0x1ec>

  for (int iDev=0; iDev<DeviceCount; iDev++) {
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6a1b      	ldr	r3, [r3, #32]
 800d60e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d612:	429a      	cmp	r2, r3
 800d614:	f280 80cd 	bge.w	800d7b2 <_ZN9tNMEA200013SendHeartbeatEb+0x1ee>
    if ( !IsAddressClaimStarted(iDev) ) {
 800d618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d61c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d620:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800d624:	6818      	ldr	r0, [r3, #0]
 800d626:	f003 facb 	bl	8010bc0 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800d62a:	4603      	mov	r3, r0
 800d62c:	f083 0301 	eor.w	r3, r3, #1
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 80b6 	beq.w	800d7a4 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
      if ( force || Devices[iDev].HeartbeatScheduler.IsTime() ) {
 800d638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d63c:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d114      	bne.n	800d670 <_ZN9tNMEA200013SendHeartbeatEb+0xac>
 800d646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	69da      	ldr	r2, [r3, #28]
 800d652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d656:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d65a:	fb01 f303 	mul.w	r3, r1, r3
 800d65e:	4413      	add	r3, r2
 800d660:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d664:	4618      	mov	r0, r3
 800d666:	f7f3 fe50 	bl	800130a <_ZN17tN2kSyncScheduler6IsTimeEv>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <_ZN9tNMEA200013SendHeartbeatEb+0xb0>
 800d670:	2301      	movs	r3, #1
 800d672:	e000      	b.n	800d676 <_ZN9tNMEA200013SendHeartbeatEb+0xb2>
 800d674:	2300      	movs	r3, #0
 800d676:	2b00      	cmp	r3, #0
 800d678:	f000 8094 	beq.w	800d7a4 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
        Devices[iDev].HeartbeatScheduler.UpdateNextTime();
 800d67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	69da      	ldr	r2, [r3, #28]
 800d688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d68c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d690:	fb01 f303 	mul.w	r3, r1, r3
 800d694:	4413      	add	r3, r2
 800d696:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f3 fe48 	bl	8001330 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
        tN2kMsg N2kMsg;
 800d6a0:	f107 0008 	add.w	r0, r7, #8
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2206      	movs	r2, #6
 800d6ac:	210f      	movs	r1, #15
 800d6ae:	f7fc fad3 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
        SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),force?0xff:Devices[iDev].HeartbeatSequence);
 800d6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	69da      	ldr	r2, [r3, #28]
 800d6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6c2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d6c6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ca:	4413      	add	r3, r2
 800d6cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fd fca1 	bl	800b018 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6dc:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <_ZN9tNMEA200013SendHeartbeatEb+0x126>
 800d6e6:	23ff      	movs	r3, #255	; 0xff
 800d6e8:	e00e      	b.n	800d708 <_ZN9tNMEA200013SendHeartbeatEb+0x144>
 800d6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	69da      	ldr	r2, [r3, #28]
 800d6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6fa:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d6fe:	fb00 f303 	mul.w	r3, r0, r3
 800d702:	4413      	add	r3, r2
 800d704:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800d708:	f107 0008 	add.w	r0, r7, #8
 800d70c:	461a      	mov	r2, r3
 800d70e:	f7fe f8a3 	bl	800b858 <_Z12SetHeartbeatR7tN2kMsgmh>
        SendMsg(N2kMsg,iDev);
 800d712:	f107 0108 	add.w	r1, r7, #8
 800d716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d71e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	f000 f8de 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
        if ( !force ) {
 800d728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d72c:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	f083 0301 	eor.w	r3, r3, #1
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d033      	beq.n	800d7a4 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
          Devices[iDev].HeartbeatSequence++;
 800d73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	69da      	ldr	r2, [r3, #28]
 800d748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d74c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d750:	fb01 f303 	mul.w	r3, r1, r3
 800d754:	4413      	add	r3, r2
 800d756:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 800d75a:	3201      	adds	r2, #1
 800d75c:	b2d2      	uxtb	r2, r2
 800d75e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
          if ( Devices[iDev].HeartbeatSequence>252 ) Devices[iDev].HeartbeatSequence=0;
 800d762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	69da      	ldr	r2, [r3, #28]
 800d76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d772:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d776:	fb01 f303 	mul.w	r3, r1, r3
 800d77a:	4413      	add	r3, r2
 800d77c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800d780:	2bfc      	cmp	r3, #252	; 0xfc
 800d782:	d90f      	bls.n	800d7a4 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
 800d784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	69da      	ldr	r2, [r3, #28]
 800d790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d794:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d798:	fb01 f303 	mul.w	r3, r1, r3
 800d79c:	4413      	add	r3, r2
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  for (int iDev=0; iDev<DeviceCount; iDev++) {
 800d7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d7ae:	e728      	b.n	800d602 <_ZN9tNMEA200013SendHeartbeatEb+0x3e>
  if ( !IsActiveNode() ) return;
 800d7b0:	bf00      	nop
        }
      }
    }
  }
}
 800d7b2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>:
#endif

//*****************************************************************************
tNMEA2000::tCANSendFrame *tNMEA2000::GetNextFreeCANSendFrame() {
 800d7ba:	b480      	push	{r7}
 800d7bc:	b085      	sub	sp, #20
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  if (CANSendFrameBuf==0) return 0;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x14>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e01f      	b.n	800d80e <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>

  uint16_t temp = (CANSendFrameBufferWrite + 1) % MaxCANSendFrames;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800d7dc:	fb93 f1f2 	sdiv	r1, r3, r2
 800d7e0:	fb01 f202 	mul.w	r2, r1, r2
 800d7e4:	1a9b      	subs	r3, r3, r2
 800d7e6:	81fb      	strh	r3, [r7, #14]

  if (temp != CANSendFrameBufferRead) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d7ee:	89fa      	ldrh	r2, [r7, #14]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d00b      	beq.n	800d80c <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x52>
    CANSendFrameBufferWrite = temp;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	89fa      	ldrh	r2, [r7, #14]
 800d7f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    return &(CANSendFrameBuf[CANSendFrameBufferWrite]);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d806:	011b      	lsls	r3, r3, #4
 800d808:	4413      	add	r3, r2
 800d80a:	e000      	b.n	800d80e <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>
  } else {
    return 0;
 800d80c:	2300      	movs	r3, #0
  }
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	bc80      	pop	{r7}
 800d816:	4770      	bx	lr

0800d818 <_ZN9tNMEA200022SendPendingInformationEv>:

//*****************************************************************************
void tNMEA2000::SendPendingInformation() {
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++ ) {
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a1b      	ldr	r3, [r3, #32]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	da56      	bge.n	800d8dc <_ZN9tNMEA200022SendPendingInformationEv+0xc4>
    if (  Devices[i].HasPendingInformation ) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	69da      	ldr	r2, [r3, #28]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d838:	fb01 f303 	mul.w	r3, r1, r3
 800d83c:	4413      	add	r3, r2
 800d83e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d842:	2b00      	cmp	r3, #0
 800d844:	d046      	beq.n	800d8d4 <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
      #if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      SendPendingTPMessage(i);
 800d846:	68f9      	ldr	r1, [r7, #12]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 fe37 	bl	800f4bc <_ZN9tNMEA200020SendPendingTPMessageEi>
      #endif
      if ( Devices[i].QueryPendingIsoAddressClaim() ) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	69da      	ldr	r2, [r3, #28]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d858:	fb01 f303 	mul.w	r3, r1, r3
 800d85c:	4413      	add	r3, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fd fd85 	bl	800b36e <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d010      	beq.n	800d88c <_ZN9tNMEA200022SendPendingInformationEv+0x74>
        SendIsoAddressClaim(0xff,i);
 800d86a:	2300      	movs	r3, #0
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	21ff      	movs	r1, #255	; 0xff
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f002 f915 	bl	800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        Devices[i].ClearPendingIsoAddressClaim();
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	69da      	ldr	r2, [r3, #28]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d880:	fb01 f303 	mul.w	r3, r1, r3
 800d884:	4413      	add	r3, r2
 800d886:	4618      	mov	r0, r3
 800d888:	f7fd fd7f 	bl	800b38a <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>
      }
      if ( Devices[i].QueryPendingProductInformation() ) SendProductInformation(i);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	69da      	ldr	r2, [r3, #28]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d896:	fb01 f303 	mul.w	r3, r1, r3
 800d89a:	4413      	add	r3, r2
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fd fdac 	bl	800b3fa <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <_ZN9tNMEA200022SendPendingInformationEv+0x98>
 800d8a8:	68f9      	ldr	r1, [r7, #12]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f002 fcb0 	bl	8010210 <_ZN9tNMEA200022SendProductInformationEi>
      if ( Devices[i].QueryPendingConfigurationInformation() ) SendConfigurationInformation(i);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	69da      	ldr	r2, [r3, #28]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d8ba:	fb01 f303 	mul.w	r3, r1, r3
 800d8be:	4413      	add	r3, r2
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fd fdd4 	bl	800b46e <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
 800d8cc:	68f9      	ldr	r1, [r7, #12]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f002 fe36 	bl	8010540 <_ZN9tNMEA200028SendConfigurationInformationEi>
  for (int i=0; i<DeviceCount; i++ ) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	e7a3      	b.n	800d824 <_ZN9tNMEA200022SendPendingInformationEv+0xc>
    }
  }
}
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>:

//*****************************************************************************
// Sends message to N2k bus
//
bool tNMEA2000::SendMsg(const tN2kMsg &N2kMsg, int DeviceIndex) {
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b090      	sub	sp, #64	; 0x40
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
  if ( dbMode==dm_None ) {
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	791b      	ldrb	r3, [r3, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d117      	bne.n	800d928 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
    if ( OpenState!=os_Open ) {
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	7e1b      	ldrb	r3, [r3, #24]
 800d8fc:	2b03      	cmp	r3, #3
 800d8fe:	d013      	beq.n	800d928 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
      if ( !(Open() && OpenState==os_Open) ) return false;  // Can not do much
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff fae1 	bl	800cec8 <_ZN9tNMEA20004OpenEv>
 800d906:	4603      	mov	r3, r0
 800d908:	f083 0301 	eor.w	r3, r3, #1
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d103      	bne.n	800d91a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x36>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	7e1b      	ldrb	r3, [r3, #24]
 800d916:	2b03      	cmp	r3, #3
 800d918:	d001      	beq.n	800d91e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a>
 800d91a:	2301      	movs	r3, #1
 800d91c:	e000      	b.n	800d920 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c>
 800d91e:	2300      	movs	r3, #0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
 800d924:	2300      	movs	r3, #0
 800d926:	e1b0      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
    }
  }

  bool result=false;
 800d928:	2300      	movs	r3, #0
 800d92a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if ( DeviceIndex>=DeviceCount) return result;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	db02      	blt.n	800d93e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x5a>
 800d938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d93c:	e1a5      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
  N2kMsg.CheckDestination();
 800d93e:	68b8      	ldr	r0, [r7, #8]
 800d940:	f7fd fad0 	bl	800aee4 <_ZNK7tN2kMsg16CheckDestinationEv>
  if (DeviceIndex>=0) { N2kMsg.ForceSource(Devices[DeviceIndex].N2kSource); } else { DeviceIndex=0; }
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	db0e      	blt.n	800d968 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x84>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	69da      	ldr	r2, [r3, #28]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d954:	fb01 f303 	mul.w	r3, r1, r3
 800d958:	4413      	add	r3, r2
 800d95a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d95e:	4619      	mov	r1, r3
 800d960:	68b8      	ldr	r0, [r7, #8]
 800d962:	f7fd fab1 	bl	800aec8 <_ZNK7tN2kMsg11ForceSourceEh>
 800d966:	e001      	b.n	800d96c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x88>
 800d968:	2300      	movs	r3, #0
 800d96a:	607b      	str	r3, [r7, #4]

  if ( N2kMsg.Source>N2kMaxCanBusAddress && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false; // CAN bus address range is 0-251. Anyway allow ISO address claim mgs.
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	7b1b      	ldrb	r3, [r3, #12]
 800d970:	2bfb      	cmp	r3, #251	; 0xfb
 800d972:	d906      	bls.n	800d982 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9e>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800d97c:	d001      	beq.n	800d982 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9e>
 800d97e:	2300      	movs	r3, #0
 800d980:	e183      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  unsigned long canId=N2ktoCanID(N2kMsg.Priority,N2kMsg.PGN,N2kMsg.Source, N2kMsg.Destination);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	7918      	ldrb	r0, [r3, #4]
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	6899      	ldr	r1, [r3, #8]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	7b1b      	ldrb	r3, [r3, #12]
 800d98e:	461a      	mov	r2, r3
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	7b5b      	ldrb	r3, [r3, #13]
 800d994:	f7ff fc2e 	bl	800d1f4 <_Z10N2ktoCanIDhmmh>
 800d998:	6238      	str	r0, [r7, #32]

  if ( canId==0 ) { // PGN validity - N2ktoCanID returns 0 for invalid PGN
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d101      	bne.n	800d9a4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xc0>
//    if (ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("Invalid PGN ")); ForwardStream->println(N2kMsg.PGN); }
    return false;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e172      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
  }

  if (N2kMode==N2km_ListenOnly) return false; // Do not send anything on listen only mode
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	795b      	ldrb	r3, [r3, #5]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xcc>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e16c      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  if (N2kMsg.PGN==0) return false;
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xd8>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e166      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  switch (dbMode) {
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	791b      	ldrb	r3, [r3, #4]
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	f000 8155 	beq.w	800dc70 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x38c>
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	f300 815d 	bgt.w	800dc86 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xf4>
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	f000 8142 	beq.w	800dc5a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x376>
 800d9d6:	e156      	b.n	800dc86 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
    case dm_None:
      N2kMsgDbgStart("Send PGN:"); N2kMsgDbgln(N2kMsg.PGN);
      N2kMsgDbgStart(" - can ID:"); N2kMsgDbgln(canId);
      if ( IsAddressClaimStarted(DeviceIndex) && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false;
 800d9d8:	6879      	ldr	r1, [r7, #4]
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f003 f8f0 	bl	8010bc0 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d006      	beq.n	800d9f4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 800d9ee:	d001      	beq.n	800d9f4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e000      	b.n	800d9f6 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x112>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x11a>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e145      	b.n	800dc8a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

      if (N2kMsg.DataLen<=8 && !IsFastPacket(N2kMsg) ) { // We can send single frame
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	2b08      	cmp	r3, #8
 800da04:	dc0b      	bgt.n	800da1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 800da06:	68b9      	ldr	r1, [r7, #8]
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f000 f9b9 	bl	800dd80 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>
 800da0e:	4603      	mov	r3, r0
 800da10:	f083 0301 	eor.w	r3, r3, #1
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e000      	b.n	800da20 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13c>
 800da1e:	2300      	movs	r3, #0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d034      	beq.n	800da8e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1aa>
          DbgPrintBuf(N2kMsg.DataLen, N2kMsg.Data,true);
          result=SendFrame(canId, N2kMsg.DataLen, N2kMsg.Data,false);
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	3314      	adds	r3, #20
 800da2e:	2100      	movs	r1, #0
 800da30:	9100      	str	r1, [sp, #0]
 800da32:	6a39      	ldr	r1, [r7, #32]
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7ff fc5c 	bl	800d2f2 <_ZN9tNMEA20009SendFrameEmhPKhb>
 800da3a:	4603      	mov	r3, r0
 800da3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN); ForwardStream->println(F(" send failed")); }
 800da40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da44:	f083 0301 	eor.w	r3, r3, #1
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 80fa 	beq.w	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 80f5 	beq.w	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	799b      	ldrb	r3, [r3, #6]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	f040 80f0 	bne.w	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	498a      	ldr	r1, [pc, #552]	; (800dc94 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fd f949 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68d8      	ldr	r0, [r3, #12]
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	220a      	movs	r2, #10
 800da7a:	4619      	mov	r1, r3
 800da7c:	f7fd f95e 	bl	800ad3c <_ZN9N2kStream5printEih>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	4984      	ldr	r1, [pc, #528]	; (800dc98 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 800da86:	4618      	mov	r0, r3
 800da88:	f7fd f998 	bl	800adbc <_ZN9N2kStream7printlnEPKc>
 800da8c:	e0da      	b.n	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
          N2kPrintFreeMemory("SendMsg, single frame");
      } else { // Send it as fast packet in multiple frames
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
        if ( N2kMsg.IsTPMessage() ) {
 800da8e:	68b8      	ldr	r0, [r7, #8]
 800da90:	f7fa fa50 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d008      	beq.n	800daac <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1c8>
          result=StartSendTPMessage(N2kMsg,DeviceIndex);
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f001 fc67 	bl	800f372 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>
 800daa4:	4603      	mov	r3, r0
 800daa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800daaa:	e0cb      	b.n	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
        } else
#endif
        {
          unsigned char temp[8]; // {0,0,0,0,0,0,0,0};
          int cur=0;
 800daac:	2300      	movs	r3, #0
 800daae:	633b      	str	r3, [r7, #48]	; 0x30
          int frames=(N2kMsg.DataLen>6 ? (N2kMsg.DataLen-6-1)/7+1+1 : 1 );
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	2b06      	cmp	r3, #6
 800dab6:	dd0b      	ble.n	800dad0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ec>
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	3b07      	subs	r3, #7
 800dabe:	4a77      	ldr	r2, [pc, #476]	; (800dc9c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b8>)
 800dac0:	fb82 1203 	smull	r1, r2, r2, r3
 800dac4:	441a      	add	r2, r3
 800dac6:	1092      	asrs	r2, r2, #2
 800dac8:	17db      	asrs	r3, r3, #31
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	3302      	adds	r3, #2
 800dace:	e000      	b.n	800dad2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ee>
 800dad0:	2301      	movs	r3, #1
 800dad2:	61fb      	str	r3, [r7, #28]
          int Order=GetSequenceCounter(N2kMsg.PGN,DeviceIndex)<<5;
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	4619      	mov	r1, r3
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f7fe fca9 	bl	800c434 <_ZN9tNMEA200018GetSequenceCounterEmi>
 800dae2:	4603      	mov	r3, r0
 800dae4:	015b      	lsls	r3, r3, #5
 800dae6:	61bb      	str	r3, [r7, #24]
          result=true;
 800dae8:	2301      	movs	r3, #1
 800daea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          for (int i = 0; i<frames && result; i++) {
 800daee:	2300      	movs	r3, #0
 800daf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	f280 80a4 	bge.w	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 800dafc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db00:	f083 0301 	eor.w	r3, r3, #1
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	f040 809c 	bne.w	800dc44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
              temp[0] = i|Order; //frame counter
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	b25a      	sxtb	r2, r3
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	b25b      	sxtb	r3, r3
 800db14:	4313      	orrs	r3, r2
 800db16:	b25b      	sxtb	r3, r3
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	743b      	strb	r3, [r7, #16]
              if (i==0) {
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d11a      	bne.n	800db58 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x274>
                  temp[1] = N2kMsg.DataLen; //total bytes in fast packet
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	b2db      	uxtb	r3, r3
 800db28:	747b      	strb	r3, [r7, #17]
                  //send the first 6 bytes
                  for (int j = 2; j<8; j++) {
 800db2a:	2302      	movs	r3, #2
 800db2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	2b07      	cmp	r3, #7
 800db32:	dc3a      	bgt.n	800dbaa <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c6>
                       temp[j]=N2kMsg.Data[cur];
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	4413      	add	r3, r2
 800db3a:	3314      	adds	r3, #20
 800db3c:	7819      	ldrb	r1, [r3, #0]
 800db3e:	f107 0210 	add.w	r2, r7, #16
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	4413      	add	r3, r2
 800db46:	460a      	mov	r2, r1
 800db48:	701a      	strb	r2, [r3, #0]
                       cur++;
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	3301      	adds	r3, #1
 800db4e:	633b      	str	r3, [r7, #48]	; 0x30
                  for (int j = 2; j<8; j++) {
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	3301      	adds	r3, #1
 800db54:	62bb      	str	r3, [r7, #40]	; 0x28
 800db56:	e7ea      	b.n	800db2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x24a>
                   }
                  N2kPrintFreeMemory("SendMsg, fastpacket");
              } else {
                   int j=1;
 800db58:	2301      	movs	r3, #1
 800db5a:	627b      	str	r3, [r7, #36]	; 0x24
                   //send the next 7 data bytes
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	2b07      	cmp	r3, #7
 800db60:	dc16      	bgt.n	800db90 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db68:	429a      	cmp	r2, r3
 800db6a:	da11      	bge.n	800db90 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
                       temp[j]=N2kMsg.Data[cur];
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	4413      	add	r3, r2
 800db72:	3314      	adds	r3, #20
 800db74:	7819      	ldrb	r1, [r3, #0]
 800db76:	f107 0210 	add.w	r2, r7, #16
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	4413      	add	r3, r2
 800db7e:	460a      	mov	r2, r1
 800db80:	701a      	strb	r2, [r3, #0]
                       cur++;
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	3301      	adds	r3, #1
 800db86:	633b      	str	r3, [r7, #48]	; 0x30
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	3301      	adds	r3, #1
 800db8c:	627b      	str	r3, [r7, #36]	; 0x24
 800db8e:	e7e5      	b.n	800db5c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x278>
                   }
                   for (; j<8; j++) {
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	2b07      	cmp	r3, #7
 800db94:	dc09      	bgt.n	800dbaa <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c6>
                       temp[j]=0xff;
 800db96:	f107 0210 	add.w	r2, r7, #16
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	4413      	add	r3, r2
 800db9e:	22ff      	movs	r2, #255	; 0xff
 800dba0:	701a      	strb	r2, [r3, #0]
                   for (; j<8; j++) {
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	3301      	adds	r3, #1
 800dba6:	627b      	str	r3, [r7, #36]	; 0x24
 800dba8:	e7f2      	b.n	800db90 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
                   }
              }

              DbgPrintBuf(8,temp,true);
              result=SendFrame(canId, 8, temp, true);
 800dbaa:	f107 0310 	add.w	r3, r7, #16
 800dbae:	2201      	movs	r2, #1
 800dbb0:	9200      	str	r2, [sp, #0]
 800dbb2:	2208      	movs	r2, #8
 800dbb4:	6a39      	ldr	r1, [r7, #32]
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7ff fb9b 	bl	800d2f2 <_ZN9tNMEA20009SendFrameEmhPKhb>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
              if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) {
 800dbc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbc6:	f083 0301 	eor.w	r3, r3, #1
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d035      	beq.n	800dc3c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d031      	beq.n	800dc3c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	799b      	ldrb	r3, [r3, #6]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d12d      	bne.n	800dc3c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
                ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	492b      	ldr	r1, [pc, #172]	; (800dc94 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fd f88b 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	68d8      	ldr	r0, [r3, #12]
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	220a      	movs	r2, #10
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	f7fd f8a0 	bl	800ad3c <_ZN9N2kStream5printEih>
                ForwardStream->print(F(", frame:")); ForwardStream->print(i); ForwardStream->print(F("/")); ForwardStream->print(frames);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	4927      	ldr	r1, [pc, #156]	; (800dca0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3bc>)
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fd f87d 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	220a      	movs	r2, #10
 800dc0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fd f893 	bl	800ad3c <_ZN9N2kStream5printEih>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	4922      	ldr	r1, [pc, #136]	; (800dca4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c0>)
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fd f870 	bl	800ad02 <_ZN9N2kStream5printEPKc>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	220a      	movs	r2, #10
 800dc28:	69f9      	ldr	r1, [r7, #28]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fd f886 	bl	800ad3c <_ZN9N2kStream5printEih>
                ForwardStream->println(F(" send failed"));
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	4918      	ldr	r1, [pc, #96]	; (800dc98 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fd f8c0 	bl	800adbc <_ZN9N2kStream7printlnEPKc>
          for (int i = 0; i<frames && result; i++) {
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	3301      	adds	r3, #1
 800dc40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc42:	e756      	b.n	800daf2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x20e>
              }
          }
        }
      };
      if ( ForwardOwnMessages() ) ForwardMessage(N2kMsg);
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f7fd fcbb 	bl	800b5c0 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d019      	beq.n	800dc84 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
 800dc50:	68b9      	ldr	r1, [r7, #8]
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f001 febd 	bl	800f9d2 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      break;
 800dc58:	e014      	b.n	800dc84 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
    case dm_ClearText:
      result=true;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.Print(ForwardStream);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	4619      	mov	r1, r3
 800dc68:	68b8      	ldr	r0, [r7, #8]
 800dc6a:	f7fc fcd9 	bl	800a620 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 800dc6e:	e00a      	b.n	800dc86 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
    case dm_Actisense:
      result=true;
 800dc70:	2301      	movs	r3, #1
 800dc72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.SendInActisenseFormat(ForwardStream);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	68b8      	ldr	r0, [r7, #8]
 800dc7e:	f7fc fd83 	bl	800a788 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 800dc82:	e000      	b.n	800dc86 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
      break;
 800dc84:	bf00      	nop
  }

  return result;
 800dc86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3738      	adds	r7, #56	; 0x38
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	08015268 	.word	0x08015268
 800dc98:	08015270 	.word	0x08015270
 800dc9c:	92492493 	.word	0x92492493
 800dca0:	08015280 	.word	0x08015280
 800dca4:	0801528c 	.word	0x0801528c

0800dca8 <_ZN9tNMEA200015IsFastPacketPGNEm>:
void tNMEA2000::SetDebugMode(tDebugMode _dbMode) {
  dbMode=_dbMode;
}

//*****************************************************************************
bool tNMEA2000::IsFastPacketPGN(unsigned long PGN) {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800dcb2:	6838      	ldr	r0, [r7, #0]
 800dcb4:	f7fd fe82 	bl	800b9bc <_Z25IsFastPacketSystemMessagem>
 800dcb8:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d115      	bne.n	800dcea <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800dcbe:	6838      	ldr	r0, [r7, #0]
 800dcc0:	f7fd ff60 	bl	800bb84 <_Z28IsMandatoryFastPacketMessagem>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10f      	bne.n	800dcea <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d105      	bne.n	800dcde <_ZN9tNMEA200015IsFastPacketPGNEm+0x36>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800dcd2:	6838      	ldr	r0, [r7, #0]
 800dcd4:	f7fd ff76 	bl	800bbc4 <_Z26IsDefaultFastPacketMessagem>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d105      	bne.n	800dcea <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 800dcde:	6838      	ldr	r0, [r7, #0]
 800dce0:	f7fe f8cc 	bl	800be7c <_Z30IsProprietaryFastPacketMessagem>
 800dce4:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <_ZN9tNMEA200015IsFastPacketPGNEm+0x46>
 800dcea:	2301      	movs	r3, #1
 800dcec:	e000      	b.n	800dcf0 <_ZN9tNMEA200015IsFastPacketPGNEm+0x48>
 800dcee:	2300      	movs	r3, #0
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <_ZN9tNMEA200015IsFastPacketPGNEm+0x50>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e03f      	b.n	800dd78 <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>

  int i;

    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	72fb      	strb	r3, [r7, #11]
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d839      	bhi.n	800dd76 <_ZN9tNMEA200015IsFastPacketPGNEm+0xce>
      if (FastPacketMessages[igroup]!=0) {
 800dd02:	7afb      	ldrb	r3, [r7, #11]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	330e      	adds	r3, #14
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d02d      	beq.n	800dd6e <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	7afb      	ldrb	r3, [r7, #11]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	330e      	adds	r3, #14
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	4413      	add	r3, r2
 800dd20:	685a      	ldr	r2, [r3, #4]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d00f      	beq.n	800dd50 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 800dd30:	7afb      	ldrb	r3, [r7, #11]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	330e      	adds	r3, #14
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	e7e2      	b.n	800dd16 <_ZN9tNMEA200015IsFastPacketPGNEm+0x6e>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 800dd50:	7afb      	ldrb	r3, [r7, #11]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	330e      	adds	r3, #14
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d101      	bne.n	800dd6e <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
         return true;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e004      	b.n	800dd78 <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	3301      	adds	r3, #1
 800dd72:	72fb      	strb	r3, [r7, #11]
 800dd74:	e7c2      	b.n	800dcfc <_ZN9tNMEA200015IsFastPacketPGNEm+0x54>
        }
      }
    }

    return false;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>:

//*****************************************************************************
bool tNMEA2000::IsFastPacket(const tN2kMsg &N2kMsg) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  if (N2kMsg.Priority>=0x80) return false; // Special handling for force to send message as single frame.
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	791b      	ldrb	r3, [r3, #4]
 800dd8e:	b25b      	sxtb	r3, r3
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	da01      	bge.n	800dd98 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x18>
 800dd94:	2300      	movs	r3, #0
 800dd96:	e007      	b.n	800dda8 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x28>

  return IsFastPacketPGN(N2kMsg.PGN);
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff ff82 	bl	800dca8 <_ZN9tNMEA200015IsFastPacketPGNEm>
 800dda4:	4603      	mov	r3, r0
 800dda6:	bf00      	nop
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>:

//*****************************************************************************
bool tNMEA2000::CheckKnownMessage(unsigned long PGN, bool &SystemMessage, bool &FastPacket) {
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	603b      	str	r3, [r7, #0]
  int i;
//    return true;
    FastPacket=false;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	701a      	strb	r2, [r3, #0]
    SystemMessage=false;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	701a      	strb	r2, [r3, #0]
    if ( PGN==0 ) { return false; }  // Unknown
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x24>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	e0ce      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check other messages
    if ( SingleFrameMessages[0]==0 && IsDefaultSingleFrameMessage(PGN) ) return true;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d107      	bne.n	800ddec <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 800dddc:	68b8      	ldr	r0, [r7, #8]
 800ddde:	f7fd fe05 	bl	800b9ec <_Z27IsDefaultSingleFrameMessagem>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 800dde8:	2301      	movs	r3, #1
 800ddea:	e000      	b.n	800ddee <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3e>
 800ddec:	2300      	movs	r3, #0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x46>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e0bd      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( (FastPacket=IsMandatoryFastPacketMessage(PGN)) ) return true;
 800ddf6:	68b8      	ldr	r0, [r7, #8]
 800ddf8:	f7fd fec4 	bl	800bb84 <_Z28IsMandatoryFastPacketMessagem>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	461a      	mov	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x60>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e0b0      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( FastPacketMessages[0]==0 && (FastPacket=IsDefaultFastPacketMessage(PGN))==true ) return true;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10c      	bne.n	800de32 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 800de18:	68b8      	ldr	r0, [r7, #8]
 800de1a:	f7fd fed3 	bl	800bbc4 <_Z26IsDefaultFastPacketMessagem>
 800de1e:	4603      	mov	r3, r0
 800de20:	461a      	mov	r2, r3
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d101      	bne.n	800de32 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 800de2e:	2301      	movs	r3, #1
 800de30:	e000      	b.n	800de34 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x84>
 800de32:	2300      	movs	r3, #0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x8c>
 800de38:	2301      	movs	r3, #1
 800de3a:	e09a      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check system messages
    if ( IsSingleFrameSystemMessage(PGN) || (FastPacket=IsFastPacketSystemMessage(PGN))==true ) {
 800de3c:	68b8      	ldr	r0, [r7, #8]
 800de3e:	f7fd fd91 	bl	800b964 <_Z26IsSingleFrameSystemMessagem>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10a      	bne.n	800de5e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xae>
 800de48:	68b8      	ldr	r0, [r7, #8]
 800de4a:	f7fd fdb7 	bl	800b9bc <_Z25IsFastPacketSystemMessagem>
 800de4e:	4603      	mov	r3, r0
 800de50:	461a      	mov	r2, r3
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d101      	bne.n	800de62 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb2>
 800de5e:	2301      	movs	r3, #1
 800de60:	e000      	b.n	800de64 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb4>
 800de62:	2300      	movs	r3, #0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc2>
      SystemMessage=true;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	701a      	strb	r2, [r3, #0]
      return true;
 800de6e:	2301      	movs	r3, #1
 800de70:	e07f      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    }

    // Check user defined messages
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800de72:	2300      	movs	r3, #0
 800de74:	74fb      	strb	r3, [r7, #19]
 800de76:	7cfb      	ldrb	r3, [r7, #19]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d872      	bhi.n	800df62 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1b2>
      if (SingleFrameMessages[igroup]!=0) {
 800de7c:	7cfb      	ldrb	r3, [r7, #19]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	330c      	adds	r3, #12
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d02d      	beq.n	800dee8 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
        for (i=0; pgm_read_dword(&SingleFrameMessages[igroup][i])!=PGN && pgm_read_dword(&SingleFrameMessages[igroup][i])!=0; i++);
 800de8c:	2300      	movs	r3, #0
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	7cfb      	ldrb	r3, [r7, #19]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	330c      	adds	r3, #12
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	4413      	add	r3, r2
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d00f      	beq.n	800deca <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 800deaa:	7cfb      	ldrb	r3, [r7, #19]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	330c      	adds	r3, #12
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	3301      	adds	r3, #1
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	e7e2      	b.n	800de90 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xe0>
        if (pgm_read_dword(&SingleFrameMessages[igroup][i])==PGN) return true;
 800deca:	7cfb      	ldrb	r3, [r7, #19]
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	330c      	adds	r3, #12
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d101      	bne.n	800dee8 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
 800dee4:	2301      	movs	r3, #1
 800dee6:	e044      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
      }

      if (FastPacketMessages[igroup]!=0) {
 800dee8:	7cfb      	ldrb	r3, [r7, #19]
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	330e      	adds	r3, #14
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d030      	beq.n	800df5a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 800def8:	2300      	movs	r3, #0
 800defa:	617b      	str	r3, [r7, #20]
 800defc:	7cfb      	ldrb	r3, [r7, #19]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	330e      	adds	r3, #14
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	4413      	add	r3, r2
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	429a      	cmp	r2, r3
 800df14:	d00f      	beq.n	800df36 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 800df16:	7cfb      	ldrb	r3, [r7, #19]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	330e      	adds	r3, #14
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	685a      	ldr	r2, [r3, #4]
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4413      	add	r3, r2
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	3301      	adds	r3, #1
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	e7e2      	b.n	800defc <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x14c>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 800df36:	7cfb      	ldrb	r3, [r7, #19]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	330e      	adds	r3, #14
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68ba      	ldr	r2, [r7, #8]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d104      	bne.n	800df5a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
         FastPacket=true;
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2201      	movs	r2, #1
 800df54:	701a      	strb	r2, [r3, #0]
         return true;
 800df56:	2301      	movs	r3, #1
 800df58:	e00b      	b.n	800df72 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 800df5a:	7cfb      	ldrb	r3, [r7, #19]
 800df5c:	3301      	adds	r3, #1
 800df5e:	74fb      	strb	r3, [r7, #19]
 800df60:	e789      	b.n	800de76 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc6>
        }
      }
    }

    FastPacket=IsProprietaryFastPacketMessage(PGN);
 800df62:	68b8      	ldr	r0, [r7, #8]
 800df64:	f7fd ff8a 	bl	800be7c <_Z30IsProprietaryFastPacketMessagem>
 800df68:	4603      	mov	r3, r0
 800df6a:	461a      	mov	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	701a      	strb	r2, [r3, #0]
    
    return false;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>:

//*****************************************************************************
void CopyBufToCANMsg(tN2kCANMsg &CANMsg, unsigned char start, unsigned char len, unsigned char *buf) {
 800df7a:	b480      	push	{r7}
 800df7c:	b087      	sub	sp, #28
 800df7e:	af00      	add	r7, sp, #0
 800df80:	60f8      	str	r0, [r7, #12]
 800df82:	607b      	str	r3, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	72fb      	strb	r3, [r7, #11]
 800df88:	4613      	mov	r3, r2
 800df8a:	72bb      	strb	r3, [r7, #10]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 800df8c:	7afb      	ldrb	r3, [r7, #11]
 800df8e:	617b      	str	r3, [r7, #20]
 800df90:	7abb      	ldrb	r3, [r7, #10]
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	429a      	cmp	r2, r3
 800df96:	bfb4      	ite	lt
 800df98:	2301      	movlt	r3, #1
 800df9a:	2300      	movge	r3, #0
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800dfa4:	2bde      	cmp	r3, #222	; 0xde
 800dfa6:	bf94      	ite	ls
 800dfa8:	2301      	movls	r3, #1
 800dfaa:	2300      	movhi	r3, #0
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	4013      	ands	r3, r2
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d016      	beq.n	800dfe4 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x6a>
          CANMsg.N2kMsg.Data[CANMsg.CopiedLen]=buf[j];
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	4413      	add	r3, r2
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	781a      	ldrb	r2, [r3, #0]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	440b      	add	r3, r1
 800dfca:	751a      	strb	r2, [r3, #20]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800dfd8:	3301      	adds	r3, #1
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 800dfe2:	e7d5      	b.n	800df90 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x16>
        }
}
 800dfe4:	bf00      	nop
 800dfe6:	371c      	adds	r7, #28
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bc80      	pop	{r7}
 800dfec:	4770      	bx	lr

0800dfee <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, bool TPMsg, uint8_t &MsgIndex) {
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b088      	sub	sp, #32
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	60f8      	str	r0, [r7, #12]
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	4611      	mov	r1, r2
 800dffa:	461a      	mov	r2, r3
 800dffc:	460b      	mov	r3, r1
 800dffe:	71fb      	strb	r3, [r7, #7]
 800e000:	4613      	mov	r3, r2
 800e002:	71bb      	strb	r3, [r7, #6]
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, uint8_t &MsgIndex) {
#endif
  unsigned long OldestMsgTime,CurTime;
  int OldestIndex;

  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	2200      	movs	r2, #0
 800e008:	701a      	strb	r2, [r3, #0]
 800e00a:	f7fc ff07 	bl	800ae1c <_Z9N2kMillisv>
 800e00e:	61f8      	str	r0, [r7, #28]
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	617b      	str	r3, [r7, #20]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e01a:	61bb      	str	r3, [r7, #24]
       MsgIndex<MaxN2kCANMsgs &&
 800e01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01e:	781a      	ldrb	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e026:	429a      	cmp	r2, r3
 800e028:	d24f      	bcs.n	800e0ca <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	4619      	mov	r1, r3
 800e034:	460b      	mov	r3, r1
 800e036:	019b      	lsls	r3, r3, #6
 800e038:	440b      	add	r3, r1
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800e042:	f083 0301 	eor.w	r3, r3, #1
 800e046:	b2db      	uxtb	r3, r3
       MsgIndex<MaxN2kCANMsgs &&
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d03e      	beq.n	800e0ca <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
         ( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	4619      	mov	r1, r3
 800e056:	460b      	mov	r3, r1
 800e058:	019b      	lsls	r3, r3, #6
 800e05a:	440b      	add	r3, r1
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4413      	add	r3, r2
 800e060:	689b      	ldr	r3, [r3, #8]
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	429a      	cmp	r2, r3
 800e066:	d12e      	bne.n	800e0c6 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	4619      	mov	r1, r3
 800e072:	460b      	mov	r3, r1
 800e074:	019b      	lsls	r3, r3, #6
 800e076:	440b      	add	r3, r1
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	7b1b      	ldrb	r3, [r3, #12]
 800e07e:	79fa      	ldrb	r2, [r7, #7]
 800e080:	429a      	cmp	r2, r3
 800e082:	d120      	bne.n	800e0c6 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	4619      	mov	r1, r3
 800e08e:	460b      	mov	r3, r1
 800e090:	019b      	lsls	r3, r3, #6
 800e092:	440b      	add	r3, r1
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	7b5b      	ldrb	r3, [r3, #13]
 800e09a:	79ba      	ldrb	r2, [r7, #6]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d112      	bne.n	800e0c6 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
           && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()==TPMsg
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	019b      	lsls	r3, r3, #6
 800e0ae:	440b      	add	r3, r1
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7f9 ff3d 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	461a      	mov	r2, r3
 800e0be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d001      	beq.n	800e0ca <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       MsgIndex<MaxN2kCANMsgs &&
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e000      	b.n	800e0cc <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xde>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d029      	beq.n	800e124 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x136>
#endif
         )
        );
       MsgIndex++) { // Find free message place
    if ( N2kIsTimeBefore(N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime,OldestMsgTime) ) {
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	460b      	mov	r3, r1
 800e0dc:	019b      	lsls	r3, r3, #6
 800e0de:	440b      	add	r3, r1
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e0e8:	69f9      	ldr	r1, [r7, #28]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fc ff5b 	bl	800afa6 <_Z15N2kIsTimeBeforemm>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00f      	beq.n	800e116 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x128>
      OldestIndex=MsgIndex;
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	61bb      	str	r3, [r7, #24]
      OldestMsgTime=N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	4619      	mov	r1, r3
 800e106:	460b      	mov	r3, r1
 800e108:	019b      	lsls	r3, r3, #6
 800e10a:	440b      	add	r3, r1
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e114:	61fb      	str	r3, [r7, #28]
       MsgIndex++) { // Find free message place
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	781b      	ldrb	r3, [r3, #0]
  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 800e11a:	3301      	adds	r3, #1
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e120:	701a      	strb	r2, [r3, #0]
 800e122:	e77b      	b.n	800e01c <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x2e>
    }
  }
  if ( MsgIndex==MaxN2kCANMsgs && N2kHasElapsed(OldestMsgTime,Max_N2kMsgBuf_Time,CurTime) ) {
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e126:	781a      	ldrb	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e12e:	429a      	cmp	r2, r3
 800e130:	d109      	bne.n	800e146 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 800e132:	697a      	ldr	r2, [r7, #20]
 800e134:	2164      	movs	r1, #100	; 0x64
 800e136:	69f8      	ldr	r0, [r7, #28]
 800e138:	f7f9 f98c 	bl	8007454 <_Z13N2kHasElapsedmmm>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 800e142:	2301      	movs	r3, #1
 800e144:	e000      	b.n	800e148 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x15a>
 800e146:	2300      	movs	r3, #0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d010      	beq.n	800e16e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x180>
    MsgIndex=OldestIndex; // Use the old one, which has timed out
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	701a      	strb	r2, [r3, #0]
    N2kCANMsgBuf[MsgIndex].FreeMessage();
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	4619      	mov	r1, r3
 800e15e:	460b      	mov	r3, r1
 800e160:	019b      	lsls	r3, r3, #6
 800e162:	440b      	add	r3, r1
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fc fef9 	bl	800af60 <_ZN10tN2kCANMsg11FreeMessageEv>
  }

}
 800e16e:	bf00      	nop
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <_ZN9tNMEA200012SendTPCM_BAMEi>:

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)

//*****************************************************************************
bool tNMEA2000::SendTPCM_BAM(int iDev) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b0c4      	sub	sp, #272	; 0x110
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e186:	6018      	str	r0, [r3, #0]
 800e188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e190:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 800e192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e19a:	6818      	ldr	r0, [r3, #0]
 800e19c:	f7fd fa34 	bl	800b608 <_ZN9tNMEA200012IsActiveNodeEv>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	f083 0301 	eor.w	r3, r3, #1
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <_ZN9tNMEA200012SendTPCM_BAMEi+0x38>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e0a6      	b.n	800e2fe <_ZN9tNMEA200012SendTPCM_BAMEi+0x186>

  tN2kMsg N2kMsg;
 800e1b0:	f107 0008 	add.w	r0, r7, #8
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	2206      	movs	r2, #6
 800e1bc:	210f      	movs	r1, #15
 800e1be:	f7fb fd4b 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  N2kMsg.Source=Devices[iDev].N2kSource;
 800e1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	69da      	ldr	r2, [r3, #28]
 800e1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e1dc:	fb01 f303 	mul.w	r3, r1, r3
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800e1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e1ee:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=0xff;
 800e1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e1f8:	22ff      	movs	r2, #255	; 0xff
 800e1fa:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 800e1fc:	f107 0308 	add.w	r3, r7, #8
 800e200:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e204:	4618      	mov	r0, r3
 800e206:	f7fb fd59 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e20e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e212:	2206      	movs	r2, #6
 800e214:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_BAM);
 800e216:	f107 0308 	add.w	r3, r7, #8
 800e21a:	2120      	movs	r1, #32
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fb fe8d 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 800e222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	69da      	ldr	r2, [r3, #28]
 800e22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e23c:	fb01 f303 	mul.w	r3, r1, r3
 800e240:	4413      	add	r3, r2
 800e242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 800e248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	f107 0308 	add.w	r3, r7, #8
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7fb fe26 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 800e25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e25e:	4a2a      	ldr	r2, [pc, #168]	; (800e308 <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 800e260:	fb82 1203 	smull	r1, r2, r2, r3
 800e264:	441a      	add	r2, r3
 800e266:	1092      	asrs	r2, r2, #2
 800e268:	17db      	asrs	r3, r3, #31
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	b2d8      	uxtb	r0, r3
 800e26e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e272:	4b25      	ldr	r3, [pc, #148]	; (800e308 <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 800e274:	fb83 1302 	smull	r1, r3, r3, r2
 800e278:	4413      	add	r3, r2
 800e27a:	1099      	asrs	r1, r3, #2
 800e27c:	17d3      	asrs	r3, r2, #31
 800e27e:	1ac9      	subs	r1, r1, r3
 800e280:	460b      	mov	r3, r1
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	1a5b      	subs	r3, r3, r1
 800e286:	1ad1      	subs	r1, r2, r3
 800e288:	2900      	cmp	r1, #0
 800e28a:	d001      	beq.n	800e290 <_ZN9tNMEA200012SendTPCM_BAMEi+0x118>
 800e28c:	2301      	movs	r3, #1
 800e28e:	e000      	b.n	800e292 <_ZN9tNMEA200012SendTPCM_BAMEi+0x11a>
 800e290:	2300      	movs	r3, #0
 800e292:	4403      	add	r3, r0
 800e294:	b2da      	uxtb	r2, r3
 800e296:	f107 0308 	add.w	r3, r7, #8
 800e29a:	4611      	mov	r1, r2
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fb fe4d 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e2a2:	f107 0308 	add.w	r3, r7, #8
 800e2a6:	21ff      	movs	r1, #255	; 0xff
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fb fe47 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 800e2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	69da      	ldr	r2, [r3, #28]
 800e2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e2c8:	fb01 f303 	mul.w	r3, r1, r3
 800e2cc:	4413      	add	r3, r2
 800e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	f107 0308 	add.w	r3, r7, #8
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fb fdf8 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 800e2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e2:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800e2e6:	f107 0108 	add.w	r1, r7, #8
 800e2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2f2:	6812      	ldr	r2, [r2, #0]
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	f7ff faf5 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	bf00      	nop
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	92492493 	.word	0x92492493

0800e30c <_ZN9tNMEA200012SendTPCM_RTSEi>:

//*****************************************************************************
bool tNMEA2000::SendTPCM_RTS(int iDev) {
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b0c4      	sub	sp, #272	; 0x110
 800e310:	af02      	add	r7, sp, #8
 800e312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e31a:	6018      	str	r0, [r3, #0]
 800e31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e324:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 800e326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	f7fd f96a 	bl	800b608 <_ZN9tNMEA200012IsActiveNodeEv>
 800e334:	4603      	mov	r3, r0
 800e336:	f083 0301 	eor.w	r3, r3, #1
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <_ZN9tNMEA200012SendTPCM_RTSEi+0x38>
 800e340:	2300      	movs	r3, #0
 800e342:	e0b7      	b.n	800e4b4 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1a8>

  tN2kMsg N2kMsg;
 800e344:	f107 0008 	add.w	r0, r7, #8
 800e348:	2300      	movs	r3, #0
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	2300      	movs	r3, #0
 800e34e:	2206      	movs	r2, #6
 800e350:	210f      	movs	r1, #15
 800e352:	f7fb fc81 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e35a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	69da      	ldr	r2, [r3, #28]
 800e362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e370:	fb01 f303 	mul.w	r3, r1, r3
 800e374:	4413      	add	r3, r2
 800e376:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800e37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e37e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e382:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 800e384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69da      	ldr	r2, [r3, #28]
 800e390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e39e:	fb01 f303 	mul.w	r3, r1, r3
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e3b0:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 800e3b2:	f107 0308 	add.w	r3, r7, #8
 800e3b6:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fb fc7e 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e3c8:	2206      	movs	r2, #6
 800e3ca:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_RTS);
 800e3cc:	f107 0308 	add.w	r3, r7, #8
 800e3d0:	2110      	movs	r1, #16
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fb fdb2 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 800e3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	69da      	ldr	r2, [r3, #28]
 800e3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e3f2:	fb01 f303 	mul.w	r3, r1, r3
 800e3f6:	4413      	add	r3, r2
 800e3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 800e3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e402:	b29a      	uxth	r2, r3
 800e404:	f107 0308 	add.w	r3, r7, #8
 800e408:	4611      	mov	r1, r2
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fb fd4b 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 800e410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e414:	4a2a      	ldr	r2, [pc, #168]	; (800e4c0 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b4>)
 800e416:	fb82 1203 	smull	r1, r2, r2, r3
 800e41a:	441a      	add	r2, r3
 800e41c:	1092      	asrs	r2, r2, #2
 800e41e:	17db      	asrs	r3, r3, #31
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	b2d8      	uxtb	r0, r3
 800e424:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e428:	4b25      	ldr	r3, [pc, #148]	; (800e4c0 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b4>)
 800e42a:	fb83 1302 	smull	r1, r3, r3, r2
 800e42e:	4413      	add	r3, r2
 800e430:	1099      	asrs	r1, r3, #2
 800e432:	17d3      	asrs	r3, r2, #31
 800e434:	1ac9      	subs	r1, r1, r3
 800e436:	460b      	mov	r3, r1
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	1a5b      	subs	r3, r3, r1
 800e43c:	1ad1      	subs	r1, r2, r3
 800e43e:	2900      	cmp	r1, #0
 800e440:	d001      	beq.n	800e446 <_ZN9tNMEA200012SendTPCM_RTSEi+0x13a>
 800e442:	2301      	movs	r3, #1
 800e444:	e000      	b.n	800e448 <_ZN9tNMEA200012SendTPCM_RTSEi+0x13c>
 800e446:	2300      	movs	r3, #0
 800e448:	4403      	add	r3, r0
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	f107 0308 	add.w	r3, r7, #8
 800e450:	4611      	mov	r1, r2
 800e452:	4618      	mov	r0, r3
 800e454:	f7fb fd72 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e458:	f107 0308 	add.w	r3, r7, #8
 800e45c:	21ff      	movs	r1, #255	; 0xff
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fb fd6c 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 800e464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	69da      	ldr	r2, [r3, #28]
 800e470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e47e:	fb01 f303 	mul.w	r3, r1, r3
 800e482:	4413      	add	r3, r2
 800e484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e486:	461a      	mov	r2, r3
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fb fd1d 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 800e494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e498:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800e49c:	f107 0108 	add.w	r1, r7, #8
 800e4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4a8:	6812      	ldr	r2, [r2, #0]
 800e4aa:	6818      	ldr	r0, [r3, #0]
 800e4ac:	f7ff fa1a 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	bf00      	nop
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	92492493 	.word	0x92492493

0800e4c4 <_Z12TPCtsPacketsh>:

unsigned char TPCtsPackets(unsigned char nPackets) { return tNMEA2000::N2kMax<unsigned char>(1,tNMEA2000::N2kMin<unsigned char>(nPackets,TP_MAX_FRAMES)); }
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	71fb      	strb	r3, [r7, #7]
 800e4ce:	79fb      	ldrb	r3, [r7, #7]
 800e4d0:	2105      	movs	r1, #5
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f003 f972 	bl	80117bc <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	4619      	mov	r1, r3
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f003 f981 	bl	80117e4 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <_ZN9tNMEA200012SendTPCM_CTSEmhihh>:

//*****************************************************************************
void tNMEA2000::SendTPCM_CTS(unsigned long PGN, unsigned char Destination, int iDev, unsigned char nPackets, unsigned char NextPacketNumber) {
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b0c7      	sub	sp, #284	; 0x11c
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800e4f6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800e4fa:	6020      	str	r0, [r4, #0]
 800e4fc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800e500:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800e504:	6001      	str	r1, [r0, #0]
 800e506:	4611      	mov	r1, r2
 800e508:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e50c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800e510:	6013      	str	r3, [r2, #0]
 800e512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e516:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e51a:	460a      	mov	r2, r1
 800e51c:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800e51e:	f107 0014 	add.w	r0, r7, #20
 800e522:	2300      	movs	r3, #0
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	2300      	movs	r3, #0
 800e528:	2206      	movs	r2, #6
 800e52a:	210f      	movs	r1, #15
 800e52c:	f7fb fb94 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800e530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	f7fd f865 	bl	800b608 <_ZN9tNMEA200012IsActiveNodeEv>
 800e53e:	4603      	mov	r3, r0
 800e540:	f083 0301 	eor.w	r3, r3, #1
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d164      	bne.n	800e614 <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x128>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e54a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	69da      	ldr	r2, [r3, #28]
 800e556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e55a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e564:	fb01 f303 	mul.w	r3, r1, r3
 800e568:	4413      	add	r3, r2
 800e56a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e56e:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800e572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e576:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800e580:	f107 0314 	add.w	r3, r7, #20
 800e584:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fb fb97 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e58e:	2306      	movs	r3, #6
 800e590:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_CTS);
 800e592:	f107 0314 	add.w	r3, r7, #20
 800e596:	2111      	movs	r1, #17
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fb fccf 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(TPCtsPackets(nPackets));
 800e59e:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff ff8e 	bl	800e4c4 <_Z12TPCtsPacketsh>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	f107 0314 	add.w	r3, r7, #20
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fb fcc2 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NextPacketNumber);
 800e5b8:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 800e5bc:	f107 0314 	add.w	r3, r7, #20
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fb fcba 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e5c8:	f107 0314 	add.w	r3, r7, #20
 800e5cc:	21ff      	movs	r1, #255	; 0xff
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fb fcb4 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e5d4:	f107 0314 	add.w	r3, r7, #20
 800e5d8:	21ff      	movs	r1, #255	; 0xff
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fb fcae 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800e5e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	f107 0314 	add.w	r3, r7, #20
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fb fc6c 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800e5f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e5fa:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e5fe:	f107 0114 	add.w	r1, r7, #20
 800e602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e60a:	6812      	ldr	r2, [r2, #0]
 800e60c:	6818      	ldr	r0, [r3, #0]
 800e60e:	f7ff f969 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e612:	e000      	b.n	800e616 <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x12a>
  if ( !IsActiveNode() ) return;
 800e614:	bf00      	nop
}
 800e616:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd90      	pop	{r4, r7, pc}

0800e61e <_ZN9tNMEA200015SendTPCM_EndAckEmhith>:

//*****************************************************************************
void tNMEA2000::SendTPCM_EndAck(unsigned long PGN, unsigned char Destination, int iDev, uint16_t nBytes, unsigned char nPackets) {
 800e61e:	b590      	push	{r4, r7, lr}
 800e620:	b0c7      	sub	sp, #284	; 0x11c
 800e622:	af02      	add	r7, sp, #8
 800e624:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800e628:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800e62c:	6020      	str	r0, [r4, #0]
 800e62e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800e632:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800e636:	6001      	str	r1, [r0, #0]
 800e638:	4611      	mov	r1, r2
 800e63a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e63e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e648:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e64c:	460a      	mov	r2, r1
 800e64e:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800e650:	f107 0014 	add.w	r0, r7, #20
 800e654:	2300      	movs	r3, #0
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2300      	movs	r3, #0
 800e65a:	2206      	movs	r2, #6
 800e65c:	210f      	movs	r1, #15
 800e65e:	f7fb fafb 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800e662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	f7fc ffcc 	bl	800b608 <_ZN9tNMEA200012IsActiveNodeEv>
 800e670:	4603      	mov	r3, r0
 800e672:	f083 0301 	eor.w	r3, r3, #1
 800e676:	b2db      	uxtb	r3, r3
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d159      	bne.n	800e730 <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x112>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e67c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69da      	ldr	r2, [r3, #28]
 800e688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e68c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e696:	fb01 f303 	mul.w	r3, r1, r3
 800e69a:	4413      	add	r3, r2
 800e69c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e6a0:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800e6a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6a8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800e6b2:	f107 0314 	add.w	r3, r7, #20
 800e6b6:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fb fafe 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e6c0:	2306      	movs	r3, #6
 800e6c2:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_ACK);
 800e6c4:	f107 0314 	add.w	r3, r7, #20
 800e6c8:	2113      	movs	r1, #19
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fb fc36 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add2ByteUInt(nBytes);
 800e6d0:	f8b7 2120 	ldrh.w	r2, [r7, #288]	; 0x120
 800e6d4:	f107 0314 	add.w	r3, r7, #20
 800e6d8:	4611      	mov	r1, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fb fbe3 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nPackets);
 800e6e0:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fb fc26 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e6f0:	f107 0314 	add.w	r3, r7, #20
 800e6f4:	21ff      	movs	r1, #255	; 0xff
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fb fc20 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800e6fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	f107 0314 	add.w	r3, r7, #20
 800e70a:	4611      	mov	r1, r2
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fb fbde 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800e712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e716:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e71a:	f107 0114 	add.w	r1, r7, #20
 800e71e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e726:	6812      	ldr	r2, [r2, #0]
 800e728:	6818      	ldr	r0, [r3, #0]
 800e72a:	f7ff f8db 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e72e:	e000      	b.n	800e732 <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x114>
  if ( !IsActiveNode() ) return;
 800e730:	bf00      	nop
}
 800e732:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e736:	46bd      	mov	sp, r7
 800e738:	bd90      	pop	{r4, r7, pc}

0800e73a <_ZN9tNMEA200014SendTPCM_AbortEmhih>:

//*****************************************************************************
void tNMEA2000::SendTPCM_Abort(unsigned long PGN, unsigned char Destination, int iDev, unsigned char AbortCode) {
 800e73a:	b590      	push	{r4, r7, lr}
 800e73c:	b0c7      	sub	sp, #284	; 0x11c
 800e73e:	af02      	add	r7, sp, #8
 800e740:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800e744:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800e748:	6020      	str	r0, [r4, #0]
 800e74a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800e74e:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800e752:	6001      	str	r1, [r0, #0]
 800e754:	4611      	mov	r1, r2
 800e756:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e75a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e764:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e768:	460a      	mov	r2, r1
 800e76a:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 800e76c:	f107 0014 	add.w	r0, r7, #20
 800e770:	2300      	movs	r3, #0
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	2206      	movs	r2, #6
 800e778:	210f      	movs	r1, #15
 800e77a:	f7fb fa6d 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 800e77e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	f7fc ff3e 	bl	800b608 <_ZN9tNMEA200012IsActiveNodeEv>
 800e78c:	4603      	mov	r3, r0
 800e78e:	f083 0301 	eor.w	r3, r3, #1
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d15d      	bne.n	800e854 <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11a>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e79c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	69da      	ldr	r2, [r3, #28]
 800e7a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e7b2:	fb01 f303 	mul.w	r3, r1, r3
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e7bc:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 800e7c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7c4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 800e7ce:	f107 0314 	add.w	r3, r7, #20
 800e7d2:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fb fa70 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e7dc:	2306      	movs	r3, #6
 800e7de:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_Abort);
 800e7e0:	f107 0314 	add.w	r3, r7, #20
 800e7e4:	21ff      	movs	r1, #255	; 0xff
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fb fba8 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(AbortCode);
 800e7ec:	f897 2120 	ldrb.w	r2, [r7, #288]	; 0x120
 800e7f0:	f107 0314 	add.w	r3, r7, #20
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fb fba0 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e7fc:	f107 0314 	add.w	r3, r7, #20
 800e800:	21ff      	movs	r1, #255	; 0xff
 800e802:	4618      	mov	r0, r3
 800e804:	f7fb fb9a 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e808:	f107 0314 	add.w	r3, r7, #20
 800e80c:	21ff      	movs	r1, #255	; 0xff
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fb fb94 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 800e814:	f107 0314 	add.w	r3, r7, #20
 800e818:	21ff      	movs	r1, #255	; 0xff
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fb fb8e 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800e820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	f107 0314 	add.w	r3, r7, #20
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7fb fb4c 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 800e836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e83a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e83e:	f107 0114 	add.w	r1, r7, #20
 800e842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e84a:	6812      	ldr	r2, [r2, #0]
 800e84c:	6818      	ldr	r0, [r3, #0]
 800e84e:	f7ff f849 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e852:	e000      	b.n	800e856 <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11c>
  if ( !IsActiveNode() ) return;
 800e854:	bf00      	nop
}
 800e856:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd90      	pop	{r4, r7, pc}

0800e85e <_ZN9tNMEA20008SendTPDTEi>:

//*****************************************************************************
// Caller should take care of not calling this after all has been done.
// Use HasAllTPDTSent for checking.
bool tNMEA2000::SendTPDT(int iDev) {
 800e85e:	b580      	push	{r7, lr}
 800e860:	b0c6      	sub	sp, #280	; 0x118
 800e862:	af02      	add	r7, sp, #8
 800e864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e868:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e86c:	6018      	str	r0, [r3, #0]
 800e86e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e872:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e876:	6019      	str	r1, [r3, #0]
  tN2kMsg N2kMsg;
 800e878:	f107 000c 	add.w	r0, r7, #12
 800e87c:	2300      	movs	r3, #0
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	2300      	movs	r3, #0
 800e882:	2206      	movs	r2, #6
 800e884:	210f      	movs	r1, #15
 800e886:	f7fb f9e7 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 800e88a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e88e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	69da      	ldr	r2, [r3, #28]
 800e896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e89a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e8a4:	fb01 f303 	mul.w	r3, r1, r3
 800e8a8:	4413      	add	r3, r2
 800e8aa:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800e8ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8b6:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 800e8b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	69da      	ldr	r2, [r3, #28]
 800e8c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e8d2:	fb01 f303 	mul.w	r3, r1, r3
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e8dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8e4:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_DT);
 800e8e6:	f107 030c 	add.w	r3, r7, #12
 800e8ea:	f44f 416b 	mov.w	r1, #60160	; 0xeb00
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fb f9e4 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 800e8f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8fc:	2206      	movs	r2, #6
 800e8fe:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(Devices[iDev].NextDTSequence+1);
 800e900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	69da      	ldr	r2, [r3, #28]
 800e90c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e91a:	fb01 f303 	mul.w	r3, r1, r3
 800e91e:	4413      	add	r3, r2
 800e920:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800e924:	3301      	adds	r3, #1
 800e926:	b2da      	uxtb	r2, r3
 800e928:	f107 030c 	add.w	r3, r7, #12
 800e92c:	4611      	mov	r1, r2
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fb fb04 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  int iByteToSend=Devices[iDev].NextDTSequence*7;
 800e934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	69da      	ldr	r2, [r3, #28]
 800e940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e94e:	fb01 f303 	mul.w	r3, r1, r3
 800e952:	4413      	add	r3, r2
 800e954:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800e958:	461a      	mov	r2, r3
 800e95a:	4613      	mov	r3, r2
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	1a9b      	subs	r3, r3, r2
 800e960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 800e964:	2300      	movs	r3, #0
 800e966:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e96a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e96e:	2b06      	cmp	r3, #6
 800e970:	dc41      	bgt.n	800e9f6 <_ZN9tNMEA20008SendTPDTEi+0x198>
    if ( iByteToSend<Devices[iDev].PendingTPMsg.DataLen ) {
 800e972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e976:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	69da      	ldr	r2, [r3, #28]
 800e97e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e982:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e98c:	fb01 f303 	mul.w	r3, r1, r3
 800e990:	4413      	add	r3, r2
 800e992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e994:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800e998:	429a      	cmp	r2, r3
 800e99a:	da1b      	bge.n	800e9d4 <_ZN9tNMEA20008SendTPDTEi+0x176>
      N2kMsg.AddByte(Devices[iDev].PendingTPMsg.Data[iByteToSend]);
 800e99c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	69da      	ldr	r2, [r3, #28]
 800e9a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e9b6:	fb01 f303 	mul.w	r3, r1, r3
 800e9ba:	441a      	add	r2, r3
 800e9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9c0:	4413      	add	r3, r2
 800e9c2:	334c      	adds	r3, #76	; 0x4c
 800e9c4:	781a      	ldrb	r2, [r3, #0]
 800e9c6:	f107 030c 	add.w	r3, r7, #12
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fb fab5 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 800e9d2:	e005      	b.n	800e9e0 <_ZN9tNMEA20008SendTPDTEi+0x182>
    } else N2kMsg.AddByte(0xff);
 800e9d4:	f107 030c 	add.w	r3, r7, #12
 800e9d8:	21ff      	movs	r1, #255	; 0xff
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fb faae 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 800e9e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e9ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e9f4:	e7b9      	b.n	800e96a <_ZN9tNMEA20008SendTPDTEi+0x10c>
  }
  Devices[iDev].NextDTSequence++;
 800e9f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	69da      	ldr	r2, [r3, #28]
 800ea02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ea10:	fb01 f303 	mul.w	r3, r1, r3
 800ea14:	4413      	add	r3, r2
 800ea16:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 800ea1a:	3201      	adds	r2, #1
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

  return SendMsg(N2kMsg,iDev);
 800ea22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea26:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800ea2a:	f107 010c 	add.w	r1, r7, #12
 800ea2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ea36:	6812      	ldr	r2, [r2, #0]
 800ea38:	6818      	ldr	r0, [r3, #0]
 800ea3a:	f7fe ff53 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800ea3e:	4603      	mov	r3, r0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <_ZN9tNMEA200014HasAllTPDTSentEi>:

//*****************************************************************************
bool tNMEA2000::HasAllTPDTSent(int iDev) {
 800ea4a:	b480      	push	{r7}
 800ea4c:	b083      	sub	sp, #12
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
 800ea52:	6039      	str	r1, [r7, #0]
  return ( Devices[iDev].NextDTSequence*7>=Devices[iDev].PendingTPMsg.DataLen );
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	69da      	ldr	r2, [r3, #28]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ea5e:	fb01 f303 	mul.w	r3, r1, r3
 800ea62:	4413      	add	r3, r2
 800ea64:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	00db      	lsls	r3, r3, #3
 800ea6e:	1a9a      	subs	r2, r3, r2
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	69d9      	ldr	r1, [r3, #28]
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800ea7a:	fb00 f303 	mul.w	r3, r0, r3
 800ea7e:	440b      	add	r3, r1
 800ea80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea82:	429a      	cmp	r2, r3
 800ea84:	bfac      	ite	ge
 800ea86:	2301      	movge	r3, #1
 800ea88:	2300      	movlt	r3, #0
 800ea8a:	b2db      	uxtb	r3, r3
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bc80      	pop	{r7}
 800ea94:	4770      	bx	lr
	...

0800ea98 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>:

//*****************************************************************************
bool tNMEA2000::TestHandleTPMessage(unsigned long PGN, unsigned char Source, unsigned char Destination,
                                    unsigned char len, unsigned char *buf,
                                    uint8_t &MsgIndex) {
 800ea98:	b590      	push	{r4, r7, lr}
 800ea9a:	b08f      	sub	sp, #60	; 0x3c
 800ea9c:	af02      	add	r7, sp, #8
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	71fb      	strb	r3, [r7, #7]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	71bb      	strb	r3, [r7, #6]
  MsgIndex=MaxN2kCANMsgs;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800eab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eab6:	701a      	strb	r2, [r3, #0]
  int iDev=FindSourceDeviceIndex(Destination);
 800eab8:	79bb      	ldrb	r3, [r7, #6]
 800eaba:	4619      	mov	r1, r3
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f000 ff40 	bl	800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800eac2:	62b8      	str	r0, [r7, #40]	; 0x28

  if ( PGN==TP_CM ) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 800eaca:	f040 8268 	bne.w	800ef9e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x506>
    unsigned char TP_CM_Control=buf[0];
 800eace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int Index=5;
 800ead6:	2305      	movs	r3, #5
 800ead8:	617b      	str	r3, [r7, #20]
    unsigned long TransportPGN=GetBuf3ByteUInt(Index,buf);
 800eada:	f107 0314 	add.w	r3, r7, #20
 800eade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fb fbac 	bl	800a23e <_Z15GetBuf3ByteUIntRiPKh>
 800eae6:	6238      	str	r0, [r7, #32]

    switch (TP_CM_Control) {
 800eae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaec:	2b20      	cmp	r3, #32
 800eaee:	dc2b      	bgt.n	800eb48 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0xb0>
 800eaf0:	2b10      	cmp	r3, #16
 800eaf2:	f2c0 824d 	blt.w	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 800eaf6:	3b10      	subs	r3, #16
 800eaf8:	2b10      	cmp	r3, #16
 800eafa:	f200 8249 	bhi.w	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 800eafe:	a201      	add	r2, pc, #4	; (adr r2, 800eb04 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x6c>)
 800eb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb04:	0800eb51 	.word	0x0800eb51
 800eb08:	0800edcd 	.word	0x0800edcd
 800eb0c:	0800ef91 	.word	0x0800ef91
 800eb10:	0800eefb 	.word	0x0800eefb
 800eb14:	0800ef91 	.word	0x0800ef91
 800eb18:	0800ef91 	.word	0x0800ef91
 800eb1c:	0800ef91 	.word	0x0800ef91
 800eb20:	0800ef91 	.word	0x0800ef91
 800eb24:	0800ef91 	.word	0x0800ef91
 800eb28:	0800ef91 	.word	0x0800ef91
 800eb2c:	0800ef91 	.word	0x0800ef91
 800eb30:	0800ef91 	.word	0x0800ef91
 800eb34:	0800ef91 	.word	0x0800ef91
 800eb38:	0800ef91 	.word	0x0800ef91
 800eb3c:	0800ef91 	.word	0x0800ef91
 800eb40:	0800ef91 	.word	0x0800ef91
 800eb44:	0800eb51 	.word	0x0800eb51
 800eb48:	2bff      	cmp	r3, #255	; 0xff
 800eb4a:	f000 81f5 	beq.w	800ef38 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4a0>
 800eb4e:	e21f      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_BAM:
      case TP_CM_RTS: {
        N2kMsgDbgln("Got TP Command");
        Index=1;
 800eb50:	2301      	movs	r3, #1
 800eb52:	617b      	str	r3, [r7, #20]
        uint16_t nBytes=GetBuf2ByteUInt(Index,buf);
 800eb54:	f107 0314 	add.w	r3, r7, #20
 800eb58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fb fb60 	bl	800a220 <_Z15GetBuf2ByteUIntRiPKh>
 800eb60:	4603      	mov	r3, r0
 800eb62:	83bb      	strh	r3, [r7, #28]
        uint8_t TPMaxPackets=buf[Index++];
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	1c5a      	adds	r2, r3, #1
 800eb68:	617a      	str	r2, [r7, #20]
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb6e:	4413      	add	r3, r2
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	76fb      	strb	r3, [r7, #27]
        //Index++; // reserved

        FindFreeCANMsgIndex(TransportPGN,Source,Destination,true,MsgIndex);
 800eb74:	79b9      	ldrb	r1, [r7, #6]
 800eb76:	79fa      	ldrb	r2, [r7, #7]
 800eb78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb7a:	9301      	str	r3, [sp, #4]
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	460b      	mov	r3, r1
 800eb82:	6a39      	ldr	r1, [r7, #32]
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f7ff fa32 	bl	800dfee <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>

        if (MsgIndex==MaxN2kCANMsgs) { // No free msg place
 800eb8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb8c:	781a      	ldrb	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d111      	bne.n	800ebbc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x124>
          N2kMsgDbgStart("No free msg slot"); N2kMsgDbgln();
          if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to abort transport
 800eb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb9c:	2b10      	cmp	r3, #16
 800eb9e:	f040 81ea 	bne.w	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f2c0 81e6 	blt.w	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);
 800ebaa:	79fa      	ldrb	r2, [r7, #7]
 800ebac:	2301      	movs	r3, #1
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	6a39      	ldr	r1, [r7, #32]
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7ff fdc0 	bl	800e73a <_ZN9tNMEA200014SendTPCM_AbortEmhih>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
            }
          }
        }
        break;
 800ebba:	e1dc      	b.n	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
          N2kCANMsgBuf[MsgIndex].KnownMessage=CheckKnownMessage(TransportPGN,N2kCANMsgBuf[MsgIndex].SystemMessage,FastPacket);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	019b      	lsls	r3, r3, #6
 800ebca:	440b      	add	r3, r1
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4413      	add	r3, r2
 800ebd0:	f103 01fe 	add.w	r1, r3, #254	; 0xfe
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	019b      	lsls	r3, r3, #6
 800ebe2:	4403      	add	r3, r0
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	18d4      	adds	r4, r2, r3
 800ebe8:	f107 0313 	add.w	r3, r7, #19
 800ebec:	460a      	mov	r2, r1
 800ebee:	6a39      	ldr	r1, [r7, #32]
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f7ff f8dd 	bl	800ddb0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800ebfc:	8bbb      	ldrh	r3, [r7, #28]
 800ebfe:	2bde      	cmp	r3, #222	; 0xde
 800ec00:	d818      	bhi.n	800ec34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	019b      	lsls	r3, r3, #6
 800ec10:	440b      	add	r3, r1
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	4413      	add	r3, r2
 800ec16:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d108      	bne.n	800ec30 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x198>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f7fc fce0 	bl	800b5e4 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 800ec24:	4603      	mov	r3, r0
 800ec26:	f083 0301 	eor.w	r3, r3, #1
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d001      	beq.n	800ec34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 800ec30:	2301      	movs	r3, #1
 800ec32:	e000      	b.n	800ec36 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19e>
 800ec34:	2300      	movs	r3, #0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 80b6 	beq.w	800eda8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x310>
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	4619      	mov	r1, r3
 800ec46:	460b      	mov	r3, r1
 800ec48:	019b      	lsls	r3, r3, #6
 800ec4a:	440b      	add	r3, r1
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4413      	add	r3, r2
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(7 /* Priority? */,TransportPGN,Source,Destination);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	460b      	mov	r3, r1
 800ec62:	019b      	lsls	r3, r3, #6
 800ec64:	440b      	add	r3, r1
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	79fa      	ldrb	r2, [r7, #7]
 800ec6e:	79bb      	ldrb	r3, [r7, #6]
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	4613      	mov	r3, r2
 800ec74:	6a3a      	ldr	r2, [r7, #32]
 800ec76:	2107      	movs	r1, #7
 800ec78:	f7fb f83b 	bl	8009cf2 <_ZN7tN2kMsg4InitEhmhh>
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	4619      	mov	r1, r3
 800ec86:	460b      	mov	r3, r1
 800ec88:	019b      	lsls	r3, r3, #6
 800ec8a:	440b      	add	r3, r1
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	4413      	add	r3, r2
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            N2kCANMsgBuf[MsgIndex].LastFrame=0;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	4619      	mov	r1, r3
 800eca0:	460b      	mov	r3, r1
 800eca2:	019b      	lsls	r3, r3, #6
 800eca4:	440b      	add	r3, r1
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	4413      	add	r3, r2
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=nBytes;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	460b      	mov	r3, r1
 800ecbc:	019b      	lsls	r3, r3, #6
 800ecbe:	440b      	add	r3, r1
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	8bba      	ldrh	r2, [r7, #28]
 800ecc6:	611a      	str	r2, [r3, #16]
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage();
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	019b      	lsls	r3, r3, #6
 800ecd6:	440b      	add	r3, r1
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	2101      	movs	r1, #1
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc f8e3 	bl	800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>
            N2kCANMsgBuf[MsgIndex].TPMaxPackets=TPMaxPackets;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ece8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	4619      	mov	r1, r3
 800ecee:	460b      	mov	r3, r1
 800ecf0:	019b      	lsls	r3, r3, #6
 800ecf2:	440b      	add	r3, r1
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	7efa      	ldrb	r2, [r7, #27]
 800ecfa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 800ecfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed02:	2b10      	cmp	r3, #16
 800ed04:	d142      	bne.n	800ed8c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
 800ed06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	db3f      	blt.n	800ed8c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
              SendTPCM_CTS(TransportPGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	4619      	mov	r1, r3
 800ed16:	460b      	mov	r3, r1
 800ed18:	019b      	lsls	r3, r3, #6
 800ed1a:	440b      	add	r3, r1
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	4413      	add	r3, r2
 800ed20:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800ed28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	019b      	lsls	r3, r3, #6
 800ed32:	4403      	add	r3, r0
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	440b      	add	r3, r1
 800ed38:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	79f9      	ldrb	r1, [r7, #7]
 800ed42:	9301      	str	r3, [sp, #4]
 800ed44:	9200      	str	r2, [sp, #0]
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	460a      	mov	r2, r1
 800ed4a:	6a39      	ldr	r1, [r7, #32]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff fbcd 	bl	800e4ec <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
              N2kCANMsgBuf[MsgIndex].TPRequireCTS=TPCtsPackets(N2kCANMsgBuf[MsgIndex].TPMaxPackets);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	019b      	lsls	r3, r3, #6
 800ed60:	440b      	add	r3, r1
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	4413      	add	r3, r2
 800ed66:	f893 1101 	ldrb.w	r1, [r3, #257]	; 0x101
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	4618      	mov	r0, r3
 800ed74:	4603      	mov	r3, r0
 800ed76:	019b      	lsls	r3, r3, #6
 800ed78:	4403      	add	r3, r0
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	18d4      	adds	r4, r2, r3
 800ed7e:	4608      	mov	r0, r1
 800ed80:	f7ff fba0 	bl	800e4c4 <_Z12TPCtsPacketsh>
 800ed84:	4603      	mov	r3, r0
 800ed86:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
        break;
 800ed8a:	e0f4      	b.n	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              N2kCANMsgBuf[MsgIndex].TPMaxPackets=0xff; // TPMaxPackets>0 indicates that it is TP message
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	4619      	mov	r1, r3
 800ed96:	460b      	mov	r3, r1
 800ed98:	019b      	lsls	r3, r3, #6
 800ed9a:	440b      	add	r3, r1
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	4413      	add	r3, r2
 800eda0:	22ff      	movs	r2, #255	; 0xff
 800eda2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        break;
 800eda6:	e0e6      	b.n	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 800eda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edac:	2b10      	cmp	r3, #16
 800edae:	f040 80e2 	bne.w	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f2c0 80de 	blt.w	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
 800edba:	79fa      	ldrb	r2, [r7, #7]
 800edbc:	2301      	movs	r3, #1
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	6a39      	ldr	r1, [r7, #32]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f7ff fcb8 	bl	800e73a <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        break;
 800edca:	e0d4      	b.n	800ef76 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
      }
      case TP_CM_CTS:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800edcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f7fc fc2e 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800edd4:	4603      	mov	r3, r0
 800edd6:	f083 0301 	eor.w	r3, r3, #1
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f040 80cc 	bne.w	800ef7a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e2>
        N2kMsgDbgStart("Got TP CTS"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	69da      	ldr	r2, [r3, #28]
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800edec:	fb01 f303 	mul.w	r3, r1, r3
 800edf0:	4413      	add	r3, r2
 800edf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7f8 fb7b 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f040 80bd 	bne.w	800ef7e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e6>
        if ( Devices[iDev].PendingTPMsg.PGN!=TransportPGN ) { // Some failure on communication
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	69da      	ldr	r2, [r3, #28]
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ee0e:	fb01 f303 	mul.w	r3, r1, r3
 800ee12:	4413      	add	r3, r2
 800ee14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee16:	6a3a      	ldr	r2, [r7, #32]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d004      	beq.n	800ee26 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x38e>
          EndSendTPMessage(iDev); // Should we retry from beginning?
 800ee1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f000 fb1f 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
          break;
 800ee24:	e0b4      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        }
        // Now respond with next data packets
        if ( buf[1]>0 ) { // Note that with 0, receiver wants to have break
 800ee26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee28:	3301      	adds	r3, #1
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d055      	beq.n	800eedc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
          if ( buf[2]-1!=Devices[iDev].NextDTSequence ) { // We got sequence error
 800ee30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee32:	3302      	adds	r3, #2
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	69d1      	ldr	r1, [r2, #28]
 800ee3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee3e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800ee42:	fb00 f202 	mul.w	r2, r0, r2
 800ee46:	440a      	add	r2, r1
 800ee48:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d004      	beq.n	800ee5a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3c2>
            EndSendTPMessage(iDev); // Should we retry from beginning?
 800ee50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 fb05 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
            break;
 800ee58:	e09a      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
          }
          uint8_t MaxTPSequences=buf[1];
 800ee5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee5c:	785b      	ldrb	r3, [r3, #1]
 800ee5e:	77fb      	strb	r3, [r7, #31]
          bool TPDTResult=true;
 800ee60:	2301      	movs	r3, #1
 800ee62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          for ( uint8_t iSeq=0; TPDTResult &&iSeq<MaxTPSequences && !HasAllTPDTSent(iDev); iSeq++ ) TPDTResult&=SendTPDT(iDev);
 800ee66:	2300      	movs	r3, #0
 800ee68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ee6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d010      	beq.n	800ee96 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800ee74:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ee78:	7ffb      	ldrb	r3, [r7, #31]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d20b      	bcs.n	800ee96 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800ee7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f7ff fde2 	bl	800ea4a <_ZN9tNMEA200014HasAllTPDTSentEi>
 800ee86:	4603      	mov	r3, r0
 800ee88:	f083 0301 	eor.w	r3, r3, #1
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 800ee92:	2301      	movs	r3, #1
 800ee94:	e000      	b.n	800ee98 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x400>
 800ee96:	2300      	movs	r3, #0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d014      	beq.n	800eec6 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x42e>
 800ee9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f7ff fcdd 	bl	800e85e <_ZN9tNMEA20008SendTPDTEi>
 800eea4:	4603      	mov	r3, r0
 800eea6:	461a      	mov	r2, r3
 800eea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeac:	4013      	ands	r3, r2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	bf14      	ite	ne
 800eeb2:	2301      	movne	r3, #1
 800eeb4:	2300      	moveq	r3, #0
 800eeb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eeba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eebe:	3301      	adds	r3, #1
 800eec0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800eec4:	e7d2      	b.n	800ee6c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3d4>
          if ( !TPDTResult ) EndSendTPMessage(iDev);
 800eec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeca:	f083 0301 	eor.w	r3, r3, #1
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d003      	beq.n	800eedc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
 800eed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f000 fac3 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
        }
        Devices[iDev].NextDTSendTime.FromNow(100); // Set timeout for next response
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	69da      	ldr	r2, [r3, #28]
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800eee6:	fb01 f303 	mul.w	r3, r1, r3
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800eef0:	2164      	movs	r1, #100	; 0x64
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fc f905 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
        break;
 800eef8:	e04a      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_ACK:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800eefa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7fc fb97 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800ef02:	4603      	mov	r3, r0
 800ef04:	f083 0301 	eor.w	r3, r3, #1
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d139      	bne.n	800ef82 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ea>
        N2kMsgDbgStart("Got TP ACK"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	69da      	ldr	r2, [r3, #28]
 800ef12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef14:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ef18:	fb01 f303 	mul.w	r3, r1, r3
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7f8 fae5 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d12b      	bne.n	800ef86 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ee>
        EndSendTPMessage(iDev);
 800ef2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f000 fa96 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 800ef36:	e02b      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_Abort:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800ef38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7fc fb78 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800ef40:	4603      	mov	r3, r0
 800ef42:	f083 0301 	eor.w	r3, r3, #1
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d11e      	bne.n	800ef8a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f2>
        N2kMsgDbgStart("Got TP Abort"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	69da      	ldr	r2, [r3, #28]
 800ef50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef52:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ef56:	fb01 f303 	mul.w	r3, r1, r3
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7f8 fac6 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d110      	bne.n	800ef8e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f6>
        EndSendTPMessage(iDev);
 800ef6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f000 fa77 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 800ef74:	e00c      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        break;
 800ef76:	bf00      	nop
 800ef78:	e00a      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800ef7a:	bf00      	nop
 800ef7c:	e008      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800ef7e:	bf00      	nop
 800ef80:	e006      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800ef82:	bf00      	nop
 800ef84:	e004      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800ef86:	bf00      	nop
 800ef88:	e002      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 800ef8a:	bf00      	nop
 800ef8c:	e000      	b.n	800ef90 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 800ef8e:	bf00      	nop
      default:
        ;
    }
    MsgIndex=MaxN2kCANMsgs;  // After TP_CM, message is newer ready.
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ef96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef98:	701a      	strb	r2, [r3, #0]
    return true;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e1ab      	b.n	800f2f6 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  } else if ( PGN==TP_DT ) { // Datapacket
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 800efa4:	f040 81a6 	bne.w	800f2f4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85c>
    N2kMsgDbgStart("Got TP data"); N2kMsgDbgln(MsgIndex);
    // So we need to find TP msg which sender and destination matches.
    for (MsgIndex=0;
 800efa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efaa:	2200      	movs	r2, #0
 800efac:	701a      	strb	r2, [r3, #0]
         MsgIndex<MaxN2kCANMsgs &&
 800efae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efb0:	781a      	ldrb	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800efb8:	429a      	cmp	r2, r3
 800efba:	d23e      	bcs.n	800f03a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	4619      	mov	r1, r3
 800efc6:	460b      	mov	r3, r1
 800efc8:	019b      	lsls	r3, r3, #6
 800efca:	440b      	add	r3, r1
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	4413      	add	r3, r2
 800efd0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
         MsgIndex<MaxN2kCANMsgs &&
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d12e      	bne.n	800f036 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	4619      	mov	r1, r3
 800efe2:	460b      	mov	r3, r1
 800efe4:	019b      	lsls	r3, r3, #6
 800efe6:	440b      	add	r3, r1
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	4413      	add	r3, r2
 800efec:	4618      	mov	r0, r3
 800efee:	f7f8 ffa1 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 800eff2:	4603      	mov	r3, r0
 800eff4:	f083 0301 	eor.w	r3, r3, #1
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	d11b      	bne.n	800f036 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	4619      	mov	r1, r3
 800f008:	460b      	mov	r3, r1
 800f00a:	019b      	lsls	r3, r3, #6
 800f00c:	440b      	add	r3, r1
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	4413      	add	r3, r2
 800f012:	7b5b      	ldrb	r3, [r3, #13]
 800f014:	79ba      	ldrb	r2, [r7, #6]
 800f016:	429a      	cmp	r2, r3
 800f018:	d10d      	bne.n	800f036 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	4619      	mov	r1, r3
 800f024:	460b      	mov	r3, r1
 800f026:	019b      	lsls	r3, r3, #6
 800f028:	440b      	add	r3, r1
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	7b1b      	ldrb	r3, [r3, #12]
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 800f030:	79fa      	ldrb	r2, [r7, #7]
 800f032:	429a      	cmp	r2, r3
 800f034:	d001      	beq.n	800f03a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         MsgIndex<MaxN2kCANMsgs &&
 800f036:	2301      	movs	r3, #1
 800f038:	e000      	b.n	800f03c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a4>
 800f03a:	2300      	movs	r3, #0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d006      	beq.n	800f04e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5b6>
          );
         MsgIndex++);
 800f040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f042:	781b      	ldrb	r3, [r3, #0]
    for (MsgIndex=0;
 800f044:	3301      	adds	r3, #1
 800f046:	b2da      	uxtb	r2, r3
 800f048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f04a:	701a      	strb	r2, [r3, #0]
 800f04c:	e7af      	b.n	800efae <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x516>
    // if (MsgIndex==MaxN2kCANMsgs) N2kMsgDbgln("TP data msg not found");
    // for (int i=1; i<len; i++) N2kMsgDbgln(buf[i]);
    if (MsgIndex<MaxN2kCANMsgs) { // found TP message under reception
 800f04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f050:	781a      	ldrb	r2, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f058:	429a      	cmp	r2, r3
 800f05a:	f080 8149 	bcs.w	800f2f0 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
      N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
      if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right packet is coming
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	4619      	mov	r1, r3
 800f068:	460b      	mov	r3, r1
 800f06a:	019b      	lsls	r3, r3, #6
 800f06c:	440b      	add	r3, r1
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4413      	add	r3, r2
 800f072:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f076:	3301      	adds	r3, #1
 800f078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f07a:	7812      	ldrb	r2, [r2, #0]
 800f07c:	4293      	cmp	r3, r2
 800f07e:	f040 80f1 	bne.w	800f264 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x7cc>
        // Add packet to the message
        CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	4619      	mov	r1, r3
 800f08c:	460b      	mov	r3, r1
 800f08e:	019b      	lsls	r3, r3, #6
 800f090:	440b      	add	r3, r1
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	18d0      	adds	r0, r2, r3
 800f096:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800f09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f09c:	2101      	movs	r1, #1
 800f09e:	f7fe ff6c 	bl	800df7a <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
        N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	019b      	lsls	r3, r3, #6
 800f0b0:	440b      	add	r3, r1
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0b8:	7812      	ldrb	r2, [r2, #0]
 800f0ba:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        // Transport protocol is slower, so to avoid timeout, we reset message time
        N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime=N2kMillis();
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	019b      	lsls	r3, r3, #6
 800f0cc:	440b      	add	r3, r1
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	18d4      	adds	r4, r2, r3
 800f0d2:	f7fb fea3 	bl	800ae1c <_Z9N2kMillisv>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if ( N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen ) { // all done
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	019b      	lsls	r3, r3, #6
 800f0ea:	440b      	add	r3, r1
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	4619      	mov	r1, r3
 800f100:	460b      	mov	r3, r1
 800f102:	019b      	lsls	r3, r3, #6
 800f104:	440b      	add	r3, r1
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4413      	add	r3, r2
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	4298      	cmp	r0, r3
 800f10e:	db4c      	blt.n	800f1aa <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x712>
          N2kCANMsgBuf[MsgIndex].Ready=true;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	4619      	mov	r1, r3
 800f11a:	460b      	mov	r3, r1
 800f11c:	019b      	lsls	r3, r3, #6
 800f11e:	440b      	add	r3, r1
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	2201      	movs	r2, #1
 800f126:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // send response
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f12e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	4619      	mov	r1, r3
 800f134:	460b      	mov	r3, r1
 800f136:	019b      	lsls	r3, r3, #6
 800f138:	440b      	add	r3, r1
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	4413      	add	r3, r2
 800f13e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f142:	2b00      	cmp	r3, #0
 800f144:	f000 80be 	beq.w	800f2c4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 800f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f2c0 80ba 	blt.w	800f2c4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_EndAck(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen,N2kCANMsgBuf[MsgIndex].LastFrame);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	4619      	mov	r1, r3
 800f15a:	460b      	mov	r3, r1
 800f15c:	019b      	lsls	r3, r3, #6
 800f15e:	440b      	add	r3, r1
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	6898      	ldr	r0, [r3, #8]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	4619      	mov	r1, r3
 800f170:	460b      	mov	r3, r1
 800f172:	019b      	lsls	r3, r3, #6
 800f174:	440b      	add	r3, r1
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	461c      	mov	r4, r3
 800f188:	4623      	mov	r3, r4
 800f18a:	019b      	lsls	r3, r3, #6
 800f18c:	4423      	add	r3, r4
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	440b      	add	r3, r1
 800f192:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f196:	79f9      	ldrb	r1, [r7, #7]
 800f198:	9301      	str	r3, [sp, #4]
 800f19a:	9200      	str	r2, [sp, #0]
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	460a      	mov	r2, r1
 800f1a0:	4601      	mov	r1, r0
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff fa3b 	bl	800e61e <_ZN9tNMEA200015SendTPCM_EndAckEmhith>
 800f1a8:	e08c      	b.n	800f2c4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        } else {
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && ((N2kCANMsgBuf[MsgIndex].LastFrame)%N2kCANMsgBuf[MsgIndex].TPRequireCTS)==0 ) { // send response
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	019b      	lsls	r3, r3, #6
 800f1b8:	440b      	add	r3, r1
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4413      	add	r3, r2
 800f1be:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d07e      	beq.n	800f2c4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	019b      	lsls	r3, r3, #6
 800f1d4:	440b      	add	r3, r1
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	019b      	lsls	r3, r3, #6
 800f1ec:	4403      	add	r3, r0
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	440b      	add	r3, r1
 800f1f2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f1f6:	fbb2 f1f3 	udiv	r1, r2, r3
 800f1fa:	fb01 f303 	mul.w	r3, r1, r3
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	b2db      	uxtb	r3, r3
 800f202:	2b00      	cmp	r3, #0
 800f204:	d15e      	bne.n	800f2c4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_CTS(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	4619      	mov	r1, r3
 800f210:	460b      	mov	r3, r1
 800f212:	019b      	lsls	r3, r3, #6
 800f214:	440b      	add	r3, r1
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	6898      	ldr	r0, [r3, #8]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	4619      	mov	r1, r3
 800f226:	460b      	mov	r3, r1
 800f228:	019b      	lsls	r3, r3, #6
 800f22a:	440b      	add	r3, r1
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4413      	add	r3, r2
 800f230:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	461c      	mov	r4, r3
 800f23e:	4623      	mov	r3, r4
 800f240:	019b      	lsls	r3, r3, #6
 800f242:	4423      	add	r3, r4
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	440b      	add	r3, r1
 800f248:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	79f9      	ldrb	r1, [r7, #7]
 800f252:	9301      	str	r3, [sp, #4]
 800f254:	9200      	str	r2, [sp, #0]
 800f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f258:	460a      	mov	r2, r1
 800f25a:	4601      	mov	r1, r0
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f7ff f945 	bl	800e4ec <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
 800f262:	e02f      	b.n	800f2c4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        }
      } else { // Wrong packet - either we lost packet or sender sends wrong, so free this
        N2kMsgDbgStart("Invalid packet: "); N2kMsgDbgln(buf[0]);
        if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // We need to abort transport
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	4619      	mov	r1, r3
 800f26e:	460b      	mov	r3, r1
 800f270:	019b      	lsls	r3, r3, #6
 800f272:	440b      	add	r3, r1
 800f274:	009b      	lsls	r3, r3, #2
 800f276:	4413      	add	r3, r2
 800f278:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d014      	beq.n	800f2aa <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
 800f280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f282:	2b00      	cmp	r3, #0
 800f284:	db11      	blt.n	800f2aa <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
          SendTPCM_Abort(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,TP_CM_AbortTimeout);  // Abort transport
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f28a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	4619      	mov	r1, r3
 800f290:	460b      	mov	r3, r1
 800f292:	019b      	lsls	r3, r3, #6
 800f294:	440b      	add	r3, r1
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	6899      	ldr	r1, [r3, #8]
 800f29c:	79fa      	ldrb	r2, [r7, #7]
 800f29e:	2303      	movs	r3, #3
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f7ff fa48 	bl	800e73a <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        }
        N2kCANMsgBuf[MsgIndex].FreeMessage();
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	019b      	lsls	r3, r3, #6
 800f2b8:	440b      	add	r3, r1
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	4413      	add	r3, r2
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fb fe4e 	bl	800af60 <_ZN10tN2kCANMsg11FreeMessageEv>

      }
      if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	019b      	lsls	r3, r3, #6
 800f2d2:	440b      	add	r3, r1
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f2dc:	f083 0301 	eor.w	r3, r3, #1
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d004      	beq.n	800f2f0 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ee:	701a      	strb	r2, [r3, #0]
    }
    return true; // We handled message
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e000      	b.n	800f2f6 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  }

  return false;
 800f2f4:	2300      	movs	r3, #0
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3734      	adds	r7, #52	; 0x34
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd90      	pop	{r4, r7, pc}
 800f2fe:	bf00      	nop

0800f300 <_ZN7tN2kMsgaSERKS_>:
class tN2kMsg
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	791a      	ldrb	r2, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	711a      	strb	r2, [r3, #4]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	689a      	ldr	r2, [r3, #8]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	609a      	str	r2, [r3, #8]
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	7b1a      	ldrb	r2, [r3, #12]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	731a      	strb	r2, [r3, #12]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	7b5a      	ldrb	r2, [r3, #13]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	735a      	strb	r2, [r3, #13]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	691a      	ldr	r2, [r3, #16]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	611a      	str	r2, [r3, #16]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f103 0114 	add.w	r1, r3, #20
 800f338:	22de      	movs	r2, #222	; 0xde
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	3314      	adds	r3, #20
 800f33e:	2a00      	cmp	r2, #0
 800f340:	db05      	blt.n	800f34e <_ZN7tN2kMsgaSERKS_+0x4e>
 800f342:	7818      	ldrb	r0, [r3, #0]
 800f344:	7008      	strb	r0, [r1, #0]
 800f346:	3101      	adds	r1, #1
 800f348:	3301      	adds	r3, #1
 800f34a:	3a01      	subs	r2, #1
 800f34c:	e7f7      	b.n	800f33e <_ZN7tN2kMsgaSERKS_+0x3e>
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4618      	mov	r0, r3
 800f36a:	370c      	adds	r7, #12
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bc80      	pop	{r7}
 800f370:	4770      	bx	lr

0800f372 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>:

//*****************************************************************************
bool tNMEA2000::StartSendTPMessage(const tN2kMsg& msg, int iDev) {
 800f372:	b580      	push	{r7, lr}
 800f374:	b086      	sub	sp, #24
 800f376:	af00      	add	r7, sp, #0
 800f378:	60f8      	str	r0, [r7, #12]
 800f37a:	60b9      	str	r1, [r7, #8]
 800f37c:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 800f37e:	6879      	ldr	r1, [r7, #4]
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7fc f955 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800f386:	4603      	mov	r3, r0
 800f388:	f083 0301 	eor.w	r3, r3, #1
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x24>
 800f392:	2300      	movs	r3, #0
 800f394:	e061      	b.n	800f45a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  if ( Devices[iDev].PendingTPMsg.PGN!=0 ) return false; // No room for sending TP message
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	69da      	ldr	r2, [r3, #28]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f3a0:	fb01 f303 	mul.w	r3, r1, r3
 800f3a4:	4413      	add	r3, r2
 800f3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d001      	beq.n	800f3b0 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x3e>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	e054      	b.n	800f45a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  int result=false;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	617b      	str	r3, [r7, #20]

  Devices[iDev].HasPendingInformation=true;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	69da      	ldr	r2, [r3, #28]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f3be:	fb01 f303 	mul.w	r3, r1, r3
 800f3c2:	4413      	add	r3, r2
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  Devices[iDev].PendingTPMsg=msg;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	69da      	ldr	r2, [r3, #28]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f3d4:	fb01 f303 	mul.w	r3, r1, r3
 800f3d8:	4413      	add	r3, r2
 800f3da:	3338      	adds	r3, #56	; 0x38
 800f3dc:	68b9      	ldr	r1, [r7, #8]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7ff ff8e 	bl	800f300 <_ZN7tN2kMsgaSERKS_>
  Devices[iDev].NextDTSequence=0;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	69da      	ldr	r2, [r3, #28]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f3ee:	fb01 f303 	mul.w	r3, r1, r3
 800f3f2:	4413      	add	r3, r2
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  Devices[iDev].NextDTSendTime.FromNow(50);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	69da      	ldr	r2, [r3, #28]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f404:	fb01 f303 	mul.w	r3, r1, r3
 800f408:	4413      	add	r3, r2
 800f40a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f40e:	2132      	movs	r1, #50	; 0x32
 800f410:	4618      	mov	r0, r3
 800f412:	f7fb fe76 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
  if ( IsBroadcast(msg.Destination) ) { // Start with BAM
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	7b5b      	ldrb	r3, [r3, #13]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7f8 f869 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d006      	beq.n	800f434 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xc2>
    result=SendTPCM_BAM(iDev);
 800f426:	6879      	ldr	r1, [r7, #4]
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7fe fea5 	bl	800e178 <_ZN9tNMEA200012SendTPCM_BAMEi>
 800f42e:	4603      	mov	r3, r0
 800f430:	617b      	str	r3, [r7, #20]
 800f432:	e005      	b.n	800f440 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xce>
  } else {
    result=SendTPCM_RTS(iDev);
 800f434:	6879      	ldr	r1, [r7, #4]
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7fe ff68 	bl	800e30c <_ZN9tNMEA200012SendTPCM_RTSEi>
 800f43c:	4603      	mov	r3, r0
 800f43e:	617b      	str	r3, [r7, #20]
  }

  if ( !result ) EndSendTPMessage(iDev); // Currently no retry
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d103      	bne.n	800f44e <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xdc>
 800f446:	6879      	ldr	r1, [r7, #4]
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f000 f80a 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>

  return result;
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2b00      	cmp	r3, #0
 800f452:	bf14      	ite	ne
 800f454:	2301      	movne	r3, #1
 800f456:	2300      	moveq	r3, #0
 800f458:	b2db      	uxtb	r3, r3
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <_ZN9tNMEA200016EndSendTPMessageEi>:

//*****************************************************************************
void tNMEA2000::EndSendTPMessage(int iDev) {
 800f462:	b580      	push	{r7, lr}
 800f464:	b082      	sub	sp, #8
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
 800f46a:	6039      	str	r1, [r7, #0]
  Devices[iDev].PendingTPMsg.Clear();
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	69da      	ldr	r2, [r3, #28]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f476:	fb01 f303 	mul.w	r3, r1, r3
 800f47a:	4413      	add	r3, r2
 800f47c:	3338      	adds	r3, #56	; 0x38
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fa fc71 	bl	8009d66 <_ZN7tN2kMsg5ClearEv>
  Devices[iDev].NextDTSendTime.Disable();
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	69da      	ldr	r2, [r3, #28]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f48e:	fb01 f303 	mul.w	r3, r1, r3
 800f492:	4413      	add	r3, r2
 800f494:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fb fde5 	bl	800b068 <_ZN13tN2kScheduler7DisableEv>
  Devices[iDev].UpdateHasPendingInformation();
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	69da      	ldr	r2, [r3, #28]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f4a8:	fb01 f303 	mul.w	r3, r1, r3
 800f4ac:	4413      	add	r3, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fc f80c 	bl	800b4cc <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
}
 800f4b4:	bf00      	nop
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <_ZN9tNMEA200020SendPendingTPMessageEi>:

//*****************************************************************************
void tNMEA2000::SendPendingTPMessage(int iDev) {
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  if ( Devices[iDev].PendingTPMsg.PGN!=0 && Devices[iDev].NextDTSendTime.IsTime() ) { // Pending message and timed out
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	69da      	ldr	r2, [r3, #28]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f4d0:	fb01 f303 	mul.w	r3, r1, r3
 800f4d4:	4413      	add	r3, r2
 800f4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d011      	beq.n	800f500 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	69da      	ldr	r2, [r3, #28]
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f4e6:	fb01 f303 	mul.w	r3, r1, r3
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fb fde8 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d001      	beq.n	800f500 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e000      	b.n	800f502 <_ZN9tNMEA200020SendPendingTPMessageEi+0x46>
 800f500:	2300      	movs	r3, #0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d031      	beq.n	800f56a <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
    if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) { // For broadcast we just send next data
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	69da      	ldr	r2, [r3, #28]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f510:	fb01 f303 	mul.w	r3, r1, r3
 800f514:	4413      	add	r3, r2
 800f516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7f7 ffe9 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01d      	beq.n	800f562 <_ZN9tNMEA200020SendPendingTPMessageEi+0xa6>
      SendTPDT(iDev);
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7ff f998 	bl	800e85e <_ZN9tNMEA20008SendTPDTEi>
      Devices[iDev].NextDTSendTime.FromNow(50);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	69da      	ldr	r2, [r3, #28]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f538:	fb01 f303 	mul.w	r3, r1, r3
 800f53c:	4413      	add	r3, r2
 800f53e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f542:	2132      	movs	r1, #50	; 0x32
 800f544:	4618      	mov	r0, r3
 800f546:	f7fb fddc 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
      if ( HasAllTPDTSent(iDev) ) EndSendTPMessage(iDev); // All done
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7ff fa7c 	bl	800ea4a <_ZN9tNMEA200014HasAllTPDTSentEi>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d008      	beq.n	800f56a <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f7ff ff81 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
    } else { // We have not got response from receiver within timeout, so just end. Or should we retry?
      EndSendTPMessage(iDev);
    }
  }
}
 800f560:	e003      	b.n	800f56a <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
      EndSendTPMessage(iDev);
 800f562:	6839      	ldr	r1, [r7, #0]
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7ff ff7c 	bl	800f462 <_ZN9tNMEA200016EndSendTPMessageEi>
}
 800f56a:	bf00      	nop
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <_Z22IsFastPacketFirstFrameh>:

#endif

//*****************************************************************************
inline bool IsFastPacketFirstFrame(unsigned char b) { return ((b & 0x1F)==0); }
 800f572:	b480      	push	{r7}
 800f574:	b083      	sub	sp, #12
 800f576:	af00      	add	r7, sp, #0
 800f578:	4603      	mov	r3, r0
 800f57a:	71fb      	strb	r3, [r7, #7]
 800f57c:	79fb      	ldrb	r3, [r7, #7]
 800f57e:	f003 031f 	and.w	r3, r3, #31
 800f582:	2b00      	cmp	r3, #0
 800f584:	bf0c      	ite	eq
 800f586:	2301      	moveq	r3, #1
 800f588:	2300      	movne	r3, #0
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	bc80      	pop	{r7}
 800f594:	4770      	bx	lr

0800f596 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>:

//*****************************************************************************
// Function handles received CAN frame and adds it to tN2kCANMsg.
// Returns: Index to ready tN2kCANMsg or MaxN2kCANMsgs, if we skipped the frame
//          or message is not ready (fast packet or ISO Multi-Packet)
uint8_t tNMEA2000::SetN2kCANBufMsg(unsigned long canId, unsigned char len, unsigned char *buf) {
 800f596:	b590      	push	{r4, r7, lr}
 800f598:	b08d      	sub	sp, #52	; 0x34
 800f59a:	af04      	add	r7, sp, #16
 800f59c:	60f8      	str	r0, [r7, #12]
 800f59e:	60b9      	str	r1, [r7, #8]
 800f5a0:	603b      	str	r3, [r7, #0]
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	71fb      	strb	r3, [r7, #7]
  unsigned char Source;
  unsigned char Destination;
  bool FastPacket;
  bool SystemMessage;
  bool KnownMessage;
  uint8_t MsgIndex=MaxN2kCANMsgs;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f5ac:	74fb      	strb	r3, [r7, #19]

    CanIdToN2k(canId,Priority,PGN,Source,Destination);
 800f5ae:	f107 0017 	add.w	r0, r7, #23
 800f5b2:	f107 0218 	add.w	r2, r7, #24
 800f5b6:	f107 011e 	add.w	r1, r7, #30
 800f5ba:	f107 0316 	add.w	r3, r7, #22
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	68b8      	ldr	r0, [r7, #8]
 800f5c4:	f7fd fdd8 	bl	800d178 <_Z10CanIdToN2kmRhRmS_S_>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    if ( !TestHandleTPMessage(PGN,Source,Destination,len,buf,MsgIndex) )
 800f5c8:	69b9      	ldr	r1, [r7, #24]
 800f5ca:	7dfa      	ldrb	r2, [r7, #23]
 800f5cc:	7db8      	ldrb	r0, [r7, #22]
 800f5ce:	f107 0313 	add.w	r3, r7, #19
 800f5d2:	9302      	str	r3, [sp, #8]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	4603      	mov	r3, r0
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f7ff fa5a 	bl	800ea98 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	f083 0301 	eor.w	r3, r3, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f000 81a3 	beq.w	800f938 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
#endif
    {
      KnownMessage=CheckKnownMessage(PGN,SystemMessage,FastPacket);
 800f5f2:	69b9      	ldr	r1, [r7, #24]
 800f5f4:	f107 0315 	add.w	r3, r7, #21
 800f5f8:	f107 0214 	add.w	r2, r7, #20
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7fe fbd7 	bl	800ddb0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 800f602:	4603      	mov	r3, r0
 800f604:	77fb      	strb	r3, [r7, #31]
      if ( KnownMessage || !HandleOnlyKnownMessages() ) {
 800f606:	7ffb      	ldrb	r3, [r7, #31]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d108      	bne.n	800f61e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x88>
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f7fb ffe9 	bl	800b5e4 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 800f612:	4603      	mov	r3, r0
 800f614:	f083 0301 	eor.w	r3, r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8c>
 800f61e:	2301      	movs	r3, #1
 800f620:	e000      	b.n	800f624 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8e>
 800f622:	2300      	movs	r3, #0
 800f624:	2b00      	cmp	r3, #0
 800f626:	f000 8187 	beq.w	800f938 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
        if (FastPacket && !IsFastPacketFirstFrame(buf[0]) ) { // Not first frame
 800f62a:	7d7b      	ldrb	r3, [r7, #21]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00c      	beq.n	800f64a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	4618      	mov	r0, r3
 800f636:	f7ff ff9c 	bl	800f572 <_Z22IsFastPacketFirstFrameh>
 800f63a:	4603      	mov	r3, r0
 800f63c:	f083 0301 	eor.w	r3, r3, #1
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 800f646:	2301      	movs	r3, #1
 800f648:	e000      	b.n	800f64c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb6>
 800f64a:	2300      	movs	r3, #0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d07e      	beq.n	800f74e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x1b8>
        N2kFrameInDbgStart("New frame="); N2kFrameInDbg(PGN); N2kFrameInDbg(" frame="); N2kFrameInDbg(buf[0],HEX); N2kFrameInDbgln();
          // Find previous slot for this PGN
          for (MsgIndex=0;
 800f650:	2300      	movs	r3, #0
 800f652:	74fb      	strb	r3, [r7, #19]
               MsgIndex<MaxN2kCANMsgs &&
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f65a:	7cfb      	ldrb	r3, [r7, #19]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d92a      	bls.n	800f6b6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f664:	7cfb      	ldrb	r3, [r7, #19]
 800f666:	4619      	mov	r1, r3
 800f668:	460b      	mov	r3, r1
 800f66a:	019b      	lsls	r3, r3, #6
 800f66c:	440b      	add	r3, r1
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	4413      	add	r3, r2
 800f672:	689a      	ldr	r2, [r3, #8]
 800f674:	69bb      	ldr	r3, [r7, #24]
               MsgIndex<MaxN2kCANMsgs &&
 800f676:	429a      	cmp	r2, r3
 800f678:	d11b      	bne.n	800f6b2 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
                  && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f67e:	7cfb      	ldrb	r3, [r7, #19]
 800f680:	4619      	mov	r1, r3
 800f682:	460b      	mov	r3, r1
 800f684:	019b      	lsls	r3, r3, #6
 800f686:	440b      	add	r3, r1
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	4413      	add	r3, r2
 800f68c:	7b1a      	ldrb	r2, [r3, #12]
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
 800f690:	429a      	cmp	r2, r3
 800f692:	d10e      	bne.n	800f6b2 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
                  && !N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f698:	7cfb      	ldrb	r3, [r7, #19]
 800f69a:	4619      	mov	r1, r3
 800f69c:	460b      	mov	r3, r1
 800f69e:	019b      	lsls	r3, r3, #6
 800f6a0:	440b      	add	r3, r1
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	4413      	add	r3, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f8 fc44 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 800f6ac:	4603      	mov	r3, r0
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               MsgIndex<MaxN2kCANMsgs &&
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e000      	b.n	800f6b8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x122>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d004      	beq.n	800f6c6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x130>
          for (MsgIndex=0;
 800f6bc:	7cfb      	ldrb	r3, [r7, #19]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	74fb      	strb	r3, [r7, #19]
 800f6c4:	e7c6      	b.n	800f654 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xbe>
#endif
                );
               MsgIndex++);
          if (MsgIndex<MaxN2kCANMsgs) { // we found start for this message, so add data to it.
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f6cc:	7cfb      	ldrb	r3, [r7, #19]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	f240 80f2 	bls.w	800f8b8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right frame is coming
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6d8:	7cfb      	ldrb	r3, [r7, #19]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	460b      	mov	r3, r1
 800f6de:	019b      	lsls	r3, r3, #6
 800f6e0:	440b      	add	r3, r1
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	7812      	ldrb	r2, [r2, #0]
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d11b      	bne.n	800f72c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x196>
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6f8:	7cfb      	ldrb	r3, [r7, #19]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	019b      	lsls	r3, r3, #6
 800f700:	440b      	add	r3, r1
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	7812      	ldrb	r2, [r2, #0]
 800f70a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f712:	7cfb      	ldrb	r3, [r7, #19]
 800f714:	4619      	mov	r1, r3
 800f716:	460b      	mov	r3, r1
 800f718:	019b      	lsls	r3, r3, #6
 800f71a:	440b      	add	r3, r1
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	18d0      	adds	r0, r2, r3
 800f720:	79fa      	ldrb	r2, [r7, #7]
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	2101      	movs	r1, #1
 800f726:	f7fe fc28 	bl	800df7a <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
 800f72a:	e0c5      	b.n	800f8b8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else { // We have lost frame, so free this
              N2kFrameErrDbgStart("Lost frame ");  N2kFrameErrDbg(N2kCANMsgBuf[MsgIndex].LastFrame); N2kFrameErrDbg("/");  N2kFrameErrDbg(buf[0]);
              N2kFrameErrDbg(", source ");  N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
              N2kCANMsgBuf[MsgIndex].FreeMessage();
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f730:	7cfb      	ldrb	r3, [r7, #19]
 800f732:	4619      	mov	r1, r3
 800f734:	460b      	mov	r3, r1
 800f736:	019b      	lsls	r3, r3, #6
 800f738:	440b      	add	r3, r1
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	4413      	add	r3, r2
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fb fc0e 	bl	800af60 <_ZN10tN2kCANMsg11FreeMessageEv>
              MsgIndex=MaxN2kCANMsgs;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f74a:	74fb      	strb	r3, [r7, #19]
 800f74c:	e0b4      	b.n	800f8b8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
              N2kFrameErrDbgStart("Orphan frame "); N2kFrameErrDbg(buf[0]); N2kFrameErrDbg(", source ");
              N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
          }
        } else { // Handle first frame
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
          FindFreeCANMsgIndex(PGN,Source,Destination,false,MsgIndex);
 800f74e:	69b9      	ldr	r1, [r7, #24]
 800f750:	7dfa      	ldrb	r2, [r7, #23]
 800f752:	7db8      	ldrb	r0, [r7, #22]
 800f754:	f107 0313 	add.w	r3, r7, #19
 800f758:	9301      	str	r3, [sp, #4]
 800f75a:	2300      	movs	r3, #0
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4603      	mov	r3, r0
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7fe fc44 	bl	800dfee <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>
#else
          FindFreeCANMsgIndex(PGN,Source,Destination,MsgIndex);
#endif
          if ( MsgIndex<MaxN2kCANMsgs ) { // we found free place, so handle frame
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f76c:	7cfb      	ldrb	r3, [r7, #19]
 800f76e:	429a      	cmp	r2, r3
 800f770:	f240 80a2 	bls.w	800f8b8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f778:	7cfb      	ldrb	r3, [r7, #19]
 800f77a:	4619      	mov	r1, r3
 800f77c:	460b      	mov	r3, r1
 800f77e:	019b      	lsls	r3, r3, #6
 800f780:	440b      	add	r3, r1
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	4413      	add	r3, r2
 800f786:	2200      	movs	r2, #0
 800f788:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].KnownMessage=KnownMessage;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f790:	7cfb      	ldrb	r3, [r7, #19]
 800f792:	4619      	mov	r1, r3
 800f794:	460b      	mov	r3, r1
 800f796:	019b      	lsls	r3, r3, #6
 800f798:	440b      	add	r3, r1
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	7ffa      	ldrb	r2, [r7, #31]
 800f7a0:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            N2kCANMsgBuf[MsgIndex].SystemMessage=SystemMessage;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7a8:	7cfb      	ldrb	r3, [r7, #19]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	019b      	lsls	r3, r3, #6
 800f7b0:	440b      	add	r3, r1
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	4413      	add	r3, r2
 800f7b6:	7d3a      	ldrb	r2, [r7, #20]
 800f7b8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(Priority,PGN,Source,Destination);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7c0:	7cfb      	ldrb	r3, [r7, #19]
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	019b      	lsls	r3, r3, #6
 800f7c8:	440b      	add	r3, r1
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	4413      	add	r3, r2
 800f7ce:	461c      	mov	r4, r3
 800f7d0:	7fb9      	ldrb	r1, [r7, #30]
 800f7d2:	69ba      	ldr	r2, [r7, #24]
 800f7d4:	7df8      	ldrb	r0, [r7, #23]
 800f7d6:	7dbb      	ldrb	r3, [r7, #22]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	4603      	mov	r3, r0
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f7fa fa88 	bl	8009cf2 <_ZN7tN2kMsg4InitEhmhh>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage(false);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7e6:	7cfb      	ldrb	r3, [r7, #19]
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	019b      	lsls	r3, r3, #6
 800f7ee:	440b      	add	r3, r1
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	4413      	add	r3, r2
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fb fb57 	bl	800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f800:	7cfb      	ldrb	r3, [r7, #19]
 800f802:	4619      	mov	r1, r3
 800f804:	460b      	mov	r3, r1
 800f806:	019b      	lsls	r3, r3, #6
 800f808:	440b      	add	r3, r1
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	4413      	add	r3, r2
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            if (FastPacket) {
 800f814:	7d7b      	ldrb	r3, [r7, #21]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d029      	beq.n	800f86e <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x2d8>
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],2,len,buf);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f81e:	7cfb      	ldrb	r3, [r7, #19]
 800f820:	4619      	mov	r1, r3
 800f822:	460b      	mov	r3, r1
 800f824:	019b      	lsls	r3, r3, #6
 800f826:	440b      	add	r3, r1
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	18d0      	adds	r0, r2, r3
 800f82c:	79fa      	ldrb	r2, [r7, #7]
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2102      	movs	r1, #2
 800f832:	f7fe fba2 	bl	800df7a <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("First frame="); N2kFrameInDbg(PGN);  N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f83a:	7cfb      	ldrb	r3, [r7, #19]
 800f83c:	4619      	mov	r1, r3
 800f83e:	460b      	mov	r3, r1
 800f840:	019b      	lsls	r3, r3, #6
 800f842:	440b      	add	r3, r1
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	7812      	ldrb	r2, [r2, #0]
 800f84c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=buf[1];
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	3301      	adds	r3, #1
 800f854:	7818      	ldrb	r0, [r3, #0]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f85a:	7cfb      	ldrb	r3, [r7, #19]
 800f85c:	4619      	mov	r1, r3
 800f85e:	460b      	mov	r3, r1
 800f860:	019b      	lsls	r3, r3, #6
 800f862:	440b      	add	r3, r1
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	4602      	mov	r2, r0
 800f86a:	611a      	str	r2, [r3, #16]
 800f86c:	e024      	b.n	800f8b8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else {
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],0,len,buf);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f872:	7cfb      	ldrb	r3, [r7, #19]
 800f874:	4619      	mov	r1, r3
 800f876:	460b      	mov	r3, r1
 800f878:	019b      	lsls	r3, r3, #6
 800f87a:	440b      	add	r3, r1
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	18d0      	adds	r0, r2, r3
 800f880:	79fa      	ldrb	r2, [r7, #7]
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	2100      	movs	r1, #0
 800f886:	f7fe fb78 	bl	800df7a <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("Single frame="); N2kFrameInDbg(PGN); N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=0;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f88e:	7cfb      	ldrb	r3, [r7, #19]
 800f890:	4619      	mov	r1, r3
 800f892:	460b      	mov	r3, r1
 800f894:	019b      	lsls	r3, r3, #6
 800f896:	440b      	add	r3, r1
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	4413      	add	r3, r2
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=len;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8a6:	7cfb      	ldrb	r3, [r7, #19]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	019b      	lsls	r3, r3, #6
 800f8ae:	440b      	add	r3, r1
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	79fa      	ldrb	r2, [r7, #7]
 800f8b6:	611a      	str	r2, [r3, #16]
            }
          }
        }

        if ( MsgIndex<MaxN2kCANMsgs ) {
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f8be:	7cfb      	ldrb	r3, [r7, #19]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d939      	bls.n	800f938 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
          N2kCANMsgBuf[MsgIndex].Ready=(N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8c8:	7cfb      	ldrb	r3, [r7, #19]
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	460b      	mov	r3, r1
 800f8ce:	019b      	lsls	r3, r3, #6
 800f8d0:	440b      	add	r3, r1
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	4413      	add	r3, r2
 800f8d6:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800f8da:	461c      	mov	r4, r3
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8e0:	7cfb      	ldrb	r3, [r7, #19]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	019b      	lsls	r3, r3, #6
 800f8e8:	440b      	add	r3, r1
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	4413      	add	r3, r2
 800f8ee:	691a      	ldr	r2, [r3, #16]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f8f4:	7cfb      	ldrb	r3, [r7, #19]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	019b      	lsls	r3, r3, #6
 800f8fc:	4403      	add	r3, r0
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	440b      	add	r3, r1
 800f902:	4294      	cmp	r4, r2
 800f904:	bfac      	ite	ge
 800f906:	2201      	movge	r2, #1
 800f908:	2200      	movlt	r2, #0
 800f90a:	b2d2      	uxtb	r2, r2
 800f90c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs; // If packet is not ready, do not return index to it
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f914:	7cfb      	ldrb	r3, [r7, #19]
 800f916:	4619      	mov	r1, r3
 800f918:	460b      	mov	r3, r1
 800f91a:	019b      	lsls	r3, r3, #6
 800f91c:	440b      	add	r3, r1
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	4413      	add	r3, r2
 800f922:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f926:	f083 0301 	eor.w	r3, r3, #1
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d003      	beq.n	800f938 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f936:	74fb      	strb	r3, [r7, #19]
        }
      }
    }

    return MsgIndex;
 800f938:	7cfb      	ldrb	r3, [r7, #19]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3724      	adds	r7, #36	; 0x24
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}

0800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>:

//*****************************************************************************
 int tNMEA2000::FindSourceDeviceIndex(unsigned char Source) {
 800f942:	b480      	push	{r7}
 800f944:	b085      	sub	sp, #20
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
 800f94a:	460b      	mov	r3, r1
 800f94c:	70fb      	strb	r3, [r7, #3]
   int i=DeviceCount;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	60fb      	str	r3, [r7, #12]

     if ( Source<=253 ) {
 800f954:	78fb      	ldrb	r3, [r7, #3]
 800f956:	2bfd      	cmp	r3, #253	; 0xfd
 800f958:	d817      	bhi.n	800f98a <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
       for (i=0; i<DeviceCount && Devices[i].N2kSource!=Source; i++);
 800f95a:	2300      	movs	r3, #0
 800f95c:	60fb      	str	r3, [r7, #12]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	429a      	cmp	r2, r3
 800f966:	da10      	bge.n	800f98a <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	69da      	ldr	r2, [r3, #28]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f972:	fb01 f303 	mul.w	r3, r1, r3
 800f976:	4413      	add	r3, r2
 800f978:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f97c:	78fa      	ldrb	r2, [r7, #3]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d003      	beq.n	800f98a <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	3301      	adds	r3, #1
 800f986:	60fb      	str	r3, [r7, #12]
 800f988:	e7e9      	b.n	800f95e <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x1c>
     }

     return (i<DeviceCount?i:-1);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	429a      	cmp	r2, r3
 800f992:	da01      	bge.n	800f998 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x56>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	e001      	b.n	800f99c <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x5a>
 800f998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 800f99c:	4618      	mov	r0, r3
 800f99e:	3714      	adds	r7, #20
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bc80      	pop	{r7}
 800f9a4:	4770      	bx	lr

0800f9a6 <_ZN9tNMEA200010IsMySourceEh>:

//*****************************************************************************
bool tNMEA2000::IsMySource(unsigned char Source) {
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b082      	sub	sp, #8
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	70fb      	strb	r3, [r7, #3]
    return (FindSourceDeviceIndex(Source)!=-1);
 800f9b2:	78fb      	ldrb	r3, [r7, #3]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7ff ffc3 	bl	800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9c2:	bf14      	ite	ne
 800f9c4:	2301      	movne	r3, #1
 800f9c6:	2300      	moveq	r3, #0
 800f9c8:	b2db      	uxtb	r3, r3
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kMsg &N2kMsg) {
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b082      	sub	sp, #8
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7fb fdb5 	bl	800b54c <_ZNK9tNMEA200014ForwardEnabledEv>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	f083 0301 	eor.w	r3, r3, #1
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d118      	bne.n	800fa20 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x4e>
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7fb fde6 	bl	800b5c0 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f083 0301 	eor.w	r3, r3, #1
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10b      	bne.n	800fa18 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x46>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	7b1b      	ldrb	r3, [r3, #12]
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f7ff ffcd 	bl	800f9a6 <_ZN9tNMEA200010IsMySourceEh>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	f083 0301 	eor.w	r3, r3, #1
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d005      	beq.n	800fa24 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	795b      	ldrb	r3, [r3, #5]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d101      	bne.n	800fa24 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 800fa20:	2301      	movs	r3, #1
 800fa22:	e000      	b.n	800fa26 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x54>
 800fa24:	2300      	movs	r3, #0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d115      	bne.n	800fa56 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x84>

  switch (ForwardType) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	799b      	ldrb	r3, [r3, #6]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d002      	beq.n	800fa38 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x66>
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d007      	beq.n	800fa46 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x74>
 800fa36:	e00f      	b.n	800fa58 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Actisense:
      N2kMsg.SendInActisenseFormat(ForwardStream);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6838      	ldr	r0, [r7, #0]
 800fa40:	f7fa fea2 	bl	800a788 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 800fa44:	e008      	b.n	800fa58 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Text:
      N2kMsg.Print(ForwardStream);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6838      	ldr	r0, [r7, #0]
 800fa50:	f7fa fde6 	bl	800a620 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 800fa54:	e000      	b.n	800fa58 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 800fa56:	bf00      	nop
  }
}
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kCANMsg &N2kCanMsg) {
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	6039      	str	r1, [r7, #0]
  if ( N2kCanMsg.KnownMessage || !ForwardOnlyKnownMessages() ) ForwardMessage(N2kCanMsg.N2kMsg);
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d108      	bne.n	800fa84 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x26>
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7fb fd92 	bl	800b59c <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	f083 0301 	eor.w	r3, r3, #1
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2a>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e000      	b.n	800fa8a <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2c>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d004      	beq.n	800fa98 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x3a>
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	4619      	mov	r1, r3
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff ff9d 	bl	800f9d2 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>:

//*****************************************************************************
void tNMEA2000::SendIsoAddressClaim(unsigned char Destination, int DeviceIndex, unsigned long FromNow) {
 800faa0:	b590      	push	{r4, r7, lr}
 800faa2:	b0c7      	sub	sp, #284	; 0x11c
 800faa4:	af02      	add	r7, sp, #8
 800faa6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800faaa:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800faae:	6020      	str	r0, [r4, #0]
 800fab0:	4608      	mov	r0, r1
 800fab2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800fab6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800faba:	600a      	str	r2, [r1, #0]
 800fabc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fac0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800faca:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800face:	4602      	mov	r2, r0
 800fad0:	701a      	strb	r2, [r3, #0]

  // Some devices (Garmin) request constantly information on network about others
  // 59904 ISO Request:  PGN = 60928
  // So we need to Re-send Address claim, or they will stop detecting us
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800fad2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fad6:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2bff      	cmp	r3, #255	; 0xff
 800fade:	d10d      	bne.n	800fafc <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 800fae0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fae4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800faee:	d105      	bne.n	800fafc <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 800faf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800faf4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800faf8:	2200      	movs	r2, #0
 800fafa:	601a      	str	r2, [r3, #0]

  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 800fafc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	db76      	blt.n	800fbf8 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>
 800fb0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fb1a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800fb1e:	6812      	ldr	r2, [r2, #0]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	da69      	bge.n	800fbf8 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>

  // Set pending, if we have delayed it.
  if ( FromNow>0 ) {
 800fb24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d018      	beq.n	800fb64 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0xc4>
    Devices[DeviceIndex].SetPendingIsoAddressClaim(FromNow);
 800fb32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	69da      	ldr	r2, [r3, #28]
 800fb3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fb4c:	fb01 f303 	mul.w	r3, r1, r3
 800fb50:	441a      	add	r2, r3
 800fb52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fb5a:	6819      	ldr	r1, [r3, #0]
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	f7fb fbf3 	bl	800b348 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>
    return;
 800fb62:	e04a      	b.n	800fbfa <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  }

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800fb64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	69da      	ldr	r2, [r3, #28]
 800fb70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fb7e:	fb01 f303 	mul.w	r3, r1, r3
 800fb82:	4413      	add	r3, r2
 800fb84:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800fb88:	f107 0014 	add.w	r0, r7, #20
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	2300      	movs	r3, #0
 800fb92:	2206      	movs	r2, #6
 800fb94:	f7fa f860 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

    RespondMsg.Destination=Destination;
 800fb98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb9c:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    SetN2kISOAddressClaim(RespondMsg,Devices[DeviceIndex].DeviceInformation.GetName());
 800fba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	69da      	ldr	r2, [r3, #28]
 800fbb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fbc0:	fb01 f303 	mul.w	r3, r1, r3
 800fbc4:	4413      	add	r3, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f7 fc86 	bl	80074d8 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	460b      	mov	r3, r1
 800fbd0:	f107 0114 	add.w	r1, r7, #20
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	f7fb fdf2 	bl	800b7be <_Z21SetN2kISOAddressClaimR7tN2kMsgy>
    SendMsg(RespondMsg,DeviceIndex);
 800fbda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbde:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800fbe2:	f107 0114 	add.w	r1, r7, #20
 800fbe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbee:	6812      	ldr	r2, [r2, #0]
 800fbf0:	6818      	ldr	r0, [r3, #0]
 800fbf2:	f7fd fe77 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800fbf6:	e000      	b.n	800fbfa <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 800fbf8:	bf00      	nop
}
 800fbfa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd90      	pop	{r4, r7, pc}
	...

0800fc04 <_ZN9tNMEA200013SendTxPGNListEhib>:

#define MAX_PGNS_IN_LIST 74

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 800fc04:	b590      	push	{r4, r7, lr}
 800fc06:	b0cb      	sub	sp, #300	; 0x12c
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800fc0e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800fc12:	6020      	str	r0, [r4, #0]
 800fc14:	4608      	mov	r0, r1
 800fc16:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800fc1a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800fc1e:	600a      	str	r2, [r1, #0]
 800fc20:	4619      	mov	r1, r3
 800fc22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc26:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	701a      	strb	r2, [r3, #0]
 800fc2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc32:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800fc36:	460a      	mov	r2, r1
 800fc38:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800fc3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc3e:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2bff      	cmp	r3, #255	; 0xff
 800fc46:	d10d      	bne.n	800fc64 <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 800fc48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc56:	d105      	bne.n	800fc64 <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 800fc58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 800fc64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc68:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800fc6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fc74:	6811      	ldr	r1, [r2, #0]
 800fc76:	6818      	ldr	r0, [r3, #0]
 800fc78:	f7fb fcda 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	f083 0301 	eor.w	r3, r3, #1
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f040 80cc 	bne.w	800fe22 <_ZN9tNMEA200013SendTxPGNListEhib+0x21e>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800fc8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	69da      	ldr	r2, [r3, #28]
 800fc96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fc9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fca4:	fb01 f303 	mul.w	r3, r1, r3
 800fca8:	4413      	add	r3, r2
 800fcaa:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800fcae:	f107 0014 	add.w	r0, r7, #20
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	9300      	str	r3, [sp, #0]
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	2206      	movs	r2, #6
 800fcba:	f7f9 ffcd 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 800fcbe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fcc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fcc6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800fcca:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 800fcce:	7812      	ldrb	r2, [r2, #0]
 800fcd0:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 800fcd2:	f107 0314 	add.w	r3, r7, #20
 800fcd6:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7f9 ffee 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 800fce0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fce4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fce8:	2206      	movs	r2, #6
 800fcea:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 800fcec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fcf0:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800fcf4:	781a      	ldrb	r2, [r3, #0]
 800fcf6:	f107 0314 	add.w	r3, r7, #20
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fb f8d4 	bl	800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_transmit);
 800fd02:	f107 0314 	add.w	r3, r7, #20
 800fd06:	2100      	movs	r1, #0
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fa f917 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800fd14:	2300      	movs	r3, #0
 800fd16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800fd1a:	4a44      	ldr	r2, [pc, #272]	; (800fe2c <_ZN9tNMEA200013SendTxPGNListEhib+0x228>)
 800fd1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800fd28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d005      	beq.n	800fd3c <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 800fd30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fd34:	2b49      	cmp	r3, #73	; 0x49
 800fd36:	d801      	bhi.n	800fd3c <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	e000      	b.n	800fd3e <_ZN9tNMEA200013SendTxPGNListEhib+0x13a>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d012      	beq.n	800fd68 <_ZN9tNMEA200013SendTxPGNListEhib+0x164>
      RespondMsg.Add3ByteInt(PGN);
 800fd42:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fd46:	f107 0314 	add.w	r3, r7, #20
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fa f8be 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800fd52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fd56:	3301      	adds	r3, #1
 800fd58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800fd5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fd60:	3301      	adds	r3, #1
 800fd62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800fd66:	e7d8      	b.n	800fd1a <_ZN9tNMEA200013SendTxPGNListEhib+0x116>
    }
    if (Devices[DeviceIndex].TransmitMessages!=0) {
 800fd68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fd6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	69da      	ldr	r2, [r3, #28]
 800fd74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fd78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fd82:	fb01 f303 	mul.w	r3, r1, r3
 800fd86:	4413      	add	r3, r2
 800fd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d03a      	beq.n	800fe04 <_ZN9tNMEA200013SendTxPGNListEhib+0x200>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800fd94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fd98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	69da      	ldr	r2, [r3, #28]
 800fda0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fda4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fdae:	fb01 f303 	mul.w	r3, r1, r3
 800fdb2:	4413      	add	r3, r2
 800fdb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800fdc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d005      	beq.n	800fdd8 <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 800fdcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fdd0:	2b49      	cmp	r3, #73	; 0x49
 800fdd2:	d801      	bhi.n	800fdd8 <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e000      	b.n	800fdda <_ZN9tNMEA200013SendTxPGNListEhib+0x1d6>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d012      	beq.n	800fe04 <_ZN9tNMEA200013SendTxPGNListEhib+0x200>
        RespondMsg.Add3ByteInt(PGN);
 800fdde:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fde2:	f107 0314 	add.w	r3, r7, #20
 800fde6:	4611      	mov	r1, r2
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fa f870 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800fdee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800fdf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800fe02:	e7c7      	b.n	800fd94 <_ZN9tNMEA200013SendTxPGNListEhib+0x190>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 800fe04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe08:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800fe0c:	f107 0114 	add.w	r1, r7, #20
 800fe10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fe18:	6812      	ldr	r2, [r2, #0]
 800fe1a:	6818      	ldr	r0, [r3, #0]
 800fe1c:	f7fd fd62 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800fe20:	e000      	b.n	800fe24 <_ZN9tNMEA200013SendTxPGNListEhib+0x220>
  if ( !IsValidDevice(DeviceIndex) ) return;
 800fe22:	bf00      	nop
}
 800fe24:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd90      	pop	{r4, r7, pc}
 800fe2c:	0801554c 	.word	0x0801554c

0800fe30 <_ZN9tNMEA200013SendRxPGNListEhib>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 800fe30:	b590      	push	{r4, r7, lr}
 800fe32:	b0cb      	sub	sp, #300	; 0x12c
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800fe3a:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800fe3e:	6020      	str	r0, [r4, #0]
 800fe40:	4608      	mov	r0, r1
 800fe42:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800fe46:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800fe4a:	600a      	str	r2, [r1, #0]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe52:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800fe56:	4602      	mov	r2, r0
 800fe58:	701a      	strb	r2, [r3, #0]
 800fe5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe5e:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800fe62:	460a      	mov	r2, r1
 800fe64:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 800fe66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe6a:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	2bff      	cmp	r3, #255	; 0xff
 800fe72:	d10d      	bne.n	800fe90 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 800fe74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe82:	d105      	bne.n	800fe90 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 800fe84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 800fe90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe94:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800fe98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fea0:	6811      	ldr	r1, [r2, #0]
 800fea2:	6818      	ldr	r0, [r3, #0]
 800fea4:	f7fb fbc4 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 800fea8:	4603      	mov	r3, r0
 800feaa:	f083 0301 	eor.w	r3, r3, #1
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	f040 80cc 	bne.w	801004e <_ZN9tNMEA200013SendRxPGNListEhib+0x21e>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 800feb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800feba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	69da      	ldr	r2, [r3, #28]
 800fec2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fec6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fed0:	fb01 f303 	mul.w	r3, r1, r3
 800fed4:	4413      	add	r3, r2
 800fed6:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800feda:	f107 0014 	add.w	r0, r7, #20
 800fede:	2300      	movs	r3, #0
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	2300      	movs	r3, #0
 800fee4:	2206      	movs	r2, #6
 800fee6:	f7f9 feb7 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 800feea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800feee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fef2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800fef6:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 800fefa:	7812      	ldrb	r2, [r2, #0]
 800fefc:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 800fefe:	f107 0314 	add.w	r3, r7, #20
 800ff02:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7f9 fed8 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 800ff0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ff14:	2206      	movs	r2, #6
 800ff16:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 800ff18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff1c:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	f107 0314 	add.w	r3, r7, #20
 800ff26:	4611      	mov	r1, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fa ffbe 	bl	800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_receive);
 800ff2e:	f107 0314 	add.w	r3, r7, #20
 800ff32:	2101      	movs	r1, #1
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fa f801 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ff40:	2300      	movs	r3, #0
 800ff42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ff46:	4a44      	ldr	r2, [pc, #272]	; (8010058 <_ZN9tNMEA200013SendRxPGNListEhib+0x228>)
 800ff48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ff4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ff54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d005      	beq.n	800ff68 <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 800ff5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ff60:	2b49      	cmp	r3, #73	; 0x49
 800ff62:	d801      	bhi.n	800ff68 <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e000      	b.n	800ff6a <_ZN9tNMEA200013SendRxPGNListEhib+0x13a>
 800ff68:	2300      	movs	r3, #0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d012      	beq.n	800ff94 <_ZN9tNMEA200013SendRxPGNListEhib+0x164>
      RespondMsg.Add3ByteInt(PGN);
 800ff6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800ff72:	f107 0314 	add.w	r3, r7, #20
 800ff76:	4611      	mov	r1, r2
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7f9 ffa8 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ff7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ff82:	3301      	adds	r3, #1
 800ff84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ff88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ff92:	e7d8      	b.n	800ff46 <_ZN9tNMEA200013SendRxPGNListEhib+0x116>
    }
    if (Devices[DeviceIndex].ReceiveMessages!=0) {
 800ff94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	69da      	ldr	r2, [r3, #28]
 800ffa0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ffa4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ffae:	fb01 f303 	mul.w	r3, r1, r3
 800ffb2:	4413      	add	r3, r2
 800ffb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d03a      	beq.n	8010030 <_ZN9tNMEA200013SendRxPGNListEhib+0x200>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ffc0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ffc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	69da      	ldr	r2, [r3, #28]
 800ffcc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ffd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ffda:	fb01 f303 	mul.w	r3, r1, r3
 800ffde:	4413      	add	r3, r2
 800ffe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4413      	add	r3, r2
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800fff0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 800fff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fffc:	2b49      	cmp	r3, #73	; 0x49
 800fffe:	d801      	bhi.n	8010004 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 8010000:	2301      	movs	r3, #1
 8010002:	e000      	b.n	8010006 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d6>
 8010004:	2300      	movs	r3, #0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d012      	beq.n	8010030 <_ZN9tNMEA200013SendRxPGNListEhib+0x200>
        RespondMsg.Add3ByteInt(PGN);
 801000a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801000e:	f107 0314 	add.w	r3, r7, #20
 8010012:	4611      	mov	r1, r2
 8010014:	4618      	mov	r0, r3
 8010016:	f7f9 ff5a 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 801001a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801001e:	3301      	adds	r3, #1
 8010020:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010024:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010028:	3301      	adds	r3, #1
 801002a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801002e:	e7c7      	b.n	800ffc0 <_ZN9tNMEA200013SendRxPGNListEhib+0x190>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 8010030:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010034:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8010038:	f107 0114 	add.w	r1, r7, #20
 801003c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010040:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010044:	6812      	ldr	r2, [r2, #0]
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	f7fd fc4c 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 801004c:	e000      	b.n	8010050 <_ZN9tNMEA200013SendRxPGNListEhib+0x220>
  if ( !IsValidDevice(DeviceIndex) ) return;
 801004e:	bf00      	nop
}
 8010050:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8010054:	46bd      	mov	sp, r7
 8010056:	bd90      	pop	{r4, r7, pc}
 8010058:	08015578 	.word	0x08015578

0801005c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>:

//*****************************************************************************
void SetN2kPGN126996Progmem(tN2kMsg &N2kMsg, const tNMEA2000::tProductInformation *ProductInformation, char *OptionalSerialCode=0) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
  int i;

    N2kMsg.SetPGN(126996L);
 8010068:	4968      	ldr	r1, [pc, #416]	; (801020c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x1b0>)
 801006a:	68f8      	ldr	r0, [r7, #12]
 801006c:	f7f9 fe26 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2206      	movs	r2, #6
 8010074:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->N2kVersion));
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	b21b      	sxth	r3, r3
 801007c:	4619      	mov	r1, r3
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f7f9 fefc 	bl	8009e7c <_ZN7tN2kMsg11Add2ByteIntEs>
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->ProductCode));
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	885b      	ldrh	r3, [r3, #2]
 8010088:	b21b      	sxth	r3, r3
 801008a:	4619      	mov	r1, r3
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	f7f9 fef5 	bl	8009e7c <_ZN7tN2kMsg11Add2ByteIntEs>
    for (i=0; i<Max_N2kModelID_len && pgm_read_byte(&ProductInformation->N2kModelID[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelID[i])); }
 8010092:	2300      	movs	r3, #0
 8010094:	617b      	str	r3, [r7, #20]
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	2b1f      	cmp	r3, #31
 801009a:	dc13      	bgt.n	80100c4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 801009c:	68ba      	ldr	r2, [r7, #8]
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	4413      	add	r3, r2
 80100a2:	3304      	adds	r3, #4
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00c      	beq.n	80100c4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	4413      	add	r3, r2
 80100b0:	3304      	adds	r3, #4
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	4619      	mov	r1, r3
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f7f9 ff40 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	3301      	adds	r3, #1
 80100c0:	617b      	str	r3, [r7, #20]
 80100c2:	e7e8      	b.n	8010096 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x3a>
    for (; i<Max_N2kModelID_len; i++ ) { N2kMsg.AddByte(0xff); }
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	2b1f      	cmp	r3, #31
 80100c8:	dc07      	bgt.n	80100da <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x7e>
 80100ca:	21ff      	movs	r1, #255	; 0xff
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f7f9 ff35 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	3301      	adds	r3, #1
 80100d6:	617b      	str	r3, [r7, #20]
 80100d8:	e7f4      	b.n	80100c4 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
    for (i=0; i<Max_N2kSwCode_len && pgm_read_byte(&ProductInformation->N2kSwCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kSwCode[i])); }
 80100da:	2300      	movs	r3, #0
 80100dc:	617b      	str	r3, [r7, #20]
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b1f      	cmp	r3, #31
 80100e2:	dc13      	bgt.n	801010c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 80100e4:	68ba      	ldr	r2, [r7, #8]
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	4413      	add	r3, r2
 80100ea:	3325      	adds	r3, #37	; 0x25
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00c      	beq.n	801010c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 80100f2:	68ba      	ldr	r2, [r7, #8]
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	4413      	add	r3, r2
 80100f8:	3325      	adds	r3, #37	; 0x25
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	4619      	mov	r1, r3
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f7f9 ff1c 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	3301      	adds	r3, #1
 8010108:	617b      	str	r3, [r7, #20]
 801010a:	e7e8      	b.n	80100de <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x82>
    for (; i<Max_N2kSwCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2b1f      	cmp	r3, #31
 8010110:	dc07      	bgt.n	8010122 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xc6>
 8010112:	21ff      	movs	r1, #255	; 0xff
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f7f9 ff11 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	3301      	adds	r3, #1
 801011e:	617b      	str	r3, [r7, #20]
 8010120:	e7f4      	b.n	801010c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
    for (i=0; i<Max_N2kModelVersion_len && pgm_read_byte(&ProductInformation->N2kModelVersion[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelVersion[i])); }
 8010122:	2300      	movs	r3, #0
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b1f      	cmp	r3, #31
 801012a:	dc13      	bgt.n	8010154 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 801012c:	68ba      	ldr	r2, [r7, #8]
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	4413      	add	r3, r2
 8010132:	3346      	adds	r3, #70	; 0x46
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00c      	beq.n	8010154 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	4413      	add	r3, r2
 8010140:	3346      	adds	r3, #70	; 0x46
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	4619      	mov	r1, r3
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f7f9 fef8 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	3301      	adds	r3, #1
 8010150:	617b      	str	r3, [r7, #20]
 8010152:	e7e8      	b.n	8010126 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xca>
    for (; i<Max_N2kModelVersion_len; i++ ) { N2kMsg.AddByte(0xff); }
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2b1f      	cmp	r3, #31
 8010158:	dc07      	bgt.n	801016a <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x10e>
 801015a:	21ff      	movs	r1, #255	; 0xff
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f7f9 feed 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	3301      	adds	r3, #1
 8010166:	617b      	str	r3, [r7, #20]
 8010168:	e7f4      	b.n	8010154 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
    if (OptionalSerialCode) {
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d016      	beq.n	801019e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x142>
      for (i=0; i<Max_N2kModelSerialCode_len && OptionalSerialCode[i]; i++ ) { N2kMsg.AddByte(OptionalSerialCode[i]); }
 8010170:	2300      	movs	r3, #0
 8010172:	617b      	str	r3, [r7, #20]
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	2b1f      	cmp	r3, #31
 8010178:	dc2a      	bgt.n	80101d0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	4413      	add	r3, r2
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d024      	beq.n	80101d0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	4413      	add	r3, r2
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	4619      	mov	r1, r3
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f7f9 fed3 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	3301      	adds	r3, #1
 801019a:	617b      	str	r3, [r7, #20]
 801019c:	e7ea      	b.n	8010174 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x118>
    } else {
      for (i=0; i<Max_N2kModelSerialCode_len && pgm_read_byte(&ProductInformation->N2kModelSerialCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelSerialCode[i])); }
 801019e:	2300      	movs	r3, #0
 80101a0:	617b      	str	r3, [r7, #20]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	2b1f      	cmp	r3, #31
 80101a6:	dc13      	bgt.n	80101d0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 80101a8:	68ba      	ldr	r2, [r7, #8]
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	4413      	add	r3, r2
 80101ae:	3367      	adds	r3, #103	; 0x67
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00c      	beq.n	80101d0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 80101b6:	68ba      	ldr	r2, [r7, #8]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	4413      	add	r3, r2
 80101bc:	3367      	adds	r3, #103	; 0x67
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	4619      	mov	r1, r3
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f7f9 feba 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	3301      	adds	r3, #1
 80101cc:	617b      	str	r3, [r7, #20]
 80101ce:	e7e8      	b.n	80101a2 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x146>
    }
    for (; i<Max_N2kModelSerialCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2b1f      	cmp	r3, #31
 80101d4:	dc07      	bgt.n	80101e6 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x18a>
 80101d6:	21ff      	movs	r1, #255	; 0xff
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f7f9 feaf 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	3301      	adds	r3, #1
 80101e2:	617b      	str	r3, [r7, #20]
 80101e4:	e7f4      	b.n	80101d0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->CertificationLevel));
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80101ec:	4619      	mov	r1, r3
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7f9 fea4 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->LoadEquivalency));
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80101fa:	4619      	mov	r1, r3
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7f9 fe9d 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
}
 8010202:	bf00      	nop
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	0001f014 	.word	0x0001f014

08010210 <_ZN9tNMEA200022SendProductInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendProductInformation(int iDev) {
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
  return SendProductInformation(0xff,iDev,false);
 801021a:	2300      	movs	r3, #0
 801021c:	683a      	ldr	r2, [r7, #0]
 801021e:	21ff      	movs	r1, #255	; 0xff
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f805 	bl	8010230 <_ZN9tNMEA200022SendProductInformationEhib>
 8010226:	4603      	mov	r3, r0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <_ZN9tNMEA200022SendProductInformationEhib>:

bool tNMEA2000::SendProductInformation(unsigned char Destination, int iDev, bool UseTP) {
 8010230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010234:	b0ca      	sub	sp, #296	; 0x128
 8010236:	af06      	add	r7, sp, #24
 8010238:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801023c:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8010240:	6020      	str	r0, [r4, #0]
 8010242:	4608      	mov	r0, r1
 8010244:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010248:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801024c:	600a      	str	r2, [r1, #0]
 801024e:	4619      	mov	r1, r3
 8010250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010254:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8010258:	4602      	mov	r2, r0
 801025a:	701a      	strb	r2, [r3, #0]
 801025c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010260:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8010264:	460a      	mov	r2, r1
 8010266:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendProductInformation(int iDev) {
#endif
  if ( !IsValidDevice(iDev) ) return false;
 8010268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801026c:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8010270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010278:	6811      	ldr	r1, [r2, #0]
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	f7fb f9d8 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8010280:	4603      	mov	r3, r0
 8010282:	f083 0301 	eor.w	r3, r3, #1
 8010286:	b2db      	uxtb	r3, r3
 8010288:	2b00      	cmp	r3, #0
 801028a:	d001      	beq.n	8010290 <_ZN9tNMEA200022SendProductInformationEhib+0x60>
 801028c:	2300      	movs	r3, #0
 801028e:	e151      	b.n	8010534 <_ZN9tNMEA200022SendProductInformationEhib+0x304>
  tN2kMsg RespondMsg(Devices[iDev].N2kSource);
 8010290:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	69da      	ldr	r2, [r3, #28]
 801029c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80102a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80102aa:	fb01 f303 	mul.w	r3, r1, r3
 80102ae:	4413      	add	r3, r2
 80102b0:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 80102b4:	f107 0010 	add.w	r0, r7, #16
 80102b8:	2300      	movs	r3, #0
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	2300      	movs	r3, #0
 80102be:	2206      	movs	r2, #6
 80102c0:	f7f9 fcca 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
  int iPIDev=iDev;
 80102c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80102c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 80102d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80102d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	69da      	ldr	r2, [r3, #28]
 80102de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80102e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80102e6:	fb01 f303 	mul.w	r3, r1, r3
 80102ea:	4413      	add	r3, r2
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d102      	bne.n	80102f8 <_ZN9tNMEA200022SendProductInformationEhib+0xc8>
 80102f2:	2300      	movs	r3, #0
 80102f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    if ( Devices[iPIDev].ProductInformation==0 ) return false; // Can not do anything.
 80102f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80102fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	69da      	ldr	r2, [r3, #28]
 8010304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010308:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801030c:	fb01 f303 	mul.w	r3, r1, r3
 8010310:	4413      	add	r3, r2
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d101      	bne.n	801031c <_ZN9tNMEA200022SendProductInformationEhib+0xec>
 8010318:	2300      	movs	r3, #0
 801031a:	e10b      	b.n	8010534 <_ZN9tNMEA200022SendProductInformationEhib+0x304>

    if ( Devices[iPIDev].ProductInformation==Devices[iPIDev].LocalProductInformation ) {
 801031c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	69da      	ldr	r2, [r3, #28]
 8010328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801032c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010330:	fb01 f303 	mul.w	r3, r1, r3
 8010334:	4413      	add	r3, r2
 8010336:	689a      	ldr	r2, [r3, #8]
 8010338:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801033c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	69d9      	ldr	r1, [r3, #28]
 8010344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010348:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801034c:	fb00 f303 	mul.w	r3, r0, r3
 8010350:	440b      	add	r3, r1
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	429a      	cmp	r2, r3
 8010356:	f040 808a 	bne.w	801046e <_ZN9tNMEA200022SendProductInformationEhib+0x23e>
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 801035a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801035e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	69da      	ldr	r2, [r3, #28]
 8010366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801036a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801036e:	fb01 f303 	mul.w	r3, r1, r3
 8010372:	4413      	add	r3, r2
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	469e      	mov	lr, r3
                                          Devices[iPIDev].ProductInformation->ProductCode,
 801037a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801037e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	69da      	ldr	r2, [r3, #28]
 8010386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801038a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801038e:	fb01 f303 	mul.w	r3, r1, r3
 8010392:	4413      	add	r3, r2
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	885b      	ldrh	r3, [r3, #2]
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 8010398:	4698      	mov	r8, r3
                                          Devices[iPIDev].ProductInformation->N2kModelID,
 801039a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801039e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	69da      	ldr	r2, [r3, #28]
 80103a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80103aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80103ae:	fb01 f303 	mul.w	r3, r1, r3
 80103b2:	4413      	add	r3, r2
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	1d1e      	adds	r6, r3, #4
                                          Devices[iPIDev].ProductInformation->N2kSwCode,
 80103b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80103bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	69da      	ldr	r2, [r3, #28]
 80103c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80103c8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80103cc:	fb01 f303 	mul.w	r3, r1, r3
 80103d0:	4413      	add	r3, r2
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	3325      	adds	r3, #37	; 0x25
                                          Devices[iPIDev].ProductInformation->N2kModelVersion,
 80103d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80103da:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80103de:	6812      	ldr	r2, [r2, #0]
 80103e0:	69d1      	ldr	r1, [r2, #28]
 80103e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80103e6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80103ea:	fb00 f202 	mul.w	r2, r0, r2
 80103ee:	440a      	add	r2, r1
 80103f0:	6892      	ldr	r2, [r2, #8]
 80103f2:	3246      	adds	r2, #70	; 0x46
                                          Devices[iPIDev].ProductInformation->N2kModelSerialCode,
 80103f4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80103f8:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80103fc:	6809      	ldr	r1, [r1, #0]
 80103fe:	69c8      	ldr	r0, [r1, #28]
 8010400:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8010404:	f44f 74ac 	mov.w	r4, #344	; 0x158
 8010408:	fb04 f101 	mul.w	r1, r4, r1
 801040c:	4401      	add	r1, r0
 801040e:	6889      	ldr	r1, [r1, #8]
 8010410:	3167      	adds	r1, #103	; 0x67
                                          Devices[iPIDev].ProductInformation->CertificationLevel,
 8010412:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8010416:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801041a:	6800      	ldr	r0, [r0, #0]
 801041c:	69c4      	ldr	r4, [r0, #28]
 801041e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8010422:	f44f 75ac 	mov.w	r5, #344	; 0x158
 8010426:	fb05 f000 	mul.w	r0, r5, r0
 801042a:	4420      	add	r0, r4
 801042c:	6880      	ldr	r0, [r0, #8]
 801042e:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
                                          Devices[iPIDev].ProductInformation->LoadEquivalency);
 8010432:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8010436:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801043a:	6824      	ldr	r4, [r4, #0]
 801043c:	69e5      	ldr	r5, [r4, #28]
 801043e:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8010442:	f44f 7cac 	mov.w	ip, #344	; 0x158
 8010446:	fb0c f404 	mul.w	r4, ip, r4
 801044a:	442c      	add	r4, r5
 801044c:	68a4      	ldr	r4, [r4, #8]
 801044e:	f894 4089 	ldrb.w	r4, [r4, #137]	; 0x89
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 8010452:	f107 0510 	add.w	r5, r7, #16
 8010456:	9404      	str	r4, [sp, #16]
 8010458:	9003      	str	r0, [sp, #12]
 801045a:	9102      	str	r1, [sp, #8]
 801045c:	9201      	str	r2, [sp, #4]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	4633      	mov	r3, r6
 8010462:	4642      	mov	r2, r8
 8010464:	4671      	mov	r1, lr
 8010466:	4628      	mov	r0, r5
 8010468:	f7fb f9b8 	bl	800b7dc <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>
 801046c:	e013      	b.n	8010496 <_ZN9tNMEA200022SendProductInformationEhib+0x266>
    } else {
      SetN2kPGN126996Progmem(RespondMsg,Devices[iPIDev].ProductInformation);
 801046e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	69da      	ldr	r2, [r3, #28]
 801047a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801047e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010482:	fb01 f303 	mul.w	r3, r1, r3
 8010486:	4413      	add	r3, r2
 8010488:	6899      	ldr	r1, [r3, #8]
 801048a:	f107 0310 	add.w	r3, r7, #16
 801048e:	2200      	movs	r2, #0
 8010490:	4618      	mov	r0, r3
 8010492:	f7ff fde3 	bl	801005c <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>
    }
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 8010496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801049a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801049e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80104a2:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 80104a6:	7812      	ldrb	r2, [r2, #0]
 80104a8:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetIsTPMessage(UseTP);
 80104aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80104ae:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80104b2:	781a      	ldrb	r2, [r3, #0]
 80104b4:	f107 0310 	add.w	r3, r7, #16
 80104b8:	4611      	mov	r1, r2
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fa fcf5 	bl	800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,iDev) ) {
 80104c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80104c4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80104c8:	f107 0110 	add.w	r1, r7, #16
 80104cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80104d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104d4:	6812      	ldr	r2, [r2, #0]
 80104d6:	6818      	ldr	r0, [r3, #0]
 80104d8:	f7fd fa04 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d014      	beq.n	801050c <_ZN9tNMEA200022SendProductInformationEhib+0x2dc>
      Devices[iDev].ClearPendingProductInformation();
 80104e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80104e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	69da      	ldr	r2, [r3, #28]
 80104ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80104f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80104fc:	fb01 f303 	mul.w	r3, r1, r3
 8010500:	4413      	add	r3, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7fa ff69 	bl	800b3da <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>
      return true;
 8010508:	2301      	movs	r3, #1
 801050a:	e013      	b.n	8010534 <_ZN9tNMEA200022SendProductInformationEhib+0x304>
    }

    Devices[iDev].SetPendingProductInformation();
 801050c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	69da      	ldr	r2, [r3, #28]
 8010518:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801051c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010526:	fb01 f303 	mul.w	r3, r1, r3
 801052a:	4413      	add	r3, r2
 801052c:	4618      	mov	r0, r3
 801052e:	f7fa ff3c 	bl	800b3aa <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>
    return false;
 8010532:	2300      	movs	r3, #0
}
 8010534:	4618      	mov	r0, r3
 8010536:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801053a:	46bd      	mov	sp, r7
 801053c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010540 <_ZN9tNMEA200028SendConfigurationInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  return SendConfigurationInformation(0xff,DeviceIndex,false);
 801054a:	2300      	movs	r3, #0
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	21ff      	movs	r1, #255	; 0xff
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 f805 	bl	8010560 <_ZN9tNMEA200028SendConfigurationInformationEhib>
 8010556:	4603      	mov	r3, r0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <_ZN9tNMEA200028SendConfigurationInformationEhib>:

bool tNMEA2000::SendConfigurationInformation(unsigned char Destination, int DeviceIndex, bool UseTP) {
 8010560:	b590      	push	{r4, r7, lr}
 8010562:	b0c7      	sub	sp, #284	; 0x11c
 8010564:	af02      	add	r7, sp, #8
 8010566:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801056a:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801056e:	6020      	str	r0, [r4, #0]
 8010570:	4608      	mov	r0, r1
 8010572:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010576:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801057a:	600a      	str	r2, [r1, #0]
 801057c:	4619      	mov	r1, r3
 801057e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010582:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8010586:	4602      	mov	r2, r0
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801058e:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8010592:	460a      	mov	r2, r1
 8010594:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
#endif
  if ( !IsValidDevice(DeviceIndex) ) return false;
 8010596:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801059a:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 801059e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105a6:	6811      	ldr	r1, [r2, #0]
 80105a8:	6818      	ldr	r0, [r3, #0]
 80105aa:	f7fb f841 	bl	800b630 <_ZNK9tNMEA200013IsValidDeviceEi>
 80105ae:	4603      	mov	r3, r0
 80105b0:	f083 0301 	eor.w	r3, r3, #1
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <_ZN9tNMEA200028SendConfigurationInformationEhib+0x5e>
 80105ba:	2300      	movs	r3, #0
 80105bc:	e0a8      	b.n	8010710 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b0>
  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 80105be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	69da      	ldr	r2, [r3, #28]
 80105ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80105d8:	fb01 f303 	mul.w	r3, r1, r3
 80105dc:	4413      	add	r3, r2
 80105de:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 80105e2:	f107 0014 	add.w	r0, r7, #20
 80105e6:	2300      	movs	r3, #0
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	2300      	movs	r3, #0
 80105ec:	2206      	movs	r2, #6
 80105ee:	f7f9 fb33 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>

    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 80105f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80105f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d10f      	bne.n	8010622 <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc2>
         ConfigurationInformation.InstallationDescription1!=0 ||
 8010602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 801060e:	2b00      	cmp	r3, #0
 8010610:	d107      	bne.n	8010622 <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc2>
         ConfigurationInformation.InstallationDescription2!=0 ) {
 8010612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         ConfigurationInformation.InstallationDescription1!=0 ||
 801061e:	2b00      	cmp	r3, #0
 8010620:	d023      	beq.n	801066a <_ZN9tNMEA200028SendConfigurationInformationEhib+0x10a>
        SetN2kConfigurationInformation(RespondMsg,
 8010622:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801062e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801063e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	6b1c      	ldr	r4, [r3, #48]	; 0x30
                                       ConfigurationInformation.ManufacturerInformation,
                                       ConfigurationInformation.InstallationDescription1,
                                       ConfigurationInformation.InstallationDescription2,
                                       LocalConfigurationInformationData==0);
 8010646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801064a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        SetN2kConfigurationInformation(RespondMsg,
 8010652:	2b00      	cmp	r3, #0
 8010654:	bf0c      	ite	eq
 8010656:	2301      	moveq	r3, #1
 8010658:	2300      	movne	r3, #0
 801065a:	b2db      	uxtb	r3, r3
 801065c:	f107 0014 	add.w	r0, r7, #20
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	4623      	mov	r3, r4
 8010664:	f7fb f8d7 	bl	800b816 <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>
 8010668:	e006      	b.n	8010678 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x118>
    } else { // No information provided, so respond not available
      SetN2kPGNISOAcknowledgement(RespondMsg,1,0xff,126998L);
 801066a:	f107 0014 	add.w	r0, r7, #20
 801066e:	4b2b      	ldr	r3, [pc, #172]	; (801071c <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1bc>)
 8010670:	22ff      	movs	r2, #255	; 0xff
 8010672:	2101      	movs	r1, #1
 8010674:	f7fb f890 	bl	800b798 <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
    }

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 8010678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801067c:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    RespondMsg.SetIsTPMessage(UseTP);
 8010686:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801068a:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 801068e:	781a      	ldrb	r2, [r3, #0]
 8010690:	f107 0314 	add.w	r3, r7, #20
 8010694:	4611      	mov	r1, r2
 8010696:	4618      	mov	r0, r3
 8010698:	f7fa fc07 	bl	800aeaa <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,DeviceIndex) ) {
 801069c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106a0:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80106a4:	f107 0114 	add.w	r1, r7, #20
 80106a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106b0:	6812      	ldr	r2, [r2, #0]
 80106b2:	6818      	ldr	r0, [r3, #0]
 80106b4:	f7fd f916 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d014      	beq.n	80106e8 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x188>
      Devices[DeviceIndex].ClearPendingConfigurationInformation();
 80106be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	69da      	ldr	r2, [r3, #28]
 80106ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80106d8:	fb01 f303 	mul.w	r3, r1, r3
 80106dc:	4413      	add	r3, r2
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fa feb5 	bl	800b44e <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>
      return true;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e013      	b.n	8010710 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b0>
    }

    Devices[DeviceIndex].SetPendingConfigurationInformation();
 80106e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	69da      	ldr	r2, [r3, #28]
 80106f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010702:	fb01 f303 	mul.w	r3, r1, r3
 8010706:	4413      	add	r3, r2
 8010708:	4618      	mov	r0, r3
 801070a:	f7fa fe84 	bl	800b416 <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>
    return false;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8010716:	46bd      	mov	sp, r7
 8010718:	bd90      	pop	{r4, r7, pc}
 801071a:	bf00      	nop
 801071c:	0001f016 	.word	0x0001f016

08010720 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>:

//*****************************************************************************
void tNMEA2000::RespondISORequest(const tN2kMsg &N2kMsg, unsigned long RequestedPGN, int iDev) {
 8010720:	b590      	push	{r4, r7, lr}
 8010722:	b0c7      	sub	sp, #284	; 0x11c
 8010724:	af02      	add	r7, sp, #8
 8010726:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801072a:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801072e:	6020      	str	r0, [r4, #0]
 8010730:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8010734:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8010738:	6001      	str	r1, [r0, #0]
 801073a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801073e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8010742:	600a      	str	r2, [r1, #0]
 8010744:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010748:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 801074c:	6013      	str	r3, [r2, #0]
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 801074e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010752:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801075a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801075e:	6811      	ldr	r1, [r2, #0]
 8010760:	6818      	ldr	r0, [r3, #0]
 8010762:	f000 fa2d 	bl	8010bc0 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	f040 80ce 	bne.w	801090a <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ea>

    switch (RequestedPGN) {
 801076e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010772:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a67      	ldr	r2, [pc, #412]	; (8010918 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d06b      	beq.n	8010856 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x136>
 801077e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4a63      	ldr	r2, [pc, #396]	; (8010918 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d870      	bhi.n	8010870 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 801078e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a60      	ldr	r2, [pc, #384]	; (801091c <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d04e      	beq.n	801083c <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x11c>
 801079e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a5c      	ldr	r2, [pc, #368]	; (801091c <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d860      	bhi.n	8010870 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 80107ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 80107bc:	d008      	beq.n	80107d0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xb0>
 80107be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 80107cc:	d00f      	beq.n	80107ee <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xce>
 80107ce:	e04f      	b.n	8010870 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
      case 60928L: /*ISO Address Claim*/  // Someone is asking others to claim their addresses
        SendIsoAddressClaim(0xff,iDev);
 80107d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107d4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80107d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107dc:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80107e0:	2300      	movs	r3, #0
 80107e2:	6812      	ldr	r2, [r2, #0]
 80107e4:	21ff      	movs	r1, #255	; 0xff
 80107e6:	6800      	ldr	r0, [r0, #0]
 80107e8:	f7ff f95a 	bl	800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        break;
 80107ec:	e090      	b.n	8010910 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126464L:
        SendTxPGNList(N2kMsg.Source,iDev);
 80107ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	7b19      	ldrb	r1, [r3, #12]
 80107fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107fe:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010802:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010806:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 801080a:	2300      	movs	r3, #0
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	6800      	ldr	r0, [r0, #0]
 8010810:	f7ff f9f8 	bl	800fc04 <_ZN9tNMEA200013SendTxPGNListEhib>
        SendRxPGNList(N2kMsg.Source,iDev);
 8010814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	7b19      	ldrb	r1, [r3, #12]
 8010820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010824:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010828:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801082c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8010830:	2300      	movs	r3, #0
 8010832:	6812      	ldr	r2, [r2, #0]
 8010834:	6800      	ldr	r0, [r0, #0]
 8010836:	f7ff fafb 	bl	800fe30 <_ZN9tNMEA200013SendRxPGNListEhib>
        break;
 801083a:	e069      	b.n	8010910 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126996L: /* Product information */
        SendProductInformation(iDev);
 801083c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010840:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010844:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801084c:	6811      	ldr	r1, [r2, #0]
 801084e:	6818      	ldr	r0, [r3, #0]
 8010850:	f7ff fcde 	bl	8010210 <_ZN9tNMEA200022SendProductInformationEi>
        break;
 8010854:	e05c      	b.n	8010910 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126998L: /* Configuration information */
        SendConfigurationInformation(iDev);
 8010856:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801085a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801085e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010866:	6811      	ldr	r1, [r2, #0]
 8010868:	6818      	ldr	r0, [r3, #0]
 801086a:	f7ff fe69 	bl	8010540 <_ZN9tNMEA200028SendConfigurationInformationEi>
        break;
 801086e:	e04f      	b.n	8010910 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      default:
        /* If user has established a handler */
        if (ISORqstHandler!=0) {
 8010870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801087c:	2b00      	cmp	r3, #0
 801087e:	d019      	beq.n	80108b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x194>
          /* and if it handled the request, we are done */
          if (ISORqstHandler(RequestedPGN,N2kMsg.Source,iDev)) {
 8010880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801088c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010890:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	7b11      	ldrb	r1, [r2, #12]
 8010898:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801089c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80108a0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80108a4:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80108a8:	6812      	ldr	r2, [r2, #0]
 80108aa:	6800      	ldr	r0, [r0, #0]
 80108ac:	4798      	blx	r3
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d12c      	bne.n	801090e <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ee>
            return;
          }
        }

        tN2kMsg   N2kMsgR;
 80108b4:	f107 0014 	add.w	r0, r7, #20
 80108b8:	2300      	movs	r3, #0
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	2300      	movs	r3, #0
 80108be:	2206      	movs	r2, #6
 80108c0:	210f      	movs	r1, #15
 80108c2:	f7f9 f9c9 	bl	8009c58 <_ZN7tN2kMsgC1Ehhmi>
        // No user handler, or there was one and it retured FALSE.  Send NAK
        SetN2kPGNISOAcknowledgement(N2kMsgR,1,0xff,RequestedPGN);
 80108c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80108ce:	f107 0014 	add.w	r0, r7, #20
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	22ff      	movs	r2, #255	; 0xff
 80108d6:	2101      	movs	r1, #1
 80108d8:	f7fa ff5e 	bl	800b798 <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
        // Direct the response to original requester.
        N2kMsgR.Destination  = N2kMsg.Source;
 80108dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	7b1b      	ldrb	r3, [r3, #12]
 80108e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        SendMsg(N2kMsgR,iDev);
 80108ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108f0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80108f4:	f107 0114 	add.w	r1, r7, #20
 80108f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010900:	6812      	ldr	r2, [r2, #0]
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	f7fc ffee 	bl	800d8e4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8010908:	e002      	b.n	8010910 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 801090a:	bf00      	nop
 801090c:	e000      	b.n	8010910 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
            return;
 801090e:	bf00      	nop
    }
}
 8010910:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8010914:	46bd      	mov	sp, r7
 8010916:	bd90      	pop	{r4, r7, pc}
 8010918:	0001f016 	.word	0x0001f016
 801091c:	0001f014 	.word	0x0001f014

08010920 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISORequest(const tN2kMsg &N2kMsg) {
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
  unsigned long RequestedPGN;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	7b5b      	ldrb	r3, [r3, #13]
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff f806 	bl	800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010936:	60f8      	str	r0, [r7, #12]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	7b5b      	ldrb	r3, [r3, #13]
 801093c:	4618      	mov	r0, r3
 801093e:	f7f6 fdd8 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8010942:	4603      	mov	r3, r0
 8010944:	f083 0301 	eor.w	r3, r3, #1
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d005      	beq.n	801095a <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010954:	d101      	bne.n	801095a <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 8010956:	2301      	movs	r3, #1
 8010958:	e000      	b.n	801095c <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3c>
 801095a:	2300      	movs	r3, #0
 801095c:	2b00      	cmp	r3, #0
 801095e:	d125      	bne.n	80109ac <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8c>

    ParseN2kPGNISORequest(N2kMsg,RequestedPGN);
 8010960:	f107 0308 	add.w	r3, r7, #8
 8010964:	4619      	mov	r1, r3
 8010966:	6838      	ldr	r0, [r7, #0]
 8010968:	f7fa ff68 	bl	800b83c <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>
    N2kMsgDbgStart("ISO request: "); N2kMsgDbgln(RequestedPGN);
    if (tNMEA2000::IsBroadcast(N2kMsg.Destination)) { // broadcast -> respond from all devices
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	7b5b      	ldrb	r3, [r3, #13]
 8010970:	4618      	mov	r0, r3
 8010972:	f7f6 fdbe 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d010      	beq.n	801099e <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x7e>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondISORequest(N2kMsg,RequestedPGN,iDev);
 801097c:	2300      	movs	r3, #0
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a1b      	ldr	r3, [r3, #32]
 8010984:	68fa      	ldr	r2, [r7, #12]
 8010986:	429a      	cmp	r2, r3
 8010988:	da11      	bge.n	80109ae <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6839      	ldr	r1, [r7, #0]
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7ff fec5 	bl	8010720 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	3301      	adds	r3, #1
 801099a:	60fb      	str	r3, [r7, #12]
 801099c:	e7f0      	b.n	8010980 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x60>
    } else {
      RespondISORequest(N2kMsg,RequestedPGN,iDev);
 801099e:	68ba      	ldr	r2, [r7, #8]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	6839      	ldr	r1, [r7, #0]
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7ff febb 	bl	8010720 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 80109aa:	e000      	b.n	80109ae <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 80109ac:	bf00      	nop
    }
}
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// Here we first call callback and if that will not handle function, we use default handler.
void tNMEA2000::RespondGroupFunction(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 80109b4:	b590      	push	{r4, r7, lr}
 80109b6:	b089      	sub	sp, #36	; 0x24
 80109b8:	af02      	add	r7, sp, #8
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	603b      	str	r3, [r7, #0]
 80109c0:	4613      	mov	r3, r2
 80109c2:	71fb      	strb	r3, [r7, #7]
    // Find group function handler for PGN
    tN2kGroupFunctionHandler *pGroupFunctionHandler;
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109c8:	617b      	str	r3, [r7, #20]
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d02c      	beq.n	8010a2a <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      if ( pGroupFunctionHandler->PGN==PGNForGroupFunction ) {
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	689b      	ldr	r3, [r3, #8]
 80109d4:	683a      	ldr	r2, [r7, #0]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d10b      	bne.n	80109f2 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x3e>
        // For matching PGN we run handler and exit always
        pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev);
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3320      	adds	r3, #32
 80109e0:	681c      	ldr	r4, [r3, #0]
 80109e2:	79fa      	ldrb	r2, [r7, #7]
 80109e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	68b9      	ldr	r1, [r7, #8]
 80109ec:	6978      	ldr	r0, [r7, #20]
 80109ee:	47a0      	blx	r4
        return;
 80109f0:	e01b      	b.n	8010a2a <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      } else if ( pGroupFunctionHandler->PGN==0 &&
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d10f      	bne.n	8010a1a <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
                  pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev)
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3320      	adds	r3, #32
 8010a00:	681c      	ldr	r4, [r3, #0]
 8010a02:	79fa      	ldrb	r2, [r7, #7]
 8010a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	6978      	ldr	r0, [r7, #20]
 8010a0e:	47a0      	blx	r4
 8010a10:	4603      	mov	r3, r0
      } else if ( pGroupFunctionHandler->PGN==0 &&
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
 8010a16:	2301      	movs	r3, #1
 8010a18:	e000      	b.n	8010a1c <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d103      	bne.n	8010a28 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x74>
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	617b      	str	r3, [r7, #20]
 8010a26:	e7d0      	b.n	80109ca <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x16>
                ) {
        // If handler PGN is 0, we try handler and exit, if it does it. Default handler has PGN=0, but
        // it is at end of list. This allows user to add handlers, which tries to handle all PGNs.
        return;
 8010a28:	bf00      	nop
      }
    }
}
 8010a2a:	371c      	adds	r7, #28
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd90      	pop	{r4, r7, pc}

08010a30 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>:

//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// On the document it is not clear can request be send as broadcast, so we handle it, if we can.
void tNMEA2000::HandleGroupFunction(const tN2kMsg &N2kMsg) {
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  tN2kGroupFunctionCode GroupFunctionCode;
  unsigned long PGNForGroupFunction;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	7b5b      	ldrb	r3, [r3, #13]
 8010a3e:	4619      	mov	r1, r3
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7fe ff7e 	bl	800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010a46:	6178      	str	r0, [r7, #20]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	7b5b      	ldrb	r3, [r3, #13]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f6 fd50 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8010a52:	4603      	mov	r3, r0
 8010a54:	f083 0301 	eor.w	r3, r3, #1
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d005      	beq.n	8010a6a <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a64:	d101      	bne.n	8010a6a <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 8010a66:	2301      	movs	r3, #1
 8010a68:	e000      	b.n	8010a6c <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3c>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d133      	bne.n	8010ad8 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xa8>

    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 8010a70:	f107 020c 	add.w	r2, r7, #12
 8010a74:	f107 0313 	add.w	r3, r7, #19
 8010a78:	4619      	mov	r1, r3
 8010a7a:	6838      	ldr	r0, [r7, #0]
 8010a7c:	f7f7 f84c 	bl	8007b18 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>
 8010a80:	4603      	mov	r3, r0
 8010a82:	f083 0301 	eor.w	r3, r3, #1
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d127      	bne.n	8010adc <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xac>
    N2kMsgDbgStart("Group function: "); N2kMsgDbgln(PGNForGroupFunction);
    if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) { // broadcast -> respond from all devices
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	7b5b      	ldrb	r3, [r3, #13]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7f6 fd2e 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d013      	beq.n	8010ac4 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x94>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	617b      	str	r3, [r7, #20]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6a1b      	ldr	r3, [r3, #32]
 8010aa4:	697a      	ldr	r2, [r7, #20]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	da19      	bge.n	8010ade <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
 8010aaa:	7cfa      	ldrb	r2, [r7, #19]
 8010aac:	68f9      	ldr	r1, [r7, #12]
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	6839      	ldr	r1, [r7, #0]
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff ff7c 	bl	80109b4 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	617b      	str	r3, [r7, #20]
 8010ac2:	e7ed      	b.n	8010aa0 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x70>
    } else {
      RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 8010ac4:	7cfa      	ldrb	r2, [r7, #19]
 8010ac6:	68f9      	ldr	r1, [r7, #12]
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	460b      	mov	r3, r1
 8010ace:	6839      	ldr	r1, [r7, #0]
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7ff ff6f 	bl	80109b4 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 8010ad6:	e002      	b.n	8010ade <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010ad8:	bf00      	nop
 8010ada:	e000      	b.n	8010ade <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 8010adc:	bf00      	nop
    }
}
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <_ZN9tNMEA200017StartAddressClaimEi>:
#endif

//*****************************************************************************
void tNMEA2000::StartAddressClaim(int iDev) {
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  if ( IsReadyToSend() ) { // Start address claim automatically
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7fa fdb3 	bl	800b65a <_ZNK9tNMEA200013IsReadyToSendEv>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d033      	beq.n	8010b62 <_ZN9tNMEA200017StartAddressClaimEi+0x7e>
    Devices[iDev].AddressClaimTimer.Disable();
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	69da      	ldr	r2, [r3, #28]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010b04:	fb01 f303 	mul.w	r3, r1, r3
 8010b08:	4413      	add	r3, r2
 8010b0a:	3320      	adds	r3, #32
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fa faab 	bl	800b068 <_ZN13tN2kScheduler7DisableEv>
    if ( (ForwardStream!=0) && ( ForwardType==tNMEA2000::fwdt_Text) ) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d010      	beq.n	8010b3c <_ZN9tNMEA200017StartAddressClaimEi+0x58>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	799b      	ldrb	r3, [r3, #6]
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d10c      	bne.n	8010b3c <_ZN9tNMEA200017StartAddressClaimEi+0x58>
      ForwardStream->print(F("Start address claim for device "));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	4911      	ldr	r1, [pc, #68]	; (8010b6c <_ZN9tNMEA200017StartAddressClaimEi+0x88>)
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fa f8ea 	bl	800ad02 <_ZN9N2kStream5printEPKc>
      ForwardStream->println(iDev);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	220a      	movs	r2, #10
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fa f956 	bl	800ade8 <_ZN9N2kStream7printlnEih>
    }
    SendIsoAddressClaim(0xff,iDev);
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	21ff      	movs	r1, #255	; 0xff
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7fe ffac 	bl	800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
    Devices[iDev].AddressClaimTimer.FromNow(N2kAddressClaimTimeout);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	69da      	ldr	r2, [r3, #28]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010b52:	fb01 f303 	mul.w	r3, r1, r3
 8010b56:	4413      	add	r3, r2
 8010b58:	3320      	adds	r3, #32
 8010b5a:	21fa      	movs	r1, #250	; 0xfa
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7fa fad0 	bl	800b102 <_ZN13tN2kScheduler7FromNowEm>
  }
}
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	08015290 	.word	0x08015290

08010b70 <_ZN9tNMEA200017StartAddressClaimEv>:

//*****************************************************************************
void tNMEA2000::StartAddressClaim() {
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++) {
 8010b78:	2300      	movs	r3, #0
 8010b7a:	60fb      	str	r3, [r7, #12]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6a1b      	ldr	r3, [r3, #32]
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	da18      	bge.n	8010bb8 <_ZN9tNMEA200017StartAddressClaimEv+0x48>
    if ( Devices[i].N2kSource==N2kNullCanBusAddress ) GetNextAddress(i,true); // On restart try address claiming from the beginning
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	69da      	ldr	r2, [r3, #28]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010b90:	fb01 f303 	mul.w	r3, r1, r3
 8010b94:	4413      	add	r3, r2
 8010b96:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010b9a:	2bfe      	cmp	r3, #254	; 0xfe
 8010b9c:	d104      	bne.n	8010ba8 <_ZN9tNMEA200017StartAddressClaimEv+0x38>
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	68f9      	ldr	r1, [r7, #12]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 f9a3 	bl	8010eee <_ZN9tNMEA200014GetNextAddressEib>
    StartAddressClaim(i);
 8010ba8:	68f9      	ldr	r1, [r7, #12]
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff ff9a 	bl	8010ae4 <_ZN9tNMEA200017StartAddressClaimEi>
  for (int i=0; i<DeviceCount; i++) {
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	e7e1      	b.n	8010b7c <_ZN9tNMEA200017StartAddressClaimEv+0xc>
  }
}
 8010bb8:	bf00      	nop
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <_ZN9tNMEA200021IsAddressClaimStartedEi>:

//*****************************************************************************
bool tNMEA2000::IsAddressClaimStarted(int iDev) {
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  // Reset address claim after timeout
  bool result=Devices[iDev].AddressClaimTimer.IsEnabled();
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	69da      	ldr	r2, [r3, #28]
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010bd4:	fb01 f303 	mul.w	r3, r1, r3
 8010bd8:	4413      	add	r3, r2
 8010bda:	3320      	adds	r3, #32
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fa fa61 	bl	800b0a4 <_ZNK13tN2kScheduler9IsEnabledEv>
 8010be2:	4603      	mov	r3, r0
 8010be4:	73fb      	strb	r3, [r7, #15]
  if ( result ) {
 8010be6:	7bfb      	ldrb	r3, [r7, #15]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d027      	beq.n	8010c3c <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
    if ( Devices[iDev].AddressClaimTimer.IsTime() ) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	69da      	ldr	r2, [r3, #28]
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010bf6:	fb01 f303 	mul.w	r3, r1, r3
 8010bfa:	4413      	add	r3, r2
 8010bfc:	3320      	adds	r3, #32
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fa fa61 	bl	800b0c6 <_ZNK13tN2kScheduler6IsTimeEv>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d018      	beq.n	8010c3c <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
      Devices[iDev].AddressClaimTimer.Disable();
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	69da      	ldr	r2, [r3, #28]
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010c14:	fb01 f303 	mul.w	r3, r1, r3
 8010c18:	4413      	add	r3, r2
 8010c1a:	3320      	adds	r3, #32
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fa fa23 	bl	800b068 <_ZN13tN2kScheduler7DisableEv>
      result=false;
 8010c22:	2300      	movs	r3, #0
 8010c24:	73fb      	strb	r3, [r7, #15]
      // We have claimed our address, so save end source for next possible claim run.
      Devices[iDev].UpdateAddressClaimEndSource();
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	69da      	ldr	r2, [r3, #28]
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010c30:	fb01 f303 	mul.w	r3, r1, r3
 8010c34:	4413      	add	r3, r2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fa fc27 	bl	800b48a <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    }
  }

  return result;
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISOAddressClaim(const tN2kMsg &N2kMsg) {
 8010c46:	b590      	push	{r4, r7, lr}
 8010c48:	b089      	sub	sp, #36	; 0x24
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	6039      	str	r1, [r7, #0]
  int iDev=FindSourceDeviceIndex(N2kMsg.Source);
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	7b1b      	ldrb	r3, [r3, #12]
 8010c54:	4619      	mov	r1, r3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7fe fe73 	bl	800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010c5c:	61f8      	str	r0, [r7, #28]
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	7b1b      	ldrb	r3, [r3, #12]
 8010c62:	2bfe      	cmp	r3, #254	; 0xfe
 8010c64:	d073      	beq.n	8010d4e <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x108>
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c6c:	d06f      	beq.n	8010d4e <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x108>

  int Index=0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60fb      	str	r3, [r7, #12]
  uint64_t CallerName=N2kMsg.GetUInt64(Index);
 8010c72:	f107 010c 	add.w	r1, r7, #12
 8010c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c7e:	6838      	ldr	r0, [r7, #0]
 8010c80:	f7f9 f9f5 	bl	800a06e <_ZNK7tN2kMsg9GetUInt64ERiy>
 8010c84:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (Devices[iDev].DeviceInformation.GetName()<CallerName) { // We can keep our address, so just reclaim it
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	69da      	ldr	r2, [r3, #28]
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010c92:	fb01 f303 	mul.w	r3, r1, r3
 8010c96:	4413      	add	r3, r2
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f6 fc1d 	bl	80074d8 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8010c9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ca2:	4290      	cmp	r0, r2
 8010ca4:	eb71 0303 	sbcs.w	r3, r1, r3
 8010ca8:	bf34      	ite	cc
 8010caa:	2301      	movcc	r3, #1
 8010cac:	2300      	movcs	r3, #0
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d006      	beq.n	8010cc2 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x7c>
      SendIsoAddressClaim(0xff,iDev);
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	69fa      	ldr	r2, [r7, #28]
 8010cb8:	21ff      	movs	r1, #255	; 0xff
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7fe fef0 	bl	800faa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 8010cc0:	e046      	b.n	8010d50 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x10a>
    } else { // we have to try an other address
      if ( Devices[iDev].DeviceInformation.GetName()==CallerName && IsAddressClaimStarted(iDev) ) {
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	69da      	ldr	r2, [r3, #28]
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010ccc:	fb01 f303 	mul.w	r3, r1, r3
 8010cd0:	4413      	add	r3, r2
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7f6 fc00 	bl	80074d8 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8010cd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010cdc:	428b      	cmp	r3, r1
 8010cde:	bf08      	it	eq
 8010ce0:	4282      	cmpeq	r2, r0
 8010ce2:	d108      	bne.n	8010cf6 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb0>
 8010ce4:	69f9      	ldr	r1, [r7, #28]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f7ff ff6a 	bl	8010bc0 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d001      	beq.n	8010cf6 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb0>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e000      	b.n	8010cf8 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb2>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01e      	beq.n	8010d3a <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xf4>
        // If the name is same, then the first instance will get claim and change its address.
        // This should not happen, if user takes care of setting unique ID for device information.
        // If he does not there is no problem with this class, but e.g. Garmin gets crazy.
        // Try to solve situation by changing our device instance.
        Devices[iDev].DeviceInformation.SetDeviceInstance(Devices[iDev].DeviceInformation.GetDeviceInstance()+1);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	69da      	ldr	r2, [r3, #28]
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010d06:	fb01 f303 	mul.w	r3, r1, r3
 8010d0a:	4413      	add	r3, r2
 8010d0c:	461c      	mov	r4, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	69da      	ldr	r2, [r3, #28]
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010d18:	fb01 f303 	mul.w	r3, r1, r3
 8010d1c:	4413      	add	r3, r2
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fa fa3e 	bl	800b1a0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8010d24:	4603      	mov	r3, r0
 8010d26:	3301      	adds	r3, #1
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f7fa fa29 	bl	800b184 <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
        DeviceInformationChanged=true;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2201      	movs	r2, #1
 8010d36:	769a      	strb	r2, [r3, #26]
 8010d38:	e004      	b.n	8010d44 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xfe>
      } else {
        GetNextAddress(iDev);
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	69f9      	ldr	r1, [r7, #28]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 f8d5 	bl	8010eee <_ZN9tNMEA200014GetNextAddressEib>
      }
      StartAddressClaim(iDev);
 8010d44:	69f9      	ldr	r1, [r7, #28]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff fecc 	bl	8010ae4 <_ZN9tNMEA200017StartAddressClaimEi>
 8010d4c:	e000      	b.n	8010d50 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x10a>
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 8010d4e:	bf00      	nop
    }
}
 8010d50:	3724      	adds	r7, #36	; 0x24
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd90      	pop	{r4, r7, pc}

08010d56 <_ZN9tNMEA200022HandleCommandedAddressEyhi>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(uint64_t CommandedName, unsigned char NewAddress, int iDev) {
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b084      	sub	sp, #16
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	60f8      	str	r0, [r7, #12]
 8010d5e:	e9c7 2300 	strd	r2, r3, [r7]
  if ( IsBroadcast(NewAddress) ) return;
 8010d62:	7e3b      	ldrb	r3, [r7, #24]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f6 fbc4 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d140      	bne.n	8010df2 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9c>
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	69da      	ldr	r2, [r3, #28]
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010d7a:	fb01 f303 	mul.w	r3, r1, r3
 8010d7e:	4413      	add	r3, r2
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7f6 fba9 	bl	80074d8 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8010d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d8a:	428b      	cmp	r3, r1
 8010d8c:	bf08      	it	eq
 8010d8e:	4282      	cmpeq	r2, r0
 8010d90:	d10e      	bne.n	8010db0 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
      Devices[iDev].N2kSource!=NewAddress) { // We have been commanded to set our address
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	69da      	ldr	r2, [r3, #28]
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010d9c:	fb01 f303 	mul.w	r3, r1, r3
 8010da0:	4413      	add	r3, r2
 8010da2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 8010da6:	7e3a      	ldrb	r2, [r7, #24]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d001      	beq.n	8010db0 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
 8010dac:	2301      	movs	r3, #1
 8010dae:	e000      	b.n	8010db2 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5c>
 8010db0:	2300      	movs	r3, #0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d01e      	beq.n	8010df4 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9e>
    Devices[iDev].N2kSource=NewAddress;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	69da      	ldr	r2, [r3, #28]
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010dc0:	fb01 f303 	mul.w	r3, r1, r3
 8010dc4:	4413      	add	r3, r2
 8010dc6:	7e3a      	ldrb	r2, [r7, #24]
 8010dc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    Devices[iDev].UpdateAddressClaimEndSource();
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	69da      	ldr	r2, [r3, #28]
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010dd6:	fb01 f303 	mul.w	r3, r1, r3
 8010dda:	4413      	add	r3, r2
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fa fb54 	bl	800b48a <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    StartAddressClaim(iDev);
 8010de2:	69f9      	ldr	r1, [r7, #28]
 8010de4:	68f8      	ldr	r0, [r7, #12]
 8010de6:	f7ff fe7d 	bl	8010ae4 <_ZN9tNMEA200017StartAddressClaimEi>
    AddressChanged=true;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2201      	movs	r2, #1
 8010dee:	765a      	strb	r2, [r3, #25]
 8010df0:	e000      	b.n	8010df4 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9e>
  if ( IsBroadcast(NewAddress) ) return;
 8010df2:	bf00      	nop
  }
}
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(const tN2kMsg &N2kMsg) {
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b08a      	sub	sp, #40	; 0x28
 8010dfe:	af02      	add	r7, sp, #8
 8010e00:	6078      	str	r0, [r7, #4]
 8010e02:	6039      	str	r1, [r7, #0]
  N2kMsgDbgStart(" Commanded address:"); N2kMsgDbgln(N2kMsg.Destination);

  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d10c      	bne.n	8010e2a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 8010e10:	6838      	ldr	r0, [r7, #0]
 8010e12:	f7f7 f88f 	bl	8007f34 <_ZNK7tN2kMsg11IsTPMessageEv>
 8010e16:	4603      	mov	r3, r0
 8010e18:	f083 0301 	eor.w	r3, r3, #1
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d103      	bne.n	8010e2a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	2b09      	cmp	r3, #9
 8010e28:	d001      	beq.n	8010e2e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x34>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e000      	b.n	8010e30 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x36>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d154      	bne.n	8010ede <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe4>

  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	7b5b      	ldrb	r3, [r3, #13]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7fe fd81 	bl	800f942 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8010e40:	61f8      	str	r0, [r7, #28]
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	7b5b      	ldrb	r3, [r3, #13]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7f6 fb53 	bl	80074f2 <_ZN9tNMEA200011IsBroadcastEh>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f083 0301 	eor.w	r3, r3, #1
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e5e:	d101      	bne.n	8010e64 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 8010e60:	2301      	movs	r3, #1
 8010e62:	e000      	b.n	8010e66 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6c>
 8010e64:	2300      	movs	r3, #0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d13b      	bne.n	8010ee2 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe8>

  int Index=0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	60bb      	str	r3, [r7, #8]
  uint64_t CommandedName=N2kMsg.GetUInt64(Index);
 8010e6e:	f107 0108 	add.w	r1, r7, #8
 8010e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e7a:	6838      	ldr	r0, [r7, #0]
 8010e7c:	f7f9 f8f7 	bl	800a06e <_ZNK7tN2kMsg9GetUInt64ERiy>
 8010e80:	e9c7 0104 	strd	r0, r1, [r7, #16]
  unsigned char NewAddress=N2kMsg.GetByte(Index);
 8010e84:	f107 0308 	add.w	r3, r7, #8
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6838      	ldr	r0, [r7, #0]
 8010e8c:	f7f9 f886 	bl	8009f9c <_ZNK7tN2kMsg7GetByteERi>
 8010e90:	4603      	mov	r3, r0
 8010e92:	73fb      	strb	r3, [r7, #15]
  if  ( NewAddress>=252 ) return;
 8010e94:	7bfb      	ldrb	r3, [r7, #15]
 8010e96:	2bfb      	cmp	r3, #251	; 0xfb
 8010e98:	d825      	bhi.n	8010ee6 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xec>

  if ( iDev==-1 ) {
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ea0:	d113      	bne.n	8010eca <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xd0>
    for (iDev=0; iDev<DeviceCount; iDev++) HandleCommandedAddress(CommandedName,NewAddress,iDev);
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	61fb      	str	r3, [r7, #28]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6a1b      	ldr	r3, [r3, #32]
 8010eaa:	69fa      	ldr	r2, [r7, #28]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	da1b      	bge.n	8010ee8 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	9301      	str	r3, [sp, #4]
 8010eb4:	7bfb      	ldrb	r3, [r7, #15]
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7ff ff4a 	bl	8010d56 <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	61fb      	str	r3, [r7, #28]
 8010ec8:	e7ed      	b.n	8010ea6 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xac>
  } else {
    HandleCommandedAddress(CommandedName,NewAddress,iDev);
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	9301      	str	r3, [sp, #4]
 8010ece:	7bfb      	ldrb	r3, [r7, #15]
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff ff3d 	bl	8010d56 <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 8010edc:	e004      	b.n	8010ee8 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 8010ede:	bf00      	nop
 8010ee0:	e002      	b.n	8010ee8 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8010ee2:	bf00      	nop
 8010ee4:	e000      	b.n	8010ee8 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if  ( NewAddress>=252 ) return;
 8010ee6:	bf00      	nop
  }
}
 8010ee8:	3720      	adds	r7, #32
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <_ZN9tNMEA200014GetNextAddressEib>:
  DeviceInformationChanged=false;
  return result;
}

//*****************************************************************************
void tNMEA2000::GetNextAddress(int DeviceIndex, bool RestartAtEnd) {
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b086      	sub	sp, #24
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	60f8      	str	r0, [r7, #12]
 8010ef6:	60b9      	str	r1, [r7, #8]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	71fb      	strb	r3, [r7, #7]
  bool FoundSame;
  // Currently simply add address
  // Note that 251 is the last source. We do not send data if address is higher than that.

  do {
    if ( Devices[DeviceIndex].N2kSource==N2kNullCanBusAddress ) {
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	69da      	ldr	r2, [r3, #28]
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010f06:	fb01 f303 	mul.w	r3, r1, r3
 8010f0a:	4413      	add	r3, r2
 8010f0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010f10:	2bfe      	cmp	r3, #254	; 0xfe
 8010f12:	d11a      	bne.n	8010f4a <_ZN9tNMEA200014GetNextAddressEib+0x5c>
      if ( RestartAtEnd ) {
 8010f14:	79fb      	ldrb	r3, [r7, #7]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f000 8097 	beq.w	801104a <_ZN9tNMEA200014GetNextAddressEib+0x15c>
        // For null address start from beginning.
        Devices[DeviceIndex].N2kSource=14;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	69da      	ldr	r2, [r3, #28]
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010f26:	fb01 f303 	mul.w	r3, r1, r3
 8010f2a:	4413      	add	r3, r2
 8010f2c:	220e      	movs	r2, #14
 8010f2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        Devices[DeviceIndex].UpdateAddressClaimEndSource();
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	69da      	ldr	r2, [r3, #28]
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010f3c:	fb01 f303 	mul.w	r3, r1, r3
 8010f40:	4413      	add	r3, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fa faa1 	bl	800b48a <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
 8010f48:	e04a      	b.n	8010fe0 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
      } else return;
    } else if (Devices[DeviceIndex].N2kSource!=Devices[DeviceIndex].AddressClaimEndSource) {
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	69da      	ldr	r2, [r3, #28]
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010f54:	fb01 f303 	mul.w	r3, r1, r3
 8010f58:	4413      	add	r3, r2
 8010f5a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	69d9      	ldr	r1, [r3, #28]
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8010f68:	fb00 f303 	mul.w	r3, r0, r3
 8010f6c:	440b      	add	r3, r1
 8010f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d025      	beq.n	8010fc2 <_ZN9tNMEA200014GetNextAddressEib+0xd4>
      Devices[DeviceIndex].N2kSource++;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	69da      	ldr	r2, [r3, #28]
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010f80:	fb01 f303 	mul.w	r3, r1, r3
 8010f84:	4413      	add	r3, r2
 8010f86:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8010f8a:	3201      	adds	r2, #1
 8010f8c:	b2d2      	uxtb	r2, r2
 8010f8e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      // Roll to start?
      if ( Devices[DeviceIndex].N2kSource>N2kMaxCanBusAddress ) Devices[DeviceIndex].N2kSource=0;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	69da      	ldr	r2, [r3, #28]
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010f9c:	fb01 f303 	mul.w	r3, r1, r3
 8010fa0:	4413      	add	r3, r2
 8010fa2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010fa6:	2bfb      	cmp	r3, #251	; 0xfb
 8010fa8:	d91a      	bls.n	8010fe0 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	69da      	ldr	r2, [r3, #28]
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010fb4:	fb01 f303 	mul.w	r3, r1, r3
 8010fb8:	4413      	add	r3, r2
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8010fc0:	e00e      	b.n	8010fe0 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
    } else {
      Devices[DeviceIndex].N2kSource=N2kNullCanBusAddress; // Force null address = cannot claim address
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	69da      	ldr	r2, [r3, #28]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010fcc:	fb01 f303 	mul.w	r3, r1, r3
 8010fd0:	4413      	add	r3, r2
 8010fd2:	22fe      	movs	r2, #254	; 0xfe
 8010fd4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      AddressChanged=true;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2201      	movs	r2, #1
 8010fdc:	765a      	strb	r2, [r3, #25]
      return;
 8010fde:	e035      	b.n	801104c <_ZN9tNMEA200014GetNextAddressEib+0x15e>
    }
    FoundSame=false;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	75fb      	strb	r3, [r7, #23]
    // Check that we do not have same on our list
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	613b      	str	r3, [r7, #16]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6a1b      	ldr	r3, [r3, #32]
 8010fec:	693a      	ldr	r2, [r7, #16]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	da23      	bge.n	801103a <_ZN9tNMEA200014GetNextAddressEib+0x14c>
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d120      	bne.n	801103a <_ZN9tNMEA200014GetNextAddressEib+0x14c>
      if (i!=DeviceIndex) FoundSame=(Devices[DeviceIndex].N2kSource==Devices[i].N2kSource);
 8010ff8:	693a      	ldr	r2, [r7, #16]
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d018      	beq.n	8011032 <_ZN9tNMEA200014GetNextAddressEib+0x144>
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	69da      	ldr	r2, [r3, #28]
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801100a:	fb01 f303 	mul.w	r3, r1, r3
 801100e:	4413      	add	r3, r2
 8011010:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	69d9      	ldr	r1, [r3, #28]
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801101e:	fb00 f303 	mul.w	r3, r0, r3
 8011022:	440b      	add	r3, r1
 8011024:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011028:	429a      	cmp	r2, r3
 801102a:	bf0c      	ite	eq
 801102c:	2301      	moveq	r3, #1
 801102e:	2300      	movne	r3, #0
 8011030:	75fb      	strb	r3, [r7, #23]
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	3301      	adds	r3, #1
 8011036:	613b      	str	r3, [r7, #16]
 8011038:	e7d6      	b.n	8010fe8 <_ZN9tNMEA200014GetNextAddressEib+0xfa>
  do {
 801103a:	7dfb      	ldrb	r3, [r7, #23]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d000      	beq.n	8011042 <_ZN9tNMEA200014GetNextAddressEib+0x154>
 8011040:	e75c      	b.n	8010efc <_ZN9tNMEA200014GetNextAddressEib+0xe>
    }
  } while (FoundSame);
  AddressChanged=true;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2201      	movs	r2, #1
 8011046:	765a      	strb	r2, [r3, #25]
 8011048:	e000      	b.n	801104c <_ZN9tNMEA200014GetNextAddressEib+0x15e>
      } else return;
 801104a:	bf00      	nop
}
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
	...

08011054 <_ZN9tNMEA200027HandleReceivedSystemMessageEi>:

//*****************************************************************************
bool tNMEA2000::HandleReceivedSystemMessage(int MsgIndex) {
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  bool result=false;
 801105e:	2300      	movs	r3, #0
 8011060:	73fb      	strb	r3, [r7, #15]

   if ( N2kMode==N2km_SendOnly || N2kMode==N2km_ListenAndSend ) return result;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	795b      	ldrb	r3, [r3, #5]
 8011066:	2b03      	cmp	r3, #3
 8011068:	d003      	beq.n	8011072 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x1e>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	795b      	ldrb	r3, [r3, #5]
 801106e:	2b04      	cmp	r3, #4
 8011070:	d101      	bne.n	8011076 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x22>
 8011072:	7bfb      	ldrb	r3, [r7, #15]
 8011074:	e07c      	b.n	8011170 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11c>

    if ( N2kCANMsgBuf[MsgIndex].SystemMessage ) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801107a:	683a      	ldr	r2, [r7, #0]
 801107c:	4613      	mov	r3, r2
 801107e:	019b      	lsls	r3, r3, #6
 8011080:	4413      	add	r3, r2
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	440b      	add	r3, r1
 8011086:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801108a:	2b00      	cmp	r3, #0
 801108c:	d06f      	beq.n	801116e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11a>
      if ( ForwardSystemMessages() ) ForwardMessage(N2kCANMsgBuf[MsgIndex].N2kMsg);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f7fa fa72 	bl	800b578 <_ZNK9tNMEA200021ForwardSystemMessagesEv>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d00b      	beq.n	80110b2 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x5e>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801109e:	683a      	ldr	r2, [r7, #0]
 80110a0:	4613      	mov	r3, r2
 80110a2:	019b      	lsls	r3, r3, #6
 80110a4:	4413      	add	r3, r2
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	440b      	add	r3, r1
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7fe fc90 	bl	800f9d2 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      if ( N2kMode!=N2km_ListenOnly ) { // Note that in listen only mode we will not inform us to the bus
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	795b      	ldrb	r3, [r3, #5]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d057      	beq.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
        switch (N2kCANMsgBuf[MsgIndex].N2kMsg.PGN) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80110be:	683a      	ldr	r2, [r7, #0]
 80110c0:	4613      	mov	r3, r2
 80110c2:	019b      	lsls	r3, r3, #6
 80110c4:	4413      	add	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	440b      	add	r3, r1
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	4a2a      	ldr	r2, [pc, #168]	; (8011178 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d03d      	beq.n	801114e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xfa>
 80110d2:	4a29      	ldr	r2, [pc, #164]	; (8011178 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d848      	bhi.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 80110d8:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 80110dc:	4293      	cmp	r3, r2
 80110de:	d029      	beq.n	8011134 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xe0>
 80110e0:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d840      	bhi.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 80110e8:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 80110ec:	d015      	beq.n	801111a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xc6>
 80110ee:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 80110f2:	d83a      	bhi.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 80110f4:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 80110f8:	d036      	beq.n	8011168 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x114>
 80110fa:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 80110fe:	d134      	bne.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 59392L: /*ISO Acknowledgement*/
            break;
          case 59904L: /*ISO Request*/
            HandleISORequest(N2kCANMsgBuf[MsgIndex].N2kMsg);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011104:	683a      	ldr	r2, [r7, #0]
 8011106:	4613      	mov	r3, r2
 8011108:	019b      	lsls	r3, r3, #6
 801110a:	4413      	add	r3, r2
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	440b      	add	r3, r1
 8011110:	4619      	mov	r1, r3
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f7ff fc04 	bl	8010920 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>
            break;
 8011118:	e027      	b.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 60928L: /*ISO Address Claim*/
            HandleISOAddressClaim(N2kCANMsgBuf[MsgIndex].N2kMsg);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	4613      	mov	r3, r2
 8011122:	019b      	lsls	r3, r3, #6
 8011124:	4413      	add	r3, r2
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	440b      	add	r3, r1
 801112a:	4619      	mov	r1, r3
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f7ff fd8a 	bl	8010c46 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>
            break;
 8011132:	e01a      	b.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 65240L: /*Commanded Address*/
            HandleCommandedAddress(N2kCANMsgBuf[MsgIndex].N2kMsg);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011138:	683a      	ldr	r2, [r7, #0]
 801113a:	4613      	mov	r3, r2
 801113c:	019b      	lsls	r3, r3, #6
 801113e:	4413      	add	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	440b      	add	r3, r1
 8011144:	4619      	mov	r1, r3
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f7ff fe57 	bl	8010dfa <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>
            break;
 801114c:	e00d      	b.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
          case 126208L: /*NMEA Request/Command/Acknowledge group function*/
            HandleGroupFunction(N2kCANMsgBuf[MsgIndex].N2kMsg);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011152:	683a      	ldr	r2, [r7, #0]
 8011154:	4613      	mov	r3, r2
 8011156:	019b      	lsls	r3, r3, #6
 8011158:	4413      	add	r3, r2
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	440b      	add	r3, r1
 801115e:	4619      	mov	r1, r3
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff fc65 	bl	8010a30 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>
            break;
 8011166:	e000      	b.n	801116a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
            break;
 8011168:	bf00      	nop
#endif
        }
      }
      result=true;
 801116a:	2301      	movs	r3, #1
 801116c:	73fb      	strb	r3, [r7, #15]
    }

  return result;
 801116e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	0001ed00 	.word	0x0001ed00

0801117c <_ZN9tNMEA200013ParseMessagesEv>:

//*****************************************************************************
void tNMEA2000::ParseMessages() {
 801117c:	b590      	push	{r4, r7, lr}
 801117e:	b089      	sub	sp, #36	; 0x24
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
    unsigned long canId;
    unsigned char len = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    uint8_t MsgIndex;
    static const int MaxReadFramesOnParse=20;
    int FramesRead=0;
 8011188:	2300      	movs	r3, #0
 801118a:	61fb      	str	r3, [r7, #28]
//    tN2kMsg N2kMsg;

    if ( OpenState!=os_Open ) {
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	7e1b      	ldrb	r3, [r3, #24]
 8011190:	2b03      	cmp	r3, #3
 8011192:	d011      	beq.n	80111b8 <_ZN9tNMEA200013ParseMessagesEv+0x3c>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7fb fe97 	bl	800cec8 <_ZN9tNMEA20004OpenEv>
 801119a:	4603      	mov	r3, r0
 801119c:	f083 0301 	eor.w	r3, r3, #1
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d103      	bne.n	80111ae <_ZN9tNMEA200013ParseMessagesEv+0x32>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	7e1b      	ldrb	r3, [r3, #24]
 80111aa:	2b03      	cmp	r3, #3
 80111ac:	d001      	beq.n	80111b2 <_ZN9tNMEA200013ParseMessagesEv+0x36>
 80111ae:	2301      	movs	r3, #1
 80111b0:	e000      	b.n	80111b4 <_ZN9tNMEA200013ParseMessagesEv+0x38>
 80111b2:	2300      	movs	r3, #0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d166      	bne.n	8011286 <_ZN9tNMEA200013ParseMessagesEv+0x10a>
    }

    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	791b      	ldrb	r3, [r3, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d164      	bne.n	801128a <_ZN9tNMEA200013ParseMessagesEv+0x10e>

    SendFrames();
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7fc f848 	bl	800d256 <_ZN9tNMEA200010SendFramesEv>
    SendPendingInformation();
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f7fc fb26 	bl	800d818 <_ZN9tNMEA200022SendPendingInformationEv>
#if defined(DEBUG_NMEA2000_ISR)
    TestISR();
#endif

    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	2b13      	cmp	r3, #19
 80111d0:	dc10      	bgt.n	80111f4 <_ZN9tNMEA200013ParseMessagesEv+0x78>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	3308      	adds	r3, #8
 80111d8:	681c      	ldr	r4, [r3, #0]
 80111da:	f107 0308 	add.w	r3, r7, #8
 80111de:	f107 0213 	add.w	r2, r7, #19
 80111e2:	f107 0114 	add.w	r1, r7, #20
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	47a0      	blx	r4
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <_ZN9tNMEA200013ParseMessagesEv+0x78>
 80111f0:	2301      	movs	r3, #1
 80111f2:	e000      	b.n	80111f6 <_ZN9tNMEA200013ParseMessagesEv+0x7a>
 80111f4:	2300      	movs	r3, #0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d040      	beq.n	801127c <_ZN9tNMEA200013ParseMessagesEv+0x100>
        FramesRead++;
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	3301      	adds	r3, #1
 80111fe:	61fb      	str	r3, [r7, #28]
        N2kMsgDbgStart("Received frame, can ID:"); N2kMsgDbg(canId); N2kMsgDbg(" len:"); N2kMsgDbg(len); N2kMsgDbg(" data:"); DbgPrintBuf(len,buf,false); N2kMsgDbgln();
        MsgIndex=SetN2kCANBufMsg(canId,len,buf);
 8011200:	6979      	ldr	r1, [r7, #20]
 8011202:	7cfa      	ldrb	r2, [r7, #19]
 8011204:	f107 0308 	add.w	r3, r7, #8
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7fe f9c4 	bl	800f596 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>
 801120e:	4603      	mov	r3, r0
 8011210:	76fb      	strb	r3, [r7, #27]
        if (MsgIndex<MaxN2kCANMsgs) {
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011218:	7efa      	ldrb	r2, [r7, #27]
 801121a:	429a      	cmp	r2, r3
 801121c:	d2d6      	bcs.n	80111cc <_ZN9tNMEA200013ParseMessagesEv+0x50>
          if ( !HandleReceivedSystemMessage(MsgIndex) ) {
 801121e:	7efb      	ldrb	r3, [r7, #27]
 8011220:	4619      	mov	r1, r3
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7ff ff16 	bl	8011054 <_ZN9tNMEA200027HandleReceivedSystemMessageEi>
 8011228:	4603      	mov	r3, r0
 801122a:	f083 0301 	eor.w	r3, r3, #1
 801122e:	b2db      	uxtb	r3, r3
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00b      	beq.n	801124c <_ZN9tNMEA200013ParseMessagesEv+0xd0>
            N2kMsgDbgStart(" - Non system message, MsgIndex: "); N2kMsgDbgln(MsgIndex);
            ForwardMessage(N2kCANMsgBuf[MsgIndex]);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011238:	7efa      	ldrb	r2, [r7, #27]
 801123a:	4613      	mov	r3, r2
 801123c:	019b      	lsls	r3, r3, #6
 801123e:	4413      	add	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	440b      	add	r3, r1
 8011244:	4619      	mov	r1, r3
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f7fe fc09 	bl	800fa5e <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>
          }
//          N2kCANMsgBuf[MsgIndex].N2kMsg.Print(Serial);
          RunMessageHandlers(N2kCANMsgBuf[MsgIndex].N2kMsg);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011250:	7efa      	ldrb	r2, [r7, #27]
 8011252:	4613      	mov	r3, r2
 8011254:	019b      	lsls	r3, r3, #6
 8011256:	4413      	add	r3, r2
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	440b      	add	r3, r1
 801125c:	4619      	mov	r1, r3
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f817 	bl	8011292 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>
          N2kCANMsgBuf[MsgIndex].FreeMessage();
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011268:	7efa      	ldrb	r2, [r7, #27]
 801126a:	4613      	mov	r3, r2
 801126c:	019b      	lsls	r3, r3, #6
 801126e:	4413      	add	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	440b      	add	r3, r1
 8011274:	4618      	mov	r0, r3
 8011276:	f7f9 fe73 	bl	800af60 <_ZN10tN2kCANMsg11FreeMessageEv>
    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 801127a:	e7a7      	b.n	80111cc <_ZN9tNMEA200013ParseMessagesEv+0x50>
          N2kMsgDbgStart(" - Free message, MsgIndex: "); N2kMsgDbg(MsgIndex); N2kMsgDbgln();
        }
    }

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
    SendHeartbeat();
 801127c:	2100      	movs	r1, #0
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7fc f9a0 	bl	800d5c4 <_ZN9tNMEA200013SendHeartbeatEb>
 8011284:	e002      	b.n	801128c <_ZN9tNMEA200013ParseMessagesEv+0x110>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 8011286:	bf00      	nop
 8011288:	e000      	b.n	801128c <_ZN9tNMEA200013ParseMessagesEv+0x110>
    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 801128a:	bf00      	nop
#endif
}
 801128c:	3724      	adds	r7, #36	; 0x24
 801128e:	46bd      	mov	sp, r7
 8011290:	bd90      	pop	{r4, r7, pc}

08011292 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::RunMessageHandlers(const tN2kMsg &N2kMsg) {
 8011292:	b580      	push	{r7, lr}
 8011294:	b084      	sub	sp, #16
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
 801129a:	6039      	str	r1, [r7, #0]
  if ( MsgHandler!=0 ) MsgHandler(N2kMsg);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d003      	beq.n	80112ac <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x1a>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112a8:	6838      	ldr	r0, [r7, #0]
 80112aa:	4798      	blx	r3

  tMsgHandler *MsgHandler=MsgHandlers;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	691b      	ldr	r3, [r3, #16]
 80112b0:	60fb      	str	r3, [r7, #12]
  // Loop through all pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()==0; MsgHandler=MsgHandler->pNext) MsgHandler->HandleMsg(N2kMsg);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d007      	beq.n	80112c8 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f7f9 ffce 	bl	800b25a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d101      	bne.n	80112c8 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 80112c4:	2301      	movs	r3, #1
 80112c6:	e000      	b.n	80112ca <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x38>
 80112c8:	2300      	movs	r3, #0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d009      	beq.n	80112e2 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	6839      	ldr	r1, [r7, #0]
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	4798      	blx	r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	60fb      	str	r3, [r7, #12]
 80112e0:	e7e7      	b.n	80112b2 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x20>
  // Loop through specific pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d009      	beq.n	80112fc <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f7f9 ffb6 	bl	800b25a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 80112ee:	4602      	mov	r2, r0
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	689b      	ldr	r3, [r3, #8]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d801      	bhi.n	80112fc <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 80112f8:	2301      	movs	r3, #1
 80112fa:	e000      	b.n	80112fe <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6c>
 80112fc:	2300      	movs	r3, #0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d016      	beq.n	8011330 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x9e>
    if ( MsgHandler->GetPGN()==N2kMsg.PGN ) MsgHandler->HandleMsg(N2kMsg);
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f7f9 ffa9 	bl	800b25a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 8011308:	4602      	mov	r2, r0
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	689b      	ldr	r3, [r3, #8]
 801130e:	429a      	cmp	r2, r3
 8011310:	bf0c      	ite	eq
 8011312:	2301      	moveq	r3, #1
 8011314:	2300      	movne	r3, #0
 8011316:	b2db      	uxtb	r3, r3
 8011318:	2b00      	cmp	r3, #0
 801131a:	d005      	beq.n	8011328 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x96>
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	6839      	ldr	r1, [r7, #0]
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	4798      	blx	r3
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	60fb      	str	r3, [r7, #12]
 801132e:	e7d8      	b.n	80112e2 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
  }
}
 8011330:	bf00      	nop
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <_ZN9tNMEA20009SetOnOpenEPFvvE>:

//*****************************************************************************
void tNMEA2000::SetOnOpen(void (*_OnOpen)()) {
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  OnOpen=_OnOpen;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	659a      	str	r2, [r3, #88]	; 0x58
}
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	bc80      	pop	{r7}
 8011350:	4770      	bx	lr

08011352 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:
  ISORqstHandler=ISORequestHandler;
}

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
void tNMEA2000::RemoveGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 8011352:	b480      	push	{r7}
 8011354:	b085      	sub	sp, #20
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d02b      	beq.n	80113ba <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011366:	2b00      	cmp	r3, #0
 8011368:	d027      	beq.n	80113ba <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>

  tN2kGroupFunctionHandler* pPrevGroupFunctionHandler=pGroupFunctionHandlers;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801136e:	60fb      	str	r3, [r7, #12]
  // Handle, if first
  if ( pPrevGroupFunctionHandler==pGroupFunctionHandler ) {
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	429a      	cmp	r2, r3
 8011376:	d104      	bne.n	8011382 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    pGroupFunctionHandlers=pPrevGroupFunctionHandler->pNext;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	685a      	ldr	r2, [r3, #4]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	665a      	str	r2, [r3, #100]	; 0x64
 8011380:	e017      	b.n	80113b2 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
  } else {
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d008      	beq.n	801139a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d003      	beq.n	801139a <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pPrevGroupFunctionHandler = pPrevGroupFunctionHandler->pNext);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	60fb      	str	r3, [r7, #12]
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 8011398:	e7f3      	b.n	8011382 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    if ( pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext==pGroupFunctionHandler ) {
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d008      	beq.n	80113b2 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	683a      	ldr	r2, [r7, #0]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d103      	bne.n	80113b2 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
      pPrevGroupFunctionHandler->pNext=pGroupFunctionHandler->pNext;
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	605a      	str	r2, [r3, #4]
    }
  }
  pGroupFunctionHandler->pNext=0;
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	2200      	movs	r2, #0
 80113b6:	605a      	str	r2, [r3, #4]
 80113b8:	e000      	b.n	80113bc <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 80113ba:	bf00      	nop
}
 80113bc:	3714      	adds	r7, #20
 80113be:	46bd      	mov	sp, r7
 80113c0:	bc80      	pop	{r7}
 80113c2:	4770      	bx	lr

080113c4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:

//*****************************************************************************
void tNMEA2000::AddGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0) return;
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d02c      	beq.n	801142e <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  RemoveGroupFunctionHandler(pGroupFunctionHandler);
 80113d4:	6839      	ldr	r1, [r7, #0]
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7ff ffbb 	bl	8011352 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
  // Add to the end on the list
  if ( pGroupFunctionHandlers==0 ) { // If there is none set, put it to first
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d103      	bne.n	80113ec <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x28>
    pGroupFunctionHandlers=pGroupFunctionHandler;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	665a      	str	r2, [r3, #100]	; 0x64
 80113ea:	e021      	b.n	8011430 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  } else {
    tN2kGroupFunctionHandler* pLastGroupFunctionHandler;
    // find last
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113f0:	60fb      	str	r3, [r7, #12]
      pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN != 0;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d008      	beq.n	801140c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d003      	beq.n	801140c <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pLastGroupFunctionHandler = pLastGroupFunctionHandler->pNext);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	60fb      	str	r3, [r7, #12]
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 801140a:	e7f2      	b.n	80113f2 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x2e>
    // Insert the new handler before the default handler if the default handler is present.
    if ( pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN == 0 ) {
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d008      	beq.n	8011426 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d103      	bne.n	8011426 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
      pGroupFunctionHandler->pNext = pLastGroupFunctionHandler->pNext;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	685a      	ldr	r2, [r3, #4]
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	605a      	str	r2, [r3, #4]
    }
    // Add the new handler to the list.
    pLastGroupFunctionHandler->pNext = pGroupFunctionHandler;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	605a      	str	r2, [r3, #4]
 801142c:	e000      	b.n	8011430 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  if (pGroupFunctionHandler==0) return;
 801142e:	bf00      	nop
  }
}
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <_Z14SetN2kPGN59392R7tN2kMsghhm>:
#endif

//*****************************************************************************
/// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	60f8      	str	r0, [r7, #12]
 801143e:	607b      	str	r3, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	72fb      	strb	r3, [r7, #11]
 8011444:	4613      	mov	r3, r2
 8011446:	72bb      	strb	r3, [r7, #10]
    N2kMsg.SetPGN(59392L);
 8011448:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f7f8 fc35 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2206      	movs	r2, #6
 8011456:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddByte(Control);
 8011458:	7afb      	ldrb	r3, [r7, #11]
 801145a:	4619      	mov	r1, r3
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f7f8 fd6d 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(GroupFunction);
 8011462:	7abb      	ldrb	r3, [r7, #10]
 8011464:	4619      	mov	r1, r3
 8011466:	68f8      	ldr	r0, [r7, #12]
 8011468:	f7f8 fd68 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 801146c:	21ff      	movs	r1, #255	; 0xff
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f7f8 fd64 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 8011474:	21ff      	movs	r1, #255	; 0xff
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f7f8 fd60 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 801147c:	21ff      	movs	r1, #255	; 0xff
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f7f8 fd5c 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add3ByteInt(PGN);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	4619      	mov	r1, r3
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	f7f8 fd20 	bl	8009ece <_ZN7tN2kMsg11Add3ByteIntEl>
}
 801148e:	bf00      	nop
 8011490:	3710      	adds	r7, #16
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <_Z14SetN2kPGN60928R7tN2kMsgy>:
    N2kMsg.AddByte( 0x80 | ((IndustryGroup&0x7)<<4) | (SystemInstance&0x0f) );
}

//*****************************************************************************
// ISO Address Claim
void SetN2kPGN60928(tN2kMsg &N2kMsg, uint64_t Name) {
 8011496:	b580      	push	{r7, lr}
 8011498:	b084      	sub	sp, #16
 801149a:	af00      	add	r7, sp, #0
 801149c:	60f8      	str	r0, [r7, #12]
 801149e:	e9c7 2300 	strd	r2, r3, [r7]
    N2kMsg.SetPGN(N2kPGNIsoAddressClaim);
 80114a2:	f44f 416e 	mov.w	r1, #60928	; 0xee00
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f7f8 fc08 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2206      	movs	r2, #6
 80114b0:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddUInt64(Name);
 80114b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f7f8 fd2d 	bl	8009f16 <_ZN7tN2kMsg9AddUInt64Ey>
}
 80114bc:	bf00      	nop
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>:
//*****************************************************************************
// Product Information
void SetN2kPGN126996(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel, unsigned char LoadEquivalency) {
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	607a      	str	r2, [r7, #4]
 80114d0:	603b      	str	r3, [r7, #0]

    N2kMsg.SetPGN(N2kPGNProductInformation);
 80114d2:	491d      	ldr	r1, [pc, #116]	; (8011548 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh+0x84>)
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f7f8 fbf1 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2206      	movs	r2, #6
 80114de:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteUInt(N2kVersion);
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	4619      	mov	r1, r3
 80114e6:	68f8      	ldr	r0, [r7, #12]
 80114e8:	f7f8 fcdd 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.Add2ByteUInt(ProductCode);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	4619      	mov	r1, r3
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f7f8 fcd7 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.AddStr(ModelID, Max_N2kModelID_len);
 80114f8:	2300      	movs	r3, #0
 80114fa:	2220      	movs	r2, #32
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	68f8      	ldr	r0, [r7, #12]
 8011500:	f7f8 fd32 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(SwCode, Max_N2kSwCode_len);
 8011504:	2300      	movs	r3, #0
 8011506:	2220      	movs	r2, #32
 8011508:	69b9      	ldr	r1, [r7, #24]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f7f8 fd2c 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelVersion, Max_N2kModelVersion_len);
 8011510:	2300      	movs	r3, #0
 8011512:	2220      	movs	r2, #32
 8011514:	69f9      	ldr	r1, [r7, #28]
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f7f8 fd26 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelSerialCode, Max_N2kModelSerialCode_len);
 801151c:	2300      	movs	r3, #0
 801151e:	2220      	movs	r2, #32
 8011520:	6a39      	ldr	r1, [r7, #32]
 8011522:	68f8      	ldr	r0, [r7, #12]
 8011524:	f7f8 fd20 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddByte(CertificationLevel);
 8011528:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801152c:	4619      	mov	r1, r3
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7f8 fd04 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(LoadEquivalency);
 8011534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011538:	4619      	mov	r1, r3
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7f8 fcfe 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
}
 8011540:	bf00      	nop
 8011542:	3710      	adds	r7, #16
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	0001f014 	.word	0x0001f014

0801154c <_Z13ProgmemStrLenPKc>:

  return true;
}

//*****************************************************************************
size_t ProgmemStrLen(const char *str) {
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  size_t len;
    if (str==0) return 0;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <_Z13ProgmemStrLenPKc+0x12>
 801155a:	2300      	movs	r3, #0
 801155c:	e00c      	b.n	8011578 <_Z13ProgmemStrLenPKc+0x2c>
    for (len=0; pgm_read_byte(&(str[len]))!=0; len++ );
 801155e:	2300      	movs	r3, #0
 8011560:	60fb      	str	r3, [r7, #12]
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	4413      	add	r3, r2
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d003      	beq.n	8011576 <_Z13ProgmemStrLenPKc+0x2a>
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3301      	adds	r3, #1
 8011572:	60fb      	str	r3, [r7, #12]
 8011574:	e7f5      	b.n	8011562 <_Z13ProgmemStrLenPKc+0x16>
    return len;
 8011576:	68fb      	ldr	r3, [r7, #12]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	bc80      	pop	{r7}
 8011580:	4770      	bx	lr

08011582 <_Z6StrLenPKc>:

//*****************************************************************************
size_t StrLen(const char *str) {
 8011582:	b580      	push	{r7, lr}
 8011584:	b082      	sub	sp, #8
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
    if (str==0) return 0;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d101      	bne.n	8011594 <_Z6StrLenPKc+0x12>
 8011590:	2300      	movs	r3, #0
 8011592:	e004      	b.n	801159e <_Z6StrLenPKc+0x1c>
    return strlen(str);
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f7ee fe51 	bl	800023c <strlen>
 801159a:	4603      	mov	r3, r0
 801159c:	bf00      	nop
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
	...

080115a8 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>:
// Configuration information
void SetN2kPGN126998(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1,
                     const char *InstallationDescription2,
                     bool UsePgm) {
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b08a      	sub	sp, #40	; 0x28
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	607a      	str	r2, [r7, #4]
 80115b4:	603b      	str	r3, [r7, #0]
  size_t TotalLen;
  size_t MaxLen=tN2kMsg::MaxDataLen-6; // Each field has 2 extra bytes
 80115b6:	23d9      	movs	r3, #217	; 0xd9
 80115b8:	61bb      	str	r3, [r7, #24]
  size_t ManInfoLen;
  size_t InstDesc1Len;
  size_t InstDesc2Len;

    if ( UsePgm ) {
 80115ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00c      	beq.n	80115dc <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x34>
      ManInfoLen=ProgmemStrLen(ManufacturerInformation);
 80115c2:	68b8      	ldr	r0, [r7, #8]
 80115c4:	f7ff ffc2 	bl	801154c <_Z13ProgmemStrLenPKc>
 80115c8:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=ProgmemStrLen(InstallationDescription1);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f7ff ffbe 	bl	801154c <_Z13ProgmemStrLenPKc>
 80115d0:	6238      	str	r0, [r7, #32]
      InstDesc2Len=ProgmemStrLen(InstallationDescription2);
 80115d2:	6838      	ldr	r0, [r7, #0]
 80115d4:	f7ff ffba 	bl	801154c <_Z13ProgmemStrLenPKc>
 80115d8:	61f8      	str	r0, [r7, #28]
 80115da:	e00b      	b.n	80115f4 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x4c>
    } else {
      ManInfoLen=StrLen(ManufacturerInformation);
 80115dc:	68b8      	ldr	r0, [r7, #8]
 80115de:	f7ff ffd0 	bl	8011582 <_Z6StrLenPKc>
 80115e2:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=StrLen(InstallationDescription1);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7ff ffcc 	bl	8011582 <_Z6StrLenPKc>
 80115ea:	6238      	str	r0, [r7, #32]
      InstDesc2Len=StrLen(InstallationDescription2);
 80115ec:	6838      	ldr	r0, [r7, #0]
 80115ee:	f7ff ffc8 	bl	8011582 <_Z6StrLenPKc>
 80115f2:	61f8      	str	r0, [r7, #28]
    }

    if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 80115f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f6:	2b47      	cmp	r3, #71	; 0x47
 80115f8:	d901      	bls.n	80115fe <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x56>
 80115fa:	2347      	movs	r3, #71	; 0x47
 80115fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 80115fe:	6a3b      	ldr	r3, [r7, #32]
 8011600:	2b47      	cmp	r3, #71	; 0x47
 8011602:	d901      	bls.n	8011608 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x60>
 8011604:	2347      	movs	r3, #71	; 0x47
 8011606:	623b      	str	r3, [r7, #32]
    if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	2b47      	cmp	r3, #71	; 0x47
 801160c:	d901      	bls.n	8011612 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x6a>
 801160e:	2347      	movs	r3, #71	; 0x47
 8011610:	61fb      	str	r3, [r7, #28]

    TotalLen=0;
 8011612:	2300      	movs	r3, #0
 8011614:	617b      	str	r3, [r7, #20]
    if (TotalLen+ManInfoLen>MaxLen) ManInfoLen=MaxLen-TotalLen;
 8011616:	697a      	ldr	r2, [r7, #20]
 8011618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161a:	4413      	add	r3, r2
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	429a      	cmp	r2, r3
 8011620:	d203      	bcs.n	801162a <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x82>
 8011622:	69ba      	ldr	r2, [r7, #24]
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	1ad3      	subs	r3, r2, r3
 8011628:	627b      	str	r3, [r7, #36]	; 0x24
    TotalLen+=ManInfoLen;
 801162a:	697a      	ldr	r2, [r7, #20]
 801162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162e:	4413      	add	r3, r2
 8011630:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc1Len>MaxLen) InstDesc1Len=MaxLen-TotalLen;
 8011632:	697a      	ldr	r2, [r7, #20]
 8011634:	6a3b      	ldr	r3, [r7, #32]
 8011636:	4413      	add	r3, r2
 8011638:	69ba      	ldr	r2, [r7, #24]
 801163a:	429a      	cmp	r2, r3
 801163c:	d203      	bcs.n	8011646 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x9e>
 801163e:	69ba      	ldr	r2, [r7, #24]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	623b      	str	r3, [r7, #32]
    TotalLen+=InstDesc1Len;
 8011646:	697a      	ldr	r2, [r7, #20]
 8011648:	6a3b      	ldr	r3, [r7, #32]
 801164a:	4413      	add	r3, r2
 801164c:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc2Len>MaxLen) InstDesc2Len=MaxLen-TotalLen;
 801164e:	697a      	ldr	r2, [r7, #20]
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	4413      	add	r3, r2
 8011654:	69ba      	ldr	r2, [r7, #24]
 8011656:	429a      	cmp	r2, r3
 8011658:	d203      	bcs.n	8011662 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0xba>
 801165a:	69ba      	ldr	r2, [r7, #24]
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	61fb      	str	r3, [r7, #28]
    TotalLen+=InstDesc2Len;
 8011662:	697a      	ldr	r2, [r7, #20]
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	4413      	add	r3, r2
 8011668:	617b      	str	r3, [r7, #20]

    N2kMsg.SetPGN(N2kPGNConfigurationInformation);
 801166a:	4922      	ldr	r1, [pc, #136]	; (80116f4 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x14c>)
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	f7f8 fb25 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2206      	movs	r2, #6
 8011676:	711a      	strb	r2, [r3, #4]
    // InstallationDescription1
    N2kMsg.AddByte(InstDesc1Len+2);
 8011678:	6a3b      	ldr	r3, [r7, #32]
 801167a:	b2db      	uxtb	r3, r3
 801167c:	3302      	adds	r3, #2
 801167e:	b2db      	uxtb	r3, r3
 8011680:	4619      	mov	r1, r3
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7f8 fc5a 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 8011688:	2101      	movs	r1, #1
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f7f8 fc56 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription1,InstDesc1Len,UsePgm);
 8011690:	6a3a      	ldr	r2, [r7, #32]
 8011692:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011696:	6879      	ldr	r1, [r7, #4]
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7f8 fc65 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>

    // InstallationDescription2
    N2kMsg.AddByte(InstDesc2Len+2);
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	3302      	adds	r3, #2
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	4619      	mov	r1, r3
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f7f8 fc47 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 80116ae:	2101      	movs	r1, #1
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	f7f8 fc43 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription2,InstDesc2Len,UsePgm);
 80116b6:	69fa      	ldr	r2, [r7, #28]
 80116b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80116bc:	6839      	ldr	r1, [r7, #0]
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f7f8 fc52 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>
    // ManufacturerInformation
    N2kMsg.AddByte(ManInfoLen+2);
 80116c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	3302      	adds	r3, #2
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	4619      	mov	r1, r3
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f7f8 fc34 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 80116d4:	2101      	movs	r1, #1
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	f7f8 fc30 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(ManufacturerInformation,ManInfoLen,UsePgm);
 80116dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80116e2:	68b9      	ldr	r1, [r7, #8]
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f7f8 fc3f 	bl	8009f68 <_ZN7tN2kMsg6AddStrEPKcib>
}
 80116ea:	bf00      	nop
 80116ec:	3728      	adds	r7, #40	; 0x28
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	0001f016 	.word	0x0001f016

080116f8 <_Z16ParseN2kPGN59904RK7tN2kMsgRm>:
    N2kMsg.Destination=Destination;
    N2kMsg.Priority=6;
    N2kMsg.Add3ByteInt(RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  int result=((N2kMsg.DataLen>=3) && (N2kMsg.DataLen<=8));
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	691b      	ldr	r3, [r3, #16]
 8011706:	2b02      	cmp	r3, #2
 8011708:	dd05      	ble.n	8011716 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	2b08      	cmp	r3, #8
 8011710:	dc01      	bgt.n	8011716 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 8011712:	2301      	movs	r3, #1
 8011714:	e000      	b.n	8011718 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x20>
 8011716:	2300      	movs	r3, #0
 8011718:	60fb      	str	r3, [r7, #12]
  RequestedPGN=0;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2200      	movs	r2, #0
 801171e:	601a      	str	r2, [r3, #0]
  if (result) {
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00c      	beq.n	8011740 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x48>
    int Index=0;
 8011726:	2300      	movs	r3, #0
 8011728:	60bb      	str	r3, [r7, #8]
    RequestedPGN=N2kMsg.Get3ByteUInt(Index);
 801172a:	f107 0308 	add.w	r3, r7, #8
 801172e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011732:	4619      	mov	r1, r3
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7f8 fc66 	bl	800a006 <_ZNK7tN2kMsg12Get3ByteUIntERim>
 801173a:	4602      	mov	r2, r0
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	601a      	str	r2, [r3, #0]
  }

  return result;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2b00      	cmp	r3, #0
 8011744:	bf14      	ite	ne
 8011746:	2301      	movne	r3, #1
 8011748:	2300      	moveq	r3, #0
 801174a:	b2db      	uxtb	r3, r3
}
 801174c:	4618      	mov	r0, r3
 801174e:	3710      	adds	r7, #16
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <_Z15SetN2kPGN126993R7tN2kMsgmh>:
}

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
// Heartbeat
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	4613      	mov	r3, r2
 8011760:	71fb      	strb	r3, [r7, #7]
	N2kMsg.SetPGN(126993L);
 8011762:	4914      	ldr	r1, [pc, #80]	; (80117b4 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x60>)
 8011764:	68f8      	ldr	r0, [r7, #12]
 8011766:	f7f8 faa9 	bl	8009cbc <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=7;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2207      	movs	r2, #7
 801176e:	711a      	strb	r2, [r3, #4]
	if ( timeInterval_ms>MaxHeartbeatInterval ) {
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	4a11      	ldr	r2, [pc, #68]	; (80117b8 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x64>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d905      	bls.n	8011784 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x30>
	  N2kMsg.Add2ByteUInt(0xfffe); // Error
 8011778:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801177c:	68f8      	ldr	r0, [r7, #12]
 801177e:	f7f8 fb92 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
 8011782:	e005      	b.n	8011790 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x3c>
	} else {
	  N2kMsg.Add2ByteUInt((uint16_t)(timeInterval_ms));
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	b29b      	uxth	r3, r3
 8011788:	4619      	mov	r1, r3
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f7f8 fb8b 	bl	8009ea6 <_ZN7tN2kMsg12Add2ByteUIntEt>
	}
	N2kMsg.AddByte(sequenceCounter);
 8011790:	79fb      	ldrb	r3, [r7, #7]
 8011792:	4619      	mov	r1, r3
 8011794:	68f8      	ldr	r0, [r7, #12]
 8011796:	f7f8 fbd1 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.AddByte(0xff); // Reserved
 801179a:	21ff      	movs	r1, #255	; 0xff
 801179c:	68f8      	ldr	r0, [r7, #12]
 801179e:	f7f8 fbcd 	bl	8009f3c <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.Add4ByteUInt(0xffffffff); // Reserved
 80117a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f7f8 fba3 	bl	8009ef2 <_ZN7tN2kMsg12Add4ByteUIntEm>
}
 80117ac:	bf00      	nop
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	0001f011 	.word	0x0001f011
 80117b8:	0009ffd8 	.word	0x0009ffd8

080117bc <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>:
  template <typename T> static T N2kMin(T a, T b) { return (a<b?a:b); }
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	4603      	mov	r3, r0
 80117c4:	460a      	mov	r2, r1
 80117c6:	71fb      	strb	r3, [r7, #7]
 80117c8:	4613      	mov	r3, r2
 80117ca:	71bb      	strb	r3, [r7, #6]
 80117cc:	79fa      	ldrb	r2, [r7, #7]
 80117ce:	79bb      	ldrb	r3, [r7, #6]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d201      	bcs.n	80117d8 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1c>
 80117d4:	79fb      	ldrb	r3, [r7, #7]
 80117d6:	e000      	b.n	80117da <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1e>
 80117d8:	79bb      	ldrb	r3, [r7, #6]
 80117da:	4618      	mov	r0, r3
 80117dc:	370c      	adds	r7, #12
 80117de:	46bd      	mov	sp, r7
 80117e0:	bc80      	pop	{r7}
 80117e2:	4770      	bx	lr

080117e4 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>:
  template <typename T> static T N2kMax(T a, T b) { return (a>b?a:b); }
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	460a      	mov	r2, r1
 80117ee:	71fb      	strb	r3, [r7, #7]
 80117f0:	4613      	mov	r3, r2
 80117f2:	71bb      	strb	r3, [r7, #6]
 80117f4:	79fa      	ldrb	r2, [r7, #7]
 80117f6:	79bb      	ldrb	r3, [r7, #6]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d901      	bls.n	8011800 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1c>
 80117fc:	79fb      	ldrb	r3, [r7, #7]
 80117fe:	e000      	b.n	8011802 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1e>
 8011800:	79bb      	ldrb	r3, [r7, #6]
 8011802:	4618      	mov	r0, r3
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	bc80      	pop	{r7}
 801180a:	4770      	bx	lr

0801180c <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan);


//*****************************************************************************
tNMEA2000_STM32::tNMEA2000_STM32(CAN_HandleTypeDef *_N2kCan) :
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
		tNMEA2000(), N2kCan(_N2kCan) {
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4618      	mov	r0, r3
 801181a:	f7fa fbad 	bl	800bf78 <_ZN9tNMEA2000C1Ev>
 801181e:	4a0f      	ldr	r2, [pc, #60]	; (801185c <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x50>)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	683a      	ldr	r2, [r7, #0]
 8011828:	66da      	str	r2, [r3, #108]	; 0x6c
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	22fa      	movs	r2, #250	; 0xfa
 801182e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2201      	movs	r2, #1
 8011836:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	NMEA2000_STM32_instance = this;
 801183a:	4a09      	ldr	r2, [pc, #36]	; (8011860 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x54>)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6013      	str	r3, [r2, #0]

	rxRing = 0;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	txRing = 0;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2200      	movs	r2, #0
 801184c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	4618      	mov	r0, r3
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	080156a0 	.word	0x080156a0
 8011860:	20000368 	.word	0x20000368

08011864 <_ZN15tNMEA2000_STM327CANOpenEv>:


//*****************************************************************************
bool tNMEA2000_STM32::CANOpen() {
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af02      	add	r7, sp, #8
 801186a:	6078      	str	r0, [r7, #4]

	bool ret = true;
 801186c:	2301      	movs	r3, #1
 801186e:	73fb      	strb	r3, [r7, #15]

	// CAN initialisation instead of using the by the STM32cubeIDE configuration tool generated init function
	if (N2kCAN_Init() != HAL_OK) {
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f000 fa7d 	bl	8011d70 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	bf14      	ite	ne
 801187c:	2301      	movne	r3, #1
 801187e:	2300      	moveq	r3, #0
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b00      	cmp	r3, #0
 8011884:	d001      	beq.n	801188a <_ZN15tNMEA2000_STM327CANOpenEv+0x26>
		ret = false;
 8011886:	2300      	movs	r3, #0
 8011888:	73fb      	strb	r3, [r7, #15]
	}

	// Enable CAN
	if (HAL_CAN_Start(N2kCan) != HAL_OK) {
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801188e:	4618      	mov	r0, r3
 8011890:	f7f1 f832 	bl	80028f8 <HAL_CAN_Start>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	bf14      	ite	ne
 801189a:	2301      	movne	r3, #1
 801189c:	2300      	moveq	r3, #0
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d001      	beq.n	80118a8 <_ZN15tNMEA2000_STM327CANOpenEv+0x44>
		ret = false;
 80118a4:	2300      	movs	r3, #0
 80118a6:	73fb      	strb	r3, [r7, #15]
	}

	// activate CAN callback 1 interrupt for NMEA2000 CAN bus
	if (HAL_CAN_ActivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ac:	2110      	movs	r1, #16
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7f1 fa85 	bl	8002dbe <HAL_CAN_ActivateNotification>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	bf14      	ite	ne
 80118ba:	2301      	movne	r3, #1
 80118bc:	2300      	moveq	r3, #0
 80118be:	b2db      	uxtb	r3, r3
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d001      	beq.n	80118c8 <_ZN15tNMEA2000_STM327CANOpenEv+0x64>
		ret = false;
 80118c4:	2300      	movs	r3, #0
 80118c6:	73fb      	strb	r3, [r7, #15]
	}


	if (SetN2kCANFilter( N2kCan, true, 0, 0x00000000, 0x00000000 ) != HAL_OK) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80118cc:	2300      	movs	r3, #0
 80118ce:	9301      	str	r3, [sp, #4]
 80118d0:	2300      	movs	r3, #0
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	2300      	movs	r3, #0
 80118d6:	2201      	movs	r2, #1
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 faf1 	bl	8011ec0 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	bf14      	ite	ne
 80118e4:	2301      	movne	r3, #1
 80118e6:	2300      	moveq	r3, #0
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d001      	beq.n	80118f2 <_ZN15tNMEA2000_STM327CANOpenEv+0x8e>
		ret = false;
 80118ee:	2300      	movs	r3, #0
 80118f0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80118f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000_STM32::CANSendFrame(unsigned long id, unsigned char len, const unsigned char* buf, bool wait_sent) {
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af02      	add	r7, sp, #8
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	603b      	str	r3, [r7, #0]
 8011908:	4613      	mov	r3, r2
 801190a:	71fb      	strb	r3, [r7, #7]
	//TODO wait_sent
	uint8_t prio = (uint8_t)((id >> 26) & 0x7);
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	0e9b      	lsrs	r3, r3, #26
 8011910:	b2db      	uxtb	r3, r3
 8011912:	f003 0307 	and.w	r3, r3, #7
 8011916:	757b      	strb	r3, [r7, #21]
	bool ret = false;
 8011918:	2300      	movs	r3, #0
 801191a:	75fb      	strb	r3, [r7, #23]

	//This interrupt deactivation does probably nothing because the TX mailboxes get not filled by interrupt!
	HAL_CAN_DeactivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011920:	2101      	movs	r1, #1
 8011922:	4618      	mov	r0, r3
 8011924:	f7f1 fa70 	bl	8002e08 <HAL_CAN_DeactivateNotification>

	bool TxMailboxesFull = HAL_CAN_GetTxMailboxesFreeLevel(N2kCan) == 0;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801192c:	4618      	mov	r0, r3
 801192e:	f7f1 f901 	bl	8002b34 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	bf0c      	ite	eq
 8011938:	2301      	moveq	r3, #1
 801193a:	2300      	movne	r3, #0
 801193c:	753b      	strb	r3, [r7, #20]
	bool SendFromBuffer = false;
 801193e:	2300      	movs	r3, #0
 8011940:	75bb      	strb	r3, [r7, #22]

	// If TX buffer has already some frames waiting with higher prio or mailbox is full, buffer frame
	if ( !txRing->isEmpty(prio) || TxMailboxesFull ) {
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011948:	7d7a      	ldrb	r2, [r7, #21]
 801194a:	4611      	mov	r1, r2
 801194c:	4618      	mov	r0, r3
 801194e:	f000 fb4a 	bl	8011fe6 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh>
 8011952:	4603      	mov	r3, r0
 8011954:	f083 0301 	eor.w	r3, r3, #1
 8011958:	b2db      	uxtb	r3, r3
 801195a:	2b00      	cmp	r3, #0
 801195c:	d102      	bne.n	8011964 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x68>
 801195e:	7d3b      	ldrb	r3, [r7, #20]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d001      	beq.n	8011968 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x6c>
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x6e>
 8011968:	2300      	movs	r3, #0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d024      	beq.n	80119b8 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xbc>
		CAN_message_t *msg = txRing->getAddRef(prio);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011974:	7d7a      	ldrb	r2, [r7, #21]
 8011976:	4611      	mov	r1, r2
 8011978:	4618      	mov	r0, r3
 801197a:	f000 fb5b 	bl	8012034 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>
 801197e:	6138      	str	r0, [r7, #16]
		if ( msg!=0 ) {
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d016      	beq.n	80119b4 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xb8>
			msg->id = id;
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	601a      	str	r2, [r3, #0]
			msg->flags.extended = 1;
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	2201      	movs	r2, #1
 8011990:	711a      	strb	r2, [r3, #4]
			if ( len > 8 ) len = 8;
 8011992:	79fb      	ldrb	r3, [r7, #7]
 8011994:	2b08      	cmp	r3, #8
 8011996:	d901      	bls.n	801199c <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xa0>
 8011998:	2308      	movs	r3, #8
 801199a:	71fb      	strb	r3, [r7, #7]
			msg->len = len;
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	79fa      	ldrb	r2, [r7, #7]
 80119a0:	721a      	strb	r2, [r3, #8]
			memcpy(msg->buf, buf, len);
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	3309      	adds	r3, #9
 80119a6:	79fa      	ldrb	r2, [r7, #7]
 80119a8:	6839      	ldr	r1, [r7, #0]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f003 faa6 	bl	8014efc <memcpy>
			ret = true;
 80119b0:	2301      	movs	r3, #1
 80119b2:	75fb      	strb	r3, [r7, #23]
			//frame buffered
		}
		SendFromBuffer = true;
 80119b4:	2301      	movs	r3, #1
 80119b6:	75bb      	strb	r3, [r7, #22]
	}

	if ( !TxMailboxesFull ) {
 80119b8:	7d3b      	ldrb	r3, [r7, #20]
 80119ba:	f083 0301 	eor.w	r3, r3, #1
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d014      	beq.n	80119ee <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xf2>
		if ( SendFromBuffer ) {
 80119c4:	7dbb      	ldrb	r3, [r7, #22]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d007      	beq.n	80119da <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xde>
			ret = sendFromTxRing(prio);
 80119ca:	7d7b      	ldrb	r3, [r7, #21]
 80119cc:	4619      	mov	r1, r3
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f000 f941 	bl	8011c56 <_ZN15tNMEA2000_STM3214sendFromTxRingEh>
 80119d4:	4603      	mov	r3, r0
 80119d6:	75fb      	strb	r3, [r7, #23]
 80119d8:	e009      	b.n	80119ee <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xf2>
		} else {
			ret = CANwriteTxMailbox(id, len, buf, 1);
 80119da:	79fa      	ldrb	r2, [r7, #7]
 80119dc:	2301      	movs	r3, #1
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	68b9      	ldr	r1, [r7, #8]
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f000 f8ec 	bl	8011bc2 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>
 80119ea:	4603      	mov	r3, r0
 80119ec:	75fb      	strb	r3, [r7, #23]
		}
		/* transmit entry accepted */
	}

	HAL_CAN_ActivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119f2:	2101      	movs	r1, #1
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7f1 f9e2 	bl	8002dbe <HAL_CAN_ActivateNotification>

	return ret;
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3718      	adds	r7, #24
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh>:

//*****************************************************************************
bool tNMEA2000_STM32::CANGetFrame(unsigned long& id, unsigned char& len, unsigned char* buf) {
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b086      	sub	sp, #24
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	607a      	str	r2, [r7, #4]
 8011a10:	603b      	str	r3, [r7, #0]

	bool ret = false;
 8011a12:	2300      	movs	r3, #0
 8011a14:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_DeactivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a1a:	2110      	movs	r1, #16
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f1 f9f3 	bl	8002e08 <HAL_CAN_DeactivateNotification>

	const CAN_message_t *msg = rxRing->getReadRef();
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011a28:	2100      	movs	r1, #0
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 fb85 	bl	801213a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh>
 8011a30:	6138      	str	r0, [r7, #16]
	if ( msg!=0 ) {
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d019      	beq.n	8011a6c <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh+0x68>
	    id = msg->id;
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	601a      	str	r2, [r3, #0]
	    len = msg->len;
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	7a1a      	ldrb	r2, [r3, #8]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	701a      	strb	r2, [r3, #0]
		if ( len > 8 ) len = 8;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	2b08      	cmp	r3, #8
 8011a4e:	d902      	bls.n	8011a56 <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh+0x52>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2208      	movs	r2, #8
 8011a54:	701a      	strb	r2, [r3, #0]
	    memcpy(buf, msg->buf, len);
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	f103 0109 	add.w	r1, r3, #9
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	461a      	mov	r2, r3
 8011a62:	6838      	ldr	r0, [r7, #0]
 8011a64:	f003 fa4a 	bl	8014efc <memcpy>
	    ret = true;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	75fb      	strb	r3, [r7, #23]
	}

	HAL_CAN_ActivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a70:	2110      	movs	r1, #16
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7f1 f9a3 	bl	8002dbe <HAL_CAN_ActivateNotification>

	return ret;
 8011a78:	7dfb      	ldrb	r3, [r7, #23]

}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv>:

// *****************************************************************************
void tNMEA2000_STM32::InitCANFrameBuffers() {
 8011a82:	b590      	push	{r4, r7, lr}
 8011a84:	b083      	sub	sp, #12
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]

  if ( MaxCANReceiveFrames == 0 ) MaxCANReceiveFrames = 32; // Use default, if not set
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d103      	bne.n	8011a9c <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x1a>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2220      	movs	r2, #32
 8011a98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  if ( MaxCANReceiveFrames < 10 ) MaxCANReceiveFrames = 10; // Do not allow less than 10 - should have enough memory.
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011aa2:	2b09      	cmp	r3, #9
 8011aa4:	d803      	bhi.n	8011aae <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x2c>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	220a      	movs	r2, #10
 8011aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  if ( MaxCANSendFrames == 0 ) MaxCANSendFrames = 50;  // Use big enough default buffer
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d103      	bne.n	8011ac0 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x3e>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2232      	movs	r2, #50	; 0x32
 8011abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  if ( MaxCANSendFrames < 30 ) MaxCANSendFrames = 30; // Do not allow less than 30 - should have enough memory.
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ac6:	2b1d      	cmp	r3, #29
 8011ac8:	d803      	bhi.n	8011ad2 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x50>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	221e      	movs	r2, #30
 8011ace:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  //TODO deleting ring buffer results in hard fault!
  // if buffer is initialized with a different size delete it
  if ( rxRing != 0 && rxRing->getSize() != MaxCANReceiveFrames ) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00e      	beq.n	8011afa <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x78>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 fb55 	bl	8012192 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	461a      	mov	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d001      	beq.n	8011afa <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x78>
 8011af6:	2301      	movs	r3, #1
 8011af8:	e000      	b.n	8011afc <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x7a>
 8011afa:	2300      	movs	r3, #0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d00d      	beq.n	8011b1c <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x9a>
    delete rxRing;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d004      	beq.n	8011b14 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x92>
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	3204      	adds	r2, #4
 8011b0e:	6812      	ldr	r2, [r2, #0]
 8011b10:	4618      	mov	r0, r3
 8011b12:	4790      	blx	r2
    rxRing = 0;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
  if ( txRing != 0 && txRing->getSize() != MaxCANSendFrames ) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00e      	beq.n	8011b44 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc2>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f000 fb30 	bl	8012192 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>
 8011b32:	4603      	mov	r3, r0
 8011b34:	461a      	mov	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d001      	beq.n	8011b44 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc2>
 8011b40:	2301      	movs	r3, #1
 8011b42:	e000      	b.n	8011b46 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc4>
 8011b44:	2300      	movs	r3, #0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d00d      	beq.n	8011b66 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xe4>
    delete txRing;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d004      	beq.n	8011b5e <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xdc>
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	3204      	adds	r2, #4
 8011b58:	6812      	ldr	r2, [r2, #0]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	4790      	blx	r2
    txRing = 0;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2200      	movs	r2, #0
 8011b62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  //							tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities=1);
  if ( rxRing == 0 ) rxRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANReceiveFrames, 7);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d10f      	bne.n	8011b90 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x10e>
 8011b70:	2014      	movs	r0, #20
 8011b72:	f003 f84f 	bl	8014c14 <_Znwj>
 8011b76:	4603      	mov	r3, r0
 8011b78:	461c      	mov	r4, r3
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011b80:	2207      	movs	r2, #7
 8011b82:	4619      	mov	r1, r3
 8011b84:	4620      	mov	r0, r4
 8011b86:	f000 fb7b 	bl	8012280 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  if ( txRing == 0 ) txRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANSendFrames, 7);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10f      	bne.n	8011bba <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x138>
 8011b9a:	2014      	movs	r0, #20
 8011b9c:	f003 f83a 	bl	8014c14 <_Znwj>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	461c      	mov	r4, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011baa:	2207      	movs	r2, #7
 8011bac:	4619      	mov	r1, r3
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 fb66 	bl	8012280 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8

}
 8011bba:	bf00      	nop
 8011bbc:	370c      	adds	r7, #12
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd90      	pop	{r4, r7, pc}

08011bc2 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>:

// *****************************************************************************
bool tNMEA2000_STM32::CANwriteTxMailbox(unsigned long id, unsigned char len, const unsigned char *buf, bool extended) {
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b084      	sub	sp, #16
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	603b      	str	r3, [r7, #0]
 8011bce:	4613      	mov	r3, r2
 8011bd0:	71fb      	strb	r3, [r7, #7]

	if (extended) {
 8011bd2:	7e3b      	ldrb	r3, [r7, #24]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d006      	beq.n	8011be6 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x24>
		CANTxHeader.IDE = CAN_ID_EXT;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	2204      	movs	r2, #4
 8011bdc:	679a      	str	r2, [r3, #120]	; 0x78
		CANTxHeader.ExtId = id;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	675a      	str	r2, [r3, #116]	; 0x74
 8011be4:	e005      	b.n	8011bf2 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x30>
	} else {
		CANTxHeader.IDE = CAN_ID_STD;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	679a      	str	r2, [r3, #120]	; 0x78
		CANTxHeader.StdId = id;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	CANTxHeader.RTR = CAN_RTR_DATA;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	67da      	str	r2, [r3, #124]	; 0x7c
	CANTxHeader.DLC = len;
 8011bf8:	79fa      	ldrb	r2, [r7, #7]
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CANTxHeader.TransmitGlobalTime = DISABLE;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2200      	movs	r2, #0
 8011c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    if ( len > 8 ) len = 8;
 8011c08:	79fb      	ldrb	r3, [r7, #7]
 8011c0a:	2b08      	cmp	r3, #8
 8011c0c:	d901      	bls.n	8011c12 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x50>
 8011c0e:	2308      	movs	r3, #8
 8011c10:	71fb      	strb	r3, [r7, #7]
    memcpy(CANTxdata, buf, len);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	33a4      	adds	r3, #164	; 0xa4
 8011c16:	79fa      	ldrb	r2, [r7, #7]
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f003 f96e 	bl	8014efc <memcpy>
	//for (int i = 0; i < len; i++) {
	//	CANTxdata[i] = buf[i];
	//}

	// send message
	if (HAL_CAN_AddTxMessage(N2kCan, &CANTxHeader, CANTxdata, &CANTxMailbox) == HAL_OK) {
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	33b4      	adds	r3, #180	; 0xb4
 8011c34:	f7f0 fea4 	bl	8002980 <HAL_CAN_AddTxMessage>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	bf0c      	ite	eq
 8011c3e:	2301      	moveq	r3, #1
 8011c40:	2300      	movne	r3, #0
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d001      	beq.n	8011c4c <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x8a>
		return true;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e000      	b.n	8011c4e <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x8c>
	} else {
		return false;
 8011c4c:	2300      	movs	r3, #0
	}

}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <_ZN15tNMEA2000_STM3214sendFromTxRingEh>:

// *****************************************************************************
bool tNMEA2000_STM32::sendFromTxRing(uint8_t prio) {
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b086      	sub	sp, #24
 8011c5a:	af02      	add	r7, sp, #8
 8011c5c:	6078      	str	r0, [r7, #4]
 8011c5e:	460b      	mov	r3, r1
 8011c60:	70fb      	strb	r3, [r7, #3]
	const CAN_message_t *txMsg;

	txMsg = txRing->getReadRef(prio);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011c68:	78fa      	ldrb	r2, [r7, #3]
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f000 fb71 	bl	8012354 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>
 8011c72:	60f8      	str	r0, [r7, #12]
	if ( txMsg != 0 ) {
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00f      	beq.n	8011c9a <_ZN15tNMEA2000_STM3214sendFromTxRingEh+0x44>
		return CANwriteTxMailbox(txMsg->id, txMsg->len, txMsg->buf, txMsg->flags.extended);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	6819      	ldr	r1, [r3, #0]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	7a1a      	ldrb	r2, [r3, #8]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f103 0009 	add.w	r0, r3, #9
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	791b      	ldrb	r3, [r3, #4]
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	4603      	mov	r3, r0
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f7ff ff96 	bl	8011bc2 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>
 8011c96:	4603      	mov	r3, r0
 8011c98:	e000      	b.n	8011c9c <_ZN15tNMEA2000_STM3214sendFromTxRingEh+0x46>
	} else {
		return false;
 8011c9a:	2300      	movs	r3, #0
	}

}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>:

// *****************************************************************************
void tNMEA2000_STM32::CANreadRxMailbox(CAN_HandleTypeDef *hcan) {
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
	CAN_message_t *rxMsg;
	uint8_t prio;

	if (hcan == N2kCan) {
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb2:	683a      	ldr	r2, [r7, #0]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d157      	bne.n	8011d68 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xc4>
		if (HAL_CAN_GetRxMessage(hcan, RX_FIFO, &CANRxHeader, CANRxdata) == HAL_OK) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	33ac      	adds	r3, #172	; 0xac
 8011cc8:	6838      	ldr	r0, [r7, #0]
 8011cca:	f7f0 ff67 	bl	8002b9c <HAL_CAN_GetRxMessage>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	bf0c      	ite	eq
 8011cd4:	2301      	moveq	r3, #1
 8011cd6:	2300      	movne	r3, #0
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d044      	beq.n	8011d68 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xc4>
			prio = (uint8_t)((CANRxHeader.ExtId >> 26) & 0x7);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ce4:	0e9b      	lsrs	r3, r3, #26
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	f003 0307 	and.w	r3, r3, #7
 8011cec:	73fb      	strb	r3, [r7, #15]
			rxMsg = rxRing->getAddRef(prio);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011cf4:	7bfa      	ldrb	r2, [r7, #15]
 8011cf6:	4611      	mov	r1, r2
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f000 f99b 	bl	8012034 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>
 8011cfe:	60b8      	str	r0, [r7, #8]
			if ( rxMsg!=0 ) {
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d025      	beq.n	8011d52 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xae>
				rxMsg->len = CANRxHeader.DLC;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011d0c:	b2da      	uxtb	r2, r3
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	721a      	strb	r2, [r3, #8]
				if ( rxMsg->len > 8 ) rxMsg->len = 8;
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	7a1b      	ldrb	r3, [r3, #8]
 8011d16:	2b08      	cmp	r3, #8
 8011d18:	d902      	bls.n	8011d20 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0x7c>
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	2208      	movs	r2, #8
 8011d1e:	721a      	strb	r2, [r3, #8]
				rxMsg->flags.remote = CANRxHeader.RTR == CAN_RTR_REMOTE;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011d26:	2b02      	cmp	r3, #2
 8011d28:	bf0c      	ite	eq
 8011d2a:	2301      	moveq	r3, #1
 8011d2c:	2300      	movne	r3, #0
 8011d2e:	b2da      	uxtb	r2, r3
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	715a      	strb	r2, [r3, #5]
				rxMsg->flags.extended = CANRxHeader.IDE == CAN_ID_EXT;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d3a:	2b04      	cmp	r3, #4
 8011d3c:	bf0c      	ite	eq
 8011d3e:	2301      	moveq	r3, #1
 8011d40:	2300      	movne	r3, #0
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	711a      	strb	r2, [r3, #4]
				rxMsg->id = CANRxHeader.ExtId;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	601a      	str	r2, [r3, #0]
			}
			memcpy(rxMsg->buf, CANRxdata, rxMsg->len);
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	f103 0009 	add.w	r0, r3, #9
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	7a1b      	ldrb	r3, [r3, #8]
 8011d62:	461a      	mov	r2, r3
 8011d64:	f003 f8ca 	bl	8014efc <memcpy>
		}
	}
	// I think we don't have to check the fifo fill level if we use interrups?
	// HAL_CAN_GetRxFifoFillLevel(*N2kCan, CAN_RX_FIFO1);

}
 8011d68:	bf00      	nop
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv>:
  * @param baudRate in kbit/s
  * @param clockSpeed enum of the clock connected to the CAN controller (APB1 for STM32F105=48mHz)
  * @retval bool success or not
  */
HAL_StatusTypeDef tNMEA2000_STM32::N2kCAN_Init()
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b086      	sub	sp, #24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
	// CAN1000kbitPrescaler, TimeSeg1 and TimeSeg2 are configured for 1000 kbit/s @ defined clock speed
	// Baud rate has to be dividable by 1000 (500, 250, 200, 125, 100...)

#ifdef CAN1
	if (N2kCan == &hcan1) {
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d7c:	4a48      	ldr	r2, [pc, #288]	; (8011ea0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x130>)
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d104      	bne.n	8011d8c <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x1c>
		CANinstance = CAN1;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	4a47      	ldr	r2, [pc, #284]	; (8011ea4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x134>)
 8011d86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8011d8a:	e00b      	b.n	8011da4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x34>
	}
#ifdef CAN2
	else if (N2kCan == &hcan2) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d90:	4a45      	ldr	r2, [pc, #276]	; (8011ea8 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x138>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d104      	bne.n	8011da0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x30>
		CANinstance = CAN2;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4a44      	ldr	r2, [pc, #272]	; (8011eac <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x13c>)
 8011d9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8011d9e:	e001      	b.n	8011da4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x34>
		CANinstance = CAN3;
	}
#endif
	else {
		// CAN_HandleTypeDef *hcan is unknown
		return HAL_ERROR;
 8011da0:	2301      	movs	r3, #1
 8011da2:	e079      	b.n	8011e98 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x128>


	// usually the APB1 clock is running at the following speed if max clock frequencies are used:
	// STM32F103/105/107   36'000'000 Hz
	// STM32F405/407       42 000'000 Hz
	uint32_t APB1clockSpeed = HAL_RCC_GetPCLK1Freq();
 8011da4:	f7f3 fce2 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8011da8:	60b8      	str	r0, [r7, #8]

	if (APB1clockSpeed == 24000000) {
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	4a40      	ldr	r2, [pc, #256]	; (8011eb0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x140>)
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d107      	bne.n	8011dc2 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x52>
		CAN1000kbitPrescaler = 2;
 8011db2:	2302      	movs	r3, #2
 8011db4:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_10TQ;
 8011db6:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8011dba:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_1TQ;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	60fb      	str	r3, [r7, #12]
 8011dc0:	e028      	b.n	8011e14 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	}
	else if (APB1clockSpeed == 36000000) {
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	4a3b      	ldr	r2, [pc, #236]	; (8011eb4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x144>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d108      	bne.n	8011ddc <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x6c>
		CAN1000kbitPrescaler = 2;
 8011dca:	2302      	movs	r3, #2
 8011dcc:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_15TQ;
 8011dce:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8011dd2:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 8011dd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011dd8:	60fb      	str	r3, [r7, #12]
 8011dda:	e01b      	b.n	8011e14 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	}
	else if (APB1clockSpeed == 42000000) {
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	4a36      	ldr	r2, [pc, #216]	; (8011eb8 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x148>)
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d108      	bne.n	8011df6 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x86>
		CAN1000kbitPrescaler = 3;
 8011de4:	2303      	movs	r3, #3
 8011de6:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_11TQ;
 8011de8:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8011dec:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 8011dee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	e00e      	b.n	8011e14 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	}
	else if (APB1clockSpeed == 48000000) {
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	4a30      	ldr	r2, [pc, #192]	; (8011ebc <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x14c>)
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	d108      	bne.n	8011e10 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa0>
		CAN1000kbitPrescaler = 3;
 8011dfe:	2303      	movs	r3, #3
 8011e00:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_13TQ;
 8011e02:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8011e06:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 8011e08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011e0c:	60fb      	str	r3, [r7, #12]
 8011e0e:	e001      	b.n	8011e14 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0xa4>
	else {
		// There are no settings four your ABT1 clock speed yet!
		// On the following website you can find a matching prescaler, TS1 and TS2
		// Add the values for your clock speed and 1000kbit/s
		// http://www.bittiming.can-wiki.info/?CLK=36&ctype=bxCAN&SamplePoint=87.5
		return HAL_ERROR;
 8011e10:	2301      	movs	r3, #1
 8011e12:	e041      	b.n	8011e98 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x128>
	}

	N2kCan->Instance = CANinstance;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8011e1e:	601a      	str	r2, [r3, #0]
	N2kCan->Init.Prescaler = CAN1000kbitPrescaler * 1000 / CANbaudRate;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e26:	fb02 f103 	mul.w	r1, r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e34:	fbb1 f2f2 	udiv	r2, r1, r2
 8011e38:	605a      	str	r2, [r3, #4]
	N2kCan->Init.Mode = CAN_MODE_NORMAL;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e3e:	2200      	movs	r2, #0
 8011e40:	609a      	str	r2, [r3, #8]
	N2kCan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e46:	2200      	movs	r2, #0
 8011e48:	60da      	str	r2, [r3, #12]
	N2kCan->Init.TimeSeg1 = CANtimeSeg1;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	611a      	str	r2, [r3, #16]
	N2kCan->Init.TimeSeg2 = CANtimeSeg2;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	615a      	str	r2, [r3, #20]
	N2kCan->Init.TimeTriggeredMode = DISABLE;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e5e:	2200      	movs	r2, #0
 8011e60:	761a      	strb	r2, [r3, #24]
	N2kCan->Init.AutoBusOff = DISABLE;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e66:	2200      	movs	r2, #0
 8011e68:	765a      	strb	r2, [r3, #25]
	N2kCan->Init.AutoWakeUp = DISABLE;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e6e:	2200      	movs	r2, #0
 8011e70:	769a      	strb	r2, [r3, #26]
	N2kCan->Init.AutoRetransmission = DISABLE;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e76:	2200      	movs	r2, #0
 8011e78:	76da      	strb	r2, [r3, #27]
	N2kCan->Init.ReceiveFifoLocked = DISABLE;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e7e:	2200      	movs	r2, #0
 8011e80:	771a      	strb	r2, [r3, #28]
	N2kCan->Init.TransmitFifoPriority = DISABLE;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e86:	2200      	movs	r2, #0
 8011e88:	775a      	strb	r2, [r3, #29]

	return HAL_CAN_Init(N2kCan);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7f0 fb56 	bl	8002540 <HAL_CAN_Init>
 8011e94:	4603      	mov	r3, r0
 8011e96:	bf00      	nop
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	20000220 	.word	0x20000220
 8011ea4:	40006400 	.word	0x40006400
 8011ea8:	20000248 	.word	0x20000248
 8011eac:	40006800 	.word	0x40006800
 8011eb0:	016e3600 	.word	0x016e3600
 8011eb4:	02255100 	.word	0x02255100
 8011eb8:	0280de80 	.word	0x0280de80
 8011ebc:	02dc6c00 	.word	0x02dc6c00

08011ec0 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm>:
  * @param  Mask uint32_t bit mask
  * @param  Filter uint32_t CAN identifier
  * @retval success or not
  */
HAL_StatusTypeDef tNMEA2000_STM32::SetN2kCANFilter( CAN_HandleTypeDef *hcan, bool ExtendedIdentifier, uint32_t FilterNum, uint32_t Mask, uint32_t Filter )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b092      	sub	sp, #72	; 0x48
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	603b      	str	r3, [r7, #0]
 8011ecc:	4613      	mov	r3, r2
 8011ece:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// For dual CAN MCU's we have 28 filter banks to share between the CAN busses
	// For single CAN SlaveStartFilterBank does nothing and we have 14 filter banks.
	// If not defined different we use filter 0 .. 13 for primary CAN bus and 14 ... 27 for secondary CAN bus
	#if !defined(SlaveStartFilterBank)
	const uint32_t SlaveStartFilterBank = 14;
 8011ed6:	230e      	movs	r3, #14
 8011ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
	#endif

	#if defined(CAN2) // we have two CAN busses
		const int32_t TotalFilterBanks = 27;
 8011eda:	231b      	movs	r3, #27
 8011edc:	63bb      	str	r3, [r7, #56]	; 0x38
		const int32_t TotalFilterBanks = 13;
	#else // we have no CAN defined
		const int32_t TotalFilterBanks = -1;
	#endif

	int32_t FilterBank = -1;
 8011ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee2:	643b      	str	r3, [r7, #64]	; 0x40
	if (hcan->Instance == CAN1
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	4a31      	ldr	r2, [pc, #196]	; (8011fb0 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 8011eea:	4293      	cmp	r3, r2
 8011eec:	d108      	bne.n	8011f00 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum <= TotalFilterBanks
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	2b1b      	cmp	r3, #27
 8011ef2:	d805      	bhi.n	8011f00 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum < SlaveStartFilterBank ) {
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	2b0d      	cmp	r3, #13
 8011ef8:	d802      	bhi.n	8011f00 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
		FilterBank = FilterNum;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	643b      	str	r3, [r7, #64]	; 0x40
 8011efe:	e00a      	b.n	8011f16 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
	}
	else if (hcan->Instance == CAN2
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	4a2b      	ldr	r2, [pc, #172]	; (8011fb4 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d105      	bne.n	8011f16 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
			&& FilterNum <= TotalFilterBanks - SlaveStartFilterBank) {
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	2b0d      	cmp	r3, #13
 8011f0e:	d802      	bhi.n	8011f16 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
		FilterBank = FilterNum + SlaveStartFilterBank;
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	330e      	adds	r3, #14
 8011f14:	643b      	str	r3, [r7, #64]	; 0x40
	}

	if ( FilterBank >= 0
 8011f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	db42      	blt.n	8011fa2 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
			&& IS_CAN_ALL_INSTANCE(hcan->Instance) )
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a23      	ldr	r2, [pc, #140]	; (8011fb0 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d004      	beq.n	8011f30 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x70>
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4a22      	ldr	r2, [pc, #136]	; (8011fb4 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d138      	bne.n	8011fa2 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
	{
		CAN_FilterTypeDef sFilterConfig;

		sFilterConfig.FilterBank = FilterBank;
 8011f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f32:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8011f34:	2300      	movs	r3, #0
 8011f36:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (ExtendedIdentifier == false)
 8011f3c:	79fb      	ldrb	r3, [r7, #7]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d10c      	bne.n	8011f5c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x9c>
		{
			sFilterConfig.FilterMaskIdHigh = Mask << 5 & 0xFFFF;
 8011f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f44:	015b      	lsls	r3, r3, #5
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = 0x0000; // allows both remote request and data frames
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter << 5 & 0xFFFF;
 8011f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f50:	015b      	lsls	r3, r3, #5
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow =  0x0000;
 8011f56:	2300      	movs	r3, #0
 8011f58:	617b      	str	r3, [r7, #20]
 8011f5a:	e013      	b.n	8011f84 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xc4>
		}
		else
		{ // ExtendedIdentifier == true
			sFilterConfig.FilterMaskIdHigh = Mask >> 13 & 0xFFFF;
 8011f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f5e:	0b5b      	lsrs	r3, r3, #13
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = (Mask << 3 & 0xFFF8) | (0x1 << 2);
 8011f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f66:	00db      	lsls	r3, r3, #3
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	f043 0304 	orr.w	r3, r3, #4
 8011f6e:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter >> 13 & 0xFFFF; // EXTID[28:13]
 8011f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f72:	0b5b      	lsrs	r3, r3, #13
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow = (Filter << 3 & 0xFFF8) | (0x1 << 2); // EXTID[12:0] + IDE
 8011f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	f043 0304 	orr.w	r3, r3, #4
 8011f82:	617b      	str	r3, [r7, #20]
		}

		sFilterConfig.FilterFIFOAssignment = 0;
 8011f84:	2300      	movs	r3, #0
 8011f86:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	633b      	str	r3, [r7, #48]	; 0x30
		sFilterConfig.SlaveStartFilterBank = SlaveStartFilterBank; // CAN 0: 0...13 // CAN 1: 14...27 (28 filter banks in total)
 8011f8c:	230e      	movs	r3, #14
 8011f8e:	637b      	str	r3, [r7, #52]	; 0x34

		ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8011f90:	f107 0310 	add.w	r3, r7, #16
 8011f94:	4619      	mov	r1, r3
 8011f96:	68b8      	ldr	r0, [r7, #8]
 8011f98:	f7f0 fbce 	bl	8002738 <HAL_CAN_ConfigFilter>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	return ret;
 8011fa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3748      	adds	r7, #72	; 0x48
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	40006400 	.word	0x40006400
 8011fb4:	40006800 	.word	0x40006800

08011fb8 <HAL_CAN_RxFifo1MsgPendingCallback>:

// *****************************************************************************


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	// Call rxInterrupt method of the last tNMEA2000_STM32 instance.
	NMEA2000_STM32_instance->CANreadRxMailbox(hcan);
 8011fc0:	4b04      	ldr	r3, [pc, #16]	; (8011fd4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	6879      	ldr	r1, [r7, #4]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7ff fe6c 	bl	8011ca4 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>
}
 8011fcc:	bf00      	nop
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	20000368 	.word	0x20000368

08011fd8 <millis>:
	HAL_Delay(ms);
};


//*****************************************************************************
uint32_t millis(void) {
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8011fdc:	f7ef ff92 	bl	8001f04 <HAL_GetTick>
 8011fe0:	4603      	mov	r3, r0
};
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh>:
  delete[] priorityReferencies;
}

// *****************************************************************************
template<typename T>
bool tPriorityRingBuffer<T>::isEmpty(uint8_t _priority) const {
 8011fe6:	b480      	push	{r7}
 8011fe8:	b083      	sub	sp, #12
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	460b      	mov	r3, r1
 8011ff0:	70fb      	strb	r3, [r7, #3]
  if ( _priority>=maxPriorities) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	7a9b      	ldrb	r3, [r3, #10]
 8011ff6:	78fa      	ldrb	r2, [r7, #3]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d309      	bcc.n	8012010 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh+0x2a>
    return head==tail;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	889a      	ldrh	r2, [r3, #4]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	88db      	ldrh	r3, [r3, #6]
 8012004:	429a      	cmp	r2, r3
 8012006:	bf0c      	ite	eq
 8012008:	2301      	moveq	r3, #1
 801200a:	2300      	movne	r3, #0
 801200c:	b2db      	uxtb	r3, r3
 801200e:	e00c      	b.n	801202a <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh+0x44>
  } else {
    return priorityReferencies[_priority].next==INVALID_RING_REF;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	691a      	ldr	r2, [r3, #16]
 8012014:	78fb      	ldrb	r3, [r7, #3]
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	4413      	add	r3, r2
 801201a:	881b      	ldrh	r3, [r3, #0]
 801201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012020:	4293      	cmp	r3, r2
 8012022:	bf0c      	ite	eq
 8012024:	2301      	moveq	r3, #1
 8012026:	2300      	movne	r3, #0
 8012028:	b2db      	uxtb	r3, r3
  }
}
 801202a:	4618      	mov	r0, r3
 801202c:	370c      	adds	r7, #12
 801202e:	46bd      	mov	sp, r7
 8012030:	bc80      	pop	{r7}
 8012032:	4770      	bx	lr

08012034 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>:
  return false;
}

// *****************************************************************************
template<typename T>
T *tPriorityRingBuffer<T>::getAddRef(uint8_t _priority) {
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	460b      	mov	r3, r1
 801203e:	70fb      	strb	r3, [r7, #3]
  T *ret=0;
 8012040:	2300      	movs	r3, #0
 8012042:	60fb      	str	r3, [r7, #12]

  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	7a9b      	ldrb	r3, [r3, #10]
 8012048:	78fa      	ldrb	r2, [r7, #3]
 801204a:	429a      	cmp	r2, r3
 801204c:	d303      	bcc.n	8012056 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x22>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	7a9b      	ldrb	r3, [r3, #10]
 8012052:	3b01      	subs	r3, #1
 8012054:	70fb      	strb	r3, [r7, #3]

  uint16_t nextEntry = (head + 1) % size;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	889b      	ldrh	r3, [r3, #4]
 801205a:	3301      	adds	r3, #1
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	8912      	ldrh	r2, [r2, #8]
 8012060:	fb93 f1f2 	sdiv	r1, r3, r2
 8012064:	fb01 f202 	mul.w	r2, r1, r2
 8012068:	1a9b      	subs	r3, r3, r2
 801206a:	817b      	strh	r3, [r7, #10]

  // Check if the ring buffer is full
  if ( nextEntry == tail ) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	88db      	ldrh	r3, [r3, #6]
 8012070:	897a      	ldrh	r2, [r7, #10]
 8012072:	429a      	cmp	r2, r3
 8012074:	d109      	bne.n	801208a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x56>
    clean();
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 f9fb 	bl	8012472 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE5cleanEv>
    // check again
    if ( nextEntry == tail ) {
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	88db      	ldrh	r3, [r3, #6]
 8012080:	897a      	ldrh	r2, [r7, #10]
 8012082:	429a      	cmp	r2, r3
 8012084:	d101      	bne.n	801208a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x56>
      RingBufferErrDbgf("tPriorityRingBuffer<T>::getAddRef, ring buffer full\n");
      return ret;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	e053      	b.n	8012132 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xfe>
    }
  }

  ret=&(buffer[head].Value);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	68da      	ldr	r2, [r3, #12]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	889b      	ldrh	r3, [r3, #4]
 8012092:	4619      	mov	r1, r3
 8012094:	460b      	mov	r3, r1
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	440b      	add	r3, r1
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	4413      	add	r3, r2
 801209e:	60fb      	str	r3, [r7, #12]
  buffer[head].priority=_priority;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	68da      	ldr	r2, [r3, #12]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	889b      	ldrh	r3, [r3, #4]
 80120a8:	4619      	mov	r1, r3
 80120aa:	460b      	mov	r3, r1
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	440b      	add	r3, r1
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	4413      	add	r3, r2
 80120b4:	78fa      	ldrb	r2, [r7, #3]
 80120b6:	759a      	strb	r2, [r3, #22]
  buffer[head].next=INVALID_RING_REF;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	68da      	ldr	r2, [r3, #12]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	889b      	ldrh	r3, [r3, #4]
 80120c0:	4619      	mov	r1, r3
 80120c2:	460b      	mov	r3, r1
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	440b      	add	r3, r1
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	4413      	add	r3, r2
 80120cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120d0:	829a      	strh	r2, [r3, #20]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	691a      	ldr	r2, [r3, #16]
 80120d6:	78fb      	ldrb	r3, [r7, #3]
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	4413      	add	r3, r2
 80120dc:	881b      	ldrh	r3, [r3, #0]
 80120de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d108      	bne.n	80120f8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xc4>
    priorityReferencies[_priority].next=head;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	691a      	ldr	r2, [r3, #16]
 80120ea:	78fb      	ldrb	r3, [r7, #3]
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	4413      	add	r3, r2
 80120f0:	687a      	ldr	r2, [r7, #4]
 80120f2:	8892      	ldrh	r2, [r2, #4]
 80120f4:	801a      	strh	r2, [r3, #0]
 80120f6:	e010      	b.n	801211a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xe6>
  } else {
    buffer[priorityReferencies[_priority].last].next=head;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	68da      	ldr	r2, [r3, #12]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6919      	ldr	r1, [r3, #16]
 8012100:	78fb      	ldrb	r3, [r7, #3]
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	440b      	add	r3, r1
 8012106:	885b      	ldrh	r3, [r3, #2]
 8012108:	4619      	mov	r1, r3
 801210a:	460b      	mov	r3, r1
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	440b      	add	r3, r1
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	4413      	add	r3, r2
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	8892      	ldrh	r2, [r2, #4]
 8012118:	829a      	strh	r2, [r3, #20]
  }
  priorityReferencies[_priority].last=head;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691a      	ldr	r2, [r3, #16]
 801211e:	78fb      	ldrb	r3, [r7, #3]
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	4413      	add	r3, r2
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	8892      	ldrh	r2, [r2, #4]
 8012128:	805a      	strh	r2, [r3, #2]

  RingBufferDbgf("tPriorityRingBuffer<T>::getAddRef, added new item head:%u, priority:%u\n",head,_priority);

  // Bump the head to point to the next free entry
  head = nextEntry;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	897a      	ldrh	r2, [r7, #10]
 801212e:	809a      	strh	r2, [r3, #4]

  return ret;
 8012130:	68fb      	ldr	r3, [r7, #12]
}
 8012132:	4618      	mov	r0, r3
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}

0801213a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh>:
  return ret;
}

// *****************************************************************************
template<typename T>
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t *_priority) {
 801213a:	b580      	push	{r7, lr}
 801213c:	b084      	sub	sp, #16
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
 8012142:	6039      	str	r1, [r7, #0]
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 8012144:	2300      	movs	r3, #0
 8012146:	73fb      	strb	r3, [r7, #15]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	7a9b      	ldrb	r3, [r3, #10]
 801214c:	7bfa      	ldrb	r2, [r7, #15]
 801214e:	429a      	cmp	r2, r3
 8012150:	d21a      	bcs.n	8012188 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x4e>
    if ( priorityReferencies[_pri].next!=INVALID_RING_REF ) {
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	691a      	ldr	r2, [r3, #16]
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	4413      	add	r3, r2
 801215c:	881b      	ldrh	r3, [r3, #0]
 801215e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012162:	4293      	cmp	r3, r2
 8012164:	d00c      	beq.n	8012180 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x46>
      if ( _priority!=0 ) *_priority=_pri;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d002      	beq.n	8012172 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x38>
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	7bfa      	ldrb	r2, [r7, #15]
 8012170:	701a      	strb	r2, [r3, #0]
      return getReadRef(_pri);
 8012172:	7bfb      	ldrb	r3, [r7, #15]
 8012174:	4619      	mov	r1, r3
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f000 f8ec 	bl	8012354 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>
 801217c:	4603      	mov	r3, r0
 801217e:	e004      	b.n	801218a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x50>
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 8012180:	7bfb      	ldrb	r3, [r7, #15]
 8012182:	3301      	adds	r3, #1
 8012184:	73fb      	strb	r3, [r7, #15]
 8012186:	e7df      	b.n	8012148 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0xe>
    }
  }

  return 0;
 8012188:	2300      	movs	r3, #0
}
 801218a:	4618      	mov	r0, r3
 801218c:	3710      	adds	r7, #16
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>:
  tPriorityRef *priorityReferencies;

public:
  tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities=1);
  virtual ~tPriorityRingBuffer();
  uint16_t getSize() const { return size; }
 8012192:	b480      	push	{r7}
 8012194:	b083      	sub	sp, #12
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	891b      	ldrh	r3, [r3, #8]
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bc80      	pop	{r7}
 80121a6:	4770      	bx	lr

080121a8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev>:
tPriorityRingBuffer<T>::~tPriorityRingBuffer() {
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
}
 80121b0:	4a0c      	ldr	r2, [pc, #48]	; (80121e4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x3c>)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	601a      	str	r2, [r3, #0]
  delete[] buffer;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d004      	beq.n	80121c8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x20>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	4618      	mov	r0, r3
 80121c4:	f002 fd24 	bl	8014c10 <_ZdaPv>
  delete[] priorityReferencies;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	691b      	ldr	r3, [r3, #16]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d004      	beq.n	80121da <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x32>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	691b      	ldr	r3, [r3, #16]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f002 fd1b 	bl	8014c10 <_ZdaPv>
}
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4618      	mov	r0, r3
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	08015690 	.word	0x08015690

080121e8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED0Ev>:
tPriorityRingBuffer<T>::~tPriorityRingBuffer() {
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
}
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7ff ffd9 	bl	80121a8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev>
 80121f6:	2114      	movs	r1, #20
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f002 fd07 	bl	8014c0c <_ZdlPvj>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <_ZN15tNMEA2000_STM3213CAN_message_tUt_C1Ev>:
  protected:
    struct CAN_message_t {
      uint32_t id = 0;          // can identifier
  //    uint16_t timestamp = 0;   // time when message arrived
  //    uint8_t idhit = 0; // filter that id came from
      struct {
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	701a      	strb	r2, [r3, #0]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2200      	movs	r2, #0
 801221a:	705a      	strb	r2, [r3, #1]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2200      	movs	r2, #0
 8012220:	709a      	strb	r2, [r3, #2]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	70da      	strb	r2, [r3, #3]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	4618      	mov	r0, r3
 801222c:	370c      	adds	r7, #12
 801222e:	46bd      	mov	sp, r7
 8012230:	bc80      	pop	{r7}
 8012232:	4770      	bx	lr

08012234 <_ZN15tNMEA2000_STM3213CAN_message_tC1Ev>:
    struct CAN_message_t {
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	601a      	str	r2, [r3, #0]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	3304      	adds	r3, #4
 8012246:	4618      	mov	r0, r3
 8012248:	f7ff ffde 	bl	8012208 <_ZN15tNMEA2000_STM3213CAN_message_tUt_C1Ev>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2208      	movs	r2, #8
 8012250:	721a      	strb	r2, [r3, #8]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	3309      	adds	r3, #9
 8012256:	2200      	movs	r2, #0
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	605a      	str	r2, [r3, #4]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10tValueSlotC1Ev>:
  struct tValueSlot {
 8012266:	b580      	push	{r7, lr}
 8012268:	b082      	sub	sp, #8
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4618      	mov	r0, r3
 8012272:	f7ff ffdf 	bl	8012234 <_ZN15tNMEA2000_STM3213CAN_message_tC1Ev>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4618      	mov	r0, r3
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>:
tPriorityRingBuffer<T>::tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities) : 
 8012280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	807b      	strh	r3, [r7, #2]
 801228c:	4613      	mov	r3, r2
 801228e:	707b      	strb	r3, [r7, #1]
    head(0), tail(0), size(_size), maxPriorities(_maxPriorities) {
 8012290:	4a2e      	ldr	r2, [pc, #184]	; (801234c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xcc>)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	601a      	str	r2, [r3, #0]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	809a      	strh	r2, [r3, #4]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	80da      	strh	r2, [r3, #6]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	887a      	ldrh	r2, [r7, #2]
 80122a6:	811a      	strh	r2, [r3, #8]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	787a      	ldrb	r2, [r7, #1]
 80122ac:	729a      	strb	r2, [r3, #10]
  if ( size<3 ) size=3;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	891b      	ldrh	r3, [r3, #8]
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	d802      	bhi.n	80122bc <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x3c>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2203      	movs	r2, #3
 80122ba:	811a      	strh	r2, [r3, #8]
  if ( maxPriorities<1 ) maxPriorities=1;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	7a9b      	ldrb	r3, [r3, #10]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x4a>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2201      	movs	r2, #1
 80122c8:	729a      	strb	r2, [r3, #10]
  buffer=new tValueSlot[size];
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	891b      	ldrh	r3, [r3, #8]
 80122ce:	461c      	mov	r4, r3
 80122d0:	4b1f      	ldr	r3, [pc, #124]	; (8012350 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xd0>)
 80122d2:	429c      	cmp	r4, r3
 80122d4:	d804      	bhi.n	80122e0 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x60>
 80122d6:	4623      	mov	r3, r4
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	4423      	add	r3, r4
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	e001      	b.n	80122e4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x64>
 80122e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122e4:	4618      	mov	r0, r3
 80122e6:	f002 fca6 	bl	8014c36 <_Znaj>
 80122ea:	4603      	mov	r3, r0
 80122ec:	461e      	mov	r6, r3
 80122ee:	4635      	mov	r5, r6
 80122f0:	1e63      	subs	r3, r4, #1
 80122f2:	461c      	mov	r4, r3
 80122f4:	2c00      	cmp	r4, #0
 80122f6:	db05      	blt.n	8012304 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x84>
 80122f8:	4628      	mov	r0, r5
 80122fa:	f7ff ffb4 	bl	8012266 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10tValueSlotC1Ev>
 80122fe:	3518      	adds	r5, #24
 8012300:	3c01      	subs	r4, #1
 8012302:	e7f7      	b.n	80122f4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x74>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	60de      	str	r6, [r3, #12]
  priorityReferencies=new tPriorityRef[maxPriorities];
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	7a9b      	ldrb	r3, [r3, #10]
 801230c:	461c      	mov	r4, r3
 801230e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012312:	429c      	cmp	r4, r3
 8012314:	d201      	bcs.n	801231a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x9a>
 8012316:	00a3      	lsls	r3, r4, #2
 8012318:	e001      	b.n	801231e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x9e>
 801231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801231e:	4618      	mov	r0, r3
 8012320:	f002 fc89 	bl	8014c36 <_Znaj>
 8012324:	4603      	mov	r3, r0
 8012326:	461e      	mov	r6, r3
 8012328:	4635      	mov	r5, r6
 801232a:	1e63      	subs	r3, r4, #1
 801232c:	461c      	mov	r4, r3
 801232e:	2c00      	cmp	r4, #0
 8012330:	db05      	blt.n	801233e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xbe>
 8012332:	4628      	mov	r0, r5
 8012334:	f000 f8a6 	bl	8012484 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE12tPriorityRefC1Ev>
 8012338:	3504      	adds	r5, #4
 801233a:	3c01      	subs	r4, #1
 801233c:	e7f7      	b.n	801232e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xae>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	611e      	str	r6, [r3, #16]
}
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	4618      	mov	r0, r3
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801234c:	08015690 	.word	0x08015690
 8012350:	05555555 	.word	0x05555555

08012354 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>:
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t _priority) {
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	460b      	mov	r3, r1
 801235e:	70fb      	strb	r3, [r7, #3]
  const T *ret=0;
 8012360:	2300      	movs	r3, #0
 8012362:	60fb      	str	r3, [r7, #12]
  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	7a9b      	ldrb	r3, [r3, #10]
 8012368:	78fa      	ldrb	r2, [r7, #3]
 801236a:	429a      	cmp	r2, r3
 801236c:	d303      	bcc.n	8012376 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x22>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	7a9b      	ldrb	r3, [r3, #10]
 8012372:	3b01      	subs	r3, #1
 8012374:	70fb      	strb	r3, [r7, #3]
  uint16_t ref=priorityReferencies[_priority].next;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	691a      	ldr	r2, [r3, #16]
 801237a:	78fb      	ldrb	r3, [r7, #3]
 801237c:	009b      	lsls	r3, r3, #2
 801237e:	4413      	add	r3, r2
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	817b      	strh	r3, [r7, #10]
  if ( ref==INVALID_RING_REF ) {
 8012384:	897b      	ldrh	r3, [r7, #10]
 8012386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801238a:	4293      	cmp	r3, r2
 801238c:	d101      	bne.n	8012392 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x3e>
    return ret;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	e06a      	b.n	8012468 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x114>
  ret=&(buffer[ref].Value);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	68d9      	ldr	r1, [r3, #12]
 8012396:	897a      	ldrh	r2, [r7, #10]
 8012398:	4613      	mov	r3, r2
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	4413      	add	r3, r2
 801239e:	00db      	lsls	r3, r3, #3
 80123a0:	440b      	add	r3, r1
 80123a2:	60fb      	str	r3, [r7, #12]
  priorityReferencies[_priority].next=buffer[ref].next;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68d9      	ldr	r1, [r3, #12]
 80123a8:	897a      	ldrh	r2, [r7, #10]
 80123aa:	4613      	mov	r3, r2
 80123ac:	005b      	lsls	r3, r3, #1
 80123ae:	4413      	add	r3, r2
 80123b0:	00db      	lsls	r3, r3, #3
 80123b2:	18ca      	adds	r2, r1, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6919      	ldr	r1, [r3, #16]
 80123b8:	78fb      	ldrb	r3, [r7, #3]
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	440b      	add	r3, r1
 80123be:	8a92      	ldrh	r2, [r2, #20]
 80123c0:	801a      	strh	r2, [r3, #0]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	691a      	ldr	r2, [r3, #16]
 80123c6:	78fb      	ldrb	r3, [r7, #3]
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	4413      	add	r3, r2
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d107      	bne.n	80123e6 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x92>
    priorityReferencies[_priority].last=INVALID_RING_REF;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	691a      	ldr	r2, [r3, #16]
 80123da:	78fb      	ldrb	r3, [r7, #3]
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123e4:	805a      	strh	r2, [r3, #2]
  if ( ref==tail ) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	88db      	ldrh	r3, [r3, #6]
 80123ea:	897a      	ldrh	r2, [r7, #10]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d12f      	bne.n	8012450 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
    for ( tail = (tail + 1) % size; tail!=head && buffer[tail].next==INVALID_RING_REF; tail = (tail + 1) % size );
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	88db      	ldrh	r3, [r3, #6]
 80123f4:	3301      	adds	r3, #1
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	8912      	ldrh	r2, [r2, #8]
 80123fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80123fe:	fb01 f202 	mul.w	r2, r1, r2
 8012402:	1a9b      	subs	r3, r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	80da      	strh	r2, [r3, #6]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	88da      	ldrh	r2, [r3, #6]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	889b      	ldrh	r3, [r3, #4]
 8012412:	429a      	cmp	r2, r3
 8012414:	d01c      	beq.n	8012450 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	68da      	ldr	r2, [r3, #12]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	88db      	ldrh	r3, [r3, #6]
 801241e:	4619      	mov	r1, r3
 8012420:	460b      	mov	r3, r1
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	440b      	add	r3, r1
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	4413      	add	r3, r2
 801242a:	8a9b      	ldrh	r3, [r3, #20]
 801242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012430:	4293      	cmp	r3, r2
 8012432:	d10d      	bne.n	8012450 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	88db      	ldrh	r3, [r3, #6]
 8012438:	3301      	adds	r3, #1
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	8912      	ldrh	r2, [r2, #8]
 801243e:	fb93 f1f2 	sdiv	r1, r3, r2
 8012442:	fb01 f202 	mul.w	r2, r1, r2
 8012446:	1a9b      	subs	r3, r3, r2
 8012448:	b29a      	uxth	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	80da      	strh	r2, [r3, #6]
 801244e:	e7dc      	b.n	801240a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xb6>
  buffer[ref].next=INVALID_RING_REF; // Release slot
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	68d9      	ldr	r1, [r3, #12]
 8012454:	897a      	ldrh	r2, [r7, #10]
 8012456:	4613      	mov	r3, r2
 8012458:	005b      	lsls	r3, r3, #1
 801245a:	4413      	add	r3, r2
 801245c:	00db      	lsls	r3, r3, #3
 801245e:	440b      	add	r3, r1
 8012460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012464:	829a      	strh	r2, [r3, #20]
  return ret;
 8012466:	68fb      	ldr	r3, [r7, #12]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3714      	adds	r7, #20
 801246c:	46bd      	mov	sp, r7
 801246e:	bc80      	pop	{r7}
 8012470:	4770      	bx	lr

08012472 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE5cleanEv>:
void tPriorityRingBuffer<T>::clean() {
 8012472:	b480      	push	{r7}
 8012474:	b083      	sub	sp, #12
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
}
 801247a:	bf00      	nop
 801247c:	370c      	adds	r7, #12
 801247e:	46bd      	mov	sp, r7
 8012480:	bc80      	pop	{r7}
 8012482:	4770      	bx	lr

08012484 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE12tPriorityRefC1Ev>:
    tPriorityRef() : next(INVALID_RING_REF), last(INVALID_RING_REF) {;}
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012492:	801a      	strh	r2, [r3, #0]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801249a:	805a      	strh	r2, [r3, #2]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	4618      	mov	r0, r3
 80124a0:	370c      	adds	r7, #12
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bc80      	pop	{r7}
 80124a6:	4770      	bx	lr

080124a8 <__NVIC_SystemReset>:
{
 80124a8:	b480      	push	{r7}
 80124aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80124ac:	f3bf 8f4f 	dsb	sy
}
 80124b0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80124b2:	4b06      	ldr	r3, [pc, #24]	; (80124cc <__NVIC_SystemReset+0x24>)
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80124ba:	4904      	ldr	r1, [pc, #16]	; (80124cc <__NVIC_SystemReset+0x24>)
 80124bc:	4b04      	ldr	r3, [pc, #16]	; (80124d0 <__NVIC_SystemReset+0x28>)
 80124be:	4313      	orrs	r3, r2
 80124c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80124c2:	f3bf 8f4f 	dsb	sy
}
 80124c6:	bf00      	nop
    __NOP();
 80124c8:	bf00      	nop
 80124ca:	e7fd      	b.n	80124c8 <__NVIC_SystemReset+0x20>
 80124cc:	e000ed00 	.word	0xe000ed00
 80124d0:	05fa0004 	.word	0x05fa0004

080124d4 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	460b      	mov	r3, r1
 80124de:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80124e0:	f240 401c 	movw	r0, #1052	; 0x41c
 80124e4:	f002 fb50 	bl	8014b88 <USBD_static_malloc>
 80124e8:	4602      	mov	r2, r0
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d101      	bne.n	80124fe <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 80124fa:	2302      	movs	r3, #2
 80124fc:	e03f      	b.n	801257e <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012504:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2200      	movs	r2, #0
 801250a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012514:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	2200      	movs	r2, #0
 801251c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2200      	movs	r2, #0
 8012524:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2200      	movs	r2, #0
 801252c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2202      	movs	r2, #2
 8012534:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2200      	movs	r2, #0
 801253c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2200      	movs	r2, #0
 8012544:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2200      	movs	r2, #0
 801254c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2200      	movs	r2, #0
 8012554:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2202      	movs	r2, #2
 801255c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2200      	movs	r2, #0
 8012564:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	4798      	blx	r3
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8012578:	2302      	movs	r3, #2
 801257a:	e000      	b.n	801257e <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3710      	adds	r7, #16
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8012586:	b580      	push	{r7, lr}
 8012588:	b084      	sub	sp, #16
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
 801258e:	460b      	mov	r3, r1
 8012590:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012598:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2200      	movs	r2, #0
 80125a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2202      	movs	r2, #2
 80125ae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2200      	movs	r2, #0
 80125b6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2202      	movs	r2, #2
 80125be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d00e      	beq.n	80125ea <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125d2:	689b      	ldr	r3, [r3, #8]
 80125d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125dc:	4618      	mov	r0, r3
 80125de:	f002 fadf 	bl	8014ba0 <USBD_static_free>
    pdev->pClassData = NULL;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80125ea:	2300      	movs	r3, #0
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b086      	sub	sp, #24
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 80125fe:	2300      	movs	r3, #0
 8012600:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8012602:	2300      	movs	r3, #0
 8012604:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8012606:	2300      	movs	r3, #0
 8012608:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 801260a:	2300      	movs	r3, #0
 801260c:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012614:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801261e:	2b00      	cmp	r3, #0
 8012620:	d03f      	beq.n	80126a2 <USBD_DFU_Setup+0xae>
 8012622:	2b20      	cmp	r3, #32
 8012624:	f040 80c2 	bne.w	80127ac <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	785b      	ldrb	r3, [r3, #1]
 801262c:	2b06      	cmp	r3, #6
 801262e:	d830      	bhi.n	8012692 <USBD_DFU_Setup+0x9e>
 8012630:	a201      	add	r2, pc, #4	; (adr r2, 8012638 <USBD_DFU_Setup+0x44>)
 8012632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012636:	bf00      	nop
 8012638:	08012689 	.word	0x08012689
 801263c:	08012655 	.word	0x08012655
 8012640:	0801265f 	.word	0x0801265f
 8012644:	08012669 	.word	0x08012669
 8012648:	08012671 	.word	0x08012671
 801264c:	08012679 	.word	0x08012679
 8012650:	08012681 	.word	0x08012681
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 fa8e 	bl	8012b78 <DFU_Download>
          break;
 801265c:	e020      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 faf3 	bl	8012c4c <DFU_Upload>
          break;
 8012666:	e01b      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 fbc7 	bl	8012dfc <DFU_GetStatus>
          break;
 801266e:	e017      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 fc75 	bl	8012f60 <DFU_ClearStatus>
          break;
 8012676:	e013      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fcc0 	bl	8012ffe <DFU_GetState>
          break;
 801267e:	e00f      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 fcd0 	bl	8013026 <DFU_Abort>
          break;
 8012686:	e00b      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8012688:	6839      	ldr	r1, [r7, #0]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f000 fa14 	bl	8012ab8 <DFU_Detach>
          break;
 8012690:	e006      	b.n	80126a0 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f001 fd6e 	bl	8014176 <USBD_CtlError>
          ret = USBD_FAIL;
 801269a:	2302      	movs	r3, #2
 801269c:	747b      	strb	r3, [r7, #17]
          break;
 801269e:	bf00      	nop
      }
      break;
 80126a0:	e08b      	b.n	80127ba <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	785b      	ldrb	r3, [r3, #1]
 80126a6:	2b0b      	cmp	r3, #11
 80126a8:	d878      	bhi.n	801279c <USBD_DFU_Setup+0x1a8>
 80126aa:	a201      	add	r2, pc, #4	; (adr r2, 80126b0 <USBD_DFU_Setup+0xbc>)
 80126ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b0:	080126e1 	.word	0x080126e1
 80126b4:	0801279d 	.word	0x0801279d
 80126b8:	0801279d 	.word	0x0801279d
 80126bc:	0801279d 	.word	0x0801279d
 80126c0:	0801279d 	.word	0x0801279d
 80126c4:	0801279d 	.word	0x0801279d
 80126c8:	08012709 	.word	0x08012709
 80126cc:	0801279d 	.word	0x0801279d
 80126d0:	0801279d 	.word	0x0801279d
 80126d4:	0801279d 	.word	0x0801279d
 80126d8:	08012733 	.word	0x08012733
 80126dc:	0801275d 	.word	0x0801275d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	d107      	bne.n	80126fa <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80126ea:	f107 030a 	add.w	r3, r7, #10
 80126ee:	2202      	movs	r2, #2
 80126f0:	4619      	mov	r1, r3
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f001 fda9 	bl	801424a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80126f8:	e057      	b.n	80127aa <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f001 fd3a 	bl	8014176 <USBD_CtlError>
            ret = USBD_FAIL;
 8012702:	2302      	movs	r3, #2
 8012704:	747b      	strb	r3, [r7, #17]
          break;
 8012706:	e050      	b.n	80127aa <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	885b      	ldrh	r3, [r3, #2]
 801270c:	0a1b      	lsrs	r3, r3, #8
 801270e:	b29b      	uxth	r3, r3
 8012710:	2b21      	cmp	r3, #33	; 0x21
 8012712:	d107      	bne.n	8012724 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8012714:	4b2b      	ldr	r3, [pc, #172]	; (80127c4 <USBD_DFU_Setup+0x1d0>)
 8012716:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	88db      	ldrh	r3, [r3, #6]
 801271c:	2b09      	cmp	r3, #9
 801271e:	bf28      	it	cs
 8012720:	2309      	movcs	r3, #9
 8012722:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8012724:	8a7b      	ldrh	r3, [r7, #18]
 8012726:	461a      	mov	r2, r3
 8012728:	6979      	ldr	r1, [r7, #20]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f001 fd8d 	bl	801424a <USBD_CtlSendData>
          break;
 8012730:	e03b      	b.n	80127aa <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012738:	2b03      	cmp	r3, #3
 801273a:	d108      	bne.n	801274e <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012742:	2201      	movs	r2, #1
 8012744:	4619      	mov	r1, r3
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f001 fd7f 	bl	801424a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801274c:	e02d      	b.n	80127aa <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f001 fd10 	bl	8014176 <USBD_CtlError>
            ret = USBD_FAIL;
 8012756:	2302      	movs	r3, #2
 8012758:	747b      	strb	r3, [r7, #17]
          break;
 801275a:	e026      	b.n	80127aa <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	885b      	ldrh	r3, [r3, #2]
 8012760:	b2db      	uxtb	r3, r3
 8012762:	2b00      	cmp	r3, #0
 8012764:	d113      	bne.n	801278e <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801276c:	2b03      	cmp	r3, #3
 801276e:	d107      	bne.n	8012780 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	885b      	ldrh	r3, [r3, #2]
 8012774:	b2db      	uxtb	r3, r3
 8012776:	461a      	mov	r2, r3
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801277e:	e014      	b.n	80127aa <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f001 fcf7 	bl	8014176 <USBD_CtlError>
              ret = USBD_FAIL;
 8012788:	2302      	movs	r3, #2
 801278a:	747b      	strb	r3, [r7, #17]
          break;
 801278c:	e00d      	b.n	80127aa <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 801278e:	6839      	ldr	r1, [r7, #0]
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f001 fcf0 	bl	8014176 <USBD_CtlError>
            ret = USBD_FAIL;
 8012796:	2302      	movs	r3, #2
 8012798:	747b      	strb	r3, [r7, #17]
          break;
 801279a:	e006      	b.n	80127aa <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 801279c:	6839      	ldr	r1, [r7, #0]
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f001 fce9 	bl	8014176 <USBD_CtlError>
          ret = USBD_FAIL;
 80127a4:	2302      	movs	r3, #2
 80127a6:	747b      	strb	r3, [r7, #17]
          break;
 80127a8:	bf00      	nop
      }
      break;
 80127aa:	e006      	b.n	80127ba <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 80127ac:	6839      	ldr	r1, [r7, #0]
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f001 fce1 	bl	8014176 <USBD_CtlError>
      ret = USBD_FAIL;
 80127b4:	2302      	movs	r3, #2
 80127b6:	747b      	strb	r3, [r7, #17]
      break;
 80127b8:	bf00      	nop
  }

  return ret;
 80127ba:	7c7b      	ldrb	r3, [r7, #17]
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3718      	adds	r7, #24
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	200000a6 	.word	0x200000a6

080127c8 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	221b      	movs	r2, #27
 80127d4:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 80127d6:	4b03      	ldr	r3, [pc, #12]	; (80127e4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	bc80      	pop	{r7}
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	20000094 	.word	0x20000094

080127e8 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	460b      	mov	r3, r1
 80127f2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80127f4:	2300      	movs	r3, #0
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bc80      	pop	{r7}
 80127fe:	4770      	bx	lr

08012800 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	bc80      	pop	{r7}
 8012812:	4770      	bx	lr

08012814 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b086      	sub	sp, #24
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012822:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801282a:	2b04      	cmp	r3, #4
 801282c:	f040 80ca 	bne.w	80129c4 <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8012836:	2b00      	cmp	r3, #0
 8012838:	f040 8086 	bne.w	8012948 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d105      	bne.n	8012850 <USBD_DFU_EP0_TxReady+0x3c>
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801284a:	2b01      	cmp	r3, #1
 801284c:	f000 809a 	beq.w	8012984 <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2b21      	cmp	r3, #33	; 0x21
 8012856:	d129      	bne.n	80128ac <USBD_DFU_EP0_TxReady+0x98>
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801285e:	2b05      	cmp	r3, #5
 8012860:	d124      	bne.n	80128ac <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	785b      	ldrb	r3, [r3, #1]
 8012866:	461a      	mov	r2, r3
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	789b      	ldrb	r3, [r3, #2]
 8012878:	021b      	lsls	r3, r3, #8
 801287a:	441a      	add	r2, r3
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	78db      	ldrb	r3, [r3, #3]
 801288c:	041b      	lsls	r3, r3, #16
 801288e:	441a      	add	r2, r3
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	791b      	ldrb	r3, [r3, #4]
 80128a0:	061b      	lsls	r3, r3, #24
 80128a2:	441a      	add	r2, r3
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80128aa:	e06b      	b.n	8012984 <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	2b41      	cmp	r3, #65	; 0x41
 80128b2:	d136      	bne.n	8012922 <USBD_DFU_EP0_TxReady+0x10e>
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ba:	2b05      	cmp	r3, #5
 80128bc:	d131      	bne.n	8012922 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	785b      	ldrb	r3, [r3, #1]
 80128c2:	461a      	mov	r2, r3
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	789b      	ldrb	r3, [r3, #2]
 80128d4:	021b      	lsls	r3, r3, #8
 80128d6:	441a      	add	r2, r3
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	78db      	ldrb	r3, [r3, #3]
 80128e8:	041b      	lsls	r3, r3, #16
 80128ea:	441a      	add	r2, r3
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	791b      	ldrb	r3, [r3, #4]
 80128fc:	061b      	lsls	r3, r3, #24
 80128fe:	441a      	add	r2, r3
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8012914:	4610      	mov	r0, r2
 8012916:	4798      	blx	r3
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d032      	beq.n	8012984 <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 801291e:	2302      	movs	r3, #2
 8012920:	e059      	b.n	80129d6 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	2200      	movs	r2, #0
 8012926:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	2200      	movs	r2, #0
 801292e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8012932:	2300      	movs	r3, #0
 8012934:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8012936:	2301      	movs	r3, #1
 8012938:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 801293a:	f107 0308 	add.w	r3, r7, #8
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f001 fc18 	bl	8014176 <USBD_CtlError>
 8012946:	e01d      	b.n	8012984 <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801294e:	2b01      	cmp	r3, #1
 8012950:	d918      	bls.n	8012984 <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8012958:	3b02      	subs	r3, #2
 801295a:	029a      	lsls	r2, r3, #10
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8012962:	4413      	add	r3, r2
 8012964:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801296c:	691b      	ldr	r3, [r3, #16]
 801296e:	6978      	ldr	r0, [r7, #20]
 8012970:	6939      	ldr	r1, [r7, #16]
 8012972:	697a      	ldr	r2, [r7, #20]
 8012974:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8012978:	4798      	blx	r3
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d001      	beq.n	8012984 <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8012980:	2302      	movs	r3, #2
 8012982:	e028      	b.n	80129d6 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	2200      	movs	r2, #0
 8012988:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	2200      	movs	r2, #0
 8012990:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	2203      	movs	r2, #3
 8012998:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	2200      	movs	r2, #0
 80129a0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	2200      	movs	r2, #0
 80129a8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 80129c0:	2300      	movs	r3, #0
 80129c2:	e008      	b.n	80129d6 <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80129ca:	2b07      	cmp	r3, #7
 80129cc:	d102      	bne.n	80129d4 <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 fb76 	bl	80130c0 <DFU_Leave>
    }
  }

  return USBD_OK;
 80129d4:	2300      	movs	r3, #0
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3718      	adds	r7, #24
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80129de:	b480      	push	{r7}
 80129e0:	b083      	sub	sp, #12
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bc80      	pop	{r7}
 80129f0:	4770      	bx	lr

080129f2 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	460b      	mov	r3, r1
 80129fc:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bc80      	pop	{r7}
 8012a08:	4770      	bx	lr

08012a0a <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012a0a:	b480      	push	{r7}
 8012a0c:	b083      	sub	sp, #12
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
 8012a12:	460b      	mov	r3, r1
 8012a14:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8012a16:	2300      	movs	r3, #0
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	370c      	adds	r7, #12
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bc80      	pop	{r7}
 8012a20:	4770      	bx	lr

08012a22 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8012a22:	b480      	push	{r7}
 8012a24:	b083      	sub	sp, #12
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8012a2e:	2300      	movs	r3, #0
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bc80      	pop	{r7}
 8012a38:	4770      	bx	lr
	...

08012a3c <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b083      	sub	sp, #12
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	220a      	movs	r2, #10
 8012a48:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8012a4a:	4b03      	ldr	r3, [pc, #12]	; (8012a58 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bc80      	pop	{r7}
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	200000b0 	.word	0x200000b0

08012a5c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	460b      	mov	r3, r1
 8012a66:	607a      	str	r2, [r7, #4]
 8012a68:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8012a6a:	7afb      	ldrb	r3, [r7, #11]
 8012a6c:	2b06      	cmp	r3, #6
 8012a6e:	d80a      	bhi.n	8012a86 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	4905      	ldr	r1, [pc, #20]	; (8012a90 <USBD_DFU_GetUsrStringDesc+0x34>)
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f001 fb8b 	bl	8014198 <USBD_GetString>
    return USBD_StrDesc;
 8012a82:	4b03      	ldr	r3, [pc, #12]	; (8012a90 <USBD_DFU_GetUsrStringDesc+0x34>)
 8012a84:	e000      	b.n	8012a88 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8012a86:	2300      	movs	r3, #0
  }
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	2000036c 	.word	0x2000036c

08012a94 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d003      	beq.n	8012aac <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	683a      	ldr	r2, [r7, #0]
 8012aa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	370c      	adds	r7, #12
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bc80      	pop	{r7}
 8012ab6:	4770      	bx	lr

08012ab8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ac8:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	d013      	beq.n	8012afc <DFU_Detach+0x44>
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	d00e      	beq.n	8012afc <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012ae4:	2b05      	cmp	r3, #5
 8012ae6:	d009      	beq.n	8012afc <DFU_Detach+0x44>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012aee:	2b06      	cmp	r3, #6
 8012af0:	d004      	beq.n	8012afc <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012af8:	2b09      	cmp	r3, #9
 8012afa:	d125      	bne.n	8012b48 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2202      	movs	r2, #2
 8012b00:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	2200      	movs	r2, #0
 8012b34:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2200      	movs	r2, #0
 8012b44:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8012b48:	4b0a      	ldr	r3, [pc, #40]	; (8012b74 <DFU_Detach+0xbc>)
 8012b4a:	7d5b      	ldrb	r3, [r3, #21]
 8012b4c:	f003 0310 	and.w	r3, r3, #16
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d006      	beq.n	8012b62 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 fb51 	bl	80131fc <USBD_Stop>
    USBD_Start(pdev);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f000 fb42 	bl	80131e4 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8012b60:	e004      	b.n	8012b6c <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	885b      	ldrh	r3, [r3, #2]
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7ef f9d6 	bl	8001f18 <HAL_Delay>
}
 8012b6c:	bf00      	nop
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	20000094 	.word	0x20000094

08012b78 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b88:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	88db      	ldrh	r3, [r3, #6]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d02e      	beq.n	8012bf0 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d004      	beq.n	8012ba6 <DFU_Download+0x2e>
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012ba2:	2b05      	cmp	r3, #5
 8012ba4:	d11f      	bne.n	8012be6 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	885b      	ldrh	r3, [r3, #2]
 8012baa:	461a      	mov	r2, r3
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	88db      	ldrh	r3, [r3, #6]
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2203      	movs	r2, #3
 8012bc2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8012bd2:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	461a      	mov	r2, r3
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f001 fb61 	bl	80142a6 <USBD_CtlPrepareRx>
 8012be4:	e02e      	b.n	8012c44 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8012be6:	6839      	ldr	r1, [r7, #0]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f001 fac4 	bl	8014176 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8012bee:	e029      	b.n	8012c44 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012bf6:	2b05      	cmp	r3, #5
 8012bf8:	d004      	beq.n	8012c04 <DFU_Download+0x8c>
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012c00:	2b02      	cmp	r3, #2
 8012c02:	d11a      	bne.n	8012c3a <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2201      	movs	r2, #1
 8012c08:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2206      	movs	r2, #6
 8012c10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2200      	movs	r2, #0
 8012c18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2200      	movs	r2, #0
 8012c28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8012c38:	e004      	b.n	8012c44 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 8012c3a:	6839      	ldr	r1, [r7, #0]
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f001 fa9a 	bl	8014176 <USBD_CtlError>
}
 8012c42:	e7ff      	b.n	8012c44 <DFU_Download+0xcc>
 8012c44:	bf00      	nop
 8012c46:	3710      	adds	r7, #16
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c5c:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 8012c62:	2300      	movs	r3, #0
 8012c64:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	88db      	ldrh	r3, [r3, #6]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f000 80ab 	beq.w	8012dc6 <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012c76:	2b02      	cmp	r3, #2
 8012c78:	d005      	beq.n	8012c86 <DFU_Upload+0x3a>
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012c80:	2b09      	cmp	r3, #9
 8012c82:	f040 8093 	bne.w	8012dac <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	885b      	ldrh	r3, [r3, #2]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	88db      	ldrh	r3, [r3, #6]
 8012c96:	461a      	mov	r2, r3
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d12c      	bne.n	8012d02 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012cae:	2b03      	cmp	r3, #3
 8012cb0:	d901      	bls.n	8012cb6 <DFU_Upload+0x6a>
 8012cb2:	2202      	movs	r2, #2
 8012cb4:	e000      	b.n	8012cb8 <DFU_Upload+0x6c>
 8012cb6:	2209      	movs	r2, #9
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	2221      	movs	r2, #33	; 0x21
 8012cec:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	2241      	movs	r2, #65	; 0x41
 8012cf2:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	2203      	movs	r2, #3
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f001 faa5 	bl	801424a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8012d00:	e078      	b.n	8012df4 <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d934      	bls.n	8012d76 <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	2209      	movs	r2, #9
 8012d10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	2200      	movs	r2, #0
 8012d18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	2200      	movs	r2, #0
 8012d28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8012d3e:	3b02      	subs	r3, #2
 8012d40:	029a      	lsls	r2, r3, #10
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8012d48:	4413      	add	r3, r2
 8012d4a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d52:	695b      	ldr	r3, [r3, #20]
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	6979      	ldr	r1, [r7, #20]
 8012d58:	697a      	ldr	r2, [r7, #20]
 8012d5a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8012d5e:	4798      	blx	r3
 8012d60:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	6939      	ldr	r1, [r7, #16]
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f001 fa6b 	bl	801424a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8012d74:	e03e      	b.n	8012df4 <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	220f      	movs	r2, #15
 8012d7a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	2200      	movs	r2, #0
 8012d82:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	2200      	movs	r2, #0
 8012d92:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8012da2:	6839      	ldr	r1, [r7, #0]
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f001 f9e6 	bl	8014176 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8012daa:	e023      	b.n	8012df4 <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	2200      	movs	r2, #0
 8012db0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	2200      	movs	r2, #0
 8012db8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8012dbc:	6839      	ldr	r1, [r7, #0]
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f001 f9d9 	bl	8014176 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8012dc4:	e016      	b.n	8012df4 <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2202      	movs	r2, #2
 8012dca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	2200      	movs	r2, #0
 8012de2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8012df2:	e7ff      	b.n	8012df4 <DFU_Upload+0x1a8>
 8012df4:	bf00      	nop
 8012df6:	3718      	adds	r7, #24
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e0a:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012e12:	2b03      	cmp	r3, #3
 8012e14:	d002      	beq.n	8012e1c <DFU_GetStatus+0x20>
 8012e16:	2b06      	cmp	r3, #6
 8012e18:	d055      	beq.n	8012ec6 <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 8012e1a:	e092      	b.n	8012f42 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d038      	beq.n	8012e98 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2204      	movs	r2, #4
 8012e2a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2200      	movs	r2, #0
 8012e32:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2200      	movs	r2, #0
 8012e42:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d110      	bne.n	8012e7e <DFU_GetStatus+0x82>
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	2b41      	cmp	r3, #65	; 0x41
 8012e62:	d10c      	bne.n	8012e7e <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e6a:	699b      	ldr	r3, [r3, #24]
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8012e78:	2100      	movs	r1, #0
 8012e7a:	4798      	blx	r3
      break;
 8012e7c:	e061      	b.n	8012f42 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e84:	699b      	ldr	r3, [r3, #24]
 8012e86:	68fa      	ldr	r2, [r7, #12]
 8012e88:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8012e8c:	68fa      	ldr	r2, [r7, #12]
 8012e8e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8012e92:	2101      	movs	r1, #1
 8012e94:	4798      	blx	r3
      break;
 8012e96:	e054      	b.n	8012f42 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2205      	movs	r2, #5
 8012e9c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8012ec4:	e03d      	b.n	8012f42 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d116      	bne.n	8012efe <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2207      	movs	r2, #7
 8012ed4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	2201      	movs	r2, #1
 8012edc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2200      	movs	r2, #0
 8012eec:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8012efc:	e020      	b.n	8012f40 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d11b      	bne.n	8012f40 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8012f08:	4b14      	ldr	r3, [pc, #80]	; (8012f5c <DFU_GetStatus+0x160>)
 8012f0a:	7d1b      	ldrb	r3, [r3, #20]
 8012f0c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d015      	beq.n	8012f40 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2202      	movs	r2, #2
 8012f18:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2200      	movs	r2, #0
 8012f28:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8012f40:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012f48:	2206      	movs	r2, #6
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f001 f97c 	bl	801424a <USBD_CtlSendData>
}
 8012f52:	bf00      	nop
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20000094 	.word	0x20000094

08012f60 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f6e:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012f76:	2b0a      	cmp	r3, #10
 8012f78:	d11e      	bne.n	8012fb8 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2202      	movs	r2, #2
 8012f7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2200      	movs	r2, #0
 8012f86:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2200      	movs	r2, #0
 8012f96:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8012fb6:	e01d      	b.n	8012ff4 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	220a      	movs	r2, #10
 8012fbc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	220e      	movs	r2, #14
 8012fc4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8012ff4:	bf00      	nop
 8012ff6:	3714      	adds	r7, #20
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bc80      	pop	{r7}
 8012ffc:	4770      	bx	lr

08012ffe <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b084      	sub	sp, #16
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801300c:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8013014:	2201      	movs	r2, #1
 8013016:	4619      	mov	r1, r3
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f001 f916 	bl	801424a <USBD_CtlSendData>
}
 801301e:	bf00      	nop
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8013026:	b480      	push	{r7}
 8013028:	b085      	sub	sp, #20
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013034:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801303c:	2b02      	cmp	r3, #2
 801303e:	d013      	beq.n	8013068 <DFU_Abort+0x42>
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013046:	2b03      	cmp	r3, #3
 8013048:	d00e      	beq.n	8013068 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013050:	2b05      	cmp	r3, #5
 8013052:	d009      	beq.n	8013068 <DFU_Abort+0x42>
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801305a:	2b06      	cmp	r3, #6
 801305c:	d004      	beq.n	8013068 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013064:	2b09      	cmp	r3, #9
 8013066:	d125      	bne.n	80130b4 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2202      	movs	r2, #2
 801306c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2200      	movs	r2, #0
 8013074:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2200      	movs	r2, #0
 801307c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2200      	movs	r2, #0
 8013084:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2200      	movs	r2, #0
 801308c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2200      	movs	r2, #0
 80130a0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2200      	movs	r2, #0
 80130a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2200      	movs	r2, #0
 80130b0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 80130b4:	bf00      	nop
 80130b6:	3714      	adds	r7, #20
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bc80      	pop	{r7}
 80130bc:	4770      	bx	lr
	...

080130c0 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130ce:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2200      	movs	r2, #0
 80130d4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 80130d8:	4b1f      	ldr	r3, [pc, #124]	; (8013158 <DFU_Leave+0x98>)
 80130da:	7d1b      	ldrb	r3, [r3, #20]
 80130dc:	f003 0304 	and.w	r3, r3, #4
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d016      	beq.n	8013112 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2206      	movs	r2, #6
 80130e8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2200      	movs	r2, #0
 80130f0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	2200      	movs	r2, #0
 80130f8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2200      	movs	r2, #0
 8013100:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8013110:	e01f      	b.n	8013152 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2208      	movs	r2, #8
 8013116:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2200      	movs	r2, #0
 8013126:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2200      	movs	r2, #0
 801312e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 f85c 	bl	80131fc <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 801314e:	f7ff f9ab 	bl	80124a8 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	20000094 	.word	0x20000094

0801315c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	4613      	mov	r3, r2
 8013168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d101      	bne.n	8013174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013170:	2302      	movs	r3, #2
 8013172:	e01a      	b.n	80131aa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801317a:	2b00      	cmp	r3, #0
 801317c:	d003      	beq.n	8013186 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2200      	movs	r2, #0
 8013182:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d003      	beq.n	8013194 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	68ba      	ldr	r2, [r7, #8]
 8013190:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2201      	movs	r2, #1
 8013198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	79fa      	ldrb	r2, [r7, #7]
 80131a0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80131a2:	68f8      	ldr	r0, [r7, #12]
 80131a4:	f001 fb82 	bl	80148ac <USBD_LL_Init>

  return USBD_OK;
 80131a8:	2300      	movs	r3, #0
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80131b2:	b480      	push	{r7}
 80131b4:	b085      	sub	sp, #20
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80131bc:	2300      	movs	r3, #0
 80131be:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d006      	beq.n	80131d4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	683a      	ldr	r2, [r7, #0]
 80131ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80131ce:	2300      	movs	r3, #0
 80131d0:	73fb      	strb	r3, [r7, #15]
 80131d2:	e001      	b.n	80131d8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80131d4:	2302      	movs	r3, #2
 80131d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	bc80      	pop	{r7}
 80131e2:	4770      	bx	lr

080131e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f001 fba1 	bl	8014934 <USBD_LL_Start>

  return USBD_OK;
 80131f2:	2300      	movs	r3, #0
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	6852      	ldr	r2, [r2, #4]
 8013210:	b2d2      	uxtb	r2, r2
 8013212:	4611      	mov	r1, r2
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f001 fba6 	bl	801496a <USBD_LL_Stop>

  return USBD_OK;
 801321e:	2300      	movs	r3, #0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	370c      	adds	r7, #12
 8013236:	46bd      	mov	sp, r7
 8013238:	bc80      	pop	{r7}
 801323a:	4770      	bx	lr

0801323c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	460b      	mov	r3, r1
 8013246:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013248:	2302      	movs	r3, #2
 801324a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00c      	beq.n	8013270 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	78fa      	ldrb	r2, [r7, #3]
 8013260:	4611      	mov	r1, r2
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	4798      	blx	r3
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d101      	bne.n	8013270 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013270:	7bfb      	ldrb	r3, [r7, #15]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3710      	adds	r7, #16
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b082      	sub	sp, #8
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
 8013282:	460b      	mov	r3, r1
 8013284:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	78fa      	ldrb	r2, [r7, #3]
 8013290:	4611      	mov	r1, r2
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	4798      	blx	r3

  return USBD_OK;
 8013296:	2300      	movs	r3, #0
}
 8013298:	4618      	mov	r0, r3
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80132b0:	6839      	ldr	r1, [r7, #0]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f000 ff23 	bl	80140fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2201      	movs	r2, #1
 80132bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80132c6:	461a      	mov	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80132d4:	f003 031f 	and.w	r3, r3, #31
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d016      	beq.n	801330a <USBD_LL_SetupStage+0x6a>
 80132dc:	2b02      	cmp	r3, #2
 80132de:	d81c      	bhi.n	801331a <USBD_LL_SetupStage+0x7a>
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d002      	beq.n	80132ea <USBD_LL_SetupStage+0x4a>
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d008      	beq.n	80132fa <USBD_LL_SetupStage+0x5a>
 80132e8:	e017      	b.n	801331a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80132f0:	4619      	mov	r1, r3
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fa04 	bl	8013700 <USBD_StdDevReq>
      break;
 80132f8:	e01a      	b.n	8013330 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013300:	4619      	mov	r1, r3
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 fa66 	bl	80137d4 <USBD_StdItfReq>
      break;
 8013308:	e012      	b.n	8013330 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013310:	4619      	mov	r1, r3
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 faa6 	bl	8013864 <USBD_StdEPReq>
      break;
 8013318:	e00a      	b.n	8013330 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013324:	b2db      	uxtb	r3, r3
 8013326:	4619      	mov	r1, r3
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f001 fb5f 	bl	80149ec <USBD_LL_StallEP>
      break;
 801332e:	bf00      	nop
  }

  return USBD_OK;
 8013330:	2300      	movs	r3, #0
}
 8013332:	4618      	mov	r0, r3
 8013334:	3708      	adds	r7, #8
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b086      	sub	sp, #24
 801333e:	af00      	add	r7, sp, #0
 8013340:	60f8      	str	r0, [r7, #12]
 8013342:	460b      	mov	r3, r1
 8013344:	607a      	str	r2, [r7, #4]
 8013346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013348:	7afb      	ldrb	r3, [r7, #11]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d14b      	bne.n	80133e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013354:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801335c:	2b03      	cmp	r3, #3
 801335e:	d134      	bne.n	80133ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	68da      	ldr	r2, [r3, #12]
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	691b      	ldr	r3, [r3, #16]
 8013368:	429a      	cmp	r2, r3
 801336a:	d919      	bls.n	80133a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	68da      	ldr	r2, [r3, #12]
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	691b      	ldr	r3, [r3, #16]
 8013374:	1ad2      	subs	r2, r2, r3
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	68da      	ldr	r2, [r3, #12]
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013382:	429a      	cmp	r2, r3
 8013384:	d203      	bcs.n	801338e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801338a:	b29b      	uxth	r3, r3
 801338c:	e002      	b.n	8013394 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013392:	b29b      	uxth	r3, r3
 8013394:	461a      	mov	r2, r3
 8013396:	6879      	ldr	r1, [r7, #4]
 8013398:	68f8      	ldr	r0, [r7, #12]
 801339a:	f000 ffa2 	bl	80142e2 <USBD_CtlContinueRx>
 801339e:	e038      	b.n	8013412 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133a6:	691b      	ldr	r3, [r3, #16]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00a      	beq.n	80133c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80133b2:	2b03      	cmp	r3, #3
 80133b4:	d105      	bne.n	80133c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133bc:	691b      	ldr	r3, [r3, #16]
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f000 ff9f 	bl	8014306 <USBD_CtlSendStatus>
 80133c8:	e023      	b.n	8013412 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80133d0:	2b05      	cmp	r3, #5
 80133d2:	d11e      	bne.n	8013412 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2200      	movs	r2, #0
 80133d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80133dc:	2100      	movs	r1, #0
 80133de:	68f8      	ldr	r0, [r7, #12]
 80133e0:	f001 fb04 	bl	80149ec <USBD_LL_StallEP>
 80133e4:	e015      	b.n	8013412 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133ec:	699b      	ldr	r3, [r3, #24]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00d      	beq.n	801340e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80133f8:	2b03      	cmp	r3, #3
 80133fa:	d108      	bne.n	801340e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013402:	699b      	ldr	r3, [r3, #24]
 8013404:	7afa      	ldrb	r2, [r7, #11]
 8013406:	4611      	mov	r1, r2
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	4798      	blx	r3
 801340c:	e001      	b.n	8013412 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801340e:	2302      	movs	r3, #2
 8013410:	e000      	b.n	8013414 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013412:	2300      	movs	r3, #0
}
 8013414:	4618      	mov	r0, r3
 8013416:	3718      	adds	r7, #24
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b086      	sub	sp, #24
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	460b      	mov	r3, r1
 8013426:	607a      	str	r2, [r7, #4]
 8013428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801342a:	7afb      	ldrb	r3, [r7, #11]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d17f      	bne.n	8013530 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	3314      	adds	r3, #20
 8013434:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801343c:	2b02      	cmp	r3, #2
 801343e:	d15c      	bne.n	80134fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	68da      	ldr	r2, [r3, #12]
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	429a      	cmp	r2, r3
 801344a:	d915      	bls.n	8013478 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	68da      	ldr	r2, [r3, #12]
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	691b      	ldr	r3, [r3, #16]
 8013454:	1ad2      	subs	r2, r2, r3
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	b29b      	uxth	r3, r3
 8013460:	461a      	mov	r2, r3
 8013462:	6879      	ldr	r1, [r7, #4]
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f000 ff0c 	bl	8014282 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801346a:	2300      	movs	r3, #0
 801346c:	2200      	movs	r2, #0
 801346e:	2100      	movs	r1, #0
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f001 fb66 	bl	8014b42 <USBD_LL_PrepareReceive>
 8013476:	e04e      	b.n	8013516 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	689b      	ldr	r3, [r3, #8]
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	6912      	ldr	r2, [r2, #16]
 8013480:	fbb3 f1f2 	udiv	r1, r3, r2
 8013484:	fb01 f202 	mul.w	r2, r1, r2
 8013488:	1a9b      	subs	r3, r3, r2
 801348a:	2b00      	cmp	r3, #0
 801348c:	d11c      	bne.n	80134c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	689a      	ldr	r2, [r3, #8]
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013496:	429a      	cmp	r2, r3
 8013498:	d316      	bcc.n	80134c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	689a      	ldr	r2, [r3, #8]
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d20f      	bcs.n	80134c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80134a8:	2200      	movs	r2, #0
 80134aa:	2100      	movs	r1, #0
 80134ac:	68f8      	ldr	r0, [r7, #12]
 80134ae:	f000 fee8 	bl	8014282 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	2200      	movs	r2, #0
 80134b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80134ba:	2300      	movs	r3, #0
 80134bc:	2200      	movs	r2, #0
 80134be:	2100      	movs	r1, #0
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f001 fb3e 	bl	8014b42 <USBD_LL_PrepareReceive>
 80134c6:	e026      	b.n	8013516 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d00a      	beq.n	80134ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80134da:	2b03      	cmp	r3, #3
 80134dc:	d105      	bne.n	80134ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80134ea:	2180      	movs	r1, #128	; 0x80
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f001 fa7d 	bl	80149ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80134f2:	68f8      	ldr	r0, [r7, #12]
 80134f4:	f000 ff1a 	bl	801432c <USBD_CtlReceiveStatus>
 80134f8:	e00d      	b.n	8013516 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013500:	2b04      	cmp	r3, #4
 8013502:	d004      	beq.n	801350e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801350a:	2b00      	cmp	r3, #0
 801350c:	d103      	bne.n	8013516 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801350e:	2180      	movs	r1, #128	; 0x80
 8013510:	68f8      	ldr	r0, [r7, #12]
 8013512:	f001 fa6b 	bl	80149ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801351c:	2b01      	cmp	r3, #1
 801351e:	d11d      	bne.n	801355c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f7ff fe81 	bl	8013228 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801352e:	e015      	b.n	801355c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013536:	695b      	ldr	r3, [r3, #20]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00d      	beq.n	8013558 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013542:	2b03      	cmp	r3, #3
 8013544:	d108      	bne.n	8013558 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801354c:	695b      	ldr	r3, [r3, #20]
 801354e:	7afa      	ldrb	r2, [r7, #11]
 8013550:	4611      	mov	r1, r2
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	4798      	blx	r3
 8013556:	e001      	b.n	801355c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013558:	2302      	movs	r3, #2
 801355a:	e000      	b.n	801355e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013566:	b580      	push	{r7, lr}
 8013568:	b082      	sub	sp, #8
 801356a:	af00      	add	r7, sp, #0
 801356c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801356e:	2340      	movs	r3, #64	; 0x40
 8013570:	2200      	movs	r2, #0
 8013572:	2100      	movs	r1, #0
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f001 fa13 	bl	80149a0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2201      	movs	r2, #1
 801357e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2240      	movs	r2, #64	; 0x40
 8013586:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801358a:	2340      	movs	r3, #64	; 0x40
 801358c:	2200      	movs	r2, #0
 801358e:	2180      	movs	r1, #128	; 0x80
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f001 fa05 	bl	80149a0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2201      	movs	r2, #1
 801359a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2240      	movs	r2, #64	; 0x40
 80135a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2201      	movs	r2, #1
 80135a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2200      	movs	r2, #0
 80135ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2200      	movs	r2, #0
 80135bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d009      	beq.n	80135de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	687a      	ldr	r2, [r7, #4]
 80135d4:	6852      	ldr	r2, [r2, #4]
 80135d6:	b2d2      	uxtb	r2, r2
 80135d8:	4611      	mov	r1, r2
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	4798      	blx	r3
  }

  return USBD_OK;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b083      	sub	sp, #12
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	460b      	mov	r3, r1
 80135f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	78fa      	ldrb	r2, [r7, #3]
 80135f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	bc80      	pop	{r7}
 8013604:	4770      	bx	lr

08013606 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013606:	b480      	push	{r7}
 8013608:	b083      	sub	sp, #12
 801360a:	af00      	add	r7, sp, #0
 801360c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2204      	movs	r2, #4
 801361e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013622:	2300      	movs	r3, #0
}
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	bc80      	pop	{r7}
 801362c:	4770      	bx	lr

0801362e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801362e:	b480      	push	{r7}
 8013630:	b083      	sub	sp, #12
 8013632:	af00      	add	r7, sp, #0
 8013634:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801363c:	2b04      	cmp	r3, #4
 801363e:	d105      	bne.n	801364c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801364c:	2300      	movs	r3, #0
}
 801364e:	4618      	mov	r0, r3
 8013650:	370c      	adds	r7, #12
 8013652:	46bd      	mov	sp, r7
 8013654:	bc80      	pop	{r7}
 8013656:	4770      	bx	lr

08013658 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013666:	2b03      	cmp	r3, #3
 8013668:	d10b      	bne.n	8013682 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013670:	69db      	ldr	r3, [r3, #28]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d005      	beq.n	8013682 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801367c:	69db      	ldr	r3, [r3, #28]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013682:	2300      	movs	r3, #0
}
 8013684:	4618      	mov	r0, r3
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	460b      	mov	r3, r1
 8013696:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013698:	2300      	movs	r3, #0
}
 801369a:	4618      	mov	r0, r3
 801369c:	370c      	adds	r7, #12
 801369e:	46bd      	mov	sp, r7
 80136a0:	bc80      	pop	{r7}
 80136a2:	4770      	bx	lr

080136a4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	460b      	mov	r3, r1
 80136ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	370c      	adds	r7, #12
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bc80      	pop	{r7}
 80136ba:	4770      	bx	lr

080136bc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80136bc:	b480      	push	{r7}
 80136be:	b083      	sub	sp, #12
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80136c4:	2300      	movs	r3, #0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bc80      	pop	{r7}
 80136ce:	4770      	bx	lr

080136d0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2201      	movs	r2, #1
 80136dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	6852      	ldr	r2, [r2, #4]
 80136ec:	b2d2      	uxtb	r2, r2
 80136ee:	4611      	mov	r1, r2
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	4798      	blx	r3

  return USBD_OK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
	...

08013700 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013716:	2b40      	cmp	r3, #64	; 0x40
 8013718:	d005      	beq.n	8013726 <USBD_StdDevReq+0x26>
 801371a:	2b40      	cmp	r3, #64	; 0x40
 801371c:	d84f      	bhi.n	80137be <USBD_StdDevReq+0xbe>
 801371e:	2b00      	cmp	r3, #0
 8013720:	d009      	beq.n	8013736 <USBD_StdDevReq+0x36>
 8013722:	2b20      	cmp	r3, #32
 8013724:	d14b      	bne.n	80137be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	6839      	ldr	r1, [r7, #0]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	4798      	blx	r3
      break;
 8013734:	e048      	b.n	80137c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	785b      	ldrb	r3, [r3, #1]
 801373a:	2b09      	cmp	r3, #9
 801373c:	d839      	bhi.n	80137b2 <USBD_StdDevReq+0xb2>
 801373e:	a201      	add	r2, pc, #4	; (adr r2, 8013744 <USBD_StdDevReq+0x44>)
 8013740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013744:	08013795 	.word	0x08013795
 8013748:	080137a9 	.word	0x080137a9
 801374c:	080137b3 	.word	0x080137b3
 8013750:	0801379f 	.word	0x0801379f
 8013754:	080137b3 	.word	0x080137b3
 8013758:	08013777 	.word	0x08013777
 801375c:	0801376d 	.word	0x0801376d
 8013760:	080137b3 	.word	0x080137b3
 8013764:	0801378b 	.word	0x0801378b
 8013768:	08013781 	.word	0x08013781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801376c:	6839      	ldr	r1, [r7, #0]
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f000 f9dc 	bl	8013b2c <USBD_GetDescriptor>
          break;
 8013774:	e022      	b.n	80137bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013776:	6839      	ldr	r1, [r7, #0]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 fb51 	bl	8013e20 <USBD_SetAddress>
          break;
 801377e:	e01d      	b.n	80137bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8013780:	6839      	ldr	r1, [r7, #0]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f000 fb90 	bl	8013ea8 <USBD_SetConfig>
          break;
 8013788:	e018      	b.n	80137bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801378a:	6839      	ldr	r1, [r7, #0]
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f000 fc19 	bl	8013fc4 <USBD_GetConfig>
          break;
 8013792:	e013      	b.n	80137bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013794:	6839      	ldr	r1, [r7, #0]
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f000 fc49 	bl	801402e <USBD_GetStatus>
          break;
 801379c:	e00e      	b.n	80137bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801379e:	6839      	ldr	r1, [r7, #0]
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f000 fc77 	bl	8014094 <USBD_SetFeature>
          break;
 80137a6:	e009      	b.n	80137bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80137a8:	6839      	ldr	r1, [r7, #0]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fc86 	bl	80140bc <USBD_ClrFeature>
          break;
 80137b0:	e004      	b.n	80137bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80137b2:	6839      	ldr	r1, [r7, #0]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f000 fcde 	bl	8014176 <USBD_CtlError>
          break;
 80137ba:	bf00      	nop
      }
      break;
 80137bc:	e004      	b.n	80137c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80137be:	6839      	ldr	r1, [r7, #0]
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f000 fcd8 	bl	8014176 <USBD_CtlError>
      break;
 80137c6:	bf00      	nop
  }

  return ret;
 80137c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3710      	adds	r7, #16
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop

080137d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80137de:	2300      	movs	r3, #0
 80137e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137ea:	2b40      	cmp	r3, #64	; 0x40
 80137ec:	d005      	beq.n	80137fa <USBD_StdItfReq+0x26>
 80137ee:	2b40      	cmp	r3, #64	; 0x40
 80137f0:	d82e      	bhi.n	8013850 <USBD_StdItfReq+0x7c>
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d001      	beq.n	80137fa <USBD_StdItfReq+0x26>
 80137f6:	2b20      	cmp	r3, #32
 80137f8:	d12a      	bne.n	8013850 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013800:	3b01      	subs	r3, #1
 8013802:	2b02      	cmp	r3, #2
 8013804:	d81d      	bhi.n	8013842 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	889b      	ldrh	r3, [r3, #4]
 801380a:	b2db      	uxtb	r3, r3
 801380c:	2b01      	cmp	r3, #1
 801380e:	d813      	bhi.n	8013838 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013816:	689b      	ldr	r3, [r3, #8]
 8013818:	6839      	ldr	r1, [r7, #0]
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	4798      	blx	r3
 801381e:	4603      	mov	r3, r0
 8013820:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	88db      	ldrh	r3, [r3, #6]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d110      	bne.n	801384c <USBD_StdItfReq+0x78>
 801382a:	7bfb      	ldrb	r3, [r7, #15]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d10d      	bne.n	801384c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f000 fd68 	bl	8014306 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013836:	e009      	b.n	801384c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8013838:	6839      	ldr	r1, [r7, #0]
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 fc9b 	bl	8014176 <USBD_CtlError>
          break;
 8013840:	e004      	b.n	801384c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8013842:	6839      	ldr	r1, [r7, #0]
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f000 fc96 	bl	8014176 <USBD_CtlError>
          break;
 801384a:	e000      	b.n	801384e <USBD_StdItfReq+0x7a>
          break;
 801384c:	bf00      	nop
      }
      break;
 801384e:	e004      	b.n	801385a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8013850:	6839      	ldr	r1, [r7, #0]
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 fc8f 	bl	8014176 <USBD_CtlError>
      break;
 8013858:	bf00      	nop
  }

  return USBD_OK;
 801385a:	2300      	movs	r3, #0
}
 801385c:	4618      	mov	r0, r3
 801385e:	3710      	adds	r7, #16
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801386e:	2300      	movs	r3, #0
 8013870:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	889b      	ldrh	r3, [r3, #4]
 8013876:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013880:	2b40      	cmp	r3, #64	; 0x40
 8013882:	d007      	beq.n	8013894 <USBD_StdEPReq+0x30>
 8013884:	2b40      	cmp	r3, #64	; 0x40
 8013886:	f200 8146 	bhi.w	8013b16 <USBD_StdEPReq+0x2b2>
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00a      	beq.n	80138a4 <USBD_StdEPReq+0x40>
 801388e:	2b20      	cmp	r3, #32
 8013890:	f040 8141 	bne.w	8013b16 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801389a:	689b      	ldr	r3, [r3, #8]
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	4798      	blx	r3
      break;
 80138a2:	e13d      	b.n	8013b20 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80138ac:	2b20      	cmp	r3, #32
 80138ae:	d10a      	bne.n	80138c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80138b6:	689b      	ldr	r3, [r3, #8]
 80138b8:	6839      	ldr	r1, [r7, #0]
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	4798      	blx	r3
 80138be:	4603      	mov	r3, r0
 80138c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80138c2:	7bfb      	ldrb	r3, [r7, #15]
 80138c4:	e12d      	b.n	8013b22 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	785b      	ldrb	r3, [r3, #1]
 80138ca:	2b03      	cmp	r3, #3
 80138cc:	d007      	beq.n	80138de <USBD_StdEPReq+0x7a>
 80138ce:	2b03      	cmp	r3, #3
 80138d0:	f300 811b 	bgt.w	8013b0a <USBD_StdEPReq+0x2a6>
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d072      	beq.n	80139be <USBD_StdEPReq+0x15a>
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d03a      	beq.n	8013952 <USBD_StdEPReq+0xee>
 80138dc:	e115      	b.n	8013b0a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138e4:	2b02      	cmp	r3, #2
 80138e6:	d002      	beq.n	80138ee <USBD_StdEPReq+0x8a>
 80138e8:	2b03      	cmp	r3, #3
 80138ea:	d015      	beq.n	8013918 <USBD_StdEPReq+0xb4>
 80138ec:	e02b      	b.n	8013946 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80138ee:	7bbb      	ldrb	r3, [r7, #14]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00c      	beq.n	801390e <USBD_StdEPReq+0xaa>
 80138f4:	7bbb      	ldrb	r3, [r7, #14]
 80138f6:	2b80      	cmp	r3, #128	; 0x80
 80138f8:	d009      	beq.n	801390e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80138fa:	7bbb      	ldrb	r3, [r7, #14]
 80138fc:	4619      	mov	r1, r3
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f001 f874 	bl	80149ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013904:	2180      	movs	r1, #128	; 0x80
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f001 f870 	bl	80149ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801390c:	e020      	b.n	8013950 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801390e:	6839      	ldr	r1, [r7, #0]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f000 fc30 	bl	8014176 <USBD_CtlError>
              break;
 8013916:	e01b      	b.n	8013950 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	885b      	ldrh	r3, [r3, #2]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d10e      	bne.n	801393e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013920:	7bbb      	ldrb	r3, [r7, #14]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00b      	beq.n	801393e <USBD_StdEPReq+0xda>
 8013926:	7bbb      	ldrb	r3, [r7, #14]
 8013928:	2b80      	cmp	r3, #128	; 0x80
 801392a:	d008      	beq.n	801393e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	88db      	ldrh	r3, [r3, #6]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d104      	bne.n	801393e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013934:	7bbb      	ldrb	r3, [r7, #14]
 8013936:	4619      	mov	r1, r3
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f001 f857 	bl	80149ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f000 fce1 	bl	8014306 <USBD_CtlSendStatus>

              break;
 8013944:	e004      	b.n	8013950 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013946:	6839      	ldr	r1, [r7, #0]
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 fc14 	bl	8014176 <USBD_CtlError>
              break;
 801394e:	bf00      	nop
          }
          break;
 8013950:	e0e0      	b.n	8013b14 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013958:	2b02      	cmp	r3, #2
 801395a:	d002      	beq.n	8013962 <USBD_StdEPReq+0xfe>
 801395c:	2b03      	cmp	r3, #3
 801395e:	d015      	beq.n	801398c <USBD_StdEPReq+0x128>
 8013960:	e026      	b.n	80139b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013962:	7bbb      	ldrb	r3, [r7, #14]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00c      	beq.n	8013982 <USBD_StdEPReq+0x11e>
 8013968:	7bbb      	ldrb	r3, [r7, #14]
 801396a:	2b80      	cmp	r3, #128	; 0x80
 801396c:	d009      	beq.n	8013982 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801396e:	7bbb      	ldrb	r3, [r7, #14]
 8013970:	4619      	mov	r1, r3
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f001 f83a 	bl	80149ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013978:	2180      	movs	r1, #128	; 0x80
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f001 f836 	bl	80149ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013980:	e01c      	b.n	80139bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8013982:	6839      	ldr	r1, [r7, #0]
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f000 fbf6 	bl	8014176 <USBD_CtlError>
              break;
 801398a:	e017      	b.n	80139bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	885b      	ldrh	r3, [r3, #2]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d112      	bne.n	80139ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013994:	7bbb      	ldrb	r3, [r7, #14]
 8013996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801399a:	2b00      	cmp	r3, #0
 801399c:	d004      	beq.n	80139a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801399e:	7bbb      	ldrb	r3, [r7, #14]
 80139a0:	4619      	mov	r1, r3
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f001 f841 	bl	8014a2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 fcac 	bl	8014306 <USBD_CtlSendStatus>
              }
              break;
 80139ae:	e004      	b.n	80139ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80139b0:	6839      	ldr	r1, [r7, #0]
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f000 fbdf 	bl	8014176 <USBD_CtlError>
              break;
 80139b8:	e000      	b.n	80139bc <USBD_StdEPReq+0x158>
              break;
 80139ba:	bf00      	nop
          }
          break;
 80139bc:	e0aa      	b.n	8013b14 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139c4:	2b02      	cmp	r3, #2
 80139c6:	d002      	beq.n	80139ce <USBD_StdEPReq+0x16a>
 80139c8:	2b03      	cmp	r3, #3
 80139ca:	d032      	beq.n	8013a32 <USBD_StdEPReq+0x1ce>
 80139cc:	e097      	b.n	8013afe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80139ce:	7bbb      	ldrb	r3, [r7, #14]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d007      	beq.n	80139e4 <USBD_StdEPReq+0x180>
 80139d4:	7bbb      	ldrb	r3, [r7, #14]
 80139d6:	2b80      	cmp	r3, #128	; 0x80
 80139d8:	d004      	beq.n	80139e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80139da:	6839      	ldr	r1, [r7, #0]
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f000 fbca 	bl	8014176 <USBD_CtlError>
                break;
 80139e2:	e091      	b.n	8013b08 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	da0b      	bge.n	8013a04 <USBD_StdEPReq+0x1a0>
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
 80139ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139f2:	4613      	mov	r3, r2
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	4413      	add	r3, r2
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	3310      	adds	r3, #16
 80139fc:	687a      	ldr	r2, [r7, #4]
 80139fe:	4413      	add	r3, r2
 8013a00:	3304      	adds	r3, #4
 8013a02:	e00b      	b.n	8013a1c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013a04:	7bbb      	ldrb	r3, [r7, #14]
 8013a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	4413      	add	r3, r2
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	4413      	add	r3, r2
 8013a1a:	3304      	adds	r3, #4
 8013a1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	2200      	movs	r2, #0
 8013a22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	2202      	movs	r2, #2
 8013a28:	4619      	mov	r1, r3
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 fc0d 	bl	801424a <USBD_CtlSendData>
              break;
 8013a30:	e06a      	b.n	8013b08 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	da11      	bge.n	8013a5e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013a3a:	7bbb      	ldrb	r3, [r7, #14]
 8013a3c:	f003 020f 	and.w	r2, r3, #15
 8013a40:	6879      	ldr	r1, [r7, #4]
 8013a42:	4613      	mov	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	4413      	add	r3, r2
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	440b      	add	r3, r1
 8013a4c:	3318      	adds	r3, #24
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d117      	bne.n	8013a84 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013a54:	6839      	ldr	r1, [r7, #0]
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f000 fb8d 	bl	8014176 <USBD_CtlError>
                  break;
 8013a5c:	e054      	b.n	8013b08 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013a5e:	7bbb      	ldrb	r3, [r7, #14]
 8013a60:	f003 020f 	and.w	r2, r3, #15
 8013a64:	6879      	ldr	r1, [r7, #4]
 8013a66:	4613      	mov	r3, r2
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	4413      	add	r3, r2
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	440b      	add	r3, r1
 8013a70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d104      	bne.n	8013a84 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013a7a:	6839      	ldr	r1, [r7, #0]
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f000 fb7a 	bl	8014176 <USBD_CtlError>
                  break;
 8013a82:	e041      	b.n	8013b08 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	da0b      	bge.n	8013aa4 <USBD_StdEPReq+0x240>
 8013a8c:	7bbb      	ldrb	r3, [r7, #14]
 8013a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a92:	4613      	mov	r3, r2
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	4413      	add	r3, r2
 8013a98:	009b      	lsls	r3, r3, #2
 8013a9a:	3310      	adds	r3, #16
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	3304      	adds	r3, #4
 8013aa2:	e00b      	b.n	8013abc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013aa4:	7bbb      	ldrb	r3, [r7, #14]
 8013aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013aaa:	4613      	mov	r3, r2
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	4413      	add	r3, r2
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	4413      	add	r3, r2
 8013aba:	3304      	adds	r3, #4
 8013abc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013abe:	7bbb      	ldrb	r3, [r7, #14]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d002      	beq.n	8013aca <USBD_StdEPReq+0x266>
 8013ac4:	7bbb      	ldrb	r3, [r7, #14]
 8013ac6:	2b80      	cmp	r3, #128	; 0x80
 8013ac8:	d103      	bne.n	8013ad2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	2200      	movs	r2, #0
 8013ace:	601a      	str	r2, [r3, #0]
 8013ad0:	e00e      	b.n	8013af0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8013ad2:	7bbb      	ldrb	r3, [r7, #14]
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f000 ffc6 	bl	8014a68 <USBD_LL_IsStallEP>
 8013adc:	4603      	mov	r3, r0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d003      	beq.n	8013aea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	2201      	movs	r2, #1
 8013ae6:	601a      	str	r2, [r3, #0]
 8013ae8:	e002      	b.n	8013af0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	2200      	movs	r2, #0
 8013aee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	2202      	movs	r2, #2
 8013af4:	4619      	mov	r1, r3
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f000 fba7 	bl	801424a <USBD_CtlSendData>
              break;
 8013afc:	e004      	b.n	8013b08 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8013afe:	6839      	ldr	r1, [r7, #0]
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f000 fb38 	bl	8014176 <USBD_CtlError>
              break;
 8013b06:	bf00      	nop
          }
          break;
 8013b08:	e004      	b.n	8013b14 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8013b0a:	6839      	ldr	r1, [r7, #0]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 fb32 	bl	8014176 <USBD_CtlError>
          break;
 8013b12:	bf00      	nop
      }
      break;
 8013b14:	e004      	b.n	8013b20 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 fb2c 	bl	8014176 <USBD_CtlError>
      break;
 8013b1e:	bf00      	nop
  }

  return ret;
 8013b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3710      	adds	r7, #16
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
	...

08013b2c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013b36:	2300      	movs	r3, #0
 8013b38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	885b      	ldrh	r3, [r3, #2]
 8013b46:	0a1b      	lsrs	r3, r3, #8
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	2b06      	cmp	r3, #6
 8013b4e:	f200 813b 	bhi.w	8013dc8 <USBD_GetDescriptor+0x29c>
 8013b52:	a201      	add	r2, pc, #4	; (adr r2, 8013b58 <USBD_GetDescriptor+0x2c>)
 8013b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b58:	08013b75 	.word	0x08013b75
 8013b5c:	08013b8d 	.word	0x08013b8d
 8013b60:	08013bcd 	.word	0x08013bcd
 8013b64:	08013dc9 	.word	0x08013dc9
 8013b68:	08013dc9 	.word	0x08013dc9
 8013b6c:	08013d69 	.word	0x08013d69
 8013b70:	08013d95 	.word	0x08013d95
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	7c12      	ldrb	r2, [r2, #16]
 8013b80:	f107 0108 	add.w	r1, r7, #8
 8013b84:	4610      	mov	r0, r2
 8013b86:	4798      	blx	r3
 8013b88:	60f8      	str	r0, [r7, #12]
      break;
 8013b8a:	e125      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	7c1b      	ldrb	r3, [r3, #16]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d10d      	bne.n	8013bb0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b9c:	f107 0208 	add.w	r2, r7, #8
 8013ba0:	4610      	mov	r0, r2
 8013ba2:	4798      	blx	r3
 8013ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	2202      	movs	r2, #2
 8013bac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013bae:	e113      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb8:	f107 0208 	add.w	r2, r7, #8
 8013bbc:	4610      	mov	r0, r2
 8013bbe:	4798      	blx	r3
 8013bc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	2202      	movs	r2, #2
 8013bc8:	701a      	strb	r2, [r3, #0]
      break;
 8013bca:	e105      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	885b      	ldrh	r3, [r3, #2]
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	2b05      	cmp	r3, #5
 8013bd4:	f200 80ac 	bhi.w	8013d30 <USBD_GetDescriptor+0x204>
 8013bd8:	a201      	add	r2, pc, #4	; (adr r2, 8013be0 <USBD_GetDescriptor+0xb4>)
 8013bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bde:	bf00      	nop
 8013be0:	08013bf9 	.word	0x08013bf9
 8013be4:	08013c2d 	.word	0x08013c2d
 8013be8:	08013c61 	.word	0x08013c61
 8013bec:	08013c95 	.word	0x08013c95
 8013bf0:	08013cc9 	.word	0x08013cc9
 8013bf4:	08013cfd 	.word	0x08013cfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d00b      	beq.n	8013c1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	687a      	ldr	r2, [r7, #4]
 8013c0e:	7c12      	ldrb	r2, [r2, #16]
 8013c10:	f107 0108 	add.w	r1, r7, #8
 8013c14:	4610      	mov	r0, r2
 8013c16:	4798      	blx	r3
 8013c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c1a:	e0a4      	b.n	8013d66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013c1c:	6839      	ldr	r1, [r7, #0]
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f000 faa9 	bl	8014176 <USBD_CtlError>
            err++;
 8013c24:	7afb      	ldrb	r3, [r7, #11]
 8013c26:	3301      	adds	r3, #1
 8013c28:	72fb      	strb	r3, [r7, #11]
          break;
 8013c2a:	e09c      	b.n	8013d66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013c32:	689b      	ldr	r3, [r3, #8]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00b      	beq.n	8013c50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013c3e:	689b      	ldr	r3, [r3, #8]
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	7c12      	ldrb	r2, [r2, #16]
 8013c44:	f107 0108 	add.w	r1, r7, #8
 8013c48:	4610      	mov	r0, r2
 8013c4a:	4798      	blx	r3
 8013c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c4e:	e08a      	b.n	8013d66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013c50:	6839      	ldr	r1, [r7, #0]
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f000 fa8f 	bl	8014176 <USBD_CtlError>
            err++;
 8013c58:	7afb      	ldrb	r3, [r7, #11]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8013c5e:	e082      	b.n	8013d66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00b      	beq.n	8013c84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	7c12      	ldrb	r2, [r2, #16]
 8013c78:	f107 0108 	add.w	r1, r7, #8
 8013c7c:	4610      	mov	r0, r2
 8013c7e:	4798      	blx	r3
 8013c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c82:	e070      	b.n	8013d66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013c84:	6839      	ldr	r1, [r7, #0]
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 fa75 	bl	8014176 <USBD_CtlError>
            err++;
 8013c8c:	7afb      	ldrb	r3, [r7, #11]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	72fb      	strb	r3, [r7, #11]
          break;
 8013c92:	e068      	b.n	8013d66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013c9a:	691b      	ldr	r3, [r3, #16]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d00b      	beq.n	8013cb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	7c12      	ldrb	r2, [r2, #16]
 8013cac:	f107 0108 	add.w	r1, r7, #8
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	4798      	blx	r3
 8013cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cb6:	e056      	b.n	8013d66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013cb8:	6839      	ldr	r1, [r7, #0]
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f000 fa5b 	bl	8014176 <USBD_CtlError>
            err++;
 8013cc0:	7afb      	ldrb	r3, [r7, #11]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8013cc6:	e04e      	b.n	8013d66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013cce:	695b      	ldr	r3, [r3, #20]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d00b      	beq.n	8013cec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013cda:	695b      	ldr	r3, [r3, #20]
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	7c12      	ldrb	r2, [r2, #16]
 8013ce0:	f107 0108 	add.w	r1, r7, #8
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	4798      	blx	r3
 8013ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cea:	e03c      	b.n	8013d66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013cec:	6839      	ldr	r1, [r7, #0]
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f000 fa41 	bl	8014176 <USBD_CtlError>
            err++;
 8013cf4:	7afb      	ldrb	r3, [r7, #11]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8013cfa:	e034      	b.n	8013d66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00b      	beq.n	8013d20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013d0e:	699b      	ldr	r3, [r3, #24]
 8013d10:	687a      	ldr	r2, [r7, #4]
 8013d12:	7c12      	ldrb	r2, [r2, #16]
 8013d14:	f107 0108 	add.w	r1, r7, #8
 8013d18:	4610      	mov	r0, r2
 8013d1a:	4798      	blx	r3
 8013d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d1e:	e022      	b.n	8013d66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013d20:	6839      	ldr	r1, [r7, #0]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 fa27 	bl	8014176 <USBD_CtlError>
            err++;
 8013d28:	7afb      	ldrb	r3, [r7, #11]
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8013d2e:	e01a      	b.n	8013d66 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d00c      	beq.n	8013d56 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d44:	683a      	ldr	r2, [r7, #0]
 8013d46:	8852      	ldrh	r2, [r2, #2]
 8013d48:	b2d1      	uxtb	r1, r2
 8013d4a:	f107 0208 	add.w	r2, r7, #8
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	4798      	blx	r3
 8013d52:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d54:	e006      	b.n	8013d64 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8013d56:	6839      	ldr	r1, [r7, #0]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 fa0c 	bl	8014176 <USBD_CtlError>
            err++;
 8013d5e:	7afb      	ldrb	r3, [r7, #11]
 8013d60:	3301      	adds	r3, #1
 8013d62:	72fb      	strb	r3, [r7, #11]
          break;
 8013d64:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 8013d66:	e037      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	7c1b      	ldrb	r3, [r3, #16]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d109      	bne.n	8013d84 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d78:	f107 0208 	add.w	r2, r7, #8
 8013d7c:	4610      	mov	r0, r2
 8013d7e:	4798      	blx	r3
 8013d80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d82:	e029      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8013d84:	6839      	ldr	r1, [r7, #0]
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f000 f9f5 	bl	8014176 <USBD_CtlError>
        err++;
 8013d8c:	7afb      	ldrb	r3, [r7, #11]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	72fb      	strb	r3, [r7, #11]
      break;
 8013d92:	e021      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	7c1b      	ldrb	r3, [r3, #16]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d10d      	bne.n	8013db8 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da4:	f107 0208 	add.w	r2, r7, #8
 8013da8:	4610      	mov	r0, r2
 8013daa:	4798      	blx	r3
 8013dac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	3301      	adds	r3, #1
 8013db2:	2207      	movs	r2, #7
 8013db4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013db6:	e00f      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8013db8:	6839      	ldr	r1, [r7, #0]
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f000 f9db 	bl	8014176 <USBD_CtlError>
        err++;
 8013dc0:	7afb      	ldrb	r3, [r7, #11]
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	72fb      	strb	r3, [r7, #11]
      break;
 8013dc6:	e007      	b.n	8013dd8 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8013dc8:	6839      	ldr	r1, [r7, #0]
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 f9d3 	bl	8014176 <USBD_CtlError>
      err++;
 8013dd0:	7afb      	ldrb	r3, [r7, #11]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	72fb      	strb	r3, [r7, #11]
      break;
 8013dd6:	bf00      	nop
  }

  if (err != 0U)
 8013dd8:	7afb      	ldrb	r3, [r7, #11]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d11c      	bne.n	8013e18 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8013dde:	893b      	ldrh	r3, [r7, #8]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d011      	beq.n	8013e08 <USBD_GetDescriptor+0x2dc>
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	88db      	ldrh	r3, [r3, #6]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d00d      	beq.n	8013e08 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	88da      	ldrh	r2, [r3, #6]
 8013df0:	893b      	ldrh	r3, [r7, #8]
 8013df2:	4293      	cmp	r3, r2
 8013df4:	bf28      	it	cs
 8013df6:	4613      	movcs	r3, r2
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013dfc:	893b      	ldrh	r3, [r7, #8]
 8013dfe:	461a      	mov	r2, r3
 8013e00:	68f9      	ldr	r1, [r7, #12]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fa21 	bl	801424a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	88db      	ldrh	r3, [r3, #6]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d104      	bne.n	8013e1a <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 fa78 	bl	8014306 <USBD_CtlSendStatus>
 8013e16:	e000      	b.n	8013e1a <USBD_GetDescriptor+0x2ee>
    return;
 8013e18:	bf00      	nop
    }
  }
}
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	889b      	ldrh	r3, [r3, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d130      	bne.n	8013e94 <USBD_SetAddress+0x74>
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	88db      	ldrh	r3, [r3, #6]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d12c      	bne.n	8013e94 <USBD_SetAddress+0x74>
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	885b      	ldrh	r3, [r3, #2]
 8013e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8013e40:	d828      	bhi.n	8013e94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	885b      	ldrh	r3, [r3, #2]
 8013e46:	b2db      	uxtb	r3, r3
 8013e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e54:	2b03      	cmp	r3, #3
 8013e56:	d104      	bne.n	8013e62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8013e58:	6839      	ldr	r1, [r7, #0]
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f000 f98b 	bl	8014176 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e60:	e01d      	b.n	8013e9e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	7bfa      	ldrb	r2, [r7, #15]
 8013e66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013e6a:	7bfb      	ldrb	r3, [r7, #15]
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 fe25 	bl	8014abe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f000 fa46 	bl	8014306 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d004      	beq.n	8013e8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2202      	movs	r2, #2
 8013e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e88:	e009      	b.n	8013e9e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e92:	e004      	b.n	8013e9e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013e94:	6839      	ldr	r1, [r7, #0]
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f000 f96d 	bl	8014176 <USBD_CtlError>
  }
}
 8013e9c:	bf00      	nop
 8013e9e:	bf00      	nop
 8013ea0:	3710      	adds	r7, #16
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
	...

08013ea8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	885b      	ldrh	r3, [r3, #2]
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	4b41      	ldr	r3, [pc, #260]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013eba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013ebc:	4b40      	ldr	r3, [pc, #256]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d904      	bls.n	8013ece <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8013ec4:	6839      	ldr	r1, [r7, #0]
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 f955 	bl	8014176 <USBD_CtlError>
 8013ecc:	e075      	b.n	8013fba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	d002      	beq.n	8013ede <USBD_SetConfig+0x36>
 8013ed8:	2b03      	cmp	r3, #3
 8013eda:	d023      	beq.n	8013f24 <USBD_SetConfig+0x7c>
 8013edc:	e062      	b.n	8013fa4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8013ede:	4b38      	ldr	r3, [pc, #224]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d01a      	beq.n	8013f1c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8013ee6:	4b36      	ldr	r3, [pc, #216]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	461a      	mov	r2, r3
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2203      	movs	r2, #3
 8013ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013ef8:	4b31      	ldr	r3, [pc, #196]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	4619      	mov	r1, r3
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ff f99c 	bl	801323c <USBD_SetClassConfig>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b02      	cmp	r3, #2
 8013f08:	d104      	bne.n	8013f14 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8013f0a:	6839      	ldr	r1, [r7, #0]
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f000 f932 	bl	8014176 <USBD_CtlError>
            return;
 8013f12:	e052      	b.n	8013fba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f000 f9f6 	bl	8014306 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013f1a:	e04e      	b.n	8013fba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 f9f2 	bl	8014306 <USBD_CtlSendStatus>
        break;
 8013f22:	e04a      	b.n	8013fba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013f24:	4b26      	ldr	r3, [pc, #152]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d112      	bne.n	8013f52 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2202      	movs	r2, #2
 8013f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8013f34:	4b22      	ldr	r3, [pc, #136]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	461a      	mov	r2, r3
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8013f3e:	4b20      	ldr	r3, [pc, #128]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	4619      	mov	r1, r3
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f7ff f998 	bl	801327a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f000 f9db 	bl	8014306 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013f50:	e033      	b.n	8013fba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8013f52:	4b1b      	ldr	r3, [pc, #108]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	461a      	mov	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d01d      	beq.n	8013f9c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7ff f986 	bl	801327a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8013f6e:	4b14      	ldr	r3, [pc, #80]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013f70:	781b      	ldrb	r3, [r3, #0]
 8013f72:	461a      	mov	r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013f78:	4b11      	ldr	r3, [pc, #68]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ff f95c 	bl	801323c <USBD_SetClassConfig>
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d104      	bne.n	8013f94 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013f8a:	6839      	ldr	r1, [r7, #0]
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f000 f8f2 	bl	8014176 <USBD_CtlError>
            return;
 8013f92:	e012      	b.n	8013fba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 f9b6 	bl	8014306 <USBD_CtlSendStatus>
        break;
 8013f9a:	e00e      	b.n	8013fba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f000 f9b2 	bl	8014306 <USBD_CtlSendStatus>
        break;
 8013fa2:	e00a      	b.n	8013fba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8013fa4:	6839      	ldr	r1, [r7, #0]
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 f8e5 	bl	8014176 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013fac:	4b04      	ldr	r3, [pc, #16]	; (8013fc0 <USBD_SetConfig+0x118>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7ff f961 	bl	801327a <USBD_ClrClassConfig>
        break;
 8013fb8:	bf00      	nop
    }
  }
}
 8013fba:	3708      	adds	r7, #8
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	2000046b 	.word	0x2000046b

08013fc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	88db      	ldrh	r3, [r3, #6]
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	d004      	beq.n	8013fe0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013fd6:	6839      	ldr	r1, [r7, #0]
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f000 f8cc 	bl	8014176 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013fde:	e022      	b.n	8014026 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fe6:	2b02      	cmp	r3, #2
 8013fe8:	dc02      	bgt.n	8013ff0 <USBD_GetConfig+0x2c>
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	dc03      	bgt.n	8013ff6 <USBD_GetConfig+0x32>
 8013fee:	e015      	b.n	801401c <USBD_GetConfig+0x58>
 8013ff0:	2b03      	cmp	r3, #3
 8013ff2:	d00b      	beq.n	801400c <USBD_GetConfig+0x48>
 8013ff4:	e012      	b.n	801401c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	3308      	adds	r3, #8
 8014000:	2201      	movs	r2, #1
 8014002:	4619      	mov	r1, r3
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f000 f920 	bl	801424a <USBD_CtlSendData>
        break;
 801400a:	e00c      	b.n	8014026 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	3304      	adds	r3, #4
 8014010:	2201      	movs	r2, #1
 8014012:	4619      	mov	r1, r3
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f000 f918 	bl	801424a <USBD_CtlSendData>
        break;
 801401a:	e004      	b.n	8014026 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 801401c:	6839      	ldr	r1, [r7, #0]
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f000 f8a9 	bl	8014176 <USBD_CtlError>
        break;
 8014024:	bf00      	nop
}
 8014026:	bf00      	nop
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}

0801402e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801402e:	b580      	push	{r7, lr}
 8014030:	b082      	sub	sp, #8
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
 8014036:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801403e:	3b01      	subs	r3, #1
 8014040:	2b02      	cmp	r3, #2
 8014042:	d81e      	bhi.n	8014082 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	88db      	ldrh	r3, [r3, #6]
 8014048:	2b02      	cmp	r3, #2
 801404a:	d004      	beq.n	8014056 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801404c:	6839      	ldr	r1, [r7, #0]
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f000 f891 	bl	8014176 <USBD_CtlError>
        break;
 8014054:	e01a      	b.n	801408c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2201      	movs	r2, #1
 801405a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014062:	2b00      	cmp	r3, #0
 8014064:	d005      	beq.n	8014072 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	68db      	ldr	r3, [r3, #12]
 801406a:	f043 0202 	orr.w	r2, r3, #2
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	330c      	adds	r3, #12
 8014076:	2202      	movs	r2, #2
 8014078:	4619      	mov	r1, r3
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f000 f8e5 	bl	801424a <USBD_CtlSendData>
      break;
 8014080:	e004      	b.n	801408c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014082:	6839      	ldr	r1, [r7, #0]
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f000 f876 	bl	8014176 <USBD_CtlError>
      break;
 801408a:	bf00      	nop
  }
}
 801408c:	bf00      	nop
 801408e:	3708      	adds	r7, #8
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	885b      	ldrh	r3, [r3, #2]
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d106      	bne.n	80140b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2201      	movs	r2, #1
 80140aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f000 f929 	bl	8014306 <USBD_CtlSendStatus>
  }
}
 80140b4:	bf00      	nop
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140cc:	3b01      	subs	r3, #1
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	d80b      	bhi.n	80140ea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	885b      	ldrh	r3, [r3, #2]
 80140d6:	2b01      	cmp	r3, #1
 80140d8:	d10c      	bne.n	80140f4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2200      	movs	r2, #0
 80140de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 f90f 	bl	8014306 <USBD_CtlSendStatus>
      }
      break;
 80140e8:	e004      	b.n	80140f4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80140ea:	6839      	ldr	r1, [r7, #0]
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 f842 	bl	8014176 <USBD_CtlError>
      break;
 80140f2:	e000      	b.n	80140f6 <USBD_ClrFeature+0x3a>
      break;
 80140f4:	bf00      	nop
  }
}
 80140f6:	bf00      	nop
 80140f8:	3708      	adds	r7, #8
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80140fe:	b480      	push	{r7}
 8014100:	b083      	sub	sp, #12
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
 8014106:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	781a      	ldrb	r2, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	785a      	ldrb	r2, [r3, #1]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	3302      	adds	r3, #2
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	b29a      	uxth	r2, r3
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	3303      	adds	r3, #3
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	b29b      	uxth	r3, r3
 8014128:	021b      	lsls	r3, r3, #8
 801412a:	b29b      	uxth	r3, r3
 801412c:	4413      	add	r3, r2
 801412e:	b29a      	uxth	r2, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	3304      	adds	r3, #4
 8014138:	781b      	ldrb	r3, [r3, #0]
 801413a:	b29a      	uxth	r2, r3
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	3305      	adds	r3, #5
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	b29b      	uxth	r3, r3
 8014144:	021b      	lsls	r3, r3, #8
 8014146:	b29b      	uxth	r3, r3
 8014148:	4413      	add	r3, r2
 801414a:	b29a      	uxth	r2, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014150:	683b      	ldr	r3, [r7, #0]
 8014152:	3306      	adds	r3, #6
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	b29a      	uxth	r2, r3
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	3307      	adds	r3, #7
 801415c:	781b      	ldrb	r3, [r3, #0]
 801415e:	b29b      	uxth	r3, r3
 8014160:	021b      	lsls	r3, r3, #8
 8014162:	b29b      	uxth	r3, r3
 8014164:	4413      	add	r3, r2
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	80da      	strh	r2, [r3, #6]

}
 801416c:	bf00      	nop
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	bc80      	pop	{r7}
 8014174:	4770      	bx	lr

08014176 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014176:	b580      	push	{r7, lr}
 8014178:	b082      	sub	sp, #8
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014180:	2180      	movs	r1, #128	; 0x80
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 fc32 	bl	80149ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014188:	2100      	movs	r1, #0
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f000 fc2e 	bl	80149ec <USBD_LL_StallEP>
}
 8014190:	bf00      	nop
 8014192:	3708      	adds	r7, #8
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b086      	sub	sp, #24
 801419c:	af00      	add	r7, sp, #0
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80141a4:	2300      	movs	r3, #0
 80141a6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d032      	beq.n	8014214 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f000 f834 	bl	801421c <USBD_GetLen>
 80141b4:	4603      	mov	r3, r0
 80141b6:	3301      	adds	r3, #1
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	005b      	lsls	r3, r3, #1
 80141bc:	b29a      	uxth	r2, r3
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80141c2:	7dfb      	ldrb	r3, [r7, #23]
 80141c4:	1c5a      	adds	r2, r3, #1
 80141c6:	75fa      	strb	r2, [r7, #23]
 80141c8:	461a      	mov	r2, r3
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	4413      	add	r3, r2
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	7812      	ldrb	r2, [r2, #0]
 80141d2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80141d4:	7dfb      	ldrb	r3, [r7, #23]
 80141d6:	1c5a      	adds	r2, r3, #1
 80141d8:	75fa      	strb	r2, [r7, #23]
 80141da:	461a      	mov	r2, r3
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	4413      	add	r3, r2
 80141e0:	2203      	movs	r2, #3
 80141e2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80141e4:	e012      	b.n	801420c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	1c5a      	adds	r2, r3, #1
 80141ea:	60fa      	str	r2, [r7, #12]
 80141ec:	7dfa      	ldrb	r2, [r7, #23]
 80141ee:	1c51      	adds	r1, r2, #1
 80141f0:	75f9      	strb	r1, [r7, #23]
 80141f2:	4611      	mov	r1, r2
 80141f4:	68ba      	ldr	r2, [r7, #8]
 80141f6:	440a      	add	r2, r1
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80141fc:	7dfb      	ldrb	r3, [r7, #23]
 80141fe:	1c5a      	adds	r2, r3, #1
 8014200:	75fa      	strb	r2, [r7, #23]
 8014202:	461a      	mov	r2, r3
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	4413      	add	r3, r2
 8014208:	2200      	movs	r2, #0
 801420a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d1e8      	bne.n	80141e6 <USBD_GetString+0x4e>
    }
  }
}
 8014214:	bf00      	nop
 8014216:	3718      	adds	r7, #24
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}

0801421c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801421c:	b480      	push	{r7}
 801421e:	b085      	sub	sp, #20
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014224:	2300      	movs	r3, #0
 8014226:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014228:	e005      	b.n	8014236 <USBD_GetLen+0x1a>
  {
    len++;
 801422a:	7bfb      	ldrb	r3, [r7, #15]
 801422c:	3301      	adds	r3, #1
 801422e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	3301      	adds	r3, #1
 8014234:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d1f5      	bne.n	801422a <USBD_GetLen+0xe>
  }

  return len;
 801423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3714      	adds	r7, #20
 8014244:	46bd      	mov	sp, r7
 8014246:	bc80      	pop	{r7}
 8014248:	4770      	bx	lr

0801424a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801424a:	b580      	push	{r7, lr}
 801424c:	b084      	sub	sp, #16
 801424e:	af00      	add	r7, sp, #0
 8014250:	60f8      	str	r0, [r7, #12]
 8014252:	60b9      	str	r1, [r7, #8]
 8014254:	4613      	mov	r3, r2
 8014256:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	2202      	movs	r2, #2
 801425c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014260:	88fa      	ldrh	r2, [r7, #6]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8014266:	88fa      	ldrh	r2, [r7, #6]
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801426c:	88fb      	ldrh	r3, [r7, #6]
 801426e:	68ba      	ldr	r2, [r7, #8]
 8014270:	2100      	movs	r1, #0
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	f000 fc42 	bl	8014afc <USBD_LL_Transmit>

  return USBD_OK;
 8014278:	2300      	movs	r3, #0
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b084      	sub	sp, #16
 8014286:	af00      	add	r7, sp, #0
 8014288:	60f8      	str	r0, [r7, #12]
 801428a:	60b9      	str	r1, [r7, #8]
 801428c:	4613      	mov	r3, r2
 801428e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014290:	88fb      	ldrh	r3, [r7, #6]
 8014292:	68ba      	ldr	r2, [r7, #8]
 8014294:	2100      	movs	r1, #0
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f000 fc30 	bl	8014afc <USBD_LL_Transmit>

  return USBD_OK;
 801429c:	2300      	movs	r3, #0
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b084      	sub	sp, #16
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	60f8      	str	r0, [r7, #12]
 80142ae:	60b9      	str	r1, [r7, #8]
 80142b0:	4613      	mov	r3, r2
 80142b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2203      	movs	r2, #3
 80142b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80142bc:	88fa      	ldrh	r2, [r7, #6]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80142c4:	88fa      	ldrh	r2, [r7, #6]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80142cc:	88fb      	ldrh	r3, [r7, #6]
 80142ce:	68ba      	ldr	r2, [r7, #8]
 80142d0:	2100      	movs	r1, #0
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	f000 fc35 	bl	8014b42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80142d8:	2300      	movs	r3, #0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3710      	adds	r7, #16
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80142e2:	b580      	push	{r7, lr}
 80142e4:	b084      	sub	sp, #16
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	60f8      	str	r0, [r7, #12]
 80142ea:	60b9      	str	r1, [r7, #8]
 80142ec:	4613      	mov	r3, r2
 80142ee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80142f0:	88fb      	ldrh	r3, [r7, #6]
 80142f2:	68ba      	ldr	r2, [r7, #8]
 80142f4:	2100      	movs	r1, #0
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f000 fc23 	bl	8014b42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80142fc:	2300      	movs	r3, #0
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}

08014306 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014306:	b580      	push	{r7, lr}
 8014308:	b082      	sub	sp, #8
 801430a:	af00      	add	r7, sp, #0
 801430c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2204      	movs	r2, #4
 8014312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014316:	2300      	movs	r3, #0
 8014318:	2200      	movs	r2, #0
 801431a:	2100      	movs	r1, #0
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 fbed 	bl	8014afc <USBD_LL_Transmit>

  return USBD_OK;
 8014322:	2300      	movs	r3, #0
}
 8014324:	4618      	mov	r0, r3
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2205      	movs	r2, #5
 8014338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801433c:	2300      	movs	r3, #0
 801433e:	2200      	movs	r2, #0
 8014340:	2100      	movs	r1, #0
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 fbfd 	bl	8014b42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3708      	adds	r7, #8
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
	...

08014354 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014358:	2200      	movs	r2, #0
 801435a:	4912      	ldr	r1, [pc, #72]	; (80143a4 <MX_USB_DEVICE_Init+0x50>)
 801435c:	4812      	ldr	r0, [pc, #72]	; (80143a8 <MX_USB_DEVICE_Init+0x54>)
 801435e:	f7fe fefd 	bl	801315c <USBD_Init>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d001      	beq.n	801436c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014368:	f7ec ff7e 	bl	8001268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 801436c:	490f      	ldr	r1, [pc, #60]	; (80143ac <MX_USB_DEVICE_Init+0x58>)
 801436e:	480e      	ldr	r0, [pc, #56]	; (80143a8 <MX_USB_DEVICE_Init+0x54>)
 8014370:	f7fe ff1f 	bl	80131b2 <USBD_RegisterClass>
 8014374:	4603      	mov	r3, r0
 8014376:	2b00      	cmp	r3, #0
 8014378:	d001      	beq.n	801437e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801437a:	f7ec ff75 	bl	8001268 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 801437e:	490c      	ldr	r1, [pc, #48]	; (80143b0 <MX_USB_DEVICE_Init+0x5c>)
 8014380:	4809      	ldr	r0, [pc, #36]	; (80143a8 <MX_USB_DEVICE_Init+0x54>)
 8014382:	f7fe fb87 	bl	8012a94 <USBD_DFU_RegisterMedia>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	d001      	beq.n	8014390 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801438c:	f7ec ff6c 	bl	8001268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014390:	4805      	ldr	r0, [pc, #20]	; (80143a8 <MX_USB_DEVICE_Init+0x54>)
 8014392:	f7fe ff27 	bl	80131e4 <USBD_Start>
 8014396:	4603      	mov	r3, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	d001      	beq.n	80143a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801439c:	f7ec ff64 	bl	8001268 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80143a0:	bf00      	nop
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	200000bc 	.word	0x200000bc
 80143a8:	2000046c 	.word	0x2000046c
 80143ac:	20000058 	.word	0x20000058
 80143b0:	2000010c 	.word	0x2000010c

080143b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143b4:	b480      	push	{r7}
 80143b6:	b083      	sub	sp, #12
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	4603      	mov	r3, r0
 80143bc:	6039      	str	r1, [r7, #0]
 80143be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	2212      	movs	r2, #18
 80143c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80143c6:	4b03      	ldr	r3, [pc, #12]	; (80143d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bc80      	pop	{r7}
 80143d0:	4770      	bx	lr
 80143d2:	bf00      	nop
 80143d4:	200000d8 	.word	0x200000d8

080143d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	4603      	mov	r3, r0
 80143e0:	6039      	str	r1, [r7, #0]
 80143e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	2204      	movs	r2, #4
 80143e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80143ea:	4b03      	ldr	r3, [pc, #12]	; (80143f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	370c      	adds	r7, #12
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bc80      	pop	{r7}
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	200000ec 	.word	0x200000ec

080143fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	4603      	mov	r3, r0
 8014404:	6039      	str	r1, [r7, #0]
 8014406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014408:	79fb      	ldrb	r3, [r7, #7]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d105      	bne.n	801441a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	4907      	ldr	r1, [pc, #28]	; (8014430 <USBD_FS_ProductStrDescriptor+0x34>)
 8014412:	4808      	ldr	r0, [pc, #32]	; (8014434 <USBD_FS_ProductStrDescriptor+0x38>)
 8014414:	f7ff fec0 	bl	8014198 <USBD_GetString>
 8014418:	e004      	b.n	8014424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	4904      	ldr	r1, [pc, #16]	; (8014430 <USBD_FS_ProductStrDescriptor+0x34>)
 801441e:	4805      	ldr	r0, [pc, #20]	; (8014434 <USBD_FS_ProductStrDescriptor+0x38>)
 8014420:	f7ff feba 	bl	8014198 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014424:	4b02      	ldr	r3, [pc, #8]	; (8014430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014426:	4618      	mov	r0, r3
 8014428:	3708      	adds	r7, #8
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	20000730 	.word	0x20000730
 8014434:	080152b0 	.word	0x080152b0

08014438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	4603      	mov	r3, r0
 8014440:	6039      	str	r1, [r7, #0]
 8014442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014444:	683a      	ldr	r2, [r7, #0]
 8014446:	4904      	ldr	r1, [pc, #16]	; (8014458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014448:	4804      	ldr	r0, [pc, #16]	; (801445c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801444a:	f7ff fea5 	bl	8014198 <USBD_GetString>
  return USBD_StrDesc;
 801444e:	4b02      	ldr	r3, [pc, #8]	; (8014458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014450:	4618      	mov	r0, r3
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	20000730 	.word	0x20000730
 801445c:	080152d0 	.word	0x080152d0

08014460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	4603      	mov	r3, r0
 8014468:	6039      	str	r1, [r7, #0]
 801446a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	221a      	movs	r2, #26
 8014470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014472:	f000 f843 	bl	80144fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014476:	4b02      	ldr	r3, [pc, #8]	; (8014480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014478:	4618      	mov	r0, r3
 801447a:	3708      	adds	r7, #8
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	200000f0 	.word	0x200000f0

08014484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	4603      	mov	r3, r0
 801448c:	6039      	str	r1, [r7, #0]
 801448e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014490:	79fb      	ldrb	r3, [r7, #7]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d105      	bne.n	80144a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014496:	683a      	ldr	r2, [r7, #0]
 8014498:	4907      	ldr	r1, [pc, #28]	; (80144b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801449a:	4808      	ldr	r0, [pc, #32]	; (80144bc <USBD_FS_ConfigStrDescriptor+0x38>)
 801449c:	f7ff fe7c 	bl	8014198 <USBD_GetString>
 80144a0:	e004      	b.n	80144ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80144a2:	683a      	ldr	r2, [r7, #0]
 80144a4:	4904      	ldr	r1, [pc, #16]	; (80144b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80144a6:	4805      	ldr	r0, [pc, #20]	; (80144bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80144a8:	f7ff fe76 	bl	8014198 <USBD_GetString>
  }
  return USBD_StrDesc;
 80144ac:	4b02      	ldr	r3, [pc, #8]	; (80144b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	20000730 	.word	0x20000730
 80144bc:	080152e4 	.word	0x080152e4

080144c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	4603      	mov	r3, r0
 80144c8:	6039      	str	r1, [r7, #0]
 80144ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80144cc:	79fb      	ldrb	r3, [r7, #7]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d105      	bne.n	80144de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80144d2:	683a      	ldr	r2, [r7, #0]
 80144d4:	4907      	ldr	r1, [pc, #28]	; (80144f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80144d6:	4808      	ldr	r0, [pc, #32]	; (80144f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80144d8:	f7ff fe5e 	bl	8014198 <USBD_GetString>
 80144dc:	e004      	b.n	80144e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80144de:	683a      	ldr	r2, [r7, #0]
 80144e0:	4904      	ldr	r1, [pc, #16]	; (80144f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80144e2:	4805      	ldr	r0, [pc, #20]	; (80144f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80144e4:	f7ff fe58 	bl	8014198 <USBD_GetString>
  }
  return USBD_StrDesc;
 80144e8:	4b02      	ldr	r3, [pc, #8]	; (80144f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	20000730 	.word	0x20000730
 80144f8:	080152f0 	.word	0x080152f0

080144fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014502:	4b0f      	ldr	r3, [pc, #60]	; (8014540 <Get_SerialNum+0x44>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014508:	4b0e      	ldr	r3, [pc, #56]	; (8014544 <Get_SerialNum+0x48>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801450e:	4b0e      	ldr	r3, [pc, #56]	; (8014548 <Get_SerialNum+0x4c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014514:	68fa      	ldr	r2, [r7, #12]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	4413      	add	r3, r2
 801451a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d009      	beq.n	8014536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014522:	2208      	movs	r2, #8
 8014524:	4909      	ldr	r1, [pc, #36]	; (801454c <Get_SerialNum+0x50>)
 8014526:	68f8      	ldr	r0, [r7, #12]
 8014528:	f000 f814 	bl	8014554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801452c:	2204      	movs	r2, #4
 801452e:	4908      	ldr	r1, [pc, #32]	; (8014550 <Get_SerialNum+0x54>)
 8014530:	68b8      	ldr	r0, [r7, #8]
 8014532:	f000 f80f 	bl	8014554 <IntToUnicode>
  }
}
 8014536:	bf00      	nop
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	1ffff7e8 	.word	0x1ffff7e8
 8014544:	1ffff7ec 	.word	0x1ffff7ec
 8014548:	1ffff7f0 	.word	0x1ffff7f0
 801454c:	200000f2 	.word	0x200000f2
 8014550:	20000102 	.word	0x20000102

08014554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014554:	b480      	push	{r7}
 8014556:	b087      	sub	sp, #28
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	4613      	mov	r3, r2
 8014560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014562:	2300      	movs	r3, #0
 8014564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014566:	2300      	movs	r3, #0
 8014568:	75fb      	strb	r3, [r7, #23]
 801456a:	e027      	b.n	80145bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	0f1b      	lsrs	r3, r3, #28
 8014570:	2b09      	cmp	r3, #9
 8014572:	d80b      	bhi.n	801458c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	0f1b      	lsrs	r3, r3, #28
 8014578:	b2da      	uxtb	r2, r3
 801457a:	7dfb      	ldrb	r3, [r7, #23]
 801457c:	005b      	lsls	r3, r3, #1
 801457e:	4619      	mov	r1, r3
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	440b      	add	r3, r1
 8014584:	3230      	adds	r2, #48	; 0x30
 8014586:	b2d2      	uxtb	r2, r2
 8014588:	701a      	strb	r2, [r3, #0]
 801458a:	e00a      	b.n	80145a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	0f1b      	lsrs	r3, r3, #28
 8014590:	b2da      	uxtb	r2, r3
 8014592:	7dfb      	ldrb	r3, [r7, #23]
 8014594:	005b      	lsls	r3, r3, #1
 8014596:	4619      	mov	r1, r3
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	440b      	add	r3, r1
 801459c:	3237      	adds	r2, #55	; 0x37
 801459e:	b2d2      	uxtb	r2, r2
 80145a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	011b      	lsls	r3, r3, #4
 80145a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80145a8:	7dfb      	ldrb	r3, [r7, #23]
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	3301      	adds	r3, #1
 80145ae:	68ba      	ldr	r2, [r7, #8]
 80145b0:	4413      	add	r3, r2
 80145b2:	2200      	movs	r2, #0
 80145b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80145b6:	7dfb      	ldrb	r3, [r7, #23]
 80145b8:	3301      	adds	r3, #1
 80145ba:	75fb      	strb	r3, [r7, #23]
 80145bc:	7dfa      	ldrb	r2, [r7, #23]
 80145be:	79fb      	ldrb	r3, [r7, #7]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d3d3      	bcc.n	801456c <IntToUnicode+0x18>
  }
}
 80145c4:	bf00      	nop
 80145c6:	bf00      	nop
 80145c8:	371c      	adds	r7, #28
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bc80      	pop	{r7}
 80145ce:	4770      	bx	lr

080145d0 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80145d0:	b480      	push	{r7}
 80145d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80145d4:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	46bd      	mov	sp, r7
 80145da:	bc80      	pop	{r7}
 80145dc:	4770      	bx	lr

080145de <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80145de:	b480      	push	{r7}
 80145e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80145e2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bc80      	pop	{r7}
 80145ea:	4770      	bx	lr

080145ec <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80145f4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	370c      	adds	r7, #12
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bc80      	pop	{r7}
 80145fe:	4770      	bx	lr

08014600 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8014600:	b480      	push	{r7}
 8014602:	b085      	sub	sp, #20
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 801460c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801460e:	4618      	mov	r0, r3
 8014610:	3714      	adds	r7, #20
 8014612:	46bd      	mov	sp, r7
 8014614:	bc80      	pop	{r7}
 8014616:	4770      	bx	lr

08014618 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8014618:	b480      	push	{r7}
 801461a:	b085      	sub	sp, #20
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8014624:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014626:	4618      	mov	r0, r3
 8014628:	3714      	adds	r7, #20
 801462a:	46bd      	mov	sp, r7
 801462c:	bc80      	pop	{r7}
 801462e:	4770      	bx	lr

08014630 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8014630:	b480      	push	{r7}
 8014632:	b085      	sub	sp, #20
 8014634:	af00      	add	r7, sp, #0
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	460b      	mov	r3, r1
 801463a:	607a      	str	r2, [r7, #4]
 801463c:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 801463e:	7afb      	ldrb	r3, [r7, #11]
 8014640:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8014642:	bf00      	nop
  }
  return (USBD_OK);
 8014644:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014646:	4618      	mov	r0, r3
 8014648:	3714      	adds	r7, #20
 801464a:	46bd      	mov	sp, r7
 801464c:	bc80      	pop	{r7}
 801464e:	4770      	bx	lr

08014650 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b088      	sub	sp, #32
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014658:	f107 0310 	add.w	r3, r7, #16
 801465c:	2200      	movs	r2, #0
 801465e:	601a      	str	r2, [r3, #0]
 8014660:	605a      	str	r2, [r3, #4]
 8014662:	609a      	str	r2, [r3, #8]
 8014664:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801466e:	d12c      	bne.n	80146ca <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014670:	4b18      	ldr	r3, [pc, #96]	; (80146d4 <HAL_PCD_MspInit+0x84>)
 8014672:	699b      	ldr	r3, [r3, #24]
 8014674:	4a17      	ldr	r2, [pc, #92]	; (80146d4 <HAL_PCD_MspInit+0x84>)
 8014676:	f043 0304 	orr.w	r3, r3, #4
 801467a:	6193      	str	r3, [r2, #24]
 801467c:	4b15      	ldr	r3, [pc, #84]	; (80146d4 <HAL_PCD_MspInit+0x84>)
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	f003 0304 	and.w	r3, r3, #4
 8014684:	60fb      	str	r3, [r7, #12]
 8014686:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014688:	f44f 7300 	mov.w	r3, #512	; 0x200
 801468c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801468e:	2300      	movs	r3, #0
 8014690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014692:	2300      	movs	r3, #0
 8014694:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014696:	f107 0310 	add.w	r3, r7, #16
 801469a:	4619      	mov	r1, r3
 801469c:	480e      	ldr	r0, [pc, #56]	; (80146d8 <HAL_PCD_MspInit+0x88>)
 801469e:	f7ef f9bd 	bl	8003a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80146a2:	4b0c      	ldr	r3, [pc, #48]	; (80146d4 <HAL_PCD_MspInit+0x84>)
 80146a4:	695b      	ldr	r3, [r3, #20]
 80146a6:	4a0b      	ldr	r2, [pc, #44]	; (80146d4 <HAL_PCD_MspInit+0x84>)
 80146a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80146ac:	6153      	str	r3, [r2, #20]
 80146ae:	4b09      	ldr	r3, [pc, #36]	; (80146d4 <HAL_PCD_MspInit+0x84>)
 80146b0:	695b      	ldr	r3, [r3, #20]
 80146b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80146b6:	60bb      	str	r3, [r7, #8]
 80146b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80146ba:	2200      	movs	r2, #0
 80146bc:	2100      	movs	r1, #0
 80146be:	2043      	movs	r0, #67	; 0x43
 80146c0:	f7ee fec3 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80146c4:	2043      	movs	r0, #67	; 0x43
 80146c6:	f7ee fedc 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80146ca:	bf00      	nop
 80146cc:	3720      	adds	r7, #32
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	40021000 	.word	0x40021000
 80146d8:	40010800 	.word	0x40010800

080146dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80146f0:	4619      	mov	r1, r3
 80146f2:	4610      	mov	r0, r2
 80146f4:	f7fe fdd4 	bl	80132a0 <USBD_LL_SetupStage>
}
 80146f8:	bf00      	nop
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	460b      	mov	r3, r1
 801470a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8014712:	78fa      	ldrb	r2, [r7, #3]
 8014714:	6879      	ldr	r1, [r7, #4]
 8014716:	4613      	mov	r3, r2
 8014718:	00db      	lsls	r3, r3, #3
 801471a:	1a9b      	subs	r3, r3, r2
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	440b      	add	r3, r1
 8014720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	78fb      	ldrb	r3, [r7, #3]
 8014728:	4619      	mov	r1, r3
 801472a:	f7fe fe06 	bl	801333a <USBD_LL_DataOutStage>
}
 801472e:	bf00      	nop
 8014730:	3708      	adds	r7, #8
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}

08014736 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014736:	b580      	push	{r7, lr}
 8014738:	b082      	sub	sp, #8
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
 801473e:	460b      	mov	r3, r1
 8014740:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8014748:	78fa      	ldrb	r2, [r7, #3]
 801474a:	6879      	ldr	r1, [r7, #4]
 801474c:	4613      	mov	r3, r2
 801474e:	00db      	lsls	r3, r3, #3
 8014750:	1a9b      	subs	r3, r3, r2
 8014752:	009b      	lsls	r3, r3, #2
 8014754:	440b      	add	r3, r1
 8014756:	3348      	adds	r3, #72	; 0x48
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	78fb      	ldrb	r3, [r7, #3]
 801475c:	4619      	mov	r1, r3
 801475e:	f7fe fe5d 	bl	801341c <USBD_LL_DataInStage>
}
 8014762:	bf00      	nop
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801476a:	b580      	push	{r7, lr}
 801476c:	b082      	sub	sp, #8
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014778:	4618      	mov	r0, r3
 801477a:	f7fe ff6d 	bl	8013658 <USBD_LL_SOF>
}
 801477e:	bf00      	nop
 8014780:	3708      	adds	r7, #8
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}

08014786 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014786:	b580      	push	{r7, lr}
 8014788:	b084      	sub	sp, #16
 801478a:	af00      	add	r7, sp, #0
 801478c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801478e:	2301      	movs	r3, #1
 8014790:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	2b02      	cmp	r3, #2
 8014798:	d001      	beq.n	801479e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801479a:	f7ec fd65 	bl	8001268 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80147a4:	7bfa      	ldrb	r2, [r7, #15]
 80147a6:	4611      	mov	r1, r2
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fe ff1d 	bl	80135e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fe fed6 	bl	8013566 <USBD_LL_Reset>
}
 80147ba:	bf00      	nop
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
	...

080147c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fe ff17 	bl	8013606 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	6812      	ldr	r2, [r2, #0]
 80147e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80147ea:	f043 0301 	orr.w	r3, r3, #1
 80147ee:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6a1b      	ldr	r3, [r3, #32]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d005      	beq.n	8014804 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80147f8:	4b04      	ldr	r3, [pc, #16]	; (801480c <HAL_PCD_SuspendCallback+0x48>)
 80147fa:	691b      	ldr	r3, [r3, #16]
 80147fc:	4a03      	ldr	r2, [pc, #12]	; (801480c <HAL_PCD_SuspendCallback+0x48>)
 80147fe:	f043 0306 	orr.w	r3, r3, #6
 8014802:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014804:	bf00      	nop
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	e000ed00 	.word	0xe000ed00

08014810 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801481e:	4618      	mov	r0, r3
 8014820:	f7fe ff05 	bl	801362e <USBD_LL_Resume>
}
 8014824:	bf00      	nop
 8014826:	3708      	adds	r7, #8
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b082      	sub	sp, #8
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	460b      	mov	r3, r1
 8014836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801483e:	78fa      	ldrb	r2, [r7, #3]
 8014840:	4611      	mov	r1, r2
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe ff2e 	bl	80136a4 <USBD_LL_IsoOUTIncomplete>
}
 8014848:	bf00      	nop
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	460b      	mov	r3, r1
 801485a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014862:	78fa      	ldrb	r2, [r7, #3]
 8014864:	4611      	mov	r1, r2
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe ff10 	bl	801368c <USBD_LL_IsoINIncomplete>
}
 801486c:	bf00      	nop
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014882:	4618      	mov	r0, r3
 8014884:	f7fe ff1a 	bl	80136bc <USBD_LL_DevConnected>
}
 8014888:	bf00      	nop
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}

08014890 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fe ff16 	bl	80136d0 <USBD_LL_DevDisconnected>
}
 80148a4:	bf00      	nop
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d133      	bne.n	8014924 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80148bc:	4a1c      	ldr	r2, [pc, #112]	; (8014930 <USBD_LL_Init+0x84>)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	4a1a      	ldr	r2, [pc, #104]	; (8014930 <USBD_LL_Init+0x84>)
 80148c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80148cc:	4b18      	ldr	r3, [pc, #96]	; (8014930 <USBD_LL_Init+0x84>)
 80148ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80148d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80148d4:	4b16      	ldr	r3, [pc, #88]	; (8014930 <USBD_LL_Init+0x84>)
 80148d6:	2204      	movs	r2, #4
 80148d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80148da:	4b15      	ldr	r3, [pc, #84]	; (8014930 <USBD_LL_Init+0x84>)
 80148dc:	2202      	movs	r2, #2
 80148de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80148e0:	4b13      	ldr	r3, [pc, #76]	; (8014930 <USBD_LL_Init+0x84>)
 80148e2:	2202      	movs	r2, #2
 80148e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80148e6:	4b12      	ldr	r3, [pc, #72]	; (8014930 <USBD_LL_Init+0x84>)
 80148e8:	2200      	movs	r2, #0
 80148ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80148ec:	4b10      	ldr	r3, [pc, #64]	; (8014930 <USBD_LL_Init+0x84>)
 80148ee:	2200      	movs	r2, #0
 80148f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80148f2:	4b0f      	ldr	r3, [pc, #60]	; (8014930 <USBD_LL_Init+0x84>)
 80148f4:	2201      	movs	r2, #1
 80148f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80148f8:	480d      	ldr	r0, [pc, #52]	; (8014930 <USBD_LL_Init+0x84>)
 80148fa:	f7ef fa2b 	bl	8003d54 <HAL_PCD_Init>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d001      	beq.n	8014908 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8014904:	f7ec fcb0 	bl	8001268 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014908:	2180      	movs	r1, #128	; 0x80
 801490a:	4809      	ldr	r0, [pc, #36]	; (8014930 <USBD_LL_Init+0x84>)
 801490c:	f7f0 fa02 	bl	8004d14 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014910:	2240      	movs	r2, #64	; 0x40
 8014912:	2100      	movs	r1, #0
 8014914:	4806      	ldr	r0, [pc, #24]	; (8014930 <USBD_LL_Init+0x84>)
 8014916:	f7f0 f9b7 	bl	8004c88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801491a:	2280      	movs	r2, #128	; 0x80
 801491c:	2101      	movs	r1, #1
 801491e:	4804      	ldr	r0, [pc, #16]	; (8014930 <USBD_LL_Init+0x84>)
 8014920:	f7f0 f9b2 	bl	8004c88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014924:	2300      	movs	r3, #0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	20000930 	.word	0x20000930

08014934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801493c:	2300      	movs	r3, #0
 801493e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014940:	2300      	movs	r3, #0
 8014942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801494a:	4618      	mov	r0, r3
 801494c:	f7ef fb1f 	bl	8003f8e <HAL_PCD_Start>
 8014950:	4603      	mov	r3, r0
 8014952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014954:	7bfb      	ldrb	r3, [r7, #15]
 8014956:	4618      	mov	r0, r3
 8014958:	f000 f92c 	bl	8014bb4 <USBD_Get_USB_Status>
 801495c:	4603      	mov	r3, r0
 801495e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014960:	7bbb      	ldrb	r3, [r7, #14]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3710      	adds	r7, #16
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}

0801496a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801496a:	b580      	push	{r7, lr}
 801496c:	b084      	sub	sp, #16
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014972:	2300      	movs	r3, #0
 8014974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014976:	2300      	movs	r3, #0
 8014978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014980:	4618      	mov	r0, r3
 8014982:	f7ef fb26 	bl	8003fd2 <HAL_PCD_Stop>
 8014986:	4603      	mov	r3, r0
 8014988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801498a:	7bfb      	ldrb	r3, [r7, #15]
 801498c:	4618      	mov	r0, r3
 801498e:	f000 f911 	bl	8014bb4 <USBD_Get_USB_Status>
 8014992:	4603      	mov	r3, r0
 8014994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014996:	7bbb      	ldrb	r3, [r7, #14]
}
 8014998:	4618      	mov	r0, r3
 801499a:	3710      	adds	r7, #16
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	4608      	mov	r0, r1
 80149aa:	4611      	mov	r1, r2
 80149ac:	461a      	mov	r2, r3
 80149ae:	4603      	mov	r3, r0
 80149b0:	70fb      	strb	r3, [r7, #3]
 80149b2:	460b      	mov	r3, r1
 80149b4:	70bb      	strb	r3, [r7, #2]
 80149b6:	4613      	mov	r3, r2
 80149b8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149ba:	2300      	movs	r3, #0
 80149bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149be:	2300      	movs	r3, #0
 80149c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80149c8:	78bb      	ldrb	r3, [r7, #2]
 80149ca:	883a      	ldrh	r2, [r7, #0]
 80149cc:	78f9      	ldrb	r1, [r7, #3]
 80149ce:	f7ef feb6 	bl	800473e <HAL_PCD_EP_Open>
 80149d2:	4603      	mov	r3, r0
 80149d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149d6:	7bfb      	ldrb	r3, [r7, #15]
 80149d8:	4618      	mov	r0, r3
 80149da:	f000 f8eb 	bl	8014bb4 <USBD_Get_USB_Status>
 80149de:	4603      	mov	r3, r0
 80149e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80149e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3710      	adds	r7, #16
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b084      	sub	sp, #16
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	460b      	mov	r3, r1
 80149f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149f8:	2300      	movs	r3, #0
 80149fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149fc:	2300      	movs	r3, #0
 80149fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a06:	78fa      	ldrb	r2, [r7, #3]
 8014a08:	4611      	mov	r1, r2
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7ef ff7a 	bl	8004904 <HAL_PCD_EP_SetStall>
 8014a10:	4603      	mov	r3, r0
 8014a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a14:	7bfb      	ldrb	r3, [r7, #15]
 8014a16:	4618      	mov	r0, r3
 8014a18:	f000 f8cc 	bl	8014bb4 <USBD_Get_USB_Status>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a2a:	b580      	push	{r7, lr}
 8014a2c:	b084      	sub	sp, #16
 8014a2e:	af00      	add	r7, sp, #0
 8014a30:	6078      	str	r0, [r7, #4]
 8014a32:	460b      	mov	r3, r1
 8014a34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a36:	2300      	movs	r3, #0
 8014a38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a44:	78fa      	ldrb	r2, [r7, #3]
 8014a46:	4611      	mov	r1, r2
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7ef ffbd 	bl	80049c8 <HAL_PCD_EP_ClrStall>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a52:	7bfb      	ldrb	r3, [r7, #15]
 8014a54:	4618      	mov	r0, r3
 8014a56:	f000 f8ad 	bl	8014bb4 <USBD_Get_USB_Status>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3710      	adds	r7, #16
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}

08014a68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b085      	sub	sp, #20
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	460b      	mov	r3, r1
 8014a72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014a7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	da0b      	bge.n	8014a9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014a84:	78fb      	ldrb	r3, [r7, #3]
 8014a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a8a:	68f9      	ldr	r1, [r7, #12]
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	00db      	lsls	r3, r3, #3
 8014a90:	1a9b      	subs	r3, r3, r2
 8014a92:	009b      	lsls	r3, r3, #2
 8014a94:	440b      	add	r3, r1
 8014a96:	333e      	adds	r3, #62	; 0x3e
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	e00b      	b.n	8014ab4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014a9c:	78fb      	ldrb	r3, [r7, #3]
 8014a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014aa2:	68f9      	ldr	r1, [r7, #12]
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	00db      	lsls	r3, r3, #3
 8014aa8:	1a9b      	subs	r3, r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	440b      	add	r3, r1
 8014aae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014ab2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3714      	adds	r7, #20
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bc80      	pop	{r7}
 8014abc:	4770      	bx	lr

08014abe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014abe:	b580      	push	{r7, lr}
 8014ac0:	b084      	sub	sp, #16
 8014ac2:	af00      	add	r7, sp, #0
 8014ac4:	6078      	str	r0, [r7, #4]
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014aca:	2300      	movs	r3, #0
 8014acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ad8:	78fa      	ldrb	r2, [r7, #3]
 8014ada:	4611      	mov	r1, r2
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7ef fe09 	bl	80046f4 <HAL_PCD_SetAddress>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ae6:	7bfb      	ldrb	r3, [r7, #15]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f000 f863 	bl	8014bb4 <USBD_Get_USB_Status>
 8014aee:	4603      	mov	r3, r0
 8014af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	3710      	adds	r7, #16
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}

08014afc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b086      	sub	sp, #24
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	607a      	str	r2, [r7, #4]
 8014b06:	461a      	mov	r2, r3
 8014b08:	460b      	mov	r3, r1
 8014b0a:	72fb      	strb	r3, [r7, #11]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b10:	2300      	movs	r3, #0
 8014b12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b14:	2300      	movs	r3, #0
 8014b16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014b1e:	893b      	ldrh	r3, [r7, #8]
 8014b20:	7af9      	ldrb	r1, [r7, #11]
 8014b22:	687a      	ldr	r2, [r7, #4]
 8014b24:	f7ef feb1 	bl	800488a <HAL_PCD_EP_Transmit>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b2c:	7dfb      	ldrb	r3, [r7, #23]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 f840 	bl	8014bb4 <USBD_Get_USB_Status>
 8014b34:	4603      	mov	r3, r0
 8014b36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014b38:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3718      	adds	r7, #24
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b086      	sub	sp, #24
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	60f8      	str	r0, [r7, #12]
 8014b4a:	607a      	str	r2, [r7, #4]
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	460b      	mov	r3, r1
 8014b50:	72fb      	strb	r3, [r7, #11]
 8014b52:	4613      	mov	r3, r2
 8014b54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b56:	2300      	movs	r3, #0
 8014b58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014b64:	893b      	ldrh	r3, [r7, #8]
 8014b66:	7af9      	ldrb	r1, [r7, #11]
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	f7ef fe50 	bl	800480e <HAL_PCD_EP_Receive>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b72:	7dfb      	ldrb	r3, [r7, #23]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f000 f81d 	bl	8014bb4 <USBD_Get_USB_Status>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014b7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3718      	adds	r7, #24
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b083      	sub	sp, #12
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014b90:	4b02      	ldr	r3, [pc, #8]	; (8014b9c <USBD_static_malloc+0x14>)
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	370c      	adds	r7, #12
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bc80      	pop	{r7}
 8014b9a:	4770      	bx	lr
 8014b9c:	20000d30 	.word	0x20000d30

08014ba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]

}
 8014ba8:	bf00      	nop
 8014baa:	370c      	adds	r7, #12
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bc80      	pop	{r7}
 8014bb0:	4770      	bx	lr
	...

08014bb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b085      	sub	sp, #20
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	4603      	mov	r3, r0
 8014bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014bc2:	79fb      	ldrb	r3, [r7, #7]
 8014bc4:	2b03      	cmp	r3, #3
 8014bc6:	d817      	bhi.n	8014bf8 <USBD_Get_USB_Status+0x44>
 8014bc8:	a201      	add	r2, pc, #4	; (adr r2, 8014bd0 <USBD_Get_USB_Status+0x1c>)
 8014bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bce:	bf00      	nop
 8014bd0:	08014be1 	.word	0x08014be1
 8014bd4:	08014be7 	.word	0x08014be7
 8014bd8:	08014bed 	.word	0x08014bed
 8014bdc:	08014bf3 	.word	0x08014bf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014be0:	2300      	movs	r3, #0
 8014be2:	73fb      	strb	r3, [r7, #15]
    break;
 8014be4:	e00b      	b.n	8014bfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014be6:	2302      	movs	r3, #2
 8014be8:	73fb      	strb	r3, [r7, #15]
    break;
 8014bea:	e008      	b.n	8014bfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014bec:	2301      	movs	r3, #1
 8014bee:	73fb      	strb	r3, [r7, #15]
    break;
 8014bf0:	e005      	b.n	8014bfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014bf2:	2302      	movs	r3, #2
 8014bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8014bf6:	e002      	b.n	8014bfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014bf8:	2302      	movs	r3, #2
 8014bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8014bfc:	bf00      	nop
  }
  return usb_status;
 8014bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3714      	adds	r7, #20
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bc80      	pop	{r7}
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop

08014c0c <_ZdlPvj>:
 8014c0c:	f000 b818 	b.w	8014c40 <_ZdlPv>

08014c10 <_ZdaPv>:
 8014c10:	f000 b816 	b.w	8014c40 <_ZdlPv>

08014c14 <_Znwj>:
 8014c14:	2801      	cmp	r0, #1
 8014c16:	bf38      	it	cc
 8014c18:	2001      	movcc	r0, #1
 8014c1a:	b510      	push	{r4, lr}
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	4620      	mov	r0, r4
 8014c20:	f000 f95c 	bl	8014edc <malloc>
 8014c24:	b930      	cbnz	r0, 8014c34 <_Znwj+0x20>
 8014c26:	f000 f81f 	bl	8014c68 <_ZSt15get_new_handlerv>
 8014c2a:	b908      	cbnz	r0, 8014c30 <_Znwj+0x1c>
 8014c2c:	f000 f924 	bl	8014e78 <abort>
 8014c30:	4780      	blx	r0
 8014c32:	e7f4      	b.n	8014c1e <_Znwj+0xa>
 8014c34:	bd10      	pop	{r4, pc}

08014c36 <_Znaj>:
 8014c36:	f7ff bfed 	b.w	8014c14 <_Znwj>

08014c3a <__cxa_pure_virtual>:
 8014c3a:	b508      	push	{r3, lr}
 8014c3c:	f000 f80e 	bl	8014c5c <_ZSt9terminatev>

08014c40 <_ZdlPv>:
 8014c40:	f000 b954 	b.w	8014eec <free>

08014c44 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8014c44:	b508      	push	{r3, lr}
 8014c46:	4780      	blx	r0
 8014c48:	f000 f916 	bl	8014e78 <abort>

08014c4c <_ZSt13get_terminatev>:
 8014c4c:	4b02      	ldr	r3, [pc, #8]	; (8014c58 <_ZSt13get_terminatev+0xc>)
 8014c4e:	6818      	ldr	r0, [r3, #0]
 8014c50:	f3bf 8f5b 	dmb	ish
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop
 8014c58:	20000128 	.word	0x20000128

08014c5c <_ZSt9terminatev>:
 8014c5c:	b508      	push	{r3, lr}
 8014c5e:	f7ff fff5 	bl	8014c4c <_ZSt13get_terminatev>
 8014c62:	f7ff ffef 	bl	8014c44 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08014c68 <_ZSt15get_new_handlerv>:
 8014c68:	4b02      	ldr	r3, [pc, #8]	; (8014c74 <_ZSt15get_new_handlerv+0xc>)
 8014c6a:	6818      	ldr	r0, [r3, #0]
 8014c6c:	f3bf 8f5b 	dmb	ish
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop
 8014c74:	20001150 	.word	0x20001150

08014c78 <ceil>:
 8014c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c7c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014c80:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8014c84:	2e13      	cmp	r6, #19
 8014c86:	4602      	mov	r2, r0
 8014c88:	460b      	mov	r3, r1
 8014c8a:	4607      	mov	r7, r0
 8014c8c:	460c      	mov	r4, r1
 8014c8e:	4605      	mov	r5, r0
 8014c90:	dc31      	bgt.n	8014cf6 <ceil+0x7e>
 8014c92:	2e00      	cmp	r6, #0
 8014c94:	da12      	bge.n	8014cbc <ceil+0x44>
 8014c96:	a334      	add	r3, pc, #208	; (adr r3, 8014d68 <ceil+0xf0>)
 8014c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9c:	f7eb fadc 	bl	8000258 <__adddf3>
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	f7eb ff1e 	bl	8000ae4 <__aeabi_dcmpgt>
 8014ca8:	b128      	cbz	r0, 8014cb6 <ceil+0x3e>
 8014caa:	2c00      	cmp	r4, #0
 8014cac:	db56      	blt.n	8014d5c <ceil+0xe4>
 8014cae:	433c      	orrs	r4, r7
 8014cb0:	d058      	beq.n	8014d64 <ceil+0xec>
 8014cb2:	2500      	movs	r5, #0
 8014cb4:	4c2e      	ldr	r4, [pc, #184]	; (8014d70 <ceil+0xf8>)
 8014cb6:	4623      	mov	r3, r4
 8014cb8:	462f      	mov	r7, r5
 8014cba:	e025      	b.n	8014d08 <ceil+0x90>
 8014cbc:	4a2d      	ldr	r2, [pc, #180]	; (8014d74 <ceil+0xfc>)
 8014cbe:	fa42 f806 	asr.w	r8, r2, r6
 8014cc2:	ea01 0208 	and.w	r2, r1, r8
 8014cc6:	4302      	orrs	r2, r0
 8014cc8:	d01e      	beq.n	8014d08 <ceil+0x90>
 8014cca:	a327      	add	r3, pc, #156	; (adr r3, 8014d68 <ceil+0xf0>)
 8014ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd0:	f7eb fac2 	bl	8000258 <__adddf3>
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	f7eb ff04 	bl	8000ae4 <__aeabi_dcmpgt>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d0ea      	beq.n	8014cb6 <ceil+0x3e>
 8014ce0:	2c00      	cmp	r4, #0
 8014ce2:	bfc2      	ittt	gt
 8014ce4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8014ce8:	fa43 f606 	asrgt.w	r6, r3, r6
 8014cec:	19a4      	addgt	r4, r4, r6
 8014cee:	2500      	movs	r5, #0
 8014cf0:	ea24 0408 	bic.w	r4, r4, r8
 8014cf4:	e7df      	b.n	8014cb6 <ceil+0x3e>
 8014cf6:	2e33      	cmp	r6, #51	; 0x33
 8014cf8:	dd0a      	ble.n	8014d10 <ceil+0x98>
 8014cfa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014cfe:	d103      	bne.n	8014d08 <ceil+0x90>
 8014d00:	f7eb faaa 	bl	8000258 <__adddf3>
 8014d04:	4607      	mov	r7, r0
 8014d06:	460b      	mov	r3, r1
 8014d08:	4638      	mov	r0, r7
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d14:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014d18:	fa22 f808 	lsr.w	r8, r2, r8
 8014d1c:	ea18 0f00 	tst.w	r8, r0
 8014d20:	d0f2      	beq.n	8014d08 <ceil+0x90>
 8014d22:	a311      	add	r3, pc, #68	; (adr r3, 8014d68 <ceil+0xf0>)
 8014d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d28:	f7eb fa96 	bl	8000258 <__adddf3>
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f7eb fed8 	bl	8000ae4 <__aeabi_dcmpgt>
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0be      	beq.n	8014cb6 <ceil+0x3e>
 8014d38:	2c00      	cmp	r4, #0
 8014d3a:	dd02      	ble.n	8014d42 <ceil+0xca>
 8014d3c:	2e14      	cmp	r6, #20
 8014d3e:	d103      	bne.n	8014d48 <ceil+0xd0>
 8014d40:	3401      	adds	r4, #1
 8014d42:	ea25 0508 	bic.w	r5, r5, r8
 8014d46:	e7b6      	b.n	8014cb6 <ceil+0x3e>
 8014d48:	2301      	movs	r3, #1
 8014d4a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014d4e:	fa03 f606 	lsl.w	r6, r3, r6
 8014d52:	4435      	add	r5, r6
 8014d54:	42bd      	cmp	r5, r7
 8014d56:	bf38      	it	cc
 8014d58:	18e4      	addcc	r4, r4, r3
 8014d5a:	e7f2      	b.n	8014d42 <ceil+0xca>
 8014d5c:	2500      	movs	r5, #0
 8014d5e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014d62:	e7a8      	b.n	8014cb6 <ceil+0x3e>
 8014d64:	4625      	mov	r5, r4
 8014d66:	e7a6      	b.n	8014cb6 <ceil+0x3e>
 8014d68:	8800759c 	.word	0x8800759c
 8014d6c:	7e37e43c 	.word	0x7e37e43c
 8014d70:	3ff00000 	.word	0x3ff00000
 8014d74:	000fffff 	.word	0x000fffff

08014d78 <floor>:
 8014d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d7c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014d80:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8014d84:	2e13      	cmp	r6, #19
 8014d86:	4602      	mov	r2, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	4607      	mov	r7, r0
 8014d8c:	460c      	mov	r4, r1
 8014d8e:	4605      	mov	r5, r0
 8014d90:	dc33      	bgt.n	8014dfa <floor+0x82>
 8014d92:	2e00      	cmp	r6, #0
 8014d94:	da14      	bge.n	8014dc0 <floor+0x48>
 8014d96:	a334      	add	r3, pc, #208	; (adr r3, 8014e68 <floor+0xf0>)
 8014d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9c:	f7eb fa5c 	bl	8000258 <__adddf3>
 8014da0:	2200      	movs	r2, #0
 8014da2:	2300      	movs	r3, #0
 8014da4:	f7eb fe9e 	bl	8000ae4 <__aeabi_dcmpgt>
 8014da8:	b138      	cbz	r0, 8014dba <floor+0x42>
 8014daa:	2c00      	cmp	r4, #0
 8014dac:	da58      	bge.n	8014e60 <floor+0xe8>
 8014dae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014db2:	431d      	orrs	r5, r3
 8014db4:	d001      	beq.n	8014dba <floor+0x42>
 8014db6:	2500      	movs	r5, #0
 8014db8:	4c2d      	ldr	r4, [pc, #180]	; (8014e70 <floor+0xf8>)
 8014dba:	4623      	mov	r3, r4
 8014dbc:	462f      	mov	r7, r5
 8014dbe:	e025      	b.n	8014e0c <floor+0x94>
 8014dc0:	4a2c      	ldr	r2, [pc, #176]	; (8014e74 <floor+0xfc>)
 8014dc2:	fa42 f806 	asr.w	r8, r2, r6
 8014dc6:	ea01 0208 	and.w	r2, r1, r8
 8014dca:	4302      	orrs	r2, r0
 8014dcc:	d01e      	beq.n	8014e0c <floor+0x94>
 8014dce:	a326      	add	r3, pc, #152	; (adr r3, 8014e68 <floor+0xf0>)
 8014dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd4:	f7eb fa40 	bl	8000258 <__adddf3>
 8014dd8:	2200      	movs	r2, #0
 8014dda:	2300      	movs	r3, #0
 8014ddc:	f7eb fe82 	bl	8000ae4 <__aeabi_dcmpgt>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	d0ea      	beq.n	8014dba <floor+0x42>
 8014de4:	2c00      	cmp	r4, #0
 8014de6:	bfbe      	ittt	lt
 8014de8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014dec:	fa43 f606 	asrlt.w	r6, r3, r6
 8014df0:	19a4      	addlt	r4, r4, r6
 8014df2:	2500      	movs	r5, #0
 8014df4:	ea24 0408 	bic.w	r4, r4, r8
 8014df8:	e7df      	b.n	8014dba <floor+0x42>
 8014dfa:	2e33      	cmp	r6, #51	; 0x33
 8014dfc:	dd0a      	ble.n	8014e14 <floor+0x9c>
 8014dfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014e02:	d103      	bne.n	8014e0c <floor+0x94>
 8014e04:	f7eb fa28 	bl	8000258 <__adddf3>
 8014e08:	4607      	mov	r7, r0
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	4638      	mov	r0, r7
 8014e0e:	4619      	mov	r1, r3
 8014e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e18:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014e1c:	fa22 f808 	lsr.w	r8, r2, r8
 8014e20:	ea18 0f00 	tst.w	r8, r0
 8014e24:	d0f2      	beq.n	8014e0c <floor+0x94>
 8014e26:	a310      	add	r3, pc, #64	; (adr r3, 8014e68 <floor+0xf0>)
 8014e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2c:	f7eb fa14 	bl	8000258 <__adddf3>
 8014e30:	2200      	movs	r2, #0
 8014e32:	2300      	movs	r3, #0
 8014e34:	f7eb fe56 	bl	8000ae4 <__aeabi_dcmpgt>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d0be      	beq.n	8014dba <floor+0x42>
 8014e3c:	2c00      	cmp	r4, #0
 8014e3e:	da02      	bge.n	8014e46 <floor+0xce>
 8014e40:	2e14      	cmp	r6, #20
 8014e42:	d103      	bne.n	8014e4c <floor+0xd4>
 8014e44:	3401      	adds	r4, #1
 8014e46:	ea25 0508 	bic.w	r5, r5, r8
 8014e4a:	e7b6      	b.n	8014dba <floor+0x42>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014e52:	fa03 f606 	lsl.w	r6, r3, r6
 8014e56:	4435      	add	r5, r6
 8014e58:	42bd      	cmp	r5, r7
 8014e5a:	bf38      	it	cc
 8014e5c:	18e4      	addcc	r4, r4, r3
 8014e5e:	e7f2      	b.n	8014e46 <floor+0xce>
 8014e60:	2500      	movs	r5, #0
 8014e62:	462c      	mov	r4, r5
 8014e64:	e7a9      	b.n	8014dba <floor+0x42>
 8014e66:	bf00      	nop
 8014e68:	8800759c 	.word	0x8800759c
 8014e6c:	7e37e43c 	.word	0x7e37e43c
 8014e70:	bff00000 	.word	0xbff00000
 8014e74:	000fffff 	.word	0x000fffff

08014e78 <abort>:
 8014e78:	2006      	movs	r0, #6
 8014e7a:	b508      	push	{r3, lr}
 8014e7c:	f000 f968 	bl	8015150 <raise>
 8014e80:	2001      	movs	r0, #1
 8014e82:	f7ec ff7a 	bl	8001d7a <_exit>
	...

08014e88 <__errno>:
 8014e88:	4b01      	ldr	r3, [pc, #4]	; (8014e90 <__errno+0x8>)
 8014e8a:	6818      	ldr	r0, [r3, #0]
 8014e8c:	4770      	bx	lr
 8014e8e:	bf00      	nop
 8014e90:	2000012c 	.word	0x2000012c

08014e94 <__libc_init_array>:
 8014e94:	b570      	push	{r4, r5, r6, lr}
 8014e96:	2600      	movs	r6, #0
 8014e98:	4d0c      	ldr	r5, [pc, #48]	; (8014ecc <__libc_init_array+0x38>)
 8014e9a:	4c0d      	ldr	r4, [pc, #52]	; (8014ed0 <__libc_init_array+0x3c>)
 8014e9c:	1b64      	subs	r4, r4, r5
 8014e9e:	10a4      	asrs	r4, r4, #2
 8014ea0:	42a6      	cmp	r6, r4
 8014ea2:	d109      	bne.n	8014eb8 <__libc_init_array+0x24>
 8014ea4:	f000 f97e 	bl	80151a4 <_init>
 8014ea8:	2600      	movs	r6, #0
 8014eaa:	4d0a      	ldr	r5, [pc, #40]	; (8014ed4 <__libc_init_array+0x40>)
 8014eac:	4c0a      	ldr	r4, [pc, #40]	; (8014ed8 <__libc_init_array+0x44>)
 8014eae:	1b64      	subs	r4, r4, r5
 8014eb0:	10a4      	asrs	r4, r4, #2
 8014eb2:	42a6      	cmp	r6, r4
 8014eb4:	d105      	bne.n	8014ec2 <__libc_init_array+0x2e>
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}
 8014eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ebc:	4798      	blx	r3
 8014ebe:	3601      	adds	r6, #1
 8014ec0:	e7ee      	b.n	8014ea0 <__libc_init_array+0xc>
 8014ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ec6:	4798      	blx	r3
 8014ec8:	3601      	adds	r6, #1
 8014eca:	e7f2      	b.n	8014eb2 <__libc_init_array+0x1e>
 8014ecc:	080156c0 	.word	0x080156c0
 8014ed0:	080156c0 	.word	0x080156c0
 8014ed4:	080156c0 	.word	0x080156c0
 8014ed8:	080156c8 	.word	0x080156c8

08014edc <malloc>:
 8014edc:	4b02      	ldr	r3, [pc, #8]	; (8014ee8 <malloc+0xc>)
 8014ede:	4601      	mov	r1, r0
 8014ee0:	6818      	ldr	r0, [r3, #0]
 8014ee2:	f000 b889 	b.w	8014ff8 <_malloc_r>
 8014ee6:	bf00      	nop
 8014ee8:	2000012c 	.word	0x2000012c

08014eec <free>:
 8014eec:	4b02      	ldr	r3, [pc, #8]	; (8014ef8 <free+0xc>)
 8014eee:	4601      	mov	r1, r0
 8014ef0:	6818      	ldr	r0, [r3, #0]
 8014ef2:	f000 b819 	b.w	8014f28 <_free_r>
 8014ef6:	bf00      	nop
 8014ef8:	2000012c 	.word	0x2000012c

08014efc <memcpy>:
 8014efc:	440a      	add	r2, r1
 8014efe:	4291      	cmp	r1, r2
 8014f00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014f04:	d100      	bne.n	8014f08 <memcpy+0xc>
 8014f06:	4770      	bx	lr
 8014f08:	b510      	push	{r4, lr}
 8014f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f0e:	4291      	cmp	r1, r2
 8014f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f14:	d1f9      	bne.n	8014f0a <memcpy+0xe>
 8014f16:	bd10      	pop	{r4, pc}

08014f18 <memset>:
 8014f18:	4603      	mov	r3, r0
 8014f1a:	4402      	add	r2, r0
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d100      	bne.n	8014f22 <memset+0xa>
 8014f20:	4770      	bx	lr
 8014f22:	f803 1b01 	strb.w	r1, [r3], #1
 8014f26:	e7f9      	b.n	8014f1c <memset+0x4>

08014f28 <_free_r>:
 8014f28:	b538      	push	{r3, r4, r5, lr}
 8014f2a:	4605      	mov	r5, r0
 8014f2c:	2900      	cmp	r1, #0
 8014f2e:	d040      	beq.n	8014fb2 <_free_r+0x8a>
 8014f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f34:	1f0c      	subs	r4, r1, #4
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	bfb8      	it	lt
 8014f3a:	18e4      	addlt	r4, r4, r3
 8014f3c:	f000 f924 	bl	8015188 <__malloc_lock>
 8014f40:	4a1c      	ldr	r2, [pc, #112]	; (8014fb4 <_free_r+0x8c>)
 8014f42:	6813      	ldr	r3, [r2, #0]
 8014f44:	b933      	cbnz	r3, 8014f54 <_free_r+0x2c>
 8014f46:	6063      	str	r3, [r4, #4]
 8014f48:	6014      	str	r4, [r2, #0]
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f50:	f000 b920 	b.w	8015194 <__malloc_unlock>
 8014f54:	42a3      	cmp	r3, r4
 8014f56:	d908      	bls.n	8014f6a <_free_r+0x42>
 8014f58:	6820      	ldr	r0, [r4, #0]
 8014f5a:	1821      	adds	r1, r4, r0
 8014f5c:	428b      	cmp	r3, r1
 8014f5e:	bf01      	itttt	eq
 8014f60:	6819      	ldreq	r1, [r3, #0]
 8014f62:	685b      	ldreq	r3, [r3, #4]
 8014f64:	1809      	addeq	r1, r1, r0
 8014f66:	6021      	streq	r1, [r4, #0]
 8014f68:	e7ed      	b.n	8014f46 <_free_r+0x1e>
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	b10b      	cbz	r3, 8014f74 <_free_r+0x4c>
 8014f70:	42a3      	cmp	r3, r4
 8014f72:	d9fa      	bls.n	8014f6a <_free_r+0x42>
 8014f74:	6811      	ldr	r1, [r2, #0]
 8014f76:	1850      	adds	r0, r2, r1
 8014f78:	42a0      	cmp	r0, r4
 8014f7a:	d10b      	bne.n	8014f94 <_free_r+0x6c>
 8014f7c:	6820      	ldr	r0, [r4, #0]
 8014f7e:	4401      	add	r1, r0
 8014f80:	1850      	adds	r0, r2, r1
 8014f82:	4283      	cmp	r3, r0
 8014f84:	6011      	str	r1, [r2, #0]
 8014f86:	d1e0      	bne.n	8014f4a <_free_r+0x22>
 8014f88:	6818      	ldr	r0, [r3, #0]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	4401      	add	r1, r0
 8014f8e:	6011      	str	r1, [r2, #0]
 8014f90:	6053      	str	r3, [r2, #4]
 8014f92:	e7da      	b.n	8014f4a <_free_r+0x22>
 8014f94:	d902      	bls.n	8014f9c <_free_r+0x74>
 8014f96:	230c      	movs	r3, #12
 8014f98:	602b      	str	r3, [r5, #0]
 8014f9a:	e7d6      	b.n	8014f4a <_free_r+0x22>
 8014f9c:	6820      	ldr	r0, [r4, #0]
 8014f9e:	1821      	adds	r1, r4, r0
 8014fa0:	428b      	cmp	r3, r1
 8014fa2:	bf01      	itttt	eq
 8014fa4:	6819      	ldreq	r1, [r3, #0]
 8014fa6:	685b      	ldreq	r3, [r3, #4]
 8014fa8:	1809      	addeq	r1, r1, r0
 8014faa:	6021      	streq	r1, [r4, #0]
 8014fac:	6063      	str	r3, [r4, #4]
 8014fae:	6054      	str	r4, [r2, #4]
 8014fb0:	e7cb      	b.n	8014f4a <_free_r+0x22>
 8014fb2:	bd38      	pop	{r3, r4, r5, pc}
 8014fb4:	20001154 	.word	0x20001154

08014fb8 <sbrk_aligned>:
 8014fb8:	b570      	push	{r4, r5, r6, lr}
 8014fba:	4e0e      	ldr	r6, [pc, #56]	; (8014ff4 <sbrk_aligned+0x3c>)
 8014fbc:	460c      	mov	r4, r1
 8014fbe:	6831      	ldr	r1, [r6, #0]
 8014fc0:	4605      	mov	r5, r0
 8014fc2:	b911      	cbnz	r1, 8014fca <sbrk_aligned+0x12>
 8014fc4:	f000 f88c 	bl	80150e0 <_sbrk_r>
 8014fc8:	6030      	str	r0, [r6, #0]
 8014fca:	4621      	mov	r1, r4
 8014fcc:	4628      	mov	r0, r5
 8014fce:	f000 f887 	bl	80150e0 <_sbrk_r>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d00a      	beq.n	8014fec <sbrk_aligned+0x34>
 8014fd6:	1cc4      	adds	r4, r0, #3
 8014fd8:	f024 0403 	bic.w	r4, r4, #3
 8014fdc:	42a0      	cmp	r0, r4
 8014fde:	d007      	beq.n	8014ff0 <sbrk_aligned+0x38>
 8014fe0:	1a21      	subs	r1, r4, r0
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	f000 f87c 	bl	80150e0 <_sbrk_r>
 8014fe8:	3001      	adds	r0, #1
 8014fea:	d101      	bne.n	8014ff0 <sbrk_aligned+0x38>
 8014fec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	bd70      	pop	{r4, r5, r6, pc}
 8014ff4:	20001158 	.word	0x20001158

08014ff8 <_malloc_r>:
 8014ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ffc:	1ccd      	adds	r5, r1, #3
 8014ffe:	f025 0503 	bic.w	r5, r5, #3
 8015002:	3508      	adds	r5, #8
 8015004:	2d0c      	cmp	r5, #12
 8015006:	bf38      	it	cc
 8015008:	250c      	movcc	r5, #12
 801500a:	2d00      	cmp	r5, #0
 801500c:	4607      	mov	r7, r0
 801500e:	db01      	blt.n	8015014 <_malloc_r+0x1c>
 8015010:	42a9      	cmp	r1, r5
 8015012:	d905      	bls.n	8015020 <_malloc_r+0x28>
 8015014:	230c      	movs	r3, #12
 8015016:	2600      	movs	r6, #0
 8015018:	603b      	str	r3, [r7, #0]
 801501a:	4630      	mov	r0, r6
 801501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015020:	4e2e      	ldr	r6, [pc, #184]	; (80150dc <_malloc_r+0xe4>)
 8015022:	f000 f8b1 	bl	8015188 <__malloc_lock>
 8015026:	6833      	ldr	r3, [r6, #0]
 8015028:	461c      	mov	r4, r3
 801502a:	bb34      	cbnz	r4, 801507a <_malloc_r+0x82>
 801502c:	4629      	mov	r1, r5
 801502e:	4638      	mov	r0, r7
 8015030:	f7ff ffc2 	bl	8014fb8 <sbrk_aligned>
 8015034:	1c43      	adds	r3, r0, #1
 8015036:	4604      	mov	r4, r0
 8015038:	d14d      	bne.n	80150d6 <_malloc_r+0xde>
 801503a:	6834      	ldr	r4, [r6, #0]
 801503c:	4626      	mov	r6, r4
 801503e:	2e00      	cmp	r6, #0
 8015040:	d140      	bne.n	80150c4 <_malloc_r+0xcc>
 8015042:	6823      	ldr	r3, [r4, #0]
 8015044:	4631      	mov	r1, r6
 8015046:	4638      	mov	r0, r7
 8015048:	eb04 0803 	add.w	r8, r4, r3
 801504c:	f000 f848 	bl	80150e0 <_sbrk_r>
 8015050:	4580      	cmp	r8, r0
 8015052:	d13a      	bne.n	80150ca <_malloc_r+0xd2>
 8015054:	6821      	ldr	r1, [r4, #0]
 8015056:	3503      	adds	r5, #3
 8015058:	1a6d      	subs	r5, r5, r1
 801505a:	f025 0503 	bic.w	r5, r5, #3
 801505e:	3508      	adds	r5, #8
 8015060:	2d0c      	cmp	r5, #12
 8015062:	bf38      	it	cc
 8015064:	250c      	movcc	r5, #12
 8015066:	4638      	mov	r0, r7
 8015068:	4629      	mov	r1, r5
 801506a:	f7ff ffa5 	bl	8014fb8 <sbrk_aligned>
 801506e:	3001      	adds	r0, #1
 8015070:	d02b      	beq.n	80150ca <_malloc_r+0xd2>
 8015072:	6823      	ldr	r3, [r4, #0]
 8015074:	442b      	add	r3, r5
 8015076:	6023      	str	r3, [r4, #0]
 8015078:	e00e      	b.n	8015098 <_malloc_r+0xa0>
 801507a:	6822      	ldr	r2, [r4, #0]
 801507c:	1b52      	subs	r2, r2, r5
 801507e:	d41e      	bmi.n	80150be <_malloc_r+0xc6>
 8015080:	2a0b      	cmp	r2, #11
 8015082:	d916      	bls.n	80150b2 <_malloc_r+0xba>
 8015084:	1961      	adds	r1, r4, r5
 8015086:	42a3      	cmp	r3, r4
 8015088:	6025      	str	r5, [r4, #0]
 801508a:	bf18      	it	ne
 801508c:	6059      	strne	r1, [r3, #4]
 801508e:	6863      	ldr	r3, [r4, #4]
 8015090:	bf08      	it	eq
 8015092:	6031      	streq	r1, [r6, #0]
 8015094:	5162      	str	r2, [r4, r5]
 8015096:	604b      	str	r3, [r1, #4]
 8015098:	4638      	mov	r0, r7
 801509a:	f104 060b 	add.w	r6, r4, #11
 801509e:	f000 f879 	bl	8015194 <__malloc_unlock>
 80150a2:	f026 0607 	bic.w	r6, r6, #7
 80150a6:	1d23      	adds	r3, r4, #4
 80150a8:	1af2      	subs	r2, r6, r3
 80150aa:	d0b6      	beq.n	801501a <_malloc_r+0x22>
 80150ac:	1b9b      	subs	r3, r3, r6
 80150ae:	50a3      	str	r3, [r4, r2]
 80150b0:	e7b3      	b.n	801501a <_malloc_r+0x22>
 80150b2:	6862      	ldr	r2, [r4, #4]
 80150b4:	42a3      	cmp	r3, r4
 80150b6:	bf0c      	ite	eq
 80150b8:	6032      	streq	r2, [r6, #0]
 80150ba:	605a      	strne	r2, [r3, #4]
 80150bc:	e7ec      	b.n	8015098 <_malloc_r+0xa0>
 80150be:	4623      	mov	r3, r4
 80150c0:	6864      	ldr	r4, [r4, #4]
 80150c2:	e7b2      	b.n	801502a <_malloc_r+0x32>
 80150c4:	4634      	mov	r4, r6
 80150c6:	6876      	ldr	r6, [r6, #4]
 80150c8:	e7b9      	b.n	801503e <_malloc_r+0x46>
 80150ca:	230c      	movs	r3, #12
 80150cc:	4638      	mov	r0, r7
 80150ce:	603b      	str	r3, [r7, #0]
 80150d0:	f000 f860 	bl	8015194 <__malloc_unlock>
 80150d4:	e7a1      	b.n	801501a <_malloc_r+0x22>
 80150d6:	6025      	str	r5, [r4, #0]
 80150d8:	e7de      	b.n	8015098 <_malloc_r+0xa0>
 80150da:	bf00      	nop
 80150dc:	20001154 	.word	0x20001154

080150e0 <_sbrk_r>:
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	2300      	movs	r3, #0
 80150e4:	4d05      	ldr	r5, [pc, #20]	; (80150fc <_sbrk_r+0x1c>)
 80150e6:	4604      	mov	r4, r0
 80150e8:	4608      	mov	r0, r1
 80150ea:	602b      	str	r3, [r5, #0]
 80150ec:	f7ec fe50 	bl	8001d90 <_sbrk>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	d102      	bne.n	80150fa <_sbrk_r+0x1a>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	b103      	cbz	r3, 80150fa <_sbrk_r+0x1a>
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	2000115c 	.word	0x2000115c

08015100 <_raise_r>:
 8015100:	291f      	cmp	r1, #31
 8015102:	b538      	push	{r3, r4, r5, lr}
 8015104:	4604      	mov	r4, r0
 8015106:	460d      	mov	r5, r1
 8015108:	d904      	bls.n	8015114 <_raise_r+0x14>
 801510a:	2316      	movs	r3, #22
 801510c:	6003      	str	r3, [r0, #0]
 801510e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015112:	bd38      	pop	{r3, r4, r5, pc}
 8015114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015116:	b112      	cbz	r2, 801511e <_raise_r+0x1e>
 8015118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801511c:	b94b      	cbnz	r3, 8015132 <_raise_r+0x32>
 801511e:	4620      	mov	r0, r4
 8015120:	f000 f830 	bl	8015184 <_getpid_r>
 8015124:	462a      	mov	r2, r5
 8015126:	4601      	mov	r1, r0
 8015128:	4620      	mov	r0, r4
 801512a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801512e:	f000 b817 	b.w	8015160 <_kill_r>
 8015132:	2b01      	cmp	r3, #1
 8015134:	d00a      	beq.n	801514c <_raise_r+0x4c>
 8015136:	1c59      	adds	r1, r3, #1
 8015138:	d103      	bne.n	8015142 <_raise_r+0x42>
 801513a:	2316      	movs	r3, #22
 801513c:	6003      	str	r3, [r0, #0]
 801513e:	2001      	movs	r0, #1
 8015140:	e7e7      	b.n	8015112 <_raise_r+0x12>
 8015142:	2400      	movs	r4, #0
 8015144:	4628      	mov	r0, r5
 8015146:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801514a:	4798      	blx	r3
 801514c:	2000      	movs	r0, #0
 801514e:	e7e0      	b.n	8015112 <_raise_r+0x12>

08015150 <raise>:
 8015150:	4b02      	ldr	r3, [pc, #8]	; (801515c <raise+0xc>)
 8015152:	4601      	mov	r1, r0
 8015154:	6818      	ldr	r0, [r3, #0]
 8015156:	f7ff bfd3 	b.w	8015100 <_raise_r>
 801515a:	bf00      	nop
 801515c:	2000012c 	.word	0x2000012c

08015160 <_kill_r>:
 8015160:	b538      	push	{r3, r4, r5, lr}
 8015162:	2300      	movs	r3, #0
 8015164:	4d06      	ldr	r5, [pc, #24]	; (8015180 <_kill_r+0x20>)
 8015166:	4604      	mov	r4, r0
 8015168:	4608      	mov	r0, r1
 801516a:	4611      	mov	r1, r2
 801516c:	602b      	str	r3, [r5, #0]
 801516e:	f7ec fdf4 	bl	8001d5a <_kill>
 8015172:	1c43      	adds	r3, r0, #1
 8015174:	d102      	bne.n	801517c <_kill_r+0x1c>
 8015176:	682b      	ldr	r3, [r5, #0]
 8015178:	b103      	cbz	r3, 801517c <_kill_r+0x1c>
 801517a:	6023      	str	r3, [r4, #0]
 801517c:	bd38      	pop	{r3, r4, r5, pc}
 801517e:	bf00      	nop
 8015180:	2000115c 	.word	0x2000115c

08015184 <_getpid_r>:
 8015184:	f7ec bde2 	b.w	8001d4c <_getpid>

08015188 <__malloc_lock>:
 8015188:	4801      	ldr	r0, [pc, #4]	; (8015190 <__malloc_lock+0x8>)
 801518a:	f000 b809 	b.w	80151a0 <__retarget_lock_acquire_recursive>
 801518e:	bf00      	nop
 8015190:	20001160 	.word	0x20001160

08015194 <__malloc_unlock>:
 8015194:	4801      	ldr	r0, [pc, #4]	; (801519c <__malloc_unlock+0x8>)
 8015196:	f000 b804 	b.w	80151a2 <__retarget_lock_release_recursive>
 801519a:	bf00      	nop
 801519c:	20001160 	.word	0x20001160

080151a0 <__retarget_lock_acquire_recursive>:
 80151a0:	4770      	bx	lr

080151a2 <__retarget_lock_release_recursive>:
 80151a2:	4770      	bx	lr

080151a4 <_init>:
 80151a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151a6:	bf00      	nop
 80151a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151aa:	bc08      	pop	{r3}
 80151ac:	469e      	mov	lr, r3
 80151ae:	4770      	bx	lr

080151b0 <_fini>:
 80151b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b2:	bf00      	nop
 80151b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151b6:	bc08      	pop	{r3}
 80151b8:	469e      	mov	lr, r3
 80151ba:	4770      	bx	lr
