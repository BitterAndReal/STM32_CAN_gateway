
Cube CAN gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000193f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  080195dc  080195dc  000295dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019d64  08019d64  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08019d64  08019d64  00029d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019d6c  08019d6c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019d6c  08019d6c  00029d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08019d74  08019d74  00029d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08019d7c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001680  200001e0  08019f5c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001860  08019f5c  00031860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004767c  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000829b  00000000  00000000  00077885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d68  00000000  00000000  0007fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b00  00000000  00000000  00082888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a69f  00000000  00000000  00085388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031187  00000000  00000000  000afa27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df145  00000000  00000000  000e0bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bfcf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e11c  00000000  00000000  001bfd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	080195c4 	.word	0x080195c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	080195c4 	.word	0x080195c4

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b976 	b.w	8000f2c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14d      	bne.n	8000d04 <__udivmoddi4+0xac>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d968      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b152      	cbz	r2, 8000c8a <__udivmoddi4+0x32>
 8000c74:	fa01 f302 	lsl.w	r3, r1, r2
 8000c78:	f1c2 0120 	rsb	r1, r2, #32
 8000c7c:	fa20 f101 	lsr.w	r1, r0, r1
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	ea41 0803 	orr.w	r8, r1, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c8e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	fb01 8817 	mls	r8, r1, r7, r8
 8000c9a:	fb07 f00e 	mul.w	r0, r7, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca4:	4298      	cmp	r0, r3
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x66>
 8000ca8:	eb1c 0303 	adds.w	r3, ip, r3
 8000cac:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000cb0:	f080 811e 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	f240 811b 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cba:	3f02      	subs	r7, #2
 8000cbc:	4463      	add	r3, ip
 8000cbe:	1a1b      	subs	r3, r3, r0
 8000cc0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000cc4:	fb01 3310 	mls	r3, r1, r0, r3
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	f080 8109 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f240 8106 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce8:	4464      	add	r4, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	2100      	movs	r1, #0
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf6:	b11e      	cbz	r6, 8000d00 <__udivmoddi4+0xa8>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	40d4      	lsrs	r4, r2
 8000cfc:	e9c6 4300 	strd	r4, r3, [r6]
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	f000 80ee 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0e:	2100      	movs	r1, #0
 8000d10:	e9c6 0500 	strd	r0, r5, [r6]
 8000d14:	4608      	mov	r0, r1
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f183 	clz	r1, r3
 8000d1e:	2900      	cmp	r1, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fc 	bhi.w	8000f24 <__udivmoddi4+0x2cc>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb65 0303 	sbc.w	r3, r5, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4698      	mov	r8, r3
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e2      	beq.n	8000d00 <__udivmoddi4+0xa8>
 8000d3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3e:	e7df      	b.n	8000d00 <__udivmoddi4+0xa8>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8091 	bne.w	8000e70 <__udivmoddi4+0x218>
 8000d4e:	eba1 000c 	sub.w	r0, r1, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d60:	fb07 0013 	mls	r0, r7, r3, r0
 8000d64:	0c25      	lsrs	r5, r4, #16
 8000d66:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0505 	adds.w	r5, ip, r5
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	42a8      	cmp	r0, r5
 8000d7e:	f200 80ce 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a2d      	subs	r5, r5, r0
 8000d86:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d8a:	fb07 5510 	mls	r5, r7, r0, r5
 8000d8e:	fb0e fe00 	mul.w	lr, lr, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80b6 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000dac:	4628      	mov	r0, r5
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79e      	b.n	8000cf6 <__udivmoddi4+0x9e>
 8000db8:	f1c1 0720 	rsb	r7, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000dca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dce:	fbba f8f9 	udiv	r8, sl, r9
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dda:	408d      	lsls	r5, r1
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	431d      	orrs	r5, r3
 8000de2:	fa00 f301 	lsl.w	r3, r0, r1
 8000de6:	fb08 f00e 	mul.w	r0, r8, lr
 8000dea:	0c2c      	lsrs	r4, r5, #16
 8000dec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	42a0      	cmp	r0, r4
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4464      	add	r4, ip
 8000e10:	1a24      	subs	r4, r4, r0
 8000e12:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e16:	fb09 4410 	mls	r4, r9, r0, r4
 8000e1a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e1e:	b2ad      	uxth	r5, r5
 8000e20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4464      	add	r4, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9502 	umull	r9, r5, r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	42ac      	cmp	r4, r5
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46ae      	mov	lr, r5
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d069      	beq.n	8000f28 <__udivmoddi4+0x2d0>
 8000e54:	ebb3 0208 	subs.w	r2, r3, r8
 8000e58:	eb64 040e 	sbc.w	r4, r4, lr
 8000e5c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e60:	fa04 f707 	lsl.w	r7, r4, r7
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	e9c6 7400 	strd	r7, r4, [r6]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e747      	b.n	8000d00 <__udivmoddi4+0xa8>
 8000e70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e74:	f1c2 0120 	rsb	r1, r2, #32
 8000e78:	fa25 f301 	lsr.w	r3, r5, r1
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa20 f101 	lsr.w	r1, r0, r1
 8000e84:	4095      	lsls	r5, r2
 8000e86:	430d      	orrs	r5, r1
 8000e88:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e8c:	fb07 3311 	mls	r3, r7, r1, r3
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	0c28      	lsrs	r0, r5, #16
 8000e96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e9a:	fb01 f30e 	mul.w	r3, r1, lr
 8000e9e:	4283      	cmp	r3, r0
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0000 	adds.w	r0, ip, r0
 8000eaa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	4283      	cmp	r3, r0
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3902      	subs	r1, #2
 8000eb6:	4460      	add	r0, ip
 8000eb8:	1ac0      	subs	r0, r0, r3
 8000eba:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ebe:	fb07 0013 	mls	r0, r7, r3, r0
 8000ec2:	b2ad      	uxth	r5, r5
 8000ec4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ec8:	fb03 f00e 	mul.w	r0, r3, lr
 8000ecc:	42a8      	cmp	r0, r5
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ed4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	42a8      	cmp	r0, r5
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4465      	add	r5, ip
 8000ee2:	1a28      	subs	r0, r5, r0
 8000ee4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	4631      	mov	r1, r6
 8000eec:	4630      	mov	r0, r6
 8000eee:	e707      	b.n	8000d00 <__udivmoddi4+0xa8>
 8000ef0:	462f      	mov	r7, r5
 8000ef2:	e6e4      	b.n	8000cbe <__udivmoddi4+0x66>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f9      	b.n	8000cec <__udivmoddi4+0x94>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4643      	mov	r3, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4641      	mov	r1, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	4464      	add	r4, ip
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	e747      	b.n	8000dae <__udivmoddi4+0x156>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	4465      	add	r5, ip
 8000f22:	e72f      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e706      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e6e9      	b.n	8000d00 <__udivmoddi4+0xa8>

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <cpp_link>:
	extern "C"
	{
#endif

	void cpp_link (void)
		{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
		    myCppProcessInit();
 8000f34:	f002 fa82 	bl	800343c <_Z16myCppProcessInitv>
		    myCppProcess();
 8000f38:	f002 fb5c 	bl	80035f4 <_Z12myCppProcessv>

		}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000f46:	2306      	movs	r3, #6
 8000f48:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	83fb      	strh	r3, [r7, #30]
 8000f56:	2300      	movs	r3, #0
 8000f58:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000f64:	4ba0      	ldr	r3, [pc, #640]	; (80011e8 <EE_Init+0x2a8>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000f6a:	4ba0      	ldr	r3, [pc, #640]	; (80011ec <EE_Init+0x2ac>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000f74:	4b9c      	ldr	r3, [pc, #624]	; (80011e8 <EE_Init+0x2a8>)
 8000f76:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8000f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00b      	beq.n	8000f9e <EE_Init+0x5e>
 8000f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8a:	f280 8196 	bge.w	80012ba <EE_Init+0x37a>
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80f8 	beq.w	8001184 <EE_Init+0x244>
 8000f94:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d050      	beq.n	800103e <EE_Init+0xfe>
 8000f9c:	e18d      	b.n	80012ba <EE_Init+0x37a>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000f9e:	8c3b      	ldrh	r3, [r7, #32]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d116      	bne.n	8000fd2 <EE_Init+0x92>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000fa4:	4890      	ldr	r0, [pc, #576]	; (80011e8 <EE_Init+0x2a8>)
 8000fa6:	f000 f9a9 	bl	80012fc <EE_VerifyPageFullyErased>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f040 818e 	bne.w	80012ce <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000fb2:	f107 0214 	add.w	r2, r7, #20
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 fba6 	bl	800670c <HAL_FLASHEx_Erase>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000fc4:	7efb      	ldrb	r3, [r7, #27]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8181 	beq.w	80012ce <EE_Init+0x38e>
          {
            return flashstatus;
 8000fcc:	7efb      	ldrb	r3, [r7, #27]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	e185      	b.n	80012de <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000fd2:	8c3b      	ldrh	r3, [r7, #32]
 8000fd4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d125      	bne.n	8001028 <EE_Init+0xe8>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000fdc:	4882      	ldr	r0, [pc, #520]	; (80011e8 <EE_Init+0x2a8>)
 8000fde:	f000 f98d 	bl	80012fc <EE_VerifyPageFullyErased>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10e      	bne.n	8001006 <EE_Init+0xc6>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000fe8:	f107 0214 	add.w	r2, r7, #20
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f005 fb8b 	bl	800670c <HAL_FLASHEx_Erase>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <EE_Init+0xc6>
          {
            return flashstatus;
 8001000:	7efb      	ldrb	r3, [r7, #27]
 8001002:	b29b      	uxth	r3, r3
 8001004:	e16b      	b.n	80012de <EE_Init+0x39e>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	4977      	ldr	r1, [pc, #476]	; (80011ec <EE_Init+0x2ac>)
 8001010:	2001      	movs	r0, #1
 8001012:	f005 fa33 	bl	800647c <HAL_FLASH_Program>
 8001016:	4603      	mov	r3, r0
 8001018:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800101a:	7efb      	ldrb	r3, [r7, #27]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8156 	beq.w	80012ce <EE_Init+0x38e>
        {
          return flashstatus;
 8001022:	7efb      	ldrb	r3, [r7, #27]
 8001024:	b29b      	uxth	r3, r3
 8001026:	e15a      	b.n	80012de <EE_Init+0x39e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001028:	f000 f9d8 	bl	80013dc <EE_Format>
 800102c:	4603      	mov	r3, r0
 800102e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001030:	7efb      	ldrb	r3, [r7, #27]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 814b 	beq.w	80012ce <EE_Init+0x38e>
        {
          return flashstatus;
 8001038:	7efb      	ldrb	r3, [r7, #27]
 800103a:	b29b      	uxth	r3, r3
 800103c:	e14f      	b.n	80012de <EE_Init+0x39e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800103e:	8c3b      	ldrh	r3, [r7, #32]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d163      	bne.n	800110c <EE_Init+0x1cc>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001044:	2300      	movs	r3, #0
 8001046:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001048:	e030      	b.n	80010ac <EE_Init+0x16c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800104a:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <EE_Init+0x2b0>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	b29a      	uxth	r2, r3
 8001050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001052:	4968      	ldr	r1, [pc, #416]	; (80011f4 <EE_Init+0x2b4>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d101      	bne.n	8001060 <EE_Init+0x120>
          {
            x = varidx;
 800105c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800105e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8001060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001062:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001066:	429a      	cmp	r2, r3
 8001068:	d01d      	beq.n	80010a6 <EE_Init+0x166>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800106a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800106c:	4a61      	ldr	r2, [pc, #388]	; (80011f4 <EE_Init+0x2b4>)
 800106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001072:	4961      	ldr	r1, [pc, #388]	; (80011f8 <EE_Init+0x2b8>)
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f967 	bl	8001348 <EE_ReadVariable>
 800107a:	4603      	mov	r3, r0
 800107c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 800107e:	8bbb      	ldrh	r3, [r7, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d010      	beq.n	80010a6 <EE_Init+0x166>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <EE_Init+0x2b4>)
 8001088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108c:	4a5a      	ldr	r2, [pc, #360]	; (80011f8 <EE_Init+0x2b8>)
 800108e:	8812      	ldrh	r2, [r2, #0]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fa36 	bl	8001504 <EE_VerifyPageFullWriteVariable>
 8001098:	4603      	mov	r3, r0
 800109a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 800109c:	8bfb      	ldrh	r3, [r7, #30]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <EE_Init+0x166>
              {
                return eepromstatus;
 80010a2:	8bfb      	ldrh	r3, [r7, #30]
 80010a4:	e11b      	b.n	80012de <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80010a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a8:	3301      	adds	r3, #1
 80010aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ae:	2b31      	cmp	r3, #49	; 0x31
 80010b0:	d9cb      	bls.n	800104a <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	494b      	ldr	r1, [pc, #300]	; (80011e8 <EE_Init+0x2a8>)
 80010bc:	2001      	movs	r0, #1
 80010be:	f005 f9dd 	bl	800647c <HAL_FLASH_Program>
 80010c2:	4603      	mov	r3, r0
 80010c4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80010c6:	7efb      	ldrb	r3, [r7, #27]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <EE_Init+0x192>
        {
          return flashstatus;
 80010cc:	7efb      	ldrb	r3, [r7, #27]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	e105      	b.n	80012de <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80010d6:	4b45      	ldr	r3, [pc, #276]	; (80011ec <EE_Init+0x2ac>)
 80010d8:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80010de:	4843      	ldr	r0, [pc, #268]	; (80011ec <EE_Init+0x2ac>)
 80010e0:	f000 f90c 	bl	80012fc <EE_VerifyPageFullyErased>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 80f3 	bne.w	80012d2 <EE_Init+0x392>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80010ec:	f107 0214 	add.w	r2, r7, #20
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fb09 	bl	800670c <HAL_FLASHEx_Erase>
 80010fa:	4603      	mov	r3, r0
 80010fc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80010fe:	7efb      	ldrb	r3, [r7, #27]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80e6 	beq.w	80012d2 <EE_Init+0x392>
          {
            return flashstatus;
 8001106:	7efb      	ldrb	r3, [r7, #27]
 8001108:	b29b      	uxth	r3, r3
 800110a:	e0e8      	b.n	80012de <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 800110c:	8c3b      	ldrh	r3, [r7, #32]
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <EE_Init+0x22e>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <EE_Init+0x2ac>)
 800111c:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001122:	4832      	ldr	r0, [pc, #200]	; (80011ec <EE_Init+0x2ac>)
 8001124:	f000 f8ea 	bl	80012fc <EE_VerifyPageFullyErased>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10e      	bne.n	800114c <EE_Init+0x20c>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800112e:	f107 0214 	add.w	r2, r7, #20
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f005 fae8 	bl	800670c <HAL_FLASHEx_Erase>
 800113c:	4603      	mov	r3, r0
 800113e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001140:	7efb      	ldrb	r3, [r7, #27]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <EE_Init+0x20c>
          {
            return flashstatus;
 8001146:	7efb      	ldrb	r3, [r7, #27]
 8001148:	b29b      	uxth	r3, r3
 800114a:	e0c8      	b.n	80012de <EE_Init+0x39e>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	4924      	ldr	r1, [pc, #144]	; (80011e8 <EE_Init+0x2a8>)
 8001156:	2001      	movs	r0, #1
 8001158:	f005 f990 	bl	800647c <HAL_FLASH_Program>
 800115c:	4603      	mov	r3, r0
 800115e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001160:	7efb      	ldrb	r3, [r7, #27]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80b5 	beq.w	80012d2 <EE_Init+0x392>
        {
          return flashstatus;
 8001168:	7efb      	ldrb	r3, [r7, #27]
 800116a:	b29b      	uxth	r3, r3
 800116c:	e0b7      	b.n	80012de <EE_Init+0x39e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800116e:	f000 f935 	bl	80013dc <EE_Format>
 8001172:	4603      	mov	r3, r0
 8001174:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001176:	7efb      	ldrb	r3, [r7, #27]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80aa 	beq.w	80012d2 <EE_Init+0x392>
        {
          return flashstatus;
 800117e:	7efb      	ldrb	r3, [r7, #27]
 8001180:	b29b      	uxth	r3, r3
 8001182:	e0ac      	b.n	80012de <EE_Init+0x39e>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001184:	8c3b      	ldrh	r3, [r7, #32]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10a      	bne.n	80011a0 <EE_Init+0x260>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800118a:	f000 f927 	bl	80013dc <EE_Format>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 809e 	beq.w	80012d6 <EE_Init+0x396>
        {
          return flashstatus;
 800119a:	7efb      	ldrb	r3, [r7, #27]
 800119c:	b29b      	uxth	r3, r3
 800119e:	e09e      	b.n	80012de <EE_Init+0x39e>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80011a0:	8c3b      	ldrh	r3, [r7, #32]
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d11b      	bne.n	80011e2 <EE_Init+0x2a2>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <EE_Init+0x2ac>)
 80011b0:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <EE_Init+0x2ac>)
 80011b8:	f000 f8a0 	bl	80012fc <EE_VerifyPageFullyErased>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8089 	bne.w	80012d6 <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80011c4:	f107 0214 	add.w	r2, r7, #20
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fa9d 	bl	800670c <HAL_FLASHEx_Erase>
 80011d2:	4603      	mov	r3, r0
 80011d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80011d6:	7efb      	ldrb	r3, [r7, #27]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d07c      	beq.n	80012d6 <EE_Init+0x396>
          {
            return flashstatus;
 80011dc:	7efb      	ldrb	r3, [r7, #27]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	e07d      	b.n	80012de <EE_Init+0x39e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011e6:	e03a      	b.n	800125e <EE_Init+0x31e>
 80011e8:	0803f000 	.word	0x0803f000
 80011ec:	0803f800 	.word	0x0803f800
 80011f0:	0803f006 	.word	0x0803f006
 80011f4:	200005d4 	.word	0x200005d4
 80011f8:	200001fc 	.word	0x200001fc
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <EE_Init+0x3a8>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29a      	uxth	r2, r3
 8001202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001204:	4939      	ldr	r1, [pc, #228]	; (80012ec <EE_Init+0x3ac>)
 8001206:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800120a:	429a      	cmp	r2, r3
 800120c:	d101      	bne.n	8001212 <EE_Init+0x2d2>
          {
            x = varidx;
 800120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001210:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8001212:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001214:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001218:	429a      	cmp	r2, r3
 800121a:	d01d      	beq.n	8001258 <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800121c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800121e:	4a33      	ldr	r2, [pc, #204]	; (80012ec <EE_Init+0x3ac>)
 8001220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001224:	4932      	ldr	r1, [pc, #200]	; (80012f0 <EE_Init+0x3b0>)
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f88e 	bl	8001348 <EE_ReadVariable>
 800122c:	4603      	mov	r3, r0
 800122e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001230:	8bbb      	ldrh	r3, [r7, #28]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d010      	beq.n	8001258 <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001236:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001238:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <EE_Init+0x3ac>)
 800123a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123e:	4a2c      	ldr	r2, [pc, #176]	; (80012f0 <EE_Init+0x3b0>)
 8001240:	8812      	ldrh	r2, [r2, #0]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f95d 	bl	8001504 <EE_VerifyPageFullWriteVariable>
 800124a:	4603      	mov	r3, r0
 800124c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 800124e:	8bfb      	ldrh	r3, [r7, #30]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <EE_Init+0x318>
              {
                return eepromstatus;
 8001254:	8bfb      	ldrh	r3, [r7, #30]
 8001256:	e042      	b.n	80012de <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001258:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800125a:	3301      	adds	r3, #1
 800125c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800125e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001260:	2b31      	cmp	r3, #49	; 0x31
 8001262:	d9cb      	bls.n	80011fc <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	4921      	ldr	r1, [pc, #132]	; (80012f4 <EE_Init+0x3b4>)
 800126e:	2001      	movs	r0, #1
 8001270:	f005 f904 	bl	800647c <HAL_FLASH_Program>
 8001274:	4603      	mov	r3, r0
 8001276:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001278:	7efb      	ldrb	r3, [r7, #27]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <EE_Init+0x344>
        {
          return flashstatus;
 800127e:	7efb      	ldrb	r3, [r7, #27]
 8001280:	b29b      	uxth	r3, r3
 8001282:	e02c      	b.n	80012de <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <EE_Init+0x3b8>)
 800128a:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001290:	4819      	ldr	r0, [pc, #100]	; (80012f8 <EE_Init+0x3b8>)
 8001292:	f000 f833 	bl	80012fc <EE_VerifyPageFullyErased>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11c      	bne.n	80012d6 <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800129c:	f107 0214 	add.w	r2, r7, #20
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 fa31 	bl	800670c <HAL_FLASHEx_Erase>
 80012aa:	4603      	mov	r3, r0
 80012ac:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80012ae:	7efb      	ldrb	r3, [r7, #27]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d010      	beq.n	80012d6 <EE_Init+0x396>
          {
            return flashstatus;
 80012b4:	7efb      	ldrb	r3, [r7, #27]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	e011      	b.n	80012de <EE_Init+0x39e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 80012ba:	f000 f88f 	bl	80013dc <EE_Format>
 80012be:	4603      	mov	r3, r0
 80012c0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80012c2:	7efb      	ldrb	r3, [r7, #27]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <EE_Init+0x39a>
      {
        return flashstatus;
 80012c8:	7efb      	ldrb	r3, [r7, #27]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	e007      	b.n	80012de <EE_Init+0x39e>
      break;
 80012ce:	bf00      	nop
 80012d0:	e004      	b.n	80012dc <EE_Init+0x39c>
      break;
 80012d2:	bf00      	nop
 80012d4:	e002      	b.n	80012dc <EE_Init+0x39c>
      break;
 80012d6:	bf00      	nop
 80012d8:	e000      	b.n	80012dc <EE_Init+0x39c>
      }
      break;
 80012da:	bf00      	nop
  }

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	0803f806 	.word	0x0803f806
 80012ec:	200005d4 	.word	0x200005d4
 80012f0:	200001fc 	.word	0x200001fc
 80012f4:	0803f800 	.word	0x0803f800
 80012f8:	0803f000 	.word	0x0803f000

080012fc <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8001308:	f245 5355 	movw	r3, #21845	; 0x5555
 800130c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800130e:	e00d      	b.n	800132c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8001316:	897b      	ldrh	r3, [r7, #10]
 8001318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131c:	4293      	cmp	r3, r2
 800131e:	d002      	beq.n	8001326 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]

      break;
 8001324:	e006      	b.n	8001334 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <EE_VerifyPageFullyErased+0x48>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d3ed      	bcc.n	8001310 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	b29b      	uxth	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	0803f800 	.word	0x0803f800

08001348 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8001354:	2300      	movs	r3, #0
 8001356:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001358:	f245 5355 	movw	r3, #21845	; 0x5555
 800135c:	81bb      	strh	r3, [r7, #12]
 800135e:	2301      	movs	r3, #1
 8001360:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <EE_ReadVariable+0x8c>)
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <EE_ReadVariable+0x8c>)
 8001368:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f886 	bl	800147c <EE_FindValidPage>
 8001370:	4603      	mov	r3, r0
 8001372:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	2bab      	cmp	r3, #171	; 0xab
 8001378:	d101      	bne.n	800137e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800137a:	23ab      	movs	r3, #171	; 0xab
 800137c:	e025      	b.n	80013ca <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001384:	337e      	adds	r3, #126	; 0x7e
 8001386:	02db      	lsls	r3, r3, #11
 8001388:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	3301      	adds	r3, #1
 800138e:	02da      	lsls	r2, r3, #11
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <EE_ReadVariable+0x90>)
 8001392:	4413      	add	r3, r2
 8001394:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8001396:	e012      	b.n	80013be <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d108      	bne.n	80013b8 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	3b02      	subs	r3, #2
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	82fb      	strh	r3, [r7, #22]

      break;
 80013b6:	e007      	b.n	80013c8 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	3b04      	subs	r3, #4
 80013bc:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3302      	adds	r3, #2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8e7      	bhi.n	8001398 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 80013c8:	8afb      	ldrh	r3, [r7, #22]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0803f000 	.word	0x0803f000
 80013d8:	0803effe 	.word	0x0803effe

080013dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <EE_Format+0x98>)
 80013f0:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80013f6:	481f      	ldr	r0, [pc, #124]	; (8001474 <EE_Format+0x98>)
 80013f8:	f7ff ff80 	bl	80012fc <EE_VerifyPageFullyErased>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8001402:	f107 0210 	add.w	r2, r7, #16
 8001406:	463b      	mov	r3, r7
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f005 f97e 	bl	800670c <HAL_FLASHEx_Erase>
 8001410:	4603      	mov	r3, r0
 8001412:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <EE_Format+0x42>
    {
      return flashstatus;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	e025      	b.n	800146a <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	4913      	ldr	r1, [pc, #76]	; (8001474 <EE_Format+0x98>)
 8001428:	2001      	movs	r0, #1
 800142a:	f005 f827 	bl	800647c <HAL_FLASH_Program>
 800142e:	4603      	mov	r3, r0
 8001430:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <EE_Format+0x60>
  {
    return flashstatus;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	e016      	b.n	800146a <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <EE_Format+0x9c>)
 800143e:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <EE_Format+0x9c>)
 8001442:	f7ff ff5b 	bl	80012fc <EE_VerifyPageFullyErased>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10d      	bne.n	8001468 <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800144c:	f107 0210 	add.w	r2, r7, #16
 8001450:	463b      	mov	r3, r7
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f005 f959 	bl	800670c <HAL_FLASHEx_Erase>
 800145a:	4603      	mov	r3, r0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <EE_Format+0x8c>
    {
      return flashstatus;
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	e000      	b.n	800146a <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0803f000 	.word	0x0803f000
 8001478:	0803f800 	.word	0x0803f800

0800147c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8001486:	2306      	movs	r3, #6
 8001488:	81fb      	strh	r3, [r7, #14]
 800148a:	2306      	movs	r3, #6
 800148c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <EE_FindValidPage+0x80>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <EE_FindValidPage+0x84>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01b      	beq.n	80014d8 <EE_FindValidPage+0x5c>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d125      	bne.n	80014f0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 80014a4:	89bb      	ldrh	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80014b4:	2300      	movs	r3, #0
 80014b6:	e01c      	b.n	80014f2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80014b8:	2301      	movs	r3, #1
 80014ba:	e01a      	b.n	80014f2 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 80014bc:	89fb      	ldrh	r3, [r7, #14]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d108      	bne.n	80014d4 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 80014c2:	89bb      	ldrh	r3, [r7, #12]
 80014c4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80014cc:	2301      	movs	r3, #1
 80014ce:	e010      	b.n	80014f2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80014d0:	2300      	movs	r3, #0
 80014d2:	e00e      	b.n	80014f2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80014d4:	23ab      	movs	r3, #171	; 0xab
 80014d6:	e00c      	b.n	80014f2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80014de:	2300      	movs	r3, #0
 80014e0:	e007      	b.n	80014f2 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80014e8:	2301      	movs	r3, #1
 80014ea:	e002      	b.n	80014f2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80014ec:	23ab      	movs	r3, #171	; 0xab
 80014ee:	e000      	b.n	80014f2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80014f0:	2300      	movs	r3, #0
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	0803f000 	.word	0x0803f000
 8001500:	0803f800 	.word	0x0803f800

08001504 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001504:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	460a      	mov	r2, r1
 8001510:	80fb      	strh	r3, [r7, #6]
 8001512:	4613      	mov	r3, r2
 8001514:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 800151a:	2300      	movs	r3, #0
 800151c:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <EE_VerifyPageFullWriteVariable+0xb8>)
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <EE_VerifyPageFullWriteVariable+0xbc>)
 8001524:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff ffa8 	bl	800147c <EE_FindValidPage>
 800152c:	4603      	mov	r3, r0
 800152e:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001530:	8a3b      	ldrh	r3, [r7, #16]
 8001532:	2bab      	cmp	r3, #171	; 0xab
 8001534:	d101      	bne.n	800153a <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001536:	23ab      	movs	r3, #171	; 0xab
 8001538:	e03b      	b.n	80015b2 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800153a:	8a3b      	ldrh	r3, [r7, #16]
 800153c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001540:	337e      	adds	r3, #126	; 0x7e
 8001542:	02db      	lsls	r3, r3, #11
 8001544:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8001546:	8a3b      	ldrh	r3, [r7, #16]
 8001548:	3301      	adds	r3, #1
 800154a:	02da      	lsls	r2, r3, #11
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <EE_VerifyPageFullWriteVariable+0xc0>)
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8001552:	e029      	b.n	80015a8 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800155c:	d121      	bne.n	80015a2 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	461c      	mov	r4, r3
 8001564:	4615      	mov	r5, r2
 8001566:	4622      	mov	r2, r4
 8001568:	462b      	mov	r3, r5
 800156a:	6979      	ldr	r1, [r7, #20]
 800156c:	2001      	movs	r0, #1
 800156e:	f004 ff85 	bl	800647c <HAL_FLASH_Program>
 8001572:	4603      	mov	r3, r0
 8001574:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8001576:	7cfb      	ldrb	r3, [r7, #19]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return flashstatus;
 800157c:	7cfb      	ldrb	r3, [r7, #19]
 800157e:	b29b      	uxth	r3, r3
 8001580:	e017      	b.n	80015b2 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1c99      	adds	r1, r3, #2
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	2200      	movs	r2, #0
 800158a:	4698      	mov	r8, r3
 800158c:	4691      	mov	r9, r2
 800158e:	4642      	mov	r2, r8
 8001590:	464b      	mov	r3, r9
 8001592:	2001      	movs	r0, #1
 8001594:	f004 ff72 	bl	800647c <HAL_FLASH_Program>
 8001598:	4603      	mov	r3, r0
 800159a:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	e007      	b.n	80015b2 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3304      	adds	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3d1      	bcc.n	8001554 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80015b0:	2380      	movs	r3, #128	; 0x80
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015bc:	0803f000 	.word	0x0803f000
 80015c0:	0803f800 	.word	0x0803f800
 80015c4:	0803efff 	.word	0x0803efff

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015cc:	f002 fdac 	bl	8004128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d0:	f000 f810 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d4:	f000 f9e8 	bl	80019a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d8:	f000 f9b4 	bl	8001944 <MX_DMA_Init>
  MX_ADC1_Init();
 80015dc:	f000 f870 	bl	80016c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80015e0:	f000 f8c8 	bl	8001774 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80015e4:	f017 f83a 	bl	801865c <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80015e8:	f000 f938 	bl	800185c <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cpp_link();
 80015ec:	f7ff fca0 	bl	8000f30 <cpp_link>
  // we never exit cpp_link()!!!!
  // while (1) should be empty

  while (1)
 80015f0:	e7fe      	b.n	80015f0 <main+0x28>
	...

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b09c      	sub	sp, #112	; 0x70
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015fe:	2238      	movs	r2, #56	; 0x38
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f017 fe98 	bl	8019338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2220      	movs	r2, #32
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f017 fe8a 	bl	8019338 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001632:	2301      	movs	r3, #1
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001636:	2300      	movs	r3, #0
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163a:	2302      	movs	r3, #2
 800163c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001642:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001644:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fa8e 	bl	8007b74 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800165e:	f000 fa07 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	2102      	movs	r1, #2
 800167e:	4618      	mov	r0, r3
 8001680:	f006 fd8e 	bl	80081a0 <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800168a:	f000 f9f1 	bl	8001a70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800168e:	2312      	movs	r3, #18
 8001690:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001696:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 ffca 	bl	8008638 <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80016aa:	f000 f9e1 	bl	8001a70 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SystemClock_Config+0xc8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3770      	adds	r7, #112	; 0x70
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	42420070 	.word	0x42420070

080016c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
  //hadc1.Init.DMAContiniousRequests = ENABLE;
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_ADC1_Init+0xac>)
 80016d2:	4a27      	ldr	r2, [pc, #156]	; (8001770 <MX_ADC1_Init+0xb0>)
 80016d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_ADC1_Init+0xac>)
 80016d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_ADC1_Init+0xac>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_ADC1_Init+0xac>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_ADC1_Init+0xac>)
 80016ec:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80016f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_ADC1_Init+0xac>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_ADC1_Init+0xac>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016fe:	481b      	ldr	r0, [pc, #108]	; (800176c <MX_ADC1_Init+0xac>)
 8001700:	f002 fd98 	bl	8004234 <HAL_ADC_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800170a:	f000 f9b1 	bl	8001a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800170e:	2310      	movs	r3, #16
 8001710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001712:	2301      	movs	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001716:	2307      	movs	r3, #7
 8001718:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_ADC1_Init+0xac>)
 8001720:	f003 f8d2 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 f9a1 	bl	8001a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800172e:	2302      	movs	r3, #2
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_ADC1_Init+0xac>)
 8001738:	f003 f8c6 	bl	80048c8 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001742:	f000 f995 	bl	8001a70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001746:	2311      	movs	r3, #17
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800174a:	2303      	movs	r3, #3
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_ADC1_Init+0xac>)
 8001754:	f003 f8b8 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800175e:	f000 f987 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000200 	.word	0x20000200
 8001770:	40012400 	.word	0x40012400

08001774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017ae:	2247      	movs	r2, #71	; 0x47
 80017b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017cc:	4822      	ldr	r0, [pc, #136]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017ce:	f007 f9c7 	bl	8008b60 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017d8:	f000 f94a 	bl	8001a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e6:	4619      	mov	r1, r3
 80017e8:	481b      	ldr	r0, [pc, #108]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017ea:	f007 fd2b 	bl	8009244 <HAL_TIM_ConfigClockSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017f4:	f000 f93c 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017f8:	4817      	ldr	r0, [pc, #92]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017fa:	f007 fa5b 	bl	8008cb4 <HAL_TIM_PWM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001804:	f000 f934 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001808:	2320      	movs	r3, #32
 800180a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4619      	mov	r1, r3
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <MX_TIM2_Init+0xe4>)
 8001818:	f008 f8aa 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001822:	f000 f925 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001826:	2360      	movs	r3, #96	; 0x60
 8001828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 800182a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800182e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2204      	movs	r2, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_TIM2_Init+0xe4>)
 8001840:	f007 fc42 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800184a:	f000 f911 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3738      	adds	r7, #56	; 0x38
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002c4 	.word	0x200002c4

0800185c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	f107 0320 	add.w	r3, r7, #32
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_TIM5_Init+0xe0>)
 800188e:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <MX_TIM5_Init+0xe4>)
 8001890:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_TIM5_Init+0xe0>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_TIM5_Init+0xe0>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 720-1;
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <MX_TIM5_Init+0xe0>)
 80018a0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80018a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_TIM5_Init+0xe0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_TIM5_Init+0xe0>)
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018b2:	4822      	ldr	r0, [pc, #136]	; (800193c <MX_TIM5_Init+0xe0>)
 80018b4:	f007 f954 	bl	8008b60 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80018be:	f000 f8d7 	bl	8001a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018cc:	4619      	mov	r1, r3
 80018ce:	481b      	ldr	r0, [pc, #108]	; (800193c <MX_TIM5_Init+0xe0>)
 80018d0:	f007 fcb8 	bl	8009244 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80018da:	f000 f8c9 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <MX_TIM5_Init+0xe0>)
 80018e0:	f007 f9e8 	bl	8008cb4 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80018ea:	f000 f8c1 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	4619      	mov	r1, r3
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <MX_TIM5_Init+0xe0>)
 80018fe:	f008 f837 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001908:	f000 f8b2 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_TIM5_Init+0xe0>)
 8001924:	f007 fbd0 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800192e:	f000 f89f 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3738      	adds	r7, #56	; 0x38
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000030c 	.word	0x2000030c
 8001940:	40000c00 	.word	0x40000c00

08001944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_DMA_Init+0x60>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <MX_DMA_Init+0x60>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6153      	str	r3, [r2, #20]
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_DMA_Init+0x60>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_DMA_Init+0x60>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <MX_DMA_Init+0x60>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <MX_DMA_Init+0x60>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200b      	movs	r0, #11
 8001980:	f004 f9c3 	bl	8005d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001984:	200b      	movs	r0, #11
 8001986:	f004 f9dc 	bl	8005d42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	203c      	movs	r0, #60	; 0x3c
 8001990:	f004 f9bb 	bl	8005d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001994:	203c      	movs	r0, #60	; 0x3c
 8001996:	f004 f9d4 	bl	8005d42 <HAL_NVIC_EnableIRQ>

}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_GPIO_Init+0xbc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_GPIO_Init+0xbc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <MX_GPIO_Init+0xbc>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_GPIO_Init+0xbc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2107      	movs	r1, #7
 8001a20:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_GPIO_Init+0xc0>)
 8001a22:	f005 f89f 	bl	8006b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_B_Pin LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_R_Pin|LED_G_Pin;
 8001a26:	2307      	movs	r3, #7
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <MX_GPIO_Init+0xc0>)
 8001a3e:	f004 ff0d 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pins : CC1_Pin CC2_Pin */
  GPIO_InitStruct.Pin = CC1_Pin|CC2_Pin;
 8001a42:	2330      	movs	r3, #48	; 0x30
 8001a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_GPIO_Init+0xc4>)
 8001a56:	f004 ff01 	bl	800685c <HAL_GPIO_Init>

}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <Error_Handler+0x8>
 8001a7a:	0000      	movs	r0, r0
 8001a7c:	0000      	movs	r0, r0
	...

08001a80 <_Z7N2kIsNAd>:

#ifndef BIT
#define BIT(n) (1 << n)
#endif

inline bool N2kIsNA(double v) { return v==N2kDoubleNA; }
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	e9c7 0100 	strd	r0, r1, [r7]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	a308      	add	r3, pc, #32	; (adr r3, 8001ab0 <_Z7N2kIsNAd+0x30>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a98:	f7fe fffc 	bl	8000a94 <__aeabi_dcmpeq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <_Z7N2kIsNAd+0x26>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	b2e3      	uxtb	r3, r4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	c1cdcd65 	.word	0xc1cdcd65

08001ab8 <_ZN17tN2kSyncSchedulerC1Ebmm>:
  static uint64_t SyncOffset;
  uint64_t NextTime;
  uint32_t Offset;  // Offset to syncronize with others
  uint32_t Period; 
public:
  tN2kSyncScheduler(bool Enable=false, uint32_t _Period=0, uint32_t _Offset=0) { 
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	72fb      	strb	r3, [r7, #11]
    Offset=_Offset; Period=_Period; 
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
    if ( Enable ) {
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <_ZN17tN2kSyncSchedulerC1Ebmm+0x2a>
      UpdateNextTime();
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f82c 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
 8001ae0:	e002      	b.n	8001ae8 <_ZN17tN2kSyncSchedulerC1Ebmm+0x30>
    } else {
      Disable();
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f805 	bl	8001af2 <_ZN17tN2kSyncScheduler7DisableEv>
    }
  }
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN17tN2kSyncScheduler7DisableEv>:

  inline void Disable() { NextTime=N2kScheduler64Disabled; }
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b04:	e9c1 2300 	strd	r2, r3, [r1]
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <_ZN17tN2kSyncScheduler6IsTimeEv>:
  inline bool IsDisabled() const { return NextTime==N2kScheduler64Disabled; }
  inline bool IsEnabled() const { return NextTime!=N2kScheduler64Disabled; }

  inline bool IsTime() { return N2kMillis64()>NextTime; }
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	f00e f997 	bl	800fe4c <_Z11N2kMillis64v>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	4282      	cmp	r2, r0
 8001b26:	418b      	sbcs	r3, r1
 8001b28:	bf34      	ite	cc
 8001b2a:	2301      	movcc	r3, #1
 8001b2c:	2300      	movcs	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>:
  }
  uint32_t GetOffset() const { return Offset; }
  uint32_t GetPeriod() const { return Period; }
  uint64_t GetNextTime() const { return NextTime; }

  void UpdateNextTime() {
 8001b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b3c:	b09c      	sub	sp, #112	; 0x70
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	65f8      	str	r0, [r7, #92]	; 0x5c
    if ( Period==0 ) {
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x1a>
      Disable();
 8001b4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001b4c:	f7ff ffd1 	bl	8001af2 <_ZN17tN2kSyncScheduler7DisableEv>
      return;
 8001b50:	e094      	b.n	8001c7c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x144>
    }
    uint64_t now=N2kMillis64();
 8001b52:	f00e f97b 	bl	800fe4c <_Z11N2kMillis64v>
 8001b56:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
    if ( (Offset+SyncOffset)>now ) {
 8001b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	653b      	str	r3, [r7, #80]	; 0x50
 8001b62:	657a      	str	r2, [r7, #84]	; 0x54
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b6c:	188c      	adds	r4, r1, r2
 8001b6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b70:	eb43 0101 	adc.w	r1, r3, r1
 8001b74:	460d      	mov	r5, r1
 8001b76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b7a:	42a2      	cmp	r2, r4
 8001b7c:	41ab      	sbcs	r3, r5
 8001b7e:	d216      	bcs.n	8001bae <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x76>
      NextTime=(Offset+SyncOffset);
 8001b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2200      	movs	r2, #0
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b94:	4621      	mov	r1, r4
 8001b96:	1889      	adds	r1, r1, r2
 8001b98:	6439      	str	r1, [r7, #64]	; 0x40
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	eb43 0101 	adc.w	r1, r3, r1
 8001ba0:	6479      	str	r1, [r7, #68]	; 0x44
 8001ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001ba8:	e9c3 1200 	strd	r1, r2, [r3]
 8001bac:	e066      	b.n	8001c7c <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x144>
    } else {
      uint64_t n=(now-(Offset+SyncOffset))/Period;
 8001bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bb6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	eb14 0a02 	adds.w	sl, r4, r2
 8001bc8:	eb41 0b03 	adc.w	fp, r1, r3
 8001bcc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001bd0:	ebb2 010a 	subs.w	r1, r2, sl
 8001bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8001bd6:	eb63 030b 	sbc.w	r3, r3, fp
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
 8001bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bee:	f7ff f81b 	bl	8000c28 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
      NextTime=SyncOffset+Offset+(n+1)*Period;
 8001bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	627a      	str	r2, [r7, #36]	; 0x24
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv+0x14c>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c0e:	4621      	mov	r1, r4
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	61b9      	str	r1, [r7, #24]
 8001c14:	4629      	mov	r1, r5
 8001c16:	eb43 0101 	adc.w	r1, r3, r1
 8001c1a:	61f9      	str	r1, [r7, #28]
 8001c1c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c20:	1c51      	adds	r1, r2, #1
 8001c22:	6139      	str	r1, [r7, #16]
 8001c24:	f143 0300 	adc.w	r3, r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	60fa      	str	r2, [r7, #12]
 8001c34:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001c38:	4622      	mov	r2, r4
 8001c3a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c3e:	4651      	mov	r1, sl
 8001c40:	fb01 f202 	mul.w	r2, r1, r2
 8001c44:	465d      	mov	r5, fp
 8001c46:	4618      	mov	r0, r3
 8001c48:	4621      	mov	r1, r4
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	fb03 f305 	mul.w	r3, r3, r5
 8001c50:	4413      	add	r3, r2
 8001c52:	4602      	mov	r2, r0
 8001c54:	4651      	mov	r1, sl
 8001c56:	fba2 8901 	umull	r8, r9, r2, r1
 8001c5a:	444b      	add	r3, r9
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001c62:	461a      	mov	r2, r3
 8001c64:	eb12 0208 	adds.w	r2, r2, r8
 8001c68:	603a      	str	r2, [r7, #0]
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	eb43 0309 	adc.w	r3, r3, r9
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001c78:	e9c3 1200 	strd	r1, r2, [r3]
    }
  }
 8001c7c:	3770      	adds	r7, #112	; 0x70
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c84:	20000a58 	.word	0x20000a58

08001c88 <_Z9CToKelvind>:
#include <string.h>
#include <stdint.h>

inline double RadToDeg(double v) { return N2kIsNA(v)?v:v*180.0/3.1415926535897932384626433832795L; }
inline double DegToRad(double v) { return N2kIsNA(v)?v:v/180.0*3.1415926535897932384626433832795L; }
inline double CToKelvin(double v) { return N2kIsNA(v)?v:v+273.15L; }
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	e9c7 0100 	strd	r0, r1, [r7]
 8001c92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c96:	f7ff fef3 	bl	8001a80 <_Z7N2kIsNAd>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <_Z9CToKelvind+0x1e>
 8001ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca4:	e008      	b.n	8001cb8 <_Z9CToKelvind+0x30>
 8001ca6:	a308      	add	r3, pc, #32	; (adr r3, 8001cc8 <_Z9CToKelvind+0x40>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb0:	f7fe fad2 	bl	8000258 <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	66666666 	.word	0x66666666
 8001ccc:	40711266 	.word	0x40711266

08001cd0 <_Z10hToSecondsd>:
inline double PascalTomBar(double v) { return N2kIsNA(v)?v:v/100L; }
inline double hPAToPascal(double v) { return N2kIsNA(v)?v:v*100L; }
inline double PascalTohPA(double v) { return N2kIsNA(v)?v:v/100L; }
inline double AhToCoulomb(double v) { return N2kIsNA(v)?v:v*3600L; }
inline double CoulombToAh(double v) { return N2kIsNA(v)?v:v/3600L; }
inline double hToSeconds(double v) { return N2kIsNA(v)?v:v*3600L; }
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	e9c7 0100 	strd	r0, r1, [r7]
 8001cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cde:	f7ff fecf 	bl	8001a80 <_Z7N2kIsNAd>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <_Z10hToSecondsd+0x1e>
 8001ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cec:	e008      	b.n	8001d00 <_Z10hToSecondsd+0x30>
 8001cee:	a308      	add	r3, pc, #32	; (adr r3, 8001d10 <_Z10hToSecondsd+0x40>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf8:	f7fe fc64 	bl	80005c4 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	f3af 8000 	nop.w
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40ac2000 	.word	0x40ac2000

08001d18 <_Z14SetN2kDCStatusR7tN2kMsghh10tN2kDCTypehhddd>:
//  - Capacity              Battery capacity in coulombs
void SetN2kPGN127506(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     unsigned char StateOfCharge, unsigned char StateOfHealth, double TimeRemaining, double RippleVoltage=N2kDoubleNA, double Capacity=N2kDoubleNA);

inline void SetN2kDCStatus(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     unsigned char StateOfCharge, unsigned char StateOfHealth, double TimeRemaining, double RippleVoltage=N2kDoubleNA, double Capacity=N2kDoubleNA) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af08      	add	r7, sp, #32
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	70fb      	strb	r3, [r7, #3]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70bb      	strb	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	707b      	strb	r3, [r7, #1]
  SetN2kPGN127506(N2kMsg,SID,DCInstance,DCType,StateOfCharge,StateOfHealth,TimeRemaining,RippleVoltage,Capacity);
 8001d32:	787c      	ldrb	r4, [r7, #1]
 8001d34:	78b8      	ldrb	r0, [r7, #2]
 8001d36:	78f9      	ldrb	r1, [r7, #3]
 8001d38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d50:	7f3b      	ldrb	r3, [r7, #28]
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	7e3b      	ldrb	r3, [r7, #24]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4623      	mov	r3, r4
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f00c fd6f 	bl	800e840 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}

08001d6a <_Z19SetN2kChargerStatusR7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d>:
                     tN2kChargeState ChargeState, tN2kChargerMode ChargerMode=N2kCM_Standalone,
                     tN2kOnOff Enabled=N2kOnOff_On, tN2kOnOff EqualizationPending=N2kOnOff_Unavailable, double EqualizationTimeRemaining=N2kDoubleNA);

inline void SetN2kChargerStatus(tN2kMsg &N2kMsg, unsigned char Instance, unsigned char BatteryInstance,
                     tN2kChargeState ChargeState, tN2kChargerMode ChargerMode=N2kCM_Standalone,
                     tN2kOnOff Enabled=N2kOnOff_On, tN2kOnOff EqualizationPending=N2kOnOff_Unavailable, double EqualizationTimeRemaining=N2kDoubleNA) {
 8001d6a:	b590      	push	{r4, r7, lr}
 8001d6c:	b089      	sub	sp, #36	; 0x24
 8001d6e:	af06      	add	r7, sp, #24
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	4608      	mov	r0, r1
 8001d74:	4611      	mov	r1, r2
 8001d76:	461a      	mov	r2, r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	70fb      	strb	r3, [r7, #3]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70bb      	strb	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
 SetN2kPGN127507(N2kMsg, Instance,BatteryInstance,ChargeState,ChargerMode,Enabled,EqualizationPending,EqualizationTimeRemaining);
 8001d84:	787c      	ldrb	r4, [r7, #1]
 8001d86:	78b8      	ldrb	r0, [r7, #2]
 8001d88:	78f9      	ldrb	r1, [r7, #3]
 8001d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	7f3b      	ldrb	r3, [r7, #28]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	7e3b      	ldrb	r3, [r7, #24]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4623      	mov	r3, r4
 8001da2:	4602      	mov	r2, r0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f00c fdbb 	bl	800e920 <_Z15SetN2kPGN127507R7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d>
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}

08001db2 <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>:
//  - SID                   Sequence ID.
void SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent=N2kDoubleNA,
                     double BatteryTemperature=N2kDoubleNA, unsigned char SID=1);

inline void SetN2kDCBatStatus(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent=N2kDoubleNA,
                     double BatteryTemperature=N2kDoubleNA, unsigned char SID=1) {
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b08a      	sub	sp, #40	; 0x28
 8001db6:	af06      	add	r7, sp, #24
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	e9c7 2300 	strd	r2, r3, [r7]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
  SetN2kPGN127508(N2kMsg,BatteryInstance,BatteryVoltage,BatteryCurrent,BatteryTemperature,SID);
 8001dc2:	7af9      	ldrb	r1, [r7, #11]
 8001dc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f00c fdfe 	bl	800e9e0 <_Z15SetN2kPGN127508R7tN2kMsghdddh>
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_Z13SetN2kBatConfR7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor);

inline void SetN2kBatConf(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b08d      	sub	sp, #52	; 0x34
 8001df0:	af0a      	add	r7, sp, #40	; 0x28
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	70fb      	strb	r3, [r7, #3]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70bb      	strb	r3, [r7, #2]
 8001e02:	4613      	mov	r3, r2
 8001e04:	707b      	strb	r3, [r7, #1]
   SetN2kPGN127513(N2kMsg,BatInstance,BatType,SupportsEqual,BatNominalVoltage,BatChemistry,BatCapacity,BatTemperatureCoefficient,
 8001e06:	787c      	ldrb	r4, [r7, #1]
 8001e08:	78b8      	ldrb	r0, [r7, #2]
 8001e0a:	78f9      	ldrb	r1, [r7, #3]
 8001e0c:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 8001e10:	9308      	str	r3, [sp, #32]
 8001e12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e1a:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001e1e:	9304      	str	r3, [sp, #16]
 8001e20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e28:	7f3b      	ldrb	r3, [r7, #28]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	7e3b      	ldrb	r3, [r7, #24]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4623      	mov	r3, r4
 8001e32:	4602      	mov	r2, r0
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f00c fe2f 	bl	800ea98 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
				PeukertExponent,ChargeEfficiencyFactor);
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
	...

08001e44 <_Z18Overall_Parametersv>:
uint16_t VarIndex,VarDataTmp = 0;


// EMUS CAN messages
uint32_t BMS_CAN_Base_ID = 0x19B50000;
uint32_t Overall_Parameters()                 { return BMS_CAN_Base_ID         ;}   //0x19B50000
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <_Z18Overall_Parametersv+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000068 	.word	0x20000068

08001e58 <_Z16Diagnostic_Codesv>:
uint32_t Diagnostic_Codes()                   { return BMS_CAN_Base_ID + 0x0007;}   //0x19B50007
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <_Z16Diagnostic_Codesv+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3307      	adds	r3, #7
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000068 	.word	0x20000068

08001e70 <_Z26Battery_Voltage_Parametersv>:
uint32_t Battery_Voltage_Parameters()         { return BMS_CAN_Base_ID + 0x0001;}   //0x19B50001
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <_Z26Battery_Voltage_Parametersv+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000068 	.word	0x20000068

08001e88 <_Z34Cell_Module_Temperature_Parametersv>:
uint32_t Cell_Module_Temperature_Parameters() { return BMS_CAN_Base_ID + 0x0002;}   //0x19B50002
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <_Z34Cell_Module_Temperature_Parametersv+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3302      	adds	r3, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000068 	.word	0x20000068

08001ea0 <_Z26State_Of_Charge_Parametersv>:
uint32_t State_Of_Charge_Parameters()         { return BMS_CAN_Base_ID + 0x0500;}   //0x19B50500
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <_Z26State_Of_Charge_Parametersv+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000068 	.word	0x20000068

08001eb8 <_Z17Energy_Parametersv>:
uint32_t Energy_Parameters()                  { return BMS_CAN_Base_ID + 0x0600;}   //0x19B50600
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <_Z17Energy_Parametersv+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000068 	.word	0x20000068

08001ed0 <_Z10setSoftPWMtmPm>:

/////////////////////////////////
// PRIVAT FUNCTIONS
////////////////////////////////

void setSoftPWM(uint16_t pin, uint32_t duty ,uint32_t *softpwmbuffer){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; i ++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b63      	cmp	r3, #99	; 0x63
 8001ee6:	d83e      	bhi.n	8001f66 <_Z10setSoftPWMtmPm+0x96>
		if(i < duty){//set pin
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d21b      	bcs.n	8001f28 <_Z10setSoftPWMtmPm+0x58>
			softpwmbuffer[i]&=(uint32_t)~(pin<<16);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	43db      	mvns	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	440b      	add	r3, r1
 8001f0a:	4002      	ands	r2, r0
 8001f0c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4403      	add	r3, r0
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e01a      	b.n	8001f5e <_Z10setSoftPWMtmPm+0x8e>
		}else{//reset pin
			softpwmbuffer[i]&=(uint32_t)~(pin);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	440b      	add	r3, r1
 8001f40:	4002      	ands	r2, r0
 8001f42:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin<<16;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4403      	add	r3, r0
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; i ++) {
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e7bd      	b.n	8001ee2 <_Z10setSoftPWMtmPm+0x12>
		}
	}

}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <_Z11zeroSoftPWMPm>:

void zeroSoftPWM(uint32_t softpwmbuffer[])
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; i ++) {
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b63      	cmp	r3, #99	; 0x63
 8001f80:	d809      	bhi.n	8001f96 <_Z11zeroSoftPWMPm+0x26>
			softpwmbuffer[i]=0;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; i ++) {
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e7f2      	b.n	8001f7c <_Z11zeroSoftPWMPm+0xc>
	}
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <_Z18getFirstHighBitPosm>:

// returns the lowest high bit position of a byte
// used to convert error or status flags to a error code.
uint8_t getFirstHighBitPos (uint32_t flags) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	uint8_t num = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0;  i < 31; i ++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	73bb      	strb	r3, [r7, #14]
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b1e      	cmp	r3, #30
 8001fb4:	d80b      	bhi.n	8001fce <_Z18getFirstHighBitPosm+0x2e>
		if ((flags >> (i)) && 0x01) {
 8001fb6:	7bbb      	ldrb	r3, [r7, #14]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <_Z18getFirstHighBitPosm+0x26>
			num = i;
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0;  i < 31; i ++) {
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	73bb      	strb	r3, [r7, #14]
 8001fcc:	e7f0      	b.n	8001fb0 <_Z18getFirstHighBitPosm+0x10>
		}
	}
	return num;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <_Z8PowerAvgv>:
	if(battery_power < 0 && charging_stage == ready) {
		battery_power_arr[battery_power_counter] = battery_power;
	}
}

double PowerAvg() { // kW
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	return AvgArr(battery_power_arr, battery_power_samples);
 8001fe0:	211e      	movs	r1, #30
 8001fe2:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <_Z8PowerAvgv+0x18>)
 8001fe4:	f001 fb7a 	bl	80036dc <_Z6AvgArrIdET_PS0_m>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
}
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200008d0 	.word	0x200008d0

08001ff8 <_Z16SecondsRemainingv>:

// calculate remaining cruise time
double SecondsRemaining() {
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
	double power = PowerAvg();
 8001ffe:	f7ff ffed 	bl	8001fdc <_Z8PowerAvgv>
 8002002:	e9c7 0100 	strd	r0, r1, [r7]
	if (power < 0 && estimated_energy_left > 0) { // - is discharging
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002012:	f7fe fd49 	bl	8000aa8 <__aeabi_dcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <_Z16SecondsRemainingv+0x66>
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <_Z16SecondsRemainingv+0x80>)
 800201e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	f7fe fd5b 	bl	8000ae4 <__aeabi_dcmpgt>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d014      	beq.n	800205e <_Z16SecondsRemainingv+0x66>
		return hToSeconds(estimated_energy_left / (-1 * power));
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_Z16SecondsRemainingv+0x80>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	4614      	mov	r4, r2
 800203c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe fbe6 	bl	8000818 <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7ff fe3c 	bl	8001cd0 <_Z10hToSecondsd>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	e002      	b.n	8002064 <_Z16SecondsRemainingv+0x6c>
	}
	else {
		return N2kDoubleNA;
 800205e:	a304      	add	r3, pc, #16	; (adr r3, 8002070 <_Z16SecondsRemainingv+0x78>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
}
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bdb0      	pop	{r4, r5, r7, pc}
 800206e:	bf00      	nop
 8002070:	00000000 	.word	0x00000000
 8002074:	c1cdcd65 	.word	0xc1cdcd65
 8002078:	200006b0 	.word	0x200006b0

0800207c <_Z14N2kChargeStatev>:

tN2kChargeState N2kChargeState() {
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	N2kCS_Constant_VI=7,  (balancing)
	N2kCS_Disabled=8,     (charging finished)
	N2kCS_Fault=9,        (charger_error)
	N2kCS_Unavailable=15
	*/
	if      (charging_stage == charging) {return N2kCS_Bulk;}
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <_Z14N2kChargeStatev+0x40>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d101      	bne.n	800208c <_Z14N2kChargeStatev+0x10>
 8002088:	2301      	movs	r3, #1
 800208a:	e012      	b.n	80020b2 <_Z14N2kChargeStatev+0x36>
	else if (charging_stage == balancing) {return N2kCS_Constant_VI;}
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <_Z14N2kChargeStatev+0x40>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d101      	bne.n	8002098 <_Z14N2kChargeStatev+0x1c>
 8002094:	2307      	movs	r3, #7
 8002096:	e00c      	b.n	80020b2 <_Z14N2kChargeStatev+0x36>
	else if (charging_stage == charging_finished) {return N2kCS_Disabled;}
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_Z14N2kChargeStatev+0x40>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d101      	bne.n	80020a4 <_Z14N2kChargeStatev+0x28>
 80020a0:	2308      	movs	r3, #8
 80020a2:	e006      	b.n	80020b2 <_Z14N2kChargeStatev+0x36>
	else if (charging_stage == charging_error) {return N2kCS_Fault;}
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <_Z14N2kChargeStatev+0x40>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d101      	bne.n	80020b0 <_Z14N2kChargeStatev+0x34>
 80020ac:	2309      	movs	r3, #9
 80020ae:	e000      	b.n	80020b2 <_Z14N2kChargeStatev+0x36>
	else                          {return  N2kCS_Not_Charging;}
 80020b0:	2300      	movs	r3, #0

}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000085 	.word	0x20000085

080020c0 <_Z16N2kChargerEnablev>:

tN2kOnOff N2kChargerEnable() {
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
	if (charger_enable) {
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <_Z16N2kChargerEnablev+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <_Z16N2kChargerEnablev+0x14>
		return N2kOnOff_On;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <_Z16N2kChargerEnablev+0x16>
	} else {
		return N2kOnOff_Off;
 80020d4:	2300      	movs	r3, #0
	}
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	200008c8 	.word	0x200008c8

080020e4 <_Z15sendEmusRequestv>:

void sendEmusRequest() {
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
	// send Emus request every 100ms
	if ( HAL_GetTick() - CAN_request_timestamp >= 100
 80020ea:	f002 f875 	bl	80041d8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <_Z15sendEmusRequestv+0xa0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1ad3      	subs	r3, r2, r3
			&& HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0) {
 80020f6:	2b63      	cmp	r3, #99	; 0x63
 80020f8:	d907      	bls.n	800210a <_Z15sendEmusRequestv+0x26>
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <_Z15sendEmusRequestv+0xa4>)
 80020fc:	f003 f98c 	bl	8005418 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <_Z15sendEmusRequestv+0x26>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <_Z15sendEmusRequestv+0x28>
 800210a:	2300      	movs	r3, #0
	if ( HAL_GetTick() - CAN_request_timestamp >= 100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d034      	beq.n	800217a <_Z15sendEmusRequestv+0x96>

		CAN_request_timestamp = HAL_GetTick();
 8002110:	f002 f862 	bl	80041d8 <HAL_GetTick>
 8002114:	4603      	mov	r3, r0
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <_Z15sendEmusRequestv+0xa0>)
 8002118:	6013      	str	r3, [r2, #0]
		CAN_request_count ++;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <_Z15sendEmusRequestv+0xa8>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <_Z15sendEmusRequestv+0xa8>)
 8002124:	701a      	strb	r2, [r3, #0]

		tCAN_STM32::CAN_message_t message;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <_Z15sendEmusRequestv+0xac>)
 8002128:	1d3c      	adds	r4, r7, #4
 800212a:	461d      	mov	r5, r3
 800212c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	6023      	str	r3, [r4, #0]

		message.id = (*BMS_Messages[Message_i])();
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <_Z15sendEmusRequestv+0xb0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <_Z15sendEmusRequestv+0xb4>)
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	4798      	blx	r3
 8002142:	4603      	mov	r3, r0
 8002144:	607b      	str	r3, [r7, #4]
		message.len = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	733b      	strb	r3, [r7, #12]
		message.flags.extended = true;
 800214a:	2301      	movs	r3, #1
 800214c:	723b      	strb	r3, [r7, #8]

		CANbus1.CANSendFrameStruct( &message );
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4812      	ldr	r0, [pc, #72]	; (800219c <_Z15sendEmusRequestv+0xb8>)
 8002154:	f008 fed4 	bl	800af00 <_ZN10tCAN_STM3218CANSendFrameStructEPNS_13CAN_message_tE>


		// reset some BMS parameters if we lost connection to BMS
		// if >= 10 times no CAN response from BMS
		if (CAN_request_count >= 50
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <_Z15sendEmusRequestv+0xa8>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b31      	cmp	r3, #49	; 0x31
 800215e:	d90c      	bls.n	800217a <_Z15sendEmusRequestv+0x96>
			  && BMS_responding == true
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <_Z15sendEmusRequestv+0xbc>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <_Z15sendEmusRequestv+0x96>
			  && charging_stage <= 6)
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <_Z15sendEmusRequestv+0xc0>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b06      	cmp	r3, #6
 800216e:	d804      	bhi.n	800217a <_Z15sendEmusRequestv+0x96>
		{
			BMS_responding = false;
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <_Z15sendEmusRequestv+0xbc>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
			resetEmusParameters();
 8002176:	f000 f817 	bl	80021a8 <_Z19resetEmusParametersv>
		}
	}
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	bf00      	nop
 8002184:	2000063c 	.word	0x2000063c
 8002188:	20000274 	.word	0x20000274
 800218c:	20000640 	.word	0x20000640
 8002190:	080195dc 	.word	0x080195dc
 8002194:	20000084 	.word	0x20000084
 8002198:	2000006c 	.word	0x2000006c
 800219c:	20000534 	.word	0x20000534
 80021a0:	200009c0 	.word	0x200009c0
 80021a4:	20000085 	.word	0x20000085

080021a8 <_Z19resetEmusParametersv>:


void resetEmusParameters(){
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

	state_of_charge = 0;
 80021ac:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <_Z19resetEmusParametersv+0x11c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
	pack_voltage = 0;
 80021b2:	4945      	ldr	r1, [pc, #276]	; (80022c8 <_Z19resetEmusParametersv+0x120>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9c1 2300 	strd	r2, r3, [r1]
	battery_current = 0;
 80021c0:	4942      	ldr	r1, [pc, #264]	; (80022cc <_Z19resetEmusParametersv+0x124>)
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9c1 2300 	strd	r2, r3, [r1]
	battery_power = 0;
 80021ce:	4940      	ldr	r1, [pc, #256]	; (80022d0 <_Z19resetEmusParametersv+0x128>)
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9c1 2300 	strd	r2, r3, [r1]
	estimated_amp_hours_left = 0;
 80021dc:	493d      	ldr	r1, [pc, #244]	; (80022d4 <_Z19resetEmusParametersv+0x12c>)
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	cel_temp_max = 0;
 80021ea:	493b      	ldr	r1, [pc, #236]	; (80022d8 <_Z19resetEmusParametersv+0x130>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9c1 2300 	strd	r2, r3, [r1]
	cel_temp_min = 0;
 80021f8:	4938      	ldr	r1, [pc, #224]	; (80022dc <_Z19resetEmusParametersv+0x134>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9c1 2300 	strd	r2, r3, [r1]
	cel_temp_avg = 0;
 8002206:	4936      	ldr	r1, [pc, #216]	; (80022e0 <_Z19resetEmusParametersv+0x138>)
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	e9c1 2300 	strd	r2, r3, [r1]
	connected_cel_count = 0;
 8002214:	4933      	ldr	r1, [pc, #204]	; (80022e4 <_Z19resetEmusParametersv+0x13c>)
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
	cel_voltage_max = 0;
 8002222:	4931      	ldr	r1, [pc, #196]	; (80022e8 <_Z19resetEmusParametersv+0x140>)
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9c1 2300 	strd	r2, r3, [r1]
	cel_voltage_min = 0;
 8002230:	492e      	ldr	r1, [pc, #184]	; (80022ec <_Z19resetEmusParametersv+0x144>)
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9c1 2300 	strd	r2, r3, [r1]
	cel_voltage_avg = 0;
 800223e:	492c      	ldr	r1, [pc, #176]	; (80022f0 <_Z19resetEmusParametersv+0x148>)
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9c1 2300 	strd	r2, r3, [r1]
	charging_stage_duration = 0;
 800224c:	4929      	ldr	r1, [pc, #164]	; (80022f4 <_Z19resetEmusParametersv+0x14c>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9c1 2300 	strd	r2, r3, [r1]
	estimated_consumption = 0;
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <_Z19resetEmusParametersv+0x150>)
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e9c1 2300 	strd	r2, r3, [r1]
	estimated_energy_left = 0;
 8002268:	4924      	ldr	r1, [pc, #144]	; (80022fc <_Z19resetEmusParametersv+0x154>)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9c1 2300 	strd	r2, r3, [r1]
	estimated_distance_left = 0;
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <_Z19resetEmusParametersv+0x158>)
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9c1 2300 	strd	r2, r3, [r1]
	estimated_distance_traveled = 0;
 8002284:	491f      	ldr	r1, [pc, #124]	; (8002304 <_Z19resetEmusParametersv+0x15c>)
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	e9c1 2300 	strd	r2, r3, [r1]

	charging_stage = unknown;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <_Z19resetEmusParametersv+0x160>)
 8002294:	2209      	movs	r2, #9
 8002296:	701a      	strb	r2, [r3, #0]
	OUTPUT_SIGNALS = 0;
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <_Z19resetEmusParametersv+0x164>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
	INPUT_SIGNALS = 0;
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <_Z19resetEmusParametersv+0x168>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
	PROTECTION_FLAGS_LSB = 0;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <_Z19resetEmusParametersv+0x16c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
	WARNING_FLAGS = 0;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <_Z19resetEmusParametersv+0x170>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	PROTECTION_FLAGS_MSB = 0;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <_Z19resetEmusParametersv+0x174>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
	BATTERY_STATUS_FLAGS = 0;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <_Z19resetEmusParametersv+0x178>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000644 	.word	0x20000644
 80022c8:	20000648 	.word	0x20000648
 80022cc:	20000650 	.word	0x20000650
 80022d0:	20000658 	.word	0x20000658
 80022d4:	20000660 	.word	0x20000660
 80022d8:	20000668 	.word	0x20000668
 80022dc:	20000670 	.word	0x20000670
 80022e0:	20000678 	.word	0x20000678
 80022e4:	20000680 	.word	0x20000680
 80022e8:	20000688 	.word	0x20000688
 80022ec:	20000690 	.word	0x20000690
 80022f0:	20000698 	.word	0x20000698
 80022f4:	200006a0 	.word	0x200006a0
 80022f8:	200006a8 	.word	0x200006a8
 80022fc:	200006b0 	.word	0x200006b0
 8002300:	200006b8 	.word	0x200006b8
 8002304:	200006c0 	.word	0x200006c0
 8002308:	20000085 	.word	0x20000085
 800230c:	200008c8 	.word	0x200008c8
 8002310:	200008c9 	.word	0x200008c9
 8002314:	200008ca 	.word	0x200008ca
 8002318:	200008cb 	.word	0x200008cb
 800231c:	200008cc 	.word	0x200008cc
 8002320:	200008cd 	.word	0x200008cd
 8002324:	00000000 	.word	0x00000000

08002328 <_Z17ParseEMUSmessagesv>:


void ParseEMUSmessages() {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
	tCAN_STM32::CAN_message_t message;
 800232e:	4b90      	ldr	r3, [pc, #576]	; (8002570 <_Z17ParseEMUSmessagesv+0x248>)
 8002330:	1d3c      	adds	r4, r7, #4
 8002332:	461d      	mov	r5, r3
 8002334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	6023      	str	r3, [r4, #0]

	if (CANbus1.CANGetFrameStruct( &message )) {
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	4619      	mov	r1, r3
 8002340:	488c      	ldr	r0, [pc, #560]	; (8002574 <_Z17ParseEMUSmessagesv+0x24c>)
 8002342:	f008 fdf5 	bl	800af30 <_ZN10tCAN_STM3217CANGetFrameStructEPNS_13CAN_message_tE>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 81e0 	beq.w	800270e <_Z17ParseEMUSmessagesv+0x3e6>
		if (message.flags.extended == true
 800234e:	7a3b      	ldrb	r3, [r7, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 81dc 	bne.w	800270e <_Z17ParseEMUSmessagesv+0x3e6>
				&& message.len == 8) {
 8002356:	7b3b      	ldrb	r3, [r7, #12]
 8002358:	2b08      	cmp	r3, #8
 800235a:	f040 81d8 	bne.w	800270e <_Z17ParseEMUSmessagesv+0x3e6>

			if (message.id == (*BMS_Messages[Message_i])()) {
 800235e:	687c      	ldr	r4, [r7, #4]
 8002360:	4b85      	ldr	r3, [pc, #532]	; (8002578 <_Z17ParseEMUSmessagesv+0x250>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <_Z17ParseEMUSmessagesv+0x254>)
 8002368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236c:	4798      	blx	r3
 800236e:	4603      	mov	r3, r0
 8002370:	429c      	cmp	r4, r3
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <_Z17ParseEMUSmessagesv+0x82>
				BMS_responding = true;
 800237e:	4b80      	ldr	r3, [pc, #512]	; (8002580 <_Z17ParseEMUSmessagesv+0x258>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]

				// move to next message if last message is received
				Message_i = (Message_i + 1) % BMS_Messages_Count;
 8002384:	4b7c      	ldr	r3, [pc, #496]	; (8002578 <_Z17ParseEMUSmessagesv+0x250>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	4b7e      	ldr	r3, [pc, #504]	; (8002584 <_Z17ParseEMUSmessagesv+0x25c>)
 800238c:	fb83 3102 	smull	r3, r1, r3, r2
 8002390:	17d3      	asrs	r3, r2, #31
 8002392:	1ac9      	subs	r1, r1, r3
 8002394:	460b      	mov	r3, r1
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	440b      	add	r3, r1
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	1ad1      	subs	r1, r2, r3
 800239e:	b2ca      	uxtb	r2, r1
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <_Z17ParseEMUSmessagesv+0x250>)
 80023a2:	701a      	strb	r2, [r3, #0]
				CAN_request_count = 0;
 80023a4:	4b78      	ldr	r3, [pc, #480]	; (8002588 <_Z17ParseEMUSmessagesv+0x260>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
			}
			else {
				//Other CAN message received
			}

			if (message.id == Overall_Parameters()) {
 80023aa:	687c      	ldr	r4, [r7, #4]
 80023ac:	f7ff fd4a 	bl	8001e44 <_Z18Overall_Parametersv>
 80023b0:	4603      	mov	r3, r0
 80023b2:	429c      	cmp	r4, r3
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d026      	beq.n	800240e <_Z17ParseEMUSmessagesv+0xe6>
					INPUT_SIGNALS = message.buf[0];
 80023c0:	7b7a      	ldrb	r2, [r7, #13]
 80023c2:	4b72      	ldr	r3, [pc, #456]	; (800258c <_Z17ParseEMUSmessagesv+0x264>)
 80023c4:	701a      	strb	r2, [r3, #0]
					OUTPUT_SIGNALS = message.buf[1];
 80023c6:	7bba      	ldrb	r2, [r7, #14]
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <_Z17ParseEMUSmessagesv+0x268>)
 80023ca:	701a      	strb	r2, [r3, #0]
					charging_stage = static_cast<CharStg>(message.buf[3]);
 80023cc:	7c3a      	ldrb	r2, [r7, #16]
 80023ce:	4b71      	ldr	r3, [pc, #452]	; (8002594 <_Z17ParseEMUSmessagesv+0x26c>)
 80023d0:	701a      	strb	r2, [r3, #0]
					ChargingStageProcessing();
 80023d2:	f000 f9b9 	bl	8002748 <_Z23ChargingStageProcessingv>
					charging_stage_duration = message.buf[4] << 8
 80023d6:	7c7b      	ldrb	r3, [r7, #17]
 80023d8:	021b      	lsls	r3, r3, #8
											| message.buf[5];
 80023da:	7cba      	ldrb	r2, [r7, #18]
 80023dc:	4313      	orrs	r3, r2
					charging_stage_duration = message.buf[4] << 8
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f886 	bl	80004f0 <__aeabi_i2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	496b      	ldr	r1, [pc, #428]	; (8002598 <_Z17ParseEMUSmessagesv+0x270>)
 80023ea:	e9c1 2300 	strd	r2, r3, [r1]
					last_charging_error = message.buf[6];
 80023ee:	7cfa      	ldrb	r2, [r7, #19]
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <_Z17ParseEMUSmessagesv+0x274>)
 80023f2:	701a      	strb	r2, [r3, #0]
					connected_cel_count = message.buf[2] << 8
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	021b      	lsls	r3, r3, #8
										| message.buf[7];
 80023f8:	7d3a      	ldrb	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
					connected_cel_count = message.buf[2] << 8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f877 	bl	80004f0 <__aeabi_i2d>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4966      	ldr	r1, [pc, #408]	; (80025a0 <_Z17ParseEMUSmessagesv+0x278>)
 8002408:	e9c1 2300 	strd	r2, r3, [r1]
					estimated_distance_traveled = (double)((uint16_t)message.buf[6] << 8
																   | message.buf[7]) * 0.1;
			}
		}
    }
}
 800240c:	e17f      	b.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
			else if (message.id == Diagnostic_Codes()) {
 800240e:	687c      	ldr	r4, [r7, #4]
 8002410:	f7ff fd22 	bl	8001e58 <_Z16Diagnostic_Codesv>
 8002414:	4603      	mov	r3, r0
 8002416:	429c      	cmp	r4, r3
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <_Z17ParseEMUSmessagesv+0x116>
					PROTECTION_FLAGS_LSB = message.buf[0];
 8002424:	7b7a      	ldrb	r2, [r7, #13]
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <_Z17ParseEMUSmessagesv+0x27c>)
 8002428:	701a      	strb	r2, [r3, #0]
					WARNING_FLAGS = message.buf[1];
 800242a:	7bba      	ldrb	r2, [r7, #14]
 800242c:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <_Z17ParseEMUSmessagesv+0x280>)
 800242e:	701a      	strb	r2, [r3, #0]
					PROTECTION_FLAGS_MSB = message.buf[2];
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <_Z17ParseEMUSmessagesv+0x284>)
 8002434:	701a      	strb	r2, [r3, #0]
					BATTERY_STATUS_FLAGS = message.buf[3];
 8002436:	7c3a      	ldrb	r2, [r7, #16]
 8002438:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <_Z17ParseEMUSmessagesv+0x288>)
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	e167      	b.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
			else if (message.id == Battery_Voltage_Parameters()) {
 800243e:	687c      	ldr	r4, [r7, #4]
 8002440:	f7ff fd16 	bl	8001e70 <_Z26Battery_Voltage_Parametersv>
 8002444:	4603      	mov	r3, r0
 8002446:	429c      	cmp	r4, r3
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d05f      	beq.n	8002514 <_Z17ParseEMUSmessagesv+0x1ec>
					cel_voltage_min = (double)message.buf[0] * 0.01 + 2;
 8002454:	7b7b      	ldrb	r3, [r7, #13]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f83a 	bl	80004d0 <__aeabi_ui2d>
 800245c:	a342      	add	r3, pc, #264	; (adr r3, 8002568 <_Z17ParseEMUSmessagesv+0x240>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f8af 	bl	80005c4 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002476:	f7fd feef 	bl	8000258 <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	494d      	ldr	r1, [pc, #308]	; (80025b4 <_Z17ParseEMUSmessagesv+0x28c>)
 8002480:	e9c1 2300 	strd	r2, r3, [r1]
					cel_voltage_max = (double)message.buf[1] * 0.01 + 2;
 8002484:	7bbb      	ldrb	r3, [r7, #14]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f822 	bl	80004d0 <__aeabi_ui2d>
 800248c:	a336      	add	r3, pc, #216	; (adr r3, 8002568 <_Z17ParseEMUSmessagesv+0x240>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fe f897 	bl	80005c4 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024a6:	f7fd fed7 	bl	8000258 <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4942      	ldr	r1, [pc, #264]	; (80025b8 <_Z17ParseEMUSmessagesv+0x290>)
 80024b0:	e9c1 2300 	strd	r2, r3, [r1]
					cel_voltage_avg = (double)message.buf[2] * 0.01 + 2;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f80a 	bl	80004d0 <__aeabi_ui2d>
 80024bc:	a32a      	add	r3, pc, #168	; (adr r3, 8002568 <_Z17ParseEMUSmessagesv+0x240>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f87f 	bl	80005c4 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024d6:	f7fd febf 	bl	8000258 <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4937      	ldr	r1, [pc, #220]	; (80025bc <_Z17ParseEMUSmessagesv+0x294>)
 80024e0:	e9c1 2300 	strd	r2, r3, [r1]
					pack_voltage = (double)((uint32_t)message.buf[3] << 8
 80024e4:	7c3b      	ldrb	r3, [r7, #16]
 80024e6:	021b      	lsls	r3, r3, #8
													| message.buf[4]
 80024e8:	7c7a      	ldrb	r2, [r7, #17]
 80024ea:	4313      	orrs	r3, r2
													| message.buf[5] << 24
 80024ec:	7cba      	ldrb	r2, [r7, #18]
 80024ee:	0612      	lsls	r2, r2, #24
 80024f0:	4313      	orrs	r3, r2
													| message.buf[6] << 16
 80024f2:	7cfa      	ldrb	r2, [r7, #19]
 80024f4:	0412      	lsls	r2, r2, #16
 80024f6:	4313      	orrs	r3, r2
					pack_voltage = (double)((uint32_t)message.buf[3] << 8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd ffe9 	bl	80004d0 <__aeabi_ui2d>
										  ) * 0.01;
 80024fe:	a31a      	add	r3, pc, #104	; (adr r3, 8002568 <_Z17ParseEMUSmessagesv+0x240>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe f85e 	bl	80005c4 <__aeabi_dmul>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
					pack_voltage = (double)((uint32_t)message.buf[3] << 8
 800250c:	492c      	ldr	r1, [pc, #176]	; (80025c0 <_Z17ParseEMUSmessagesv+0x298>)
 800250e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002512:	e0fc      	b.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
			else if (message.id == Cell_Module_Temperature_Parameters()) {
 8002514:	687c      	ldr	r4, [r7, #4]
 8002516:	f7ff fcb7 	bl	8001e88 <_Z34Cell_Module_Temperature_Parametersv>
 800251a:	4603      	mov	r3, r0
 800251c:	429c      	cmp	r4, r3
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d052      	beq.n	80025d0 <_Z17ParseEMUSmessagesv+0x2a8>
					cel_temp_min = (double)(message.buf[0] - 100);
 800252a:	7b7b      	ldrb	r3, [r7, #13]
 800252c:	3b64      	subs	r3, #100	; 0x64
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ffde 	bl	80004f0 <__aeabi_i2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4922      	ldr	r1, [pc, #136]	; (80025c4 <_Z17ParseEMUSmessagesv+0x29c>)
 800253a:	e9c1 2300 	strd	r2, r3, [r1]
					cel_temp_max = (double)(message.buf[1] - 100);
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	3b64      	subs	r3, #100	; 0x64
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffd4 	bl	80004f0 <__aeabi_i2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	491e      	ldr	r1, [pc, #120]	; (80025c8 <_Z17ParseEMUSmessagesv+0x2a0>)
 800254e:	e9c1 2300 	strd	r2, r3, [r1]
					cel_temp_avg = (double)(message.buf[2] - 100);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3b64      	subs	r3, #100	; 0x64
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd ffca 	bl	80004f0 <__aeabi_i2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	491a      	ldr	r1, [pc, #104]	; (80025cc <_Z17ParseEMUSmessagesv+0x2a4>)
 8002562:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002566:	e0d2      	b.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
 8002568:	47ae147b 	.word	0x47ae147b
 800256c:	3f847ae1 	.word	0x3f847ae1
 8002570:	080195dc 	.word	0x080195dc
 8002574:	20000534 	.word	0x20000534
 8002578:	20000084 	.word	0x20000084
 800257c:	2000006c 	.word	0x2000006c
 8002580:	200009c0 	.word	0x200009c0
 8002584:	2aaaaaab 	.word	0x2aaaaaab
 8002588:	20000640 	.word	0x20000640
 800258c:	200008c9 	.word	0x200008c9
 8002590:	200008c8 	.word	0x200008c8
 8002594:	20000085 	.word	0x20000085
 8002598:	200006a0 	.word	0x200006a0
 800259c:	200006c9 	.word	0x200006c9
 80025a0:	20000680 	.word	0x20000680
 80025a4:	200008ca 	.word	0x200008ca
 80025a8:	200008cb 	.word	0x200008cb
 80025ac:	200008cc 	.word	0x200008cc
 80025b0:	200008cd 	.word	0x200008cd
 80025b4:	20000690 	.word	0x20000690
 80025b8:	20000688 	.word	0x20000688
 80025bc:	20000698 	.word	0x20000698
 80025c0:	20000648 	.word	0x20000648
 80025c4:	20000670 	.word	0x20000670
 80025c8:	20000668 	.word	0x20000668
 80025cc:	20000678 	.word	0x20000678
			else if (message.id == State_Of_Charge_Parameters()) {
 80025d0:	687c      	ldr	r4, [r7, #4]
 80025d2:	f7ff fc65 	bl	8001ea0 <_Z26State_Of_Charge_Parametersv>
 80025d6:	4603      	mov	r3, r0
 80025d8:	429c      	cmp	r4, r3
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d037      	beq.n	8002656 <_Z17ParseEMUSmessagesv+0x32e>
					battery_current = (double)((int16_t)message.buf[0] << 8     // MSB
 80025e6:	7b7b      	ldrb	r3, [r7, #13]
 80025e8:	021b      	lsls	r3, r3, #8
													  | message.buf[1]) * 0.1;  // LSB
 80025ea:	7bba      	ldrb	r2, [r7, #14]
 80025ec:	4313      	orrs	r3, r2
					battery_current = (double)((int16_t)message.buf[0] << 8     // MSB
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ff7e 	bl	80004f0 <__aeabi_i2d>
													  | message.buf[1]) * 0.1;  // LSB
 80025f4:	a348      	add	r3, pc, #288	; (adr r3, 8002718 <_Z17ParseEMUSmessagesv+0x3f0>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fd ffe3 	bl	80005c4 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
					battery_current = (double)((int16_t)message.buf[0] << 8     // MSB
 8002602:	4949      	ldr	r1, [pc, #292]	; (8002728 <_Z17ParseEMUSmessagesv+0x400>)
 8002604:	e9c1 2300 	strd	r2, r3, [r1]
					estimated_amp_hours_left = double(uint16_t(message.buf[2] << 8
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	021b      	lsls	r3, r3, #8
															 | message.buf[3]) * 0.1);
 800260c:	b21a      	sxth	r2, r3
 800260e:	7c3b      	ldrb	r3, [r7, #16]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b21b      	sxth	r3, r3
 8002616:	b29b      	uxth	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff69 	bl	80004f0 <__aeabi_i2d>
 800261e:	a33e      	add	r3, pc, #248	; (adr r3, 8002718 <_Z17ParseEMUSmessagesv+0x3f0>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fd ffce 	bl	80005c4 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
					estimated_amp_hours_left = double(uint16_t(message.buf[2] << 8
 800262c:	493f      	ldr	r1, [pc, #252]	; (800272c <_Z17ParseEMUSmessagesv+0x404>)
 800262e:	e9c1 2300 	strd	r2, r3, [r1]
					state_of_charge = message.buf[6];
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	461a      	mov	r2, r3
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <_Z17ParseEMUSmessagesv+0x408>)
 8002638:	601a      	str	r2, [r3, #0]
					if (state_of_charge < 100 && state_of_charge > 0) {
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <_Z17ParseEMUSmessagesv+0x408>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b63      	cmp	r3, #99	; 0x63
 8002640:	dc65      	bgt.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <_Z17ParseEMUSmessagesv+0x408>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	dd61      	ble.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
						state_of_charge += 1;
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <_Z17ParseEMUSmessagesv+0x408>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a37      	ldr	r2, [pc, #220]	; (8002730 <_Z17ParseEMUSmessagesv+0x408>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	e05b      	b.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
			else if (message.id == Energy_Parameters()) {
 8002656:	687c      	ldr	r4, [r7, #4]
 8002658:	f7ff fc2e 	bl	8001eb8 <_Z17Energy_Parametersv>
 800265c:	4603      	mov	r3, r0
 800265e:	429c      	cmp	r4, r3
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d050      	beq.n	800270e <_Z17ParseEMUSmessagesv+0x3e6>
					estimated_consumption = (uint16_t)message.buf[0] << 8  // MSB
 800266c:	7b7b      	ldrb	r3, [r7, #13]
 800266e:	021b      	lsls	r3, r3, #8
													| message.buf[1];      // LSB
 8002670:	7bba      	ldrb	r2, [r7, #14]
 8002672:	4313      	orrs	r3, r2
					estimated_consumption = (uint16_t)message.buf[0] << 8  // MSB
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff3b 	bl	80004f0 <__aeabi_i2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	492d      	ldr	r1, [pc, #180]	; (8002734 <_Z17ParseEMUSmessagesv+0x40c>)
 8002680:	e9c1 2300 	strd	r2, r3, [r1]
					estimated_energy_left = (double)((uint16_t)message.buf[2] << 8
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	021b      	lsls	r3, r3, #8
															 | message.buf[3]) * 0.01;
 8002688:	7c3a      	ldrb	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
					estimated_energy_left = (double)((uint16_t)message.buf[2] << 8
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff2f 	bl	80004f0 <__aeabi_i2d>
															 | message.buf[3]) * 0.01;
 8002692:	a323      	add	r3, pc, #140	; (adr r3, 8002720 <_Z17ParseEMUSmessagesv+0x3f8>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd ff94 	bl	80005c4 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
					estimated_energy_left = (double)((uint16_t)message.buf[2] << 8
 80026a0:	4925      	ldr	r1, [pc, #148]	; (8002738 <_Z17ParseEMUSmessagesv+0x410>)
 80026a2:	e9c1 2300 	strd	r2, r3, [r1]
					estimated_distance_left = (double)((uint16_t)message.buf[4] << 8
 80026a6:	7c7b      	ldrb	r3, [r7, #17]
 80026a8:	021b      	lsls	r3, r3, #8
															   | message.buf[5]) * 0.1;
 80026aa:	7cba      	ldrb	r2, [r7, #18]
 80026ac:	4313      	orrs	r3, r2
					estimated_distance_left = (double)((uint16_t)message.buf[4] << 8
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff1e 	bl	80004f0 <__aeabi_i2d>
															   | message.buf[5]) * 0.1;
 80026b4:	a318      	add	r3, pc, #96	; (adr r3, 8002718 <_Z17ParseEMUSmessagesv+0x3f0>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd ff83 	bl	80005c4 <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
					estimated_distance_left = (double)((uint16_t)message.buf[4] << 8
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <_Z17ParseEMUSmessagesv+0x414>)
 80026c4:	e9c1 2300 	strd	r2, r3, [r1]
					if (estimated_distance_left > 1000) {
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <_Z17ParseEMUSmessagesv+0x414>)
 80026ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <_Z17ParseEMUSmessagesv+0x418>)
 80026d4:	f7fe fa06 	bl	8000ae4 <__aeabi_dcmpgt>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <_Z17ParseEMUSmessagesv+0x3c4>
						estimated_distance_left = 0;
 80026de:	4917      	ldr	r1, [pc, #92]	; (800273c <_Z17ParseEMUSmessagesv+0x414>)
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9c1 2300 	strd	r2, r3, [r1]
					estimated_distance_traveled = (double)((uint16_t)message.buf[6] << 8
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	021b      	lsls	r3, r3, #8
																   | message.buf[7]) * 0.1;
 80026f0:	7d3a      	ldrb	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
					estimated_distance_traveled = (double)((uint16_t)message.buf[6] << 8
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fefb 	bl	80004f0 <__aeabi_i2d>
																   | message.buf[7]) * 0.1;
 80026fa:	a307      	add	r3, pc, #28	; (adr r3, 8002718 <_Z17ParseEMUSmessagesv+0x3f0>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fd ff60 	bl	80005c4 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
					estimated_distance_traveled = (double)((uint16_t)message.buf[6] << 8
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <_Z17ParseEMUSmessagesv+0x41c>)
 800270a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bdb0      	pop	{r4, r5, r7, pc}
 8002716:	bf00      	nop
 8002718:	9999999a 	.word	0x9999999a
 800271c:	3fb99999 	.word	0x3fb99999
 8002720:	47ae147b 	.word	0x47ae147b
 8002724:	3f847ae1 	.word	0x3f847ae1
 8002728:	20000650 	.word	0x20000650
 800272c:	20000660 	.word	0x20000660
 8002730:	20000644 	.word	0x20000644
 8002734:	200006a8 	.word	0x200006a8
 8002738:	200006b0 	.word	0x200006b0
 800273c:	200006b8 	.word	0x200006b8
 8002740:	408f4000 	.word	0x408f4000
 8002744:	200006c0 	.word	0x200006c0

08002748 <_Z23ChargingStageProcessingv>:

void ChargingStageProcessing(){
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
    // save charging_stage_duration for each charging_stage in last_charging_stage_duration[] array
    if (charging_stage_duration > 0
 800274c:	4b71      	ldr	r3, [pc, #452]	; (8002914 <_Z23ChargingStageProcessingv+0x1cc>)
 800274e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f7fe f9c3 	bl	8000ae4 <__aeabi_dcmpgt>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d022      	beq.n	80027aa <_Z23ChargingStageProcessingv+0x62>
    		&& charging_stage >= pre_heating && charging_stage < charging_error
 8002764:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01e      	beq.n	80027aa <_Z23ChargingStageProcessingv+0x62>
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d81a      	bhi.n	80027aa <_Z23ChargingStageProcessingv+0x62>
    		&& Last_charging_stage == charging_stage) {
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	4b67      	ldr	r3, [pc, #412]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d114      	bne.n	80027aa <_Z23ChargingStageProcessingv+0x62>
        last_charging_stage_duration[charging_stage] = charging_stage_duration;
 8002780:	4b65      	ldr	r3, [pc, #404]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <_Z23ChargingStageProcessingv+0x1cc>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	4864      	ldr	r0, [pc, #400]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 800278e:	00c9      	lsls	r1, r1, #3
 8002790:	4401      	add	r1, r0
 8002792:	e9c1 2300 	strd	r2, r3, [r1]
        estimated_energy_left_stop_charge = estimated_energy_left;
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <_Z23ChargingStageProcessingv+0x1dc>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe f9f2 	bl	8000b88 <__aeabi_d2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <_Z23ChargingStageProcessingv+0x1e0>)
 80027a8:	6013      	str	r3, [r2, #0]
    }
    // calculate total charging time (in minutes) from Pre-heating [1] until Balancing [4]
    charging_duration =  last_charging_stage_duration[1] + last_charging_stage_duration[2] + last_charging_stage_duration[3] + last_charging_stage_duration[4];
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 80027ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027b0:	4b5b      	ldr	r3, [pc, #364]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 80027b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027b6:	f7fd fd4f 	bl	8000258 <__adddf3>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	4b57      	ldr	r3, [pc, #348]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 80027c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027c8:	f7fd fd46 	bl	8000258 <__adddf3>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	4b52      	ldr	r3, [pc, #328]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 80027d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027da:	f7fd fd3d 	bl	8000258 <__adddf3>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe f9cf 	bl	8000b88 <__aeabi_d2f>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a4f      	ldr	r2, [pc, #316]	; (800292c <_Z23ChargingStageProcessingv+0x1e4>)
 80027ee:	6013      	str	r3, [r2, #0]

    if (charging_stage != Last_charging_stage){
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	4b49      	ldr	r3, [pc, #292]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f000 8085 	beq.w	8002908 <_Z23ChargingStageProcessingv+0x1c0>

        // charging has begun
        if (charging_stage > pre_heating && charging_stage < charging_finished
 80027fe:	4b46      	ldr	r3, [pc, #280]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d940      	bls.n	8002888 <_Z23ChargingStageProcessingv+0x140>
 8002806:	4b44      	ldr	r3, [pc, #272]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b04      	cmp	r3, #4
 800280c:	d83c      	bhi.n	8002888 <_Z23ChargingStageProcessingv+0x140>
        		&& Last_charging_stage == ready) {
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d138      	bne.n	8002888 <_Z23ChargingStageProcessingv+0x140>
        	// make last_charging_stage_duration array empty if new charging session starts
            last_charging_stage_duration[1] = 0;
 8002816:	4942      	ldr	r1, [pc, #264]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9c1 2302 	strd	r2, r3, [r1, #8]
            last_charging_stage_duration[2] = 0;
 8002824:	493e      	ldr	r1, [pc, #248]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9c1 2304 	strd	r2, r3, [r1, #16]
            last_charging_stage_duration[3] = 0;
 8002832:	493b      	ldr	r1, [pc, #236]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9c1 2306 	strd	r2, r3, [r1, #24]
            last_charging_stage_duration[4] = 0;
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9c1 2308 	strd	r2, r3, [r1, #32]
            last_charging_stage_duration[5] = 0;
 800284e:	4934      	ldr	r1, [pc, #208]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            last_charging_stage_duration[6] = 0;
 800285c:	4930      	ldr	r1, [pc, #192]	; (8002920 <_Z23ChargingStageProcessingv+0x1d8>)
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

            charging_started_at = state_of_charge;
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <_Z23ChargingStageProcessingv+0x1e8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a31      	ldr	r2, [pc, #196]	; (8002934 <_Z23ChargingStageProcessingv+0x1ec>)
 8002870:	6013      	str	r3, [r2, #0]
            estimated_energy_left_start_charge = estimated_energy_left;
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <_Z23ChargingStageProcessingv+0x1dc>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f984 	bl	8000b88 <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <_Z23ChargingStageProcessingv+0x1f0>)
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e03f      	b.n	8002908 <_Z23ChargingStageProcessingv+0x1c0>
            //Particle.publish("Notification", String("Charging started at " + String(state_of_charge) + "% with " + String::format("%.1f", battery_power) + " kW"));
        }
        // charger stopped before charging was finished
        else if (charging_stage == ready
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d112      	bne.n	80028b6 <_Z23ChargingStageProcessingv+0x16e>
                && Last_charging_stage >= pre_heating
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00e      	beq.n	80028b6 <_Z23ChargingStageProcessingv+0x16e>
                && Last_charging_stage < charging_finished) {
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d80a      	bhi.n	80028b6 <_Z23ChargingStageProcessingv+0x16e>
            estimated_energy_left_stop_charge = estimated_energy_left;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <_Z23ChargingStageProcessingv+0x1dc>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f96d 	bl	8000b88 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <_Z23ChargingStageProcessingv+0x1e0>)
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e028      	b.n	8002908 <_Z23ChargingStageProcessingv+0x1c0>
            //Particle.publish("Notification", String("Charging stopped at " + String(state_of_charge) + "%  " + String::format("%.1f", estimated_energy_left_stop_charge - estimated_energy_left_start_charge) + " kWh added in " + (int)charging_duration + "min"));
        }
        // charging is finished normally
        else if (charging_stage == charging_finished
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d112      	bne.n	80028e4 <_Z23ChargingStageProcessingv+0x19c>
                && Last_charging_stage >= pre_heating
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00e      	beq.n	80028e4 <_Z23ChargingStageProcessingv+0x19c>
                && Last_charging_stage < charging_finished) {
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d80a      	bhi.n	80028e4 <_Z23ChargingStageProcessingv+0x19c>
            estimated_energy_left_stop_charge = estimated_energy_left;
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <_Z23ChargingStageProcessingv+0x1dc>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f956 	bl	8000b88 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <_Z23ChargingStageProcessingv+0x1e0>)
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e011      	b.n	8002908 <_Z23ChargingStageProcessingv+0x1c0>
            //Particle.publish("Notification", String("Charging finished " + String::format("%.1f", estimated_energy_left_stop_charge - estimated_energy_left_start_charge) + " kWh added in " + (int)charging_duration + "min"));
        }
        // we have a charging error
        else if (charging_stage == charging_error
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d10d      	bne.n	8002908 <_Z23ChargingStageProcessingv+0x1c0>
                && Last_charging_stage != charging_error) {
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d009      	beq.n	8002908 <_Z23ChargingStageProcessingv+0x1c0>
            estimated_energy_left_stop_charge = estimated_energy_left;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <_Z23ChargingStageProcessingv+0x1dc>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f943 	bl	8000b88 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <_Z23ChargingStageProcessingv+0x1e0>)
 8002906:	6013      	str	r3, [r2, #0]
            //Particle.publish("Notification", String("Charging error " + ChrgErr[last_charging_error]));
        }
    }
    // Last_charging_stage to current charging_stage for change test in next loop
    Last_charging_stage = charging_stage;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <_Z23ChargingStageProcessingv+0x1d0>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <_Z23ChargingStageProcessingv+0x1d4>)
 800290e:	701a      	strb	r2, [r3, #0]
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200006a0 	.word	0x200006a0
 8002918:	20000085 	.word	0x20000085
 800291c:	200006c8 	.word	0x200006c8
 8002920:	20000880 	.word	0x20000880
 8002924:	200006b0 	.word	0x200006b0
 8002928:	200008c4 	.word	0x200008c4
 800292c:	200008b8 	.word	0x200008b8
 8002930:	20000644 	.word	0x20000644
 8002934:	200008bc 	.word	0x200008bc
 8002938:	200008c0 	.word	0x200008c0

0800293c <HAL_ADC_ConvCpltCallback>:
	else {
		return estimated_energy_left_stop_charge - estimated_energy_left_start_charge;
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	 //HAL_ADC_Stop_DMA(&hadc1);
	 ADCpollID ++;
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 800294e:	701a      	strb	r2, [r3, #0]
	 if (ADCpollID > ADC_BUFFER_SIZE){
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d902      	bls.n	800295e <HAL_ADC_ConvCpltCallback+0x22>
		 ADCpollID = 0;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
	 }

}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	200003a2 	.word	0x200003a2

0800296c <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 callback for RGB LED
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x14>
    	breathingLED();
 800297c:	f000 f95c 	bl	8002c38 <_Z12breathingLEDv>
    }
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200002c4 	.word	0x200002c4
 800298c:	00000000 	.word	0x00000000

08002990 <_Z15GetInternalTempt>:
		return (1/((log(((PULL_UP_RESISTOR * adc) / (ADC_MAX - adc))/THERMISTOR_NOMINAL_RESISTANCE)/THERMISTOR_BETA) + (1 / (ZERO_CELSIUS + NOMINAL_TEMP)))) - ZERO_CELSIUS;
		// return (1/((log(((10000.0 * analogReadValue) / (4096.0 - analogReadValue))/543.5)/3846.3) + (1 / (273.15 + 25.000)))) - 273.15;
	}
}

double GetInternalTemp(uint16_t adc) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
	#define V25 1.43             					// from datasheet
	#define AVG_TEMP_SLOPE 0.0043       			// 4.3mV from datasheet

	double ADCvoltage = adc * 3.3 / 4096;    		// Vref/ADCmax (3.3V / 12 bits => 4096 is 0.0008 V/ADC unit)
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fda7 	bl	80004f0 <__aeabi_i2d>
 80029a2:	a319      	add	r3, pc, #100	; (adr r3, 8002a08 <_Z15GetInternalTempt+0x78>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fe0c 	bl	80005c4 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <_Z15GetInternalTempt+0x90>)
 80029ba:	f7fd ff2d 	bl	8000818 <__aeabi_ddiv>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return ((V25 - ADCvoltage) / AVG_TEMP_SLOPE) + 25;
 80029c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ca:	a111      	add	r1, pc, #68	; (adr r1, 8002a10 <_Z15GetInternalTempt+0x80>)
 80029cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029d0:	f7fd fc40 	bl	8000254 <__aeabi_dsub>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	a30e      	add	r3, pc, #56	; (adr r3, 8002a18 <_Z15GetInternalTempt+0x88>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd ff19 	bl	8000818 <__aeabi_ddiv>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <_Z15GetInternalTempt+0x94>)
 80029f4:	f7fd fc30 	bl	8000258 <__adddf3>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
}
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	66666666 	.word	0x66666666
 8002a0c:	400a6666 	.word	0x400a6666
 8002a10:	ae147ae1 	.word	0xae147ae1
 8002a14:	3ff6e147 	.word	0x3ff6e147
 8002a18:	75f6fd22 	.word	0x75f6fd22
 8002a1c:	3f719ce0 	.word	0x3f719ce0
 8002a20:	40b00000 	.word	0x40b00000
 8002a24:	40390000 	.word	0x40390000

08002a28 <_Z10GetVoltaget>:

double GetVoltage(uint16_t adc) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
	return adc * 3.3 / 4096 * AIVoltageDivider;
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd5b 	bl	80004f0 <__aeabi_i2d>
 8002a3a:	a30f      	add	r3, pc, #60	; (adr r3, 8002a78 <_Z10GetVoltaget+0x50>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fdc0 	bl	80005c4 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <_Z10GetVoltaget+0x58>)
 8002a52:	f7fd fee1 	bl	8000818 <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_Z10GetVoltaget+0x5c>)
 8002a64:	f7fd fdae 	bl	80005c4 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
}
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	66666666 	.word	0x66666666
 8002a7c:	400a6666 	.word	0x400a6666
 8002a80:	40b00000 	.word	0x40b00000
 8002a84:	40260000 	.word	0x40260000

08002a88 <_Z22CANSendSoftwareVersionv>:
	}
	return byte;
}

void CANSendSoftwareVersion()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	if ((uint32_t)(HAL_GetTick() - CANSendSoftwareVersionTimestamp) >= CANSendSoftwareVersionInterval
 8002a8c:	f001 fba4 	bl	80041d8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <_Z22CANSendSoftwareVersionv+0x9c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
			&& HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0) {
 8002a98:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <_Z22CANSendSoftwareVersionv+0xa0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d907      	bls.n	8002aae <_Z22CANSendSoftwareVersionv+0x26>
 8002a9e:	4823      	ldr	r0, [pc, #140]	; (8002b2c <_Z22CANSendSoftwareVersionv+0xa4>)
 8002aa0:	f002 fcba 	bl	8005418 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <_Z22CANSendSoftwareVersionv+0x26>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <_Z22CANSendSoftwareVersionv+0x28>
 8002aae:	2300      	movs	r3, #0
	if ((uint32_t)(HAL_GetTick() - CANSendSoftwareVersionTimestamp) >= CANSendSoftwareVersionInterval
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d034      	beq.n	8002b1e <_Z22CANSendSoftwareVersionv+0x96>
		CANSendSoftwareVersionTimestamp = HAL_GetTick();
 8002ab4:	f001 fb90 	bl	80041d8 <HAL_GetTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <_Z22CANSendSoftwareVersionv+0x9c>)
 8002abc:	6013      	str	r3, [r2, #0]

		// send CAN message with software version on CAN_BUS_0
		CANTxHeader.IDE = CAN_ID_STD; // CAN_ID_STD or CAN_ID_EXT
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <_Z22CANSendSoftwareVersionv+0xa8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
		CANTxHeader.StdId = SW_VERSION_CAN_ID;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <_Z22CANSendSoftwareVersionv+0xa8>)
 8002ac6:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002aca:	601a      	str	r2, [r3, #0]
		//CANTxHeader.ExtId = 0x1F000000;
		CANTxHeader.RTR = CAN_RTR_DATA;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <_Z22CANSendSoftwareVersionv+0xa8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
		CANTxHeader.DLC = 8;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <_Z22CANSendSoftwareVersionv+0xa8>)
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	611a      	str	r2, [r3, #16]
		CANTxHeader.TransmitGlobalTime = DISABLE;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <_Z22CANSendSoftwareVersionv+0xa8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	751a      	strb	r2, [r3, #20]

		CANTxdata[0] = SoftwareVersion[0];
 8002ade:	2256      	movs	r2, #86	; 0x56
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002ae2:	701a      	strb	r2, [r3, #0]
		CANTxdata[1] = SoftwareVersion[1];
 8002ae4:	2230      	movs	r2, #48	; 0x30
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002ae8:	705a      	strb	r2, [r3, #1]
		CANTxdata[2] = SoftwareVersion[2];
 8002aea:	222e      	movs	r2, #46	; 0x2e
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002aee:	709a      	strb	r2, [r3, #2]
		CANTxdata[3] = SoftwareVersion[3];
 8002af0:	2231      	movs	r2, #49	; 0x31
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002af4:	70da      	strb	r2, [r3, #3]
		CANTxdata[4] = SoftwareVersion[4];
 8002af6:	2200      	movs	r2, #0
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002afa:	711a      	strb	r2, [r3, #4]
		CANTxdata[5] = SoftwareVersion[5];
 8002afc:	2200      	movs	r2, #0
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002b00:	715a      	strb	r2, [r3, #5]
		CANTxdata[6] = SoftwareVersion[6];
 8002b02:	2200      	movs	r2, #0
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002b06:	719a      	strb	r2, [r3, #6]
		CANTxdata[7] = SoftwareVersion[7];
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002b0c:	71da      	strb	r2, [r3, #7]
		// send message
		if (HAL_CAN_AddTxMessage(&hcan1, &CANTxHeader, CANTxdata, &CANTxMailbox) != HAL_OK) {
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <_Z22CANSendSoftwareVersionv+0xb0>)
 8002b10:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <_Z22CANSendSoftwareVersionv+0xac>)
 8002b12:	4907      	ldr	r1, [pc, #28]	; (8002b30 <_Z22CANSendSoftwareVersionv+0xa8>)
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <_Z22CANSendSoftwareVersionv+0xa4>)
 8002b16:	f002 fba5 	bl	8005264 <HAL_CAN_AddTxMessage>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
			// Handle Transmission error
		}
	}

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000
 8002b28:	05265bff 	.word	0x05265bff
 8002b2c:	20000274 	.word	0x20000274
 8002b30:	20000594 	.word	0x20000594
 8002b34:	200005ac 	.word	0x200005ac
 8002b38:	200005b4 	.word	0x200005b4

08002b3c <_Z11NextFadeValv>:


void NextFadeVal()
// Fading (breath) LED's with gamma corrected (sine) PWM
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
	if (FadeDirection == UP) {
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <_Z11NextFadeValv+0x94>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d117      	bne.n	8002b78 <_Z11NextFadeValv+0x3c>
		FadeValue += FadeStepSize;
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002b52:	701a      	strb	r2, [r3, #0]
		if (FadeValue >= RGB->UpperFadeLimit - FadeStepSize) {
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <_Z11NextFadeValv+0x9c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	791b      	ldrb	r3, [r3, #4]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	429a      	cmp	r2, r3
 8002b64:	db2f      	blt.n	8002bc6 <_Z11NextFadeValv+0x8a>
			// At max, limit and change direction
			FadeValue = RGB->UpperFadeLimit;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <_Z11NextFadeValv+0x9c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	791a      	ldrb	r2, [r3, #4]
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002b6e:	701a      	strb	r2, [r3, #0]
			FadeDirection = DOWN;
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <_Z11NextFadeValv+0x94>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
		else {
			// keep fading down
			FadeValue -= FadeStepSize;
		}
	}
}
 8002b76:	e026      	b.n	8002bc6 <_Z11NextFadeValv+0x8a>
		if (FadeValue <= (RGB->LowerFadeLimit + FadeStepSize)) {
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <_Z11NextFadeValv+0x9c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	3302      	adds	r3, #2
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dc17      	bgt.n	8002bba <_Z11NextFadeValv+0x7e>
			FadeValue = RGB->LowerFadeLimit;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <_Z11NextFadeValv+0x9c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	78da      	ldrb	r2, [r3, #3]
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002b92:	701a      	strb	r2, [r3, #0]
			FadeDirection = UP;
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <_Z11NextFadeValv+0x94>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
			CycleCount ++;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <_Z11NextFadeValv+0xa0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <_Z11NextFadeValv+0xa0>)
 8002ba2:	6013      	str	r3, [r2, #0]
			if (CycleCount > RGB->CycleCount) {
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <_Z11NextFadeValv+0x9c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <_Z11NextFadeValv+0xa0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d209      	bcs.n	8002bc6 <_Z11NextFadeValv+0x8a>
				CycleCount = 0;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <_Z11NextFadeValv+0xa0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
}
 8002bb8:	e005      	b.n	8002bc6 <_Z11NextFadeValv+0x8a>
			FadeValue -= FadeStepSize;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	3b02      	subs	r3, #2
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <_Z11NextFadeValv+0x98>)
 8002bc4:	701a      	strb	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	200005c8 	.word	0x200005c8
 8002bd4:	200005c9 	.word	0x200005c9
 8002bd8:	20000064 	.word	0x20000064
 8002bdc:	200005d0 	.word	0x200005d0

08002be0 <_Z15GammaCorrectionh>:

uint8_t GammaCorrection(uint8_t linear)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
	uint8_t p1,p2;

	// shift linear FadeValue (0 - 255) 5 bits to the right
	// to get the two closest points.
	// p1 fade_table[0-8] and p2 fade_table[1-9]
	p1 = GammaLut[ (linear >> 5)  ];
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <_Z15GammaCorrectionh+0x50>)
 8002bf4:	5c9b      	ldrb	r3, [r3, r2]
 8002bf6:	73fb      	strb	r3, [r7, #15]
	p2 = GammaLut[ (linear >> 5)+1];
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <_Z15GammaCorrectionh+0x50>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	73bb      	strb	r3, [r7, #14]

	// linear interpolation
	//return p1 + ( (p2-p1) * ((linear / 32) - (linear >> 5)) );
	return p1 + ( (p2-p1) * (linear & 0x1F) ) / 32;
 8002c06:	7bba      	ldrb	r2, [r7, #14]
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	79fa      	ldrb	r2, [r7, #7]
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da00      	bge.n	8002c1c <_Z15GammaCorrectionh+0x3c>
 8002c1a:	331f      	adds	r3, #31
 8002c1c:	115b      	asrs	r3, r3, #5
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2db      	uxtb	r3, r3
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	0801997c 	.word	0x0801997c
 8002c34:	00000000 	.word	0x00000000

08002c38 <_Z12breathingLEDv>:

void breathingLED()
// make RGB status LED breathing
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
	uint32_t FadeInterval;
	if (RGB->UpperFadeLimit - RGB->LowerFadeLimit > 0) {
 8002c3e:	4bbc      	ldr	r3, [pc, #752]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	791b      	ldrb	r3, [r3, #4]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4bba      	ldr	r3, [pc, #744]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78db      	ldrb	r3, [r3, #3]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	dd0f      	ble.n	8002c72 <_Z12breathingLEDv+0x3a>
		FadeInterval = RGB->FadeDuration / (RGB->UpperFadeLimit - RGB->LowerFadeLimit) * FadeStepSize;
 8002c52:	4bb7      	ldr	r3, [pc, #732]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4ab5      	ldr	r2, [pc, #724]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	7912      	ldrb	r2, [r2, #4]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4ab3      	ldr	r2, [pc, #716]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	78d2      	ldrb	r2, [r2, #3]
 8002c66:	1a8a      	subs	r2, r1, r2
 8002c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	e001      	b.n	8002c76 <_Z12breathingLEDv+0x3e>
	} else {
		FadeInterval = 100;
 8002c72:	2364      	movs	r3, #100	; 0x64
 8002c74:	607b      	str	r3, [r7, #4]
	}

	if ((uint32_t)(HAL_GetTick() - FadeTimestamp) >= FadeInterval) {
 8002c76:	f001 faaf 	bl	80041d8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4bad      	ldr	r3, [pc, #692]	; (8002f34 <_Z12breathingLEDv+0x2fc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8241 	beq.w	8003116 <_Z12breathingLEDv+0x4de>

		if ( (FadeValue > RGB->LowerFadeLimit) // busy fading
 8002c94:	4ba6      	ldr	r3, [pc, #664]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78da      	ldrb	r2, [r3, #3]
 8002c9a:	4ba7      	ldr	r3, [pc, #668]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
		  || (FadeValue <= RGB->LowerFadeLimit && CycleCount < RGB->CycleCount && (uint32_t)(HAL_GetTick() - FadeTimestamp) >= FadeInterval + RGB->CycleDelay ) // or end of one cycle and CycleDelay has passed
		  || (FadeValue <= RGB->LowerFadeLimit && (uint32_t)(HAL_GetTick() - FadeTimestamp) >= FadeInterval + RGB->CycleCountDelay ) ) // or end of CycleCount and CycleCountDelay has passed
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d32e      	bcc.n	8002d00 <_Z12breathingLEDv+0xc8>
		  || (FadeValue <= RGB->LowerFadeLimit && CycleCount < RGB->CycleCount && (uint32_t)(HAL_GetTick() - FadeTimestamp) >= FadeInterval + RGB->CycleDelay ) // or end of one cycle and CycleDelay has passed
 8002ca2:	4ba3      	ldr	r3, [pc, #652]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	78da      	ldrb	r2, [r3, #3]
 8002ca8:	4ba3      	ldr	r3, [pc, #652]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d313      	bcc.n	8002cd8 <_Z12breathingLEDv+0xa0>
 8002cb0:	4b9f      	ldr	r3, [pc, #636]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	4ba1      	ldr	r3, [pc, #644]	; (8002f3c <_Z12breathingLEDv+0x304>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d90c      	bls.n	8002cd8 <_Z12breathingLEDv+0xa0>
 8002cbe:	f001 fa8b 	bl	80041d8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b9b      	ldr	r3, [pc, #620]	; (8002f34 <_Z12breathingLEDv+0x2fc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	4b99      	ldr	r3, [pc, #612]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	440b      	add	r3, r1
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d213      	bcs.n	8002d00 <_Z12breathingLEDv+0xc8>
		  || (FadeValue <= RGB->LowerFadeLimit && (uint32_t)(HAL_GetTick() - FadeTimestamp) >= FadeInterval + RGB->CycleCountDelay ) ) // or end of CycleCount and CycleCountDelay has passed
 8002cd8:	4b95      	ldr	r3, [pc, #596]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	78da      	ldrb	r2, [r3, #3]
 8002cde:	4b96      	ldr	r3, [pc, #600]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d30e      	bcc.n	8002d04 <_Z12breathingLEDv+0xcc>
 8002ce6:	f001 fa77 	bl	80041d8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <_Z12breathingLEDv+0x2fc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6959      	ldr	r1, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d301      	bcc.n	8002d04 <_Z12breathingLEDv+0xcc>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <_Z12breathingLEDv+0xce>
 8002d04:	2300      	movs	r3, #0
		if ( (FadeValue > RGB->LowerFadeLimit) // busy fading
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8205 	beq.w	8003116 <_Z12breathingLEDv+0x4de>
		{
			FadeTimestamp = HAL_GetTick();
 8002d0c:	f001 fa64 	bl	80041d8 <HAL_GetTick>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a88      	ldr	r2, [pc, #544]	; (8002f34 <_Z12breathingLEDv+0x2fc>)
 8002d14:	6013      	str	r3, [r2, #0]
			NextFadeVal();
 8002d16:	f7ff ff11 	bl	8002b3c <_Z11NextFadeValv>

			// calculate each LED brightness with FadeValue brightness and color brightness
			// scale FadeValue 0% - 100% to 0 - 255
			// lookup gamma corrected intensity
			uint8_t bluePWM  = GammaCorrection(double2byte((double)(RGB->BlueIntensity  * 0.01 * FadeValue * 2.55)));
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	789b      	ldrb	r3, [r3, #2]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fbe5 	bl	80004f0 <__aeabi_i2d>
 8002d26:	a37e      	add	r3, pc, #504	; (adr r3, 8002f20 <_Z12breathingLEDv+0x2e8>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fc4a 	bl	80005c4 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fbd7 	bl	80004f0 <__aeabi_i2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fc3b 	bl	80005c4 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	a374      	add	r3, pc, #464	; (adr r3, 8002f28 <_Z12breathingLEDv+0x2f0>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fc32 	bl	80005c4 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	f7fd feae 	bl	8000ad0 <__aeabi_dcmpge>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d034      	beq.n	8002de4 <_Z12breathingLEDv+0x1ac>
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	789b      	ldrb	r3, [r3, #2]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fbb5 	bl	80004f0 <__aeabi_i2d>
 8002d86:	a366      	add	r3, pc, #408	; (adr r3, 8002f20 <_Z12breathingLEDv+0x2e8>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fc1a 	bl	80005c4 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fba7 	bl	80004f0 <__aeabi_i2d>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7fd fc0b 	bl	80005c4 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	a35c      	add	r3, pc, #368	; (adr r3, 8002f28 <_Z12breathingLEDv+0x2f0>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fc02 	bl	80005c4 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	4b5c      	ldr	r3, [pc, #368]	; (8002f40 <_Z12breathingLEDv+0x308>)
 8002dce:	f7fd fa43 	bl	8000258 <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd feb5 	bl	8000b48 <__aeabi_d2uiz>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e033      	b.n	8002e4c <_Z12breathingLEDv+0x214>
 8002de4:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	789b      	ldrb	r3, [r3, #2]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb80 	bl	80004f0 <__aeabi_i2d>
 8002df0:	a34b      	add	r3, pc, #300	; (adr r3, 8002f20 <_Z12breathingLEDv+0x2e8>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fbe5 	bl	80005c4 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4614      	mov	r4, r2
 8002e00:	461d      	mov	r5, r3
 8002e02:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fb72 	bl	80004f0 <__aeabi_i2d>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd fbd6 	bl	80005c4 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	a341      	add	r3, pc, #260	; (adr r3, 8002f28 <_Z12breathingLEDv+0x2f0>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd fbcd 	bl	80005c4 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <_Z12breathingLEDv+0x308>)
 8002e38:	f7fd fa0c 	bl	8000254 <__aeabi_dsub>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7fd fe80 	bl	8000b48 <__aeabi_d2uiz>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fec7 	bl	8002be0 <_Z15GammaCorrectionh>
 8002e52:	4603      	mov	r3, r0
 8002e54:	70fb      	strb	r3, [r7, #3]
			uint8_t redPWM   = GammaCorrection(double2byte((double)(RGB->RedIntensity   * 0.01 * FadeValue * 2.55)));
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb47 	bl	80004f0 <__aeabi_i2d>
 8002e62:	a32f      	add	r3, pc, #188	; (adr r3, 8002f20 <_Z12breathingLEDv+0x2e8>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd fbac 	bl	80005c4 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4614      	mov	r4, r2
 8002e72:	461d      	mov	r5, r3
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb39 	bl	80004f0 <__aeabi_i2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	f7fd fb9d 	bl	80005c4 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	a325      	add	r3, pc, #148	; (adr r3, 8002f28 <_Z12breathingLEDv+0x2f0>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fb94 	bl	80005c4 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f7fd fe10 	bl	8000ad0 <__aeabi_dcmpge>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d046      	beq.n	8002f44 <_Z12breathingLEDv+0x30c>
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <_Z12breathingLEDv+0x2f8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fb17 	bl	80004f0 <__aeabi_i2d>
 8002ec2:	a317      	add	r3, pc, #92	; (adr r3, 8002f20 <_Z12breathingLEDv+0x2e8>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fb7c 	bl	80005c4 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <_Z12breathingLEDv+0x300>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb09 	bl	80004f0 <__aeabi_i2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd fb6d 	bl	80005c4 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	a30d      	add	r3, pc, #52	; (adr r3, 8002f28 <_Z12breathingLEDv+0x2f0>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fb64 	bl	80005c4 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <_Z12breathingLEDv+0x308>)
 8002f0a:	f7fd f9a5 	bl	8000258 <__adddf3>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fe17 	bl	8000b48 <__aeabi_d2uiz>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e045      	b.n	8002fac <_Z12breathingLEDv+0x374>
 8002f20:	47ae147b 	.word	0x47ae147b
 8002f24:	3f847ae1 	.word	0x3f847ae1
 8002f28:	66666666 	.word	0x66666666
 8002f2c:	40046666 	.word	0x40046666
 8002f30:	20000064 	.word	0x20000064
 8002f34:	200005cc 	.word	0x200005cc
 8002f38:	200005c9 	.word	0x200005c9
 8002f3c:	200005d0 	.word	0x200005d0
 8002f40:	3fe00000 	.word	0x3fe00000
 8002f44:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <_Z12breathingLEDv+0x4f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fad0 	bl	80004f0 <__aeabi_i2d>
 8002f50:	a373      	add	r3, pc, #460	; (adr r3, 8003120 <_Z12breathingLEDv+0x4e8>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd fb35 	bl	80005c4 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4614      	mov	r4, r2
 8002f60:	461d      	mov	r5, r3
 8002f62:	4b74      	ldr	r3, [pc, #464]	; (8003134 <_Z12breathingLEDv+0x4fc>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fac2 	bl	80004f0 <__aeabi_i2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4620      	mov	r0, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	f7fd fb26 	bl	80005c4 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	a369      	add	r3, pc, #420	; (adr r3, 8003128 <_Z12breathingLEDv+0x4f0>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f7fd fb1d 	bl	80005c4 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	4b68      	ldr	r3, [pc, #416]	; (8003138 <_Z12breathingLEDv+0x500>)
 8002f98:	f7fd f95c 	bl	8000254 <__aeabi_dsub>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fdd0 	bl	8000b48 <__aeabi_d2uiz>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fe17 	bl	8002be0 <_Z15GammaCorrectionh>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	70bb      	strb	r3, [r7, #2]
			uint8_t greenPWM = GammaCorrection(double2byte((double)(RGB->GreenIntensity * 0.01 * FadeValue * 2.55)));
 8002fb6:	4b5e      	ldr	r3, [pc, #376]	; (8003130 <_Z12breathingLEDv+0x4f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fa97 	bl	80004f0 <__aeabi_i2d>
 8002fc2:	a357      	add	r3, pc, #348	; (adr r3, 8003120 <_Z12breathingLEDv+0x4e8>)
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f7fd fafc 	bl	80005c4 <__aeabi_dmul>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	4b57      	ldr	r3, [pc, #348]	; (8003134 <_Z12breathingLEDv+0x4fc>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fa89 	bl	80004f0 <__aeabi_i2d>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7fd faed 	bl	80005c4 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	a34d      	add	r3, pc, #308	; (adr r3, 8003128 <_Z12breathingLEDv+0x4f0>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fae4 	bl	80005c4 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	f7fd fd60 	bl	8000ad0 <__aeabi_dcmpge>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d034      	beq.n	8003080 <_Z12breathingLEDv+0x448>
 8003016:	4b46      	ldr	r3, [pc, #280]	; (8003130 <_Z12breathingLEDv+0x4f8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fa67 	bl	80004f0 <__aeabi_i2d>
 8003022:	a33f      	add	r3, pc, #252	; (adr r3, 8003120 <_Z12breathingLEDv+0x4e8>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd facc 	bl	80005c4 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <_Z12breathingLEDv+0x4fc>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa59 	bl	80004f0 <__aeabi_i2d>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4620      	mov	r0, r4
 8003044:	4629      	mov	r1, r5
 8003046:	f7fd fabd 	bl	80005c4 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	a335      	add	r3, pc, #212	; (adr r3, 8003128 <_Z12breathingLEDv+0x4f0>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd fab4 	bl	80005c4 <__aeabi_dmul>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	4b33      	ldr	r3, [pc, #204]	; (8003138 <_Z12breathingLEDv+0x500>)
 800306a:	f7fd f8f5 	bl	8000258 <__adddf3>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fd67 	bl	8000b48 <__aeabi_d2uiz>
 800307a:	4603      	mov	r3, r0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e033      	b.n	80030e8 <_Z12breathingLEDv+0x4b0>
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <_Z12breathingLEDv+0x4f8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa32 	bl	80004f0 <__aeabi_i2d>
 800308c:	a324      	add	r3, pc, #144	; (adr r3, 8003120 <_Z12breathingLEDv+0x4e8>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fa97 	bl	80005c4 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	461d      	mov	r5, r3
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <_Z12breathingLEDv+0x4fc>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa24 	bl	80004f0 <__aeabi_i2d>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd fa88 	bl	80005c4 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	a31a      	add	r3, pc, #104	; (adr r3, 8003128 <_Z12breathingLEDv+0x4f0>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd fa7f 	bl	80005c4 <__aeabi_dmul>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <_Z12breathingLEDv+0x500>)
 80030d4:	f7fd f8be 	bl	8000254 <__aeabi_dsub>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd32 	bl	8000b48 <__aeabi_d2uiz>
 80030e4:	4603      	mov	r3, r0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fd79 	bl	8002be0 <_Z15GammaCorrectionh>
 80030ee:	4603      	mov	r3, r0
 80030f0:	707b      	strb	r3, [r7, #1]
			//__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, bluePWM);  // blue LED duty cycle
			//__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, redPWM);   // red LED duty cycle
			//__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, greenPWM); // green LED duty cycle

			// Set Half-Bridge output PWM Duty Cycles
			setSoftPWM(LED_B_Pin, bluePWM, (uint32_t*)&softPWMbuffer);
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	4a11      	ldr	r2, [pc, #68]	; (800313c <_Z12breathingLEDv+0x504>)
 80030f6:	4619      	mov	r1, r3
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fe fee9 	bl	8001ed0 <_Z10setSoftPWMtmPm>
			setSoftPWM(LED_R_Pin, redPWM, (uint32_t*)&softPWMbuffer);
 80030fe:	78bb      	ldrb	r3, [r7, #2]
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <_Z12breathingLEDv+0x504>)
 8003102:	4619      	mov	r1, r3
 8003104:	2002      	movs	r0, #2
 8003106:	f7fe fee3 	bl	8001ed0 <_Z10setSoftPWMtmPm>
			setSoftPWM(LED_G_Pin, greenPWM, (uint32_t*)&softPWMbuffer);
 800310a:	787b      	ldrb	r3, [r7, #1]
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <_Z12breathingLEDv+0x504>)
 800310e:	4619      	mov	r1, r3
 8003110:	2004      	movs	r0, #4
 8003112:	f7fe fedd 	bl	8001ed0 <_Z10setSoftPWMtmPm>
		}
	}
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bdb0      	pop	{r4, r5, r7, pc}
 800311e:	bf00      	nop
 8003120:	47ae147b 	.word	0x47ae147b
 8003124:	3f847ae1 	.word	0x3f847ae1
 8003128:	66666666 	.word	0x66666666
 800312c:	40046666 	.word	0x40046666
 8003130:	20000064 	.word	0x20000064
 8003134:	200005c9 	.word	0x200005c9
 8003138:	3fe00000 	.word	0x3fe00000
 800313c:	200003a4 	.word	0x200003a4

08003140 <_Z22SendN2kBatteryMessagesv>:


void SendN2kBatteryMessages() {
 8003140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003144:	b0cd      	sub	sp, #308	; 0x134
 8003146:	af0a      	add	r7, sp, #40	; 0x28
    tN2kMsg N2kMsg;
 8003148:	f107 000c 	add.w	r0, r7, #12
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2300      	movs	r3, #0
 8003152:	2206      	movs	r2, #6
 8003154:	210f      	movs	r1, #15
 8003156:	f00b fd8f 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

    if ( DCBatStatusScheduler.IsTime() ) {
 800315a:	4895      	ldr	r0, [pc, #596]	; (80033b0 <_Z22SendN2kBatteryMessagesv+0x270>)
 800315c:	f7fe fcd9 	bl	8001b12 <_ZN17tN2kSyncScheduler6IsTimeEv>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d07e      	beq.n	8003264 <_Z22SendN2kBatteryMessagesv+0x124>
      DCBatStatusScheduler.UpdateNextTime();
 8003166:	4892      	ldr	r0, [pc, #584]	; (80033b0 <_Z22SendN2kBatteryMessagesv+0x270>)
 8003168:	f7fe fce6 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>

      SequenceID ++;
 800316c:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b8f      	ldr	r3, [pc, #572]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 8003176:	701a      	strb	r2, [r3, #0]
      if ( SequenceID > 252 ) {
 8003178:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2bfc      	cmp	r3, #252	; 0xfc
 800317e:	d902      	bls.n	8003186 <_Z22SendN2kBatteryMessagesv+0x46>
        SequenceID = 0;
 8003180:	4b8c      	ldr	r3, [pc, #560]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
      }

  //  SetN2kDCBatStatus is equal to SetN2kPGN127508
  //  SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent, double BatteryTemperature, unsigned char SID)
      SetN2kDCBatStatus(N2kMsg, 0, pack_voltage, battery_current, CToKelvin(cel_temp_avg), SequenceID);
 8003186:	4b8c      	ldr	r3, [pc, #560]	; (80033b8 <_Z22SendN2kBatteryMessagesv+0x278>)
 8003188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800318c:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <_Z22SendN2kBatteryMessagesv+0x27c>)
 800318e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003192:	4b8b      	ldr	r3, [pc, #556]	; (80033c0 <_Z22SendN2kBatteryMessagesv+0x280>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	f7fe fd74 	bl	8001c88 <_Z9CToKelvind>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4983      	ldr	r1, [pc, #524]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 80031a6:	7809      	ldrb	r1, [r1, #0]
 80031a8:	f107 000c 	add.w	r0, r7, #12
 80031ac:	9104      	str	r1, [sp, #16]
 80031ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031b2:	e9cd 4500 	strd	r4, r5, [sp]
 80031b6:	4642      	mov	r2, r8
 80031b8:	464b      	mov	r3, r9
 80031ba:	2100      	movs	r1, #0
 80031bc:	f7fe fdf9 	bl	8001db2 <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>
      NMEA2000.SendMsg(N2kMsg);
 80031c0:	4b80      	ldr	r3, [pc, #512]	; (80033c4 <_Z22SendN2kBatteryMessagesv+0x284>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f107 010c 	add.w	r1, r7, #12
 80031c8:	2200      	movs	r2, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f00f fb5c 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

      SetN2kDCBatStatus(N2kMsg, 1 , cel_voltage_min, N2kDoubleNA, CToKelvin(cel_temp_min), SequenceID);
 80031d0:	4b7d      	ldr	r3, [pc, #500]	; (80033c8 <_Z22SendN2kBatteryMessagesv+0x288>)
 80031d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031d6:	4b7d      	ldr	r3, [pc, #500]	; (80033cc <_Z22SendN2kBatteryMessagesv+0x28c>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f7fe fd52 	bl	8001c88 <_Z9CToKelvind>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4972      	ldr	r1, [pc, #456]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 80031ea:	7809      	ldrb	r1, [r1, #0]
 80031ec:	f107 000c 	add.w	r0, r7, #12
 80031f0:	9104      	str	r1, [sp, #16]
 80031f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031f6:	a36a      	add	r3, pc, #424	; (adr r3, 80033a0 <_Z22SendN2kBatteryMessagesv+0x260>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003200:	4622      	mov	r2, r4
 8003202:	462b      	mov	r3, r5
 8003204:	2101      	movs	r1, #1
 8003206:	f7fe fdd4 	bl	8001db2 <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>
      NMEA2000.SendMsg(N2kMsg);
 800320a:	4b6e      	ldr	r3, [pc, #440]	; (80033c4 <_Z22SendN2kBatteryMessagesv+0x284>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f107 010c 	add.w	r1, r7, #12
 8003212:	2200      	movs	r2, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f00f fb37 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

      SetN2kDCBatStatus(N2kMsg, 2 , cel_voltage_max, N2kDoubleNA, CToKelvin(cel_temp_max), SequenceID);
 800321a:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <_Z22SendN2kBatteryMessagesv+0x290>)
 800321c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003220:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <_Z22SendN2kBatteryMessagesv+0x294>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fe fd2d 	bl	8001c88 <_Z9CToKelvind>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4960      	ldr	r1, [pc, #384]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 8003234:	7809      	ldrb	r1, [r1, #0]
 8003236:	f107 000c 	add.w	r0, r7, #12
 800323a:	9104      	str	r1, [sp, #16]
 800323c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003240:	a357      	add	r3, pc, #348	; (adr r3, 80033a0 <_Z22SendN2kBatteryMessagesv+0x260>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	e9cd 2300 	strd	r2, r3, [sp]
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	2102      	movs	r1, #2
 8003250:	f7fe fdaf 	bl	8001db2 <_Z17SetN2kDCBatStatusR7tN2kMsghdddh>
      NMEA2000.SendMsg(N2kMsg);
 8003254:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <_Z22SendN2kBatteryMessagesv+0x284>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f107 010c 	add.w	r1, r7, #12
 800325c:	2200      	movs	r2, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f00f fb12 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }

    if ( DCStatusScheduler.IsTime() ) {
 8003264:	485c      	ldr	r0, [pc, #368]	; (80033d8 <_Z22SendN2kBatteryMessagesv+0x298>)
 8003266:	f7fe fc54 	bl	8001b12 <_ZN17tN2kSyncScheduler6IsTimeEv>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d028      	beq.n	80032c2 <_Z22SendN2kBatteryMessagesv+0x182>
      DCStatusScheduler.UpdateNextTime();
 8003270:	4859      	ldr	r0, [pc, #356]	; (80033d8 <_Z22SendN2kBatteryMessagesv+0x298>)
 8003272:	f7fe fc61 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127506(const tN2kMsg &N2kMsg, unsigned char &SID, unsigned char &DCInstance, tN2kDCType &DCType,
  //                     uint8_t &StateOfCharge, uint8_t &StateOfHealth, double &TimeRemaining, double &RippleVoltage, double &Capacity)
      SetN2kDCStatus(N2kMsg,SequenceID, 0, N2kDCt_Battery, state_of_charge, 0xFF, SecondsRemaining(), 0xFF, estimated_amp_hours_left);
 8003276:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <_Z22SendN2kBatteryMessagesv+0x274>)
 8003278:	781e      	ldrb	r6, [r3, #0]
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <_Z22SendN2kBatteryMessagesv+0x29c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b2dc      	uxtb	r4, r3
 8003280:	f7fe feba 	bl	8001ff8 <_Z16SecondsRemainingv>
 8003284:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <_Z22SendN2kBatteryMessagesv+0x2a0>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f107 050c 	add.w	r5, r7, #12
 800328e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003292:	a345      	add	r3, pc, #276	; (adr r3, 80033a8 <_Z22SendN2kBatteryMessagesv+0x268>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800329c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032a0:	23ff      	movs	r3, #255	; 0xff
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	9400      	str	r4, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	2200      	movs	r2, #0
 80032aa:	4631      	mov	r1, r6
 80032ac:	4628      	mov	r0, r5
 80032ae:	f7fe fd33 	bl	8001d18 <_Z14SetN2kDCStatusR7tN2kMsghh10tN2kDCTypehhddd>
      NMEA2000.SendMsg(N2kMsg);
 80032b2:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <_Z22SendN2kBatteryMessagesv+0x284>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f107 010c 	add.w	r1, r7, #12
 80032ba:	2200      	movs	r2, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f00f fae3 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }

    if ( ChargerStatusScheduler.IsTime() ) {
 80032c2:	4848      	ldr	r0, [pc, #288]	; (80033e4 <_Z22SendN2kBatteryMessagesv+0x2a4>)
 80032c4:	f7fe fc25 	bl	8001b12 <_ZN17tN2kSyncScheduler6IsTimeEv>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d023      	beq.n	8003316 <_Z22SendN2kBatteryMessagesv+0x1d6>
      ChargerStatusScheduler.UpdateNextTime();
 80032ce:	4845      	ldr	r0, [pc, #276]	; (80033e4 <_Z22SendN2kBatteryMessagesv+0x2a4>)
 80032d0:	f7fe fc32 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127507(tN2kMsg &N2kMsg, unsigned char Instance, unsigned char BatteryInstance,
  //                     tN2kChargeState ChargeState, tN2kChargerMode ChargerMode=N2kCM_Standalone,
  //                     tN2kOnOff Enabled=N2kOnOff_On, tN2kOnOff EqualizationPending=N2kOnOff_Unavailable, double EqualizationTimeRemaining=N2kDoubleNA);
      SetN2kChargerStatus(N2kMsg, 0, 0, N2kChargeState(), N2kCM_Primary, N2kChargerEnable(), N2kOnOff_Unavailable, N2kDoubleNA);
 80032d4:	f7fe fed2 	bl	800207c <_Z14N2kChargeStatev>
 80032d8:	4603      	mov	r3, r0
 80032da:	461c      	mov	r4, r3
 80032dc:	f7fe fef0 	bl	80020c0 <_Z16N2kChargerEnablev>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4619      	mov	r1, r3
 80032e4:	f107 000c 	add.w	r0, r7, #12
 80032e8:	a32d      	add	r3, pc, #180	; (adr r3, 80033a0 <_Z22SendN2kBatteryMessagesv+0x260>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032f2:	2303      	movs	r3, #3
 80032f4:	9302      	str	r3, [sp, #8]
 80032f6:	9101      	str	r1, [sp, #4]
 80032f8:	2301      	movs	r3, #1
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4623      	mov	r3, r4
 80032fe:	2200      	movs	r2, #0
 8003300:	2100      	movs	r1, #0
 8003302:	f7fe fd32 	bl	8001d6a <_Z19SetN2kChargerStatusR7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d>
      NMEA2000.SendMsg(N2kMsg);
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <_Z22SendN2kBatteryMessagesv+0x284>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f107 010c 	add.w	r1, r7, #12
 800330e:	2200      	movs	r2, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f00f fab9 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }

    if ( BatConfScheduler.IsTime() ) {
 8003316:	4834      	ldr	r0, [pc, #208]	; (80033e8 <_Z22SendN2kBatteryMessagesv+0x2a8>)
 8003318:	f7fe fbfb 	bl	8001b12 <_ZN17tN2kSyncScheduler6IsTimeEv>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <_Z22SendN2kBatteryMessagesv+0x250>
      BatConfScheduler.UpdateNextTime();
 8003322:	4831      	ldr	r0, [pc, #196]	; (80033e8 <_Z22SendN2kBatteryMessagesv+0x2a8>)
 8003324:	f7fe fc08 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  //  SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
  //                  tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
  //                  double PeukertExponent, int8_t ChargeEfficiencyFactor)
  //  SetN2kBatConf(N2kMsg, 0, 0, N2kDCES_Unavailable, N2kDCbnv_48v, N2kDCbc_LiIon, 0xFF, 0xFF, 0, 92);
      SetN2kBatConf(N2kMsg, 0, BatType, SupportsEqual, BatNominalVoltage, BatChemistry, BatCapacity, BatTemperatureCoefficient, PeukertExponent, ChargeEfficiencyFactor);
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <_Z22SendN2kBatteryMessagesv+0x2ac>)
 800332a:	f893 e000 	ldrb.w	lr, [r3]
 800332e:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <_Z22SendN2kBatteryMessagesv+0x2b0>)
 8003330:	f893 8000 	ldrb.w	r8, [r3]
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <_Z22SendN2kBatteryMessagesv+0x2b4>)
 8003336:	781c      	ldrb	r4, [r3, #0]
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <_Z22SendN2kBatteryMessagesv+0x2b8>)
 800333a:	781d      	ldrb	r5, [r3, #0]
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <_Z22SendN2kBatteryMessagesv+0x2bc>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	492f      	ldr	r1, [pc, #188]	; (8003400 <_Z22SendN2kBatteryMessagesv+0x2c0>)
 8003344:	f991 6000 	ldrsb.w	r6, [r1]
 8003348:	492e      	ldr	r1, [pc, #184]	; (8003404 <_Z22SendN2kBatteryMessagesv+0x2c4>)
 800334a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800334e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003408 <_Z22SendN2kBatteryMessagesv+0x2c8>
 8003352:	f99c c000 	ldrsb.w	ip, [ip]
 8003356:	f8c7 c004 	str.w	ip, [r7, #4]
 800335a:	f107 0c0c 	add.w	ip, r7, #12
 800335e:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8003362:	f8cd 9020 	str.w	r9, [sp, #32]
 8003366:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800336a:	9604      	str	r6, [sp, #16]
 800336c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003370:	9501      	str	r5, [sp, #4]
 8003372:	9400      	str	r4, [sp, #0]
 8003374:	4643      	mov	r3, r8
 8003376:	4672      	mov	r2, lr
 8003378:	2100      	movs	r1, #0
 800337a:	4660      	mov	r0, ip
 800337c:	f7fe fd36 	bl	8001dec <_Z13SetN2kBatConfR7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>
      NMEA2000.SendMsg(N2kMsg);
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <_Z22SendN2kBatteryMessagesv+0x284>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f107 010c 	add.w	r1, r7, #12
 8003388:	2200      	movs	r2, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f00f fa7c 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    }
}
 8003390:	bf00      	nop
 8003392:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8003396:	46bd      	mov	sp, r7
 8003398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800339c:	f3af 8000 	nop.w
 80033a0:	00000000 	.word	0x00000000
 80033a4:	c1cdcd65 	.word	0xc1cdcd65
 80033a8:	00000000 	.word	0x00000000
 80033ac:	406fe000 	.word	0x406fe000
 80033b0:	200009c8 	.word	0x200009c8
 80033b4:	20000a18 	.word	0x20000a18
 80033b8:	20000648 	.word	0x20000648
 80033bc:	20000650 	.word	0x20000650
 80033c0:	20000678 	.word	0x20000678
 80033c4:	200009c4 	.word	0x200009c4
 80033c8:	20000690 	.word	0x20000690
 80033cc:	20000670 	.word	0x20000670
 80033d0:	20000688 	.word	0x20000688
 80033d4:	20000668 	.word	0x20000668
 80033d8:	200009d8 	.word	0x200009d8
 80033dc:	20000644 	.word	0x20000644
 80033e0:	20000660 	.word	0x20000660
 80033e4:	200009e8 	.word	0x200009e8
 80033e8:	200009f8 	.word	0x200009f8
 80033ec:	20000a08 	.word	0x20000a08
 80033f0:	20000086 	.word	0x20000086
 80033f4:	20000087 	.word	0x20000087
 80033f8:	20000088 	.word	0x20000088
 80033fc:	20000090 	.word	0x20000090
 8003400:	20000098 	.word	0x20000098
 8003404:	20000a10 	.word	0x20000a10
 8003408:	20000099 	.word	0x20000099

0800340c <_Z9OnN2kOpenv>:


// *****************************************************************************
// Call back for NMEA2000 open. This will be called, when library starts bus communication.
// See NMEA2000.SetOnOpen(OnN2kOpen); on setup()
void OnN2kOpen() {
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
    // Start schedulers now.
    DCBatStatusScheduler.UpdateNextTime();
 8003410:	4806      	ldr	r0, [pc, #24]	; (800342c <_Z9OnN2kOpenv+0x20>)
 8003412:	f7fe fb91 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    DCStatusScheduler.UpdateNextTime();
 8003416:	4806      	ldr	r0, [pc, #24]	; (8003430 <_Z9OnN2kOpenv+0x24>)
 8003418:	f7fe fb8e 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    ChargerStatusScheduler.UpdateNextTime();
 800341c:	4805      	ldr	r0, [pc, #20]	; (8003434 <_Z9OnN2kOpenv+0x28>)
 800341e:	f7fe fb8b 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
    BatConfScheduler.UpdateNextTime();
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <_Z9OnN2kOpenv+0x2c>)
 8003424:	f7fe fb88 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200009c8 	.word	0x200009c8
 8003430:	200009d8 	.word	0x200009d8
 8003434:	200009e8 	.word	0x200009e8
 8003438:	200009f8 	.word	0x200009f8

0800343c <_Z16myCppProcessInitv>:
/////////////////////////////////
// INITIALIZATION
////////////////////////////////

void myCppProcessInit()
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af04      	add	r7, sp, #16

	// Start the ADC1
	//-----------------------------------------------------------
	// Calibrate The ADC On Power-Up For Better Accuracy
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 8003442:	485b      	ldr	r0, [pc, #364]	; (80035b0 <_Z16myCppProcessInitv+0x174>)
 8003444:	f001 fc3a 	bl	8004cbc <HAL_ADCEx_Calibration_Start>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <_Z16myCppProcessInitv+0x20>
		Error_Handler();
 8003458:	f7fe fb0a 	bl	8001a70 <Error_Handler>
	}
	if (HAL_ADC_Start_IT(&hadc1) != HAL_OK) {
 800345c:	4854      	ldr	r0, [pc, #336]	; (80035b0 <_Z16myCppProcessInitv+0x174>)
 800345e:	f000 ffc1 	bl	80043e4 <HAL_ADC_Start_IT>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <_Z16myCppProcessInitv+0x3a>
		Error_Handler();
 8003472:	f7fe fafd 	bl	8001a70 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCvalues, ADC_BUFFER_SIZE) != HAL_OK) {
 8003476:	2203      	movs	r2, #3
 8003478:	494e      	ldr	r1, [pc, #312]	; (80035b4 <_Z16myCppProcessInitv+0x178>)
 800347a:	484d      	ldr	r0, [pc, #308]	; (80035b0 <_Z16myCppProcessInitv+0x174>)
 800347c:	f001 f868 	bl	8004550 <HAL_ADC_Start_DMA>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <_Z16myCppProcessInitv+0x58>
		Error_Handler();
 8003490:	f7fe faee 	bl	8001a70 <Error_Handler>

	// Start timer 2 CC2 trigger for ADC1
	// Timer 2 settings for 1kHz = 1ms timer interval
	//		Prescaler (ARR): 72-1
	//		Counter period (ARR): 1000
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8003494:	2104      	movs	r1, #4
 8003496:	4848      	ldr	r0, [pc, #288]	; (80035b8 <_Z16myCppProcessInitv+0x17c>)
 8003498:	f005 fc64 	bl	8008d64 <HAL_TIM_PWM_Start>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <_Z16myCppProcessInitv+0x74>
		Error_Handler();
 80034ac:	f7fe fae0 	bl	8001a70 <Error_Handler>
	}

	// Start Timer 2 interrupt for RGB LED breathing PWM change
	// since we share Timer 2 between ADC and breathing LED function both use 1kHz!
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80034b0:	4841      	ldr	r0, [pc, #260]	; (80035b8 <_Z16myCppProcessInitv+0x17c>)
 80034b2:	f005 fba5 	bl	8008c00 <HAL_TIM_Base_Start_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <_Z16myCppProcessInitv+0x8e>
		Error_Handler();
 80034c6:	f7fe fad3 	bl	8001a70 <Error_Handler>

	// configure DMA for Software PWM of the Half-Bridge outputs
	//-----------------------------------------------------------
	//start the timers
	//HAL_TIM_Base_Start(&htim5);
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80034ca:	2100      	movs	r1, #0
 80034cc:	483b      	ldr	r0, [pc, #236]	; (80035bc <_Z16myCppProcessInitv+0x180>)
 80034ce:	f005 fc49 	bl	8008d64 <HAL_TIM_PWM_Start>
	// DMA settings: A=TIM5_CH1
	//               Direction: memory to peripheral
	//               Mode: circular
	//               Data width: word

	HAL_DMA_Start(&hdma_tim5_ch1, 	(uint32_t)&(softPWMbuffer[0]), (uint32_t)&(GPIOA->BSRR), sizeof(softPWMbuffer)/sizeof(softPWMbuffer[0]));
 80034d2:	493b      	ldr	r1, [pc, #236]	; (80035c0 <_Z16myCppProcessInitv+0x184>)
 80034d4:	2364      	movs	r3, #100	; 0x64
 80034d6:	4a3b      	ldr	r2, [pc, #236]	; (80035c4 <_Z16myCppProcessInitv+0x188>)
 80034d8:	483b      	ldr	r0, [pc, #236]	; (80035c8 <_Z16myCppProcessInitv+0x18c>)
 80034da:	f002 fcc3 	bl	8005e64 <HAL_DMA_Start>

	zeroSoftPWM(softPWMbuffer);
 80034de:	4838      	ldr	r0, [pc, #224]	; (80035c0 <_Z16myCppProcessInitv+0x184>)
 80034e0:	f7fe fd46 	bl	8001f70 <_Z11zeroSoftPWMPm>

	__HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <_Z16myCppProcessInitv+0x180>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <_Z16myCppProcessInitv+0x180>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	60da      	str	r2, [r3, #12]




	// Fill EEPROM variables addresses
	for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex ++)
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <_Z16myCppProcessInitv+0x190>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <_Z16myCppProcessInitv+0x190>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	2b32      	cmp	r3, #50	; 0x32
 8003500:	d80e      	bhi.n	8003520 <_Z16myCppProcessInitv+0xe4>
	{
	  VirtAddVarTab [VarIndex-1] = VarIndex;
 8003502:	4b32      	ldr	r3, [pc, #200]	; (80035cc <_Z16myCppProcessInitv+0x190>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <_Z16myCppProcessInitv+0x190>)
 800350a:	8811      	ldrh	r1, [r2, #0]
 800350c:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <_Z16myCppProcessInitv+0x194>)
 800350e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex ++)
 8003512:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <_Z16myCppProcessInitv+0x190>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <_Z16myCppProcessInitv+0x190>)
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	e7ec      	b.n	80034fa <_Z16myCppProcessInitv+0xbe>
	}

	HAL_FLASH_Unlock();
 8003520:	f003 f81c 	bl	800655c <HAL_FLASH_Unlock>
	// read all time alarm counts from flash (eeprom emulation)
	if( EE_Init() != HAL_OK)
 8003524:	f7fd fd0c 	bl	8000f40 <EE_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_Z16myCppProcessInitv+0x100>
	{
		Error_Handler();
 8003538:	f7fe fa9a 	bl	8001a70 <Error_Handler>
	}

	// Enable CAN 1
	//-----------------------------------------------------------
    CANbus1.CANOpen();
 800353c:	4825      	ldr	r0, [pc, #148]	; (80035d4 <_Z16myCppProcessInitv+0x198>)
 800353e:	f007 fbff 	bl	800ad40 <_ZN10tCAN_STM327CANOpenEv>


    // NMEA2000 setup
	//-----------------------------------------------------------
    // Set Product information
    NMEA2000.SetProductInformation(&ProductInformation);
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	4924      	ldr	r1, [pc, #144]	; (80035dc <_Z16myCppProcessInitv+0x1a0>)
 800354a:	4618      	mov	r0, r3
 800354c:	f00d fdec 	bl	8011128 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>
    // Set Configuration information
    NMEA2000.SetProgmemConfigurationInformation(ManufacturerInformation,InstallationDescription1,InstallationDescription2);
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <_Z16myCppProcessInitv+0x1a4>)
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <_Z16myCppProcessInitv+0x1a8>)
 8003558:	4923      	ldr	r1, [pc, #140]	; (80035e8 <_Z16myCppProcessInitv+0x1ac>)
 800355a:	f00d feb5 	bl	80112c8 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
    // Set device information
    NMEA2000.SetDeviceInformation(1,      // Unique number. Use e.g. Serial number.
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	2304      	movs	r3, #4
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2300      	movs	r3, #0
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2323      	movs	r3, #35	; 0x23
 8003570:	22aa      	movs	r2, #170	; 0xaa
 8003572:	2101      	movs	r1, #1
 8003574:	f00e facd 	bl	8011b12 <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                                  4,      // Marine
                                  0);     // device


    // If you also want to see all traffic on the bus use N2km_ListenAndNode instead of N2km_NodeOnly below
    NMEA2000.SetMode(tNMEA2000::N2km_NodeOnly,80);
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2250      	movs	r2, #80	; 0x50
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f00e fc01 	bl	8011d88 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>

    //  NMEA2000.SetN2kCANMsgBufSize(2);                    // For this simple example, limit buffer size to 2, since we are only sending data
    // Define OnOpen call back. This will be called, when CAN is open and system starts address claiming.

    // Here we tell library, which PGNs we transmit
    NMEA2000.ExtendTransmitMessages(TransmitMessagesBattery);
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	4917      	ldr	r1, [pc, #92]	; (80035ec <_Z16myCppProcessInitv+0x1b0>)
 800358e:	4618      	mov	r0, r3
 8003590:	f00e fbd8 	bl	8011d44 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>

    NMEA2000.SetOnOpen(OnN2kOpen);
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4915      	ldr	r1, [pc, #84]	; (80035f0 <_Z16myCppProcessInitv+0x1b4>)
 800359a:	4618      	mov	r0, r3
 800359c:	f012 fe9e 	bl	80162dc <_ZN9tNMEA20009SetOnOpenEPFvvE>
    NMEA2000.Open();
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <_Z16myCppProcessInitv+0x19c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f00e fc61 	bl	8011e6c <_ZN9tNMEA20004OpenEv>

}
 80035aa:	bf00      	nop
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000200 	.word	0x20000200
 80035b4:	2000039c 	.word	0x2000039c
 80035b8:	200002c4 	.word	0x200002c4
 80035bc:	2000030c 	.word	0x2000030c
 80035c0:	200003a4 	.word	0x200003a4
 80035c4:	40010810 	.word	0x40010810
 80035c8:	20000354 	.word	0x20000354
 80035cc:	20000638 	.word	0x20000638
 80035d0:	200005d4 	.word	0x200005d4
 80035d4:	20000534 	.word	0x20000534
 80035d8:	200009c4 	.word	0x200009c4
 80035dc:	0801999c 	.word	0x0801999c
 80035e0:	08019a84 	.word	0x08019a84
 80035e4:	08019a54 	.word	0x08019a54
 80035e8:	08019a28 	.word	0x08019a28
 80035ec:	08019988 	.word	0x08019988
 80035f0:	0800340d 	.word	0x0800340d

080035f4 <_Z12myCppProcessv>:

/////////////////////////////////
// CPP program main function
////////////////////////////////

void myCppProcess(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0

	// infinite loop
	while (1) {

		// update state every 100ms
		if ((uint32_t)(HAL_GetTick() - Loop100msTimestamp) >= 100) {
 80035f8:	f000 fdee 	bl	80041d8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <_Z12myCppProcessv+0xb8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b63      	cmp	r3, #99	; 0x63
 8003606:	bf8c      	ite	hi
 8003608:	2301      	movhi	r3, #1
 800360a:	2300      	movls	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03d      	beq.n	800368e <_Z12myCppProcessv+0x9a>
			Loop100msTimestamp = HAL_GetTick();
 8003612:	f000 fde1 	bl	80041d8 <HAL_GetTick>
 8003616:	4603      	mov	r3, r0
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <_Z12myCppProcessv+0xb8>)
 800361a:	6013      	str	r3, [r2, #0]

			SupplyVoltage = GetVoltage(ADCvalues[ADC_VCC]);
 800361c:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <_Z12myCppProcessv+0xbc>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fa01 	bl	8002a28 <_Z10GetVoltaget>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4922      	ldr	r1, [pc, #136]	; (80036b4 <_Z12myCppProcessv+0xc0>)
 800362c:	e9c1 2300 	strd	r2, r3, [r1]
			InternalTemp = GetInternalTemp(ADCvalues[IntTemp]);
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <_Z12myCppProcessv+0xbc>)
 8003632:	885b      	ldrh	r3, [r3, #2]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f9ab 	bl	8002990 <_Z15GetInternalTempt>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	491e      	ldr	r1, [pc, #120]	; (80036b8 <_Z12myCppProcessv+0xc4>)
 8003640:	e9c1 2300 	strd	r2, r3, [r1]


			// Set the RGB LED patern
			// Check if we have an error
			if ((PROTECTION_FLAGS_LSB + PROTECTION_FLAGS_MSB) > 0) {
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <_Z12myCppProcessv+0xc8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <_Z12myCppProcessv+0xcc>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4413      	add	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	dd11      	ble.n	8003678 <_Z12myCppProcessv+0x84>
				RGB = &Error;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <_Z12myCppProcessv+0xd0>)
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <_Z12myCppProcessv+0xd4>)
 8003658:	601a      	str	r2, [r3, #0]
				Error.CycleCount = getFirstHighBitPos(PROTECTION_FLAGS_LSB | PROTECTION_FLAGS_MSB << 8); // Flashe quickly to indicate Error ID and wait
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <_Z12myCppProcessv+0xc8>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <_Z12myCppProcessv+0xcc>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4313      	orrs	r3, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fc99 	bl	8001fa0 <_Z18getFirstHighBitPosm>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <_Z12myCppProcessv+0xd4>)
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	e00a      	b.n	800368e <_Z12myCppProcessv+0x9a>
			} else if (BMS_responding == true) {
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <_Z12myCppProcessv+0xd8>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d103      	bne.n	8003688 <_Z12myCppProcessv+0x94>
				RGB = &Ready;
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <_Z12myCppProcessv+0xd0>)
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <_Z12myCppProcessv+0xdc>)
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e002      	b.n	800368e <_Z12myCppProcessv+0x9a>
			} else {
				RGB = &NotConnected;
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <_Z12myCppProcessv+0xd0>)
 800368a:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <_Z12myCppProcessv+0xe0>)
 800368c:	601a      	str	r2, [r3, #0]
			}

		}

	    SendN2kBatteryMessages();
 800368e:	f7ff fd57 	bl	8003140 <_Z22SendN2kBatteryMessagesv>
	    NMEA2000.ParseMessages();
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <_Z12myCppProcessv+0xe4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f012 fd42 	bl	8016120 <_ZN9tNMEA200013ParseMessagesEv>

	    sendEmusRequest();
 800369c:	f7fe fd22 	bl	80020e4 <_Z15sendEmusRequestv>
	    ParseEMUSmessages();
 80036a0:	f7fe fe42 	bl	8002328 <_Z17ParseEMUSmessagesv>

		CANSendSoftwareVersion();
 80036a4:	f7ff f9f0 	bl	8002a88 <_Z22CANSendSoftwareVersionv>
		if ((uint32_t)(HAL_GetTick() - Loop100msTimestamp) >= 100) {
 80036a8:	e7a6      	b.n	80035f8 <_Z12myCppProcessv+0x4>
 80036aa:	bf00      	nop
 80036ac:	20000398 	.word	0x20000398
 80036b0:	2000039c 	.word	0x2000039c
 80036b4:	200005b8 	.word	0x200005b8
 80036b8:	200005c0 	.word	0x200005c0
 80036bc:	200008ca 	.word	0x200008ca
 80036c0:	200008cc 	.word	0x200008cc
 80036c4:	20000064 	.word	0x20000064
 80036c8:	2000004c 	.word	0x2000004c
 80036cc:	200009c0 	.word	0x200009c0
 80036d0:	20000034 	.word	0x20000034
 80036d4:	20000004 	.word	0x20000004
 80036d8:	200009c4 	.word	0x200009c4

080036dc <_Z6AvgArrIdET_PS0_m>:
T AvgArr(T arr[], uint32_t n){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
    T avg = 0;
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    T sum = 0;
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(n > 0){
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d024      	beq.n	800374e <_Z6AvgArrIdET_PS0_m+0x72>
        for (uint32_t i = 0; i < n; i++) {
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d211      	bcs.n	8003734 <_Z6AvgArrIdET_PS0_m+0x58>
            sum += arr[i];
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003720:	f7fc fd9a 	bl	8000258 <__adddf3>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (uint32_t i = 0; i < n; i++) {
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e7e9      	b.n	8003708 <_Z6AvgArrIdET_PS0_m+0x2c>
        avg = sum / n;
 8003734:	6838      	ldr	r0, [r7, #0]
 8003736:	f7fc fecb 	bl	80004d0 <__aeabi_ui2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003742:	f7fd f869 	bl	8000818 <__aeabi_ddiv>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return avg;
 800374e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_Z41__static_initialization_and_destruction_0ii>:



	}// end myCppProcess while (1) loop

}
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b095      	sub	sp, #84	; 0x54
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 8184 	bne.w	8003a76 <_Z41__static_initialization_and_destruction_0ii+0x31a>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003774:	4293      	cmp	r3, r2
 8003776:	f040 817e 	bne.w	8003a76 <_Z41__static_initialization_and_destruction_0ii+0x31a>
tCAN_STM32 CANbus1(&hcan1, tCAN_STM32::CAN250kbit);
 800377a:	2204      	movs	r2, #4
 800377c:	49cd      	ldr	r1, [pc, #820]	; (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800377e:	48ce      	ldr	r0, [pc, #824]	; (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8003780:	f007 fabc 	bl	800acfc <_ZN10tCAN_STM32C1EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE>
uint32_t CAN_request_timestamp = HAL_GetTick();
 8003784:	f000 fd28 	bl	80041d8 <HAL_GetTick>
 8003788:	4603      	mov	r3, r0
 800378a:	4acc      	ldr	r2, [pc, #816]	; (8003abc <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800378c:	6013      	str	r3, [r2, #0]
CharStg Last_charging_stage = charging_stage;
 800378e:	4bcc      	ldr	r3, [pc, #816]	; (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	4bcc      	ldr	r3, [pc, #816]	; (8003ac4 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8003794:	701a      	strb	r2, [r3, #0]
};
 8003796:	4ccc      	ldr	r4, [pc, #816]	; (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	4618      	mov	r0, r3
 800379e:	f015 fbd3 	bl	8018f48 <_ZNSaIcEC1Ev>
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	461a      	mov	r2, r3
 80037a8:	49c8      	ldr	r1, [pc, #800]	; (8003acc <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80037aa:	4620      	mov	r0, r4
 80037ac:	f015 fc36 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037b0:	f107 0308 	add.w	r3, r7, #8
 80037b4:	4618      	mov	r0, r3
 80037b6:	f015 fbc8 	bl	8018f4a <_ZNSaIcED1Ev>
 80037ba:	3418      	adds	r4, #24
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4618      	mov	r0, r3
 80037c2:	f015 fbc1 	bl	8018f48 <_ZNSaIcEC1Ev>
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	461a      	mov	r2, r3
 80037cc:	49c0      	ldr	r1, [pc, #768]	; (8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80037ce:	4620      	mov	r0, r4
 80037d0:	f015 fc24 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4618      	mov	r0, r3
 80037da:	f015 fbb6 	bl	8018f4a <_ZNSaIcED1Ev>
 80037de:	3418      	adds	r4, #24
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f015 fbaf 	bl	8018f48 <_ZNSaIcEC1Ev>
 80037ea:	f107 0310 	add.w	r3, r7, #16
 80037ee:	461a      	mov	r2, r3
 80037f0:	49b8      	ldr	r1, [pc, #736]	; (8003ad4 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80037f2:	4620      	mov	r0, r4
 80037f4:	f015 fc12 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037f8:	f107 0310 	add.w	r3, r7, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f015 fba4 	bl	8018f4a <_ZNSaIcED1Ev>
 8003802:	3418      	adds	r4, #24
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4618      	mov	r0, r3
 800380a:	f015 fb9d 	bl	8018f48 <_ZNSaIcEC1Ev>
 800380e:	f107 0314 	add.w	r3, r7, #20
 8003812:	461a      	mov	r2, r3
 8003814:	49b0      	ldr	r1, [pc, #704]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8003816:	4620      	mov	r0, r4
 8003818:	f015 fc00 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4618      	mov	r0, r3
 8003822:	f015 fb92 	bl	8018f4a <_ZNSaIcED1Ev>
 8003826:	3418      	adds	r4, #24
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	4618      	mov	r0, r3
 800382e:	f015 fb8b 	bl	8018f48 <_ZNSaIcEC1Ev>
 8003832:	f107 0318 	add.w	r3, r7, #24
 8003836:	461a      	mov	r2, r3
 8003838:	49a8      	ldr	r1, [pc, #672]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800383a:	4620      	mov	r0, r4
 800383c:	f015 fbee 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f015 fb80 	bl	8018f4a <_ZNSaIcED1Ev>
 800384a:	3418      	adds	r4, #24
 800384c:	f107 031c 	add.w	r3, r7, #28
 8003850:	4618      	mov	r0, r3
 8003852:	f015 fb79 	bl	8018f48 <_ZNSaIcEC1Ev>
 8003856:	f107 031c 	add.w	r3, r7, #28
 800385a:	461a      	mov	r2, r3
 800385c:	49a0      	ldr	r1, [pc, #640]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800385e:	4620      	mov	r0, r4
 8003860:	f015 fbdc 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	4618      	mov	r0, r3
 800386a:	f015 fb6e 	bl	8018f4a <_ZNSaIcED1Ev>
 800386e:	3418      	adds	r4, #24
 8003870:	f107 0320 	add.w	r3, r7, #32
 8003874:	4618      	mov	r0, r3
 8003876:	f015 fb67 	bl	8018f48 <_ZNSaIcEC1Ev>
 800387a:	f107 0320 	add.w	r3, r7, #32
 800387e:	461a      	mov	r2, r3
 8003880:	4998      	ldr	r1, [pc, #608]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8003882:	4620      	mov	r0, r4
 8003884:	f015 fbca 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003888:	f107 0320 	add.w	r3, r7, #32
 800388c:	4618      	mov	r0, r3
 800388e:	f015 fb5c 	bl	8018f4a <_ZNSaIcED1Ev>
};
 8003892:	4c95      	ldr	r4, [pc, #596]	; (8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8003894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003898:	4618      	mov	r0, r3
 800389a:	f015 fb55 	bl	8018f48 <_ZNSaIcEC1Ev>
 800389e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a2:	461a      	mov	r2, r3
 80038a4:	4991      	ldr	r1, [pc, #580]	; (8003aec <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80038a6:	4620      	mov	r0, r4
 80038a8:	f015 fbb8 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b0:	4618      	mov	r0, r3
 80038b2:	f015 fb4a 	bl	8018f4a <_ZNSaIcED1Ev>
 80038b6:	3418      	adds	r4, #24
 80038b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038bc:	4618      	mov	r0, r3
 80038be:	f015 fb43 	bl	8018f48 <_ZNSaIcEC1Ev>
 80038c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c6:	461a      	mov	r2, r3
 80038c8:	4989      	ldr	r1, [pc, #548]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80038ca:	4620      	mov	r0, r4
 80038cc:	f015 fba6 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038d4:	4618      	mov	r0, r3
 80038d6:	f015 fb38 	bl	8018f4a <_ZNSaIcED1Ev>
 80038da:	3418      	adds	r4, #24
 80038dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e0:	4618      	mov	r0, r3
 80038e2:	f015 fb31 	bl	8018f48 <_ZNSaIcEC1Ev>
 80038e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ea:	461a      	mov	r2, r3
 80038ec:	4981      	ldr	r1, [pc, #516]	; (8003af4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80038ee:	4620      	mov	r0, r4
 80038f0:	f015 fb94 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f8:	4618      	mov	r0, r3
 80038fa:	f015 fb26 	bl	8018f4a <_ZNSaIcED1Ev>
 80038fe:	3418      	adds	r4, #24
 8003900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003904:	4618      	mov	r0, r3
 8003906:	f015 fb1f 	bl	8018f48 <_ZNSaIcEC1Ev>
 800390a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800390e:	461a      	mov	r2, r3
 8003910:	4979      	ldr	r1, [pc, #484]	; (8003af8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8003912:	4620      	mov	r0, r4
 8003914:	f015 fb82 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800391c:	4618      	mov	r0, r3
 800391e:	f015 fb14 	bl	8018f4a <_ZNSaIcED1Ev>
 8003922:	3418      	adds	r4, #24
 8003924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003928:	4618      	mov	r0, r3
 800392a:	f015 fb0d 	bl	8018f48 <_ZNSaIcEC1Ev>
 800392e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003932:	461a      	mov	r2, r3
 8003934:	4971      	ldr	r1, [pc, #452]	; (8003afc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8003936:	4620      	mov	r0, r4
 8003938:	f015 fb70 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800393c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003940:	4618      	mov	r0, r3
 8003942:	f015 fb02 	bl	8018f4a <_ZNSaIcED1Ev>
 8003946:	3418      	adds	r4, #24
 8003948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800394c:	4618      	mov	r0, r3
 800394e:	f015 fafb 	bl	8018f48 <_ZNSaIcEC1Ev>
 8003952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003956:	461a      	mov	r2, r3
 8003958:	4969      	ldr	r1, [pc, #420]	; (8003b00 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800395a:	4620      	mov	r0, r4
 800395c:	f015 fb5e 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003960:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003964:	4618      	mov	r0, r3
 8003966:	f015 faf0 	bl	8018f4a <_ZNSaIcED1Ev>
 800396a:	3418      	adds	r4, #24
 800396c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003970:	4618      	mov	r0, r3
 8003972:	f015 fae9 	bl	8018f48 <_ZNSaIcEC1Ev>
 8003976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800397a:	461a      	mov	r2, r3
 800397c:	4961      	ldr	r1, [pc, #388]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800397e:	4620      	mov	r0, r4
 8003980:	f015 fb4c 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003988:	4618      	mov	r0, r3
 800398a:	f015 fade 	bl	8018f4a <_ZNSaIcED1Ev>
 800398e:	3418      	adds	r4, #24
 8003990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003994:	4618      	mov	r0, r3
 8003996:	f015 fad7 	bl	8018f48 <_ZNSaIcEC1Ev>
 800399a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800399e:	461a      	mov	r2, r3
 80039a0:	4959      	ldr	r1, [pc, #356]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80039a2:	4620      	mov	r0, r4
 80039a4:	f015 fb3a 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039ac:	4618      	mov	r0, r3
 80039ae:	f015 facc 	bl	8018f4a <_ZNSaIcED1Ev>
 80039b2:	3418      	adds	r4, #24
 80039b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039b8:	4618      	mov	r0, r3
 80039ba:	f015 fac5 	bl	8018f48 <_ZNSaIcEC1Ev>
 80039be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039c2:	461a      	mov	r2, r3
 80039c4:	4951      	ldr	r1, [pc, #324]	; (8003b0c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80039c6:	4620      	mov	r0, r4
 80039c8:	f015 fb28 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039d0:	4618      	mov	r0, r3
 80039d2:	f015 faba 	bl	8018f4a <_ZNSaIcED1Ev>
 80039d6:	3418      	adds	r4, #24
 80039d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039dc:	4618      	mov	r0, r3
 80039de:	f015 fab3 	bl	8018f48 <_ZNSaIcEC1Ev>
 80039e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039e6:	461a      	mov	r2, r3
 80039e8:	4949      	ldr	r1, [pc, #292]	; (8003b10 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80039ea:	4620      	mov	r0, r4
 80039ec:	f015 fb16 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039f4:	4618      	mov	r0, r3
 80039f6:	f015 faa8 	bl	8018f4a <_ZNSaIcED1Ev>
 80039fa:	3418      	adds	r4, #24
 80039fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a00:	4618      	mov	r0, r3
 8003a02:	f015 faa1 	bl	8018f48 <_ZNSaIcEC1Ev>
 8003a06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4941      	ldr	r1, [pc, #260]	; (8003b14 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f015 fb04 	bl	801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f015 fa96 	bl	8018f4a <_ZNSaIcED1Ev>
tNMEA2000 &NMEA2000 = *( new tNMEA2000_STM32(&hcan2) );
 8003a1e:	20cc      	movs	r0, #204	; 0xcc
 8003a20:	f015 fa7c 	bl	8018f1c <_Znwj>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461c      	mov	r4, r3
 8003a28:	493b      	ldr	r1, [pc, #236]	; (8003b18 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f007 fe6a 	bl	800b704 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>
 8003a30:	4622      	mov	r2, r4
 8003a32:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8003a34:	601a      	str	r2, [r3, #0]
tN2kSyncScheduler DCBatStatusScheduler(false,1500,500);
 8003a36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4837      	ldr	r0, [pc, #220]	; (8003b20 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8003a42:	f7fe f839 	bl	8001ab8 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler DCStatusScheduler(false,1500,510);
 8003a46:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8003a4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4834      	ldr	r0, [pc, #208]	; (8003b24 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8003a52:	f7fe f831 	bl	8001ab8 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler ChargerStatusScheduler(false,1500,520);
 8003a56:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4831      	ldr	r0, [pc, #196]	; (8003b28 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8003a62:	f7fe f829 	bl	8001ab8 <_ZN17tN2kSyncSchedulerC1Ebmm>
tN2kSyncScheduler BatConfScheduler(false,5000,530); // Non periodic
 8003a66:	f240 2312 	movw	r3, #530	; 0x212
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	2100      	movs	r1, #0
 8003a70:	482e      	ldr	r0, [pc, #184]	; (8003b2c <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8003a72:	f7fe f821 	bl	8001ab8 <_ZN17tN2kSyncSchedulerC1Ebmm>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <_Z41__static_initialization_and_destruction_0ii+0x34e>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d111      	bne.n	8003aaa <_Z41__static_initialization_and_destruction_0ii+0x34e>
const std::string ChrgErr[] = {
 8003a86:	4c2a      	ldr	r4, [pc, #168]	; (8003b30 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8003a8a:	429c      	cmp	r4, r3
 8003a8c:	d004      	beq.n	8003a98 <_Z41__static_initialization_and_destruction_0ii+0x33c>
 8003a8e:	3c18      	subs	r4, #24
 8003a90:	4620      	mov	r0, r4
 8003a92:	f015 fa98 	bl	8018fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a96:	e7f7      	b.n	8003a88 <_Z41__static_initialization_and_destruction_0ii+0x32c>
const std::string ChrgStg[] = {
 8003a98:	4c26      	ldr	r4, [pc, #152]	; (8003b34 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d004      	beq.n	8003aaa <_Z41__static_initialization_and_destruction_0ii+0x34e>
 8003aa0:	3c18      	subs	r4, #24
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f015 fa8f 	bl	8018fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003aa8:	e7f7      	b.n	8003a9a <_Z41__static_initialization_and_destruction_0ii+0x33e>
}
 8003aaa:	bf00      	nop
 8003aac:	3754      	adds	r7, #84	; 0x54
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000274 	.word	0x20000274
 8003ab8:	20000534 	.word	0x20000534
 8003abc:	2000063c 	.word	0x2000063c
 8003ac0:	20000085 	.word	0x20000085
 8003ac4:	200006c8 	.word	0x200006c8
 8003ac8:	200006cc 	.word	0x200006cc
 8003acc:	080195f0 	.word	0x080195f0
 8003ad0:	080195f8 	.word	0x080195f8
 8003ad4:	08019604 	.word	0x08019604
 8003ad8:	08019614 	.word	0x08019614
 8003adc:	08019620 	.word	0x08019620
 8003ae0:	0801962c 	.word	0x0801962c
 8003ae4:	08019640 	.word	0x08019640
 8003ae8:	20000774 	.word	0x20000774
 8003aec:	08019650 	.word	0x08019650
 8003af0:	0801965c 	.word	0x0801965c
 8003af4:	0801968c 	.word	0x0801968c
 8003af8:	080196a4 	.word	0x080196a4
 8003afc:	080196cc 	.word	0x080196cc
 8003b00:	080196e4 	.word	0x080196e4
 8003b04:	08019710 	.word	0x08019710
 8003b08:	0801973c 	.word	0x0801973c
 8003b0c:	08019768 	.word	0x08019768
 8003b10:	08019784 	.word	0x08019784
 8003b14:	08019798 	.word	0x08019798
 8003b18:	2000029c 	.word	0x2000029c
 8003b1c:	200009c4 	.word	0x200009c4
 8003b20:	200009c8 	.word	0x200009c8
 8003b24:	200009d8 	.word	0x200009d8
 8003b28:	200009e8 	.word	0x200009e8
 8003b2c:	200009f8 	.word	0x200009f8
 8003b30:	2000087c 	.word	0x2000087c
 8003b34:	20000774 	.word	0x20000774

08003b38 <_GLOBAL__sub_I_Loop100msTimestamp>:
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7ff fe0b 	bl	800375c <_Z41__static_initialization_and_destruction_0ii>
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_GLOBAL__sub_D_Loop100msTimestamp>:
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7ff fe03 	bl	800375c <_Z41__static_initialization_and_destruction_0ii>
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6193      	str	r3, [r2, #24]
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_MspInit+0x5c>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_MspInit+0x60>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_MspInit+0x60>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40010000 	.word	0x40010000

08003bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <HAL_ADC_MspInit+0xd0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d152      	bne.n	8003c82 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <HAL_ADC_MspInit+0xd4>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	; (8003c90 <HAL_ADC_MspInit+0xd4>)
 8003be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be6:	6193      	str	r3, [r2, #24]
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_ADC_MspInit+0xd4>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <HAL_ADC_MspInit+0xd4>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_ADC_MspInit+0xd4>)
 8003bfa:	f043 0310 	orr.w	r3, r3, #16
 8003bfe:	6193      	str	r3, [r2, #24]
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <HAL_ADC_MspInit+0xd4>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c10:	2303      	movs	r3, #3
 8003c12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	4619      	mov	r1, r3
 8003c1a:	481e      	ldr	r0, [pc, #120]	; (8003c94 <HAL_ADC_MspInit+0xd8>)
 8003c1c:	f002 fe1e 	bl	800685c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_ADC_MspInit+0xe0>)
 8003c24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c56:	4810      	ldr	r0, [pc, #64]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c58:	f002 f88e 	bl	8005d78 <HAL_DMA_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8003c62:	f7fd ff05 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c6a:	621a      	str	r2, [r3, #32]
 8003c6c:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <HAL_ADC_MspInit+0xdc>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	2012      	movs	r0, #18
 8003c78:	f002 f847 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003c7c:	2012      	movs	r0, #18
 8003c7e:	f002 f860 	bl	8005d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c82:	bf00      	nop
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40012400 	.word	0x40012400
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40011000 	.word	0x40011000
 8003c98:	20000230 	.word	0x20000230
 8003c9c:	40020008 	.word	0x40020008

08003ca0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	; 0x30
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a60      	ldr	r2, [pc, #384]	; (8003e3c <HAL_CAN_MspInit+0x19c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d15d      	bne.n	8003d7c <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003cc0:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_CAN_MspInit+0x1a0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	4a5e      	ldr	r2, [pc, #376]	; (8003e40 <HAL_CAN_MspInit+0x1a0>)
 8003cc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003cca:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <HAL_CAN_MspInit+0x1a0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10b      	bne.n	8003cea <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4a5b      	ldr	r2, [pc, #364]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	61d3      	str	r3, [r2, #28]
 8003cde:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cea:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	4a55      	ldr	r2, [pc, #340]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6193      	str	r3, [r2, #24]
 8003cf6:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d10:	f107 031c 	add.w	r3, r7, #28
 8003d14:	4619      	mov	r1, r3
 8003d16:	484c      	ldr	r0, [pc, #304]	; (8003e48 <HAL_CAN_MspInit+0x1a8>)
 8003d18:	f002 fda0 	bl	800685c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d26:	2303      	movs	r3, #3
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4845      	ldr	r0, [pc, #276]	; (8003e48 <HAL_CAN_MspInit+0x1a8>)
 8003d32:	f002 fd93 	bl	800685c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003d36:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <HAL_CAN_MspInit+0x1ac>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d54:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_CAN_MspInit+0x1ac>)
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2013      	movs	r0, #19
 8003d60:	f001 ffd3 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003d64:	2013      	movs	r0, #19
 8003d66:	f001 ffec 	bl	8005d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	2014      	movs	r0, #20
 8003d70:	f001 ffcb 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003d74:	2014      	movs	r0, #20
 8003d76:	f001 ffe4 	bl	8005d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003d7a:	e05b      	b.n	8003e34 <HAL_CAN_MspInit+0x194>
  else if(hcan->Instance==CAN2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <HAL_CAN_MspInit+0x1b0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d156      	bne.n	8003e34 <HAL_CAN_MspInit+0x194>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a2e      	ldr	r2, [pc, #184]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d90:	61d3      	str	r3, [r2, #28]
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_CAN_MspInit+0x1a0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_CAN_MspInit+0x1a0>)
 8003da6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003da8:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_CAN_MspInit+0x1a0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10b      	bne.n	8003dc8 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dba:	61d3      	str	r3, [r2, #28]
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	6193      	str	r3, [r2, #24]
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_CAN_MspInit+0x1a4>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	4619      	mov	r1, r3
 8003df4:	4814      	ldr	r0, [pc, #80]	; (8003e48 <HAL_CAN_MspInit+0x1a8>)
 8003df6:	f002 fd31 	bl	800685c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e00:	2302      	movs	r3, #2
 8003e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e04:	2303      	movs	r3, #3
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	480e      	ldr	r0, [pc, #56]	; (8003e48 <HAL_CAN_MspInit+0x1a8>)
 8003e10:	f002 fd24 	bl	800685c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	203f      	movs	r0, #63	; 0x3f
 8003e1a:	f001 ff76 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8003e1e:	203f      	movs	r0, #63	; 0x3f
 8003e20:	f001 ff8f 	bl	8005d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	2041      	movs	r0, #65	; 0x41
 8003e2a:	f001 ff6e 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003e2e:	2041      	movs	r0, #65	; 0x41
 8003e30:	f001 ff87 	bl	8005d42 <HAL_NVIC_EnableIRQ>
}
 8003e34:	bf00      	nop
 8003e36:	3730      	adds	r7, #48	; 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40006400 	.word	0x40006400
 8003e40:	20000a1c 	.word	0x20000a1c
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40010c00 	.word	0x40010c00
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40006800 	.word	0x40006800

08003e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d114      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_TIM_Base_MspInit+0xb8>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_TIM_Base_MspInit+0xb8>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	61d3      	str	r3, [r2, #28]
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_TIM_Base_MspInit+0xb8>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	201c      	movs	r0, #28
 8003e84:	f001 ff41 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e88:	201c      	movs	r0, #28
 8003e8a:	f001 ff5a 	bl	8005d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003e8e:	e038      	b.n	8003f02 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_TIM_Base_MspInit+0xbc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d133      	bne.n	8003f02 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <HAL_TIM_Base_MspInit+0xb8>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_TIM_Base_MspInit+0xb8>)
 8003ea0:	f043 0308 	orr.w	r3, r3, #8
 8003ea4:	61d3      	str	r3, [r2, #28]
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_TIM_Base_MspInit+0xb8>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA2_Channel5;
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_TIM_Base_MspInit+0xc4>)
 8003eb6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eb8:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003eba:	2210      	movs	r2, #16
 8003ebc:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003edc:	2220      	movs	r2, #32
 8003ede:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8003ee6:	480b      	ldr	r0, [pc, #44]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003ee8:	f001 ff46 	bl	8005d78 <HAL_DMA_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 8003ef2:	f7fd fdbd 	bl	8001a70 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24
 8003efc:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <HAL_TIM_Base_MspInit+0xc0>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	20000354 	.word	0x20000354
 8003f18:	40020458 	.word	0x40020458

08003f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f20:	e7fe      	b.n	8003f20 <NMI_Handler+0x4>

08003f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f26:	e7fe      	b.n	8003f26 <HardFault_Handler+0x4>

08003f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f2c:	e7fe      	b.n	8003f2c <MemManage_Handler+0x4>

08003f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f32:	e7fe      	b.n	8003f32 <BusFault_Handler+0x4>

08003f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f38:	e7fe      	b.n	8003f38 <UsageFault_Handler+0x4>

08003f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f62:	f000 f927 	bl	80041b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <DMA1_Channel1_IRQHandler+0x10>)
 8003f72:	f002 f819 	bl	8005fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000230 	.word	0x20000230

08003f80 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <ADC1_2_IRQHandler+0x10>)
 8003f86:	f000 fbc1 	bl	800470c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000200 	.word	0x20000200

08003f94 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <CAN1_TX_IRQHandler+0x10>)
 8003f9a:	f001 fbcd 	bl	8005738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000274 	.word	0x20000274

08003fa8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <CAN1_RX0_IRQHandler+0x10>)
 8003fae:	f001 fbc3 	bl	8005738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000274 	.word	0x20000274

08003fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <TIM2_IRQHandler+0x10>)
 8003fc2:	f004 ff79 	bl	8008eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200002c4 	.word	0x200002c4

08003fd0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <DMA2_Channel5_IRQHandler+0x10>)
 8003fd6:	f001 ffe7 	bl	8005fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000354 	.word	0x20000354

08003fe4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <CAN2_TX_IRQHandler+0x10>)
 8003fea:	f001 fba5 	bl	8005738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	2000029c 	.word	0x2000029c

08003ff8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <CAN2_RX1_IRQHandler+0x10>)
 8003ffe:	f001 fb9b 	bl	8005738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	2000029c 	.word	0x2000029c

0800400c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <OTG_FS_IRQHandler+0x10>)
 8004012:	f002 ff26 	bl	8006e62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000102c 	.word	0x2000102c

08004020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
	return 1;
 8004024:	2301      	movs	r3, #1
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <_kill>:

int _kill(int pid, int sig)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004038:	f015 f936 	bl	80192a8 <__errno>
 800403c:	4603      	mov	r3, r0
 800403e:	2216      	movs	r2, #22
 8004040:	601a      	str	r2, [r3, #0]
	return -1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <_exit>:

void _exit (int status)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004056:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffe7 	bl	800402e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004060:	e7fe      	b.n	8004060 <_exit+0x12>
	...

08004064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <_sbrk+0x5c>)
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <_sbrk+0x60>)
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <_sbrk+0x64>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <_sbrk+0x64>)
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <_sbrk+0x68>)
 8004084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <_sbrk+0x64>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d207      	bcs.n	80040a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004094:	f015 f908 	bl	80192a8 <__errno>
 8004098:	4603      	mov	r3, r0
 800409a:	220c      	movs	r2, #12
 800409c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040a2:	e009      	b.n	80040b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <_sbrk+0x64>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <_sbrk+0x64>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <_sbrk+0x64>)
 80040b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20010000 	.word	0x20010000
 80040c4:	00000400 	.word	0x00000400
 80040c8:	20000a20 	.word	0x20000a20
 80040cc:	20001860 	.word	0x20001860

080040d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040dc:	480c      	ldr	r0, [pc, #48]	; (8004110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040e0:	4a0d      	ldr	r2, [pc, #52]	; (8004118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040e4:	e002      	b.n	80040ec <LoopCopyDataInit>

080040e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ea:	3304      	adds	r3, #4

080040ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040f0:	d3f9      	bcc.n	80040e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040f4:	4c0a      	ldr	r4, [pc, #40]	; (8004120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f8:	e001      	b.n	80040fe <LoopFillZerobss>

080040fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040fc:	3204      	adds	r2, #4

080040fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004100:	d3fb      	bcc.n	80040fa <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004102:	f7ff ffe5 	bl	80040d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004106:	f015 f8d5 	bl	80192b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800410a:	f7fd fa5d 	bl	80015c8 <main>
  bx lr
 800410e:	4770      	bx	lr
  ldr r0, =_sdata
 8004110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004114:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004118:	08019d7c 	.word	0x08019d7c
  ldr r2, =_sbss
 800411c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004120:	20001860 	.word	0x20001860

08004124 <CAN1_RX1_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004124:	e7fe      	b.n	8004124 <CAN1_RX1_IRQHandler>
	...

08004128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <HAL_Init+0x28>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a07      	ldr	r2, [pc, #28]	; (8004150 <HAL_Init+0x28>)
 8004132:	f043 0310 	orr.w	r3, r3, #16
 8004136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004138:	2003      	movs	r0, #3
 800413a:	f001 fddb 	bl	8005cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800413e:	200f      	movs	r0, #15
 8004140:	f000 f808 	bl	8004154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004144:	f7ff fd08 	bl	8003b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40022000 	.word	0x40022000

08004154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_InitTick+0x54>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_InitTick+0x58>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	4619      	mov	r1, r3
 8004166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800416a:	fbb3 f3f1 	udiv	r3, r3, r1
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fdf3 	bl	8005d5e <HAL_SYSTICK_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e00e      	b.n	80041a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b0f      	cmp	r3, #15
 8004186:	d80a      	bhi.n	800419e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004188:	2200      	movs	r2, #0
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004190:	f001 fdbb 	bl	8005d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004194:	4a06      	ldr	r2, [pc, #24]	; (80041b0 <HAL_InitTick+0x5c>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2000009c 	.word	0x2000009c
 80041ac:	200000a4 	.word	0x200000a4
 80041b0:	200000a0 	.word	0x200000a0

080041b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_IncTick+0x1c>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_IncTick+0x20>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4413      	add	r3, r2
 80041c4:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <HAL_IncTick+0x20>)
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	200000a4 	.word	0x200000a4
 80041d4:	20000a24 	.word	0x20000a24

080041d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return uwTick;
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <HAL_GetTick+0x10>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	20000a24 	.word	0x20000a24

080041ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f4:	f7ff fff0 	bl	80041d8 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004204:	d005      	beq.n	8004212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_Delay+0x44>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004212:	bf00      	nop
 8004214:	f7ff ffe0 	bl	80041d8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	429a      	cmp	r2, r3
 8004222:	d8f7      	bhi.n	8004214 <HAL_Delay+0x28>
  {
  }
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200000a4 	.word	0x200000a4

08004234 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0be      	b.n	80043d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fca2 	bl	8003bbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fc77 	bl	8004b6c <ADC_ConversionStop_Disable>
 800427e:	4603      	mov	r3, r0
 8004280:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 8099 	bne.w	80043c2 <HAL_ADC_Init+0x18e>
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 8095 	bne.w	80043c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042a0:	f023 0302 	bic.w	r3, r3, #2
 80042a4:	f043 0202 	orr.w	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7b1b      	ldrb	r3, [r3, #12]
 80042ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042cc:	d003      	beq.n	80042d6 <HAL_ADC_Init+0xa2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_ADC_Init+0xa8>
 80042d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042da:	e000      	b.n	80042de <HAL_ADC_Init+0xaa>
 80042dc:	2300      	movs	r3, #0
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7d1b      	ldrb	r3, [r3, #20]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d119      	bne.n	8004320 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7b1b      	ldrb	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	035a      	lsls	r2, r3, #13
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e00b      	b.n	8004320 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_ADC_Init+0x1a8>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	430b      	orrs	r3, r1
 8004346:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004350:	d003      	beq.n	800435a <HAL_ADC_Init+0x126>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d104      	bne.n	8004364 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	3b01      	subs	r3, #1
 8004360:	051b      	lsls	r3, r3, #20
 8004362:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	430a      	orrs	r2, r1
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_ADC_Init+0x1ac>)
 8004380:	4013      	ands	r3, r2
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d10b      	bne.n	80043a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800439e:	e018      	b.n	80043d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	f023 0312 	bic.w	r3, r3, #18
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043c0:	e007      	b.n	80043d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	f043 0210 	orr.w	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	ffe1f7fd 	.word	0xffe1f7fd
 80043e0:	ff1f0efe 	.word	0xff1f0efe

080043e4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_Start_IT+0x1a>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e0a0      	b.n	8004540 <HAL_ADC_Start_IT+0x15c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb56 	bl	8004ab8 <ADC_Enable>
 800440c:	4603      	mov	r3, r0
 800440e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 808f 	bne.w	8004536 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a45      	ldr	r2, [pc, #276]	; (8004548 <HAL_ADC_Start_IT+0x164>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d105      	bne.n	8004442 <HAL_ADC_Start_IT+0x5e>
 8004436:	4b45      	ldr	r3, [pc, #276]	; (800454c <HAL_ADC_Start_IT+0x168>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d026      	beq.n	80044aa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004464:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800446c:	e01d      	b.n	80044aa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a33      	ldr	r2, [pc, #204]	; (800454c <HAL_ADC_Start_IT+0x168>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_ADC_Start_IT+0xaa>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <HAL_ADC_Start_IT+0x164>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d10d      	bne.n	80044aa <HAL_ADC_Start_IT+0xc6>
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_ADC_Start_IT+0x168>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	f023 0206 	bic.w	r2, r3, #6
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80044c2:	e002      	b.n	80044ca <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f06f 0202 	mvn.w	r2, #2
 80044da:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044fa:	d113      	bne.n	8004524 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <HAL_ADC_Start_IT+0x164>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d105      	bne.n	8004512 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004506:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_ADC_Start_IT+0x168>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	e00c      	b.n	800453e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	e003      	b.n	800453e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40012800 	.word	0x40012800
 800454c:	40012400 	.word	0x40012400

08004550 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a64      	ldr	r2, [pc, #400]	; (80046f8 <HAL_ADC_Start_DMA+0x1a8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_ADC_Start_DMA+0x24>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a63      	ldr	r2, [pc, #396]	; (80046fc <HAL_ADC_Start_DMA+0x1ac>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d106      	bne.n	8004582 <HAL_ADC_Start_DMA+0x32>
 8004574:	4b60      	ldr	r3, [pc, #384]	; (80046f8 <HAL_ADC_Start_DMA+0x1a8>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 80b3 	bne.w	80046e8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_ADC_Start_DMA+0x40>
 800458c:	2302      	movs	r3, #2
 800458e:	e0ae      	b.n	80046ee <HAL_ADC_Start_DMA+0x19e>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fa8d 	bl	8004ab8 <ADC_Enable>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 809a 	bne.w	80046de <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a4e      	ldr	r2, [pc, #312]	; (80046fc <HAL_ADC_Start_DMA+0x1ac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d105      	bne.n	80045d4 <HAL_ADC_Start_DMA+0x84>
 80045c8:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <HAL_ADC_Start_DMA+0x1a8>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d115      	bne.n	8004600 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d026      	beq.n	800463c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045fe:	e01d      	b.n	800463c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a39      	ldr	r2, [pc, #228]	; (80046f8 <HAL_ADC_Start_DMA+0x1a8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_ADC_Start_DMA+0xd0>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a38      	ldr	r2, [pc, #224]	; (80046fc <HAL_ADC_Start_DMA+0x1ac>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10d      	bne.n	800463c <HAL_ADC_Start_DMA+0xec>
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_ADC_Start_DMA+0x1a8>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f023 0206 	bic.w	r2, r3, #6
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
 8004654:	e002      	b.n	800465c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <HAL_ADC_Start_DMA+0x1b0>)
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_ADC_Start_DMA+0x1b4>)
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_ADC_Start_DMA+0x1b8>)
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0202 	mvn.w	r2, #2
 8004684:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004694:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a18      	ldr	r0, [r3, #32]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	334c      	adds	r3, #76	; 0x4c
 80046a0:	4619      	mov	r1, r3
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f001 fc1f 	bl	8005ee8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80046b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80046b8:	d108      	bne.n	80046cc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80046c8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80046ca:	e00f      	b.n	80046ec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80046da:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80046dc:	e006      	b.n	80046ec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80046e6:	e001      	b.n	80046ec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40012400 	.word	0x40012400
 80046fc:	40012800 	.word	0x40012800
 8004700:	08004bef 	.word	0x08004bef
 8004704:	08004c6b 	.word	0x08004c6b
 8004708:	08004c87 	.word	0x08004c87

0800470c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d140      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d139      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004752:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004756:	d11d      	bne.n	8004794 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800475c:	2b00      	cmp	r3, #0
 800475e:	d119      	bne.n	8004794 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0220 	bic.w	r2, r2, #32
 800476e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fe f8d1 	bl	800293c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0212 	mvn.w	r2, #18
 80047a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d14f      	bne.n	8004852 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d148      	bne.n	8004852 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80047e2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80047e6:	d012      	beq.n	800480e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d125      	bne.n	8004842 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004800:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004804:	d11d      	bne.n	8004842 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800480a:	2b00      	cmp	r3, #0
 800480c:	d119      	bne.n	8004842 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800481c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fae6 	bl	8004e14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 020c 	mvn.w	r2, #12
 8004850:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d114      	bne.n	800488a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10d      	bne.n	800488a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f812 	bl	80048a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0201 	mvn.w	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x20>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0dc      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x1da>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b06      	cmp	r3, #6
 80048f6:	d81c      	bhi.n	8004932 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	3b05      	subs	r3, #5
 800490a:	221f      	movs	r2, #31
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	4019      	ands	r1, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	3b05      	subs	r3, #5
 8004924:	fa00 f203 	lsl.w	r2, r0, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	635a      	str	r2, [r3, #52]	; 0x34
 8004930:	e03c      	b.n	80049ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d81c      	bhi.n	8004974 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	3b23      	subs	r3, #35	; 0x23
 800494c:	221f      	movs	r2, #31
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	4019      	ands	r1, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	3b23      	subs	r3, #35	; 0x23
 8004966:	fa00 f203 	lsl.w	r2, r0, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
 8004972:	e01b      	b.n	80049ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	3b41      	subs	r3, #65	; 0x41
 8004986:	221f      	movs	r2, #31
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	4019      	ands	r1, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	3b41      	subs	r3, #65	; 0x41
 80049a0:	fa00 f203 	lsl.w	r2, r0, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	d91c      	bls.n	80049ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68d9      	ldr	r1, [r3, #12]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	3b1e      	subs	r3, #30
 80049c6:	2207      	movs	r2, #7
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	4019      	ands	r1, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6898      	ldr	r0, [r3, #8]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	3b1e      	subs	r3, #30
 80049e0:	fa00 f203 	lsl.w	r2, r0, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	60da      	str	r2, [r3, #12]
 80049ec:	e019      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6919      	ldr	r1, [r3, #16]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	2207      	movs	r2, #7
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	4019      	ands	r1, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6898      	ldr	r0, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d003      	beq.n	8004a32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004a2e:	2b11      	cmp	r3, #17
 8004a30:	d132      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <HAL_ADC_ConfigChannel+0x1e4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d125      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d126      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d11a      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	0c9a      	lsrs	r2, r3, #18
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a78:	e002      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f9      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x1b2>
 8004a86:	e007      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	40012400 	.word	0x40012400
 8004ab0:	2000009c 	.word	0x2000009c
 8004ab4:	431bde83 	.word	0x431bde83

08004ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d040      	beq.n	8004b58 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <ADC_Enable+0xac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <ADC_Enable+0xb0>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004af4:	e002      	b.n	8004afc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f9      	bne.n	8004af6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b02:	f7ff fb69 	bl	80041d8 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004b08:	e01f      	b.n	8004b4a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b0a:	f7ff fb65 	bl	80041d8 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d918      	bls.n	8004b4a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d011      	beq.n	8004b4a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	f043 0210 	orr.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e007      	b.n	8004b5a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d1d8      	bne.n	8004b0a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000009c 	.word	0x2000009c
 8004b68:	431bde83 	.word	0x431bde83

08004b6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d12e      	bne.n	8004be4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b96:	f7ff fb1f 	bl	80041d8 <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004b9c:	e01b      	b.n	8004bd6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b9e:	f7ff fb1b 	bl	80041d8 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d914      	bls.n	8004bd6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10d      	bne.n	8004bd6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	f043 0210 	orr.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f043 0201 	orr.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e007      	b.n	8004be6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d0dc      	beq.n	8004b9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d127      	bne.n	8004c58 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004c22:	d115      	bne.n	8004c50 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d111      	bne.n	8004c50 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7fd fe73 	bl	800293c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004c56:	e004      	b.n	8004c62 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff fe0a 	bl	8004892 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f043 0204 	orr.w	r2, r3, #4
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f7ff fe02 	bl	80048b6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_ADCEx_Calibration_Start+0x1e>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e095      	b.n	8004e06 <HAL_ADCEx_Calibration_Start+0x14a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff ff42 	bl	8004b6c <ADC_ConversionStop_Disable>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8084 	bne.w	8004dfc <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cfc:	f023 0302 	bic.w	r3, r3, #2
 8004d00:	f043 0202 	orr.w	r2, r3, #2
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004d08:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <HAL_ADCEx_Calibration_Start+0x154>)
 8004d0a:	681c      	ldr	r4, [r3, #0]
 8004d0c:	2002      	movs	r0, #2
 8004d0e:	f003 fdc5 	bl	800889c <HAL_RCCEx_GetPeriphCLKFreq>
 8004d12:	4603      	mov	r3, r0
 8004d14:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004d18:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004d1a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004d1c:	e002      	b.n	8004d24 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f9      	bne.n	8004d1e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fec4 	bl	8004ab8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0208 	orr.w	r2, r2, #8
 8004d3e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004d40:	f7ff fa4a 	bl	80041d8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004d46:	e01b      	b.n	8004d80 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004d48:	f7ff fa46 	bl	80041d8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b0a      	cmp	r3, #10
 8004d54:	d914      	bls.n	8004d80 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f023 0312 	bic.w	r3, r3, #18
 8004d6c:	f043 0210 	orr.w	r2, r3, #16
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e042      	b.n	8004e06 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1dc      	bne.n	8004d48 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0204 	orr.w	r2, r2, #4
 8004d9c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004d9e:	f7ff fa1b 	bl	80041d8 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004da4:	e01b      	b.n	8004dde <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004da6:	f7ff fa17 	bl	80041d8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b0a      	cmp	r3, #10
 8004db2:	d914      	bls.n	8004dde <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f023 0312 	bic.w	r3, r3, #18
 8004dca:	f043 0210 	orr.w	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e013      	b.n	8004e06 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1dc      	bne.n	8004da6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f023 0303 	bic.w	r3, r3, #3
 8004df4:	f043 0201 	orr.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000009c 	.word	0x2000009c

08004e14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0ed      	b.n	8005014 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fe ff2b 	bl	8003ca0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e5a:	f7ff f9bd 	bl	80041d8 <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e60:	e012      	b.n	8004e88 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e62:	f7ff f9b9 	bl	80041d8 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b0a      	cmp	r3, #10
 8004e6e:	d90b      	bls.n	8004e88 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2205      	movs	r2, #5
 8004e80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0c5      	b.n	8005014 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0e5      	beq.n	8004e62 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0202 	bic.w	r2, r2, #2
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ea6:	f7ff f997 	bl	80041d8 <HAL_GetTick>
 8004eaa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004eac:	e012      	b.n	8004ed4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004eae:	f7ff f993 	bl	80041d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b0a      	cmp	r3, #10
 8004eba:	d90b      	bls.n	8004ed4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2205      	movs	r2, #5
 8004ecc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e09f      	b.n	8005014 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7e1b      	ldrb	r3, [r3, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d108      	bne.n	8004efc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e007      	b.n	8004f0c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7e5b      	ldrb	r3, [r3, #25]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d108      	bne.n	8004f26 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e007      	b.n	8004f36 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7e9b      	ldrb	r3, [r3, #26]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d108      	bne.n	8004f50 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0220 	orr.w	r2, r2, #32
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e007      	b.n	8004f60 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0220 	bic.w	r2, r2, #32
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	7edb      	ldrb	r3, [r3, #27]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d108      	bne.n	8004f7a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0210 	bic.w	r2, r2, #16
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e007      	b.n	8004f8a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0210 	orr.w	r2, r2, #16
 8004f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7f1b      	ldrb	r3, [r3, #28]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d108      	bne.n	8004fa4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0208 	orr.w	r2, r2, #8
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e007      	b.n	8004fb4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0208 	bic.w	r2, r2, #8
 8004fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	7f5b      	ldrb	r3, [r3, #29]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d108      	bne.n	8004fce <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0204 	orr.w	r2, r2, #4
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e007      	b.n	8004fde <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0204 	bic.w	r2, r2, #4
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	ea42 0103 	orr.w	r1, r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	1e5a      	subs	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005032:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d003      	beq.n	8005042 <HAL_CAN_ConfigFilter+0x26>
 800503a:	7cfb      	ldrb	r3, [r7, #19]
 800503c:	2b02      	cmp	r3, #2
 800503e:	f040 80be 	bne.w	80051be <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005042:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8005044:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800504c:	f043 0201 	orr.w	r2, r3, #1
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800505c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	431a      	orrs	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2201      	movs	r2, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43db      	mvns	r3, r3
 8005094:	401a      	ands	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d123      	bne.n	80050ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3248      	adds	r2, #72	; 0x48
 80050cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	3348      	adds	r3, #72	; 0x48
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d122      	bne.n	800513a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005114:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	3248      	adds	r2, #72	; 0x48
 800511a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800512e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005130:	6979      	ldr	r1, [r7, #20]
 8005132:	3348      	adds	r3, #72	; 0x48
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	440b      	add	r3, r1
 8005138:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	401a      	ands	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005154:	e007      	b.n	8005166 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	431a      	orrs	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	43db      	mvns	r3, r3
 8005178:	401a      	ands	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005180:	e007      	b.n	8005192 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	431a      	orrs	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051b0:	f023 0201 	bic.w	r2, r3, #1
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e006      	b.n	80051cc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
  }
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40006400 	.word	0x40006400

080051dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d12e      	bne.n	800524e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005208:	f7fe ffe6 	bl	80041d8 <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800520e:	e012      	b.n	8005236 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005210:	f7fe ffe2 	bl	80041d8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b0a      	cmp	r3, #10
 800521c:	d90b      	bls.n	8005236 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2205      	movs	r2, #5
 800522e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e012      	b.n	800525c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e006      	b.n	800525c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
  }
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005264:	b480      	push	{r7}
 8005266:	b089      	sub	sp, #36	; 0x24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005278:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d003      	beq.n	8005290 <HAL_CAN_AddTxMessage+0x2c>
 8005288:	7ffb      	ldrb	r3, [r7, #31]
 800528a:	2b02      	cmp	r3, #2
 800528c:	f040 80b8 	bne.w	8005400 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80a0 	beq.w	80053f0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	0e1b      	lsrs	r3, r3, #24
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d907      	bls.n	80052d0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e09e      	b.n	800540e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80052d0:	2201      	movs	r2, #1
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	409a      	lsls	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10d      	bne.n	80052fe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052ec:	68f9      	ldr	r1, [r7, #12]
 80052ee:	6809      	ldr	r1, [r1, #0]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3318      	adds	r3, #24
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	440b      	add	r3, r1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e00f      	b.n	800531e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005308:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005312:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3318      	adds	r3, #24
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	440b      	add	r3, r1
 800531c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3318      	adds	r3, #24
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	440b      	add	r3, r1
 800532e:	3304      	adds	r3, #4
 8005330:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	7d1b      	ldrb	r3, [r3, #20]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d111      	bne.n	800535e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3318      	adds	r3, #24
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	6811      	ldr	r1, [r2, #0]
 800534e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	3318      	adds	r3, #24
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	440b      	add	r3, r1
 800535a:	3304      	adds	r3, #4
 800535c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3307      	adds	r3, #7
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	061a      	lsls	r2, r3, #24
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3306      	adds	r3, #6
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3305      	adds	r3, #5
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4313      	orrs	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	3204      	adds	r2, #4
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	4610      	mov	r0, r2
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	6811      	ldr	r1, [r2, #0]
 8005386:	ea43 0200 	orr.w	r2, r3, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	440b      	add	r3, r1
 8005390:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005394:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3303      	adds	r3, #3
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	061a      	lsls	r2, r3, #24
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3302      	adds	r3, #2
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3301      	adds	r3, #1
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	4313      	orrs	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	4610      	mov	r0, r2
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	6811      	ldr	r1, [r2, #0]
 80053bc:	ea43 0200 	orr.w	r2, r3, r0
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80053ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3318      	adds	r3, #24
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	4413      	add	r3, r2
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	6811      	ldr	r1, [r2, #0]
 80053de:	f043 0201 	orr.w	r2, r3, #1
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	3318      	adds	r3, #24
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	440b      	add	r3, r1
 80053ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e00e      	b.n	800540e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e006      	b.n	800540e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	; 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr

08005418 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800542a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d002      	beq.n	8005438 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005432:	7afb      	ldrb	r3, [r7, #11]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d11d      	bne.n	8005474 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005474:	68fb      	ldr	r3, [r7, #12]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005494:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d003      	beq.n	80054a4 <HAL_CAN_GetRxMessage+0x24>
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	f040 80f3 	bne.w	800568a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10e      	bne.n	80054c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d116      	bne.n	80054e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0e7      	b.n	8005698 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0d8      	b.n	8005698 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	331b      	adds	r3, #27
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4413      	add	r3, r2
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0204 	and.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10c      	bne.n	800551e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	331b      	adds	r3, #27
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4413      	add	r3, r2
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	0d5b      	lsrs	r3, r3, #21
 8005514:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e00b      	b.n	8005536 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	331b      	adds	r3, #27
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4413      	add	r3, r2
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	331b      	adds	r3, #27
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	4413      	add	r3, r2
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0202 	and.w	r2, r3, #2
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	331b      	adds	r3, #27
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 020f 	and.w	r2, r3, #15
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	331b      	adds	r3, #27
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	4413      	add	r3, r2
 8005570:	3304      	adds	r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	b2da      	uxtb	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	331b      	adds	r3, #27
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	3304      	adds	r3, #4
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	4413      	add	r3, r2
 800559e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	0a1a      	lsrs	r2, r3, #8
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	0c1a      	lsrs	r2, r3, #16
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	3302      	adds	r3, #2
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	0e1a      	lsrs	r2, r3, #24
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	3303      	adds	r3, #3
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4413      	add	r3, r2
 8005602:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	3304      	adds	r3, #4
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	4413      	add	r3, r2
 800561a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0a1a      	lsrs	r2, r3, #8
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3305      	adds	r3, #5
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4413      	add	r3, r2
 8005634:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0c1a      	lsrs	r2, r3, #16
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	3306      	adds	r3, #6
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	4413      	add	r3, r2
 800564e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e1a      	lsrs	r2, r3, #24
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	3307      	adds	r3, #7
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0220 	orr.w	r2, r2, #32
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e007      	b.n	8005686 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0220 	orr.w	r2, r2, #32
 8005684:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e006      	b.n	8005698 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d002      	beq.n	80056c0 <HAL_CAN_ActivateNotification+0x1e>
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d109      	bne.n	80056d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e006      	b.n	80056e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
  }
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d002      	beq.n	800570a <HAL_CAN_DeactivateNotification+0x1e>
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d10a      	bne.n	8005720 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6959      	ldr	r1, [r3, #20]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	43da      	mvns	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	400a      	ands	r2, r1
 800571a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e006      	b.n	800572e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005740:	2300      	movs	r3, #0
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d07c      	beq.n	8005878 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d023      	beq.n	80057d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f005 fdf0 	bl	800b380 <HAL_CAN_TxMailbox0CompleteCallback>
 80057a0:	e016      	b.n	80057d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e00c      	b.n	80057d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	e002      	b.n	80057d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f97d 	bl	8005aca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d024      	beq.n	8005824 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f959 	bl	8005aa6 <HAL_CAN_TxMailbox1CompleteCallback>
 80057f4:	e016      	b.n	8005824 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e00c      	b.n	8005824 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
 800581c:	e002      	b.n	8005824 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f95c 	bl	8005adc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d024      	beq.n	8005878 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005836:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f938 	bl	8005ab8 <HAL_CAN_TxMailbox2CompleteCallback>
 8005848:	e016      	b.n	8005878 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	e00c      	b.n	8005878 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
 8005870:	e002      	b.n	8005878 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f93b 	bl	8005aee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005892:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2210      	movs	r2, #16
 800589a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2208      	movs	r2, #8
 80058b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f921 	bl	8005b00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f005 fd3c 	bl	800b354 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2210      	movs	r2, #16
 80058fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2208      	movs	r2, #8
 800591a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8f8 	bl	8005b12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f006 fac2 	bl	800bec4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d006      	beq.n	8005962 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2210      	movs	r2, #16
 800595a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8e1 	bl	8005b24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2208      	movs	r2, #8
 800597c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8d9 	bl	8005b36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d07b      	beq.n	8005a86 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d072      	beq.n	8005a7e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d043      	beq.n	8005a7e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d03e      	beq.n	8005a7e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a06:	2b60      	cmp	r3, #96	; 0x60
 8005a08:	d02b      	beq.n	8005a62 <HAL_CAN_IRQHandler+0x32a>
 8005a0a:	2b60      	cmp	r3, #96	; 0x60
 8005a0c:	d82e      	bhi.n	8005a6c <HAL_CAN_IRQHandler+0x334>
 8005a0e:	2b50      	cmp	r3, #80	; 0x50
 8005a10:	d022      	beq.n	8005a58 <HAL_CAN_IRQHandler+0x320>
 8005a12:	2b50      	cmp	r3, #80	; 0x50
 8005a14:	d82a      	bhi.n	8005a6c <HAL_CAN_IRQHandler+0x334>
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d019      	beq.n	8005a4e <HAL_CAN_IRQHandler+0x316>
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d826      	bhi.n	8005a6c <HAL_CAN_IRQHandler+0x334>
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d010      	beq.n	8005a44 <HAL_CAN_IRQHandler+0x30c>
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	d822      	bhi.n	8005a6c <HAL_CAN_IRQHandler+0x334>
 8005a26:	2b10      	cmp	r3, #16
 8005a28:	d002      	beq.n	8005a30 <HAL_CAN_IRQHandler+0x2f8>
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d005      	beq.n	8005a3a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005a2e:	e01d      	b.n	8005a6c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	f043 0308 	orr.w	r3, r3, #8
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a38:	e019      	b.n	8005a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	f043 0310 	orr.w	r3, r3, #16
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a42:	e014      	b.n	8005a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	f043 0320 	orr.w	r3, r3, #32
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a4c:	e00f      	b.n	8005a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a56:	e00a      	b.n	8005a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a60:	e005      	b.n	8005a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a6a:	e000      	b.n	8005a6e <HAL_CAN_IRQHandler+0x336>
            break;
 8005a6c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699a      	ldr	r2, [r3, #24]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a7c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2204      	movs	r2, #4
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f855 	bl	8005b48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	3728      	adds	r7, #40	; 0x28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr
	...

08005b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b8e:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	60d3      	str	r3, [r2, #12]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000ed00 	.word	0xe000ed00

08005ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__NVIC_GetPriorityGrouping+0x18>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	f003 0307 	and.w	r3, r3, #7
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	e000ed00 	.word	0xe000ed00

08005bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	db0b      	blt.n	8005bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	f003 021f 	and.w	r2, r3, #31
 8005bd8:	4906      	ldr	r1, [pc, #24]	; (8005bf4 <__NVIC_EnableIRQ+0x34>)
 8005bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2001      	movs	r0, #1
 8005be2:	fa00 f202 	lsl.w	r2, r0, r2
 8005be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr
 8005bf4:	e000e100 	.word	0xe000e100

08005bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	6039      	str	r1, [r7, #0]
 8005c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	db0a      	blt.n	8005c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	490c      	ldr	r1, [pc, #48]	; (8005c44 <__NVIC_SetPriority+0x4c>)
 8005c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c16:	0112      	lsls	r2, r2, #4
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c20:	e00a      	b.n	8005c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	4908      	ldr	r1, [pc, #32]	; (8005c48 <__NVIC_SetPriority+0x50>)
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	0112      	lsls	r2, r2, #4
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	440b      	add	r3, r1
 8005c36:	761a      	strb	r2, [r3, #24]
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	e000e100 	.word	0xe000e100
 8005c48:	e000ed00 	.word	0xe000ed00

08005c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f1c3 0307 	rsb	r3, r3, #7
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	bf28      	it	cs
 8005c6a:	2304      	movcs	r3, #4
 8005c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	3304      	adds	r3, #4
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d902      	bls.n	8005c7c <NVIC_EncodePriority+0x30>
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3b03      	subs	r3, #3
 8005c7a:	e000      	b.n	8005c7e <NVIC_EncodePriority+0x32>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43da      	mvns	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	401a      	ands	r2, r3
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9e:	43d9      	mvns	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca4:	4313      	orrs	r3, r2
         );
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3724      	adds	r7, #36	; 0x24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cc0:	d301      	bcc.n	8005cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e00f      	b.n	8005ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <SysTick_Config+0x40>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cce:	210f      	movs	r1, #15
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd4:	f7ff ff90 	bl	8005bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <SysTick_Config+0x40>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <SysTick_Config+0x40>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000e010 	.word	0xe000e010

08005cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff2d 	bl	8005b5c <__NVIC_SetPriorityGrouping>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	4603      	mov	r3, r0
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d1c:	f7ff ff42 	bl	8005ba4 <__NVIC_GetPriorityGrouping>
 8005d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	6978      	ldr	r0, [r7, #20]
 8005d28:	f7ff ff90 	bl	8005c4c <NVIC_EncodePriority>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d32:	4611      	mov	r1, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff5f 	bl	8005bf8 <__NVIC_SetPriority>
}
 8005d3a:	bf00      	nop
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	4603      	mov	r3, r0
 8005d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff ff35 	bl	8005bc0 <__NVIC_EnableIRQ>
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ffa2 	bl	8005cb0 <SysTick_Config>
 8005d6c:	4603      	mov	r3, r0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e059      	b.n	8005e42 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <HAL_DMA_Init+0xd4>)
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d80f      	bhi.n	8005dba <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_DMA_Init+0xd8>)
 8005da2:	4413      	add	r3, r2
 8005da4:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <HAL_DMA_Init+0xdc>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	091b      	lsrs	r3, r3, #4
 8005dac:	009a      	lsls	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <HAL_DMA_Init+0xe0>)
 8005db6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005db8:	e00e      	b.n	8005dd8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <HAL_DMA_Init+0xe4>)
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4a23      	ldr	r2, [pc, #140]	; (8005e54 <HAL_DMA_Init+0xdc>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	009a      	lsls	r2, r3, #2
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_DMA_Init+0xe8>)
 8005dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005dee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr
 8005e4c:	40020407 	.word	0x40020407
 8005e50:	bffdfff8 	.word	0xbffdfff8
 8005e54:	cccccccd 	.word	0xcccccccd
 8005e58:	40020000 	.word	0x40020000
 8005e5c:	bffdfbf8 	.word	0xbffdfbf8
 8005e60:	40020400 	.word	0x40020400

08005e64 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_DMA_Start+0x20>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e02d      	b.n	8005ee0 <HAL_DMA_Start+0x7c>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d11d      	bne.n	8005ed2 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fab0 	bl	8006420 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e005      	b.n	8005ede <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
 8005edc:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_DMA_Start_IT+0x20>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e04a      	b.n	8005f9e <HAL_DMA_Start_IT+0xb6>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d13a      	bne.n	8005f90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa6e 	bl	8006420 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 020e 	orr.w	r2, r2, #14
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e00f      	b.n	8005f7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0204 	bic.w	r2, r2, #4
 8005f6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 020a 	orr.w	r2, r2, #10
 8005f7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e005      	b.n	8005f9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80f1 	beq.w	80061b4 <HAL_DMA_IRQHandler+0x20c>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80eb 	beq.w	80061b4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d107      	bne.n	8005ffc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	4b5f      	ldr	r3, [pc, #380]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d958      	bls.n	80060ba <HAL_DMA_IRQHandler+0x112>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5d      	ldr	r2, [pc, #372]	; (8006184 <HAL_DMA_IRQHandler+0x1dc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d04f      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x10a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a5c      	ldr	r2, [pc, #368]	; (8006188 <HAL_DMA_IRQHandler+0x1e0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d048      	beq.n	80060ae <HAL_DMA_IRQHandler+0x106>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a5a      	ldr	r2, [pc, #360]	; (800618c <HAL_DMA_IRQHandler+0x1e4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d040      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x100>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a59      	ldr	r2, [pc, #356]	; (8006190 <HAL_DMA_IRQHandler+0x1e8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d038      	beq.n	80060a2 <HAL_DMA_IRQHandler+0xfa>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a57      	ldr	r2, [pc, #348]	; (8006194 <HAL_DMA_IRQHandler+0x1ec>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d030      	beq.n	800609c <HAL_DMA_IRQHandler+0xf4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a56      	ldr	r2, [pc, #344]	; (8006198 <HAL_DMA_IRQHandler+0x1f0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d028      	beq.n	8006096 <HAL_DMA_IRQHandler+0xee>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a4d      	ldr	r2, [pc, #308]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d020      	beq.n	8006090 <HAL_DMA_IRQHandler+0xe8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a52      	ldr	r2, [pc, #328]	; (800619c <HAL_DMA_IRQHandler+0x1f4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d019      	beq.n	800608c <HAL_DMA_IRQHandler+0xe4>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a50      	ldr	r2, [pc, #320]	; (80061a0 <HAL_DMA_IRQHandler+0x1f8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d012      	beq.n	8006088 <HAL_DMA_IRQHandler+0xe0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a4f      	ldr	r2, [pc, #316]	; (80061a4 <HAL_DMA_IRQHandler+0x1fc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00a      	beq.n	8006082 <HAL_DMA_IRQHandler+0xda>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a4d      	ldr	r2, [pc, #308]	; (80061a8 <HAL_DMA_IRQHandler+0x200>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d102      	bne.n	800607c <HAL_DMA_IRQHandler+0xd4>
 8006076:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800607a:	e01b      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 800607c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006080:	e018      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 8006082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006086:	e015      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	e013      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 800608c:	2304      	movs	r3, #4
 800608e:	e011      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 8006090:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006094:	e00e      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 8006096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800609a:	e00b      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 800609c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80060a0:	e008      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 80060a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060a6:	e005      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 80060a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ac:	e002      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	e000      	b.n	80060b4 <HAL_DMA_IRQHandler+0x10c>
 80060b2:	2304      	movs	r3, #4
 80060b4:	4a3d      	ldr	r2, [pc, #244]	; (80061ac <HAL_DMA_IRQHandler+0x204>)
 80060b6:	6053      	str	r3, [r2, #4]
 80060b8:	e057      	b.n	800616a <HAL_DMA_IRQHandler+0x1c2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a31      	ldr	r2, [pc, #196]	; (8006184 <HAL_DMA_IRQHandler+0x1dc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d04f      	beq.n	8006164 <HAL_DMA_IRQHandler+0x1bc>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2f      	ldr	r2, [pc, #188]	; (8006188 <HAL_DMA_IRQHandler+0x1e0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d048      	beq.n	8006160 <HAL_DMA_IRQHandler+0x1b8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2e      	ldr	r2, [pc, #184]	; (800618c <HAL_DMA_IRQHandler+0x1e4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d040      	beq.n	800615a <HAL_DMA_IRQHandler+0x1b2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <HAL_DMA_IRQHandler+0x1e8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d038      	beq.n	8006154 <HAL_DMA_IRQHandler+0x1ac>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <HAL_DMA_IRQHandler+0x1ec>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d030      	beq.n	800614e <HAL_DMA_IRQHandler+0x1a6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a29      	ldr	r2, [pc, #164]	; (8006198 <HAL_DMA_IRQHandler+0x1f0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d028      	beq.n	8006148 <HAL_DMA_IRQHandler+0x1a0>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d020      	beq.n	8006142 <HAL_DMA_IRQHandler+0x19a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a25      	ldr	r2, [pc, #148]	; (800619c <HAL_DMA_IRQHandler+0x1f4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d019      	beq.n	800613e <HAL_DMA_IRQHandler+0x196>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <HAL_DMA_IRQHandler+0x1f8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d012      	beq.n	800613a <HAL_DMA_IRQHandler+0x192>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a22      	ldr	r2, [pc, #136]	; (80061a4 <HAL_DMA_IRQHandler+0x1fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00a      	beq.n	8006134 <HAL_DMA_IRQHandler+0x18c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <HAL_DMA_IRQHandler+0x200>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d102      	bne.n	800612e <HAL_DMA_IRQHandler+0x186>
 8006128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800612c:	e01b      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 800612e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006132:	e018      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 8006134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006138:	e015      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 800613a:	2340      	movs	r3, #64	; 0x40
 800613c:	e013      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 800613e:	2304      	movs	r3, #4
 8006140:	e011      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 8006142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006146:	e00e      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 8006148:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800614c:	e00b      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 800614e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006152:	e008      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 8006154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006158:	e005      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 800615a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615e:	e002      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	e000      	b.n	8006166 <HAL_DMA_IRQHandler+0x1be>
 8006164:	2304      	movs	r3, #4
 8006166:	4a12      	ldr	r2, [pc, #72]	; (80061b0 <HAL_DMA_IRQHandler+0x208>)
 8006168:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8136 	beq.w	80063e0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800617c:	e130      	b.n	80063e0 <HAL_DMA_IRQHandler+0x438>
 800617e:	bf00      	nop
 8006180:	40020080 	.word	0x40020080
 8006184:	40020008 	.word	0x40020008
 8006188:	4002001c 	.word	0x4002001c
 800618c:	40020030 	.word	0x40020030
 8006190:	40020044 	.word	0x40020044
 8006194:	40020058 	.word	0x40020058
 8006198:	4002006c 	.word	0x4002006c
 800619c:	40020408 	.word	0x40020408
 80061a0:	4002041c 	.word	0x4002041c
 80061a4:	40020430 	.word	0x40020430
 80061a8:	40020444 	.word	0x40020444
 80061ac:	40020400 	.word	0x40020400
 80061b0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	2202      	movs	r2, #2
 80061ba:	409a      	lsls	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80dd 	beq.w	8006380 <HAL_DMA_IRQHandler+0x3d8>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80d7 	beq.w	8006380 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020a 	bic.w	r2, r2, #10
 80061ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <HAL_DMA_IRQHandler+0x444>)
 8006200:	429a      	cmp	r2, r3
 8006202:	d958      	bls.n	80062b6 <HAL_DMA_IRQHandler+0x30e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a79      	ldr	r2, [pc, #484]	; (80063f0 <HAL_DMA_IRQHandler+0x448>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d04f      	beq.n	80062ae <HAL_DMA_IRQHandler+0x306>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a78      	ldr	r2, [pc, #480]	; (80063f4 <HAL_DMA_IRQHandler+0x44c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d048      	beq.n	80062aa <HAL_DMA_IRQHandler+0x302>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a76      	ldr	r2, [pc, #472]	; (80063f8 <HAL_DMA_IRQHandler+0x450>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d040      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x2fc>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a75      	ldr	r2, [pc, #468]	; (80063fc <HAL_DMA_IRQHandler+0x454>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d038      	beq.n	800629e <HAL_DMA_IRQHandler+0x2f6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a73      	ldr	r2, [pc, #460]	; (8006400 <HAL_DMA_IRQHandler+0x458>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d030      	beq.n	8006298 <HAL_DMA_IRQHandler+0x2f0>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a72      	ldr	r2, [pc, #456]	; (8006404 <HAL_DMA_IRQHandler+0x45c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d028      	beq.n	8006292 <HAL_DMA_IRQHandler+0x2ea>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a69      	ldr	r2, [pc, #420]	; (80063ec <HAL_DMA_IRQHandler+0x444>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d020      	beq.n	800628c <HAL_DMA_IRQHandler+0x2e4>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a6e      	ldr	r2, [pc, #440]	; (8006408 <HAL_DMA_IRQHandler+0x460>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d019      	beq.n	8006288 <HAL_DMA_IRQHandler+0x2e0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6c      	ldr	r2, [pc, #432]	; (800640c <HAL_DMA_IRQHandler+0x464>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d012      	beq.n	8006284 <HAL_DMA_IRQHandler+0x2dc>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a6b      	ldr	r2, [pc, #428]	; (8006410 <HAL_DMA_IRQHandler+0x468>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00a      	beq.n	800627e <HAL_DMA_IRQHandler+0x2d6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a69      	ldr	r2, [pc, #420]	; (8006414 <HAL_DMA_IRQHandler+0x46c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d102      	bne.n	8006278 <HAL_DMA_IRQHandler+0x2d0>
 8006272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006276:	e01b      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 8006278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800627c:	e018      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 800627e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006282:	e015      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 8006284:	2320      	movs	r3, #32
 8006286:	e013      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 8006288:	2302      	movs	r3, #2
 800628a:	e011      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 800628c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006290:	e00e      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 8006292:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006296:	e00b      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 8006298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800629c:	e008      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 800629e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062a2:	e005      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 80062a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a8:	e002      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 80062aa:	2320      	movs	r3, #32
 80062ac:	e000      	b.n	80062b0 <HAL_DMA_IRQHandler+0x308>
 80062ae:	2302      	movs	r3, #2
 80062b0:	4a59      	ldr	r2, [pc, #356]	; (8006418 <HAL_DMA_IRQHandler+0x470>)
 80062b2:	6053      	str	r3, [r2, #4]
 80062b4:	e057      	b.n	8006366 <HAL_DMA_IRQHandler+0x3be>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a4d      	ldr	r2, [pc, #308]	; (80063f0 <HAL_DMA_IRQHandler+0x448>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d04f      	beq.n	8006360 <HAL_DMA_IRQHandler+0x3b8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a4b      	ldr	r2, [pc, #300]	; (80063f4 <HAL_DMA_IRQHandler+0x44c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d048      	beq.n	800635c <HAL_DMA_IRQHandler+0x3b4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a4a      	ldr	r2, [pc, #296]	; (80063f8 <HAL_DMA_IRQHandler+0x450>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d040      	beq.n	8006356 <HAL_DMA_IRQHandler+0x3ae>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a48      	ldr	r2, [pc, #288]	; (80063fc <HAL_DMA_IRQHandler+0x454>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d038      	beq.n	8006350 <HAL_DMA_IRQHandler+0x3a8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a47      	ldr	r2, [pc, #284]	; (8006400 <HAL_DMA_IRQHandler+0x458>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d030      	beq.n	800634a <HAL_DMA_IRQHandler+0x3a2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a45      	ldr	r2, [pc, #276]	; (8006404 <HAL_DMA_IRQHandler+0x45c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d028      	beq.n	8006344 <HAL_DMA_IRQHandler+0x39c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3d      	ldr	r2, [pc, #244]	; (80063ec <HAL_DMA_IRQHandler+0x444>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d020      	beq.n	800633e <HAL_DMA_IRQHandler+0x396>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a41      	ldr	r2, [pc, #260]	; (8006408 <HAL_DMA_IRQHandler+0x460>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d019      	beq.n	800633a <HAL_DMA_IRQHandler+0x392>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a40      	ldr	r2, [pc, #256]	; (800640c <HAL_DMA_IRQHandler+0x464>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d012      	beq.n	8006336 <HAL_DMA_IRQHandler+0x38e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a3e      	ldr	r2, [pc, #248]	; (8006410 <HAL_DMA_IRQHandler+0x468>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00a      	beq.n	8006330 <HAL_DMA_IRQHandler+0x388>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <HAL_DMA_IRQHandler+0x46c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d102      	bne.n	800632a <HAL_DMA_IRQHandler+0x382>
 8006324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006328:	e01b      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 800632a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800632e:	e018      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 8006330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006334:	e015      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 8006336:	2320      	movs	r3, #32
 8006338:	e013      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 800633a:	2302      	movs	r3, #2
 800633c:	e011      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 800633e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006342:	e00e      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 8006344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006348:	e00b      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 800634a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800634e:	e008      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 8006350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006354:	e005      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 8006356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800635a:	e002      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 800635c:	2320      	movs	r3, #32
 800635e:	e000      	b.n	8006362 <HAL_DMA_IRQHandler+0x3ba>
 8006360:	2302      	movs	r3, #2
 8006362:	4a2e      	ldr	r2, [pc, #184]	; (800641c <HAL_DMA_IRQHandler+0x474>)
 8006364:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d034      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800637e:	e02f      	b.n	80063e0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2208      	movs	r2, #8
 8006386:	409a      	lsls	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d028      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x43a>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d023      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 020e 	bic.w	r2, r2, #14
 80063a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	2101      	movs	r1, #1
 80063b4:	fa01 f202 	lsl.w	r2, r1, r2
 80063b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
    }
  }
  return;
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
}
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40020080 	.word	0x40020080
 80063f0:	40020008 	.word	0x40020008
 80063f4:	4002001c 	.word	0x4002001c
 80063f8:	40020030 	.word	0x40020030
 80063fc:	40020044 	.word	0x40020044
 8006400:	40020058 	.word	0x40020058
 8006404:	4002006c 	.word	0x4002006c
 8006408:	40020408 	.word	0x40020408
 800640c:	4002041c 	.word	0x4002041c
 8006410:	40020430 	.word	0x40020430
 8006414:	40020444 	.word	0x40020444
 8006418:	40020400 	.word	0x40020400
 800641c:	40020000 	.word	0x40020000

08006420 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2101      	movs	r1, #1
 8006438:	fa01 f202 	lsl.w	r2, r1, r2
 800643c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b10      	cmp	r3, #16
 800644c:	d108      	bne.n	8006460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800645e:	e007      	b.n	8006470 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	60da      	str	r2, [r3, #12]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr
	...

0800647c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006496:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <HAL_FLASH_Program+0xd8>)
 8006498:	7e1b      	ldrb	r3, [r3, #24]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_FLASH_Program+0x26>
 800649e:	2302      	movs	r3, #2
 80064a0:	e054      	b.n	800654c <HAL_FLASH_Program+0xd0>
 80064a2:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <HAL_FLASH_Program+0xd8>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064ac:	f000 f898 	bl	80065e0 <FLASH_WaitForLastOperation>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d144      	bne.n	8006544 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d102      	bne.n	80064c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80064c0:	2301      	movs	r3, #1
 80064c2:	757b      	strb	r3, [r7, #21]
 80064c4:	e007      	b.n	80064d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d102      	bne.n	80064d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80064cc:	2302      	movs	r3, #2
 80064ce:	757b      	strb	r3, [r7, #21]
 80064d0:	e001      	b.n	80064d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80064d2:	2304      	movs	r3, #4
 80064d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	75bb      	strb	r3, [r7, #22]
 80064da:	e02d      	b.n	8006538 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80064dc:	7dbb      	ldrb	r3, [r7, #22]
 80064de:	005a      	lsls	r2, r3, #1
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	eb02 0c03 	add.w	ip, r2, r3
 80064e6:	7dbb      	ldrb	r3, [r7, #22]
 80064e8:	0119      	lsls	r1, r3, #4
 80064ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ee:	f1c1 0620 	rsb	r6, r1, #32
 80064f2:	f1a1 0020 	sub.w	r0, r1, #32
 80064f6:	fa22 f401 	lsr.w	r4, r2, r1
 80064fa:	fa03 f606 	lsl.w	r6, r3, r6
 80064fe:	4334      	orrs	r4, r6
 8006500:	fa23 f000 	lsr.w	r0, r3, r0
 8006504:	4304      	orrs	r4, r0
 8006506:	fa23 f501 	lsr.w	r5, r3, r1
 800650a:	b2a3      	uxth	r3, r4
 800650c:	4619      	mov	r1, r3
 800650e:	4660      	mov	r0, ip
 8006510:	f000 f84a 	bl	80065a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006514:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006518:	f000 f862 	bl	80065e0 <FLASH_WaitForLastOperation>
 800651c:	4603      	mov	r3, r0
 800651e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <HAL_FLASH_Program+0xdc>)
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <HAL_FLASH_Program+0xdc>)
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006532:	7dbb      	ldrb	r3, [r7, #22]
 8006534:	3301      	adds	r3, #1
 8006536:	75bb      	strb	r3, [r7, #22]
 8006538:	7dba      	ldrb	r2, [r7, #22]
 800653a:	7d7b      	ldrb	r3, [r7, #21]
 800653c:	429a      	cmp	r2, r3
 800653e:	d3cd      	bcc.n	80064dc <HAL_FLASH_Program+0x60>
 8006540:	e000      	b.n	8006544 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006542:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <HAL_FLASH_Program+0xd8>)
 8006546:	2200      	movs	r2, #0
 8006548:	761a      	strb	r2, [r3, #24]

  return status;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
}
 800654c:	4618      	mov	r0, r3
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006554:	20000a28 	.word	0x20000a28
 8006558:	40022000 	.word	0x40022000

0800655c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <HAL_FLASH_Unlock+0x40>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <HAL_FLASH_Unlock+0x40>)
 8006574:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <HAL_FLASH_Unlock+0x44>)
 8006576:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006578:	4b08      	ldr	r3, [pc, #32]	; (800659c <HAL_FLASH_Unlock+0x40>)
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <HAL_FLASH_Unlock+0x48>)
 800657c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800657e:	4b07      	ldr	r3, [pc, #28]	; (800659c <HAL_FLASH_Unlock+0x40>)
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800658e:	79fb      	ldrb	r3, [r7, #7]
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40022000 	.word	0x40022000
 80065a0:	45670123 	.word	0x45670123
 80065a4:	cdef89ab 	.word	0xcdef89ab

080065a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <FLASH_Program_HalfWord+0x30>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <FLASH_Program_HalfWord+0x34>)
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	4a07      	ldr	r2, [pc, #28]	; (80065dc <FLASH_Program_HalfWord+0x34>)
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	887a      	ldrh	r2, [r7, #2]
 80065ca:	801a      	strh	r2, [r3, #0]
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20000a28 	.word	0x20000a28
 80065dc:	40022000 	.word	0x40022000

080065e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80065e8:	f7fd fdf6 	bl	80041d8 <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80065ee:	e010      	b.n	8006612 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f6:	d00c      	beq.n	8006612 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <FLASH_WaitForLastOperation+0x2e>
 80065fe:	f7fd fdeb 	bl	80041d8 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	429a      	cmp	r2, r3
 800660c:	d201      	bcs.n	8006612 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e025      	b.n	800665e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <FLASH_WaitForLastOperation+0x88>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e8      	bne.n	80065f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <FLASH_WaitForLastOperation+0x88>)
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800662a:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <FLASH_WaitForLastOperation+0x88>)
 800662c:	2220      	movs	r2, #32
 800662e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <FLASH_WaitForLastOperation+0x88>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <FLASH_WaitForLastOperation+0x88>)
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006648:	4b07      	ldr	r3, [pc, #28]	; (8006668 <FLASH_WaitForLastOperation+0x88>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006654:	f000 f80a 	bl	800666c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40022000 	.word	0x40022000

0800666c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <FLASH_SetErrorCode+0x98>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0310 	and.w	r3, r3, #16
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006682:	4b21      	ldr	r3, [pc, #132]	; (8006708 <FLASH_SetErrorCode+0x9c>)
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <FLASH_SetErrorCode+0x9c>)
 800668c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f043 0310 	orr.w	r3, r3, #16
 8006694:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006696:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <FLASH_SetErrorCode+0x98>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80066a2:	4b19      	ldr	r3, [pc, #100]	; (8006708 <FLASH_SetErrorCode+0x9c>)
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <FLASH_SetErrorCode+0x9c>)
 80066ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f043 0304 	orr.w	r3, r3, #4
 80066b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80066b6:	4b13      	ldr	r3, [pc, #76]	; (8006704 <FLASH_SetErrorCode+0x98>)
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <FLASH_SetErrorCode+0x9c>)
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	f043 0304 	orr.w	r3, r3, #4
 80066ca:	4a0f      	ldr	r2, [pc, #60]	; (8006708 <FLASH_SetErrorCode+0x9c>)
 80066cc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <FLASH_SetErrorCode+0x98>)
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	4a0c      	ldr	r2, [pc, #48]	; (8006704 <FLASH_SetErrorCode+0x98>)
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f240 1201 	movw	r2, #257	; 0x101
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d106      	bne.n	80066f2 <FLASH_SetErrorCode+0x86>
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <FLASH_SetErrorCode+0x98>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <FLASH_SetErrorCode+0x98>)
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	61d3      	str	r3, [r2, #28]
}  
 80066f0:	e002      	b.n	80066f8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066f2:	4a04      	ldr	r2, [pc, #16]	; (8006704 <FLASH_SetErrorCode+0x98>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60d3      	str	r3, [r2, #12]
}  
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40022000 	.word	0x40022000
 8006708:	20000a28 	.word	0x20000a28

0800670c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_FLASHEx_Erase+0xd0>)
 8006720:	7e1b      	ldrb	r3, [r3, #24]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_FLASHEx_Erase+0x1e>
 8006726:	2302      	movs	r3, #2
 8006728:	e053      	b.n	80067d2 <HAL_FLASHEx_Erase+0xc6>
 800672a:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <HAL_FLASHEx_Erase+0xd0>)
 800672c:	2201      	movs	r2, #1
 800672e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d116      	bne.n	8006766 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006738:	f24c 3050 	movw	r0, #50000	; 0xc350
 800673c:	f7ff ff50 	bl	80065e0 <FLASH_WaitForLastOperation>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d141      	bne.n	80067ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006746:	2001      	movs	r0, #1
 8006748:	f000 f84c 	bl	80067e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800674c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006750:	f7ff ff46 	bl	80065e0 <FLASH_WaitForLastOperation>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006758:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <HAL_FLASHEx_Erase+0xd4>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_FLASHEx_Erase+0xd4>)
 800675e:	f023 0304 	bic.w	r3, r3, #4
 8006762:	6113      	str	r3, [r2, #16]
 8006764:	e031      	b.n	80067ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006766:	f24c 3050 	movw	r0, #50000	; 0xc350
 800676a:	f7ff ff39 	bl	80065e0 <FLASH_WaitForLastOperation>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d12a      	bne.n	80067ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800677a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	e019      	b.n	80067b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006784:	68b8      	ldr	r0, [r7, #8]
 8006786:	f000 f849 	bl	800681c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800678a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800678e:	f7ff ff27 	bl	80065e0 <FLASH_WaitForLastOperation>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <HAL_FLASHEx_Erase+0xd4>)
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	4a11      	ldr	r2, [pc, #68]	; (80067e0 <HAL_FLASHEx_Erase+0xd4>)
 800679c:	f023 0302 	bic.w	r3, r3, #2
 80067a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	601a      	str	r2, [r3, #0]
            break;
 80067ae:	e00c      	b.n	80067ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	02da      	lsls	r2, r3, #11
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3dc      	bcc.n	8006784 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80067ca:	4b04      	ldr	r3, [pc, #16]	; (80067dc <HAL_FLASHEx_Erase+0xd0>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	761a      	strb	r2, [r3, #24]

  return status;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000a28 	.word	0x20000a28
 80067e0:	40022000 	.word	0x40022000

080067e4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <FLASH_MassErase+0x30>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <FLASH_MassErase+0x34>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	4a08      	ldr	r2, [pc, #32]	; (8006818 <FLASH_MassErase+0x34>)
 80067f8:	f043 0304 	orr.w	r3, r3, #4
 80067fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80067fe:	4b06      	ldr	r3, [pc, #24]	; (8006818 <FLASH_MassErase+0x34>)
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	4a05      	ldr	r2, [pc, #20]	; (8006818 <FLASH_MassErase+0x34>)
 8006804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006808:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	20000a28 	.word	0x20000a28
 8006818:	40022000 	.word	0x40022000

0800681c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <FLASH_PageErase+0x38>)
 8006826:	2200      	movs	r2, #0
 8006828:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <FLASH_PageErase+0x3c>)
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <FLASH_PageErase+0x3c>)
 8006830:	f043 0302 	orr.w	r3, r3, #2
 8006834:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006836:	4a08      	ldr	r2, [pc, #32]	; (8006858 <FLASH_PageErase+0x3c>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <FLASH_PageErase+0x3c>)
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <FLASH_PageErase+0x3c>)
 8006842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006846:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000a28 	.word	0x20000a28
 8006858:	40022000 	.word	0x40022000

0800685c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800685c:	b480      	push	{r7}
 800685e:	b08b      	sub	sp, #44	; 0x2c
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800686e:	e169      	b.n	8006b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006870:	2201      	movs	r2, #1
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	4013      	ands	r3, r2
 8006882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	429a      	cmp	r2, r3
 800688a:	f040 8158 	bne.w	8006b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4a9a      	ldr	r2, [pc, #616]	; (8006afc <HAL_GPIO_Init+0x2a0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d05e      	beq.n	8006956 <HAL_GPIO_Init+0xfa>
 8006898:	4a98      	ldr	r2, [pc, #608]	; (8006afc <HAL_GPIO_Init+0x2a0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d875      	bhi.n	800698a <HAL_GPIO_Init+0x12e>
 800689e:	4a98      	ldr	r2, [pc, #608]	; (8006b00 <HAL_GPIO_Init+0x2a4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d058      	beq.n	8006956 <HAL_GPIO_Init+0xfa>
 80068a4:	4a96      	ldr	r2, [pc, #600]	; (8006b00 <HAL_GPIO_Init+0x2a4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d86f      	bhi.n	800698a <HAL_GPIO_Init+0x12e>
 80068aa:	4a96      	ldr	r2, [pc, #600]	; (8006b04 <HAL_GPIO_Init+0x2a8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d052      	beq.n	8006956 <HAL_GPIO_Init+0xfa>
 80068b0:	4a94      	ldr	r2, [pc, #592]	; (8006b04 <HAL_GPIO_Init+0x2a8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d869      	bhi.n	800698a <HAL_GPIO_Init+0x12e>
 80068b6:	4a94      	ldr	r2, [pc, #592]	; (8006b08 <HAL_GPIO_Init+0x2ac>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d04c      	beq.n	8006956 <HAL_GPIO_Init+0xfa>
 80068bc:	4a92      	ldr	r2, [pc, #584]	; (8006b08 <HAL_GPIO_Init+0x2ac>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d863      	bhi.n	800698a <HAL_GPIO_Init+0x12e>
 80068c2:	4a92      	ldr	r2, [pc, #584]	; (8006b0c <HAL_GPIO_Init+0x2b0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d046      	beq.n	8006956 <HAL_GPIO_Init+0xfa>
 80068c8:	4a90      	ldr	r2, [pc, #576]	; (8006b0c <HAL_GPIO_Init+0x2b0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d85d      	bhi.n	800698a <HAL_GPIO_Init+0x12e>
 80068ce:	2b12      	cmp	r3, #18
 80068d0:	d82a      	bhi.n	8006928 <HAL_GPIO_Init+0xcc>
 80068d2:	2b12      	cmp	r3, #18
 80068d4:	d859      	bhi.n	800698a <HAL_GPIO_Init+0x12e>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <HAL_GPIO_Init+0x80>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	08006957 	.word	0x08006957
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006943 	.word	0x08006943
 80068e8:	08006985 	.word	0x08006985
 80068ec:	0800698b 	.word	0x0800698b
 80068f0:	0800698b 	.word	0x0800698b
 80068f4:	0800698b 	.word	0x0800698b
 80068f8:	0800698b 	.word	0x0800698b
 80068fc:	0800698b 	.word	0x0800698b
 8006900:	0800698b 	.word	0x0800698b
 8006904:	0800698b 	.word	0x0800698b
 8006908:	0800698b 	.word	0x0800698b
 800690c:	0800698b 	.word	0x0800698b
 8006910:	0800698b 	.word	0x0800698b
 8006914:	0800698b 	.word	0x0800698b
 8006918:	0800698b 	.word	0x0800698b
 800691c:	0800698b 	.word	0x0800698b
 8006920:	08006939 	.word	0x08006939
 8006924:	0800694d 	.word	0x0800694d
 8006928:	4a79      	ldr	r2, [pc, #484]	; (8006b10 <HAL_GPIO_Init+0x2b4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800692e:	e02c      	b.n	800698a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	623b      	str	r3, [r7, #32]
          break;
 8006936:	e029      	b.n	800698c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	3304      	adds	r3, #4
 800693e:	623b      	str	r3, [r7, #32]
          break;
 8006940:	e024      	b.n	800698c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	3308      	adds	r3, #8
 8006948:	623b      	str	r3, [r7, #32]
          break;
 800694a:	e01f      	b.n	800698c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	330c      	adds	r3, #12
 8006952:	623b      	str	r3, [r7, #32]
          break;
 8006954:	e01a      	b.n	800698c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800695e:	2304      	movs	r3, #4
 8006960:	623b      	str	r3, [r7, #32]
          break;
 8006962:	e013      	b.n	800698c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d105      	bne.n	8006978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800696c:	2308      	movs	r3, #8
 800696e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	611a      	str	r2, [r3, #16]
          break;
 8006976:	e009      	b.n	800698c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006978:	2308      	movs	r3, #8
 800697a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	615a      	str	r2, [r3, #20]
          break;
 8006982:	e003      	b.n	800698c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006984:	2300      	movs	r3, #0
 8006986:	623b      	str	r3, [r7, #32]
          break;
 8006988:	e000      	b.n	800698c <HAL_GPIO_Init+0x130>
          break;
 800698a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2bff      	cmp	r3, #255	; 0xff
 8006990:	d801      	bhi.n	8006996 <HAL_GPIO_Init+0x13a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	e001      	b.n	800699a <HAL_GPIO_Init+0x13e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2bff      	cmp	r3, #255	; 0xff
 80069a0:	d802      	bhi.n	80069a8 <HAL_GPIO_Init+0x14c>
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	e002      	b.n	80069ae <HAL_GPIO_Init+0x152>
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	3b08      	subs	r3, #8
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	210f      	movs	r1, #15
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	fa01 f303 	lsl.w	r3, r1, r3
 80069bc:	43db      	mvns	r3, r3
 80069be:	401a      	ands	r2, r3
 80069c0:	6a39      	ldr	r1, [r7, #32]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	431a      	orrs	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 80b1 	beq.w	8006b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80069dc:	4b4d      	ldr	r3, [pc, #308]	; (8006b14 <HAL_GPIO_Init+0x2b8>)
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	4a4c      	ldr	r2, [pc, #304]	; (8006b14 <HAL_GPIO_Init+0x2b8>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6193      	str	r3, [r2, #24]
 80069e8:	4b4a      	ldr	r3, [pc, #296]	; (8006b14 <HAL_GPIO_Init+0x2b8>)
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80069f4:	4a48      	ldr	r2, [pc, #288]	; (8006b18 <HAL_GPIO_Init+0x2bc>)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	089b      	lsrs	r3, r3, #2
 80069fa:	3302      	adds	r3, #2
 80069fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	220f      	movs	r2, #15
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	43db      	mvns	r3, r3
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4013      	ands	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <HAL_GPIO_Init+0x2c0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d013      	beq.n	8006a48 <HAL_GPIO_Init+0x1ec>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a3f      	ldr	r2, [pc, #252]	; (8006b20 <HAL_GPIO_Init+0x2c4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00d      	beq.n	8006a44 <HAL_GPIO_Init+0x1e8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3e      	ldr	r2, [pc, #248]	; (8006b24 <HAL_GPIO_Init+0x2c8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d007      	beq.n	8006a40 <HAL_GPIO_Init+0x1e4>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a3d      	ldr	r2, [pc, #244]	; (8006b28 <HAL_GPIO_Init+0x2cc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d101      	bne.n	8006a3c <HAL_GPIO_Init+0x1e0>
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e006      	b.n	8006a4a <HAL_GPIO_Init+0x1ee>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	e004      	b.n	8006a4a <HAL_GPIO_Init+0x1ee>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e002      	b.n	8006a4a <HAL_GPIO_Init+0x1ee>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_GPIO_Init+0x1ee>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4c:	f002 0203 	and.w	r2, r2, #3
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	4093      	lsls	r3, r2
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a5a:	492f      	ldr	r1, [pc, #188]	; (8006b18 <HAL_GPIO_Init+0x2bc>)
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	3302      	adds	r3, #2
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	492c      	ldr	r1, [pc, #176]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	600b      	str	r3, [r1, #0]
 8006a80:	e006      	b.n	8006a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	4928      	ldr	r1, [pc, #160]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006a9c:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	4922      	ldr	r1, [pc, #136]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	e006      	b.n	8006ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006aaa:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	491e      	ldr	r1, [pc, #120]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	4918      	ldr	r1, [pc, #96]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	608b      	str	r3, [r1, #8]
 8006ad0:	e006      	b.n	8006ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006ad2:	4b16      	ldr	r3, [pc, #88]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	4914      	ldr	r1, [pc, #80]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d021      	beq.n	8006b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006aec:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <HAL_GPIO_Init+0x2d0>)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60cb      	str	r3, [r1, #12]
 8006af8:	e021      	b.n	8006b3e <HAL_GPIO_Init+0x2e2>
 8006afa:	bf00      	nop
 8006afc:	10320000 	.word	0x10320000
 8006b00:	10310000 	.word	0x10310000
 8006b04:	10220000 	.word	0x10220000
 8006b08:	10210000 	.word	0x10210000
 8006b0c:	10120000 	.word	0x10120000
 8006b10:	10110000 	.word	0x10110000
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010800 	.word	0x40010800
 8006b20:	40010c00 	.word	0x40010c00
 8006b24:	40011000 	.word	0x40011000
 8006b28:	40011400 	.word	0x40011400
 8006b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_GPIO_Init+0x304>)
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	43db      	mvns	r3, r3
 8006b38:	4909      	ldr	r1, [pc, #36]	; (8006b60 <HAL_GPIO_Init+0x304>)
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	3301      	adds	r3, #1
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f47f ae8e 	bne.w	8006870 <HAL_GPIO_Init+0x14>
  }
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop
 8006b58:	372c      	adds	r7, #44	; 0x2c
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	40010400 	.word	0x40010400

08006b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	807b      	strh	r3, [r7, #2]
 8006b70:	4613      	mov	r3, r2
 8006b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b74:	787b      	ldrb	r3, [r7, #1]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b7a:	887a      	ldrh	r2, [r7, #2]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006b80:	e003      	b.n	8006b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006b82:	887b      	ldrh	r3, [r7, #2]
 8006b84:	041a      	lsls	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	611a      	str	r2, [r3, #16]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	b08f      	sub	sp, #60	; 0x3c
 8006b98:	af0a      	add	r7, sp, #40	; 0x28
 8006b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e10f      	b.n	8006dc6 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f011 fec9 	bl	8018958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2203      	movs	r2, #3
 8006bca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f003 f809 	bl	8009bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	687e      	ldr	r6, [r7, #4]
 8006bf2:	466d      	mov	r5, sp
 8006bf4:	f106 0410 	add.w	r4, r6, #16
 8006bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c08:	1d33      	adds	r3, r6, #4
 8006c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c0c:	6838      	ldr	r0, [r7, #0]
 8006c0e:	f002 ff27 	bl	8009a60 <USB_CoreInit>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0d0      	b.n	8006dc6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 fff6 	bl	8009c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]
 8006c34:	e04a      	b.n	8006ccc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c36:	7bfa      	ldrb	r2, [r7, #15]
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	333d      	adds	r3, #61	; 0x3d
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c4a:	7bfa      	ldrb	r2, [r7, #15]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	333c      	adds	r3, #60	; 0x3c
 8006c5a:	7bfa      	ldrb	r2, [r7, #15]
 8006c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c5e:	7bfa      	ldrb	r2, [r7, #15]
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	b298      	uxth	r0, r3
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	3342      	adds	r3, #66	; 0x42
 8006c72:	4602      	mov	r2, r0
 8006c74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c76:	7bfa      	ldrb	r2, [r7, #15]
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	333f      	adds	r3, #63	; 0x3f
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c8a:	7bfa      	ldrb	r2, [r7, #15]
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3344      	adds	r3, #68	; 0x44
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	3348      	adds	r3, #72	; 0x48
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cb2:	7bfa      	ldrb	r2, [r7, #15]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3350      	adds	r3, #80	; 0x50
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	7bfa      	ldrb	r2, [r7, #15]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d3af      	bcc.n	8006c36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e044      	b.n	8006d66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cf2:	7bfa      	ldrb	r2, [r7, #15]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d34:	7bfa      	ldrb	r2, [r7, #15]
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d4a:	7bfa      	ldrb	r2, [r7, #15]
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	440b      	add	r3, r1
 8006d58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	3301      	adds	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	7bfa      	ldrb	r2, [r7, #15]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d3b5      	bcc.n	8006cdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	687e      	ldr	r6, [r7, #4]
 8006d78:	466d      	mov	r5, sp
 8006d7a:	f106 0410 	add.w	r4, r6, #16
 8006d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d8e:	1d33      	adds	r3, r6, #4
 8006d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d92:	6838      	ldr	r0, [r7, #0]
 8006d94:	f002 ff8e 	bl	8009cb4 <USB_DevInit>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e00d      	b.n	8006dc6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f003 fe44 	bl	800aa4c <USB_DevDisconnect>

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006dce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_PCD_Start+0x16>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e012      	b.n	8006e0a <HAL_PCD_Start+0x3c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f002 fef3 	bl	8009bdc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f003 fe06 	bl	800aa0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_PCD_Stop+0x16>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e018      	b.n	8006e5a <HAL_PCD_Stop+0x48>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f002 fee1 	bl	8009bfc <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f003 fe04 	bl	800aa4c <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2110      	movs	r1, #16
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f003 f85e 	bl	8009f0c <USB_FlushTxFifo>
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e62:	b590      	push	{r4, r7, lr}
 8006e64:	b08d      	sub	sp, #52	; 0x34
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f003 fe95 	bl	800aba8 <USB_GetMode>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 8354 	bne.w	800752e <HAL_PCD_IRQHandler+0x6cc>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f003 fdfe 	bl	800aa8c <USB_ReadInterrupts>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 834a 	beq.w	800752c <HAL_PCD_IRQHandler+0x6ca>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f003 fdf5 	bl	800aa8c <USB_ReadInterrupts>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d107      	bne.n	8006ebc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695a      	ldr	r2, [r3, #20]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f002 0202 	and.w	r2, r2, #2
 8006eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f003 fde3 	bl	800aa8c <USB_ReadInterrupts>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d161      	bne.n	8006f94 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0210 	bic.w	r2, r2, #16
 8006ede:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f003 020f 	and.w	r2, r3, #15
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	4413      	add	r3, r2
 8006efc:	3304      	adds	r3, #4
 8006efe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	0c5b      	lsrs	r3, r3, #17
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d124      	bne.n	8006f56 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d035      	beq.n	8006f84 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6a38      	ldr	r0, [r7, #32]
 8006f2c:	f003 fc20 	bl	800a770 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	091b      	lsrs	r3, r3, #4
 8006f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f3c:	441a      	add	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	091b      	lsrs	r3, r3, #4
 8006f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4e:	441a      	add	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	619a      	str	r2, [r3, #24]
 8006f54:	e016      	b.n	8006f84 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	0c5b      	lsrs	r3, r3, #17
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	2b06      	cmp	r3, #6
 8006f60:	d110      	bne.n	8006f84 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f68:	2208      	movs	r2, #8
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6a38      	ldr	r0, [r7, #32]
 8006f6e:	f003 fbff 	bl	800a770 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	091b      	lsrs	r3, r3, #4
 8006f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f7e:	441a      	add	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0210 	orr.w	r2, r2, #16
 8006f92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f003 fd77 	bl	800aa8c <USB_ReadInterrupts>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fa8:	d16e      	bne.n	8007088 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f003 fd7c 	bl	800aab0 <USB_ReadDevAllOutEpInterrupt>
 8006fb8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006fba:	e062      	b.n	8007082 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d057      	beq.n	8007076 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f003 fd9f 	bl	800ab14 <USB_ReadDevOutEPInterrupt>
 8006fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fce4 	bl	80079c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	461a      	mov	r2, r3
 8007014:	2308      	movs	r3, #8
 8007016:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fd20 	bl	8007a60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	461a      	mov	r2, r3
 8007038:	2310      	movs	r3, #16
 800703a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007052:	461a      	mov	r2, r3
 8007054:	2320      	movs	r3, #32
 8007056:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	461a      	mov	r2, r3
 8007070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007074:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	3301      	adds	r3, #1
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	2b00      	cmp	r3, #0
 8007086:	d199      	bne.n	8006fbc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f003 fcfd 	bl	800aa8c <USB_ReadInterrupts>
 8007092:	4603      	mov	r3, r0
 8007094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800709c:	f040 8087 	bne.w	80071ae <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f003 fd1c 	bl	800aae2 <USB_ReadDevAllInEpInterrupt>
 80070aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80070b0:	e07a      	b.n	80071a8 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d06f      	beq.n	800719c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f003 fd41 	bl	800ab4e <USB_ReadDevInEPInterrupt>
 80070cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2201      	movs	r2, #1
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	43db      	mvns	r3, r3
 80070f2:	69f9      	ldr	r1, [r7, #28]
 80070f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f8:	4013      	ands	r3, r2
 80070fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	461a      	mov	r2, r3
 800710a:	2301      	movs	r3, #1
 800710c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f011 fc92 	bl	8018a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	461a      	mov	r2, r3
 8007132:	2308      	movs	r3, #8
 8007134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	461a      	mov	r2, r3
 800714e:	2310      	movs	r3, #16
 8007150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007168:	461a      	mov	r2, r3
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	461a      	mov	r2, r3
 8007186:	2302      	movs	r3, #2
 8007188:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fb8c 	bl	80078b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	3301      	adds	r3, #1
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d181      	bne.n	80070b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f003 fc6a 	bl	800aa8c <USB_ReadInterrupts>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c2:	d114      	bne.n	80071ee <HAL_PCD_IRQHandler+0x38c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f011 fc9d 	bl	8018b18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80071ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f003 fc4a 	bl	800aa8c <USB_ReadInterrupts>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d112      	bne.n	800722a <HAL_PCD_IRQHandler+0x3c8>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b01      	cmp	r3, #1
 8007212:	d102      	bne.n	800721a <HAL_PCD_IRQHandler+0x3b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f011 fc59 	bl	8018acc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007228:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f003 fc2c 	bl	800aa8c <USB_ReadInterrupts>
 8007234:	4603      	mov	r3, r0
 8007236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800723a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723e:	f040 80c5 	bne.w	80073cc <HAL_PCD_IRQHandler+0x56a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007250:	f023 0301 	bic.w	r3, r3, #1
 8007254:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2110      	movs	r1, #16
 800725c:	4618      	mov	r0, r3
 800725e:	f002 fe55 	bl	8009f0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007262:	2300      	movs	r3, #0
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007266:	e056      	b.n	8007316 <HAL_PCD_IRQHandler+0x4b4>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	461a      	mov	r2, r3
 8007276:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800727a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800729a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	461a      	mov	r2, r3
 80072ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800730e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	3301      	adds	r3, #1
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731c:	429a      	cmp	r2, r3
 800731e:	d3a3      	bcc.n	8007268 <HAL_PCD_IRQHandler+0x406>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007332:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d016      	beq.n	800736a <HAL_PCD_IRQHandler+0x508>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800734c:	f043 030b 	orr.w	r3, r3, #11
 8007350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007362:	f043 030b 	orr.w	r3, r3, #11
 8007366:	6453      	str	r3, [r2, #68]	; 0x44
 8007368:	e015      	b.n	8007396 <HAL_PCD_IRQHandler+0x534>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800737c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007380:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007390:	f043 030b 	orr.w	r3, r3, #11
 8007394:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f003 fc26 	bl	800ac08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80073ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f003 fb5b 	bl	800aa8c <USB_ReadInterrupts>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e0:	d124      	bne.n	800742c <HAL_PCD_IRQHandler+0x5ca>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f003 fbeb 	bl	800abc2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f002 fde7 	bl	8009fc4 <USB_GetDevSpeed>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681c      	ldr	r4, [r3, #0]
 8007402:	f001 f8c9 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 8007406:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	4620      	mov	r0, r4
 8007412:	f002 fb47 	bl	8009aa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f011 fb39 	bl	8018a8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800742a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f003 fb2b 	bl	800aa8c <USB_ReadInterrupts>
 8007436:	4603      	mov	r3, r0
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b08      	cmp	r3, #8
 800743e:	d10a      	bne.n	8007456 <HAL_PCD_IRQHandler+0x5f4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f011 fb16 	bl	8018a72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f002 0208 	and.w	r2, r2, #8
 8007454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f003 fb16 	bl	800aa8c <USB_ReadInterrupts>
 8007460:	4603      	mov	r3, r0
 8007462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746a:	d10f      	bne.n	800748c <HAL_PCD_IRQHandler+0x62a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f011 fb6e 	bl	8018b58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800748a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f003 fafb 	bl	800aa8c <USB_ReadInterrupts>
 8007496:	4603      	mov	r3, r0
 8007498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800749c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a0:	d10f      	bne.n	80074c2 <HAL_PCD_IRQHandler+0x660>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f011 fb41 	bl	8018b34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80074c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f003 fae0 	bl	800aa8c <USB_ReadInterrupts>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d6:	d10a      	bne.n	80074ee <HAL_PCD_IRQHandler+0x68c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f011 fb4f 	bl	8018b7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80074ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f003 faca 	bl	800aa8c <USB_ReadInterrupts>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d115      	bne.n	800752e <HAL_PCD_IRQHandler+0x6cc>
    {
      temp = hpcd->Instance->GOTGINT;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_PCD_IRQHandler+0x6b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f011 fb3f 	bl	8018b98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6859      	ldr	r1, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	e000      	b.n	800752e <HAL_PCD_IRQHandler+0x6cc>
      return;
 800752c:	bf00      	nop
    }
  }
}
 800752e:	3734      	adds	r7, #52	; 0x34
 8007530:	46bd      	mov	sp, r7
 8007532:	bd90      	pop	{r4, r7, pc}

08007534 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_PCD_SetAddress+0x1a>
 800754a:	2302      	movs	r3, #2
 800754c:	e013      	b.n	8007576 <HAL_PCD_SetAddress+0x42>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f003 fa2b 	bl	800a9c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	461a      	mov	r2, r3
 800758c:	4603      	mov	r3, r0
 800758e:	70fb      	strb	r3, [r7, #3]
 8007590:	460b      	mov	r3, r1
 8007592:	803b      	strh	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800759c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da0f      	bge.n	80075c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	f003 020f 	and.w	r2, r3, #15
 80075aa:	4613      	mov	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	3338      	adds	r3, #56	; 0x38
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4413      	add	r3, r2
 80075b8:	3304      	adds	r3, #4
 80075ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	705a      	strb	r2, [r3, #1]
 80075c2:	e00f      	b.n	80075e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	f003 020f 	and.w	r2, r3, #15
 80075ca:	4613      	mov	r3, r2
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4413      	add	r3, r2
 80075da:	3304      	adds	r3, #4
 80075dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80075f0:	883a      	ldrh	r2, [r7, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	78ba      	ldrb	r2, [r7, #2]
 80075fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800760e:	78bb      	ldrb	r3, [r7, #2]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d102      	bne.n	800761a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_PCD_EP_Open+0xaa>
 8007624:	2302      	movs	r3, #2
 8007626:	e00e      	b.n	8007646 <HAL_PCD_EP_Open+0xc8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	4618      	mov	r0, r3
 8007638:	f002 fce2 	bl	800a000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007644:	7afb      	ldrb	r3, [r7, #11]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	460b      	mov	r3, r1
 800765c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	f003 020f 	and.w	r2, r3, #15
 8007664:	4613      	mov	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	3304      	adds	r3, #4
 8007676:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2200      	movs	r2, #0
 8007688:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	b2da      	uxtb	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6979      	ldr	r1, [r7, #20]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 ff09 	bl	800a4c4 <USB_EP0StartXfer>
 80076b2:	e005      	b.n	80076c0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6979      	ldr	r1, [r7, #20]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f002 fd26 	bl	800a10c <USB_EPStartXfer>
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
 80076d6:	460b      	mov	r3, r1
 80076d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	4613      	mov	r3, r2
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	3338      	adds	r3, #56	; 0x38
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	3304      	adds	r3, #4
 80076f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2201      	movs	r2, #1
 8007708:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	b2da      	uxtb	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6979      	ldr	r1, [r7, #20]
 8007726:	4618      	mov	r0, r3
 8007728:	f002 fecc 	bl	800a4c4 <USB_EP0StartXfer>
 800772c:	e005      	b.n	800773a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	4618      	mov	r0, r3
 8007736:	f002 fce9 	bl	800a10c <USB_EPStartXfer>
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	f003 020f 	and.w	r2, r3, #15
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d901      	bls.n	8007762 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e04e      	b.n	8007800 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007766:	2b00      	cmp	r3, #0
 8007768:	da0f      	bge.n	800778a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	f003 020f 	and.w	r2, r3, #15
 8007770:	4613      	mov	r3, r2
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	3338      	adds	r3, #56	; 0x38
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	3304      	adds	r3, #4
 8007780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	705a      	strb	r2, [r3, #1]
 8007788:	e00d      	b.n	80077a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	3304      	adds	r3, #4
 800779e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_PCD_EP_SetStall+0x82>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e01c      	b.n	8007800 <HAL_PCD_EP_SetStall+0xbc>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f003 f822 	bl	800a81e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f003 fa09 	bl	800ac08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	f003 020f 	and.w	r2, r3, #15
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	429a      	cmp	r2, r3
 8007820:	d901      	bls.n	8007826 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e042      	b.n	80078ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da0f      	bge.n	800784e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	f003 020f 	and.w	r2, r3, #15
 8007834:	4613      	mov	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	3338      	adds	r3, #56	; 0x38
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	3304      	adds	r3, #4
 8007844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	705a      	strb	r2, [r3, #1]
 800784c:	e00f      	b.n	800786e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	f003 020f 	and.w	r2, r3, #15
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	3304      	adds	r3, #4
 8007866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_PCD_EP_ClrStall+0x86>
 800788a:	2302      	movs	r3, #2
 800788c:	e00e      	b.n	80078ac <HAL_PCD_EP_ClrStall+0xa4>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	4618      	mov	r0, r3
 800789e:	f003 f82b 	bl	800a8f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	4613      	mov	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	3338      	adds	r3, #56	; 0x38
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	3304      	adds	r3, #4
 80078da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	699a      	ldr	r2, [r3, #24]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d901      	bls.n	80078ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e067      	b.n	80079bc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d902      	bls.n	8007908 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3303      	adds	r3, #3
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007910:	e026      	b.n	8007960 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	695a      	ldr	r2, [r3, #20]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	429a      	cmp	r2, r3
 8007926:	d902      	bls.n	800792e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	3303      	adds	r3, #3
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68d9      	ldr	r1, [r3, #12]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	b29b      	uxth	r3, r3
 8007942:	6978      	ldr	r0, [r7, #20]
 8007944:	f002 fedb 	bl	800a6fe <USB_WritePacket>

    ep->xfer_buff  += len;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	441a      	add	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	441a      	add	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	b29b      	uxth	r3, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	429a      	cmp	r2, r3
 8007974:	d809      	bhi.n	800798a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800797e:	429a      	cmp	r2, r3
 8007980:	d203      	bcs.n	800798a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1c3      	bne.n	8007912 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	695a      	ldr	r2, [r3, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	429a      	cmp	r2, r3
 8007994:	d811      	bhi.n	80079ba <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	2201      	movs	r2, #1
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	43db      	mvns	r3, r3
 80079b0:	6939      	ldr	r1, [r7, #16]
 80079b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b6:	4013      	ands	r3, r2
 80079b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	333c      	adds	r3, #60	; 0x3c
 80079dc:	3304      	adds	r3, #4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <PCD_EP_OutXfrComplete_int+0x98>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d124      	bne.n	8007a44 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	461a      	mov	r2, r3
 8007a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a16:	6093      	str	r3, [r2, #8]
 8007a18:	e01a      	b.n	8007a50 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a30:	461a      	mov	r2, r3
 8007a32:	2320      	movs	r3, #32
 8007a34:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f010 ffe3 	bl	8018a08 <HAL_PCD_DataOutStageCallback>
 8007a42:	e005      	b.n	8007a50 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f010 ffdc 	bl	8018a08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	4f54310a 	.word	0x4f54310a

08007a60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	333c      	adds	r3, #60	; 0x3c
 8007a78:	3304      	adds	r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4a0c      	ldr	r2, [pc, #48]	; (8007ac4 <PCD_EP_OutSetupPacket_int+0x64>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d90e      	bls.n	8007ab4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aac:	461a      	mov	r2, r3
 8007aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f010 ff95 	bl	80189e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	4f54300a 	.word	0x4f54300a

08007ac8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ae6:	883b      	ldrh	r3, [r7, #0]
 8007ae8:	0419      	lsls	r1, r3, #16
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
 8007af4:	e028      	b.n	8007b48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]
 8007b08:	e00d      	b.n	8007b26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	3340      	adds	r3, #64	; 0x40
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	0c1b      	lsrs	r3, r3, #16
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	3301      	adds	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
 8007b26:	7bfa      	ldrb	r2, [r7, #15]
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d3ec      	bcc.n	8007b0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007b30:	883b      	ldrh	r3, [r7, #0]
 8007b32:	0418      	lsls	r0, r3, #16
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6819      	ldr	r1, [r3, #0]
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	4302      	orrs	r2, r0
 8007b40:	3340      	adds	r3, #64	; 0x40
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	887a      	ldrh	r2, [r7, #2]
 8007b66:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e304      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8087 	beq.w	8007ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b94:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f003 030c 	and.w	r3, r3, #12
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d00c      	beq.n	8007bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ba0:	4b8f      	ldr	r3, [pc, #572]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 030c 	and.w	r3, r3, #12
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d112      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x5e>
 8007bac:	4b8c      	ldr	r3, [pc, #560]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bba:	4b89      	ldr	r3, [pc, #548]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d06c      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x12c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d168      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e2de      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d106      	bne.n	8007bea <HAL_RCC_OscConfig+0x76>
 8007bdc:	4b80      	ldr	r3, [pc, #512]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a7f      	ldr	r2, [pc, #508]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	e02e      	b.n	8007c48 <HAL_RCC_OscConfig+0xd4>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCC_OscConfig+0x98>
 8007bf2:	4b7b      	ldr	r3, [pc, #492]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a7a      	ldr	r2, [pc, #488]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	4b78      	ldr	r3, [pc, #480]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a77      	ldr	r2, [pc, #476]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	e01d      	b.n	8007c48 <HAL_RCC_OscConfig+0xd4>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c14:	d10c      	bne.n	8007c30 <HAL_RCC_OscConfig+0xbc>
 8007c16:	4b72      	ldr	r3, [pc, #456]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a71      	ldr	r2, [pc, #452]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	4b6f      	ldr	r3, [pc, #444]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a6e      	ldr	r2, [pc, #440]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	e00b      	b.n	8007c48 <HAL_RCC_OscConfig+0xd4>
 8007c30:	4b6b      	ldr	r3, [pc, #428]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6a      	ldr	r2, [pc, #424]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	4b68      	ldr	r3, [pc, #416]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a67      	ldr	r2, [pc, #412]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d013      	beq.n	8007c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c50:	f7fc fac2 	bl	80041d8 <HAL_GetTick>
 8007c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c58:	f7fc fabe 	bl	80041d8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b64      	cmp	r3, #100	; 0x64
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e292      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6a:	4b5d      	ldr	r3, [pc, #372]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0f0      	beq.n	8007c58 <HAL_RCC_OscConfig+0xe4>
 8007c76:	e014      	b.n	8007ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c78:	f7fc faae 	bl	80041d8 <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c80:	f7fc faaa 	bl	80041d8 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b64      	cmp	r3, #100	; 0x64
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e27e      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c92:	4b53      	ldr	r3, [pc, #332]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1f0      	bne.n	8007c80 <HAL_RCC_OscConfig+0x10c>
 8007c9e:	e000      	b.n	8007ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d063      	beq.n	8007d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cae:	4b4c      	ldr	r3, [pc, #304]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f003 030c 	and.w	r3, r3, #12
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007cba:	4b49      	ldr	r3, [pc, #292]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d11c      	bne.n	8007d00 <HAL_RCC_OscConfig+0x18c>
 8007cc6:	4b46      	ldr	r3, [pc, #280]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d116      	bne.n	8007d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cd2:	4b43      	ldr	r3, [pc, #268]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_RCC_OscConfig+0x176>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d001      	beq.n	8007cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e252      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cea:	4b3d      	ldr	r3, [pc, #244]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	4939      	ldr	r1, [pc, #228]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cfe:	e03a      	b.n	8007d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d020      	beq.n	8007d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d08:	4b36      	ldr	r3, [pc, #216]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0e:	f7fc fa63 	bl	80041d8 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d16:	f7fc fa5f 	bl	80041d8 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e233      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d28:	4b2d      	ldr	r3, [pc, #180]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d34:	4b2a      	ldr	r3, [pc, #168]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	4927      	ldr	r1, [pc, #156]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	600b      	str	r3, [r1, #0]
 8007d48:	e015      	b.n	8007d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d4a:	4b26      	ldr	r3, [pc, #152]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d50:	f7fc fa42 	bl	80041d8 <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d58:	f7fc fa3e 	bl	80041d8 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e212      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f0      	bne.n	8007d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d03a      	beq.n	8007df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d019      	beq.n	8007dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d8a:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <HAL_RCC_OscConfig+0x274>)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d90:	f7fc fa22 	bl	80041d8 <HAL_GetTick>
 8007d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d98:	f7fc fa1e 	bl	80041d8 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e1f2      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007daa:	4b0d      	ldr	r3, [pc, #52]	; (8007de0 <HAL_RCC_OscConfig+0x26c>)
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f0      	beq.n	8007d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007db6:	2001      	movs	r0, #1
 8007db8:	f000 fc20 	bl	80085fc <RCC_Delay>
 8007dbc:	e01c      	b.n	8007df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <HAL_RCC_OscConfig+0x274>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dc4:	f7fc fa08 	bl	80041d8 <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dca:	e00f      	b.n	8007dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dcc:	f7fc fa04 	bl	80041d8 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d908      	bls.n	8007dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e1d8      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
 8007dde:	bf00      	nop
 8007de0:	40021000 	.word	0x40021000
 8007de4:	42420000 	.word	0x42420000
 8007de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dec:	4b9b      	ldr	r3, [pc, #620]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e9      	bne.n	8007dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80a6 	beq.w	8007f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e0a:	4b94      	ldr	r3, [pc, #592]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10d      	bne.n	8007e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e16:	4b91      	ldr	r3, [pc, #580]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	4a90      	ldr	r2, [pc, #576]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e20:	61d3      	str	r3, [r2, #28]
 8007e22:	4b8e      	ldr	r3, [pc, #568]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	60bb      	str	r3, [r7, #8]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e32:	4b8b      	ldr	r3, [pc, #556]	; (8008060 <HAL_RCC_OscConfig+0x4ec>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d118      	bne.n	8007e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e3e:	4b88      	ldr	r3, [pc, #544]	; (8008060 <HAL_RCC_OscConfig+0x4ec>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a87      	ldr	r2, [pc, #540]	; (8008060 <HAL_RCC_OscConfig+0x4ec>)
 8007e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e4a:	f7fc f9c5 	bl	80041d8 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e52:	f7fc f9c1 	bl	80041d8 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b64      	cmp	r3, #100	; 0x64
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e195      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e64:	4b7e      	ldr	r3, [pc, #504]	; (8008060 <HAL_RCC_OscConfig+0x4ec>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d106      	bne.n	8007e86 <HAL_RCC_OscConfig+0x312>
 8007e78:	4b78      	ldr	r3, [pc, #480]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	4a77      	ldr	r2, [pc, #476]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	6213      	str	r3, [r2, #32]
 8007e84:	e02d      	b.n	8007ee2 <HAL_RCC_OscConfig+0x36e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x334>
 8007e8e:	4b73      	ldr	r3, [pc, #460]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	4a72      	ldr	r2, [pc, #456]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e94:	f023 0301 	bic.w	r3, r3, #1
 8007e98:	6213      	str	r3, [r2, #32]
 8007e9a:	4b70      	ldr	r3, [pc, #448]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	4a6f      	ldr	r2, [pc, #444]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ea0:	f023 0304 	bic.w	r3, r3, #4
 8007ea4:	6213      	str	r3, [r2, #32]
 8007ea6:	e01c      	b.n	8007ee2 <HAL_RCC_OscConfig+0x36e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b05      	cmp	r3, #5
 8007eae:	d10c      	bne.n	8007eca <HAL_RCC_OscConfig+0x356>
 8007eb0:	4b6a      	ldr	r3, [pc, #424]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	4a69      	ldr	r2, [pc, #420]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007eb6:	f043 0304 	orr.w	r3, r3, #4
 8007eba:	6213      	str	r3, [r2, #32]
 8007ebc:	4b67      	ldr	r3, [pc, #412]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	4a66      	ldr	r2, [pc, #408]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ec2:	f043 0301 	orr.w	r3, r3, #1
 8007ec6:	6213      	str	r3, [r2, #32]
 8007ec8:	e00b      	b.n	8007ee2 <HAL_RCC_OscConfig+0x36e>
 8007eca:	4b64      	ldr	r3, [pc, #400]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	4a63      	ldr	r2, [pc, #396]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ed0:	f023 0301 	bic.w	r3, r3, #1
 8007ed4:	6213      	str	r3, [r2, #32]
 8007ed6:	4b61      	ldr	r3, [pc, #388]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	4a60      	ldr	r2, [pc, #384]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007edc:	f023 0304 	bic.w	r3, r3, #4
 8007ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d015      	beq.n	8007f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eea:	f7fc f975 	bl	80041d8 <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef0:	e00a      	b.n	8007f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef2:	f7fc f971 	bl	80041d8 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d901      	bls.n	8007f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e143      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f08:	4b54      	ldr	r3, [pc, #336]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0ee      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x37e>
 8007f14:	e014      	b.n	8007f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f16:	f7fc f95f 	bl	80041d8 <HAL_GetTick>
 8007f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f1c:	e00a      	b.n	8007f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f1e:	f7fc f95b 	bl	80041d8 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e12d      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f34:	4b49      	ldr	r3, [pc, #292]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1ee      	bne.n	8007f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d105      	bne.n	8007f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f46:	4b45      	ldr	r3, [pc, #276]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	4a44      	ldr	r2, [pc, #272]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f50:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 808c 	beq.w	8008074 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007f5c:	4b3f      	ldr	r3, [pc, #252]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d10e      	bne.n	8007f88 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007f6a:	4b3c      	ldr	r3, [pc, #240]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d108      	bne.n	8007f88 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f82:	d101      	bne.n	8007f88 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e103      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d14e      	bne.n	800802e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007f90:	4b32      	ldr	r3, [pc, #200]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007f9c:	4b2f      	ldr	r3, [pc, #188]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d001      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e0ef      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007fb0:	4b2c      	ldr	r3, [pc, #176]	; (8008064 <HAL_RCC_OscConfig+0x4f0>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb6:	f7fc f90f 	bl	80041d8 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fbe:	f7fc f90b 	bl	80041d8 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b64      	cmp	r3, #100	; 0x64
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e0df      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007fd0:	4b22      	ldr	r3, [pc, #136]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f0      	bne.n	8007fbe <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007fdc:	4b1f      	ldr	r3, [pc, #124]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	491c      	ldr	r1, [pc, #112]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007fee:	4b1b      	ldr	r3, [pc, #108]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	4918      	ldr	r1, [pc, #96]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <HAL_RCC_OscConfig+0x4f0>)
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008006:	f7fc f8e7 	bl	80041d8 <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800800e:	f7fc f8e3 	bl	80041d8 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b64      	cmp	r3, #100	; 0x64
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e0b7      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008020:	4b0e      	ldr	r3, [pc, #56]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0f0      	beq.n	800800e <HAL_RCC_OscConfig+0x49a>
 800802c:	e022      	b.n	8008074 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800802e:	4b0b      	ldr	r3, [pc, #44]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	4a0a      	ldr	r2, [pc, #40]	; (800805c <HAL_RCC_OscConfig+0x4e8>)
 8008034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <HAL_RCC_OscConfig+0x4f0>)
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008040:	f7fc f8ca 	bl	80041d8 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008046:	e00f      	b.n	8008068 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008048:	f7fc f8c6 	bl	80041d8 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b64      	cmp	r3, #100	; 0x64
 8008054:	d908      	bls.n	8008068 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e09a      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
 800805a:	bf00      	nop
 800805c:	40021000 	.word	0x40021000
 8008060:	40007000 	.word	0x40007000
 8008064:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008068:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e9      	bne.n	8008048 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8088 	beq.w	800818e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800807e:	4b46      	ldr	r3, [pc, #280]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 030c 	and.w	r3, r3, #12
 8008086:	2b08      	cmp	r3, #8
 8008088:	d068      	beq.n	800815c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d14d      	bne.n	800812e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008092:	4b42      	ldr	r3, [pc, #264]	; (800819c <HAL_RCC_OscConfig+0x628>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008098:	f7fc f89e 	bl	80041d8 <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080a0:	f7fc f89a 	bl	80041d8 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e06e      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080b2:	4b39      	ldr	r3, [pc, #228]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f0      	bne.n	80080a0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c6:	d10f      	bne.n	80080e8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80080c8:	4b33      	ldr	r3, [pc, #204]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4931      	ldr	r1, [pc, #196]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80080d6:	4b30      	ldr	r3, [pc, #192]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	f023 020f 	bic.w	r2, r3, #15
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	492d      	ldr	r1, [pc, #180]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080e8:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	430b      	orrs	r3, r1
 80080fa:	4927      	ldr	r1, [pc, #156]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008100:	4b26      	ldr	r3, [pc, #152]	; (800819c <HAL_RCC_OscConfig+0x628>)
 8008102:	2201      	movs	r2, #1
 8008104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008106:	f7fc f867 	bl	80041d8 <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800810e:	f7fc f863 	bl	80041d8 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e037      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008120:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x59a>
 800812c:	e02f      	b.n	800818e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800812e:	4b1b      	ldr	r3, [pc, #108]	; (800819c <HAL_RCC_OscConfig+0x628>)
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008134:	f7fc f850 	bl	80041d8 <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800813c:	f7fc f84c 	bl	80041d8 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e020      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f0      	bne.n	800813c <HAL_RCC_OscConfig+0x5c8>
 800815a:	e018      	b.n	800818e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e013      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <HAL_RCC_OscConfig+0x624>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	429a      	cmp	r2, r3
 800817a:	d106      	bne.n	800818a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008186:	429a      	cmp	r2, r3
 8008188:	d001      	beq.n	800818e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40021000 	.word	0x40021000
 800819c:	42420060 	.word	0x42420060

080081a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0d0      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081b4:	4b6a      	ldr	r3, [pc, #424]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d910      	bls.n	80081e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c2:	4b67      	ldr	r3, [pc, #412]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 0207 	bic.w	r2, r3, #7
 80081ca:	4965      	ldr	r1, [pc, #404]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d2:	4b63      	ldr	r3, [pc, #396]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0b8      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d020      	beq.n	8008232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081fc:	4b59      	ldr	r3, [pc, #356]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	4a58      	ldr	r2, [pc, #352]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008214:	4b53      	ldr	r3, [pc, #332]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4a52      	ldr	r2, [pc, #328]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 800821a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800821e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008220:	4b50      	ldr	r3, [pc, #320]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	494d      	ldr	r1, [pc, #308]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 800822e:	4313      	orrs	r3, r2
 8008230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d040      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008246:	4b47      	ldr	r3, [pc, #284]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d115      	bne.n	800827e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e07f      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d107      	bne.n	800826e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800825e:	4b41      	ldr	r3, [pc, #260]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e073      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800826e:	4b3d      	ldr	r3, [pc, #244]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e06b      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800827e:	4b39      	ldr	r3, [pc, #228]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f023 0203 	bic.w	r2, r3, #3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	4936      	ldr	r1, [pc, #216]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 800828c:	4313      	orrs	r3, r2
 800828e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008290:	f7fb ffa2 	bl	80041d8 <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008296:	e00a      	b.n	80082ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008298:	f7fb ff9e 	bl	80041d8 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e053      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ae:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f003 020c 	and.w	r2, r3, #12
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	429a      	cmp	r2, r3
 80082be:	d1eb      	bne.n	8008298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082c0:	4b27      	ldr	r3, [pc, #156]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d210      	bcs.n	80082f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b24      	ldr	r3, [pc, #144]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 0207 	bic.w	r2, r3, #7
 80082d6:	4922      	ldr	r1, [pc, #136]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	4313      	orrs	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b20      	ldr	r3, [pc, #128]	; (8008360 <HAL_RCC_ClockConfig+0x1c0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e032      	b.n	8008356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4916      	ldr	r1, [pc, #88]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 800830a:	4313      	orrs	r3, r2
 800830c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	490e      	ldr	r1, [pc, #56]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 800832a:	4313      	orrs	r3, r2
 800832c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800832e:	f000 f821 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 8008332:	4602      	mov	r2, r0
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <HAL_RCC_ClockConfig+0x1c4>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	490a      	ldr	r1, [pc, #40]	; (8008368 <HAL_RCC_ClockConfig+0x1c8>)
 8008340:	5ccb      	ldrb	r3, [r1, r3]
 8008342:	fa22 f303 	lsr.w	r3, r2, r3
 8008346:	4a09      	ldr	r2, [pc, #36]	; (800836c <HAL_RCC_ClockConfig+0x1cc>)
 8008348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <HAL_RCC_ClockConfig+0x1d0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fb ff00 	bl	8004154 <HAL_InitTick>

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40022000 	.word	0x40022000
 8008364:	40021000 	.word	0x40021000
 8008368:	08019a88 	.word	0x08019a88
 800836c:	2000009c 	.word	0x2000009c
 8008370:	200000a0 	.word	0x200000a0

08008374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	b09d      	sub	sp, #116	; 0x74
 800837a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800837c:	4b81      	ldr	r3, [pc, #516]	; (8008584 <HAL_RCC_GetSysClockFreq+0x210>)
 800837e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8008382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008384:	c407      	stmia	r4!, {r0, r1, r2}
 8008386:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8008388:	4b7f      	ldr	r3, [pc, #508]	; (8008588 <HAL_RCC_GetSysClockFreq+0x214>)
 800838a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800838e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	667b      	str	r3, [r7, #100]	; 0x64
 8008398:	2300      	movs	r3, #0
 800839a:	663b      	str	r3, [r7, #96]	; 0x60
 800839c:	2300      	movs	r3, #0
 800839e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083a0:	2300      	movs	r3, #0
 80083a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80083ac:	2300      	movs	r3, #0
 80083ae:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80083b0:	4b76      	ldr	r3, [pc, #472]	; (800858c <HAL_RCC_GetSysClockFreq+0x218>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b8:	f003 030c 	and.w	r3, r3, #12
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d002      	beq.n	80083c6 <HAL_RCC_GetSysClockFreq+0x52>
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d003      	beq.n	80083cc <HAL_RCC_GetSysClockFreq+0x58>
 80083c4:	e0d4      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083c6:	4b72      	ldr	r3, [pc, #456]	; (8008590 <HAL_RCC_GetSysClockFreq+0x21c>)
 80083c8:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80083ca:	e0d4      	b.n	8008576 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80083cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ce:	0c9b      	lsrs	r3, r3, #18
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	3340      	adds	r3, #64	; 0x40
 80083d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80083da:	4413      	add	r3, r2
 80083dc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80083e0:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80083e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80b9 	beq.w	8008560 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80083ee:	4b67      	ldr	r3, [pc, #412]	; (800858c <HAL_RCC_GetSysClockFreq+0x218>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	3340      	adds	r3, #64	; 0x40
 80083f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80083fc:	4413      	add	r3, r2
 80083fe:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008402:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008404:	4b61      	ldr	r3, [pc, #388]	; (800858c <HAL_RCC_GetSysClockFreq+0x218>)
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8095 	beq.w	800853c <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008412:	4b5e      	ldr	r3, [pc, #376]	; (800858c <HAL_RCC_GetSysClockFreq+0x218>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	091b      	lsrs	r3, r3, #4
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	3301      	adds	r3, #1
 800841e:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008420:	4b5a      	ldr	r3, [pc, #360]	; (800858c <HAL_RCC_GetSysClockFreq+0x218>)
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	3302      	adds	r3, #2
 800842c:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800842e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008430:	2200      	movs	r2, #0
 8008432:	61bb      	str	r3, [r7, #24]
 8008434:	61fa      	str	r2, [r7, #28]
 8008436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008438:	2200      	movs	r2, #0
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
 800843c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800843e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008442:	4622      	mov	r2, r4
 8008444:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008448:	4684      	mov	ip, r0
 800844a:	fb0c f202 	mul.w	r2, ip, r2
 800844e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8008452:	468c      	mov	ip, r1
 8008454:	4618      	mov	r0, r3
 8008456:	4621      	mov	r1, r4
 8008458:	4603      	mov	r3, r0
 800845a:	fb03 f30c 	mul.w	r3, r3, ip
 800845e:	4413      	add	r3, r2
 8008460:	4602      	mov	r2, r0
 8008462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008464:	fba2 8901 	umull	r8, r9, r2, r1
 8008468:	444b      	add	r3, r9
 800846a:	4699      	mov	r9, r3
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	f04f 0000 	mov.w	r0, #0
 8008474:	f04f 0100 	mov.w	r1, #0
 8008478:	0159      	lsls	r1, r3, #5
 800847a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800847e:	0150      	lsls	r0, r2, #5
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	ebb2 0508 	subs.w	r5, r2, r8
 8008488:	eb63 0609 	sbc.w	r6, r3, r9
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	01b3      	lsls	r3, r6, #6
 8008496:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 800849a:	01aa      	lsls	r2, r5, #6
 800849c:	ebb2 0a05 	subs.w	sl, r2, r5
 80084a0:	eb63 0b06 	sbc.w	fp, r3, r6
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b8:	4692      	mov	sl, r2
 80084ba:	469b      	mov	fp, r3
 80084bc:	eb1a 0308 	adds.w	r3, sl, r8
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	eb4b 0309 	adc.w	r3, fp, r9
 80084c6:	607b      	str	r3, [r7, #4]
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084d4:	4629      	mov	r1, r5
 80084d6:	024b      	lsls	r3, r1, #9
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	4604      	mov	r4, r0
 80084de:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80084e2:	4601      	mov	r1, r0
 80084e4:	024a      	lsls	r2, r1, #9
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ec:	2200      	movs	r2, #0
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	617a      	str	r2, [r7, #20]
 80084f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f4:	2200      	movs	r2, #0
 80084f6:	60bb      	str	r3, [r7, #8]
 80084f8:	60fa      	str	r2, [r7, #12]
 80084fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80084fe:	4622      	mov	r2, r4
 8008500:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8008504:	4645      	mov	r5, r8
 8008506:	fb05 f202 	mul.w	r2, r5, r2
 800850a:	464e      	mov	r6, r9
 800850c:	4625      	mov	r5, r4
 800850e:	461c      	mov	r4, r3
 8008510:	4623      	mov	r3, r4
 8008512:	fb03 f306 	mul.w	r3, r3, r6
 8008516:	4413      	add	r3, r2
 8008518:	4622      	mov	r2, r4
 800851a:	4644      	mov	r4, r8
 800851c:	fba2 2404 	umull	r2, r4, r2, r4
 8008520:	627c      	str	r4, [r7, #36]	; 0x24
 8008522:	623a      	str	r2, [r7, #32]
 8008524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008526:	4413      	add	r3, r2
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
 800852a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800852e:	f7f8 fb7b 	bl	8000c28 <__aeabi_uldivmod>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4613      	mov	r3, r2
 8008538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853a:	e007      	b.n	800854c <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800853c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853e:	4a14      	ldr	r2, [pc, #80]	; (8008590 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008540:	fb03 f202 	mul.w	r2, r3, r2
 8008544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008546:	fbb2 f3f3 	udiv	r3, r2, r3
 800854a:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800854c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8008550:	461a      	mov	r2, r3
 8008552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008554:	4293      	cmp	r3, r2
 8008556:	d108      	bne.n	800856a <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8008558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855a:	085b      	lsrs	r3, r3, #1
 800855c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800855e:	e004      	b.n	800856a <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008562:	4a0c      	ldr	r2, [pc, #48]	; (8008594 <HAL_RCC_GetSysClockFreq+0x220>)
 8008564:	fb02 f303 	mul.w	r3, r2, r3
 8008568:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 800856a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856c:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800856e:	e002      	b.n	8008576 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008572:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8008574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8008578:	4618      	mov	r0, r3
 800857a:	3774      	adds	r7, #116	; 0x74
 800857c:	46bd      	mov	sp, r7
 800857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008582:	bf00      	nop
 8008584:	080197b8 	.word	0x080197b8
 8008588:	080197c8 	.word	0x080197c8
 800858c:	40021000 	.word	0x40021000
 8008590:	007a1200 	.word	0x007a1200
 8008594:	003d0900 	.word	0x003d0900

08008598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800859e:	681b      	ldr	r3, [r3, #0]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	2000009c 	.word	0x2000009c

080085ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085b0:	f7ff fff2 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085b4:	4602      	mov	r2, r0
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	4903      	ldr	r1, [pc, #12]	; (80085d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085c2:	5ccb      	ldrb	r3, [r1, r3]
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40021000 	.word	0x40021000
 80085d0:	08019a98 	.word	0x08019a98

080085d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085d8:	f7ff ffde 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085dc:	4602      	mov	r2, r0
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	0adb      	lsrs	r3, r3, #11
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	4903      	ldr	r1, [pc, #12]	; (80085f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ea:	5ccb      	ldrb	r3, [r1, r3]
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40021000 	.word	0x40021000
 80085f8:	08019a98 	.word	0x08019a98

080085fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <RCC_Delay+0x34>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <RCC_Delay+0x38>)
 800860a:	fba2 2303 	umull	r2, r3, r2, r3
 800860e:	0a5b      	lsrs	r3, r3, #9
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	fb02 f303 	mul.w	r3, r2, r3
 8008616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008618:	bf00      	nop
  }
  while (Delay --);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	60fa      	str	r2, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f9      	bne.n	8008618 <RCC_Delay+0x1c>
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr
 8008630:	2000009c 	.word	0x2000009c
 8008634:	10624dd3 	.word	0x10624dd3

08008638 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d07d      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8008658:	2300      	movs	r3, #0
 800865a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800865c:	4b8b      	ldr	r3, [pc, #556]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10d      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008668:	4b88      	ldr	r3, [pc, #544]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	4a87      	ldr	r2, [pc, #540]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800866e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008672:	61d3      	str	r3, [r2, #28]
 8008674:	4b85      	ldr	r3, [pc, #532]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008680:	2301      	movs	r3, #1
 8008682:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008684:	4b82      	ldr	r3, [pc, #520]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d118      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008690:	4b7f      	ldr	r3, [pc, #508]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a7e      	ldr	r2, [pc, #504]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800869a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800869c:	f7fb fd9c 	bl	80041d8 <HAL_GetTick>
 80086a0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a2:	e008      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086a4:	f7fb fd98 	bl	80041d8 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b64      	cmp	r3, #100	; 0x64
 80086b0:	d901      	bls.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e0e5      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086b6:	4b76      	ldr	r3, [pc, #472]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f0      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086c2:	4b72      	ldr	r3, [pc, #456]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ca:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d02e      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d027      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086e0:	4b6a      	ldr	r3, [pc, #424]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086ea:	4b6a      	ldr	r3, [pc, #424]	; (8008894 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086f0:	4b68      	ldr	r3, [pc, #416]	; (8008894 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80086f6:	4a65      	ldr	r2, [pc, #404]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d014      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008706:	f7fb fd67 	bl	80041d8 <HAL_GetTick>
 800870a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800870c:	e00a      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800870e:	f7fb fd63 	bl	80041d8 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	f241 3288 	movw	r2, #5000	; 0x1388
 800871c:	4293      	cmp	r3, r2
 800871e:	d901      	bls.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e0ae      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008724:	4b59      	ldr	r3, [pc, #356]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0ee      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008730:	4b56      	ldr	r3, [pc, #344]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	4953      	ldr	r1, [pc, #332]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800873e:	4313      	orrs	r3, r2
 8008740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008742:	7efb      	ldrb	r3, [r7, #27]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d105      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008748:	4b50      	ldr	r3, [pc, #320]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	4a4f      	ldr	r2, [pc, #316]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800874e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008760:	4b4a      	ldr	r3, [pc, #296]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4947      	ldr	r1, [pc, #284]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800876e:	4313      	orrs	r3, r2
 8008770:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800877e:	4b43      	ldr	r3, [pc, #268]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	4940      	ldr	r1, [pc, #256]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800878c:	4313      	orrs	r3, r2
 800878e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d008      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800879c:	4b3b      	ldr	r3, [pc, #236]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	4938      	ldr	r1, [pc, #224]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80087ae:	4b37      	ldr	r3, [pc, #220]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d105      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80087ba:	4b34      	ldr	r3, [pc, #208]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80087c6:	2301      	movs	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d148      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80087d0:	4b2e      	ldr	r3, [pc, #184]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d138      	bne.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80087dc:	4b2b      	ldr	r3, [pc, #172]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d009      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80087e8:	4b28      	ldr	r3, [pc, #160]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d001      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e042      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80087fc:	4b23      	ldr	r3, [pc, #140]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	4920      	ldr	r1, [pc, #128]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800880a:	4313      	orrs	r3, r2
 800880c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800880e:	4b1f      	ldr	r3, [pc, #124]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	491c      	ldr	r1, [pc, #112]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800881c:	4313      	orrs	r3, r2
 800881e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8008820:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008822:	2201      	movs	r2, #1
 8008824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008826:	f7fb fcd7 	bl	80041d8 <HAL_GetTick>
 800882a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800882c:	e008      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800882e:	f7fb fcd3 	bl	80041d8 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b64      	cmp	r3, #100	; 0x64
 800883a:	d901      	bls.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e020      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008840:	4b12      	ldr	r3, [pc, #72]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0f0      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800884c:	e009      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	429a      	cmp	r2, r3
 800885c:	d001      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e00f      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b00      	cmp	r3, #0
 800886c:	d008      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	4904      	ldr	r1, [pc, #16]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800887c:	4313      	orrs	r3, r2
 800887e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	40021000 	.word	0x40021000
 8008890:	40007000 	.word	0x40007000
 8008894:	42420440 	.word	0x42420440
 8008898:	42420070 	.word	0x42420070

0800889c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b093      	sub	sp, #76	; 0x4c
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80088a4:	4ba8      	ldr	r3, [pc, #672]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80088a6:	f107 0418 	add.w	r4, r7, #24
 80088aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80088ac:	c407      	stmia	r4!, {r0, r1, r2}
 80088ae:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80088b0:	4ba6      	ldr	r3, [pc, #664]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80088b2:	f107 0408 	add.w	r4, r7, #8
 80088b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80088b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c0:	2300      	movs	r3, #0
 80088c2:	647b      	str	r3, [r7, #68]	; 0x44
 80088c4:	2300      	movs	r3, #0
 80088c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	637b      	str	r3, [r7, #52]	; 0x34
 80088cc:	2300      	movs	r3, #0
 80088ce:	633b      	str	r3, [r7, #48]	; 0x30
 80088d0:	2300      	movs	r3, #0
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088d8:	2300      	movs	r3, #0
 80088da:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3b01      	subs	r3, #1
 80088e0:	2b0f      	cmp	r3, #15
 80088e2:	f200 8122 	bhi.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008aa9 	.word	0x08008aa9
 80088f0:	08008b0f 	.word	0x08008b0f
 80088f4:	08008b2b 	.word	0x08008b2b
 80088f8:	08008a07 	.word	0x08008a07
 80088fc:	08008b2b 	.word	0x08008b2b
 8008900:	08008b2b 	.word	0x08008b2b
 8008904:	08008b2b 	.word	0x08008b2b
 8008908:	08008a59 	.word	0x08008a59
 800890c:	08008b2b 	.word	0x08008b2b
 8008910:	08008b2b 	.word	0x08008b2b
 8008914:	08008b2b 	.word	0x08008b2b
 8008918:	08008b2b 	.word	0x08008b2b
 800891c:	08008b2b 	.word	0x08008b2b
 8008920:	08008b2b 	.word	0x08008b2b
 8008924:	08008b2b 	.word	0x08008b2b
 8008928:	0800892d 	.word	0x0800892d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800892c:	4b88      	ldr	r3, [pc, #544]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008932:	4b87      	ldr	r3, [pc, #540]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80f7 	beq.w	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	0c9b      	lsrs	r3, r3, #18
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	3348      	adds	r3, #72	; 0x48
 800894a:	443b      	add	r3, r7
 800894c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8008950:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d03d      	beq.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800895c:	4b7c      	ldr	r3, [pc, #496]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	3348      	adds	r3, #72	; 0x48
 8008966:	443b      	add	r3, r7
 8008968:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800896c:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800896e:	4b78      	ldr	r3, [pc, #480]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01c      	beq.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800897a:	4b75      	ldr	r3, [pc, #468]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	091b      	lsrs	r3, r3, #4
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	3301      	adds	r3, #1
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008988:	4b71      	ldr	r3, [pc, #452]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	3302      	adds	r3, #2
 8008994:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8008996:	4a6f      	ldr	r2, [pc, #444]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	fbb2 f3f3 	udiv	r3, r2, r3
 800899e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a0:	fb03 f202 	mul.w	r2, r3, r2
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
 80089b0:	647b      	str	r3, [r7, #68]	; 0x44
 80089b2:	e007      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80089b4:	4a67      	ldr	r2, [pc, #412]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80089b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	fb02 f303 	mul.w	r3, r2, r3
 80089c2:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80089c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80089c8:	461a      	mov	r2, r3
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d108      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            pllclk = pllclk / 2;
 80089d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d2:	085b      	lsrs	r3, r3, #1
 80089d4:	647b      	str	r3, [r7, #68]	; 0x44
 80089d6:	e004      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	4a5f      	ldr	r2, [pc, #380]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80089dc:	fb02 f303 	mul.w	r3, r2, r3
 80089e0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80089e2:	4b5b      	ldr	r3, [pc, #364]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ee:	d102      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80089f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f2:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80089f4:	e09b      	b.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
          frequency = (2 * pllclk) / 3;
 80089f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	4a58      	ldr	r2, [pc, #352]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80089fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008a04:	e093      	b.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8008a06:	4b52      	ldr	r3, [pc, #328]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d103      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008a12:	f7ff fcaf 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 8008a16:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008a18:	e08b      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008a1a:	4b4d      	ldr	r3, [pc, #308]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8085 	beq.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008a28:	4b49      	ldr	r3, [pc, #292]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	091b      	lsrs	r3, r3, #4
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	3301      	adds	r3, #1
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008a36:	4b46      	ldr	r3, [pc, #280]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	0b1b      	lsrs	r3, r3, #12
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	3302      	adds	r3, #2
 8008a42:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008a44:	4a43      	ldr	r2, [pc, #268]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4e:	fb02 f303 	mul.w	r3, r2, r3
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008a56:	e06c      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8008a58:	4b3d      	ldr	r3, [pc, #244]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008a64:	f7ff fc86 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 8008a68:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008a6a:	e064      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008a6c:	4b38      	ldr	r3, [pc, #224]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d05e      	beq.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008a78:	4b35      	ldr	r3, [pc, #212]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	3301      	adds	r3, #1
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008a86:	4b32      	ldr	r3, [pc, #200]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	0b1b      	lsrs	r3, r3, #12
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	3302      	adds	r3, #2
 8008a92:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008a94:	4a2f      	ldr	r2, [pc, #188]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9e:	fb02 f303 	mul.w	r3, r2, r3
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008aa6:	e046      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008aa8:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab8:	d108      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSE_VALUE;
 8008ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aca:	e01f      	b.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad6:	d109      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      {
        frequency = LSI_VALUE;
 8008ae4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aea:	e00f      	b.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008af6:	d120      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8008af8:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01a      	beq.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      {
        frequency = HSE_VALUE / 128U;
 8008b04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b08:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008b0a:	e016      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8008b0c:	e015      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008b0e:	f7ff fd61 	bl	80085d4 <HAL_RCC_GetPCLK2Freq>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	0b9b      	lsrs	r3, r3, #14
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	3301      	adds	r3, #1
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b26:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008b28:	e008      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    default:
    {
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8008b2e:	bf00      	nop
 8008b30:	e004      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8008b32:	bf00      	nop
 8008b34:	e002      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8008b36:	bf00      	nop
 8008b38:	e000      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8008b3a:	bf00      	nop
    }
  }
  return (frequency);
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	374c      	adds	r7, #76	; 0x4c
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd90      	pop	{r4, r7, pc}
 8008b46:	bf00      	nop
 8008b48:	080197d8 	.word	0x080197d8
 8008b4c:	080197e8 	.word	0x080197e8
 8008b50:	40021000 	.word	0x40021000
 8008b54:	007a1200 	.word	0x007a1200
 8008b58:	003d0900 	.word	0x003d0900
 8008b5c:	aaaaaaab 	.word	0xaaaaaaab

08008b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e041      	b.n	8008bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fb f964 	bl	8003e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	f000 fc38 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d001      	beq.n	8008c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e03f      	b.n	8008c98 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0201 	orr.w	r2, r2, #1
 8008c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1b      	ldr	r2, [pc, #108]	; (8008ca4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d013      	beq.n	8008c62 <HAL_TIM_Base_Start_IT+0x62>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c42:	d00e      	beq.n	8008c62 <HAL_TIM_Base_Start_IT+0x62>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a17      	ldr	r2, [pc, #92]	; (8008ca8 <HAL_TIM_Base_Start_IT+0xa8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d009      	beq.n	8008c62 <HAL_TIM_Base_Start_IT+0x62>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a16      	ldr	r2, [pc, #88]	; (8008cac <HAL_TIM_Base_Start_IT+0xac>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d004      	beq.n	8008c62 <HAL_TIM_Base_Start_IT+0x62>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a14      	ldr	r2, [pc, #80]	; (8008cb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d111      	bne.n	8008c86 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b06      	cmp	r3, #6
 8008c72:	d010      	beq.n	8008c96 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0201 	orr.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c84:	e007      	b.n	8008c96 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 0201 	orr.w	r2, r2, #1
 8008c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	40012c00 	.word	0x40012c00
 8008ca8:	40000400 	.word	0x40000400
 8008cac:	40000800 	.word	0x40000800
 8008cb0:	40000c00 	.word	0x40000c00

08008cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e041      	b.n	8008d4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f839 	bl	8008d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f000 fb8e 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <HAL_TIM_PWM_Start+0x24>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	bf14      	ite	ne
 8008d80:	2301      	movne	r3, #1
 8008d82:	2300      	moveq	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	e022      	b.n	8008dce <HAL_TIM_PWM_Start+0x6a>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d109      	bne.n	8008da2 <HAL_TIM_PWM_Start+0x3e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	bf14      	ite	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	2300      	moveq	r3, #0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	e015      	b.n	8008dce <HAL_TIM_PWM_Start+0x6a>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d109      	bne.n	8008dbc <HAL_TIM_PWM_Start+0x58>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	e008      	b.n	8008dce <HAL_TIM_PWM_Start+0x6a>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	bf14      	ite	ne
 8008dc8:	2301      	movne	r3, #1
 8008dca:	2300      	moveq	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e063      	b.n	8008e9e <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <HAL_TIM_PWM_Start+0x82>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de4:	e013      	b.n	8008e0e <HAL_TIM_PWM_Start+0xaa>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d104      	bne.n	8008df6 <HAL_TIM_PWM_Start+0x92>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df4:	e00b      	b.n	8008e0e <HAL_TIM_PWM_Start+0xaa>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d104      	bne.n	8008e06 <HAL_TIM_PWM_Start+0xa2>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e04:	e003      	b.n	8008e0e <HAL_TIM_PWM_Start+0xaa>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2201      	movs	r2, #1
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fd86 	bl	8009928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a21      	ldr	r2, [pc, #132]	; (8008ea8 <HAL_TIM_PWM_Start+0x144>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d107      	bne.n	8008e36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a1b      	ldr	r2, [pc, #108]	; (8008ea8 <HAL_TIM_PWM_Start+0x144>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d013      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x104>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e48:	d00e      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x104>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <HAL_TIM_PWM_Start+0x148>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d009      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x104>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a15      	ldr	r2, [pc, #84]	; (8008eb0 <HAL_TIM_PWM_Start+0x14c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x104>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a14      	ldr	r2, [pc, #80]	; (8008eb4 <HAL_TIM_PWM_Start+0x150>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d111      	bne.n	8008e8c <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b06      	cmp	r3, #6
 8008e78:	d010      	beq.n	8008e9c <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0201 	orr.w	r2, r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8a:	e007      	b.n	8008e9c <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40012c00 	.word	0x40012c00
 8008eac:	40000400 	.word	0x40000400
 8008eb0:	40000800 	.word	0x40000800
 8008eb4:	40000c00 	.word	0x40000c00

08008eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d122      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d11b      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0202 	mvn.w	r2, #2
 8008ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa6f 	bl	80093de <HAL_TIM_IC_CaptureCallback>
 8008f00:	e005      	b.n	8008f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa62 	bl	80093cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa71 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d122      	bne.n	8008f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d11b      	bne.n	8008f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f06f 0204 	mvn.w	r2, #4
 8008f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa45 	bl	80093de <HAL_TIM_IC_CaptureCallback>
 8008f54:	e005      	b.n	8008f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa38 	bl	80093cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa47 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d122      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d11b      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f06f 0208 	mvn.w	r2, #8
 8008f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2204      	movs	r2, #4
 8008f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fa1b 	bl	80093de <HAL_TIM_IC_CaptureCallback>
 8008fa8:	e005      	b.n	8008fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa0e 	bl	80093cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fa1d 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0310 	and.w	r3, r3, #16
 8008fc6:	2b10      	cmp	r3, #16
 8008fc8:	d122      	bne.n	8009010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d11b      	bne.n	8009010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f06f 0210 	mvn.w	r2, #16
 8008fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9f1 	bl	80093de <HAL_TIM_IC_CaptureCallback>
 8008ffc:	e005      	b.n	800900a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9e4 	bl	80093cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f9f3 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b01      	cmp	r3, #1
 800901c:	d10e      	bne.n	800903c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d107      	bne.n	800903c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0201 	mvn.w	r2, #1
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7f9 fc98 	bl	800296c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009046:	2b80      	cmp	r3, #128	; 0x80
 8009048:	d10e      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009054:	2b80      	cmp	r3, #128	; 0x80
 8009056:	d107      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fcf3 	bl	8009a4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d10e      	bne.n	8009094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f9b7 	bl	8009402 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d10e      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d107      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0220 	mvn.w	r2, #32
 80090b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fcbe 	bl	8009a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80090de:	2302      	movs	r3, #2
 80090e0:	e0ac      	b.n	800923c <HAL_TIM_PWM_ConfigChannel+0x174>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b0c      	cmp	r3, #12
 80090ee:	f200 809f 	bhi.w	8009230 <HAL_TIM_PWM_ConfigChannel+0x168>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	0800912d 	.word	0x0800912d
 80090fc:	08009231 	.word	0x08009231
 8009100:	08009231 	.word	0x08009231
 8009104:	08009231 	.word	0x08009231
 8009108:	0800916d 	.word	0x0800916d
 800910c:	08009231 	.word	0x08009231
 8009110:	08009231 	.word	0x08009231
 8009114:	08009231 	.word	0x08009231
 8009118:	080091af 	.word	0x080091af
 800911c:	08009231 	.word	0x08009231
 8009120:	08009231 	.word	0x08009231
 8009124:	08009231 	.word	0x08009231
 8009128:	080091ef 	.word	0x080091ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f9da 	bl	80094ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0208 	orr.w	r2, r2, #8
 8009146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699a      	ldr	r2, [r3, #24]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0204 	bic.w	r2, r2, #4
 8009156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6999      	ldr	r1, [r3, #24]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	619a      	str	r2, [r3, #24]
      break;
 800916a:	e062      	b.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fa20 	bl	80095b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	699a      	ldr	r2, [r3, #24]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6999      	ldr	r1, [r3, #24]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	021a      	lsls	r2, r3, #8
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	619a      	str	r2, [r3, #24]
      break;
 80091ac:	e041      	b.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fa69 	bl	800968c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	69da      	ldr	r2, [r3, #28]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0208 	orr.w	r2, r2, #8
 80091c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69da      	ldr	r2, [r3, #28]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 0204 	bic.w	r2, r2, #4
 80091d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69d9      	ldr	r1, [r3, #28]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	691a      	ldr	r2, [r3, #16]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	61da      	str	r2, [r3, #28]
      break;
 80091ec:	e021      	b.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fab3 	bl	8009760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69da      	ldr	r2, [r3, #28]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69da      	ldr	r2, [r3, #28]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69d9      	ldr	r1, [r3, #28]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	021a      	lsls	r2, r3, #8
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	61da      	str	r2, [r3, #28]
      break;
 800922e:	e000      	b.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009230:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_TIM_ConfigClockSource+0x18>
 8009258:	2302      	movs	r3, #2
 800925a:	e0b3      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x180>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800927a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009282:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009294:	d03e      	beq.n	8009314 <HAL_TIM_ConfigClockSource+0xd0>
 8009296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929a:	f200 8087 	bhi.w	80093ac <HAL_TIM_ConfigClockSource+0x168>
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a2:	f000 8085 	beq.w	80093b0 <HAL_TIM_ConfigClockSource+0x16c>
 80092a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092aa:	d87f      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092ac:	2b70      	cmp	r3, #112	; 0x70
 80092ae:	d01a      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0xa2>
 80092b0:	2b70      	cmp	r3, #112	; 0x70
 80092b2:	d87b      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092b4:	2b60      	cmp	r3, #96	; 0x60
 80092b6:	d050      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x116>
 80092b8:	2b60      	cmp	r3, #96	; 0x60
 80092ba:	d877      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092bc:	2b50      	cmp	r3, #80	; 0x50
 80092be:	d03c      	beq.n	800933a <HAL_TIM_ConfigClockSource+0xf6>
 80092c0:	2b50      	cmp	r3, #80	; 0x50
 80092c2:	d873      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	d058      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x136>
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d86f      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092cc:	2b30      	cmp	r3, #48	; 0x30
 80092ce:	d064      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x156>
 80092d0:	2b30      	cmp	r3, #48	; 0x30
 80092d2:	d86b      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d060      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x156>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d867      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d05c      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x156>
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d05a      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80092e4:	e062      	b.n	80093ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6899      	ldr	r1, [r3, #8]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f000 faf8 	bl	80098ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009308:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	609a      	str	r2, [r3, #8]
      break;
 8009312:	e04e      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6899      	ldr	r1, [r3, #8]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f000 fae1 	bl	80098ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009336:	609a      	str	r2, [r3, #8]
      break;
 8009338:	e03b      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6859      	ldr	r1, [r3, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	461a      	mov	r2, r3
 8009348:	f000 fa58 	bl	80097fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2150      	movs	r1, #80	; 0x50
 8009352:	4618      	mov	r0, r3
 8009354:	f000 faaf 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8009358:	e02b      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	461a      	mov	r2, r3
 8009368:	f000 fa76 	bl	8009858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2160      	movs	r1, #96	; 0x60
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fa9f 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8009378:	e01b      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	461a      	mov	r2, r3
 8009388:	f000 fa38 	bl	80097fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2140      	movs	r1, #64	; 0x40
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fa8f 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8009398:	e00b      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f000 fa86 	bl	80098b6 <TIM_ITRx_SetConfig>
        break;
 80093aa:	e002      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80093ac:	bf00      	nop
 80093ae:	e000      	b.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80093b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	bc80      	pop	{r7}
 80093dc:	4770      	bx	lr

080093de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr

080093f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr

08009402 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr

08009414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a2d      	ldr	r2, [pc, #180]	; (80094dc <TIM_Base_SetConfig+0xc8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00f      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009432:	d00b      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a2a      	ldr	r2, [pc, #168]	; (80094e0 <TIM_Base_SetConfig+0xcc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d007      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a29      	ldr	r2, [pc, #164]	; (80094e4 <TIM_Base_SetConfig+0xd0>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_Base_SetConfig+0x38>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a28      	ldr	r2, [pc, #160]	; (80094e8 <TIM_Base_SetConfig+0xd4>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d108      	bne.n	800945e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a1e      	ldr	r2, [pc, #120]	; (80094dc <TIM_Base_SetConfig+0xc8>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d00f      	beq.n	8009486 <TIM_Base_SetConfig+0x72>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946c:	d00b      	beq.n	8009486 <TIM_Base_SetConfig+0x72>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <TIM_Base_SetConfig+0xcc>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d007      	beq.n	8009486 <TIM_Base_SetConfig+0x72>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1a      	ldr	r2, [pc, #104]	; (80094e4 <TIM_Base_SetConfig+0xd0>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d003      	beq.n	8009486 <TIM_Base_SetConfig+0x72>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a19      	ldr	r2, [pc, #100]	; (80094e8 <TIM_Base_SetConfig+0xd4>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d108      	bne.n	8009498 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800948c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a07      	ldr	r2, [pc, #28]	; (80094dc <TIM_Base_SetConfig+0xc8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d103      	bne.n	80094cc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	615a      	str	r2, [r3, #20]
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr
 80094dc:	40012c00 	.word	0x40012c00
 80094e0:	40000400 	.word	0x40000400
 80094e4:	40000800 	.word	0x40000800
 80094e8:	40000c00 	.word	0x40000c00

080094ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f023 0201 	bic.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 0302 	bic.w	r3, r3, #2
 8009534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a1c      	ldr	r2, [pc, #112]	; (80095b4 <TIM_OC1_SetConfig+0xc8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d10c      	bne.n	8009562 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f023 0308 	bic.w	r3, r3, #8
 800954e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f023 0304 	bic.w	r3, r3, #4
 8009560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <TIM_OC1_SetConfig+0xc8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d111      	bne.n	800958e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	4313      	orrs	r3, r2
 8009582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	621a      	str	r2, [r3, #32]
}
 80095a8:	bf00      	nop
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bc80      	pop	{r7}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40012c00 	.word	0x40012c00

080095b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f023 0210 	bic.w	r2, r3, #16
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f023 0320 	bic.w	r3, r3, #32
 8009602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a1d      	ldr	r2, [pc, #116]	; (8009688 <TIM_OC2_SetConfig+0xd0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d10d      	bne.n	8009634 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a14      	ldr	r2, [pc, #80]	; (8009688 <TIM_OC2_SetConfig+0xd0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d113      	bne.n	8009664 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800964a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr
 8009688:	40012c00 	.word	0x40012c00

0800968c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a1d      	ldr	r2, [pc, #116]	; (800975c <TIM_OC3_SetConfig+0xd0>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d10d      	bne.n	8009706 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a14      	ldr	r2, [pc, #80]	; (800975c <TIM_OC3_SetConfig+0xd0>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d113      	bne.n	8009736 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800971c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	621a      	str	r2, [r3, #32]
}
 8009750:	bf00      	nop
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40012c00 	.word	0x40012c00

08009760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800978e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	031b      	lsls	r3, r3, #12
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <TIM_OC4_SetConfig+0x98>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d109      	bne.n	80097d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	019b      	lsls	r3, r3, #6
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bc80      	pop	{r7}
 80097f6:	4770      	bx	lr
 80097f8:	40012c00 	.word	0x40012c00

080097fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f023 0201 	bic.w	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 030a 	bic.w	r3, r3, #10
 8009838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	f023 0210 	bic.w	r2, r3, #16
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	031b      	lsls	r3, r3, #12
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4313      	orrs	r3, r2
 800989e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	621a      	str	r2, [r3, #32]
}
 80098ac:	bf00      	nop
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bc80      	pop	{r7}
 80098b4:	4770      	bx	lr

080098b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	f043 0307 	orr.w	r3, r3, #7
 80098d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	609a      	str	r2, [r3, #8]
}
 80098e0:	bf00      	nop
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bc80      	pop	{r7}
 80098e8:	4770      	bx	lr

080098ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b087      	sub	sp, #28
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	60b9      	str	r1, [r7, #8]
 80098f4:	607a      	str	r2, [r7, #4]
 80098f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	021a      	lsls	r2, r3, #8
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	431a      	orrs	r2, r3
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4313      	orrs	r3, r2
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	609a      	str	r2, [r3, #8]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr

08009928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2201      	movs	r2, #1
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a1a      	ldr	r2, [r3, #32]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	43db      	mvns	r3, r3
 800994a:	401a      	ands	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6a1a      	ldr	r2, [r3, #32]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f003 031f 	and.w	r3, r3, #31
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	fa01 f303 	lsl.w	r3, r1, r3
 8009960:	431a      	orrs	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e04b      	b.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a19      	ldr	r2, [pc, #100]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d013      	beq.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d4:	d00e      	beq.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d009      	beq.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d004      	beq.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a12      	ldr	r2, [pc, #72]	; (8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d10c      	bne.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	40012c00 	.word	0x40012c00
 8009a30:	40000400 	.word	0x40000400
 8009a34:	40000800 	.word	0x40000800
 8009a38:	40000c00 	.word	0x40000c00

08009a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr

08009a4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bc80      	pop	{r7}
 8009a5e:	4770      	bx	lr

08009a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a60:	b084      	sub	sp, #16
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	f107 001c 	add.w	r0, r7, #28
 8009a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 f90a 	bl	800ac98 <USB_CoreReset>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009aa0:	b004      	add	sp, #16
 8009aa2:	4770      	bx	lr

08009aa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d165      	bne.n	8009b84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4a3e      	ldr	r2, [pc, #248]	; (8009bb4 <USB_SetTurnaroundTime+0x110>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d906      	bls.n	8009ace <USB_SetTurnaroundTime+0x2a>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4a3d      	ldr	r2, [pc, #244]	; (8009bb8 <USB_SetTurnaroundTime+0x114>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d202      	bcs.n	8009ace <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009ac8:	230f      	movs	r3, #15
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	e05c      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4a39      	ldr	r2, [pc, #228]	; (8009bb8 <USB_SetTurnaroundTime+0x114>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d306      	bcc.n	8009ae4 <USB_SetTurnaroundTime+0x40>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4a38      	ldr	r2, [pc, #224]	; (8009bbc <USB_SetTurnaroundTime+0x118>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d202      	bcs.n	8009ae4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ade:	230e      	movs	r3, #14
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	e051      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4a35      	ldr	r2, [pc, #212]	; (8009bbc <USB_SetTurnaroundTime+0x118>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d306      	bcc.n	8009afa <USB_SetTurnaroundTime+0x56>
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4a34      	ldr	r2, [pc, #208]	; (8009bc0 <USB_SetTurnaroundTime+0x11c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d202      	bcs.n	8009afa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009af4:	230d      	movs	r3, #13
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e046      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4a30      	ldr	r2, [pc, #192]	; (8009bc0 <USB_SetTurnaroundTime+0x11c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d306      	bcc.n	8009b10 <USB_SetTurnaroundTime+0x6c>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	4a2f      	ldr	r2, [pc, #188]	; (8009bc4 <USB_SetTurnaroundTime+0x120>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d802      	bhi.n	8009b10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	e03b      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a2c      	ldr	r2, [pc, #176]	; (8009bc4 <USB_SetTurnaroundTime+0x120>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d906      	bls.n	8009b26 <USB_SetTurnaroundTime+0x82>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4a2b      	ldr	r2, [pc, #172]	; (8009bc8 <USB_SetTurnaroundTime+0x124>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d802      	bhi.n	8009b26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b20:	230b      	movs	r3, #11
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	e030      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4a27      	ldr	r2, [pc, #156]	; (8009bc8 <USB_SetTurnaroundTime+0x124>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d906      	bls.n	8009b3c <USB_SetTurnaroundTime+0x98>
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	4a26      	ldr	r2, [pc, #152]	; (8009bcc <USB_SetTurnaroundTime+0x128>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d802      	bhi.n	8009b3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009b36:	230a      	movs	r3, #10
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e025      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4a23      	ldr	r2, [pc, #140]	; (8009bcc <USB_SetTurnaroundTime+0x128>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d906      	bls.n	8009b52 <USB_SetTurnaroundTime+0xae>
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4a22      	ldr	r2, [pc, #136]	; (8009bd0 <USB_SetTurnaroundTime+0x12c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d202      	bcs.n	8009b52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009b4c:	2309      	movs	r3, #9
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	e01a      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4a1e      	ldr	r2, [pc, #120]	; (8009bd0 <USB_SetTurnaroundTime+0x12c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d306      	bcc.n	8009b68 <USB_SetTurnaroundTime+0xc4>
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	4a1d      	ldr	r2, [pc, #116]	; (8009bd4 <USB_SetTurnaroundTime+0x130>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d802      	bhi.n	8009b68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009b62:	2308      	movs	r3, #8
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e00f      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4a1a      	ldr	r2, [pc, #104]	; (8009bd4 <USB_SetTurnaroundTime+0x130>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d906      	bls.n	8009b7e <USB_SetTurnaroundTime+0xda>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4a19      	ldr	r2, [pc, #100]	; (8009bd8 <USB_SetTurnaroundTime+0x134>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d202      	bcs.n	8009b7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b78:	2307      	movs	r3, #7
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	e004      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b7e:	2306      	movs	r3, #6
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	e001      	b.n	8009b88 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b84:	2309      	movs	r3, #9
 8009b86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	029b      	lsls	r3, r3, #10
 8009b9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bc80      	pop	{r7}
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	00d8acbf 	.word	0x00d8acbf
 8009bb8:	00e4e1c0 	.word	0x00e4e1c0
 8009bbc:	00f42400 	.word	0x00f42400
 8009bc0:	01067380 	.word	0x01067380
 8009bc4:	011a499f 	.word	0x011a499f
 8009bc8:	01312cff 	.word	0x01312cff
 8009bcc:	014ca43f 	.word	0x014ca43f
 8009bd0:	016e3600 	.word	0x016e3600
 8009bd4:	01a6ab1f 	.word	0x01a6ab1f
 8009bd8:	01e84800 	.word	0x01e84800

08009bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f043 0201 	orr.w	r2, r3, #1
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr

08009bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f023 0201 	bic.w	r2, r3, #1
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr

08009c1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d115      	bne.n	8009c6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	f7fa face 	bl	80041ec <HAL_Delay>
      ms++;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3301      	adds	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 ffa6 	bl	800aba8 <USB_GetMode>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d01e      	beq.n	8009ca0 <USB_SetCurrentMode+0x84>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b31      	cmp	r3, #49	; 0x31
 8009c66:	d9f0      	bls.n	8009c4a <USB_SetCurrentMode+0x2e>
 8009c68:	e01a      	b.n	8009ca0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d115      	bne.n	8009c9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	f7fa fab5 	bl	80041ec <HAL_Delay>
      ms++;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3301      	adds	r3, #1
 8009c86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 ff8d 	bl	800aba8 <USB_GetMode>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <USB_SetCurrentMode+0x84>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b31      	cmp	r3, #49	; 0x31
 8009c98:	d9f0      	bls.n	8009c7c <USB_SetCurrentMode+0x60>
 8009c9a:	e001      	b.n	8009ca0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e005      	b.n	8009cac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b32      	cmp	r3, #50	; 0x32
 8009ca4:	d101      	bne.n	8009caa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e000      	b.n	8009cac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b086      	sub	sp, #24
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cce:	2300      	movs	r3, #0
 8009cd0:	613b      	str	r3, [r7, #16]
 8009cd2:	e009      	b.n	8009ce8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	3340      	adds	r3, #64	; 0x40
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	2200      	movs	r2, #0
 8009ce0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b0e      	cmp	r3, #14
 8009cec:	d9f2      	bls.n	8009cd4 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d00:	461a      	mov	r2, r3
 8009d02:	2300      	movs	r3, #0
 8009d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d14:	461a      	mov	r2, r3
 8009d16:	680b      	ldr	r3, [r1, #0]
 8009d18:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d1a:	2103      	movs	r1, #3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f939 	bl	8009f94 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d22:	2110      	movs	r1, #16
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f8f1 	bl	8009f0c <USB_FlushTxFifo>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <USB_DevInit+0x80>
  {
    ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f90d 	bl	8009f54 <USB_FlushRxFifo>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <USB_DevInit+0x90>
  {
    ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d56:	461a      	mov	r2, r3
 8009d58:	2300      	movs	r3, #0
 8009d5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d62:	461a      	mov	r2, r3
 8009d64:	2300      	movs	r3, #0
 8009d66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	e043      	b.n	8009df6 <USB_DevInit+0x142>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d84:	d118      	bne.n	8009db8 <USB_DevInit+0x104>
    {
      if (i == 0U)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <USB_DevInit+0xee>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	e013      	b.n	8009dca <USB_DevInit+0x116>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dae:	461a      	mov	r2, r3
 8009db0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	e008      	b.n	8009dca <USB_DevInit+0x116>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	461a      	mov	r2, r3
 8009dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009dee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	3301      	adds	r3, #1
 8009df4:	613b      	str	r3, [r7, #16]
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d3b7      	bcc.n	8009d6e <USB_DevInit+0xba>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dfe:	2300      	movs	r3, #0
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	e043      	b.n	8009e8c <USB_DevInit+0x1d8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e1a:	d118      	bne.n	8009e4e <USB_DevInit+0x19a>
    {
      if (i == 0U)
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <USB_DevInit+0x184>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	e013      	b.n	8009e60 <USB_DevInit+0x1ac>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e44:	461a      	mov	r2, r3
 8009e46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	e008      	b.n	8009e60 <USB_DevInit+0x1ac>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d3b7      	bcc.n	8009e04 <USB_DevInit+0x150>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ea6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009eb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f043 0210 	orr.w	r2, r3, #16
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <USB_DevInit+0x254>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d005      	beq.n	8009ee0 <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	f043 0208 	orr.w	r2, r3, #8
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d107      	bne.n	8009ef6 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eee:	f043 0304 	orr.w	r3, r3, #4
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f02:	b004      	add	sp, #16
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	803c3800 	.word	0x803c3800

08009f0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	019b      	lsls	r3, r3, #6
 8009f1e:	f043 0220 	orr.w	r2, r3, #32
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a08      	ldr	r2, [pc, #32]	; (8009f50 <USB_FlushTxFifo+0x44>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d901      	bls.n	8009f38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e006      	b.n	8009f46 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	d0f0      	beq.n	8009f26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bc80      	pop	{r7}
 8009f4e:	4770      	bx	lr
 8009f50:	00030d40 	.word	0x00030d40

08009f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2210      	movs	r2, #16
 8009f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4a08      	ldr	r2, [pc, #32]	; (8009f90 <USB_FlushRxFifo+0x3c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d901      	bls.n	8009f78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e006      	b.n	8009f86 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f003 0310 	and.w	r3, r3, #16
 8009f80:	2b10      	cmp	r3, #16
 8009f82:	d0f0      	beq.n	8009f66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr
 8009f90:	00030d40 	.word	0x00030d40

08009f94 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bc80      	pop	{r7}
 8009fc2:	4770      	bx	lr

08009fc4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f003 0306 	and.w	r3, r3, #6
 8009fdc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d002      	beq.n	8009fea <USB_GetDevSpeed+0x26>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2b06      	cmp	r3, #6
 8009fe8:	d102      	bne.n	8009ff0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009fea:	2302      	movs	r3, #2
 8009fec:	75fb      	strb	r3, [r7, #23]
 8009fee:	e001      	b.n	8009ff4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009ff0:	230f      	movs	r3, #15
 8009ff2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bc80      	pop	{r7}
 8009ffe:	4770      	bx	lr

0800a000 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	785b      	ldrb	r3, [r3, #1]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d13a      	bne.n	800a092 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a022:	69da      	ldr	r2, [r3, #28]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f303 	lsl.w	r3, r1, r3
 800a032:	b29b      	uxth	r3, r3
 800a034:	68f9      	ldr	r1, [r7, #12]
 800a036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a03a:	4313      	orrs	r3, r2
 800a03c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d155      	bne.n	800a100 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	78db      	ldrb	r3, [r3, #3]
 800a06e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a070:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	059b      	lsls	r3, r3, #22
 800a076:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a078:	4313      	orrs	r3, r2
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	0151      	lsls	r1, r2, #5
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	440a      	add	r2, r1
 800a082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a08a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	e036      	b.n	800a100 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a098:	69da      	ldr	r2, [r3, #28]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0a8:	041b      	lsls	r3, r3, #16
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d11a      	bne.n	800a100 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	78db      	ldrb	r3, [r3, #3]
 800a0e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	bc80      	pop	{r7}
 800a10a:	4770      	bx	lr

0800a10c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b01      	cmp	r3, #1
 800a126:	f040 810a 	bne.w	800a33e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d132      	bne.n	800a198 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a190:	0cdb      	lsrs	r3, r3, #19
 800a192:	04db      	lsls	r3, r3, #19
 800a194:	6113      	str	r3, [r2, #16]
 800a196:	e074      	b.n	800a282 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b2:	0cdb      	lsrs	r3, r3, #19
 800a1b4:	04db      	lsls	r3, r3, #19
 800a1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	6959      	ldr	r1, [r3, #20]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	440b      	add	r3, r1
 800a1f4:	1e59      	subs	r1, r3, #1
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a200:	4baf      	ldr	r3, [pc, #700]	; (800a4c0 <USB_EPStartXfer+0x3b4>)
 800a202:	400b      	ands	r3, r1
 800a204:	6939      	ldr	r1, [r7, #16]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	6979      	ldr	r1, [r7, #20]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a210:	4313      	orrs	r3, r2
 800a212:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a22a:	6939      	ldr	r1, [r7, #16]
 800a22c:	0148      	lsls	r0, r1, #5
 800a22e:	6979      	ldr	r1, [r7, #20]
 800a230:	4401      	add	r1, r0
 800a232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a236:	4313      	orrs	r3, r2
 800a238:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	78db      	ldrb	r3, [r3, #3]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d11f      	bne.n	800a282 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	0151      	lsls	r1, r2, #5
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	440a      	add	r2, r1
 800a258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a25c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a260:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a280:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	440a      	add	r2, r1
 800a298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2a0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	78db      	ldrb	r3, [r3, #3]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d015      	beq.n	800a2d6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 8100 	beq.w	800a4b4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ca:	6979      	ldr	r1, [r7, #20]
 800a2cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	634b      	str	r3, [r1, #52]	; 0x34
 800a2d4:	e0ee      	b.n	800a4b4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d110      	bne.n	800a308 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a300:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	e00f      	b.n	800a328 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a326:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68d9      	ldr	r1, [r3, #12]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781a      	ldrb	r2, [r3, #0]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	b29b      	uxth	r3, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f9e1 	bl	800a6fe <USB_WritePacket>
 800a33c:	e0ba      	b.n	800a4b4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	0151      	lsls	r1, r2, #5
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	440a      	add	r2, r1
 800a354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a358:	0cdb      	lsrs	r3, r3, #19
 800a35a:	04db      	lsls	r3, r3, #19
 800a35c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	0151      	lsls	r1, r2, #5
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	440a      	add	r2, r1
 800a374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a378:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a37c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a380:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d123      	bne.n	800a3d2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a396:	691a      	ldr	r2, [r3, #16]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	0148      	lsls	r0, r1, #5
 800a3a4:	6979      	ldr	r1, [r7, #20]
 800a3a6:	4401      	add	r1, r0
 800a3a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	0151      	lsls	r1, r2, #5
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	440a      	add	r2, r1
 800a3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3ce:	6113      	str	r3, [r2, #16]
 800a3d0:	e033      	b.n	800a43a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	695a      	ldr	r2, [r3, #20]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	4413      	add	r3, r2
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	89fb      	ldrh	r3, [r7, #14]
 800a3f8:	04d9      	lsls	r1, r3, #19
 800a3fa:	4b31      	ldr	r3, [pc, #196]	; (800a4c0 <USB_EPStartXfer+0x3b4>)
 800a3fc:	400b      	ands	r3, r1
 800a3fe:	6939      	ldr	r1, [r7, #16]
 800a400:	0148      	lsls	r0, r1, #5
 800a402:	6979      	ldr	r1, [r7, #20]
 800a404:	4401      	add	r1, r0
 800a406:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a40a:	4313      	orrs	r3, r2
 800a40c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	691a      	ldr	r2, [r3, #16]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	89f9      	ldrh	r1, [r7, #14]
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a42a:	6939      	ldr	r1, [r7, #16]
 800a42c:	0148      	lsls	r0, r1, #5
 800a42e:	6979      	ldr	r1, [r7, #20]
 800a430:	4401      	add	r1, r0
 800a432:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a436:	4313      	orrs	r3, r2
 800a438:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	78db      	ldrb	r3, [r3, #3]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d128      	bne.n	800a494 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d110      	bne.n	800a474 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	0151      	lsls	r1, r2, #5
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	440a      	add	r2, r1
 800a468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	e00f      	b.n	800a494 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a48e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a492:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	0151      	lsls	r1, r2, #5
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	1ff80000 	.word	0x1ff80000

0800a4c4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	f040 80ab 	bne.w	800a638 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d132      	bne.n	800a550 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a504:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a508:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a50c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a52c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	0151      	lsls	r1, r2, #5
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	440a      	add	r2, r1
 800a544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a548:	0cdb      	lsrs	r3, r3, #19
 800a54a:	04db      	lsls	r3, r3, #19
 800a54c:	6113      	str	r3, [r2, #16]
 800a54e:	e04e      	b.n	800a5ee <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	0151      	lsls	r1, r2, #5
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	440a      	add	r2, r1
 800a566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a56a:	0cdb      	lsrs	r3, r3, #19
 800a56c:	04db      	lsls	r3, r3, #19
 800a56e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a58a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a58e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a592:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	695a      	ldr	r2, [r3, #20]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d903      	bls.n	800a5a8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d4:	691a      	ldr	r2, [r3, #16]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	0148      	lsls	r0, r1, #5
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	4401      	add	r1, r0
 800a5e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a60c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d06d      	beq.n	800a6f2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	f003 030f 	and.w	r3, r3, #15
 800a626:	2101      	movs	r1, #1
 800a628:	fa01 f303 	lsl.w	r3, r1, r3
 800a62c:	68f9      	ldr	r1, [r7, #12]
 800a62e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a632:	4313      	orrs	r3, r2
 800a634:	634b      	str	r3, [r1, #52]	; 0x34
 800a636:	e05c      	b.n	800a6f2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	0151      	lsls	r1, r2, #5
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	440a      	add	r2, r1
 800a64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a652:	0cdb      	lsrs	r3, r3, #19
 800a654:	04db      	lsls	r3, r3, #19
 800a656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	0151      	lsls	r1, r2, #5
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	440a      	add	r2, r1
 800a66e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a67a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	0148      	lsls	r0, r1, #5
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	4401      	add	r1, r0
 800a6ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	0151      	lsls	r1, r2, #5
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	440a      	add	r2, r1
 800a6e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr

0800a6fe <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b089      	sub	sp, #36	; 0x24
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	4611      	mov	r1, r2
 800a70a:	461a      	mov	r2, r3
 800a70c:	460b      	mov	r3, r1
 800a70e:	71fb      	strb	r3, [r7, #7]
 800a710:	4613      	mov	r3, r2
 800a712:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a71c:	88bb      	ldrh	r3, [r7, #4]
 800a71e:	3303      	adds	r3, #3
 800a720:	089b      	lsrs	r3, r3, #2
 800a722:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a724:	2300      	movs	r3, #0
 800a726:	61bb      	str	r3, [r7, #24]
 800a728:	e018      	b.n	800a75c <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	031a      	lsls	r2, r3, #12
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	4413      	add	r3, r2
 800a732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a736:	461a      	mov	r2, r3
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	3301      	adds	r3, #1
 800a742:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	3301      	adds	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	3301      	adds	r3, #1
 800a74e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	3301      	adds	r3, #1
 800a754:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	3301      	adds	r3, #1
 800a75a:	61bb      	str	r3, [r7, #24]
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	429a      	cmp	r2, r3
 800a762:	d3e2      	bcc.n	800a72a <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3724      	adds	r7, #36	; 0x24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bc80      	pop	{r7}
 800a76e:	4770      	bx	lr

0800a770 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a770:	b480      	push	{r7}
 800a772:	b08b      	sub	sp, #44	; 0x2c
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	089b      	lsrs	r3, r3, #2
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a78e:	88fb      	ldrh	r3, [r7, #6]
 800a790:	f003 0303 	and.w	r3, r3, #3
 800a794:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a796:	2300      	movs	r3, #0
 800a798:	623b      	str	r3, [r7, #32]
 800a79a:	e014      	b.n	800a7c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	3301      	adds	r3, #1
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	623b      	str	r3, [r7, #32]
 800a7c6:	6a3a      	ldr	r2, [r7, #32]
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d3e6      	bcc.n	800a79c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7ce:	8bfb      	ldrh	r3, [r7, #30]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01e      	beq.n	800a812 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	701a      	strb	r2, [r3, #0]
      i++;
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	3301      	adds	r3, #1
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a806:	8bfb      	ldrh	r3, [r7, #30]
 800a808:	3b01      	subs	r3, #1
 800a80a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a80c:	8bfb      	ldrh	r3, [r7, #30]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1ea      	bne.n	800a7e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a814:	4618      	mov	r0, r3
 800a816:	372c      	adds	r7, #44	; 0x2c
 800a818:	46bd      	mov	sp, r7
 800a81a:	bc80      	pop	{r7}
 800a81c:	4770      	bx	lr

0800a81e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a81e:	b480      	push	{r7}
 800a820:	b085      	sub	sp, #20
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d12c      	bne.n	800a894 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	4413      	add	r3, r2
 800a842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db12      	blt.n	800a872 <USB_EPSetStall+0x54>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00f      	beq.n	800a872 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	0151      	lsls	r1, r2, #5
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	440a      	add	r2, r1
 800a868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a86c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a870:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	0151      	lsls	r1, r2, #5
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	440a      	add	r2, r1
 800a888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a88c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	e02b      	b.n	800a8ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	015a      	lsls	r2, r3, #5
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	db12      	blt.n	800a8cc <USB_EPSetStall+0xae>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00f      	beq.n	800a8cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	0151      	lsls	r1, r2, #5
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	440a      	add	r2, r1
 800a8c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	0151      	lsls	r1, r2, #5
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	440a      	add	r2, r1
 800a8e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr

0800a8f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d128      	bne.n	800a966 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	0151      	lsls	r1, r2, #5
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	440a      	add	r2, r1
 800a92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a92e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a932:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	78db      	ldrb	r3, [r3, #3]
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d003      	beq.n	800a944 <USB_EPClearStall+0x4c>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	78db      	ldrb	r3, [r3, #3]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d138      	bne.n	800a9b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	0151      	lsls	r1, r2, #5
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	440a      	add	r2, r1
 800a95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	e027      	b.n	800a9b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	0151      	lsls	r1, r2, #5
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	440a      	add	r2, r1
 800a97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a984:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	78db      	ldrb	r3, [r3, #3]
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d003      	beq.n	800a996 <USB_EPClearStall+0x9e>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	78db      	ldrb	r3, [r3, #3]
 800a992:	2b02      	cmp	r3, #2
 800a994:	d10f      	bne.n	800a9b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	0151      	lsls	r1, r2, #5
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr

0800a9c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b085      	sub	sp, #20
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a9e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bc80      	pop	{r7}
 800aa0a:	4770      	bx	lr

0800aa0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa26:	f023 0303 	bic.w	r3, r3, #3
 800aa2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa3a:	f023 0302 	bic.w	r3, r3, #2
 800aa3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bc80      	pop	{r7}
 800aa4a:	4770      	bx	lr

0800aa4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa66:	f023 0303 	bic.w	r3, r3, #3
 800aa6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa7a:	f043 0302 	orr.w	r3, r3, #2
 800aa7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bc80      	pop	{r7}
 800aa8a:	4770      	bx	lr

0800aa8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr

0800aab0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	4013      	ands	r3, r2
 800aad2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	0c1b      	lsrs	r3, r3, #16
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr

0800aae2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	4013      	ands	r3, r2
 800ab04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	b29b      	uxth	r3, r3
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab24:	78fb      	ldrb	r3, [r7, #3]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab42:	68bb      	ldr	r3, [r7, #8]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bc80      	pop	{r7}
 800ab4c:	4770      	bx	lr

0800ab4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b087      	sub	sp, #28
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	460b      	mov	r3, r1
 800ab58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	f003 030f 	and.w	r3, r3, #15
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7e:	01db      	lsls	r3, r3, #7
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	015a      	lsls	r2, r3, #5
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	4413      	add	r3, r2
 800ab90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4013      	ands	r3, r2
 800ab9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bc80      	pop	{r7}
 800aba6:	4770      	bx	lr

0800aba8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	f003 0301 	and.w	r3, r3, #1
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bc80      	pop	{r7}
 800abc0:	4770      	bx	lr

0800abc2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800abe0:	f023 0307 	bic.w	r3, r3, #7
 800abe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bc80      	pop	{r7}
 800ac04:	4770      	bx	lr
	...

0800ac08 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	333c      	adds	r3, #60	; 0x3c
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	4a1c      	ldr	r2, [pc, #112]	; (800ac94 <USB_EP0_OutStart+0x8c>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d90a      	bls.n	800ac3e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac38:	d101      	bne.n	800ac3e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e024      	b.n	800ac88 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac44:	461a      	mov	r2, r3
 800ac46:	2300      	movs	r3, #0
 800ac48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac6c:	f043 0318 	orr.w	r3, r3, #24
 800ac70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ac84:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	4f54300a 	.word	0x4f54300a

0800ac98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3301      	adds	r3, #1
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4a12      	ldr	r2, [pc, #72]	; (800acf8 <USB_CoreReset+0x60>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d901      	bls.n	800acb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acb2:	2303      	movs	r3, #3
 800acb4:	e01b      	b.n	800acee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	daf2      	bge.n	800aca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	f043 0201 	orr.w	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3301      	adds	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4a08      	ldr	r2, [pc, #32]	; (800acf8 <USB_CoreReset+0x60>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d901      	bls.n	800ace0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e006      	b.n	800acee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d0f0      	beq.n	800acce <USB_CoreReset+0x36>

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bc80      	pop	{r7}
 800acf6:	4770      	bx	lr
 800acf8:	00030d40 	.word	0x00030d40

0800acfc <_ZN10tCAN_STM32C1EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE>:
/*****************************************************************************
* @brief CAN_STM32 initializer
* @param hcan CAN_HandleTypeDef pointer to CAN instance
* @param baudRate kbit/s as CANbaudRatePrescaler enum
*/
tCAN_STM32::tCAN_STM32(CAN_HandleTypeDef *_STM32can, CANbaudRatePrescaler _CANbaudRate) :
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	4613      	mov	r3, r2
 800ad08:	71fb      	strb	r3, [r7, #7]
		 STM32can(_STM32can), CANbaudRate(_CANbaudRate) {
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	79fa      	ldrb	r2, [r7, #7]
 800ad14:	711a      	strb	r2, [r3, #4]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	609a      	str	r2, [r3, #8]

	CAN_STM32_instance = this;
 800ad1c:	4a07      	ldr	r2, [pc, #28]	; (800ad3c <_ZN10tCAN_STM32C1EP19__CAN_HandleTypeDefNS_20CANbaudRatePrescalerE+0x40>)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6013      	str	r3, [r2, #0]

	rxRing = 0;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	659a      	str	r2, [r3, #88]	; 0x58
	txRing = 0;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bc80      	pop	{r7}
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000a48 	.word	0x20000a48

0800ad40 <_ZN10tCAN_STM327CANOpenEv>:


//*****************************************************************************
bool tCAN_STM32::CANOpen() {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	6078      	str	r0, [r7, #4]

	bool ret = true;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	73fb      	strb	r3, [r7, #15]

	// CAN initialisation instead of using the by the STM32cubeIDE configuration tool generated init function
	if (CAN_Init() != HAL_OK) {
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f9e1 	bl	800b114 <_ZN10tCAN_STM328CAN_InitEv>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bf14      	ite	ne
 800ad58:	2301      	movne	r3, #1
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <_ZN10tCAN_STM327CANOpenEv+0x26>
		ret = false;
 800ad62:	2300      	movs	r3, #0
 800ad64:	73fb      	strb	r3, [r7, #15]
	}


	// activate CAN callback 1 interrupt
	if (HAL_CAN_ActivateNotification(STM32can, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2110      	movs	r1, #16
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fa fc98 	bl	80056a2 <HAL_CAN_ActivateNotification>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	bf14      	ite	ne
 800ad78:	2301      	movne	r3, #1
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <_ZN10tCAN_STM327CANOpenEv+0x46>
		ret = false;
 800ad82:	2300      	movs	r3, #0
 800ad84:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_CAN_ActivateNotification(STM32can, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fa fc88 	bl	80056a2 <HAL_CAN_ActivateNotification>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bf14      	ite	ne
 800ad98:	2301      	movne	r3, #1
 800ad9a:	2300      	moveq	r3, #0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <_ZN10tCAN_STM327CANOpenEv+0x66>
		ret = false;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73fb      	strb	r3, [r7, #15]
	}

	if (SetCANFilter( STM32can, true, 0, 0x00000000, 0x00000000 ) != HAL_OK) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6819      	ldr	r1, [r3, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	2300      	movs	r3, #0
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	2300      	movs	r3, #0
 800adb4:	2201      	movs	r2, #1
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa50 	bl	800b25c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf14      	ite	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	2300      	moveq	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <_ZN10tCAN_STM327CANOpenEv+0x90>
		ret = false;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
	}
	// Enable CAN
	if (HAL_CAN_Start(STM32can) != HAL_OK) {
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4618      	mov	r0, r3
 800add6:	f7fa fa01 	bl	80051dc <HAL_CAN_Start>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	bf14      	ite	ne
 800ade0:	2301      	movne	r3, #1
 800ade2:	2300      	moveq	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <_ZN10tCAN_STM327CANOpenEv+0xae>
		ret = false;
 800adea:	2300      	movs	r3, #0
 800adec:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800adee:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb>:

//*****************************************************************************
bool tCAN_STM32::CANSendFrame(uint32_t id, uint8_t len, const uint8_t* buf, bool extended) {
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af02      	add	r7, sp, #8
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	4613      	mov	r3, r2
 800ae06:	71fb      	strb	r3, [r7, #7]

	uint8_t prio = (uint8_t)((id >> 26) & 0x7);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	0e9b      	lsrs	r3, r3, #26
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	757b      	strb	r3, [r7, #21]
	bool ret = false;
 800ae14:	2300      	movs	r3, #0
 800ae16:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_DeactivateNotification(STM32can, CAN_IT_TX_MAILBOX_EMPTY);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fa fc64 	bl	80056ec <HAL_CAN_DeactivateNotification>

	bool TxMailboxesFull = HAL_CAN_GetTxMailboxesFreeLevel(STM32can) == 0;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fa faf5 	bl	8005418 <HAL_CAN_GetTxMailboxesFreeLevel>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bf0c      	ite	eq
 800ae34:	2301      	moveq	r3, #1
 800ae36:	2300      	movne	r3, #0
 800ae38:	753b      	strb	r3, [r7, #20]
	bool SendFromBuffer = false;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	75bb      	strb	r3, [r7, #22]

	// If TX buffer has already some frames waiting with higher prio or mailbox is full, buffer frame
	if ( !txRing->isEmpty(prio) || TxMailboxesFull ) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae42:	7d7a      	ldrb	r2, [r7, #21]
 800ae44:	4611      	mov	r1, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fab0 	bl	800b3ac <_ZNK19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE7isEmptyEh>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f083 0301 	eor.w	r3, r3, #1
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d102      	bne.n	800ae5e <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0x66>
 800ae58:	7d3b      	ldrb	r3, [r7, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0x6a>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e000      	b.n	800ae64 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0x6c>
 800ae62:	2300      	movs	r3, #0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d024      	beq.n	800aeb2 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0xba>
		CAN_message_t *msg = txRing->getAddRef(prio);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae6c:	7d7a      	ldrb	r2, [r7, #21]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fac2 	bl	800b3fa <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh>
 800ae76:	6138      	str	r0, [r7, #16]
		if ( msg!=0 ) {
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d017      	beq.n	800aeae <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0xb6>
			msg->id = id;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	601a      	str	r2, [r3, #0]
			msg->flags.extended = extended;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ae8a:	711a      	strb	r2, [r3, #4]
			if ( len > 8 ) len = 8;
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d901      	bls.n	800ae96 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0x9e>
 800ae92:	2308      	movs	r3, #8
 800ae94:	71fb      	strb	r3, [r7, #7]
			msg->len = len;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	79fa      	ldrb	r2, [r7, #7]
 800ae9a:	721a      	strb	r2, [r3, #8]
			memcpy(msg->buf, buf, len);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	3309      	adds	r3, #9
 800aea0:	79fa      	ldrb	r2, [r7, #7]
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f00e fa39 	bl	801931c <memcpy>
			ret = true;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	75fb      	strb	r3, [r7, #23]

			//frame buffered
		}
		SendFromBuffer = true;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	75bb      	strb	r3, [r7, #22]
	}

	if ( !TxMailboxesFull ) {
 800aeb2:	7d3b      	ldrb	r3, [r7, #20]
 800aeb4:	f083 0301 	eor.w	r3, r3, #1
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d015      	beq.n	800aeea <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0xf2>
		if ( SendFromBuffer ) {
 800aebe:	7dbb      	ldrb	r3, [r7, #22]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d007      	beq.n	800aed4 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0xdc>
			ret = sendFromTxRing(prio);
 800aec4:	7d7b      	ldrb	r3, [r7, #21]
 800aec6:	4619      	mov	r1, r3
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f8a3 	bl	800b014 <_ZN10tCAN_STM3214sendFromTxRingEh>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]
 800aed2:	e00a      	b.n	800aeea <_ZN10tCAN_STM3212CANSendFrameEmhPKhb+0xf2>
		} else {
			ret = CANwriteTxMailbox(id, len, buf, extended);
 800aed4:	79fa      	ldrb	r2, [r7, #7]
 800aed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f84e 	bl	800af82 <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75fb      	strb	r3, [r7, #23]
		}
		/* transmit entry accepted */
	}

	HAL_CAN_ActivateNotification(STM32can, CAN_IT_TX_MAILBOX_EMPTY);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2101      	movs	r1, #1
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fa fbd6 	bl	80056a2 <HAL_CAN_ActivateNotification>

	return ret;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <_ZN10tCAN_STM3218CANSendFrameStructEPNS_13CAN_message_tE>:

//*****************************************************************************
bool tCAN_STM32::CANSendFrameStruct(tCAN_STM32::CAN_message_t* message) {
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af02      	add	r7, sp, #8
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	return CANSendFrame(message->id, message->len, message->buf, message->flags.extended);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6819      	ldr	r1, [r3, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	7a1a      	ldrb	r2, [r3, #8]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	f103 0009 	add.w	r0, r3, #9
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	791b      	ldrb	r3, [r3, #4]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	4603      	mov	r3, r0
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff ff69 	bl	800adf8 <_ZN10tCAN_STM3212CANSendFrameEmhPKhb>
 800af26:	4603      	mov	r3, r0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZN10tCAN_STM3217CANGetFrameStructEPNS_13CAN_message_tE>:
	return ret;

}

//*****************************************************************************
bool tCAN_STM32::CANGetFrameStruct(CAN_message_t* message) {
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]

	bool ret = false;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]

	HAL_CAN_DeactivateNotification(STM32can, CAN_IT_RX_FIFO1_MSG_PENDING);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2110      	movs	r1, #16
 800af44:	4618      	mov	r0, r3
 800af46:	f7fa fbd1 	bl	80056ec <HAL_CAN_DeactivateNotification>

	const CAN_message_t *msg = rxRing->getReadRef();
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f000 fad5 	bl	800b500 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh>
 800af56:	60b8      	str	r0, [r7, #8]
	if ( msg!=0 ) {
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d006      	beq.n	800af6c <_ZN10tCAN_STM3217CANGetFrameStructEPNS_13CAN_message_tE+0x3c>
	    //message = msg;
	    memcpy(message, msg, sizeof(*msg));
 800af5e:	2214      	movs	r2, #20
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	6838      	ldr	r0, [r7, #0]
 800af64:	f00e f9da 	bl	801931c <memcpy>
	    ret = true;
 800af68:	2301      	movs	r3, #1
 800af6a:	73fb      	strb	r3, [r7, #15]
	}

	HAL_CAN_ActivateNotification(STM32can, CAN_IT_RX_FIFO1_MSG_PENDING);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2110      	movs	r1, #16
 800af72:	4618      	mov	r0, r3
 800af74:	f7fa fb95 	bl	80056a2 <HAL_CAN_ActivateNotification>

	return ret;
 800af78:	7bfb      	ldrb	r3, [r7, #15]

}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb>:
  if ( txRing == 0 ) txRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANSendFrames, 7);

}

// *****************************************************************************
bool tCAN_STM32::CANwriteTxMailbox(uint32_t id, uint8_t len, const uint8_t *buf, bool extended) {
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	603b      	str	r3, [r7, #0]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]

	if (extended) {
 800af92:	7e3b      	ldrb	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb+0x24>
		CANTxHeader.IDE = CAN_ID_EXT;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2204      	movs	r2, #4
 800af9c:	619a      	str	r2, [r3, #24]
		CANTxHeader.ExtId = id;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	615a      	str	r2, [r3, #20]
 800afa4:	e005      	b.n	800afb2 <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb+0x30>
	} else {
		CANTxHeader.IDE = CAN_ID_STD;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	619a      	str	r2, [r3, #24]
		CANTxHeader.StdId = id;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	611a      	str	r2, [r3, #16]
	}
	CANTxHeader.RTR = CAN_RTR_DATA;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	61da      	str	r2, [r3, #28]
	CANTxHeader.DLC = len;
 800afb8:	79fa      	ldrb	r2, [r7, #7]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	621a      	str	r2, [r3, #32]
	CANTxHeader.TransmitGlobalTime = DISABLE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if ( len > 8 ) len = 8;
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	2b08      	cmp	r3, #8
 800afca:	d901      	bls.n	800afd0 <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb+0x4e>
 800afcc:	2308      	movs	r3, #8
 800afce:	71fb      	strb	r3, [r7, #7]
    memcpy(CANTxdata, buf, len);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3344      	adds	r3, #68	; 0x44
 800afd4:	79fa      	ldrb	r2, [r7, #7]
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	4618      	mov	r0, r3
 800afda:	f00e f99f 	bl	801931c <memcpy>
	//for (int i = 0; i < len; i++) {
	//	CANTxdata[i] = buf[i];
	//}

	// send message
	if (HAL_CAN_AddTxMessage(STM32can, &CANTxHeader, CANTxdata, &CANTxMailbox) == HAL_OK) {
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f103 0110 	add.w	r1, r3, #16
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3354      	adds	r3, #84	; 0x54
 800aff2:	f7fa f937 	bl	8005264 <HAL_CAN_AddTxMessage>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	bf0c      	ite	eq
 800affc:	2301      	moveq	r3, #1
 800affe:	2300      	movne	r3, #0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb+0x88>
		return true;
 800b006:	2301      	movs	r3, #1
 800b008:	e000      	b.n	800b00c <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb+0x8a>
	} else {
		return false;
 800b00a:	2300      	movs	r3, #0
	}

}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <_ZN10tCAN_STM3214sendFromTxRingEh>:

// *****************************************************************************
bool tCAN_STM32::sendFromTxRing(uint8_t prio) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af02      	add	r7, sp, #8
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	70fb      	strb	r3, [r7, #3]
	const CAN_message_t *txMsg;

	txMsg = txRing->getReadRef(prio);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b024:	78fa      	ldrb	r2, [r7, #3]
 800b026:	4611      	mov	r1, r2
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fa95 	bl	800b558 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh>
 800b02e:	60f8      	str	r0, [r7, #12]
	if ( txMsg != 0 ) {
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00f      	beq.n	800b056 <_ZN10tCAN_STM3214sendFromTxRingEh+0x42>
		return CANwriteTxMailbox(txMsg->id, txMsg->len, txMsg->buf, txMsg->flags.extended);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6819      	ldr	r1, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	7a1a      	ldrb	r2, [r3, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f103 0009 	add.w	r0, r3, #9
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	791b      	ldrb	r3, [r3, #4]
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	4603      	mov	r3, r0
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ff98 	bl	800af82 <_ZN10tCAN_STM3217CANwriteTxMailboxEmhPKhb>
 800b052:	4603      	mov	r3, r0
 800b054:	e000      	b.n	800b058 <_ZN10tCAN_STM3214sendFromTxRingEh+0x44>
	} else {
		return false;
 800b056:	2300      	movs	r3, #0
	}

}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <_ZN10tCAN_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>:

// *****************************************************************************
void tCAN_STM32::CANreadRxMailbox(CAN_HandleTypeDef *hcan) {
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	CAN_message_t *rxMsg;
	uint8_t prio;

	if (HAL_CAN_GetRxMessage(hcan, RX_FIFO, &CANRxHeader, CANRxdata) == HAL_OK) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6899      	ldr	r1, [r3, #8]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	334c      	adds	r3, #76	; 0x4c
 800b078:	6838      	ldr	r0, [r7, #0]
 800b07a:	f7fa fa01 	bl	8005480 <HAL_CAN_GetRxMessage>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	bf0c      	ite	eq
 800b084:	2301      	moveq	r3, #1
 800b086:	2300      	movne	r3, #0
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d03e      	beq.n	800b10c <_ZN10tCAN_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xac>
		prio = (uint8_t)((CANRxHeader.ExtId >> 26) & 0x7);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	0e9b      	lsrs	r3, r3, #26
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	73fb      	strb	r3, [r7, #15]
		rxMsg = rxRing->getAddRef(prio);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a0:	7bfa      	ldrb	r2, [r7, #15]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 f9a8 	bl	800b3fa <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh>
 800b0aa:	60b8      	str	r0, [r7, #8]
		if ( rxMsg!=0 ) {
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d021      	beq.n	800b0f6 <_ZN10tCAN_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0x96>
			rxMsg->len = CANRxHeader.DLC;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	721a      	strb	r2, [r3, #8]
			if ( rxMsg->len > 8 ) rxMsg->len = 8;
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	7a1b      	ldrb	r3, [r3, #8]
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d902      	bls.n	800b0ca <_ZN10tCAN_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0x6a>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2208      	movs	r2, #8
 800b0c8:	721a      	strb	r2, [r3, #8]
			rxMsg->flags.remote = CANRxHeader.RTR == CAN_RTR_REMOTE;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	bf0c      	ite	eq
 800b0d2:	2301      	moveq	r3, #1
 800b0d4:	2300      	movne	r3, #0
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	715a      	strb	r2, [r3, #5]
			rxMsg->flags.extended = CANRxHeader.IDE == CAN_ID_EXT;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	711a      	strb	r2, [r3, #4]
			rxMsg->id = CANRxHeader.ExtId;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	601a      	str	r2, [r3, #0]
		}
		memcpy(rxMsg->buf, CANRxdata, rxMsg->len);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f103 0009 	add.w	r0, r3, #9
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	7a1b      	ldrb	r3, [r3, #8]
 800b106:	461a      	mov	r2, r3
 800b108:	f00e f908 	bl	801931c <memcpy>
	}

	// I think we don't have to check the fifo fill level if we use interrups?
	// HAL_CAN_GetRxFifoFillLevel(*STM32can, CAN_RX_FIFO1);

}
 800b10c:	bf00      	nop
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <_ZN10tCAN_STM328CAN_InitEv>:
/**
  * @brief CAN Initialization Function
  * @retval HAL_StatusTypeDef success or not
  */
HAL_StatusTypeDef tCAN_STM32::CAN_Init()
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	// CAN1000kbitPrescaler, TimeSeg1 and TimeSeg2 are configured for 1000 kbit/s @ defined clock speed
	// Baud rate has to be dividable by 1000 (500, 250, 200, 125, 100...)

	static CAN_TypeDef *CANinstance;
#ifdef CAN1
	if (STM32can == &hcan1) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a45      	ldr	r2, [pc, #276]	; (800b238 <_ZN10tCAN_STM328CAN_InitEv+0x124>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d103      	bne.n	800b12e <_ZN10tCAN_STM328CAN_InitEv+0x1a>
		CANinstance = CAN1;
 800b126:	4b45      	ldr	r3, [pc, #276]	; (800b23c <_ZN10tCAN_STM328CAN_InitEv+0x128>)
 800b128:	4a45      	ldr	r2, [pc, #276]	; (800b240 <_ZN10tCAN_STM328CAN_InitEv+0x12c>)
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	e00a      	b.n	800b144 <_ZN10tCAN_STM328CAN_InitEv+0x30>
	}
#ifdef CAN2
	else if (STM32can == &hcan2) {
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a44      	ldr	r2, [pc, #272]	; (800b244 <_ZN10tCAN_STM328CAN_InitEv+0x130>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d103      	bne.n	800b140 <_ZN10tCAN_STM328CAN_InitEv+0x2c>
		CANinstance = CAN2;
 800b138:	4b40      	ldr	r3, [pc, #256]	; (800b23c <_ZN10tCAN_STM328CAN_InitEv+0x128>)
 800b13a:	4a43      	ldr	r2, [pc, #268]	; (800b248 <_ZN10tCAN_STM328CAN_InitEv+0x134>)
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	e001      	b.n	800b144 <_ZN10tCAN_STM328CAN_InitEv+0x30>
		CANinstance = CAN3;
	}
#endif
	else {
		// CAN_HandleTypeDef *hcan is unknown
		return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e074      	b.n	800b22e <_ZN10tCAN_STM328CAN_InitEv+0x11a>


	// usually the APB1 clock is running at the following speed if max clock frequencies are used:
	// STM32F103/105/107   36'000'000 Hz
	// STM32F405/407       42 000'000 Hz
	uint32_t APB1clockSpeed = HAL_RCC_GetPCLK1Freq();
 800b144:	f7fd fa32 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
 800b148:	60b8      	str	r0, [r7, #8]

	if (APB1clockSpeed == 24000000) {
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	4a3f      	ldr	r2, [pc, #252]	; (800b24c <_ZN10tCAN_STM328CAN_InitEv+0x138>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d107      	bne.n	800b162 <_ZN10tCAN_STM328CAN_InitEv+0x4e>
		CAN1000kbitPrescaler = 2;
 800b152:	2302      	movs	r3, #2
 800b154:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_10TQ;
 800b156:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800b15a:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_1TQ;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	e028      	b.n	800b1b4 <_ZN10tCAN_STM328CAN_InitEv+0xa0>
	}
	else if (APB1clockSpeed == 36000000) {
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	4a3a      	ldr	r2, [pc, #232]	; (800b250 <_ZN10tCAN_STM328CAN_InitEv+0x13c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d108      	bne.n	800b17c <_ZN10tCAN_STM328CAN_InitEv+0x68>
		CAN1000kbitPrescaler = 2;
 800b16a:	2302      	movs	r3, #2
 800b16c:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_15TQ;
 800b16e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800b172:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800b174:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	e01b      	b.n	800b1b4 <_ZN10tCAN_STM328CAN_InitEv+0xa0>
	}
	else if (APB1clockSpeed == 42000000) {
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	4a35      	ldr	r2, [pc, #212]	; (800b254 <_ZN10tCAN_STM328CAN_InitEv+0x140>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d108      	bne.n	800b196 <_ZN10tCAN_STM328CAN_InitEv+0x82>
		CAN1000kbitPrescaler = 3;
 800b184:	2303      	movs	r3, #3
 800b186:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_11TQ;
 800b188:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800b18c:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800b18e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e00e      	b.n	800b1b4 <_ZN10tCAN_STM328CAN_InitEv+0xa0>
	}
	else if (APB1clockSpeed == 48000000) {
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	4a2f      	ldr	r2, [pc, #188]	; (800b258 <_ZN10tCAN_STM328CAN_InitEv+0x144>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d108      	bne.n	800b1b0 <_ZN10tCAN_STM328CAN_InitEv+0x9c>
		CAN1000kbitPrescaler = 3;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	617b      	str	r3, [r7, #20]
		CANtimeSeg1 = CAN_BS1_13TQ;
 800b1a2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800b1a6:	613b      	str	r3, [r7, #16]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800b1a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	e001      	b.n	800b1b4 <_ZN10tCAN_STM328CAN_InitEv+0xa0>
	else {
		// There are no settings four your ABT1 clock speed yet!
		// On the following website you can find a matching prescaler, TS1 and TS2
		// Add the values for your clock speed and 1000kbit/s
		// http://www.bittiming.can-wiki.info/?CLK=36&ctype=bxCAN&SamplePoint=87.5
		return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e03c      	b.n	800b22e <_ZN10tCAN_STM328CAN_InitEv+0x11a>
	}

	STM32can->Instance = CANinstance;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a20      	ldr	r2, [pc, #128]	; (800b23c <_ZN10tCAN_STM328CAN_InitEv+0x128>)
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	601a      	str	r2, [r3, #0]
	STM32can->Init.Prescaler = (CAN1000kbitPrescaler * CANbaudRate);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	791b      	ldrb	r3, [r3, #4]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	fb01 f202 	mul.w	r2, r1, r2
 800b1ce:	605a      	str	r2, [r3, #4]
	STM32can->Init.Mode = CAN_MODE_NORMAL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	609a      	str	r2, [r3, #8]
	STM32can->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	60da      	str	r2, [r3, #12]
	STM32can->Init.TimeSeg1 = CANtimeSeg1;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	611a      	str	r2, [r3, #16]
	STM32can->Init.TimeSeg2 = CANtimeSeg2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	615a      	str	r2, [r3, #20]
	STM32can->Init.TimeTriggeredMode = DISABLE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	761a      	strb	r2, [r3, #24]
	STM32can->Init.AutoBusOff = DISABLE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	765a      	strb	r2, [r3, #25]
	STM32can->Init.AutoWakeUp = DISABLE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2200      	movs	r2, #0
 800b206:	769a      	strb	r2, [r3, #26]
	STM32can->Init.AutoRetransmission = DISABLE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2200      	movs	r2, #0
 800b20e:	76da      	strb	r2, [r3, #27]
	STM32can->Init.ReceiveFifoLocked = DISABLE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2200      	movs	r2, #0
 800b216:	771a      	strb	r2, [r3, #28]
	STM32can->Init.TransmitFifoPriority = DISABLE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2200      	movs	r2, #0
 800b21e:	775a      	strb	r2, [r3, #29]

	return HAL_CAN_Init(STM32can);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4618      	mov	r0, r3
 800b226:	f7f9 fdfe 	bl	8004e26 <HAL_CAN_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	bf00      	nop
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20000274 	.word	0x20000274
 800b23c:	20000a4c 	.word	0x20000a4c
 800b240:	40006400 	.word	0x40006400
 800b244:	2000029c 	.word	0x2000029c
 800b248:	40006800 	.word	0x40006800
 800b24c:	016e3600 	.word	0x016e3600
 800b250:	02255100 	.word	0x02255100
 800b254:	0280de80 	.word	0x0280de80
 800b258:	02dc6c00 	.word	0x02dc6c00

0800b25c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm>:
  * @param  Mask uint32_t bit mask
  * @param  Filter uint32_t CAN identifier
  * @retval success or not
  */
HAL_StatusTypeDef tCAN_STM32::SetCANFilter( CAN_HandleTypeDef *hcan, bool ExtendedIdentifier, uint32_t FilterNum, uint32_t Mask, uint32_t Filter )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b092      	sub	sp, #72	; 0x48
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// For dual CAN MCU's we have 28 filter banks to share between the CAN busses
	// For single CAN SlaveStartFilterBank does nothing and we have 14 filter banks.
	// If not defined different we use filter 0 .. 13 for primary CAN bus and 14 ... 27 for secondary CAN bus
	#if !defined(SlaveStartFilterBank)
	const uint32_t SlaveStartFilterBank = 14;
 800b272:	230e      	movs	r3, #14
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
	#endif

	#if defined(CAN2) // we have two CAN busses
		const int32_t TotalFilterBanks = 27;
 800b276:	231b      	movs	r3, #27
 800b278:	63bb      	str	r3, [r7, #56]	; 0x38
		const int32_t TotalFilterBanks = 13;
	#else // we have no CAN defined
		const int32_t TotalFilterBanks = -1;
	#endif

	int32_t FilterBank = -1;
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b27e:	643b      	str	r3, [r7, #64]	; 0x40
	if (hcan->Instance == CAN1
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a31      	ldr	r2, [pc, #196]	; (800b34c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d108      	bne.n	800b29c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum <= TotalFilterBanks
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b1b      	cmp	r3, #27
 800b28e:	d805      	bhi.n	800b29c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum < SlaveStartFilterBank ) {
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2b0d      	cmp	r3, #13
 800b294:	d802      	bhi.n	800b29c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
		FilterBank = FilterNum;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	643b      	str	r3, [r7, #64]	; 0x40
 800b29a:	e00a      	b.n	800b2b2 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
	}
	else if (hcan->Instance == CAN2
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a2b      	ldr	r2, [pc, #172]	; (800b350 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d105      	bne.n	800b2b2 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
			&& FilterNum <= TotalFilterBanks - SlaveStartFilterBank) {
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b0d      	cmp	r3, #13
 800b2aa:	d802      	bhi.n	800b2b2 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
		FilterBank = FilterNum + SlaveStartFilterBank;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	330e      	adds	r3, #14
 800b2b0:	643b      	str	r3, [r7, #64]	; 0x40
	}

	if ( FilterBank >= 0
 800b2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	db42      	blt.n	800b33e <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
			&& IS_CAN_ALL_INSTANCE(hcan->Instance) )
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a23      	ldr	r2, [pc, #140]	; (800b34c <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d004      	beq.n	800b2cc <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x70>
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a22      	ldr	r2, [pc, #136]	; (800b350 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d138      	bne.n	800b33e <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
	{
		CAN_FilterTypeDef sFilterConfig;

		sFilterConfig.FilterBank = FilterBank;
 800b2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (ExtendedIdentifier == false)
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10c      	bne.n	800b2f8 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0x9c>
		{
			sFilterConfig.FilterMaskIdHigh = Mask << 5 & 0xFFFF;
 800b2de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e0:	015b      	lsls	r3, r3, #5
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = 0x0000; // allows both remote request and data frames
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter << 5 & 0xFFFF;
 800b2ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2ec:	015b      	lsls	r3, r3, #5
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow =  0x0000;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e013      	b.n	800b320 <_ZN10tCAN_STM3212SetCANFilterEP19__CAN_HandleTypeDefbmmm+0xc4>
		}
		else
		{ // ExtendedIdentifier == true
			sFilterConfig.FilterMaskIdHigh = Mask >> 13 & 0xFFFF;
 800b2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2fa:	0b5b      	lsrs	r3, r3, #13
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = (Mask << 3 & 0xFFF8) | (0x1 << 2);
 800b300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	b29b      	uxth	r3, r3
 800b306:	f043 0304 	orr.w	r3, r3, #4
 800b30a:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter >> 13 & 0xFFFF; // EXTID[28:13]
 800b30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b30e:	0b5b      	lsrs	r3, r3, #13
 800b310:	b29b      	uxth	r3, r3
 800b312:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow = (Filter << 3 & 0xFFF8) | (0x1 << 2); // EXTID[12:0] + IDE
 800b314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	b29b      	uxth	r3, r3
 800b31a:	f043 0304 	orr.w	r3, r3, #4
 800b31e:	617b      	str	r3, [r7, #20]
		}

		sFilterConfig.FilterFIFOAssignment = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800b324:	2301      	movs	r3, #1
 800b326:	633b      	str	r3, [r7, #48]	; 0x30
		sFilterConfig.SlaveStartFilterBank = SlaveStartFilterBank; // CAN 0: 0...13 // CAN 1: 14...27 (28 filter banks in total)
 800b328:	230e      	movs	r3, #14
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34

		ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800b32c:	f107 0310 	add.w	r3, r7, #16
 800b330:	4619      	mov	r1, r3
 800b332:	68b8      	ldr	r0, [r7, #8]
 800b334:	f7f9 fe72 	bl	800501c <HAL_CAN_ConfigFilter>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	return ret;
 800b33e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b342:	4618      	mov	r0, r3
 800b344:	3748      	adds	r7, #72	; 0x48
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	40006400 	.word	0x40006400
 800b350:	40006800 	.word	0x40006800

0800b354 <HAL_CAN_RxFifo0MsgPendingCallback>:

// *****************************************************************************


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	if (hcan == CAN_STM32_instance->STM32can) {
 800b35c:	4b07      	ldr	r3, [pc, #28]	; (800b37c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	429a      	cmp	r2, r3
 800b366:	d105      	bne.n	800b374 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		// Call RX Interrupt method of the last tCAN_STM32 instance.
		CAN_STM32_instance->CANreadRxMailbox(hcan);
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff fe76 	bl	800b060 <_ZN10tCAN_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>
	}
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20000a48 	.word	0x20000a48

0800b380 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
	if (hcan == CAN_STM32_instance->STM32can) {
 800b388:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	429a      	cmp	r2, r3
 800b392:	d105      	bne.n	800b3a0 <HAL_CAN_TxMailbox0CompleteCallback+0x20>
		// Call TX Interrupt method of the last tCAN_STM32 instance.
		CAN_STM32_instance->sendFromTxRing(0xFF); // send message with highest priority on ring buffer
 800b394:	4b04      	ldr	r3, [pc, #16]	; (800b3a8 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	21ff      	movs	r1, #255	; 0xff
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff fe3a 	bl	800b014 <_ZN10tCAN_STM3214sendFromTxRingEh>
	}
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000a48 	.word	0x20000a48

0800b3ac <_ZNK19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE7isEmptyEh>:
  delete[] priorityReferencies;
}

// *****************************************************************************
template<typename T>
bool tPriorityRingBuffer<T>::isEmpty(uint8_t _priority) const {
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]
  if ( _priority>=maxPriorities) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7a9b      	ldrb	r3, [r3, #10]
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d309      	bcc.n	800b3d6 <_ZNK19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE7isEmptyEh+0x2a>
    return head==tail;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	889a      	ldrh	r2, [r3, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	88db      	ldrh	r3, [r3, #6]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	bf0c      	ite	eq
 800b3ce:	2301      	moveq	r3, #1
 800b3d0:	2300      	movne	r3, #0
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	e00c      	b.n	800b3f0 <_ZNK19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE7isEmptyEh+0x44>
  } else {
    return priorityReferencies[_priority].next==INVALID_RING_REF;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bf0c      	ite	eq
 800b3ea:	2301      	moveq	r3, #1
 800b3ec:	2300      	movne	r3, #0
 800b3ee:	b2db      	uxtb	r3, r3
  }
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bc80      	pop	{r7}
 800b3f8:	4770      	bx	lr

0800b3fa <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh>:
  return false;
}

// *****************************************************************************
template<typename T>
T *tPriorityRingBuffer<T>::getAddRef(uint8_t _priority) {
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	70fb      	strb	r3, [r7, #3]
  T *ret=0;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]

  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7a9b      	ldrb	r3, [r3, #10]
 800b40e:	78fa      	ldrb	r2, [r7, #3]
 800b410:	429a      	cmp	r2, r3
 800b412:	d303      	bcc.n	800b41c <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh+0x22>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7a9b      	ldrb	r3, [r3, #10]
 800b418:	3b01      	subs	r3, #1
 800b41a:	70fb      	strb	r3, [r7, #3]

  uint16_t nextEntry = (head + 1) % size;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	889b      	ldrh	r3, [r3, #4]
 800b420:	3301      	adds	r3, #1
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	8912      	ldrh	r2, [r2, #8]
 800b426:	fb93 f1f2 	sdiv	r1, r3, r2
 800b42a:	fb01 f202 	mul.w	r2, r1, r2
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	817b      	strh	r3, [r7, #10]

  // Check if the ring buffer is full
  if ( nextEntry == tail ) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	88db      	ldrh	r3, [r3, #6]
 800b436:	897a      	ldrh	r2, [r7, #10]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d109      	bne.n	800b450 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh+0x56>
    clean();
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f91a 	bl	800b676 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE5cleanEv>
    // check again
    if ( nextEntry == tail ) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	88db      	ldrh	r3, [r3, #6]
 800b446:	897a      	ldrh	r2, [r7, #10]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d101      	bne.n	800b450 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh+0x56>
      RingBufferErrDbgf("tPriorityRingBuffer<T>::getAddRef, ring buffer full\n");
      return ret;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	e053      	b.n	800b4f8 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh+0xfe>
    }
  }

  ret=&(buffer[head].Value);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68da      	ldr	r2, [r3, #12]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	889b      	ldrh	r3, [r3, #4]
 800b458:	4619      	mov	r1, r3
 800b45a:	460b      	mov	r3, r1
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	440b      	add	r3, r1
 800b460:	00db      	lsls	r3, r3, #3
 800b462:	4413      	add	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
  buffer[head].priority=_priority;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	889b      	ldrh	r3, [r3, #4]
 800b46e:	4619      	mov	r1, r3
 800b470:	460b      	mov	r3, r1
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	440b      	add	r3, r1
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	4413      	add	r3, r2
 800b47a:	78fa      	ldrb	r2, [r7, #3]
 800b47c:	759a      	strb	r2, [r3, #22]
  buffer[head].next=INVALID_RING_REF;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	889b      	ldrh	r3, [r3, #4]
 800b486:	4619      	mov	r1, r3
 800b488:	460b      	mov	r3, r1
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	440b      	add	r3, r1
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	4413      	add	r3, r2
 800b492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b496:	829a      	strh	r2, [r3, #20]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	691a      	ldr	r2, [r3, #16]
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d108      	bne.n	800b4be <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh+0xc4>
    priorityReferencies[_priority].next=head;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	691a      	ldr	r2, [r3, #16]
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	8892      	ldrh	r2, [r2, #4]
 800b4ba:	801a      	strh	r2, [r3, #0]
 800b4bc:	e010      	b.n	800b4e0 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE9getAddRefEh+0xe6>
  } else {
    buffer[priorityReferencies[_priority].last].next=head;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6919      	ldr	r1, [r3, #16]
 800b4c6:	78fb      	ldrb	r3, [r7, #3]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	885b      	ldrh	r3, [r3, #2]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	440b      	add	r3, r1
 800b4d6:	00db      	lsls	r3, r3, #3
 800b4d8:	4413      	add	r3, r2
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	8892      	ldrh	r2, [r2, #4]
 800b4de:	829a      	strh	r2, [r3, #20]
  }
  priorityReferencies[_priority].last=head;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691a      	ldr	r2, [r3, #16]
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	8892      	ldrh	r2, [r2, #4]
 800b4ee:	805a      	strh	r2, [r3, #2]

  RingBufferDbgf("tPriorityRingBuffer<T>::getAddRef, added new item head:%u, priority:%u\n",head,_priority);

  // Bump the head to point to the next free entry
  head = nextEntry;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	897a      	ldrh	r2, [r7, #10]
 800b4f4:	809a      	strh	r2, [r3, #4]

  return ret;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh>:
  return ret;
}

// *****************************************************************************
template<typename T>
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t *_priority) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7a9b      	ldrb	r3, [r3, #10]
 800b512:	7bfa      	ldrb	r2, [r7, #15]
 800b514:	429a      	cmp	r2, r3
 800b516:	d21a      	bcs.n	800b54e <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh+0x4e>
    if ( priorityReferencies[_pri].next!=INVALID_RING_REF ) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00c      	beq.n	800b546 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh+0x46>
      if ( _priority!=0 ) *_priority=_pri;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh+0x38>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	7bfa      	ldrb	r2, [r7, #15]
 800b536:	701a      	strb	r2, [r3, #0]
      return getReadRef(_pri);
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f80b 	bl	800b558 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh>
 800b542:	4603      	mov	r3, r0
 800b544:	e004      	b.n	800b550 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh+0x50>
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	3301      	adds	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
 800b54c:	e7df      	b.n	800b50e <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEPh+0xe>
    }
  }

  return 0;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh>:
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t _priority) {
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	70fb      	strb	r3, [r7, #3]
  const T *ret=0;
 800b564:	2300      	movs	r3, #0
 800b566:	60fb      	str	r3, [r7, #12]
  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7a9b      	ldrb	r3, [r3, #10]
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d303      	bcc.n	800b57a <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0x22>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	7a9b      	ldrb	r3, [r3, #10]
 800b576:	3b01      	subs	r3, #1
 800b578:	70fb      	strb	r3, [r7, #3]
  uint16_t ref=priorityReferencies[_priority].next;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	691a      	ldr	r2, [r3, #16]
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	817b      	strh	r3, [r7, #10]
  if ( ref==INVALID_RING_REF ) {
 800b588:	897b      	ldrh	r3, [r7, #10]
 800b58a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b58e:	4293      	cmp	r3, r2
 800b590:	d101      	bne.n	800b596 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0x3e>
    return ret;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	e06a      	b.n	800b66c <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0x114>
  ret=&(buffer[ref].Value);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68d9      	ldr	r1, [r3, #12]
 800b59a:	897a      	ldrh	r2, [r7, #10]
 800b59c:	4613      	mov	r3, r2
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	4413      	add	r3, r2
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	440b      	add	r3, r1
 800b5a6:	60fb      	str	r3, [r7, #12]
  priorityReferencies[_priority].next=buffer[ref].next;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68d9      	ldr	r1, [r3, #12]
 800b5ac:	897a      	ldrh	r2, [r7, #10]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	4413      	add	r3, r2
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	18ca      	adds	r2, r1, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6919      	ldr	r1, [r3, #16]
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	8a92      	ldrh	r2, [r2, #20]
 800b5c4:	801a      	strh	r2, [r3, #0]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691a      	ldr	r2, [r3, #16]
 800b5ca:	78fb      	ldrb	r3, [r7, #3]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d107      	bne.n	800b5ea <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0x92>
    priorityReferencies[_priority].last=INVALID_RING_REF;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	691a      	ldr	r2, [r3, #16]
 800b5de:	78fb      	ldrb	r3, [r7, #3]
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5e8:	805a      	strh	r2, [r3, #2]
  if ( ref==tail ) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	88db      	ldrh	r3, [r3, #6]
 800b5ee:	897a      	ldrh	r2, [r7, #10]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d12f      	bne.n	800b654 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0xfc>
    for ( tail = (tail + 1) % size; tail!=head && buffer[tail].next==INVALID_RING_REF; tail = (tail + 1) % size );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	88db      	ldrh	r3, [r3, #6]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	8912      	ldrh	r2, [r2, #8]
 800b5fe:	fb93 f1f2 	sdiv	r1, r3, r2
 800b602:	fb01 f202 	mul.w	r2, r1, r2
 800b606:	1a9b      	subs	r3, r3, r2
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	80da      	strh	r2, [r3, #6]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	88da      	ldrh	r2, [r3, #6]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	889b      	ldrh	r3, [r3, #4]
 800b616:	429a      	cmp	r2, r3
 800b618:	d01c      	beq.n	800b654 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	88db      	ldrh	r3, [r3, #6]
 800b622:	4619      	mov	r1, r3
 800b624:	460b      	mov	r3, r1
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	440b      	add	r3, r1
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	4413      	add	r3, r2
 800b62e:	8a9b      	ldrh	r3, [r3, #20]
 800b630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b634:	4293      	cmp	r3, r2
 800b636:	d10d      	bne.n	800b654 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	88db      	ldrh	r3, [r3, #6]
 800b63c:	3301      	adds	r3, #1
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	8912      	ldrh	r2, [r2, #8]
 800b642:	fb93 f1f2 	sdiv	r1, r3, r2
 800b646:	fb01 f202 	mul.w	r2, r1, r2
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	80da      	strh	r2, [r3, #6]
 800b652:	e7dc      	b.n	800b60e <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE10getReadRefEh+0xb6>
  buffer[ref].next=INVALID_RING_REF; // Release slot
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68d9      	ldr	r1, [r3, #12]
 800b658:	897a      	ldrh	r2, [r7, #10]
 800b65a:	4613      	mov	r3, r2
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	4413      	add	r3, r2
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	440b      	add	r3, r1
 800b664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b668:	829a      	strh	r2, [r3, #20]
  return ret;
 800b66a:	68fb      	ldr	r3, [r7, #12]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr

0800b676 <_ZN19tPriorityRingBufferIN10tCAN_STM3213CAN_message_tEE5cleanEv>:
void tPriorityRingBuffer<T>::clean() {
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
}
 800b67e:	bf00      	nop
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr

0800b688 <_ZN9tNMEA200013IsInitializedEv>:
    // devices sends their response.
    void SendPendingInformation();

protected:
    void InitDevices();
    bool IsInitialized() { return (N2kCANMsgBuf!=0); }
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b694:	2b00      	cmp	r3, #0
 800b696:	bf14      	ite	ne
 800b698:	2301      	movne	r3, #1
 800b69a:	2300      	moveq	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bc80      	pop	{r7}
 800b6a6:	4770      	bx	lr

0800b6a8 <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt>:
    // This depends of your hw and device source. Device source has effect due to priority of getting sending slot. If your data is
    // critical, use buffer size, which is large enough (default 40 frames).
    // So e.g. Product information takes totally 134 bytes. This needs 20 frames. If you also send GNSS 47 bytes=7 frames.
    // If you want to be sure that both will be sent on any situation, you need at least 27 frame buffer size.
    // If you use this function, call it once before Open() and before any device related function like SetProductInformation.
    virtual void SetN2kCANSendFrameBufSize(const uint16_t _MaxCANSendFrames) { if ( !IsInitialized() ) { MaxCANSendFrames=_MaxCANSendFrames; }; }
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff ffe7 	bl	800b688 <_ZN9tNMEA200013IsInitializedEv>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f083 0301 	eor.w	r3, r3, #1
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <_ZN9tNMEA200025SetN2kCANSendFrameBufSizeEt+0x26>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	887a      	ldrh	r2, [r7, #2]
 800b6ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt>:

    // Some CAN drivers allows interrupted receive frame buffering. You can set receive buffer size with this function.
    // If you use this function, call it once before Open();
    virtual void SetN2kCANReceiveFrameBufSize(const uint16_t _MaxCANReceiveFrames) { if ( !IsInitialized() ) MaxCANReceiveFrames=_MaxCANReceiveFrames; }
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	807b      	strh	r3, [r7, #2]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ffd0 	bl	800b688 <_ZN9tNMEA200013IsInitializedEv>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f083 0301 	eor.w	r3, r3, #1
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <_ZN9tNMEA200028SetN2kCANReceiveFrameBufSizeEt+0x26>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	887a      	ldrh	r2, [r7, #2]
 800b6f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan);


//*****************************************************************************
tNMEA2000_STM32::tNMEA2000_STM32(CAN_HandleTypeDef *_N2kCan) :
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
		tNMEA2000(), N2kCan(_N2kCan) {
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4618      	mov	r0, r3
 800b712:	f005 fc03 	bl	8010f1c <_ZN9tNMEA2000C1Ev>
 800b716:	4a0f      	ldr	r2, [pc, #60]	; (800b754 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x50>)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	66da      	str	r2, [r3, #108]	; 0x6c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	22fa      	movs	r2, #250	; 0xfa
 800b726:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	NMEA2000_STM32_instance = this;
 800b732:	4a09      	ldr	r2, [pc, #36]	; (800b758 <_ZN15tNMEA2000_STM32C1EP19__CAN_HandleTypeDef+0x54>)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6013      	str	r3, [r2, #0]

	rxRing = 0;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	txRing = 0;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	08019ab8 	.word	0x08019ab8
 800b758:	20000a50 	.word	0x20000a50

0800b75c <_ZN15tNMEA2000_STM327CANOpenEv>:


//*****************************************************************************
bool tNMEA2000_STM32::CANOpen() {
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af02      	add	r7, sp, #8
 800b762:	6078      	str	r0, [r7, #4]

	bool ret = true;
 800b764:	2301      	movs	r3, #1
 800b766:	73fb      	strb	r3, [r7, #15]

	// CAN initialisation instead of using the by the STM32cubeIDE configuration tool generated init function
	if (N2kCAN_Init() != HAL_OK) {
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fa8d 	bl	800bc88 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	bf14      	ite	ne
 800b774:	2301      	movne	r3, #1
 800b776:	2300      	moveq	r3, #0
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <_ZN15tNMEA2000_STM327CANOpenEv+0x26>
		ret = false;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
	}

	// activate CAN callback 1 interrupt for NMEA2000 CAN bus
	if (HAL_CAN_ActivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b786:	2110      	movs	r1, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f9 ff8a 	bl	80056a2 <HAL_CAN_ActivateNotification>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	bf14      	ite	ne
 800b794:	2301      	movne	r3, #1
 800b796:	2300      	moveq	r3, #0
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <_ZN15tNMEA2000_STM327CANOpenEv+0x46>
		ret = false;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	73fb      	strb	r3, [r7, #15]
	}
	if (HAL_CAN_ActivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f9 ff7a 	bl	80056a2 <HAL_CAN_ActivateNotification>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bf14      	ite	ne
 800b7b4:	2301      	movne	r3, #1
 800b7b6:	2300      	moveq	r3, #0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <_ZN15tNMEA2000_STM327CANOpenEv+0x66>
		ret = false;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]
	}

	if (SetN2kCANFilter( N2kCan, true, 0, 0x00000000, 0x00000000 ) != HAL_OK) {
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fafa 	bl	800bdcc <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bf14      	ite	ne
 800b7de:	2301      	movne	r3, #1
 800b7e0:	2300      	moveq	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <_ZN15tNMEA2000_STM327CANOpenEv+0x90>
		ret = false;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	73fb      	strb	r3, [r7, #15]
	}

	// Enable CAN
	if (HAL_CAN_Start(N2kCan) != HAL_OK) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f9 fcf3 	bl	80051dc <HAL_CAN_Start>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bf14      	ite	ne
 800b7fc:	2301      	movne	r3, #1
 800b7fe:	2300      	moveq	r3, #0
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <_ZN15tNMEA2000_STM327CANOpenEv+0xae>
		ret = false;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000_STM32::CANSendFrame(unsigned long id, unsigned char len, const unsigned char* buf, bool wait_sent) {
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af02      	add	r7, sp, #8
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	603b      	str	r3, [r7, #0]
 800b820:	4613      	mov	r3, r2
 800b822:	71fb      	strb	r3, [r7, #7]
	//TODO wait_sent
	uint8_t prio = (uint8_t)((id >> 26) & 0x7);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	0e9b      	lsrs	r3, r3, #26
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	f003 0307 	and.w	r3, r3, #7
 800b82e:	757b      	strb	r3, [r7, #21]
	bool ret = false;
 800b830:	2300      	movs	r3, #0
 800b832:	75fb      	strb	r3, [r7, #23]

	//TODO fill TX mailbox by TX_MAILBOX_EMPTY interrupt
	HAL_CAN_DeactivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b838:	2101      	movs	r1, #1
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f9 ff56 	bl	80056ec <HAL_CAN_DeactivateNotification>

	bool TxMailboxesFull = HAL_CAN_GetTxMailboxesFreeLevel(N2kCan) == 0;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b844:	4618      	mov	r0, r3
 800b846:	f7f9 fde7 	bl	8005418 <HAL_CAN_GetTxMailboxesFreeLevel>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	bf0c      	ite	eq
 800b850:	2301      	moveq	r3, #1
 800b852:	2300      	movne	r3, #0
 800b854:	753b      	strb	r3, [r7, #20]
	bool SendFromBuffer = false;
 800b856:	2300      	movs	r3, #0
 800b858:	75bb      	strb	r3, [r7, #22]

	// If TX buffer has already some frames waiting with higher prio or mailbox is full, buffer frame
	if ( !txRing->isEmpty(prio) || TxMailboxesFull ) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b860:	7d7a      	ldrb	r2, [r7, #21]
 800b862:	4611      	mov	r1, r2
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fb44 	bl	800bef2 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f083 0301 	eor.w	r3, r3, #1
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d102      	bne.n	800b87c <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x68>
 800b876:	7d3b      	ldrb	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x6c>
 800b87c:	2301      	movs	r3, #1
 800b87e:	e000      	b.n	800b882 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0x6e>
 800b880:	2300      	movs	r3, #0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d024      	beq.n	800b8d0 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xbc>
		CAN_message_t *msg = txRing->getAddRef(prio);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b88c:	7d7a      	ldrb	r2, [r7, #21]
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fb55 	bl	800bf40 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>
 800b896:	6138      	str	r0, [r7, #16]
		if ( msg!=0 ) {
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d016      	beq.n	800b8cc <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xb8>
			msg->id = id;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	601a      	str	r2, [r3, #0]
			msg->flags.extended = 1;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	711a      	strb	r2, [r3, #4]
			if ( len > 8 ) len = 8;
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	2b08      	cmp	r3, #8
 800b8ae:	d901      	bls.n	800b8b4 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xa0>
 800b8b0:	2308      	movs	r3, #8
 800b8b2:	71fb      	strb	r3, [r7, #7]
			msg->len = len;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	79fa      	ldrb	r2, [r7, #7]
 800b8b8:	721a      	strb	r2, [r3, #8]
			memcpy(msg->buf, buf, len);
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	3309      	adds	r3, #9
 800b8be:	79fa      	ldrb	r2, [r7, #7]
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f00d fd2a 	bl	801931c <memcpy>
			ret = true;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	75fb      	strb	r3, [r7, #23]
			//frame buffered
		}
		SendFromBuffer = true;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	75bb      	strb	r3, [r7, #22]
	}

	if ( !TxMailboxesFull ) {
 800b8d0:	7d3b      	ldrb	r3, [r7, #20]
 800b8d2:	f083 0301 	eor.w	r3, r3, #1
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d014      	beq.n	800b906 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xf2>
		if ( SendFromBuffer ) {
 800b8dc:	7dbb      	ldrb	r3, [r7, #22]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d007      	beq.n	800b8f2 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xde>
			ret = sendFromTxRing(prio);
 800b8e2:	7d7b      	ldrb	r3, [r7, #21]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 f941 	bl	800bb6e <_ZN15tNMEA2000_STM3214sendFromTxRingEh>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	75fb      	strb	r3, [r7, #23]
 800b8f0:	e009      	b.n	800b906 <_ZN15tNMEA2000_STM3212CANSendFrameEmhPKhb+0xf2>
		} else {
			ret = CANwriteTxMailbox(id, len, buf, 1);
 800b8f2:	79fa      	ldrb	r2, [r7, #7]
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 f8ec 	bl	800bada <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>
 800b902:	4603      	mov	r3, r0
 800b904:	75fb      	strb	r3, [r7, #23]
		}
		/* transmit entry accepted */
	}

	HAL_CAN_ActivateNotification(N2kCan, CAN_IT_TX_MAILBOX_EMPTY);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b90a:	2101      	movs	r1, #1
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7f9 fec8 	bl	80056a2 <HAL_CAN_ActivateNotification>

	return ret;
 800b912:	7dfb      	ldrb	r3, [r7, #23]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh>:

//*****************************************************************************
bool tNMEA2000_STM32::CANGetFrame(unsigned long& id, unsigned char& len, unsigned char* buf) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	603b      	str	r3, [r7, #0]

	bool ret = false;
 800b92a:	2300      	movs	r3, #0
 800b92c:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_DeactivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b932:	2110      	movs	r1, #16
 800b934:	4618      	mov	r0, r3
 800b936:	f7f9 fed9 	bl	80056ec <HAL_CAN_DeactivateNotification>

	const CAN_message_t *msg = rxRing->getReadRef();
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f000 fb7f 	bl	800c046 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh>
 800b948:	6138      	str	r0, [r7, #16]
	if ( msg!=0 ) {
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d019      	beq.n	800b984 <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh+0x68>
	    id = msg->id;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	601a      	str	r2, [r3, #0]
	    len = msg->len;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	7a1a      	ldrb	r2, [r3, #8]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	701a      	strb	r2, [r3, #0]
		if ( len > 8 ) len = 8;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b08      	cmp	r3, #8
 800b966:	d902      	bls.n	800b96e <_ZN15tNMEA2000_STM3211CANGetFrameERmRhPh+0x52>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2208      	movs	r2, #8
 800b96c:	701a      	strb	r2, [r3, #0]
	    memcpy(buf, msg->buf, len);
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f103 0109 	add.w	r1, r3, #9
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	6838      	ldr	r0, [r7, #0]
 800b97c:	f00d fcce 	bl	801931c <memcpy>
	    ret = true;
 800b980:	2301      	movs	r3, #1
 800b982:	75fb      	strb	r3, [r7, #23]
	}

	HAL_CAN_ActivateNotification(N2kCan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b988:	2110      	movs	r1, #16
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f9 fe89 	bl	80056a2 <HAL_CAN_ActivateNotification>

	return ret;
 800b990:	7dfb      	ldrb	r3, [r7, #23]

}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv>:

// *****************************************************************************
void tNMEA2000_STM32::InitCANFrameBuffers() {
 800b99a:	b590      	push	{r4, r7, lr}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]

  if ( MaxCANReceiveFrames == 0 ) MaxCANReceiveFrames = 32; // Use default, if not set
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d103      	bne.n	800b9b4 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x1a>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  if ( MaxCANReceiveFrames < 10 ) MaxCANReceiveFrames = 10; // Do not allow less than 10 - should have enough memory.
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	d803      	bhi.n	800b9c6 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x2c>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	220a      	movs	r2, #10
 800b9c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  if ( MaxCANSendFrames == 0 ) MaxCANSendFrames = 50;  // Use big enough default buffer
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d103      	bne.n	800b9d8 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x3e>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2232      	movs	r2, #50	; 0x32
 800b9d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  if ( MaxCANSendFrames < 30 ) MaxCANSendFrames = 30; // Do not allow less than 30 - should have enough memory.
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9de:	2b1d      	cmp	r3, #29
 800b9e0:	d803      	bhi.n	800b9ea <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x50>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	221e      	movs	r2, #30
 800b9e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  //TODO deleting ring buffer results in hard fault!
  // if buffer is initialized with a different size delete it
  if ( rxRing != 0 && rxRing->getSize() != MaxCANReceiveFrames ) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x78>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 fb4f 	bl	800c09e <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>
 800ba00:	4603      	mov	r3, r0
 800ba02:	461a      	mov	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d001      	beq.n	800ba12 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x78>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e000      	b.n	800ba14 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x7a>
 800ba12:	2300      	movs	r3, #0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00d      	beq.n	800ba34 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x9a>
    delete rxRing;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d004      	beq.n	800ba2c <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x92>
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	3204      	adds	r2, #4
 800ba26:	6812      	ldr	r2, [r2, #0]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	4790      	blx	r2
    rxRing = 0;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  if ( txRing != 0 && txRing->getSize() != MaxCANSendFrames ) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00e      	beq.n	800ba5c <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc2>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 fb2a 	bl	800c09e <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d001      	beq.n	800ba5c <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc2>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xc4>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xe4>
    delete txRing;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0xdc>
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	3204      	adds	r2, #4
 800ba70:	6812      	ldr	r2, [r2, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	4790      	blx	r2
    txRing = 0;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
  //							tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities=1);
  if ( rxRing == 0 ) rxRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANReceiveFrames, 7);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10f      	bne.n	800baa8 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x10e>
 800ba88:	2014      	movs	r0, #20
 800ba8a:	f00d fa47 	bl	8018f1c <_Znwj>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	461c      	mov	r4, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba98:	2207      	movs	r2, #7
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fb75 	bl	800c18c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
  if ( txRing == 0 ) txRing=new tPriorityRingBuffer<CAN_message_t>(MaxCANSendFrames, 7);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10f      	bne.n	800bad2 <_ZN15tNMEA2000_STM3219InitCANFrameBuffersEv+0x138>
 800bab2:	2014      	movs	r0, #20
 800bab4:	f00d fa32 	bl	8018f1c <_Znwj>
 800bab8:	4603      	mov	r3, r0
 800baba:	461c      	mov	r4, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bac2:	2207      	movs	r2, #7
 800bac4:	4619      	mov	r1, r3
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 fb60 	bl	800c18c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4

}
 800bad2:	bf00      	nop
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd90      	pop	{r4, r7, pc}

0800bada <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>:

// *****************************************************************************
bool tNMEA2000_STM32::CANwriteTxMailbox(unsigned long id, unsigned char len, const unsigned char *buf, bool extended) {
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	603b      	str	r3, [r7, #0]
 800bae6:	4613      	mov	r3, r2
 800bae8:	71fb      	strb	r3, [r7, #7]

	if (extended) {
 800baea:	7e3b      	ldrb	r3, [r7, #24]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x24>
		CANTxHeader.IDE = CAN_ID_EXT;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2204      	movs	r2, #4
 800baf4:	679a      	str	r2, [r3, #120]	; 0x78
		CANTxHeader.ExtId = id;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	675a      	str	r2, [r3, #116]	; 0x74
 800bafc:	e005      	b.n	800bb0a <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x30>
	} else {
		CANTxHeader.IDE = CAN_ID_STD;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	679a      	str	r2, [r3, #120]	; 0x78
		CANTxHeader.StdId = id;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	671a      	str	r2, [r3, #112]	; 0x70
	}
	CANTxHeader.RTR = CAN_RTR_DATA;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	67da      	str	r2, [r3, #124]	; 0x7c
	CANTxHeader.DLC = len;
 800bb10:	79fa      	ldrb	r2, [r7, #7]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CANTxHeader.TransmitGlobalTime = DISABLE;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    if ( len > 8 ) len = 8;
 800bb20:	79fb      	ldrb	r3, [r7, #7]
 800bb22:	2b08      	cmp	r3, #8
 800bb24:	d901      	bls.n	800bb2a <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x50>
 800bb26:	2308      	movs	r3, #8
 800bb28:	71fb      	strb	r3, [r7, #7]
    memcpy(CANTxdata, buf, len);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	33a4      	adds	r3, #164	; 0xa4
 800bb2e:	79fa      	ldrb	r2, [r7, #7]
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f00d fbf2 	bl	801931c <memcpy>
	//for (int i = 0; i < len; i++) {
	//	CANTxdata[i] = buf[i];
	//}

	// send message
	if (HAL_CAN_AddTxMessage(N2kCan, &CANTxHeader, CANTxdata, &CANTxMailbox) == HAL_OK) {
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	33b4      	adds	r3, #180	; 0xb4
 800bb4c:	f7f9 fb8a 	bl	8005264 <HAL_CAN_AddTxMessage>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2300      	movne	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x8a>
		return true;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e000      	b.n	800bb66 <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb+0x8c>
	} else {
		return false;
 800bb64:	2300      	movs	r3, #0
	}

}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <_ZN15tNMEA2000_STM3214sendFromTxRingEh>:

// *****************************************************************************
bool tNMEA2000_STM32::sendFromTxRing(uint8_t prio) {
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b086      	sub	sp, #24
 800bb72:	af02      	add	r7, sp, #8
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	70fb      	strb	r3, [r7, #3]
	const CAN_message_t *txMsg;

	txMsg = txRing->getReadRef(prio);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bb80:	78fa      	ldrb	r2, [r7, #3]
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fb6b 	bl	800c260 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>
 800bb8a:	60f8      	str	r0, [r7, #12]
	if ( txMsg != 0 ) {
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00f      	beq.n	800bbb2 <_ZN15tNMEA2000_STM3214sendFromTxRingEh+0x44>
		return CANwriteTxMailbox(txMsg->id, txMsg->len, txMsg->buf, txMsg->flags.extended);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6819      	ldr	r1, [r3, #0]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	7a1a      	ldrb	r2, [r3, #8]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f103 0009 	add.w	r0, r3, #9
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	791b      	ldrb	r3, [r3, #4]
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	4603      	mov	r3, r0
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff ff96 	bl	800bada <_ZN15tNMEA2000_STM3217CANwriteTxMailboxEmhPKhb>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	e000      	b.n	800bbb4 <_ZN15tNMEA2000_STM3214sendFromTxRingEh+0x46>
	} else {
		return false;
 800bbb2:	2300      	movs	r3, #0
	}

}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>:

// *****************************************************************************
void tNMEA2000_STM32::CANreadRxMailbox(CAN_HandleTypeDef *hcan) {
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
	CAN_message_t *rxMsg;
	uint8_t prio;

	if (hcan == N2kCan) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d157      	bne.n	800bc80 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xc4>
		if (HAL_CAN_GetRxMessage(hcan, RX_FIFO, &CANRxHeader, CANRxdata) == HAL_OK) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	33ac      	adds	r3, #172	; 0xac
 800bbe0:	6838      	ldr	r0, [r7, #0]
 800bbe2:	f7f9 fc4d 	bl	8005480 <HAL_CAN_GetRxMessage>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	bf0c      	ite	eq
 800bbec:	2301      	moveq	r3, #1
 800bbee:	2300      	movne	r3, #0
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d044      	beq.n	800bc80 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xc4>
			prio = (uint8_t)((CANRxHeader.ExtId >> 26) & 0x7);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfc:	0e9b      	lsrs	r3, r3, #26
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	f003 0307 	and.w	r3, r3, #7
 800bc04:	73fb      	strb	r3, [r7, #15]
			rxMsg = rxRing->getAddRef(prio);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bc0c:	7bfa      	ldrb	r2, [r7, #15]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 f995 	bl	800bf40 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>
 800bc16:	60b8      	str	r0, [r7, #8]
			if ( rxMsg!=0 ) {
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d025      	beq.n	800bc6a <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0xae>
				rxMsg->len = CANRxHeader.DLC;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	721a      	strb	r2, [r3, #8]
				if ( rxMsg->len > 8 ) rxMsg->len = 8;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	7a1b      	ldrb	r3, [r3, #8]
 800bc2e:	2b08      	cmp	r3, #8
 800bc30:	d902      	bls.n	800bc38 <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef+0x7c>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2208      	movs	r2, #8
 800bc36:	721a      	strb	r2, [r3, #8]
				rxMsg->flags.remote = CANRxHeader.RTR == CAN_RTR_REMOTE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	bf0c      	ite	eq
 800bc42:	2301      	moveq	r3, #1
 800bc44:	2300      	movne	r3, #0
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	715a      	strb	r2, [r3, #5]
				rxMsg->flags.extended = CANRxHeader.IDE == CAN_ID_EXT;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	bf0c      	ite	eq
 800bc56:	2301      	moveq	r3, #1
 800bc58:	2300      	movne	r3, #0
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	711a      	strb	r2, [r3, #4]
				rxMsg->id = CANRxHeader.ExtId;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	601a      	str	r2, [r3, #0]
			}
			memcpy(rxMsg->buf, CANRxdata, rxMsg->len);
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	f103 0009 	add.w	r0, r3, #9
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	7a1b      	ldrb	r3, [r3, #8]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f00d fb4e 	bl	801931c <memcpy>
		}
	}
	// I think we don't have to check the fifo fill level if we use interrups?
	// HAL_CAN_GetRxFifoFillLevel(*N2kCan, CAN_RX_FIFO1);

}
 800bc80:	bf00      	nop
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv>:
  * @param baudRate in kbit/s
  * @param clockSpeed enum of the clock connected to the CAN controller (APB1 for STM32F105=48mHz)
  * @retval bool success or not
  */
HAL_StatusTypeDef tNMEA2000_STM32::N2kCAN_Init()
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b088      	sub	sp, #32
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
	// CAN1000kbitPrescaler, TimeSeg1 and TimeSeg2 are configured for 1000 kbit/s @ defined clock speed
	// Baud rate has to be dividable by 1000 (500, 250, 200, 125, 100...)

	CAN_TypeDef *CANinstance;
#ifdef CAN1
	if (N2kCan == &hcan1) {
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc94:	4a45      	ldr	r2, [pc, #276]	; (800bdac <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x124>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d102      	bne.n	800bca0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x18>
		CANinstance = CAN1;
 800bc9a:	4b45      	ldr	r3, [pc, #276]	; (800bdb0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x128>)
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	e009      	b.n	800bcb4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x2c>
	}
#ifdef CAN2
	else if (N2kCan == &hcan2) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca4:	4a43      	ldr	r2, [pc, #268]	; (800bdb4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x12c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d102      	bne.n	800bcb0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x28>
		CANinstance = CAN2;
 800bcaa:	4b43      	ldr	r3, [pc, #268]	; (800bdb8 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x130>)
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	e001      	b.n	800bcb4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x2c>
		CANinstance = CAN3;
	}
#endif
	else {
		// CAN_HandleTypeDef *hcan is unknown
		return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e077      	b.n	800bda4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x11c>


	// usually the APB1 clock is running at the following speed if max clock frequencies are used:
	// STM32F103/105/107   36'000'000 Hz
	// STM32F405/407       42 000'000 Hz
	uint32_t APB1clockSpeed = HAL_RCC_GetPCLK1Freq();
 800bcb4:	f7fc fc7a 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
 800bcb8:	60f8      	str	r0, [r7, #12]

	if (APB1clockSpeed == 24000000) {
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	4a3f      	ldr	r2, [pc, #252]	; (800bdbc <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x134>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d107      	bne.n	800bcd2 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x4a>
		CAN1000kbitPrescaler = 2;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_10TQ;
 800bcc6:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800bcca:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_1TQ;
 800bccc:	2300      	movs	r3, #0
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	e028      	b.n	800bd24 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x9c>
	}
	else if (APB1clockSpeed == 36000000) {
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4a3a      	ldr	r2, [pc, #232]	; (800bdc0 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x138>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d108      	bne.n	800bcec <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x64>
		CAN1000kbitPrescaler = 2;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_15TQ;
 800bcde:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800bce2:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800bce4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bce8:	613b      	str	r3, [r7, #16]
 800bcea:	e01b      	b.n	800bd24 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x9c>
	}
	else if (APB1clockSpeed == 42000000) {
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4a35      	ldr	r2, [pc, #212]	; (800bdc4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x13c>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d108      	bne.n	800bd06 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x7e>
		CAN1000kbitPrescaler = 3;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_11TQ;
 800bcf8:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800bcfc:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800bcfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	e00e      	b.n	800bd24 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x9c>
	}
	else if (APB1clockSpeed == 48000000) {
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4a2f      	ldr	r2, [pc, #188]	; (800bdc8 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x140>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d108      	bne.n	800bd20 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x98>
		CAN1000kbitPrescaler = 3;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	61bb      	str	r3, [r7, #24]
		CANtimeSeg1 = CAN_BS1_13TQ;
 800bd12:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800bd16:	617b      	str	r3, [r7, #20]
		CANtimeSeg2 = CAN_BS2_2TQ;
 800bd18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	e001      	b.n	800bd24 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x9c>
	else {
		// There are no settings four your ABT1 clock speed yet!
		// On the following website you can find a matching prescaler, TS1 and TS2
		// Add the values for your clock speed and 1000kbit/s
		// http://www.bittiming.can-wiki.info/?CLK=36&ctype=bxCAN&SamplePoint=87.5
		return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e03f      	b.n	800bda4 <_ZN15tNMEA2000_STM3211N2kCAN_InitEv+0x11c>
	}

	N2kCan->Instance = CANinstance;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	601a      	str	r2, [r3, #0]
	N2kCan->Init.Prescaler = CAN1000kbitPrescaler * 1000 / CANbaudRate;
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd32:	fb02 f103 	mul.w	r1, r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd40:	fbb1 f2f2 	udiv	r2, r1, r2
 800bd44:	605a      	str	r2, [r3, #4]
	N2kCan->Init.Mode = CAN_MODE_NORMAL;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	609a      	str	r2, [r3, #8]
	N2kCan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd52:	2200      	movs	r2, #0
 800bd54:	60da      	str	r2, [r3, #12]
	N2kCan->Init.TimeSeg1 = CANtimeSeg1;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	611a      	str	r2, [r3, #16]
	N2kCan->Init.TimeSeg2 = CANtimeSeg2;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	615a      	str	r2, [r3, #20]
	N2kCan->Init.TimeTriggeredMode = DISABLE;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	761a      	strb	r2, [r3, #24]
	N2kCan->Init.AutoBusOff = DISABLE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd72:	2200      	movs	r2, #0
 800bd74:	765a      	strb	r2, [r3, #25]
	N2kCan->Init.AutoWakeUp = DISABLE;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	769a      	strb	r2, [r3, #26]
	N2kCan->Init.AutoRetransmission = DISABLE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd82:	2200      	movs	r2, #0
 800bd84:	76da      	strb	r2, [r3, #27]
	N2kCan->Init.ReceiveFifoLocked = DISABLE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	771a      	strb	r2, [r3, #28]
	N2kCan->Init.TransmitFifoPriority = DISABLE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd92:	2200      	movs	r2, #0
 800bd94:	775a      	strb	r2, [r3, #29]

	return HAL_CAN_Init(N2kCan);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f9 f843 	bl	8004e26 <HAL_CAN_Init>
 800bda0:	4603      	mov	r3, r0
 800bda2:	bf00      	nop
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20000274 	.word	0x20000274
 800bdb0:	40006400 	.word	0x40006400
 800bdb4:	2000029c 	.word	0x2000029c
 800bdb8:	40006800 	.word	0x40006800
 800bdbc:	016e3600 	.word	0x016e3600
 800bdc0:	02255100 	.word	0x02255100
 800bdc4:	0280de80 	.word	0x0280de80
 800bdc8:	02dc6c00 	.word	0x02dc6c00

0800bdcc <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm>:
  * @param  Mask uint32_t bit mask
  * @param  Filter uint32_t CAN identifier
  * @retval success or not
  */
HAL_StatusTypeDef tNMEA2000_STM32::SetN2kCANFilter( CAN_HandleTypeDef *hcan, bool ExtendedIdentifier, uint32_t FilterNum, uint32_t Mask, uint32_t Filter )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b092      	sub	sp, #72	; 0x48
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	603b      	str	r3, [r7, #0]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// For dual CAN MCU's we have 28 filter banks to share between the CAN busses
	// For single CAN SlaveStartFilterBank does nothing and we have 14 filter banks.
	// If not defined different we use filter 0 .. 13 for primary CAN bus and 14 ... 27 for secondary CAN bus
	#if !defined(SlaveStartFilterBank)
	const uint32_t SlaveStartFilterBank = 14;
 800bde2:	230e      	movs	r3, #14
 800bde4:	63fb      	str	r3, [r7, #60]	; 0x3c
	#endif

	#if defined(CAN2) // we have two CAN busses
		const int32_t TotalFilterBanks = 27;
 800bde6:	231b      	movs	r3, #27
 800bde8:	63bb      	str	r3, [r7, #56]	; 0x38
		const int32_t TotalFilterBanks = 13;
	#else // we have no CAN defined
		const int32_t TotalFilterBanks = -1;
	#endif

	int32_t FilterBank = -1;
 800bdea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdee:	643b      	str	r3, [r7, #64]	; 0x40
	if (hcan->Instance == CAN1
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a31      	ldr	r2, [pc, #196]	; (800bebc <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d108      	bne.n	800be0c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum <= TotalFilterBanks
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b1b      	cmp	r3, #27
 800bdfe:	d805      	bhi.n	800be0c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
			&& FilterNum < SlaveStartFilterBank ) {
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b0d      	cmp	r3, #13
 800be04:	d802      	bhi.n	800be0c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x40>
		FilterBank = FilterNum;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	643b      	str	r3, [r7, #64]	; 0x40
 800be0a:	e00a      	b.n	800be22 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
	}
	else if (hcan->Instance == CAN2
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a2b      	ldr	r2, [pc, #172]	; (800bec0 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d105      	bne.n	800be22 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
			&& FilterNum <= TotalFilterBanks - SlaveStartFilterBank) {
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b0d      	cmp	r3, #13
 800be1a:	d802      	bhi.n	800be22 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x56>
		FilterBank = FilterNum + SlaveStartFilterBank;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	330e      	adds	r3, #14
 800be20:	643b      	str	r3, [r7, #64]	; 0x40
	}

	if ( FilterBank >= 0
 800be22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	db42      	blt.n	800beae <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
			&& IS_CAN_ALL_INSTANCE(hcan->Instance) )
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a23      	ldr	r2, [pc, #140]	; (800bebc <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf0>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d004      	beq.n	800be3c <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x70>
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a22      	ldr	r2, [pc, #136]	; (800bec0 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xf4>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d138      	bne.n	800beae <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xe2>
	{
		CAN_FilterTypeDef sFilterConfig;

		sFilterConfig.FilterBank = FilterBank;
 800be3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800be40:	2300      	movs	r3, #0
 800be42:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800be44:	2301      	movs	r3, #1
 800be46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (ExtendedIdentifier == false)
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10c      	bne.n	800be68 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0x9c>
		{
			sFilterConfig.FilterMaskIdHigh = Mask << 5 & 0xFFFF;
 800be4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be50:	015b      	lsls	r3, r3, #5
 800be52:	b29b      	uxth	r3, r3
 800be54:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = 0x0000; // allows both remote request and data frames
 800be56:	2300      	movs	r3, #0
 800be58:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter << 5 & 0xFFFF;
 800be5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be5c:	015b      	lsls	r3, r3, #5
 800be5e:	b29b      	uxth	r3, r3
 800be60:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow =  0x0000;
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	e013      	b.n	800be90 <_ZN15tNMEA2000_STM3215SetN2kCANFilterEP19__CAN_HandleTypeDefbmmm+0xc4>
		}
		else
		{ // ExtendedIdentifier == true
			sFilterConfig.FilterMaskIdHigh = Mask >> 13 & 0xFFFF;
 800be68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6a:	0b5b      	lsrs	r3, r3, #13
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	61bb      	str	r3, [r7, #24]
			sFilterConfig.FilterMaskIdLow = (Mask << 3 & 0xFFF8) | (0x1 << 2);
 800be70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	b29b      	uxth	r3, r3
 800be76:	f043 0304 	orr.w	r3, r3, #4
 800be7a:	61fb      	str	r3, [r7, #28]
			sFilterConfig.FilterIdHigh = Filter >> 13 & 0xFFFF; // EXTID[28:13]
 800be7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be7e:	0b5b      	lsrs	r3, r3, #13
 800be80:	b29b      	uxth	r3, r3
 800be82:	613b      	str	r3, [r7, #16]
			sFilterConfig.FilterIdLow = (Filter << 3 & 0xFFF8) | (0x1 << 2); // EXTID[12:0] + IDE
 800be84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	b29b      	uxth	r3, r3
 800be8a:	f043 0304 	orr.w	r3, r3, #4
 800be8e:	617b      	str	r3, [r7, #20]
		}

		sFilterConfig.FilterFIFOAssignment = 0;
 800be90:	2300      	movs	r3, #0
 800be92:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800be94:	2301      	movs	r3, #1
 800be96:	633b      	str	r3, [r7, #48]	; 0x30
		sFilterConfig.SlaveStartFilterBank = SlaveStartFilterBank; // CAN 0: 0...13 // CAN 1: 14...27 (28 filter banks in total)
 800be98:	230e      	movs	r3, #14
 800be9a:	637b      	str	r3, [r7, #52]	; 0x34

		ret = HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800be9c:	f107 0310 	add.w	r3, r7, #16
 800bea0:	4619      	mov	r1, r3
 800bea2:	68b8      	ldr	r0, [r7, #8]
 800bea4:	f7f9 f8ba 	bl	800501c <HAL_CAN_ConfigFilter>
 800bea8:	4603      	mov	r3, r0
 800beaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	return ret;
 800beae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3748      	adds	r7, #72	; 0x48
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	40006400 	.word	0x40006400
 800bec0:	40006800 	.word	0x40006800

0800bec4 <HAL_CAN_RxFifo1MsgPendingCallback>:

// *****************************************************************************


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	// Call rxInterrupt method of the last tNMEA2000_STM32 instance.
	NMEA2000_STM32_instance->CANreadRxMailbox(hcan);
 800becc:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff fe72 	bl	800bbbc <_ZN15tNMEA2000_STM3216CANreadRxMailboxEP19__CAN_HandleTypeDef>
}
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20000a50 	.word	0x20000a50

0800bee4 <millis>:
	HAL_Delay(ms);
};


//*****************************************************************************
uint32_t millis(void) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800bee8:	f7f8 f976 	bl	80041d8 <HAL_GetTick>
 800beec:	4603      	mov	r3, r0
};
 800beee:	4618      	mov	r0, r3
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh>:
  delete[] priorityReferencies;
}

// *****************************************************************************
template<typename T>
bool tPriorityRingBuffer<T>::isEmpty(uint8_t _priority) const {
 800bef2:	b480      	push	{r7}
 800bef4:	b083      	sub	sp, #12
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	460b      	mov	r3, r1
 800befc:	70fb      	strb	r3, [r7, #3]
  if ( _priority>=maxPriorities) {
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	7a9b      	ldrb	r3, [r3, #10]
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d309      	bcc.n	800bf1c <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh+0x2a>
    return head==tail;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	889a      	ldrh	r2, [r3, #4]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	88db      	ldrh	r3, [r3, #6]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	bf0c      	ite	eq
 800bf14:	2301      	moveq	r3, #1
 800bf16:	2300      	movne	r3, #0
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	e00c      	b.n	800bf36 <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7isEmptyEh+0x44>
  } else {
    return priorityReferencies[_priority].next==INVALID_RING_REF;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	bf0c      	ite	eq
 800bf30:	2301      	moveq	r3, #1
 800bf32:	2300      	movne	r3, #0
 800bf34:	b2db      	uxtb	r3, r3
  }
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bc80      	pop	{r7}
 800bf3e:	4770      	bx	lr

0800bf40 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh>:
  return false;
}

// *****************************************************************************
template<typename T>
T *tPriorityRingBuffer<T>::getAddRef(uint8_t _priority) {
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  T *ret=0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60fb      	str	r3, [r7, #12]

  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7a9b      	ldrb	r3, [r3, #10]
 800bf54:	78fa      	ldrb	r2, [r7, #3]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d303      	bcc.n	800bf62 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x22>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7a9b      	ldrb	r3, [r3, #10]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	70fb      	strb	r3, [r7, #3]

  uint16_t nextEntry = (head + 1) % size;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	889b      	ldrh	r3, [r3, #4]
 800bf66:	3301      	adds	r3, #1
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	8912      	ldrh	r2, [r2, #8]
 800bf6c:	fb93 f1f2 	sdiv	r1, r3, r2
 800bf70:	fb01 f202 	mul.w	r2, r1, r2
 800bf74:	1a9b      	subs	r3, r3, r2
 800bf76:	817b      	strh	r3, [r7, #10]

  // Check if the ring buffer is full
  if ( nextEntry == tail ) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	88db      	ldrh	r3, [r3, #6]
 800bf7c:	897a      	ldrh	r2, [r7, #10]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d109      	bne.n	800bf96 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x56>
    clean();
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f9fb 	bl	800c37e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE5cleanEv>
    // check again
    if ( nextEntry == tail ) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	88db      	ldrh	r3, [r3, #6]
 800bf8c:	897a      	ldrh	r2, [r7, #10]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d101      	bne.n	800bf96 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0x56>
      RingBufferErrDbgf("tPriorityRingBuffer<T>::getAddRef, ring buffer full\n");
      return ret;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	e053      	b.n	800c03e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xfe>
    }
  }

  ret=&(buffer[head].Value);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	889b      	ldrh	r3, [r3, #4]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	440b      	add	r3, r1
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	4413      	add	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]
  buffer[head].priority=_priority;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	889b      	ldrh	r3, [r3, #4]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	440b      	add	r3, r1
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	759a      	strb	r2, [r3, #22]
  buffer[head].next=INVALID_RING_REF;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	889b      	ldrh	r3, [r3, #4]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	460b      	mov	r3, r1
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	440b      	add	r3, r1
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfdc:	829a      	strh	r2, [r3, #20]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	691a      	ldr	r2, [r3, #16]
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d108      	bne.n	800c004 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xc4>
    priorityReferencies[_priority].next=head;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	78fb      	ldrb	r3, [r7, #3]
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	8892      	ldrh	r2, [r2, #4]
 800c000:	801a      	strh	r2, [r3, #0]
 800c002:	e010      	b.n	800c026 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE9getAddRefEh+0xe6>
  } else {
    buffer[priorityReferencies[_priority].last].next=head;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	68da      	ldr	r2, [r3, #12]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6919      	ldr	r1, [r3, #16]
 800c00c:	78fb      	ldrb	r3, [r7, #3]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	440b      	add	r3, r1
 800c012:	885b      	ldrh	r3, [r3, #2]
 800c014:	4619      	mov	r1, r3
 800c016:	460b      	mov	r3, r1
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	440b      	add	r3, r1
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	4413      	add	r3, r2
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	8892      	ldrh	r2, [r2, #4]
 800c024:	829a      	strh	r2, [r3, #20]
  }
  priorityReferencies[_priority].last=head;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691a      	ldr	r2, [r3, #16]
 800c02a:	78fb      	ldrb	r3, [r7, #3]
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	8892      	ldrh	r2, [r2, #4]
 800c034:	805a      	strh	r2, [r3, #2]

  RingBufferDbgf("tPriorityRingBuffer<T>::getAddRef, added new item head:%u, priority:%u\n",head,_priority);

  // Bump the head to point to the next free entry
  head = nextEntry;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	897a      	ldrh	r2, [r7, #10]
 800c03a:	809a      	strh	r2, [r3, #4]

  return ret;
 800c03c:	68fb      	ldr	r3, [r7, #12]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh>:
  return ret;
}

// *****************************************************************************
template<typename T>
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t *_priority) {
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7a9b      	ldrb	r3, [r3, #10]
 800c058:	7bfa      	ldrb	r2, [r7, #15]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d21a      	bcs.n	800c094 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x4e>
    if ( priorityReferencies[_pri].next!=INVALID_RING_REF ) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c06e:	4293      	cmp	r3, r2
 800c070:	d00c      	beq.n	800c08c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x46>
      if ( _priority!=0 ) *_priority=_pri;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x38>
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	7bfa      	ldrb	r2, [r7, #15]
 800c07c:	701a      	strb	r2, [r3, #0]
      return getReadRef(_pri);
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	4619      	mov	r1, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f8ec 	bl	800c260 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>
 800c088:	4603      	mov	r3, r0
 800c08a:	e004      	b.n	800c096 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0x50>
  for ( uint8_t _pri=0; _pri<maxPriorities; _pri++ ) {
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	3301      	adds	r3, #1
 800c090:	73fb      	strb	r3, [r7, #15]
 800c092:	e7df      	b.n	800c054 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEPh+0xe>
    }
  }

  return 0;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <_ZNK19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE7getSizeEv>:
  tPriorityRef *priorityReferencies;

public:
  tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities=1);
  virtual ~tPriorityRingBuffer();
  uint16_t getSize() const { return size; }
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	891b      	ldrh	r3, [r3, #8]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bc80      	pop	{r7}
 800c0b2:	4770      	bx	lr

0800c0b4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev>:
tPriorityRingBuffer<T>::~tPriorityRingBuffer() {
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
}
 800c0bc:	4a0c      	ldr	r2, [pc, #48]	; (800c0f0 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x3c>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	601a      	str	r2, [r3, #0]
  delete[] buffer;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x20>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f00c ff22 	bl	8018f18 <_ZdaPv>
  delete[] priorityReferencies;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev+0x32>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f00c ff19 	bl	8018f18 <_ZdaPv>
}
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	08019aa8 	.word	0x08019aa8

0800c0f4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED0Ev>:
tPriorityRingBuffer<T>::~tPriorityRingBuffer() {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
}
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff ffd9 	bl	800c0b4 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEED1Ev>
 800c102:	2114      	movs	r1, #20
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f00c ff05 	bl	8018f14 <_ZdlPvj>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <_ZN15tNMEA2000_STM3213CAN_message_tUt_C1Ev>:
  protected:
    struct CAN_message_t {
      uint32_t id = 0;          // can identifier
  //    uint16_t timestamp = 0;   // time when message arrived
  //    uint8_t idhit = 0; // filter that id came from
      struct {
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	705a      	strb	r2, [r3, #1]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	709a      	strb	r2, [r3, #2]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	70da      	strb	r2, [r3, #3]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4618      	mov	r0, r3
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bc80      	pop	{r7}
 800c13e:	4770      	bx	lr

0800c140 <_ZN15tNMEA2000_STM3213CAN_message_tC1Ev>:
    struct CAN_message_t {
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3304      	adds	r3, #4
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff ffde 	bl	800c114 <_ZN15tNMEA2000_STM3213CAN_message_tUt_C1Ev>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2208      	movs	r2, #8
 800c15c:	721a      	strb	r2, [r3, #8]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3309      	adds	r3, #9
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	605a      	str	r2, [r3, #4]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10tValueSlotC1Ev>:
  struct tValueSlot {
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff ffdf 	bl	800c140 <_ZN15tNMEA2000_STM3213CAN_message_tC1Ev>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth>:
tPriorityRingBuffer<T>::tPriorityRingBuffer(uint16_t _size, uint8_t _maxPriorities) : 
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	807b      	strh	r3, [r7, #2]
 800c198:	4613      	mov	r3, r2
 800c19a:	707b      	strb	r3, [r7, #1]
    head(0), tail(0), size(_size), maxPriorities(_maxPriorities) {
 800c19c:	4a2e      	ldr	r2, [pc, #184]	; (800c258 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xcc>)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	809a      	strh	r2, [r3, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	80da      	strh	r2, [r3, #6]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	887a      	ldrh	r2, [r7, #2]
 800c1b2:	811a      	strh	r2, [r3, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	787a      	ldrb	r2, [r7, #1]
 800c1b8:	729a      	strb	r2, [r3, #10]
  if ( size<3 ) size=3;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	891b      	ldrh	r3, [r3, #8]
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d802      	bhi.n	800c1c8 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x3c>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2203      	movs	r2, #3
 800c1c6:	811a      	strh	r2, [r3, #8]
  if ( maxPriorities<1 ) maxPriorities=1;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7a9b      	ldrb	r3, [r3, #10]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x4a>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	729a      	strb	r2, [r3, #10]
  buffer=new tValueSlot[size];
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	891b      	ldrh	r3, [r3, #8]
 800c1da:	461c      	mov	r4, r3
 800c1dc:	4b1f      	ldr	r3, [pc, #124]	; (800c25c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xd0>)
 800c1de:	429c      	cmp	r4, r3
 800c1e0:	d804      	bhi.n	800c1ec <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x60>
 800c1e2:	4623      	mov	r3, r4
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	4423      	add	r3, r4
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	e001      	b.n	800c1f0 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x64>
 800c1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f00c fea4 	bl	8018f3e <_Znaj>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	461e      	mov	r6, r3
 800c1fa:	4635      	mov	r5, r6
 800c1fc:	1e63      	subs	r3, r4, #1
 800c1fe:	461c      	mov	r4, r3
 800c200:	2c00      	cmp	r4, #0
 800c202:	db05      	blt.n	800c210 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x84>
 800c204:	4628      	mov	r0, r5
 800c206:	f7ff ffb4 	bl	800c172 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10tValueSlotC1Ev>
 800c20a:	3518      	adds	r5, #24
 800c20c:	3c01      	subs	r4, #1
 800c20e:	e7f7      	b.n	800c200 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x74>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60de      	str	r6, [r3, #12]
  priorityReferencies=new tPriorityRef[maxPriorities];
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	7a9b      	ldrb	r3, [r3, #10]
 800c218:	461c      	mov	r4, r3
 800c21a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c21e:	429c      	cmp	r4, r3
 800c220:	d201      	bcs.n	800c226 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x9a>
 800c222:	00a3      	lsls	r3, r4, #2
 800c224:	e001      	b.n	800c22a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0x9e>
 800c226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c22a:	4618      	mov	r0, r3
 800c22c:	f00c fe87 	bl	8018f3e <_Znaj>
 800c230:	4603      	mov	r3, r0
 800c232:	461e      	mov	r6, r3
 800c234:	4635      	mov	r5, r6
 800c236:	1e63      	subs	r3, r4, #1
 800c238:	461c      	mov	r4, r3
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	db05      	blt.n	800c24a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xbe>
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 f8a6 	bl	800c390 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE12tPriorityRefC1Ev>
 800c244:	3504      	adds	r5, #4
 800c246:	3c01      	subs	r4, #1
 800c248:	e7f7      	b.n	800c23a <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEEC1Eth+0xae>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	611e      	str	r6, [r3, #16]
}
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c258:	08019aa8 	.word	0x08019aa8
 800c25c:	05555555 	.word	0x05555555

0800c260 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh>:
const T *tPriorityRingBuffer<T>::getReadRef(uint8_t _priority) {
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  const T *ret=0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	60fb      	str	r3, [r7, #12]
  if ( _priority>=maxPriorities ) _priority=maxPriorities-1;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7a9b      	ldrb	r3, [r3, #10]
 800c274:	78fa      	ldrb	r2, [r7, #3]
 800c276:	429a      	cmp	r2, r3
 800c278:	d303      	bcc.n	800c282 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x22>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	7a9b      	ldrb	r3, [r3, #10]
 800c27e:	3b01      	subs	r3, #1
 800c280:	70fb      	strb	r3, [r7, #3]
  uint16_t ref=priorityReferencies[_priority].next;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	817b      	strh	r3, [r7, #10]
  if ( ref==INVALID_RING_REF ) {
 800c290:	897b      	ldrh	r3, [r7, #10]
 800c292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c296:	4293      	cmp	r3, r2
 800c298:	d101      	bne.n	800c29e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x3e>
    return ret;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	e06a      	b.n	800c374 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x114>
  ret=&(buffer[ref].Value);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68d9      	ldr	r1, [r3, #12]
 800c2a2:	897a      	ldrh	r2, [r7, #10]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	60fb      	str	r3, [r7, #12]
  priorityReferencies[_priority].next=buffer[ref].next;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68d9      	ldr	r1, [r3, #12]
 800c2b4:	897a      	ldrh	r2, [r7, #10]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	4413      	add	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	18ca      	adds	r2, r1, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6919      	ldr	r1, [r3, #16]
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	440b      	add	r3, r1
 800c2ca:	8a92      	ldrh	r2, [r2, #20]
 800c2cc:	801a      	strh	r2, [r3, #0]
  if ( priorityReferencies[_priority].next==INVALID_RING_REF ) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	78fb      	ldrb	r3, [r7, #3]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d107      	bne.n	800c2f2 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0x92>
    priorityReferencies[_priority].last=INVALID_RING_REF;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	691a      	ldr	r2, [r3, #16]
 800c2e6:	78fb      	ldrb	r3, [r7, #3]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2f0:	805a      	strh	r2, [r3, #2]
  if ( ref==tail ) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	88db      	ldrh	r3, [r3, #6]
 800c2f6:	897a      	ldrh	r2, [r7, #10]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d12f      	bne.n	800c35c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
    for ( tail = (tail + 1) % size; tail!=head && buffer[tail].next==INVALID_RING_REF; tail = (tail + 1) % size );
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	88db      	ldrh	r3, [r3, #6]
 800c300:	3301      	adds	r3, #1
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	8912      	ldrh	r2, [r2, #8]
 800c306:	fb93 f1f2 	sdiv	r1, r3, r2
 800c30a:	fb01 f202 	mul.w	r2, r1, r2
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	80da      	strh	r2, [r3, #6]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	88da      	ldrh	r2, [r3, #6]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	889b      	ldrh	r3, [r3, #4]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d01c      	beq.n	800c35c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	88db      	ldrh	r3, [r3, #6]
 800c32a:	4619      	mov	r1, r3
 800c32c:	460b      	mov	r3, r1
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	440b      	add	r3, r1
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	4413      	add	r3, r2
 800c336:	8a9b      	ldrh	r3, [r3, #20]
 800c338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d10d      	bne.n	800c35c <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xfc>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	88db      	ldrh	r3, [r3, #6]
 800c344:	3301      	adds	r3, #1
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	8912      	ldrh	r2, [r2, #8]
 800c34a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c34e:	fb01 f202 	mul.w	r2, r1, r2
 800c352:	1a9b      	subs	r3, r3, r2
 800c354:	b29a      	uxth	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	80da      	strh	r2, [r3, #6]
 800c35a:	e7dc      	b.n	800c316 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE10getReadRefEh+0xb6>
  buffer[ref].next=INVALID_RING_REF; // Release slot
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	68d9      	ldr	r1, [r3, #12]
 800c360:	897a      	ldrh	r2, [r7, #10]
 800c362:	4613      	mov	r3, r2
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	4413      	add	r3, r2
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	440b      	add	r3, r1
 800c36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c370:	829a      	strh	r2, [r3, #20]
  return ret;
 800c372:	68fb      	ldr	r3, [r7, #12]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	bc80      	pop	{r7}
 800c37c:	4770      	bx	lr

0800c37e <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE5cleanEv>:
void tPriorityRingBuffer<T>::clean() {
 800c37e:	b480      	push	{r7}
 800c380:	b083      	sub	sp, #12
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
}
 800c386:	bf00      	nop
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bc80      	pop	{r7}
 800c38e:	4770      	bx	lr

0800c390 <_ZN19tPriorityRingBufferIN15tNMEA2000_STM3213CAN_message_tEE12tPriorityRefC1Ev>:
    tPriorityRef() : next(INVALID_RING_REF), last(INVALID_RING_REF) {;}
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c39e:	801a      	strh	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3a6:	805a      	strh	r2, [r3, #2]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr

0800c3b4 <_Z13N2kHasElapsedmmm>:
inline bool N2kHasElapsed(uint32_t Start, uint32_t Elapsed, uint32_t Now=N2kMillis()) { 
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
  return Now-(Start+Elapsed)<LONG_MAX; 
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	bf34      	ite	cc
 800c3d2:	2301      	movcc	r3, #1
 800c3d4:	2300      	movcs	r3, #0
 800c3d6:	b2db      	uxtb	r3, r3
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr

0800c3e2 <_ZN9tNMEA200018tDeviceInformationC1Ev>:
    tDeviceInformation() { DeviceInformation.Name=0; }
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6879      	ldr	r1, [r7, #4]
 800c3ec:	f04f 0200 	mov.w	r2, #0
 800c3f0:	f04f 0300 	mov.w	r3, #0
 800c3f4:	e9c1 2300 	strd	r2, r3, [r1]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bc80      	pop	{r7}
 800c402:	4770      	bx	lr

0800c404 <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>:
    uint32_t GetUniqueNumber() const { return DeviceInformation.UnicNumberAndManCode&0x1fffff; }
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	bc80      	pop	{r7}
 800c41c:	4770      	bx	lr

0800c41e <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>:
    uint16_t GetManufacturerCode() const { return DeviceInformation.UnicNumberAndManCode>>21; }
 800c41e:	b480      	push	{r7}
 800c420:	b083      	sub	sp, #12
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	0d5b      	lsrs	r3, r3, #21
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	4618      	mov	r0, r3
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	bc80      	pop	{r7}
 800c436:	4770      	bx	lr

0800c438 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>:
    uint64_t GetName() const { return DeviceInformation.Name; }
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	4610      	mov	r0, r2
 800c448:	4619      	mov	r1, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bc80      	pop	{r7}
 800c450:	4770      	bx	lr

0800c452 <_ZN9tNMEA200011IsBroadcastEh>:
        if (v) { ForwardMode |= HandleModeBit_OnlyKnownMessages;  } else { ForwardMode &= ~HandleModeBit_OnlyKnownMessages; }
      }

    void SetDebugMode(tDebugMode _dbMode);

    static bool IsBroadcast(unsigned char Source) { return Source==0xff; }
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	4603      	mov	r3, r0
 800c45a:	71fb      	strb	r3, [r7, #7]
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	2bff      	cmp	r3, #255	; 0xff
 800c460:	bf0c      	ite	eq
 800c462:	2301      	moveq	r3, #1
 800c464:	2300      	movne	r3, #0
 800c466:	b2db      	uxtb	r3, r3
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc80      	pop	{r7}
 800c470:	4770      	bx	lr
	...

0800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>:
#include "NMEA2000.h"

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
tN2kGroupFunctionHandler::tN2kGroupFunctionHandler(tNMEA2000 *_pNMEA2000, unsigned long _PGN)  {
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	4a0c      	ldr	r2, [pc, #48]	; (800c4b4 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m+0x40>)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	601a      	str	r2, [r3, #0]
  pNext=0;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	605a      	str	r2, [r3, #4]
  pNMEA2000=_pNMEA2000;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	611a      	str	r2, [r3, #16]
  PGN=_PGN;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	609a      	str	r2, [r3, #8]
  Proprietary=tNMEA2000::IsProprietaryMessage(PGN);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f004 fcdb 	bl	8010e58 <_ZN9tNMEA200020IsProprietaryMessageEm>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	731a      	strb	r2, [r3, #12]
}
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	08019ad8 	.word	0x08019ad8

0800c4b8 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Handle(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	b08f      	sub	sp, #60	; 0x3c
 800c4bc:	af04      	add	r7, sp, #16
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	71fb      	strb	r3, [r7, #7]
  if ( PGN!=PGNForGroupFunction && PGN!=0 ) return false;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d005      	beq.n	800c4de <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	e126      	b.n	800c72c <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x274>

  bool handled=false;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t ManufacturerCode;
  uint8_t IndustryGroup;
  uint8_t UniqueID;
  uint8_t NumberOfSelectionPairs;
  uint8_t NumberOfParameterPairs;
  bool Propr=(PGN!=0?Proprietary:tNMEA2000::IsProprietaryMessage(PGNForGroupFunction));
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x44>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	7b1b      	ldrb	r3, [r3, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	2301      	movne	r3, #1
 800c4f6:	2300      	moveq	r3, #0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	e008      	b.n	800c50e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x56>
 800c4fc:	6838      	ldr	r0, [r7, #0]
 800c4fe:	f004 fcab 	bl	8010e58 <_ZN9tNMEA200020IsProprietaryMessageEm>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	bf14      	ite	ne
 800c508:	2301      	movne	r3, #1
 800c50a:	2300      	moveq	r3, #0
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  switch (GroupFunctionCode) {
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	2b06      	cmp	r3, #6
 800c516:	f200 8107 	bhi.w	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
 800c51a:	a201      	add	r2, pc, #4	; (adr r2, 800c520 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>)
 800c51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c520:	0800c53d 	.word	0x0800c53d
 800c524:	0800c57f 	.word	0x0800c57f
 800c528:	0800c5d1 	.word	0x0800c5d1
 800c52c:	0800c613 	.word	0x0800c613
 800c530:	0800c68d 	.word	0x0800c68d
 800c534:	0800c695 	.word	0x0800c695
 800c538:	0800c70f 	.word	0x0800c70f
    case N2kgfc_Request:
      uint32_t TransmissionInterval;
      uint16_t TransmissionIntervalOffset;

        if (ParseRequestParams(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs)) {
 800c53c:	f107 0320 	add.w	r3, r7, #32
 800c540:	f107 021a 	add.w	r2, r7, #26
 800c544:	f107 011c 	add.w	r1, r7, #28
 800c548:	68b8      	ldr	r0, [r7, #8]
 800c54a:	f000 fab3 	bl	800cab4 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 80e0 	beq.w	800c716 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
          handled=HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3304      	adds	r3, #4
 800c55c:	681c      	ldr	r4, [r3, #0]
 800c55e:	69f9      	ldr	r1, [r7, #28]
 800c560:	8b78      	ldrh	r0, [r7, #26]
 800c562:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c568:	9201      	str	r2, [sp, #4]
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	4603      	mov	r3, r0
 800c56e:	460a      	mov	r2, r1
 800c570:	68b9      	ldr	r1, [r7, #8]
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	47a0      	blx	r4
 800c576:	4603      	mov	r3, r0
 800c578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 800c57c:	e0cb      	b.n	800c716 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x25e>
    case N2kgfc_Command:
      uint8_t PrioritySetting;

        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	7b5b      	ldrb	r3, [r3, #13]
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff ff65 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0xde>
          handled=true;  // We can mark this handled, since command is not allowed to broadcast.
 800c58e:	2301      	movs	r3, #1
 800c590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
          }
        }
      break;
 800c594:	e0c1      	b.n	800c71a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
          if (ParseCommandParams(N2kMsg,PrioritySetting,NumberOfParameterPairs)) {
 800c596:	f107 0220 	add.w	r2, r7, #32
 800c59a:	f107 0319 	add.w	r3, r7, #25
 800c59e:	4619      	mov	r1, r3
 800c5a0:	68b8      	ldr	r0, [r7, #8]
 800c5a2:	f000 fad7 	bl	800cb54 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 80b6 	beq.w	800c71a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
            handled=HandleCommand(N2kMsg,PrioritySetting,NumberOfParameterPairs,iDev);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	681c      	ldr	r4, [r3, #0]
 800c5b6:	7e7a      	ldrb	r2, [r7, #25]
 800c5b8:	f897 1020 	ldrb.w	r1, [r7, #32]
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	47a0      	blx	r4
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800c5ce:	e0a4      	b.n	800c71a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x262>
    case N2kgfc_Acknowledge:
      tN2kGroupFunctionPGNErrorCode PGNErrorCode;
      tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode;

        if (ParseAcknowledgeParams(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs)) {
 800c5d0:	f107 0320 	add.w	r3, r7, #32
 800c5d4:	f107 0217 	add.w	r2, r7, #23
 800c5d8:	f107 0118 	add.w	r1, r7, #24
 800c5dc:	68b8      	ldr	r0, [r7, #8]
 800c5de:	f000 fafb 	bl	800cbd8 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 809a 	beq.w	800c71e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
          handled=HandleAcknowledge(N2kMsg,PGNErrorCode,TransmissionOrPriorityErrorCode,NumberOfParameterPairs,iDev);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	330c      	adds	r3, #12
 800c5f0:	681c      	ldr	r4, [r3, #0]
 800c5f2:	7e39      	ldrb	r1, [r7, #24]
 800c5f4:	7df8      	ldrb	r0, [r7, #23]
 800c5f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5fc:	9201      	str	r2, [sp, #4]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	4603      	mov	r3, r0
 800c602:	460a      	mov	r2, r1
 800c604:	68b9      	ldr	r1, [r7, #8]
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	47a0      	blx	r4
 800c60a:	4603      	mov	r3, r0
 800c60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      break;
 800c610:	e085      	b.n	800c71e <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x266>
    case N2kgfc_Read:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	7b5b      	ldrb	r3, [r3, #13]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ff1b 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x172>
          handled=true;  // We can mark this handled, since read is not allowed to broadcast.
 800c622:	2301      	movs	r3, #1
 800c624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 800c628:	e07b      	b.n	800c722 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 800c62a:	f107 0022 	add.w	r0, r7, #34	; 0x22
 800c62e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800c632:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c636:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c63a:	9302      	str	r3, [sp, #8]
 800c63c:	f107 0320 	add.w	r3, r7, #32
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	4603      	mov	r3, r0
 800c64a:	68b8      	ldr	r0, [r7, #8]
 800c64c:	f000 faf8 	bl	800cc40 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d065      	beq.n	800c722 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
            handled=HandleReadFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3310      	adds	r3, #16
 800c65c:	681c      	ldr	r4, [r3, #0]
 800c65e:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 800c660:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 800c664:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c668:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c66c:	f897 1020 	ldrb.w	r1, [r7, #32]
 800c670:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c672:	9003      	str	r0, [sp, #12]
 800c674:	9102      	str	r1, [sp, #8]
 800c676:	9201      	str	r2, [sp, #4]
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	4633      	mov	r3, r6
 800c67c:	462a      	mov	r2, r5
 800c67e:	68b9      	ldr	r1, [r7, #8]
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	47a0      	blx	r4
 800c684:	4603      	mov	r3, r0
 800c686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800c68a:	e04a      	b.n	800c722 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26a>
    case N2kgfc_ReadReply:
      handled=true;
 800c68c:	2301      	movs	r3, #1
 800c68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800c692:	e049      	b.n	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
    case N2kgfc_Write:
        if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	7b5b      	ldrb	r3, [r3, #13]
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff feda 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d003      	beq.n	800c6ac <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x1f4>
          handled=true;  // We can mark this handled, since write is not allowed to broadcast.
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } else {
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
          }
        }
      break;
 800c6aa:	e03c      	b.n	800c726 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
          if (ParseReadOrWriteParams(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,Propr)) {
 800c6ac:	f107 0022 	add.w	r0, r7, #34	; 0x22
 800c6b0:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800c6b4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c6b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6bc:	9302      	str	r3, [sp, #8]
 800c6be:	f107 0320 	add.w	r3, r7, #32
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	68b8      	ldr	r0, [r7, #8]
 800c6ce:	f000 fab7 	bl	800cc40 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d026      	beq.n	800c726 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
            handled=HandleWriteFields(N2kMsg,ManufacturerCode,IndustryGroup,UniqueID,NumberOfSelectionPairs,NumberOfParameterPairs,iDev);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3318      	adds	r3, #24
 800c6de:	681c      	ldr	r4, [r3, #0]
 800c6e0:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 800c6e2:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 800c6e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c6ea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c6ee:	f897 1020 	ldrb.w	r1, [r7, #32]
 800c6f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c6f4:	9003      	str	r0, [sp, #12]
 800c6f6:	9102      	str	r1, [sp, #8]
 800c6f8:	9201      	str	r2, [sp, #4]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	4633      	mov	r3, r6
 800c6fe:	462a      	mov	r2, r5
 800c700:	68b9      	ldr	r1, [r7, #8]
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	47a0      	blx	r4
 800c706:	4603      	mov	r3, r0
 800c708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800c70c:	e00b      	b.n	800c726 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x26e>
    case N2kgfc_WriteReply:
      handled=true;
 800c70e:	2301      	movs	r3, #1
 800c710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800c714:	e008      	b.n	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 800c716:	bf00      	nop
 800c718:	e006      	b.n	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 800c71a:	bf00      	nop
 800c71c:	e004      	b.n	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 800c71e:	bf00      	nop
 800c720:	e002      	b.n	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 800c722:	bf00      	nop
 800c724:	e000      	b.n	800c728 <_ZN24tN2kGroupFunctionHandler6HandleERK7tN2kMsg21tN2kGroupFunctionCodemi+0x270>
      break;
 800c726:	bf00      	nop

  }

  return handled;
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	372c      	adds	r7, #44	; 0x2c
 800c730:	46bd      	mov	sp, r7
 800c732:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c734 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt>:
                              bool UseIntervalLimits,
                              uint32_t IntervalMax,
                              uint32_t IntervalMin,
                              bool UseOffsetLimits,
                              uint16_t OffsetMax
                              ) {
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	4611      	mov	r1, r2
 800c740:	461a      	mov	r2, r3
 800c742:	460b      	mov	r3, r1
 800c744:	80fb      	strh	r3, [r7, #6]
 800c746:	4613      	mov	r3, r2
 800c748:	717b      	strb	r3, [r7, #5]
           // happy, we accept also 0 offset
           (TransmissionIntervalOffset==0xffff
            || TransmissionIntervalOffset==0
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
           )
           ?
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c750:	d014      	beq.n	800c77c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0xFFFFFFFE  // Restore default
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	f113 0f02 	cmn.w	r3, #2
 800c758:	d010      	beq.n	800c77c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || TransmissionInterval==0           // Turn off
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00d      	beq.n	800c77c <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x48>
            || ( UseIntervalLimits && TransmissionInterval>=IntervalMin && TransmissionInterval<=IntervalMax)
 800c760:	797b      	ldrb	r3, [r7, #5]
 800c762:	f083 0301 	eor.w	r3, r3, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11a      	bne.n	800c7a2 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	429a      	cmp	r2, r3
 800c772:	d316      	bcc.n	800c7a2 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d812      	bhi.n	800c7a2 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
           ?
 800c77c:	88fb      	ldrh	r3, [r7, #6]
 800c77e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c782:	4293      	cmp	r3, r2
 800c784:	d00f      	beq.n	800c7a6 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || TransmissionIntervalOffset==0
 800c786:	88fb      	ldrh	r3, [r7, #6]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00c      	beq.n	800c7a6 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
            || ( UseOffsetLimits && TransmissionIntervalOffset<=OffsetMax)
 800c78c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c790:	f083 0301 	eor.w	r3, r3, #1
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	d103      	bne.n	800c7a2 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x6e>
 800c79a:	88fa      	ldrh	r2, [r7, #6]
 800c79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d901      	bls.n	800c7a6 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x72>
           ?
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <_ZN24tN2kGroupFunctionHandler54GetRequestGroupFunctionTransmissionOrPriorityErrorCodeEmtbmmbt+0x74>
 800c7a6:	2300      	movs	r3, #0
          N2kgfTPec_Acknowledge:
          N2kgfTPec_TransmitIntervalOrPriorityNotSupported);
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr

0800c7b2 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800c7b2:	b5b0      	push	{r4, r5, r7, lr}
 800c7b4:	b08a      	sub	sp, #40	; 0x28
 800c7b6:	af04      	add	r7, sp, #16
 800c7b8:	60f8      	str	r0, [r7, #12]
 800c7ba:	60b9      	str	r1, [r7, #8]
 800c7bc:	607a      	str	r2, [r7, #4]
 800c7be:	807b      	strh	r3, [r7, #2]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	691c      	ldr	r4, [r3, #16]
 800c7c4:	68b8      	ldr	r0, [r7, #8]
 800c7c6:	f000 f944 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f004 ff5b 	bl	801168c <_ZN9tNMEA20007IsTxPGNEmi>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681c      	ldr	r4, [r3, #0]
 800c7e0:	887a      	ldrh	r2, [r7, #2]
 800c7e2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	9302      	str	r3, [sp, #8]
 800c7ec:	2332      	movs	r3, #50	; 0x32
 800c7ee:	9301      	str	r3, [sp, #4]
 800c7f0:	f06f 030f 	mvn.w	r3, #15
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	47a0      	blx	r4
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_PGNTemporarilyNotAvailable:N2kgfPGNec_PGNNotSupported);
 800c802:	7d7b      	ldrb	r3, [r7, #21]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5a>
 800c808:	2302      	movs	r3, #2
 800c80a:	e000      	b.n	800c80e <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x5c>
 800c80c:	2301      	movs	r3, #1
 800c80e:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 800c810:	2300      	movs	r3, #0
 800c812:	753b      	strb	r3, [r7, #20]

    if ( PGNec==N2kgfPGNec_PGNNotSupported ) TORec=N2kgfTPec_Acknowledge; // Always acknoledge for unknown PGN.
 800c814:	7dbb      	ldrb	r3, [r7, #22]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d101      	bne.n	800c81e <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x6c>
 800c81a:	2300      	movs	r3, #0
 800c81c:	75fb      	strb	r3, [r7, #23]
    if ( PGNec==N2kgfPGNec_PGNTemporarilyNotAvailable ) {
 800c81e:	7dbb      	ldrb	r3, [r7, #22]
 800c820:	2b02      	cmp	r3, #2
 800c822:	d107      	bne.n	800c834 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      if ( TORec==N2kgfTPec_TransmitIntervalOrPriorityNotSupported ) { // Acknowledge PGN for known PGN but for invalid priority
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d102      	bne.n	800c830 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x7e>
        PGNec=N2kgfPGNec_Acknowledge;
 800c82a:	2300      	movs	r3, #0
 800c82c:	75bb      	strb	r3, [r7, #22]
 800c82e:	e001      	b.n	800c834 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0x82>
      } else {
        TORec=N2kgfTPec_Acknowledge; //N2kgfTPec_RequestNotSupported;
 800c830:	2300      	movs	r3, #0
 800c832:	75fb      	strb	r3, [r7, #23]
      }
    }

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	7b5b      	ldrb	r3, [r3, #13]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff fe0a 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800c83e:	4603      	mov	r3, r0
 800c840:	f083 0301 	eor.w	r3, r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	d016      	beq.n	800c878 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi+0xc6>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	691c      	ldr	r4, [r3, #16]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	7b1d      	ldrb	r5, [r3, #12]
 800c852:	68b8      	ldr	r0, [r7, #8]
 800c854:	f000 f8fd 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c858:	4602      	mov	r2, r0
 800c85a:	7d3b      	ldrb	r3, [r7, #20]
 800c85c:	9303      	str	r3, [sp, #12]
 800c85e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	7dfb      	ldrb	r3, [r7, #23]
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	7dbb      	ldrb	r3, [r7, #22]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	4613      	mov	r3, r2
 800c86e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c870:	4629      	mov	r1, r5
 800c872:	4620      	mov	r0, r4
 800c874:	f000 faaa 	bl	800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      PGNec,
                      TORec,
                      NumberOfParameterPairs, PARec);
    }

    return true;
 800c878:	2301      	movs	r3, #1
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bdb0      	pop	{r4, r5, r7, pc}

0800c882 <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t  NumberOfParameterPairs, int iDev) {
 800c882:	b5b0      	push	{r4, r5, r7, lr}
 800c884:	b08a      	sub	sp, #40	; 0x28
 800c886:	af04      	add	r7, sp, #16
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	4611      	mov	r1, r2
 800c88e:	461a      	mov	r2, r3
 800c890:	460b      	mov	r3, r1
 800c892:	71fb      	strb	r3, [r7, #7]
 800c894:	4613      	mov	r3, r2
 800c896:	71bb      	strb	r3, [r7, #6]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	691c      	ldr	r4, [r3, #16]
 800c89c:	68b8      	ldr	r0, [r7, #8]
 800c89e:	f000 f8d8 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f004 feef 	bl	801168c <_ZN9tNMEA20007IsTxPGNEmi>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	75bb      	strb	r3, [r7, #22]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_Acknowledge:N2kgfPGNec_PGNNotSupported);
 800c8b2:	7dbb      	ldrb	r3, [r7, #22]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3a>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e000      	b.n	800c8be <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x3c>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	757b      	strb	r3, [r7, #21]
    tN2kGroupFunctionTransmissionOrPriorityErrorCode TORec=N2kgfTPec_Acknowledge;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionParameterErrorCode PARec=N2kgfpec_Acknowledge;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	753b      	strb	r3, [r7, #20]

		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) TORec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b08      	cmp	r3, #8
 800c8cc:	d105      	bne.n	800c8da <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	2b0f      	cmp	r3, #15
 800c8d2:	d102      	bne.n	800c8da <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x58>
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	d001      	beq.n	800c8de <_ZN24tN2kGroupFunctionHandler13HandleCommandERK7tN2kMsghhi+0x5c>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	75fb      	strb	r3, [r7, #23]

    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	691c      	ldr	r4, [r3, #16]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	7b1d      	ldrb	r5, [r3, #12]
 800c8e6:	68b8      	ldr	r0, [r7, #8]
 800c8e8:	f000 f8b3 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	7d3b      	ldrb	r3, [r7, #20]
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	79bb      	ldrb	r3, [r7, #6]
 800c8f4:	9302      	str	r3, [sp, #8]
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	7d7b      	ldrb	r3, [r7, #21]
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	4613      	mov	r3, r2
 800c900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c902:	4629      	mov	r1, r5
 800c904:	4620      	mov	r0, r4
 800c906:	f000 fa61 	bl	800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    TORec,
                    NumberOfParameterPairs, PARec);

    return true;
 800c90a:	2301      	movs	r3, #1
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bdb0      	pop	{r4, r5, r7, pc}

0800c914 <_ZN24tN2kGroupFunctionHandler17HandleAcknowledgeERK7tN2kMsg29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodehi>:
//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleAcknowledge(const tN2kMsg &/*N2kMsg*/,
                                   tN2kGroupFunctionPGNErrorCode /*PGNErrorCode*/,
                                   tN2kGroupFunctionTransmissionOrPriorityErrorCode /*TransmissionOrPriorityErrorCode*/,
                                   uint8_t /*ParameterCount*/,
                                   int /*iDev*/) {
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	4611      	mov	r1, r2
 800c920:	461a      	mov	r2, r3
 800c922:	460b      	mov	r3, r1
 800c924:	71fb      	strb	r3, [r7, #7]
 800c926:	4613      	mov	r3, r2
 800c928:	71bb      	strb	r3, [r7, #6]
    // As default, simply return true meaning that received acknowledge has been handled.
    return true;
 800c92a:	2301      	movs	r3, #1
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	bc80      	pop	{r7}
 800c934:	4770      	bx	lr

0800c936 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 800c936:	b5b0      	push	{r4, r5, r7, lr}
 800c938:	b08a      	sub	sp, #40	; 0x28
 800c93a:	af04      	add	r7, sp, #16
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	4611      	mov	r1, r2
 800c942:	461a      	mov	r2, r3
 800c944:	460b      	mov	r3, r1
 800c946:	80fb      	strh	r3, [r7, #6]
 800c948:	4613      	mov	r3, r2
 800c94a:	717b      	strb	r3, [r7, #5]

    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	691c      	ldr	r4, [r3, #16]
 800c950:	68b8      	ldr	r0, [r7, #8]
 800c952:	f000 f87e 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c956:	4603      	mov	r3, r0
 800c958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c95a:	4619      	mov	r1, r3
 800c95c:	4620      	mov	r0, r4
 800c95e:	f004 fe95 	bl	801168c <_ZN9tNMEA20007IsTxPGNEmi>
 800c962:	4603      	mov	r3, r0
 800c964:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3a>
 800c96c:	2306      	movs	r3, #6
 800c96e:	e000      	b.n	800c972 <_ZN24tN2kGroupFunctionHandler16HandleReadFieldsERK7tN2kMsgthhhhi+0x3c>
 800c970:	2301      	movs	r3, #1
 800c972:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	691c      	ldr	r4, [r3, #16]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	7b1d      	ldrb	r5, [r3, #12]
 800c97c:	68b8      	ldr	r0, [r7, #8]
 800c97e:	f000 f868 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c982:	4602      	mov	r2, r0
 800c984:	2300      	movs	r3, #0
 800c986:	9303      	str	r3, [sp, #12]
 800c988:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c98c:	9302      	str	r3, [sp, #8]
 800c98e:	2300      	movs	r3, #0
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	7dbb      	ldrb	r3, [r7, #22]
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4613      	mov	r3, r2
 800c998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c99a:	4629      	mov	r1, r5
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fa15 	bl	800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);
    return true;
 800c9a2:	2301      	movs	r3, #1
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bdb0      	pop	{r4, r5, r7, pc}

0800c9ac <_ZN24tN2kGroupFunctionHandler21HandleReadFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleReadFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
    return true;
 800c9b8:	2301      	movs	r3, #1
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bc80      	pop	{r7}
 800c9c2:	4770      	bx	lr

0800c9c4 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi>:
                                  uint16_t /*ManufacturerCode*/, // This will be set to 0xffff for non-propprietary PNGs
                                  uint8_t /*IndustryGroup*/, // This will be set to 0xff for non-propprietary PNGs
                                  uint8_t /*UniqueID*/,
                                  uint8_t /*NumberOfSelectionPairs*/,
                                  uint8_t NumberOfParameterPairs,
                                  int iDev) {
 800c9c4:	b5b0      	push	{r4, r5, r7, lr}
 800c9c6:	b08a      	sub	sp, #40	; 0x28
 800c9c8:	af04      	add	r7, sp, #16
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	80fb      	strh	r3, [r7, #6]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	717b      	strb	r3, [r7, #5]
    // As default we respond with not supported.
    bool IsTxPGN=pNMEA2000->IsTxPGN(GetPGNForGroupFunction(N2kMsg),iDev);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	691c      	ldr	r4, [r3, #16]
 800c9de:	68b8      	ldr	r0, [r7, #8]
 800c9e0:	f000 f837 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f004 fe4e 	bl	801168c <_ZN9tNMEA20007IsTxPGNEmi>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]
    tN2kGroupFunctionPGNErrorCode PGNec=(IsTxPGN?N2kgfPGNec_ReadOrWriteNotSupported:N2kgfPGNec_PGNNotSupported);
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3a>
 800c9fa:	2306      	movs	r3, #6
 800c9fc:	e000      	b.n	800ca00 <_ZN24tN2kGroupFunctionHandler17HandleWriteFieldsERK7tN2kMsgthhhhi+0x3c>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	75bb      	strb	r3, [r7, #22]
    SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,GetPGNForGroupFunction(N2kMsg),
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	691c      	ldr	r4, [r3, #16]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	7b1d      	ldrb	r5, [r3, #12]
 800ca0a:	68b8      	ldr	r0, [r7, #8]
 800ca0c:	f000 f821 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800ca10:	4602      	mov	r2, r0
 800ca12:	2300      	movs	r3, #0
 800ca14:	9303      	str	r3, [sp, #12]
 800ca16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ca1a:	9302      	str	r3, [sp, #8]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	7dbb      	ldrb	r3, [r7, #22]
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	4613      	mov	r3, r2
 800ca26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 f9ce 	bl	800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                    PGNec,
                    N2kgfTPec_Acknowledge,
                    NumberOfParameterPairs, N2kgfpec_Acknowledge);

    return true;
 800ca30:	2301      	movs	r3, #1
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3718      	adds	r7, #24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bdb0      	pop	{r4, r5, r7, pc}

0800ca3a <_ZN24tN2kGroupFunctionHandler22HandleWriteFieldsReplyERK7tN2kMsgi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::HandleWriteFieldsReply(const tN2kMsg &/*N2kMsg*/,int /*iDev*/) {
 800ca3a:	b480      	push	{r7}
 800ca3c:	b085      	sub	sp, #20
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
    return true;
 800ca46:	2301      	movs	r3, #1
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bc80      	pop	{r7}
 800ca50:	4770      	bx	lr

0800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>:

// Static functions for PGN 126208 handling
//*****************************************************************************
unsigned long tN2kGroupFunctionHandler::GetPGNForGroupFunction(const tN2kMsg &N2kMsg) {
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b084      	sub	sp, #16
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  int Index=1;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
  return N2kMsg.Get3ByteUInt(Index);
 800ca5e:	f107 030c 	add.w	r3, r7, #12
 800ca62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f002 fadc 	bl	800f026 <_ZNK7tN2kMsg12Get3ByteUIntERim>
 800ca6e:	4603      	mov	r3, r0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::Parse(const tN2kMsg &N2kMsg,
                            tN2kGroupFunctionCode &GroupFunctionCode,
                            unsigned long &PGNForGroupFunction) {
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	4a09      	ldr	r2, [pc, #36]	; (800cab0 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x38>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d001      	beq.n	800ca92 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x1a>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e00a      	b.n	800caa8 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm+0x30>

  GroupFunctionCode=(tN2kGroupFunctionCode)(N2kMsg.Data[0]);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	7d1a      	ldrb	r2, [r3, #20]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	701a      	strb	r2, [r3, #0]
  PGNForGroupFunction=GetPGNForGroupFunction(N2kMsg);
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f7ff ffd9 	bl	800ca52 <_ZN24tN2kGroupFunctionHandler22GetPGNForGroupFunctionERK7tN2kMsg>
 800caa0:	4602      	mov	r2, r0
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	601a      	str	r2, [r3, #0]

  return true;
 800caa6:	2301      	movs	r3, #1
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	0001ed00 	.word	0x0001ed00

0800cab4 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseRequestParams(const tN2kMsg &N2kMsg,
                               uint32_t &TransmissionInterval,
                               uint16_t &TransmissionIntervalOffset,
                               uint8_t  &NumberOfParameterPairs) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	4a16      	ldr	r2, [pc, #88]	; (800cb20 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x6c>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d001      	beq.n	800cad0 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x1c>
 800cacc:	2300      	movs	r3, #0
 800cace:	e023      	b.n	800cb18 <_ZN24tN2kGroupFunctionHandler18ParseRequestParamsERK7tN2kMsgRmRtRh+0x64>
  int Index=N2kgf_OffsetToParams;
 800cad0:	2304      	movs	r3, #4
 800cad2:	617b      	str	r3, [r7, #20]
  TransmissionInterval=N2kMsg.Get4ByteUInt(Index);
 800cad4:	f107 0314 	add.w	r3, r7, #20
 800cad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cadc:	4619      	mov	r1, r3
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f002 fabb 	bl	800f05a <_ZNK7tN2kMsg12Get4ByteUIntERim>
 800cae4:	4602      	mov	r2, r0
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	601a      	str	r2, [r3, #0]
  TransmissionIntervalOffset=N2kMsg.Get2ByteUInt(Index);
 800caea:	f107 0314 	add.w	r3, r7, #20
 800caee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caf2:	4619      	mov	r1, r3
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f002 fa7b 	bl	800eff0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 800cafa:	4603      	mov	r3, r0
 800cafc:	461a      	mov	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	801a      	strh	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 800cb02:	f107 0314 	add.w	r3, r7, #20
 800cb06:	4619      	mov	r1, r3
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f002 fa57 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	701a      	strb	r2, [r3, #0]

  return true;
 800cb16:	2301      	movs	r3, #1
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	0001ed00 	.word	0x0001ed00

0800cb24 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseRequestPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	4a07      	ldr	r2, [pc, #28]	; (800cb50 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x2c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d001      	beq.n	800cb3c <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x18>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e003      	b.n	800cb44 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToRequestPairParameters;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	220b      	movs	r2, #11
 800cb40:	601a      	str	r2, [r3, #0]

  return true;
 800cb42:	2301      	movs	r3, #1
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bc80      	pop	{r7}
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	0001ed00 	.word	0x0001ed00

0800cb54 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseCommandParams(const tN2kMsg &N2kMsg,
                               uint8_t &PrioritySetting,
                               uint8_t &NumberOfParameterPairs) {
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
  if (N2kMsg.PGN!=126208L) return false;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	4a0f      	ldr	r2, [pc, #60]	; (800cba4 <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x50>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d001      	beq.n	800cb6e <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x1a>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e016      	b.n	800cb9c <_ZN24tN2kGroupFunctionHandler18ParseCommandParamsERK7tN2kMsgRhS3_+0x48>
  int Index=N2kgf_OffsetToParams;
 800cb6e:	2304      	movs	r3, #4
 800cb70:	617b      	str	r3, [r7, #20]
  PrioritySetting=N2kMsg.GetByte(Index);
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	4619      	mov	r1, r3
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f002 fa1f 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	461a      	mov	r2, r3
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 800cb86:	f107 0314 	add.w	r3, r7, #20
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f002 fa15 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800cb92:	4603      	mov	r3, r0
 800cb94:	461a      	mov	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	701a      	strb	r2, [r3, #0]

  return true;
 800cb9a:	2301      	movs	r3, #1
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	0001ed00 	.word	0x0001ed00

0800cba8 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::StartParseCommandPairParameters(const tN2kMsg &N2kMsg, int &Index) {
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	4a07      	ldr	r2, [pc, #28]	; (800cbd4 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x2c>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d001      	beq.n	800cbc0 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x18>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e003      	b.n	800cbc8 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi+0x20>
  Index=N2kgf_OffsetToCommandPairParameters;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2206      	movs	r2, #6
 800cbc4:	601a      	str	r2, [r3, #0]

  return true;
 800cbc6:	2301      	movs	r3, #1
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bc80      	pop	{r7}
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	0001ed00 	.word	0x0001ed00

0800cbd8 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh>:

//*****************************************************************************
bool tN2kGroupFunctionHandler::ParseAcknowledgeParams(const tN2kMsg &N2kMsg,
                               tN2kGroupFunctionPGNErrorCode &PGNErrorCode,
                               tN2kGroupFunctionTransmissionOrPriorityErrorCode &TransmissionOrPriorityErrorCode,
                               uint8_t &NumberOfParameterPairs) {
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b086      	sub	sp, #24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
  PGNErrorCode=N2kgfPGNec_PGNNotSupported;
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=0;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	701a      	strb	r2, [r3, #0]
  if (N2kMsg.PGN!=126208L) return false;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	4a0f      	ldr	r2, [pc, #60]	; (800cc3c <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x64>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d001      	beq.n	800cc06 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x2e>
 800cc02:	2300      	movs	r3, #0
 800cc04:	e015      	b.n	800cc32 <_ZN24tN2kGroupFunctionHandler22ParseAcknowledgeParamsERK7tN2kMsgR29tN2kGroupFunctionPGNErrorCodeR48tN2kGroupFunctionTransmissionOrPriorityErrorCodeRh+0x5a>
  int Index=N2kgf_OffsetToParams;
 800cc06:	2304      	movs	r3, #4
 800cc08:	613b      	str	r3, [r7, #16]
  uint8_t b=N2kMsg.GetByte(Index);
 800cc0a:	f107 0310 	add.w	r3, r7, #16
 800cc0e:	4619      	mov	r1, r3
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f002 f9d3 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800cc16:	4603      	mov	r3, r0
 800cc18:	75fb      	strb	r3, [r7, #23]
  PGNErrorCode=(tN2kGroupFunctionPGNErrorCode)(b&0x0f);
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
 800cc1c:	f003 030f 	and.w	r3, r3, #15
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	701a      	strb	r2, [r3, #0]
  TransmissionOrPriorityErrorCode=(tN2kGroupFunctionTransmissionOrPriorityErrorCode)(b>>4);
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	091b      	lsrs	r3, r3, #4
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	701a      	strb	r2, [r3, #0]

  return true;
 800cc30:	2301      	movs	r3, #1
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0001ed00 	.word	0x0001ed00

0800cc40 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b>:
                               uint16_t &ManufacturerCode,
                               uint8_t &IndustryGroup,
                               uint8_t &UniqueID,
                               uint8_t &NumberOfSelectionPairs,
                               uint8_t &NumberOfParameterPairs,
                               bool Proprietary) {
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	603b      	str	r3, [r7, #0]
  if (N2kMsg.PGN!=126208L) return false;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	4a25      	ldr	r2, [pc, #148]	; (800cce8 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa8>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d001      	beq.n	800cc5c <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x1c>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e041      	b.n	800cce0 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0xa0>
  int Index=N2kgf_OffsetToParams;
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	613b      	str	r3, [r7, #16]
  ManufacturerCode=0xffff; // We need here information is PGN proprietary or not
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc66:	801a      	strh	r2, [r3, #0]
  IndustryGroup=0xff;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	22ff      	movs	r2, #255	; 0xff
 800cc6c:	701a      	strb	r2, [r3, #0]
  if ( Proprietary ) {
 800cc6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d015      	beq.n	800cca2 <_ZN24tN2kGroupFunctionHandler22ParseReadOrWriteParamsERK7tN2kMsgRtRhS4_S4_S4_b+0x62>
    uint16_t ProprietaryInfo=N2kMsg.Get2ByteUInt(Index);
 800cc76:	f107 0310 	add.w	r3, r7, #16
 800cc7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc7e:	4619      	mov	r1, r3
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f002 f9b5 	bl	800eff0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 800cc86:	4603      	mov	r3, r0
 800cc88:	82fb      	strh	r3, [r7, #22]
    ManufacturerCode=ProprietaryInfo & 0x07ff;
 800cc8a:	8afb      	ldrh	r3, [r7, #22]
 800cc8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	801a      	strh	r2, [r3, #0]
    IndustryGroup=(ProprietaryInfo>>13) &0x07;
 800cc96:	8afb      	ldrh	r3, [r7, #22]
 800cc98:	0b5b      	lsrs	r3, r3, #13
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	701a      	strb	r2, [r3, #0]
  }
  UniqueID=N2kMsg.GetByte(Index);
 800cca2:	f107 0310 	add.w	r3, r7, #16
 800cca6:	4619      	mov	r1, r3
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f002 f987 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	701a      	strb	r2, [r3, #0]
  NumberOfSelectionPairs=N2kMsg.GetByte(Index);
 800ccb6:	f107 0310 	add.w	r3, r7, #16
 800ccba:	4619      	mov	r1, r3
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f002 f97d 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	701a      	strb	r2, [r3, #0]
  NumberOfParameterPairs=N2kMsg.GetByte(Index);
 800ccca:	f107 0310 	add.w	r3, r7, #16
 800ccce:	4619      	mov	r1, r3
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f002 f973 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	461a      	mov	r2, r3
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccdc:	701a      	strb	r2, [r3, #0]

  return true;
 800ccde:	2301      	movs	r3, #1
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	0001ed00 	.word	0x0001ed00

0800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>:

//*****************************************************************************
void tN2kGroupFunctionHandler::SetStartAcknowledge(tN2kMsg &N2kMsg, unsigned char Destination, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs) {
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	607a      	str	r2, [r7, #4]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	72fb      	strb	r3, [r7, #11]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	72bb      	strb	r3, [r7, #10]
  N2kMsg.Clear();
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	4798      	blx	r3
	N2kMsg.SetPGN(126208L);
 800cd0a:	4914      	ldr	r1, [pc, #80]	; (800cd5c <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh+0x70>)
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f001 ffe5 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=3;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2203      	movs	r2, #3
 800cd16:	711a      	strb	r2, [r3, #4]
  N2kMsg.Destination=Destination;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	7afa      	ldrb	r2, [r7, #11]
 800cd1c:	735a      	strb	r2, [r3, #13]
	N2kMsg.AddByte(N2kgfc_Acknowledge);
 800cd1e:	2102      	movs	r1, #2
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f002 f91b 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f002 f8df 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
  N2kMsg.AddByte(PGNErrorCode | TransmissionOrPriorityErrorCode<<4);
 800cd30:	7e3b      	ldrb	r3, [r7, #24]
 800cd32:	011b      	lsls	r3, r3, #4
 800cd34:	b25a      	sxtb	r2, r3
 800cd36:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b25b      	sxtb	r3, r3
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	4619      	mov	r1, r3
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f002 f90a 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NumberOfParameterPairs);
 800cd48:	7f3b      	ldrb	r3, [r7, #28]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f002 f905 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0001ed00 	.word	0x0001ed00

0800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>:
}

//*****************************************************************************
void tN2kGroupFunctionHandler::AddAcknowledgeParameter(tN2kMsg &N2kMsg,
                                         uint8_t ParameterPairIndex,
                                         tN2kGroupFunctionParameterErrorCode ErrorCode) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	70fb      	strb	r3, [r7, #3]
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	70bb      	strb	r3, [r7, #2]
  if ( ((ParameterPairIndex % 2) == 0) && (N2kMsg.DataLen>0) ) {
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10c      	bne.n	800cd94 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dd08      	ble.n	800cd94 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x34>
    N2kMsg.AddByte((uint8_t)(ErrorCode) | 0x0f << 4);
 800cd82:	78bb      	ldrb	r3, [r7, #2]
 800cd84:	f063 030f 	orn	r3, r3, #15
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f002 f8e5 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 800cd92:	e017      	b.n	800cdc4 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode+0x64>
  } else {
    // Should actually add AddBits to N2kMsg
    N2kMsg.Data[N2kMsg.DataLen-1]=(N2kMsg.Data[N2kMsg.DataLen-1] & 0x0f) | ((uint8_t)(ErrorCode) << 4);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	7d1b      	ldrb	r3, [r3, #20]
 800cda0:	b25b      	sxtb	r3, r3
 800cda2:	f003 030f 	and.w	r3, r3, #15
 800cda6:	b25a      	sxtb	r2, r3
 800cda8:	78bb      	ldrb	r3, [r7, #2]
 800cdaa:	011b      	lsls	r3, r3, #4
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	b25a      	sxtb	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	b2d1      	uxtb	r1, r2
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	460a      	mov	r2, r1
 800cdc0:	751a      	strb	r2, [r3, #20]
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	bf00      	nop
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>:
//*****************************************************************************
void tN2kGroupFunctionHandler::SendAcknowledge(tNMEA2000 *pNMEA2000, unsigned char Destination, int iDev, unsigned long PGN,
                                         tN2kGroupFunctionPGNErrorCode PGNErrorCode,
                                         tN2kGroupFunctionTransmissionOrPriorityErrorCode TransmissionOrPriorityErrorCode,
                                         uint8_t NumberOfParameterPairs,
                                         tN2kGroupFunctionParameterErrorCode ParameterErrorCodeForAll) {
 800cdcc:	b590      	push	{r4, r7, lr}
 800cdce:	b0c7      	sub	sp, #284	; 0x11c
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800cdd6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800cdda:	6020      	str	r0, [r4, #0]
 800cddc:	4608      	mov	r0, r1
 800cdde:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800cde2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800cde6:	600a      	str	r2, [r1, #0]
 800cde8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800cdec:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800cdf0:	6013      	str	r3, [r2, #0]
 800cdf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cdf6:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kRMsg;
 800cdfe:	f107 0010 	add.w	r0, r7, #16
 800ce02:	2300      	movs	r3, #0
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	2300      	movs	r3, #0
 800ce08:	2206      	movs	r2, #6
 800ce0a:	210f      	movs	r1, #15
 800ce0c:	f001 ff34 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

    // As default we respond with not supported.
    SetStartAcknowledge(N2kRMsg,Destination,PGN,
 800ce10:	f897 4120 	ldrb.w	r4, [r7, #288]	; 0x120
 800ce14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce18:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800ce1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce20:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800ce24:	7819      	ldrb	r1, [r3, #0]
 800ce26:	f107 0010 	add.w	r0, r7, #16
 800ce2a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	4623      	mov	r3, r4
 800ce38:	6812      	ldr	r2, [r2, #0]
 800ce3a:	f7ff ff57 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        PGNErrorCode,
                        TransmissionOrPriorityErrorCode,
                        NumberOfParameterPairs);
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ce44:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800ce48:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d20e      	bcs.n	800ce6e <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0xa2>
      AddAcknowledgeParameter(N2kRMsg,ParamIndex,ParameterErrorCodeForAll);
 800ce50:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 800ce54:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 800ce58:	f107 0310 	add.w	r3, r7, #16
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff ff7f 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (uint8_t ParamIndex=0; ParamIndex<NumberOfParameterPairs;ParamIndex++) {
 800ce62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ce66:	3301      	adds	r3, #1
 800ce68:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ce6c:	e7ea      	b.n	800ce44 <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode+0x78>
    }
    pNMEA2000->SendMsg(N2kRMsg,iDev);
 800ce6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce72:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800ce76:	f107 0110 	add.w	r1, r7, #16
 800ce7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce82:	6812      	ldr	r2, [r2, #0]
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	f005 fcff 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
}
 800ce8a:	bf00      	nop
 800ce8c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd90      	pop	{r4, r7, pc}

0800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>:
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
protected:
  bool TPMessage;
public:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
  bool IsTPMessage() const { return TPMessage; }
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bc80      	pop	{r7}
 800ceaa:	4770      	bx	lr

0800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>:
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
        Match=false;
      } else ErrorCode=N2kgfpec_Acknowledge;
    }

    void MatchRequestField(const char * FieldVal, const char * MatchVal, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 800ceac:	b590      	push	{r4, r7, lr}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
    {
      Match&=(strcmp(FieldVal,MatchVal)==0);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	461c      	mov	r4, r3
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	68b8      	ldr	r0, [r7, #8]
 800cec4:	f7f3 f9b0 	bl	8000228 <strcmp>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	bf0c      	ite	eq
 800cece:	2301      	moveq	r3, #1
 800ced0:	2300      	movne	r3, #0
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	4023      	ands	r3, r4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bf14      	ite	ne
 800ceda:	2301      	movne	r3, #1
 800cedc:	2300      	moveq	r3, #0
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	701a      	strb	r2, [r3, #0]
      ErrorCode = ( Match ? N2kgfpec_Acknowledge : N2kgfpec_RequestOrCommandParameterOutOfRange );
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x44>
 800ceec:	2200      	movs	r2, #0
 800ceee:	e000      	b.n	800cef2 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode+0x46>
 800cef0:	2203      	movs	r2, #3
 800cef2:	6a3b      	ldr	r3, [r7, #32]
 800cef4:	701a      	strb	r2, [r3, #0]
    }
 800cef6:	bf00      	nop
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd90      	pop	{r4, r7, pc}

0800cefe <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>:
    unsigned char GetDeviceInstanceLower() const { return DeviceInformation.DeviceInstance & 0x07; }
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	791b      	ldrb	r3, [r3, #4]
 800cf0a:	f003 0307 	and.w	r3, r3, #7
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	4618      	mov	r0, r3
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bc80      	pop	{r7}
 800cf18:	4770      	bx	lr

0800cf1a <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>:
    unsigned char GetDeviceInstanceUpper() const { return (DeviceInformation.DeviceInstance>>3) & 0x1f; }
 800cf1a:	b480      	push	{r7}
 800cf1c:	b083      	sub	sp, #12
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	791b      	ldrb	r3, [r3, #4]
 800cf26:	08db      	lsrs	r3, r3, #3
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr

0800cf34 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>:
    unsigned char GetDeviceFunction() const { return DeviceInformation.DeviceFunction; }
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	795b      	ldrb	r3, [r3, #5]
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bc80      	pop	{r7}
 800cf48:	4770      	bx	lr

0800cf4a <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>:
    unsigned char GetDeviceClass() const { return DeviceInformation.DeviceClass>>1; }
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	799b      	ldrb	r3, [r3, #6]
 800cf56:	085b      	lsrs	r3, r3, #1
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bc80      	pop	{r7}
 800cf62:	4770      	bx	lr

0800cf64 <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>:
    unsigned char GetIndustryGroup() const { return (DeviceInformation.IndustryGroupAndSystemInstance>>4) & 0x07; }
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	79db      	ldrb	r3, [r3, #7]
 800cf70:	091b      	lsrs	r3, r3, #4
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	f003 0307 	and.w	r3, r3, #7
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bc80      	pop	{r7}
 800cf82:	4770      	bx	lr

0800cf84 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>:
    unsigned char GetSystemInstance() const { return DeviceInformation.IndustryGroupAndSystemInstance&0x0f; }
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	79db      	ldrb	r3, [r3, #7]
 800cf90:	f003 030f 	and.w	r3, r3, #15
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	4618      	mov	r0, r3
 800cf98:	370c      	adds	r7, #12
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bc80      	pop	{r7}
 800cf9e:	4770      	bx	lr

0800cfa0 <_ZN9tNMEA200020GetDeviceInformationEi>:
    const tDeviceInformation GetDeviceInformation(int iDev=0) { if (iDev<0 || iDev>=DeviceCount) return tDeviceInformation(); return Devices[iDev].DeviceInformation; }
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	db04      	blt.n	800cfbc <_ZN9tNMEA200020GetDeviceInformationEi+0x1c>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	db03      	blt.n	800cfc4 <_ZN9tNMEA200020GetDeviceInformationEi+0x24>
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f7ff fa10 	bl	800c3e2 <_ZN9tNMEA200018tDeviceInformationC1Ev>
 800cfc2:	e00c      	b.n	800cfde <_ZN9tNMEA200020GetDeviceInformationEi+0x3e>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	69da      	ldr	r2, [r3, #28]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cfce:	fb01 f303 	mul.w	r3, r1, r3
 800cfd2:	4413      	add	r3, r2
 800cfd4:	68f9      	ldr	r1, [r7, #12]
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	e9c1 2300 	strd	r2, r3, [r1]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN60928::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800cfe8:	b5b0      	push	{r4, r5, r7, lr}
 800cfea:	b0d0      	sub	sp, #320	; 0x140
 800cfec:	af04      	add	r7, sp, #16
 800cfee:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800cff2:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 800cff6:	6020      	str	r0, [r4, #0]
 800cff8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800cffc:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 800d000:	6001      	str	r1, [r0, #0]
 800d002:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800d006:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 800d00a:	600a      	str	r2, [r1, #0]
 800d00c:	461a      	mov	r2, r3
 800d00e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d012:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d016:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 800d018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d01c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d020:	6818      	ldr	r0, [r3, #0]
 800d022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d026:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681c      	ldr	r4, [r3, #0]
 800d030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d034:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d038:	881a      	ldrh	r2, [r3, #0]
 800d03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d03e:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 800d042:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800d046:	9303      	str	r3, [sp, #12]
 800d048:	2300      	movs	r3, #0
 800d04a:	9302      	str	r3, [sp, #8]
 800d04c:	2332      	movs	r3, #50	; 0x32
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	f06f 030f 	mvn.w	r3, #15
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	2300      	movs	r3, #0
 800d058:	6809      	ldr	r1, [r1, #0]
 800d05a:	47a0      	blx	r4
 800d05c:	4603      	mov	r3, r0
 800d05e:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
  bool MatchFilter=true;
 800d062:	2301      	movs	r3, #1
 800d064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  tN2kMsg N2kRMsg;
 800d068:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d06c:	2300      	movs	r3, #0
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	2300      	movs	r3, #0
 800d072:	2206      	movs	r2, #6
 800d074:	210f      	movs	r1, #15
 800d076:	f001 fdff 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800d07a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d07e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	7b19      	ldrb	r1, [r3, #12]
 800d086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d08a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	689a      	ldr	r2, [r3, #8]
 800d092:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d096:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800d09a:	9301      	str	r3, [sp, #4]
 800d09c:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f7ff fe22 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // Always acknoledge for mandatory PGN
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 800d0a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d0ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	7b1a      	ldrb	r2, [r3, #12]
 800d0b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0bc:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800d0be:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 81d7 	beq.w	800d476 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
    int i;
    int Index;
    uint8_t field;
    tNMEA2000::tDeviceInformation DI=pNMEA2000->GetDeviceInformation(iDev);
 800d0c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d0cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6919      	ldr	r1, [r3, #16]
 800d0d4:	f107 0318 	add.w	r3, r7, #24
 800d0d8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff ff5f 	bl	800cfa0 <_ZN9tNMEA200020GetDeviceInformationEi>
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

    StartParseRequestPairParameters(N2kMsg,Index);
 800d0e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d0ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d0f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	6818      	ldr	r0, [r3, #0]
 800d0f8:	f7ff fd14 	bl	800cb24 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d102:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800d106:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d10a:	429a      	cmp	r2, r3
 800d10c:	da14      	bge.n	800d138 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 800d10e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10e      	bne.n	800d134 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x14c>
 800d116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d11a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	7b5b      	ldrb	r3, [r3, #13]
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff f995 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800d128:	4603      	mov	r3, r0
 800d12a:	f083 0301 	eor.w	r3, r3, #1
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x150>
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x152>
 800d138:	2300      	movs	r3, #0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 819b 	beq.w	800d476 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x48e>
      if ( !FoundInvalidField) {
 800d140:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d144:	f083 0301 	eor.w	r3, r3, #1
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 817a 	beq.w	800d444 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x45c>
        field=N2kMsg.GetByte(Index);
 800d150:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d158:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d15c:	4611      	mov	r1, r2
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	f001 ff2c 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d164:	4603      	mov	r3, r0
 800d166:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        switch (field) {
 800d16a:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 800d16e:	3b01      	subs	r3, #1
 800d170:	2b09      	cmp	r3, #9
 800d172:	f200 815a 	bhi.w	800d42a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x442>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x194>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d1a5 	.word	0x0800d1a5
 800d180:	0800d1eb 	.word	0x0800d1eb
 800d184:	0800d237 	.word	0x0800d237
 800d188:	0800d27f 	.word	0x0800d27f
 800d18c:	0800d2c7 	.word	0x0800d2c7
 800d190:	0800d30f 	.word	0x0800d30f
 800d194:	0800d331 	.word	0x0800d331
 800d198:	0800d379 	.word	0x0800d379
 800d19c:	0800d3c1 	.word	0x0800d3c1
 800d1a0:	0800d409 	.word	0x0800d409
          case N2kPGN60928_UniqueNumber_field:
            MatchRequestField(N2kMsg.Get3ByteUInt(Index),(uint32_t)DI.GetUniqueNumber(),(uint32_t)0x001fffff,MatchFilter,FieldErrorCode);
 800d1a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1ac:	681c      	ldr	r4, [r3, #0]
 800d1ae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d1b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	f001 ff31 	bl	800f026 <_ZNK7tN2kMsg12Get3ByteUIntERim>
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	f107 0318 	add.w	r3, r7, #24
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff f91a 	bl	800c404 <_ZNK9tNMEA200018tDeviceInformation15GetUniqueNumberEv>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	f107 0317 	add.w	r3, r7, #23
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	4bc7      	ldr	r3, [pc, #796]	; (800d4fc <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x514>)
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f001 fac8 	bl	800e778 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d1e8:	e132      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ManufacturerCode_field:
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),DI.GetManufacturerCode(),(uint16_t)0x07ff,MatchFilter,FieldErrorCode);
 800d1ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1ee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1f2:	681c      	ldr	r4, [r3, #0]
 800d1f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d1f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	f001 fef3 	bl	800eff0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 800d20a:	4603      	mov	r3, r0
 800d20c:	461d      	mov	r5, r3
 800d20e:	f107 0318 	add.w	r3, r7, #24
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff f903 	bl	800c41e <_ZNK9tNMEA200018tDeviceInformation19GetManufacturerCodeEv>
 800d218:	4603      	mov	r3, r0
 800d21a:	461a      	mov	r2, r3
 800d21c:	f107 0317 	add.w	r3, r7, #23
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d22c:	4629      	mov	r1, r5
 800d22e:	4620      	mov	r0, r4
 800d230:	f001 fabe 	bl	800e7b0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d234:	e10c      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceLower_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceLower(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 800d236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d23a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d23e:	681c      	ldr	r4, [r3, #0]
 800d240:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d248:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d24c:	4611      	mov	r1, r2
 800d24e:	6818      	ldr	r0, [r3, #0]
 800d250:	f001 feb4 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d254:	4603      	mov	r3, r0
 800d256:	461d      	mov	r5, r3
 800d258:	f107 0318 	add.w	r3, r7, #24
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fe4e 	bl	800cefe <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceLowerEv>
 800d262:	4603      	mov	r3, r0
 800d264:	461a      	mov	r2, r3
 800d266:	f107 0317 	add.w	r3, r7, #23
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	2307      	movs	r3, #7
 800d274:	4629      	mov	r1, r5
 800d276:	4620      	mov	r0, r4
 800d278:	f001 fabd 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d27c:	e0e8      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceInstanceUpper_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceInstanceUpper(),(uint8_t)0x1f,MatchFilter,FieldErrorCode);
 800d27e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d282:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d286:	681c      	ldr	r4, [r3, #0]
 800d288:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d28c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d290:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d294:	4611      	mov	r1, r2
 800d296:	6818      	ldr	r0, [r3, #0]
 800d298:	f001 fe90 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d29c:	4603      	mov	r3, r0
 800d29e:	461d      	mov	r5, r3
 800d2a0:	f107 0318 	add.w	r3, r7, #24
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff fe38 	bl	800cf1a <_ZNK9tNMEA200018tDeviceInformation22GetDeviceInstanceUpperEv>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f107 0317 	add.w	r3, r7, #23
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	231f      	movs	r3, #31
 800d2bc:	4629      	mov	r1, r5
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f001 fa99 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d2c4:	e0c4      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceFunction_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceFunction(),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 800d2c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2ca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d2ce:	681c      	ldr	r4, [r3, #0]
 800d2d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d2d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d2dc:	4611      	mov	r1, r2
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	f001 fe6c 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461d      	mov	r5, r3
 800d2e8:	f107 0318 	add.w	r3, r7, #24
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7ff fe21 	bl	800cf34 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceFunctionEv>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	f107 0317 	add.w	r3, r7, #23
 800d2fa:	9301      	str	r3, [sp, #4]
 800d2fc:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	23ff      	movs	r3, #255	; 0xff
 800d304:	4629      	mov	r1, r5
 800d306:	4620      	mov	r0, r4
 800d308:	f001 fa75 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d30c:	e0a0      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_Reserved_field:
            N2kMsg.GetByte(Index);
 800d30e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d316:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d31a:	4611      	mov	r1, r2
 800d31c:	6818      	ldr	r0, [r3, #0]
 800d31e:	f001 fe4d 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 800d322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d326:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d32a:	2200      	movs	r2, #0
 800d32c:	701a      	strb	r2, [r3, #0]
            break;
 800d32e:	e08f      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_DeviceClass_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetDeviceClass(),(uint8_t)0x7f,MatchFilter,FieldErrorCode);
 800d330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d334:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d338:	681c      	ldr	r4, [r3, #0]
 800d33a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d33e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d342:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d346:	4611      	mov	r1, r2
 800d348:	6818      	ldr	r0, [r3, #0]
 800d34a:	f001 fe37 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d34e:	4603      	mov	r3, r0
 800d350:	461d      	mov	r5, r3
 800d352:	f107 0318 	add.w	r3, r7, #24
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff fdf7 	bl	800cf4a <_ZNK9tNMEA200018tDeviceInformation14GetDeviceClassEv>
 800d35c:	4603      	mov	r3, r0
 800d35e:	461a      	mov	r2, r3
 800d360:	f107 0317 	add.w	r3, r7, #23
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	237f      	movs	r3, #127	; 0x7f
 800d36e:	4629      	mov	r1, r5
 800d370:	4620      	mov	r0, r4
 800d372:	f001 fa40 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d376:	e06b      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_SystemInstance_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetSystemInstance(),(uint8_t)0x0f,MatchFilter,FieldErrorCode);
 800d378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d37c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d380:	681c      	ldr	r4, [r3, #0]
 800d382:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d38a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d38e:	4611      	mov	r1, r2
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	f001 fe13 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d396:	4603      	mov	r3, r0
 800d398:	461d      	mov	r5, r3
 800d39a:	f107 0318 	add.w	r3, r7, #24
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7ff fdf0 	bl	800cf84 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f107 0317 	add.w	r3, r7, #23
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	230f      	movs	r3, #15
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f001 fa1c 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d3be:	e047      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_IndustryGroup_field:
            MatchRequestField(N2kMsg.GetByte(Index),DI.GetIndustryGroup(),(uint8_t)0x07,MatchFilter,FieldErrorCode);
 800d3c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d3c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d3c8:	681c      	ldr	r4, [r3, #0]
 800d3ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d3d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	6818      	ldr	r0, [r3, #0]
 800d3da:	f001 fdef 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	461d      	mov	r5, r3
 800d3e2:	f107 0318 	add.w	r3, r7, #24
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fdbc 	bl	800cf64 <_ZNK9tNMEA200018tDeviceInformation16GetIndustryGroupEv>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	f107 0317 	add.w	r3, r7, #23
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	f207 1327 	addw	r3, r7, #295	; 0x127
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	2307      	movs	r3, #7
 800d3fe:	4629      	mov	r1, r5
 800d400:	4620      	mov	r0, r4
 800d402:	f001 f9f8 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800d406:	e023      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          case N2kPGN60928_ISOSelfConfigurable_field:
            N2kMsg.GetByte(Index);
 800d408:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d40c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d410:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d414:	4611      	mov	r1, r2
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	f001 fdd0 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
            FieldErrorCode=N2kgfpec_Acknowledge;
 800d41c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d420:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d424:	2200      	movs	r2, #0
 800d426:	701a      	strb	r2, [r3, #0]
            break;
 800d428:	e012      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 800d42a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d42e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d432:	2201      	movs	r2, #1
 800d434:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 800d436:	2300      	movs	r3, #0
 800d438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            FoundInvalidField=true;
 800d43c:	2301      	movs	r3, #1
 800d43e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 800d442:	e005      	b.n	800d450 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x468>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 800d444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d448:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d44c:	2202      	movs	r2, #2
 800d44e:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 800d450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d454:	b2d9      	uxtb	r1, r3
 800d456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d45a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fc7b 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800d46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d46e:	3301      	adds	r3, #1
 800d470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d474:	e645      	b.n	800d102 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x11a>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 800d476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 800d47e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a2>
 800d486:	2301      	movs	r3, #1
 800d488:	e000      	b.n	800d48c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4a4>
 800d48a:	2300      	movs	r3, #0
 800d48c:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 800d490:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800d494:	f083 0301 	eor.w	r3, r3, #1
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d01c      	beq.n	800d4d8 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x4f0>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800d49e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	7b5b      	ldrb	r3, [r3, #13]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe ffd1 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	f083 0301 	eor.w	r3, r3, #1
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d019      	beq.n	800d4f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
 800d4bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d4cc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f005 f9d9 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d4d6:	e00b      	b.n	800d4f0 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleRequestERK7tN2kMsgmthi+0x508>
  } else {
    // Send delayed - there was problems with test tool with too fast response.
    pNMEA2000->SendIsoAddressClaim(0xff,iDev,2);
 800d4d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	6918      	ldr	r0, [r3, #16]
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800d4ea:	21ff      	movs	r1, #255	; 0xff
 800d4ec:	f007 faaa 	bl	8014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
  }

  return true;
 800d4f0:	2301      	movs	r3, #1
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d4fc:	001fffff 	.word	0x001fffff

0800d500 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 60928 can be used to set Device Instance Lower, Device Instance Upper and System Instance
// values on device name. They all are in padded to one byte.
bool tN2kGroupFunctionHandlerForPGN60928::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 800d500:	b590      	push	{r4, r7, lr}
 800d502:	b0cb      	sub	sp, #300	; 0x12c
 800d504:	af02      	add	r7, sp, #8
 800d506:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800d50a:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800d50e:	6020      	str	r0, [r4, #0]
 800d510:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800d514:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800d518:	6001      	str	r1, [r0, #0]
 800d51a:	4619      	mov	r1, r3
 800d51c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d520:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d524:	701a      	strb	r2, [r3, #0]
 800d526:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d52a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800d52e:	460a      	mov	r2, r1
 800d530:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  uint8_t DILower=0xff;
 800d532:	23ff      	movs	r3, #255	; 0xff
 800d534:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  uint8_t DIUpper=0xff;
 800d538:	23ff      	movs	r3, #255	; 0xff
 800d53a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
  uint8_t SI=0xff;
 800d53e:	23ff      	movs	r3, #255	; 0xff
 800d540:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 800d544:	2300      	movs	r3, #0
 800d546:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  tN2kGroupFunctionParameterErrorCode PARec;
  tN2kMsg N2kRMsg;
 800d54a:	f107 0014 	add.w	r0, r7, #20
 800d54e:	2300      	movs	r3, #0
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	2300      	movs	r3, #0
 800d554:	2206      	movs	r2, #6
 800d556:	210f      	movs	r1, #15
 800d558:	f001 fb8e 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800d55c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d560:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	7b19      	ldrb	r1, [r3, #12]
 800d568:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d56c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	f107 0014 	add.w	r0, r7, #20
 800d578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d57c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	9301      	str	r3, [sp, #4]
 800d584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	2300      	movs	r3, #0
 800d58c:	f7ff fbae 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    if (PrioritySetting!=8) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800d590:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d594:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b08      	cmp	r3, #8
 800d59c:	d002      	beq.n	800d5a4 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xa4>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    StartParseCommandPairParameters(N2kMsg,Index);
 800d5a4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d5a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d5ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	6818      	ldr	r0, [r3, #0]
 800d5b4:	f7ff faf8 	bl	800cba8 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d5be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d5c2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	da5d      	bge.n	800d68c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x18c>
      field=N2kMsg.GetByte(Index);
 800d5d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d5d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d5d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d5dc:	4611      	mov	r1, r2
 800d5de:	6818      	ldr	r0, [r3, #0]
 800d5e0:	f001 fcec 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      PARec=N2kgfpec_Acknowledge;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      switch (field) {
 800d5f0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800d5f4:	2b08      	cmp	r3, #8
 800d5f6:	d026      	beq.n	800d646 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x146>
 800d5f8:	2b08      	cmp	r3, #8
 800d5fa:	dc34      	bgt.n	800d666 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	d002      	beq.n	800d606 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x106>
 800d600:	2b04      	cmp	r3, #4
 800d602:	d010      	beq.n	800d626 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x126>
 800d604:	e02f      	b.n	800d666 <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x166>
        case N2kPGN60928_DeviceInstanceLower_field:
          DILower=N2kMsg.GetByte(Index) & 0x7;
 800d606:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d60a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d60e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d612:	4611      	mov	r1, r2
 800d614:	6818      	ldr	r0, [r3, #0]
 800d616:	f001 fcd1 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d61a:	4603      	mov	r3, r0
 800d61c:	f003 0307 	and.w	r3, r3, #7
 800d620:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
          break;
 800d624:	e022      	b.n	800d66c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_DeviceInstanceUpper_field:
          DIUpper=N2kMsg.GetByte(Index) & 0x1f;
 800d626:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d62a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d62e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d632:	4611      	mov	r1, r2
 800d634:	6818      	ldr	r0, [r3, #0]
 800d636:	f001 fcc1 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d63a:	4603      	mov	r3, r0
 800d63c:	f003 031f 	and.w	r3, r3, #31
 800d640:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
          break;
 800d644:	e012      	b.n	800d66c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        case N2kPGN60928_SystemInstance_field:
          SI=N2kMsg.GetByte(Index) & 0x0f;
 800d646:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d64a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d64e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d652:	4611      	mov	r1, r2
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	f001 fcb1 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d65a:	4603      	mov	r3, r0
 800d65c:	f003 030f 	and.w	r3, r3, #15
 800d660:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
          break;
 800d664:	e002      	b.n	800d66c <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0x16c>
        default:
          PARec=N2kgfpec_InvalidRequestOrCommandParameterField;
 800d666:	2301      	movs	r3, #1
 800d668:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
      }

      AddAcknowledgeParameter(N2kRMsg,i,PARec);
 800d66c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d670:	b2d9      	uxtb	r1, r3
 800d672:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 800d676:	f107 0314 	add.w	r3, r7, #20
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7ff fb70 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 800d680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d684:	3301      	adds	r3, #1
 800d686:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d68a:	e798      	b.n	800d5be <_ZN35tN2kGroupFunctionHandlerForPGN6092813HandleCommandERK7tN2kMsghhi+0xbe>
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 800d68c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d690:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	f107 0114 	add.w	r1, r7, #20
 800d69c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f005 f8f1 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
    pNMEA2000->SetDeviceInformationInstances(DILower,DIUpper,SI,iDev);
 800d6a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d6aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6918      	ldr	r0, [r3, #16]
 800d6b2:	f897 4119 	ldrb.w	r4, [r7, #281]	; 0x119
 800d6b6:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 800d6ba:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 800d6be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	f004 fa97 	bl	8011bf8 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>

    return true;
 800d6ca:	2301      	movs	r3, #1
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd90      	pop	{r4, r7, pc}

0800d6d6 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126464::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800d6d6:	b590      	push	{r4, r7, lr}
 800d6d8:	b0cd      	sub	sp, #308	; 0x134
 800d6da:	af04      	add	r7, sp, #16
 800d6dc:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800d6e0:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800d6e4:	6020      	str	r0, [r4, #0]
 800d6e6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800d6ea:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800d6ee:	6001      	str	r1, [r0, #0]
 800d6f0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800d6f4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800d6f8:	600a      	str	r2, [r1, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d700:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800d704:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 800d706:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d70a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d714:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681c      	ldr	r4, [r3, #0]
 800d71e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d722:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800d726:	881a      	ldrh	r2, [r3, #0]
 800d728:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d72c:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 800d730:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800d734:	9303      	str	r3, [sp, #12]
 800d736:	2300      	movs	r3, #0
 800d738:	9302      	str	r3, [sp, #8]
 800d73a:	2332      	movs	r3, #50	; 0x32
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	f06f 030f 	mvn.w	r3, #15
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	2300      	movs	r3, #0
 800d746:	6809      	ldr	r1, [r1, #0]
 800d748:	47a0      	blx	r4
 800d74a:	4603      	mov	r3, r0
 800d74c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  bool MatchFilter=true;
 800d750:	2301      	movs	r3, #1
 800d752:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t RespondTxRx=0xff;
 800d756:	23ff      	movs	r3, #255	; 0xff
 800d758:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  tN2kMsg N2kRMsg;
 800d75c:	f107 0014 	add.w	r0, r7, #20
 800d760:	2300      	movs	r3, #0
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	2300      	movs	r3, #0
 800d766:	2206      	movs	r2, #6
 800d768:	210f      	movs	r1, #15
 800d76a:	f001 fa85 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800d76e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d772:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	7b19      	ldrb	r1, [r3, #12]
 800d77a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d77e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	f107 0014 	add.w	r0, r7, #20
 800d78a:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	2300      	movs	r3, #0
 800d798:	f7ff faa8 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 800d79c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d7a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	7b1a      	ldrb	r2, [r3, #12]
 800d7a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d7ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d7b0:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800d7b2:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f000 8083 	beq.w	800d8c2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    StartParseRequestPairParameters(N2kMsg,Index);
 800d7c2:	f107 0210 	add.w	r2, r7, #16
 800d7c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d7ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f7ff f9a7 	bl	800cb24 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d7dc:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800d7e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	da14      	bge.n	800d812 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 800d7e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10e      	bne.n	800d80e <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x138>
 800d7f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d7f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	7b5b      	ldrb	r3, [r3, #13]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fe fe28 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800d802:	4603      	mov	r3, r0
 800d804:	f083 0301 	eor.w	r3, r3, #1
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13c>
 800d80e:	2301      	movs	r3, #1
 800d810:	e000      	b.n	800d814 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x13e>
 800d812:	2300      	movs	r3, #0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d054      	beq.n	800d8c2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1ec>
      if ( !FoundInvalidField) {
 800d818:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800d81c:	f083 0301 	eor.w	r3, r3, #1
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d03a      	beq.n	800d89c <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1c6>
        field=N2kMsg.GetByte(Index);
 800d826:	f107 0210 	add.w	r2, r7, #16
 800d82a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d82e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d832:	4611      	mov	r1, r2
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	f001 fbc1 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d83a:	4603      	mov	r3, r0
 800d83c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
        switch (field) {
 800d840:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800d844:	2b01      	cmp	r3, #1
 800d846:	d11f      	bne.n	800d888 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1b2>
          case 1: // Selection of Tx or Rx
            RespondTxRx=N2kMsg.GetByte(Index);
 800d848:	f107 0210 	add.w	r2, r7, #16
 800d84c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d850:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d854:	4611      	mov	r1, r2
 800d856:	6818      	ldr	r0, [r3, #0]
 800d858:	f001 fbb0 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800d85c:	4603      	mov	r3, r0
 800d85e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
            if ( RespondTxRx==N2kpgnl_transmit || RespondTxRx==N2kpgnl_receive ) {
 800d862:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x19c>
 800d86a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d103      	bne.n	800d87a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1a4>
              FieldErrorCode=N2kgfpec_Acknowledge;
 800d872:	2300      	movs	r3, #0
 800d874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            } else {
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
              MatchFilter=false;
            }
            break;
 800d878:	e013      	b.n	800d8a2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
              FieldErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 800d87a:	2303      	movs	r3, #3
 800d87c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
              MatchFilter=false;
 800d880:	2300      	movs	r3, #0
 800d882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800d886:	e00c      	b.n	800d8a2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 800d888:	2301      	movs	r3, #1
 800d88a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            MatchFilter=false;
 800d88e:	2300      	movs	r3, #0
 800d890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            FoundInvalidField=true;
 800d894:	2301      	movs	r3, #1
 800d896:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800d89a:	e002      	b.n	800d8a2 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x1cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 800d89c:	2302      	movs	r3, #2
 800d89e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 800d8a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d8a6:	b2d9      	uxtb	r1, r3
 800d8a8:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800d8ac:	f107 0314 	add.w	r3, r7, #20
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff fa55 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800d8b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d8c0:	e78c      	b.n	800d7dc <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x106>
    }
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 800d8c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d005      	beq.n	800d8d6 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 800d8ca:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x200>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e000      	b.n	800d8d8 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x202>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 800d8dc:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800d8e0:	f083 0301 	eor.w	r3, r3, #1
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d01c      	beq.n	800d924 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x24e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800d8ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d8ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	7b5b      	ldrb	r3, [r3, #13]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fe fdab 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	f083 0301 	eor.w	r3, r3, #1
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d072      	beq.n	800d9ee <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 800d908:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d90c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	f107 0114 	add.w	r1, r7, #20
 800d918:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d91c:	4618      	mov	r0, r3
 800d91e:	f004 ffb3 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800d922:	e064      	b.n	800d9ee <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 800d924:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d928:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	7b1b      	ldrb	r3, [r3, #12]
 800d930:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 800d934:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d938:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d93c:	6818      	ldr	r0, [r3, #0]
 800d93e:	f7ff faa9 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00d      	beq.n	800d964 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 800d948:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d94c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	7b5b      	ldrb	r3, [r3, #13]
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe fd7c 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x28e>
 800d960:	2301      	movs	r3, #1
 800d962:	e000      	b.n	800d966 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x290>
 800d964:	2300      	movs	r3, #0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d007      	beq.n	800d97a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2a4>
 800d96a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d96e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	7b5b      	ldrb	r3, [r3, #13]
 800d976:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 800d97a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2b4>
 800d982:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d986:	2bff      	cmp	r3, #255	; 0xff
 800d988:	d114      	bne.n	800d9b4 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2de>
 800d98a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d98e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	691c      	ldr	r4, [r3, #16]
 800d996:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d99a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d99e:	6818      	ldr	r0, [r3, #0]
 800d9a0:	f7ff fa78 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 800d9aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f007 f8fa 	bl	8014ba8 <_ZN9tNMEA200013SendTxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(dest,iDev,N2kMsg.IsTPMessage());
 800d9b4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d003      	beq.n	800d9c4 <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x2ee>
 800d9bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d9c0:	2bff      	cmp	r3, #255	; 0xff
 800d9c2:	d114      	bne.n	800d9ee <_ZN36tN2kGroupFunctionHandlerForPGN12646413HandleRequestERK7tN2kMsgmthi+0x318>
 800d9c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d9c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	691c      	ldr	r4, [r3, #16]
 800d9d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d9d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	f7ff fa5b 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 800d9e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f007 f9f3 	bl	8014dd4 <_ZN9tNMEA200013SendRxPGNListEhib>
    if ( (RespondTxRx==N2kpgnl_transmit) || (RespondTxRx==0xff) ) pNMEA2000->SendTxPGNList(N2kMsg.Source,iDev);
    if ( (RespondTxRx==N2kpgnl_receive) || (RespondTxRx==0xff) ) pNMEA2000->SendRxPGNList(N2kMsg.Source,iDev);
#endif
  }

  return true;
 800d9ee:	2301      	movs	r3, #1
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd90      	pop	{r4, r7, pc}
	...

0800d9fc <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126996::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	b0d5      	sub	sp, #340	; 0x154
 800da02:	af04      	add	r7, sp, #16
 800da04:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 800da08:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
 800da0c:	6030      	str	r0, [r6, #0]
 800da0e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800da12:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 800da16:	6001      	str	r1, [r0, #0]
 800da18:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800da1c:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 800da20:	600a      	str	r2, [r1, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800da28:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800da2c:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 800da2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800da32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800da36:	6818      	ldr	r0, [r3, #0]
 800da38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800da3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681e      	ldr	r6, [r3, #0]
 800da46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800da4a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800da4e:	881a      	ldrh	r2, [r3, #0]
 800da50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800da54:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 800da58:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	2300      	movs	r3, #0
 800da60:	9302      	str	r3, [sp, #8]
 800da62:	2332      	movs	r3, #50	; 0x32
 800da64:	9301      	str	r3, [sp, #4]
 800da66:	f06f 030f 	mvn.w	r3, #15
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	2300      	movs	r3, #0
 800da6e:	6809      	ldr	r1, [r1, #0]
 800da70:	47b0      	blx	r6
 800da72:	4603      	mov	r3, r0
 800da74:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  bool MatchFilter=true;
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
  tN2kMsg N2kRMsg;
 800da7e:	f107 0020 	add.w	r0, r7, #32
 800da82:	2300      	movs	r3, #0
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	2300      	movs	r3, #0
 800da88:	2206      	movs	r2, #6
 800da8a:	210f      	movs	r1, #15
 800da8c:	f001 f8f4 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800da90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800da94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	7b19      	ldrb	r1, [r3, #12]
 800da9c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800daa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	689a      	ldr	r2, [r3, #8]
 800daa8:	f107 0020 	add.w	r0, r7, #32
 800daac:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	2300      	movs	r3, #0
 800daba:	f7ff f917 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 800dabe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	7b1a      	ldrb	r2, [r3, #12]
 800daca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dace:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800dad2:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800dad4:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f000 8254 	beq.w	800df86 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x58a>
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
    }
 800dade:	466b      	mov	r3, sp
 800dae0:	461e      	mov	r6, r3
    bool FoundInvalidField=false;
 800dae2:	2300      	movs	r3, #0
 800dae4:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    size_t strSize=Max_N2kProductInfoStrLen;
 800dae8:	2321      	movs	r3, #33	; 0x21
 800daea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    char Query[strSize];
 800daee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800daf2:	1e59      	subs	r1, r3, #1
 800daf4:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800daf8:	460b      	mov	r3, r1
 800dafa:	3301      	adds	r3, #1
 800dafc:	2200      	movs	r2, #0
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	607a      	str	r2, [r7, #4]
 800db02:	f04f 0200 	mov.w	r2, #0
 800db06:	f04f 0300 	mov.w	r3, #0
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	00c3      	lsls	r3, r0, #3
 800db0e:	6838      	ldr	r0, [r7, #0]
 800db10:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800db14:	6838      	ldr	r0, [r7, #0]
 800db16:	00c2      	lsls	r2, r0, #3
 800db18:	460b      	mov	r3, r1
 800db1a:	3301      	adds	r3, #1
 800db1c:	2200      	movs	r2, #0
 800db1e:	469a      	mov	sl, r3
 800db20:	4693      	mov	fp, r2
 800db22:	f04f 0200 	mov.w	r2, #0
 800db26:	f04f 0300 	mov.w	r3, #0
 800db2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800db2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800db32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db36:	460b      	mov	r3, r1
 800db38:	3301      	adds	r3, #1
 800db3a:	3307      	adds	r3, #7
 800db3c:	08db      	lsrs	r3, r3, #3
 800db3e:	00db      	lsls	r3, r3, #3
 800db40:	ebad 0d03 	sub.w	sp, sp, r3
 800db44:	ab04      	add	r3, sp, #16
 800db46:	3300      	adds	r3, #0
 800db48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    char CurVal[strSize];
 800db4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800db50:	1e59      	subs	r1, r3, #1
 800db52:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800db56:	460b      	mov	r3, r1
 800db58:	3301      	adds	r3, #1
 800db5a:	2200      	movs	r2, #0
 800db5c:	4698      	mov	r8, r3
 800db5e:	4691      	mov	r9, r2
 800db60:	f04f 0200 	mov.w	r2, #0
 800db64:	f04f 0300 	mov.w	r3, #0
 800db68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800db6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800db70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800db74:	460b      	mov	r3, r1
 800db76:	3301      	adds	r3, #1
 800db78:	2200      	movs	r2, #0
 800db7a:	461c      	mov	r4, r3
 800db7c:	4615      	mov	r5, r2
 800db7e:	f04f 0200 	mov.w	r2, #0
 800db82:	f04f 0300 	mov.w	r3, #0
 800db86:	00eb      	lsls	r3, r5, #3
 800db88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800db8c:	00e2      	lsls	r2, r4, #3
 800db8e:	460b      	mov	r3, r1
 800db90:	3301      	adds	r3, #1
 800db92:	3307      	adds	r3, #7
 800db94:	08db      	lsrs	r3, r3, #3
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	ebad 0d03 	sub.w	sp, sp, r3
 800db9c:	ab04      	add	r3, sp, #16
 800db9e:	3300      	adds	r3, #0
 800dba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    StartParseRequestPairParameters(N2kMsg,Index);
 800dba4:	f107 021c 	add.w	r2, r7, #28
 800dba8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	6818      	ldr	r0, [r3, #0]
 800dbb4:	f7fe ffb6 	bl	800cb24 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800dbb8:	2300      	movs	r3, #0
 800dbba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800dbbe:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800dbc2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	da14      	bge.n	800dbf4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 800dbca:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10e      	bne.n	800dbf0 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f4>
 800dbd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	7b5b      	ldrb	r3, [r3, #13]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe fc37 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f083 0301 	eor.w	r3, r3, #1
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1f8>
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e000      	b.n	800dbf6 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1fa>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 81c4 	beq.w	800df84 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x588>
      if ( !FoundInvalidField) {
 800dbfc:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800dc00:	f083 0301 	eor.w	r3, r3, #1
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f000 81a3 	beq.w	800df52 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x556>
        field=N2kMsg.GetByte(Index);
 800dc0c:	f107 021c 	add.w	r2, r7, #28
 800dc10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dc14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dc18:	4611      	mov	r1, r2
 800dc1a:	6818      	ldr	r0, [r3, #0]
 800dc1c:	f001 f9ce 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800dc20:	4603      	mov	r3, r0
 800dc22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        switch (field) {
 800dc26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	2b07      	cmp	r3, #7
 800dc2e:	f200 8183 	bhi.w	800df38 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x53c>
 800dc32:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x23c>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc59 	.word	0x0800dc59
 800dc3c:	0800dcb1 	.word	0x0800dcb1
 800dc40:	0800dd09 	.word	0x0800dd09
 800dc44:	0800dd6b 	.word	0x0800dd6b
 800dc48:	0800ddcd 	.word	0x0800ddcd
 800dc4c:	0800de2f 	.word	0x0800de2f
 800dc50:	0800de91 	.word	0x0800de91
 800dc54:	0800dee5 	.word	0x0800dee5
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetN2kVersion(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 800dc58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dc5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dc60:	681c      	ldr	r4, [r3, #0]
 800dc62:	f107 011c 	add.w	r1, r7, #28
 800dc66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dc6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dc6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc72:	6818      	ldr	r0, [r3, #0]
 800dc74:	f001 f9bc 	bl	800eff0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	461d      	mov	r5, r3
 800dc7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dc80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f003 fdb1 	bl	80117f4 <_ZNK9tNMEA200013GetN2kVersionEi>
 800dc92:	4603      	mov	r3, r0
 800dc94:	461a      	mov	r2, r3
 800dc96:	f107 031b 	add.w	r3, r7, #27
 800dc9a:	9301      	str	r3, [sp, #4]
 800dc9c:	f207 131d 	addw	r3, r7, #285	; 0x11d
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dca6:	4629      	mov	r1, r5
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fd81 	bl	800e7b0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800dcae:	e156      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.Get2ByteUInt(Index),(uint16_t)pNMEA2000->GetProductCode(iDev),(uint16_t)0xffff,MatchFilter,FieldErrorCode);
 800dcb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dcb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dcb8:	681c      	ldr	r4, [r3, #0]
 800dcba:	f107 011c 	add.w	r1, r7, #28
 800dcbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dcc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dcc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcca:	6818      	ldr	r0, [r3, #0]
 800dccc:	f001 f990 	bl	800eff0 <_ZNK7tN2kMsg12Get2ByteUIntERit>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	461d      	mov	r5, r3
 800dcd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dcd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800dce4:	4618      	mov	r0, r3
 800dce6:	f003 fda6 	bl	8011836 <_ZNK9tNMEA200014GetProductCodeEi>
 800dcea:	4603      	mov	r3, r0
 800dcec:	461a      	mov	r2, r3
 800dcee:	f107 031b 	add.w	r3, r7, #27
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	f207 131d 	addw	r3, r7, #285	; 0x11d
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcfe:	4629      	mov	r1, r5
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 fd55 	bl	800e7b0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800dd06:	e12a      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelID_len,0xff,Index);
 800dd08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dd0c:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800dd10:	f107 031c 	add.w	r3, r7, #28
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	23ff      	movs	r3, #255	; 0xff
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	2320      	movs	r3, #32
 800dd1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dd20:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800dd24:	6800      	ldr	r0, [r0, #0]
 800dd26:	f001 f9d0 	bl	800f0ca <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 800dd2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dd2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6918      	ldr	r0, [r3, #16]
 800dd36:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800dd3a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800dd3e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800dd42:	f003 fd99 	bl	8011878 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800dd46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dd4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dd4e:	6818      	ldr	r0, [r3, #0]
 800dd50:	f207 121d 	addw	r2, r7, #285	; 0x11d
 800dd54:	f107 031b 	add.w	r3, r7, #27
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800dd60:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800dd64:	f7ff f8a2 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800dd68:	e0f9      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kSwCode_len,0xff,Index);
 800dd6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dd6e:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800dd72:	f107 031c 	add.w	r3, r7, #28
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	23ff      	movs	r3, #255	; 0xff
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	2320      	movs	r3, #32
 800dd7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dd82:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	f001 f99f 	bl	800f0ca <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 800dd8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dd90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	6918      	ldr	r0, [r3, #16]
 800dd98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800dd9c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800dda0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800dda4:	f003 fd68 	bl	8011878 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800dda8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ddac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f207 121d 	addw	r2, r7, #285	; 0x11d
 800ddb6:	f107 031b 	add.w	r3, r7, #27
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800ddc2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800ddc6:	f7ff f871 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800ddca:	e0c8      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelVersion_len,0xff,Index);
 800ddcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ddd0:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800ddd4:	f107 031c 	add.w	r3, r7, #28
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	23ff      	movs	r3, #255	; 0xff
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	2320      	movs	r3, #32
 800dde0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dde4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800dde8:	6800      	ldr	r0, [r0, #0]
 800ddea:	f001 f96e 	bl	800f0ca <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 800ddee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ddf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6918      	ldr	r0, [r3, #16]
 800ddfa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ddfe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800de02:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800de06:	f003 fd37 	bl	8011878 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800de0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800de12:	6818      	ldr	r0, [r3, #0]
 800de14:	f207 121d 	addw	r2, r7, #285	; 0x11d
 800de18:	f107 031b 	add.w	r3, r7, #27
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	4613      	mov	r3, r2
 800de20:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800de24:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800de28:	f7ff f840 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800de2c:	e097      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            N2kMsg.GetStr(strSize,Query,Max_N2kModelSerialCode_len,0xff,Index);
 800de2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de32:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800de36:	f107 031c 	add.w	r3, r7, #28
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	23ff      	movs	r3, #255	; 0xff
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	2320      	movs	r3, #32
 800de42:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800de46:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800de4a:	6800      	ldr	r0, [r0, #0]
 800de4c:	f001 f93d 	bl	800f0ca <_ZNK7tN2kMsg6GetStrEjPcjhRi>
            pNMEA2000->GetModelID(CurVal,strSize,iDev);
 800de50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6918      	ldr	r0, [r3, #16]
 800de5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800de60:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800de64:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800de68:	f003 fd06 	bl	8011878 <_ZNK9tNMEA200010GetModelIDEPcji>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800de6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800de74:	6818      	ldr	r0, [r3, #0]
 800de76:	f207 121d 	addw	r2, r7, #285	; 0x11d
 800de7a:	f107 031b 	add.w	r3, r7, #27
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4613      	mov	r3, r2
 800de82:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800de86:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800de8a:	f7ff f80f 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800de8e:	e066      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetCertificationLevel(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 800de90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800de98:	681c      	ldr	r4, [r3, #0]
 800de9a:	f107 021c 	add.w	r2, r7, #28
 800de9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dea6:	4611      	mov	r1, r2
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	f001 f887 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800deae:	4603      	mov	r3, r0
 800deb0:	461d      	mov	r5, r3
 800deb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800deb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800dec2:	4618      	mov	r0, r3
 800dec4:	f003 fd0c 	bl	80118e0 <_ZNK9tNMEA200021GetCertificationLevelEi>
 800dec8:	4603      	mov	r3, r0
 800deca:	461a      	mov	r2, r3
 800decc:	f107 031b 	add.w	r3, r7, #27
 800ded0:	9301      	str	r3, [sp, #4]
 800ded2:	f207 131d 	addw	r3, r7, #285	; 0x11d
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	23ff      	movs	r3, #255	; 0xff
 800deda:	4629      	mov	r1, r5
 800dedc:	4620      	mov	r0, r4
 800dede:	f000 fc8a 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800dee2:	e03c      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            MatchRequestField(N2kMsg.GetByte(Index),(uint8_t)pNMEA2000->GetLoadEquivalency(iDev),(uint8_t)0xff,MatchFilter,FieldErrorCode);
 800dee4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800deec:	681c      	ldr	r4, [r3, #0]
 800deee:	f107 021c 	add.w	r2, r7, #28
 800def2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800def6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800defa:	4611      	mov	r1, r2
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	f001 f85d 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800df02:	4603      	mov	r3, r0
 800df04:	461d      	mov	r5, r3
 800df06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800df16:	4618      	mov	r0, r3
 800df18:	f003 fd05 	bl	8011926 <_ZNK9tNMEA200018GetLoadEquivalencyEi>
 800df1c:	4603      	mov	r3, r0
 800df1e:	461a      	mov	r2, r3
 800df20:	f107 031b 	add.w	r3, r7, #27
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	f207 131d 	addw	r3, r7, #285	; 0x11d
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	23ff      	movs	r3, #255	; 0xff
 800df2e:	4629      	mov	r1, r5
 800df30:	4620      	mov	r0, r4
 800df32:	f000 fc60 	bl	800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800df36:	e012      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 800df38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df3c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800df40:	2201      	movs	r2, #1
 800df42:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 800df44:	2300      	movs	r3, #0
 800df46:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
            FoundInvalidField=true;
 800df4a:	2301      	movs	r3, #1
 800df4c:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 800df50:	e005      	b.n	800df5e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x562>
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 800df52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df56:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800df5a:	2202      	movs	r2, #2
 800df5c:	701a      	strb	r2, [r3, #0]
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 800df5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800df62:	b2d9      	uxtb	r1, r3
 800df64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df68:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800df6c:	781a      	ldrb	r2, [r3, #0]
 800df6e:	f107 0320 	add.w	r3, r7, #32
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe fef4 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800df78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800df7c:	3301      	adds	r3, #1
 800df7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800df82:	e61c      	b.n	800dbbe <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x1c2>
 800df84:	46b5      	mov	sp, r6
  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 800df86:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d005      	beq.n	800df9a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 800df8e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x59e>
 800df96:	2301      	movs	r3, #1
 800df98:	e000      	b.n	800df9c <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5a0>
 800df9a:	2300      	movs	r3, #0
 800df9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 800dfa0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800dfa4:	f083 0301 	eor.w	r3, r3, #1
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d01c      	beq.n	800dfe8 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x5ec>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800dfae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dfb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	7b5b      	ldrb	r3, [r3, #13]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe fa49 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	f083 0301 	eor.w	r3, r3, #1
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d04d      	beq.n	800e068 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
 800dfcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dfd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	691b      	ldr	r3, [r3, #16]
 800dfd8:	f107 0120 	add.w	r1, r7, #32
 800dfdc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f004 fc51 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800dfe6:	e03f      	b.n	800e068 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x66c>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 800dfe8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dfec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	7b1b      	ldrb	r3, [r3, #12]
 800dff4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 800dff8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e000:	6818      	ldr	r0, [r3, #0]
 800e002:	f7fe ff47 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00d      	beq.n	800e028 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 800e00c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	7b5b      	ldrb	r3, [r3, #13]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe fa1a 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d001      	beq.n	800e028 <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62c>
 800e024:	2301      	movs	r3, #1
 800e026:	e000      	b.n	800e02a <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x62e>
 800e028:	2300      	movs	r3, #0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d007      	beq.n	800e03e <_ZN36tN2kGroupFunctionHandlerForPGN12699613HandleRequestERK7tN2kMsgmthi+0x642>
 800e02e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	7b5b      	ldrb	r3, [r3, #13]
 800e03a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    pNMEA2000->SendProductInformation(dest,iDev,N2kMsg.IsTPMessage());
 800e03e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	691c      	ldr	r4, [r3, #16]
 800e04a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e04e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e052:	6818      	ldr	r0, [r3, #0]
 800e054:	f7fe ff1e 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800e058:	4603      	mov	r3, r0
 800e05a:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 800e05e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800e062:	4620      	mov	r0, r4
 800e064:	f007 f8b6 	bl	80151d4 <_ZN9tNMEA200022SendProductInformationEhib>
#else
    pNMEA2000->SendProductInformation(iDev);
#endif
  }

  return true;
 800e068:	2301      	movs	r3, #1
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e070:	46bd      	mov	sp, r7
 800e072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e076:	bf00      	nop

0800e078 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi>:
// For requirements for handling Group function request for PGN 60928
bool tN2kGroupFunctionHandlerForPGN126998::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800e078:	b590      	push	{r4, r7, lr}
 800e07a:	b0f3      	sub	sp, #460	; 0x1cc
 800e07c:	af04      	add	r7, sp, #16
 800e07e:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 800e082:	f5a4 74d6 	sub.w	r4, r4, #428	; 0x1ac
 800e086:	6020      	str	r0, [r4, #0]
 800e088:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 800e08c:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800e090:	6001      	str	r1, [r0, #0]
 800e092:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 800e096:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 800e09a:	600a      	str	r2, [r1, #0]
 800e09c:	461a      	mov	r2, r3
 800e09e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e0a2:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 800e0a6:	801a      	strh	r2, [r3, #0]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset);
 800e0a8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e0ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e0b0:	6818      	ldr	r0, [r3, #0]
 800e0b2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e0b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681c      	ldr	r4, [r3, #0]
 800e0c0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e0c4:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
 800e0c8:	881a      	ldrh	r2, [r3, #0]
 800e0ca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e0ce:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 800e0d2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800e0d6:	9303      	str	r3, [sp, #12]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9302      	str	r3, [sp, #8]
 800e0dc:	2332      	movs	r3, #50	; 0x32
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	f06f 030f 	mvn.w	r3, #15
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	6809      	ldr	r1, [r1, #0]
 800e0ea:	47a0      	blx	r4
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
  bool MatchFilter=true;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
  tN2kMsg N2kRMsg;
 800e0f8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	2300      	movs	r3, #0
 800e102:	2206      	movs	r2, #6
 800e104:	210f      	movs	r1, #15
 800e106:	f000 fdb7 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  // Start to build response
  SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800e10a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e10e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	7b19      	ldrb	r1, [r3, #12]
 800e116:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e11a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	689a      	ldr	r2, [r3, #8]
 800e122:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800e126:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	2300      	movs	r3, #0
 800e134:	f7fe fdda 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                      N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                      pec,
                      NumberOfParameterPairs);
  N2kRMsg.Destination=N2kMsg.Source;
 800e138:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e13c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	7b1a      	ldrb	r2, [r3, #12]
 800e144:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e14c:	735a      	strb	r2, [r3, #13]

  if ( NumberOfParameterPairs>0 ) { // We need to filter accroding to fiels
 800e14e:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 8109 	beq.w	800e36a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
    int i;
    int Index;
    uint8_t field;
    tN2kGroupFunctionParameterErrorCode FieldErrorCode;
    bool FoundInvalidField=false;
 800e158:	2300      	movs	r3, #0
 800e15a:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
    char Query[Max_N2kConfigurationInfoField_len];
    char CurVal[Max_N2kConfigurationInfoField_len];
    size_t QueryStrSize;

    StartParseRequestPairParameters(N2kMsg,Index);
 800e15e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800e162:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e166:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e16a:	4611      	mov	r1, r2
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f7fe fcd9 	bl	800cb24 <_ZN24tN2kGroupFunctionHandler31StartParseRequestPairParametersERK7tN2kMsgRi>
    // Next read new field values. Note that if message is not broadcast, we need to parse all fields always.
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800e172:	2300      	movs	r3, #0
 800e174:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800e178:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800e17c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800e180:	429a      	cmp	r2, r3
 800e182:	da14      	bge.n	800e1ae <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 800e184:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10e      	bne.n	800e1aa <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x132>
 800e18c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e190:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	7b5b      	ldrb	r3, [r3, #13]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe f95a 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	f083 0301 	eor.w	r3, r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x136>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e000      	b.n	800e1b0 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x138>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 80da 	beq.w	800e36a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2f2>
      if ( !FoundInvalidField) {
 800e1b6:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800e1ba:	f083 0301 	eor.w	r3, r3, #1
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 80b9 	beq.w	800e338 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2c0>
        field=N2kMsg.GetByte(Index);
 800e1c6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800e1ca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e1ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	f000 fef1 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
        switch (field) {
 800e1e0:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d069      	beq.n	800e2bc <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x244>
 800e1e8:	2b03      	cmp	r3, #3
 800e1ea:	f300 8098 	bgt.w	800e31e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d002      	beq.n	800e1f8 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x180>
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d031      	beq.n	800e25a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x1e2>
 800e1f6:	e092      	b.n	800e31e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2a6>
          case N2kPGN126998_InstallationDescription1_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 800e1f8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e1fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e200:	2247      	movs	r2, #71	; 0x47
 800e202:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 800e204:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e208:	f107 0214 	add.w	r2, r7, #20
 800e20c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800e210:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 800e214:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800e218:	6800      	ldr	r0, [r0, #0]
 800e21a:	f000 ffd6 	bl	800f1ca <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription1(CurVal,Max_N2kConfigurationInfoField_len);
 800e21e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e222:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e22e:	2247      	movs	r2, #71	; 0x47
 800e230:	4618      	mov	r0, r3
 800e232:	f003 fc17 	bl	8011a64 <_ZN9tNMEA200027GetInstallationDescription1EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800e236:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e23a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e23e:	6818      	ldr	r0, [r3, #0]
 800e240:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 800e244:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e248:	f107 0114 	add.w	r1, r7, #20
 800e24c:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	4623      	mov	r3, r4
 800e254:	f7fe fe2a 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800e258:	e074      	b.n	800e344 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_InstallationDescription2_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 800e25a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e25e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e262:	2247      	movs	r2, #71	; 0x47
 800e264:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 800e266:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e26a:	f107 0214 	add.w	r2, r7, #20
 800e26e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800e272:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 800e276:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800e27a:	6800      	ldr	r0, [r0, #0]
 800e27c:	f000 ffa5 	bl	800f1ca <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetInstallationDescription2(CurVal,Max_N2kConfigurationInfoField_len);
 800e280:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e284:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e290:	2247      	movs	r2, #71	; 0x47
 800e292:	4618      	mov	r0, r3
 800e294:	f003 fc03 	bl	8011a9e <_ZN9tNMEA200027GetInstallationDescription2EPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800e298:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e29c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e2a0:	6818      	ldr	r0, [r3, #0]
 800e2a2:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 800e2a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e2aa:	f107 0114 	add.w	r1, r7, #20
 800e2ae:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	4623      	mov	r3, r4
 800e2b6:	f7fe fdf9 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800e2ba:	e043      	b.n	800e344 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          case N2kPGN126998_ManufacturerInformation_field:
            QueryStrSize=Max_N2kConfigurationInfoField_len;
 800e2bc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e2c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e2c4:	2247      	movs	r2, #71	; 0x47
 800e2c6:	601a      	str	r2, [r3, #0]
            N2kMsg.GetVarStr(QueryStrSize,Query,Index);
 800e2c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e2cc:	f107 0214 	add.w	r2, r7, #20
 800e2d0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800e2d4:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 800e2d8:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 800e2dc:	6800      	ldr	r0, [r0, #0]
 800e2de:	f000 ff74 	bl	800f1ca <_ZNK7tN2kMsg9GetVarStrERjPcRi>
            pNMEA2000->GetManufacturerInformation(CurVal,Max_N2kConfigurationInfoField_len);
 800e2e2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e2e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e2f2:	2247      	movs	r2, #71	; 0x47
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f003 fbef 	bl	8011ad8 <_ZN9tNMEA200026GetManufacturerInformationEPcj>
            MatchRequestField(Query,CurVal,MatchFilter,FieldErrorCode);
 800e2fa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e2fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e302:	6818      	ldr	r0, [r3, #0]
 800e304:	f507 74d7 	add.w	r4, r7, #430	; 0x1ae
 800e308:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e30c:	f107 0114 	add.w	r1, r7, #20
 800e310:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	4623      	mov	r3, r4
 800e318:	f7fe fdc8 	bl	800ceac <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldEPKcS1_RbR35tN2kGroupFunctionParameterErrorCode>
            break;
 800e31c:	e012      	b.n	800e344 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
          default:
            FieldErrorCode=N2kgfpec_InvalidRequestOrCommandParameterField;
 800e31e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e322:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800e326:	2201      	movs	r2, #1
 800e328:	701a      	strb	r2, [r3, #0]
            MatchFilter=false;
 800e32a:	2300      	movs	r3, #0
 800e32c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
            FoundInvalidField=true;
 800e330:	2301      	movs	r3, #1
 800e332:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 800e336:	e005      	b.n	800e344 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x2cc>
        }
      } else {
        // If there is any invalid field, we can not parse others, since we do not
        // know right data length. So fo rest of the fields we can only send response below.
        FieldErrorCode=N2kgfpec_TemporarilyUnableToComply;
 800e338:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e33c:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800e340:	2202      	movs	r2, #2
 800e342:	701a      	strb	r2, [r3, #0]
      }
      AddAcknowledgeParameter(N2kRMsg,i,FieldErrorCode);
 800e344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e348:	b2d9      	uxtb	r1, r3
 800e34a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e34e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800e352:	781a      	ldrb	r2, [r3, #0]
 800e354:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fe fd01 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs && (MatchFilter || !tNMEA2000::IsBroadcast(N2kMsg.Destination)); i++) {
 800e35e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e362:	3301      	adds	r3, #1
 800e364:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800e368:	e706      	b.n	800e178 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x100>
    }

  }

  bool RequestOK=(MatchFilter && pec==N2kgfTPec_Acknowledge);
 800e36a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d005      	beq.n	800e37e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 800e372:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d101      	bne.n	800e37e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x306>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e000      	b.n	800e380 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x308>
 800e37e:	2300      	movs	r3, #0
 800e380:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

  // Send Acknowledge, if request was not broadcast and it did not match
  if ( !RequestOK ) {
 800e384:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800e388:	f083 0301 	eor.w	r3, r3, #1
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d01c      	beq.n	800e3cc <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x354>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) pNMEA2000->SendMsg(N2kRMsg,iDev);
 800e392:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e396:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	7b5b      	ldrb	r3, [r3, #13]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe f857 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	f083 0301 	eor.w	r3, r3, #1
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d04d      	beq.n	800e44c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
 800e3b0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e3b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800e3c0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f004 fa5f 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 800e3ca:	e03f      	b.n	800e44c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3d4>
  } else {
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    unsigned char dest=N2kMsg.Source;
 800e3cc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e3d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	7b1b      	ldrb	r3, [r3, #12]
 800e3d8:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    if ( N2kMsg.IsTPMessage() && tNMEA2000::IsBroadcast(N2kMsg.Destination) ) dest=N2kMsg.Destination;
 800e3dc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e3e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e3e4:	6818      	ldr	r0, [r3, #0]
 800e3e6:	f7fe fd55 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00d      	beq.n	800e40c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 800e3f0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e3f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	7b5b      	ldrb	r3, [r3, #13]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fe f828 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d001      	beq.n	800e40c <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x394>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x396>
 800e40c:	2300      	movs	r3, #0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d007      	beq.n	800e422 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleRequestERK7tN2kMsgmthi+0x3aa>
 800e412:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e416:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	7b5b      	ldrb	r3, [r3, #13]
 800e41e:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
    pNMEA2000->SendConfigurationInformation(dest,iDev,N2kMsg.IsTPMessage());
 800e422:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e426:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	691c      	ldr	r4, [r3, #16]
 800e42e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e432:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e436:	6818      	ldr	r0, [r3, #0]
 800e438:	f7fe fd2c 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f897 11b2 	ldrb.w	r1, [r7, #434]	; 0x1b2
 800e442:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800e446:	4620      	mov	r0, r4
 800e448:	f007 f85c 	bl	8015504 <_ZN9tNMEA200028SendConfigurationInformationEhib>
#else
    pNMEA2000->SendConfigurationInformation(iDev);
#endif
  }

  return true;
 800e44c:	2301      	movs	r3, #1
}
 800e44e:	4618      	mov	r0, r3
 800e450:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 800e454:	46bd      	mov	sp, r7
 800e456:	bd90      	pop	{r4, r7, pc}

0800e458 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi>:

//*****************************************************************************
// Command group function for 126998 can be used to set installation description 1 and 2 fields
bool tN2kGroupFunctionHandlerForPGN126998::HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev) {
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b0dd      	sub	sp, #372	; 0x174
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800e462:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 800e466:	6020      	str	r0, [r4, #0]
 800e468:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800e46c:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800e470:	6001      	str	r1, [r0, #0]
 800e472:	4619      	mov	r1, r3
 800e474:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e478:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e482:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 800e486:	460a      	mov	r2, r1
 800e488:	701a      	strb	r2, [r3, #0]
  int i;
  int Index;
  uint8_t field;
  size_t InstallationDescriptionSize;
  char InstallationDescription[Max_N2kConfigurationInfoField_len];
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec=N2kgfTPec_Acknowledge;
 800e48a:	2300      	movs	r3, #0
 800e48c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
  tN2kMsg N2kRMsg;
 800e490:	f107 0014 	add.w	r0, r7, #20
 800e494:	2300      	movs	r3, #0
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	2300      	movs	r3, #0
 800e49a:	2206      	movs	r2, #6
 800e49c:	210f      	movs	r1, #15
 800e49e:	f000 fbeb 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

 		if (PrioritySetting != 0x08 || PrioritySetting != 0x0f || PrioritySetting != 0x09) pec = N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800e4a2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4a6:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	2b08      	cmp	r3, #8
 800e4ae:	d10d      	bne.n	800e4cc <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 800e4b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4b4:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b0f      	cmp	r3, #15
 800e4bc:	d106      	bne.n	800e4cc <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x74>
 800e4be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4c2:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b09      	cmp	r3, #9
 800e4ca:	d002      	beq.n	800e4d2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x7a>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    SetStartAcknowledge(N2kRMsg,N2kMsg.Source,PGN,
 800e4d2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	7b19      	ldrb	r1, [r3, #12]
 800e4de:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	689a      	ldr	r2, [r3, #8]
 800e4ea:	f107 0014 	add.w	r0, r7, #20
 800e4ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4f2:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	2300      	movs	r3, #0
 800e502:	f7fe fbf3 	bl	800ccec <_ZN24tN2kGroupFunctionHandler19SetStartAcknowledgeER7tN2kMsghm29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh>
                        N2kgfPGNec_Acknowledge,  // What we actually should response as PGN error, if we have invalid field?
                        pec,
                        NumberOfParameterPairs);

    StartParseCommandPairParameters(N2kMsg,Index);
 800e506:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800e50a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e50e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e512:	4611      	mov	r1, r2
 800e514:	6818      	ldr	r0, [r3, #0]
 800e516:	f7fe fb47 	bl	800cba8 <_ZN24tN2kGroupFunctionHandler31StartParseCommandPairParametersERK7tN2kMsgRi>
    // Next read new field values
    for (i=0; i<NumberOfParameterPairs; i++) {
 800e51a:	2300      	movs	r3, #0
 800e51c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800e520:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e524:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800e52e:	429a      	cmp	r2, r3
 800e530:	da6e      	bge.n	800e610 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1b8>
      field=N2kMsg.GetByte(Index);
 800e532:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800e536:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e53a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800e53e:	4611      	mov	r1, r2
 800e540:	6818      	ldr	r0, [r3, #0]
 800e542:	f000 fd3b 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800e546:	4603      	mov	r3, r0
 800e548:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
      switch (field) {
 800e54c:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 800e550:	2b01      	cmp	r3, #1
 800e552:	d002      	beq.n	800e55a <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x102>
 800e554:	2b02      	cmp	r3, #2
 800e556:	d026      	beq.n	800e5a6 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x14e>
 800e558:	e04b      	b.n	800e5f2 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x19a>
        case 1: // Installation description 1
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 800e55a:	2347      	movs	r3, #71	; 0x47
 800e55c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 800e560:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800e564:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e568:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800e56c:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800e570:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800e574:	6800      	ldr	r0, [r0, #0]
 800e576:	f000 fe28 	bl	800f1ca <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription1(InstallationDescription);
 800e57a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e57e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e58a:	4611      	mov	r1, r2
 800e58c:	4618      	mov	r0, r3
 800e58e:	f003 fa28 	bl	80119e2 <_ZN9tNMEA200027SetInstallationDescription1EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 800e592:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e596:	b2d9      	uxtb	r1, r3
 800e598:	f107 0314 	add.w	r3, r7, #20
 800e59c:	2200      	movs	r2, #0
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fe fbde 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 800e5a4:	e02e      	b.n	800e604 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        case 2:  // Installation description 2
          InstallationDescriptionSize=Max_N2kConfigurationInfoField_len;
 800e5a6:	2347      	movs	r3, #71	; 0x47
 800e5a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          N2kMsg.GetVarStr(InstallationDescriptionSize,InstallationDescription,Index);
 800e5ac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800e5b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e5b4:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800e5b8:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800e5bc:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800e5c0:	6800      	ldr	r0, [r0, #0]
 800e5c2:	f000 fe02 	bl	800f1ca <_ZNK7tN2kMsg9GetVarStrERjPcRi>
          pNMEA2000->SetInstallationDescription2(InstallationDescription);
 800e5c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e5ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f003 fa22 	bl	8011a22 <_ZN9tNMEA200027SetInstallationDescription2EPKc>
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_Acknowledge);
 800e5de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e5e2:	b2d9      	uxtb	r1, r3
 800e5e4:	f107 0314 	add.w	r3, r7, #20
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe fbb8 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
          break;
 800e5f0:	e008      	b.n	800e604 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0x1ac>
        default:
          AddAcknowledgeParameter(N2kRMsg,i,N2kgfpec_InvalidRequestOrCommandParameterField);
 800e5f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e5f6:	b2d9      	uxtb	r1, r3
 800e5f8:	f107 0314 	add.w	r3, r7, #20
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe fbae 	bl	800cd60 <_ZN24tN2kGroupFunctionHandler23AddAcknowledgeParameterER7tN2kMsgh35tN2kGroupFunctionParameterErrorCode>
    for (i=0; i<NumberOfParameterPairs; i++) {
 800e604:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e608:	3301      	adds	r3, #1
 800e60a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800e60e:	e787      	b.n	800e520 <_ZN36tN2kGroupFunctionHandlerForPGN12699813HandleCommandERK7tN2kMsghhi+0xc8>
      }
    }

    pNMEA2000->SendMsg(N2kRMsg,iDev);
 800e610:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e614:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	f107 0114 	add.w	r1, r7, #20
 800e620:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800e624:	4618      	mov	r0, r3
 800e626:	f004 f92f 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>

    return true;
 800e62a:	2301      	movs	r3, #1
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800e632:	46bd      	mov	sp, r7
 800e634:	bd90      	pop	{r4, r7, pc}

0800e636 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi>:
// Heartbeat settings
bool tN2kGroupFunctionHandlerForPGN126993::HandleRequest(const tN2kMsg &N2kMsg,
                               uint32_t TransmissionInterval,
                               uint16_t TransmissionIntervalOffset,
                               uint8_t  NumberOfParameterPairs,
                               int iDev) {
 800e636:	b590      	push	{r4, r7, lr}
 800e638:	b08b      	sub	sp, #44	; 0x2c
 800e63a:	af04      	add	r7, sp, #16
 800e63c:	60f8      	str	r0, [r7, #12]
 800e63e:	60b9      	str	r1, [r7, #8]
 800e640:	607a      	str	r2, [r7, #4]
 800e642:	807b      	strh	r3, [r7, #2]
  tN2kGroupFunctionTransmissionOrPriorityErrorCode pec = GetRequestGroupFunctionTransmissionOrPriorityErrorCode(TransmissionInterval,TransmissionIntervalOffset,true,60000U,1000U,true,6000U);
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681c      	ldr	r4, [r3, #0]
 800e64c:	887a      	ldrh	r2, [r7, #2]
 800e64e:	f241 7370 	movw	r3, #6000	; 0x1770
 800e652:	9303      	str	r3, [sp, #12]
 800e654:	2301      	movs	r3, #1
 800e656:	9302      	str	r3, [sp, #8]
 800e658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e65c:	9301      	str	r3, [sp, #4]
 800e65e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	2301      	movs	r3, #1
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	47a0      	blx	r4
 800e66a:	4603      	mov	r3, r0
 800e66c:	75fb      	strb	r3, [r7, #23]
  // Turn off is not allowed for heartbeat.
  if ( TransmissionInterval==0 ) pec=N2kgfTPec_TransmitIntervalOrPriorityNotSupported;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x42>
 800e674:	2301      	movs	r3, #1
 800e676:	75fb      	strb	r3, [r7, #23]
  
  if ( NumberOfParameterPairs==0 ) { // According to doc, there should not be any parameter pairs defined
 800e678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d158      	bne.n	800e732 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xfc>
    if ( TransmissionInterval==0xffffffff && TransmissionIntervalOffset==0xffff ) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e686:	d112      	bne.n	800e6ae <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
 800e688:	887b      	ldrh	r3, [r7, #2]
 800e68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e68e:	4293      	cmp	r3, r2
 800e690:	d10d      	bne.n	800e6ae <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x78>
      // Request for 126993 with 0xffffffff and 0xffff is prohibited so use default reponse.
      return tN2kGroupFunctionHandler::HandleRequest(N2kMsg,TransmissionInterval,TransmissionIntervalOffset,NumberOfParameterPairs,iDev);
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	887a      	ldrh	r2, [r7, #2]
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	68b9      	ldr	r1, [r7, #8]
 800e6a6:	f7fe f884 	bl	800c7b2 <_ZN24tN2kGroupFunctionHandler13HandleRequestERK7tN2kMsgmthi>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	e060      	b.n	800e770 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x13a>
    }
    if ( pec==N2kgfTPec_Acknowledge ) {
 800e6ae:	7dfb      	ldrb	r3, [r7, #23]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d120      	bne.n	800e6f6 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xc0>
      // Request specification with offset is confusing and there is no clear explanation. So to keep
      // test tool happy, we respond always immediately and set offset, if it is >0
      uint32_t Offset=TransmissionIntervalOffset;
 800e6b4:	887b      	ldrh	r3, [r7, #2]
 800e6b6:	613b      	str	r3, [r7, #16]
      Offset=(Offset==0xffff || Offset==0?0xffffffff:Offset*10); // Offset comes in 10 ms, convert to ms.
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d008      	beq.n	800e6d4 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d005      	beq.n	800e6d4 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x9e>
 800e6c8:	693a      	ldr	r2, [r7, #16]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	e001      	b.n	800e6d8 <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0xa2>
 800e6d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6d8:	613b      	str	r3, [r7, #16]
      pNMEA2000->SetHeartbeatIntervalAndOffset(TransmissionInterval,Offset,iDev);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6918      	ldr	r0, [r3, #16]
 800e6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	6879      	ldr	r1, [r7, #4]
 800e6e4:	f003 fe32 	bl	801234c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
      pNMEA2000->SendHeartbeat(iDev);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	691b      	ldr	r3, [r3, #16]
 800e6ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f003 fee2 	bl	80124b8 <_ZN9tNMEA200013SendHeartbeatEi>
 800e6f4:	e03b      	b.n	800e76e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    } else if (!tNMEA2000::IsBroadcast(N2kMsg.Destination)) {
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	7b5b      	ldrb	r3, [r3, #13]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fd fea9 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800e700:	4603      	mov	r3, r0
 800e702:	f083 0301 	eor.w	r3, r3, #1
 800e706:	b2db      	uxtb	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d030      	beq.n	800e76e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000, N2kMsg.Source, iDev, PGN, N2kgfPGNec_Acknowledge, pec);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6918      	ldr	r0, [r3, #16]
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	7b19      	ldrb	r1, [r3, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	689a      	ldr	r2, [r3, #8]
 800e718:	2300      	movs	r3, #0
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	2300      	movs	r3, #0
 800e71e:	9302      	str	r3, [sp, #8]
 800e720:	7dfb      	ldrb	r3, [r7, #23]
 800e722:	9301      	str	r3, [sp, #4]
 800e724:	2300      	movs	r3, #0
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e72c:	f7fe fb4e 	bl	800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
 800e730:	e01d      	b.n	800e76e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
    }
  } else {
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) ) {
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	7b5b      	ldrb	r3, [r3, #13]
 800e736:	4618      	mov	r0, r3
 800e738:	f7fd fe8b 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 800e73c:	4603      	mov	r3, r0
 800e73e:	f083 0301 	eor.w	r3, r3, #1
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d012      	beq.n	800e76e <_ZN36tN2kGroupFunctionHandlerForPGN12699313HandleRequestERK7tN2kMsgmthi+0x138>
      SendAcknowledge(pNMEA2000,N2kMsg.Source,iDev,PGN,
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6918      	ldr	r0, [r3, #16]
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	7b19      	ldrb	r1, [r3, #12]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	689a      	ldr	r2, [r3, #8]
 800e754:	2305      	movs	r3, #5
 800e756:	9303      	str	r3, [sp, #12]
 800e758:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e75c:	9302      	str	r3, [sp, #8]
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	9301      	str	r3, [sp, #4]
 800e762:	2300      	movs	r3, #0
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	4613      	mov	r3, r2
 800e768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e76a:	f7fe fb2f 	bl	800cdcc <_ZN24tN2kGroupFunctionHandler15SendAcknowledgeEP9tNMEA2000him29tN2kGroupFunctionPGNErrorCode48tN2kGroupFunctionTransmissionOrPriorityErrorCodeh35tN2kGroupFunctionParameterErrorCode>
                      N2kgfPGNec_Acknowledge,
                      pec, //N2kgfTPec_TransmitIntervalOrPriorityNotSupported,
                      NumberOfParameterPairs, N2kgfpec_RequestOrCommandNotSupported);
    }
  }
  return true;
 800e76e:	2301      	movs	r3, #1
}
 800e770:	4618      	mov	r0, r3
 800e772:	371c      	adds	r7, #28
 800e774:	46bd      	mov	sp, r7
 800e776:	bd90      	pop	{r4, r7, pc}

0800e778 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
      if ( (FieldVal&Mask)!=MatchVal ) {
 800e786:	68ba      	ldr	r2, [r7, #8]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	4013      	ands	r3, r2
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d006      	beq.n	800e7a0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x28>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	2203      	movs	r2, #3
 800e796:	701a      	strb	r2, [r3, #0]
        Match=false;
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	2200      	movs	r2, #0
 800e79c:	701a      	strb	r2, [r3, #0]
    }
 800e79e:	e002      	b.n	800e7a6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldImEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x2e>
      } else ErrorCode=N2kgfpec_Acknowledge;
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	701a      	strb	r2, [r3, #0]
    }
 800e7a6:	bf00      	nop
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bc80      	pop	{r7}
 800e7ae:	4770      	bx	lr

0800e7b0 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	4608      	mov	r0, r1
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	461a      	mov	r2, r3
 800e7be:	4603      	mov	r3, r0
 800e7c0:	817b      	strh	r3, [r7, #10]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	813b      	strh	r3, [r7, #8]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	80fb      	strh	r3, [r7, #6]
      if ( (FieldVal&Mask)!=MatchVal ) {
 800e7ca:	897a      	ldrh	r2, [r7, #10]
 800e7cc:	88fb      	ldrh	r3, [r7, #6]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	893a      	ldrh	r2, [r7, #8]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d006      	beq.n	800e7e6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2203      	movs	r2, #3
 800e7dc:	701a      	strb	r2, [r3, #0]
        Match=false;
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	701a      	strb	r2, [r3, #0]
    }
 800e7e4:	e002      	b.n	800e7ec <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldItEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
    }
 800e7ec:	bf00      	nop
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bc80      	pop	{r7}
 800e7f4:	4770      	bx	lr

0800e7f6 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode>:
    template <typename T> void MatchRequestField(T FieldVal, T MatchVal, T Mask, bool &Match, tN2kGroupFunctionParameterErrorCode &ErrorCode)
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	4608      	mov	r0, r1
 800e800:	4611      	mov	r1, r2
 800e802:	461a      	mov	r2, r3
 800e804:	4603      	mov	r3, r0
 800e806:	70fb      	strb	r3, [r7, #3]
 800e808:	460b      	mov	r3, r1
 800e80a:	70bb      	strb	r3, [r7, #2]
 800e80c:	4613      	mov	r3, r2
 800e80e:	707b      	strb	r3, [r7, #1]
      if ( (FieldVal&Mask)!=MatchVal ) {
 800e810:	78fa      	ldrb	r2, [r7, #3]
 800e812:	787b      	ldrb	r3, [r7, #1]
 800e814:	4013      	ands	r3, r2
 800e816:	b2db      	uxtb	r3, r3
 800e818:	78ba      	ldrb	r2, [r7, #2]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d006      	beq.n	800e82c <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x36>
        ErrorCode=N2kgfpec_RequestOrCommandParameterOutOfRange;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2203      	movs	r2, #3
 800e822:	701a      	strb	r2, [r3, #0]
        Match=false;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
    }
 800e82a:	e002      	b.n	800e832 <_ZN24tN2kGroupFunctionHandler17MatchRequestFieldIhEEvT_S1_S1_RbR35tN2kGroupFunctionParameterErrorCode+0x3c>
      } else ErrorCode=N2kgfpec_Acknowledge;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2200      	movs	r2, #0
 800e830:	701a      	strb	r2, [r3, #0]
    }
 800e832:	bf00      	nop
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	bc80      	pop	{r7}
 800e83a:	4770      	bx	lr
 800e83c:	0000      	movs	r0, r0
	...

0800e840 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd>:

//*****************************************************************************
// DC Detailed Status
//
void SetN2kPGN127506(tN2kMsg &N2kMsg, unsigned char SID, unsigned char DCInstance, tN2kDCType DCType,
                     uint8_t StateOfCharge, uint8_t StateOfHealth, double TimeRemaining, double RippleVoltage, double Capacity) {
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af04      	add	r7, sp, #16
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	4608      	mov	r0, r1
 800e84a:	4611      	mov	r1, r2
 800e84c:	461a      	mov	r2, r3
 800e84e:	4603      	mov	r3, r0
 800e850:	70fb      	strb	r3, [r7, #3]
 800e852:	460b      	mov	r3, r1
 800e854:	70bb      	strb	r3, [r7, #2]
 800e856:	4613      	mov	r3, r2
 800e858:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127506L);
 800e85a:	492f      	ldr	r1, [pc, #188]	; (800e918 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd8>)
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 fa3d 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2206      	movs	r2, #6
 800e866:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(SID);
 800e868:	78fb      	ldrb	r3, [r7, #3]
 800e86a:	4619      	mov	r1, r3
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fb75 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(DCInstance);
 800e872:	78bb      	ldrb	r3, [r7, #2]
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fb70 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte((unsigned char)DCType);
 800e87c:	787b      	ldrb	r3, [r7, #1]
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fb6b 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfCharge);
 800e886:	7c3b      	ldrb	r3, [r7, #16]
 800e888:	4619      	mov	r1, r3
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 fb66 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(StateOfHealth);
 800e890:	7d3b      	ldrb	r3, [r7, #20]
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fb61 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(TimeRemaining,60);
 800e89a:	a319      	add	r3, pc, #100	; (adr r3, 800e900 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 800e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8a4:	f04f 0200 	mov.w	r2, #0
 800e8a8:	4b1c      	ldr	r3, [pc, #112]	; (800e91c <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xdc>)
 800e8aa:	e9cd 2300 	strd	r2, r3, [sp]
 800e8ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 faa4 	bl	800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(RippleVoltage,0.001);
 800e8b8:	a311      	add	r3, pc, #68	; (adr r3, 800e900 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 800e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8c2:	a311      	add	r3, pc, #68	; (adr r3, 800e908 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc8>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e8cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fa95 	bl	800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.Add2ByteUDouble(Capacity,3600);
 800e8d6:	a30a      	add	r3, pc, #40	; (adr r3, 800e900 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xc0>)
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8e0:	a30b      	add	r3, pc, #44	; (adr r3, 800e910 <_Z15SetN2kPGN127506R7tN2kMsghh10tN2kDCTypehhddd+0xd0>)
 800e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e8ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fa86 	bl	800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	f3af 8000 	nop.w
 800e900:	00000000 	.word	0x00000000
 800e904:	c1cdcd65 	.word	0xc1cdcd65
 800e908:	d2f1a9fc 	.word	0xd2f1a9fc
 800e90c:	3f50624d 	.word	0x3f50624d
 800e910:	00000000 	.word	0x00000000
 800e914:	40ac2000 	.word	0x40ac2000
 800e918:	0001f212 	.word	0x0001f212
 800e91c:	404e0000 	.word	0x404e0000

0800e920 <_Z15SetN2kPGN127507R7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d>:
//  - Equalization Pending         boolean
//  - Equalization Time Remaining  double seconds
//
void SetN2kPGN127507(tN2kMsg &N2kMsg, unsigned char Instance, unsigned char BatteryInstance,
                     tN2kChargeState ChargeState, tN2kChargerMode ChargerMode,
                     tN2kOnOff Enabled, tN2kOnOff EqualizationPending, double EqualizationTimeRemaining) {
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af04      	add	r7, sp, #16
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	4608      	mov	r0, r1
 800e92a:	4611      	mov	r1, r2
 800e92c:	461a      	mov	r2, r3
 800e92e:	4603      	mov	r3, r0
 800e930:	70fb      	strb	r3, [r7, #3]
 800e932:	460b      	mov	r3, r1
 800e934:	70bb      	strb	r3, [r7, #2]
 800e936:	4613      	mov	r3, r2
 800e938:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127507UL);
 800e93a:	4927      	ldr	r1, [pc, #156]	; (800e9d8 <_Z15SetN2kPGN127507R7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d+0xb8>)
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f9cd 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2206      	movs	r2, #6
 800e946:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(Instance);
 800e948:	78fb      	ldrb	r3, [r7, #3]
 800e94a:	4619      	mov	r1, r3
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fb05 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(BatteryInstance);
 800e952:	78bb      	ldrb	r3, [r7, #2]
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 fb00 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte((ChargerMode & 0x0f)<<4 | (ChargeState & 0x0f));
 800e95c:	7c3b      	ldrb	r3, [r7, #16]
 800e95e:	011b      	lsls	r3, r3, #4
 800e960:	b25a      	sxtb	r2, r3
 800e962:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800e966:	f003 030f 	and.w	r3, r3, #15
 800e96a:	b25b      	sxtb	r3, r3
 800e96c:	4313      	orrs	r3, r2
 800e96e:	b25b      	sxtb	r3, r3
 800e970:	b2db      	uxtb	r3, r3
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 faf1 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x0f<<4 | (EqualizationPending & 0x03) << 2 | (Enabled & 0x03));
 800e97a:	7e3b      	ldrb	r3, [r7, #24]
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	b25b      	sxtb	r3, r3
 800e980:	f003 030c 	and.w	r3, r3, #12
 800e984:	b25b      	sxtb	r3, r3
 800e986:	f063 030f 	orn	r3, r3, #15
 800e98a:	b25a      	sxtb	r2, r3
 800e98c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e990:	f003 0303 	and.w	r3, r3, #3
 800e994:	b25b      	sxtb	r3, r3
 800e996:	4313      	orrs	r3, r2
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 fadc 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(EqualizationTimeRemaining,1);
 800e9a4:	a30a      	add	r3, pc, #40	; (adr r3, 800e9d0 <_Z15SetN2kPGN127507R7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d+0xb0>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9ae:	f04f 0200 	mov.w	r2, #0
 800e9b2:	4b0a      	ldr	r3, [pc, #40]	; (800e9dc <_Z15SetN2kPGN127507R7tN2kMsghh15tN2kChargeState15tN2kChargerMode9tN2kOnOffS3_d+0xbc>)
 800e9b4:	e9cd 2300 	strd	r2, r3, [sp]
 800e9b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 fa1f 	bl	800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
}
 800e9c2:	bf00      	nop
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	f3af 8000 	nop.w
 800e9d0:	00000000 	.word	0x00000000
 800e9d4:	c1cdcd65 	.word	0xc1cdcd65
 800e9d8:	0001f213 	.word	0x0001f213
 800e9dc:	3ff00000 	.word	0x3ff00000

0800e9e0 <_Z15SetN2kPGN127508R7tN2kMsghdddh>:

//*****************************************************************************
// Battery Status
// Temperatures should be in Kelvins
void SetN2kPGN127508(tN2kMsg &N2kMsg, unsigned char BatteryInstance, double BatteryVoltage, double BatteryCurrent,
                     double BatteryTemperature, unsigned char SID) {
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af04      	add	r7, sp, #16
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	e9c7 2300 	strd	r2, r3, [r7]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	72fb      	strb	r3, [r7, #11]
    N2kMsg.SetPGN(127508L);
 800e9f0:	4927      	ldr	r1, [pc, #156]	; (800ea90 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xb0>)
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f000 f972 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2206      	movs	r2, #6
 800e9fc:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatteryInstance);
 800e9fe:	7afb      	ldrb	r3, [r7, #11]
 800ea00:	4619      	mov	r1, r3
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f000 faaa 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteDouble(BatteryVoltage,0.01);
 800ea08:	a31b      	add	r3, pc, #108	; (adr r3, 800ea78 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 800ea0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea12:	a31b      	add	r3, pc, #108	; (adr r3, 800ea80 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	e9cd 2300 	strd	r2, r3, [sp]
 800ea1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f000 f9c3 	bl	800edac <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteDouble(BatteryCurrent,0.1);
 800ea26:	a314      	add	r3, pc, #80	; (adr r3, 800ea78 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea30:	a315      	add	r3, pc, #84	; (adr r3, 800ea88 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa8>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	e9cd 2300 	strd	r2, r3, [sp]
 800ea3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 f9b4 	bl	800edac <_ZN7tN2kMsg14Add2ByteDoubleEddd>
    N2kMsg.Add2ByteUDouble(BatteryTemperature,0.01);
 800ea44:	a30c      	add	r3, pc, #48	; (adr r3, 800ea78 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0x98>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea4e:	a30c      	add	r3, pc, #48	; (adr r3, 800ea80 <_Z15SetN2kPGN127508R7tN2kMsghdddh+0xa0>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	e9cd 2300 	strd	r2, r3, [sp]
 800ea58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f000 f9cf 	bl	800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte(SID);
 800ea62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea66:	4619      	mov	r1, r3
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f000 fa77 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
}
 800ea6e:	bf00      	nop
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	00000000 	.word	0x00000000
 800ea7c:	c1cdcd65 	.word	0xc1cdcd65
 800ea80:	47ae147b 	.word	0x47ae147b
 800ea84:	3f847ae1 	.word	0x3f847ae1
 800ea88:	9999999a 	.word	0x9999999a
 800ea8c:	3fb99999 	.word	0x3fb99999
 800ea90:	0001f214 	.word	0x0001f214
 800ea94:	00000000 	.word	0x00000000

0800ea98 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada>:

//*****************************************************************************
// Battery Configuration Status
void SetN2kPGN127513(tN2kMsg &N2kMsg, unsigned char BatInstance, tN2kBatType BatType, tN2kBatEqSupport SupportsEqual,
                     tN2kBatNomVolt BatNominalVoltage, tN2kBatChem BatChemistry, double BatCapacity, int8_t BatTemperatureCoefficient,
				double PeukertExponent, int8_t ChargeEfficiencyFactor) {
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af04      	add	r7, sp, #16
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	4608      	mov	r0, r1
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	70fb      	strb	r3, [r7, #3]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	70bb      	strb	r3, [r7, #2]
 800eaae:	4613      	mov	r3, r2
 800eab0:	707b      	strb	r3, [r7, #1]
    N2kMsg.SetPGN(127513L);
 800eab2:	4949      	ldr	r1, [pc, #292]	; (800ebd8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x140>)
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f911 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2206      	movs	r2, #6
 800eabe:	711a      	strb	r2, [r3, #4]
    N2kMsg.AddByte(BatInstance);
 800eac0:	78fb      	ldrb	r3, [r7, #3]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 fa49 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xc0 | ((SupportsEqual & 0x03) << 4) | (BatType & 0x0f)); // BatType (4 bit), SupportsEqual (2 bit), Reserved (2 bit)
 800eaca:	787b      	ldrb	r3, [r7, #1]
 800eacc:	011b      	lsls	r3, r3, #4
 800eace:	b25b      	sxtb	r3, r3
 800ead0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ead4:	b25b      	sxtb	r3, r3
 800ead6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800eada:	b25a      	sxtb	r2, r3
 800eadc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eae0:	f003 030f 	and.w	r3, r3, #15
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	4313      	orrs	r3, r2
 800eae8:	b25b      	sxtb	r3, r3
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	4619      	mov	r1, r3
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fa34 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte( ((BatChemistry & 0x0f) << 4) | (BatNominalVoltage & 0x0f) ); // BatNominalVoltage (4 bit), BatChemistry (4 bit)
 800eaf4:	7d3b      	ldrb	r3, [r7, #20]
 800eaf6:	011b      	lsls	r3, r3, #4
 800eaf8:	b25a      	sxtb	r2, r3
 800eafa:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800eafe:	f003 030f 	and.w	r3, r3, #15
 800eb02:	b25b      	sxtb	r3, r3
 800eb04:	4313      	orrs	r3, r2
 800eb06:	b25b      	sxtb	r3, r3
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fa25 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add2ByteUDouble(BatCapacity,3600);
 800eb12:	a329      	add	r3, pc, #164	; (adr r3, 800ebb8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x120>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb1c:	a328      	add	r3, pc, #160	; (adr r3, 800ebc0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x128>)
 800eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb22:	e9cd 2300 	strd	r2, r3, [sp]
 800eb26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 f968 	bl	800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)BatTemperatureCoefficient);
 800eb30:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fa10 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    PeukertExponent-=1; // Is this right or not I am not yet sure!
 800eb3c:	f04f 0200 	mov.w	r2, #0
 800eb40:	4b26      	ldr	r3, [pc, #152]	; (800ebdc <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x144>)
 800eb42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eb46:	f7f1 fb85 	bl	8000254 <__aeabi_dsub>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (PeukertExponent<0 || PeukertExponent>0.504) { N2kMsg.AddByte(0xff); } else { N2kMsg.Add1ByteUDouble(PeukertExponent,0.002,-1); }
 800eb52:	f04f 0200 	mov.w	r2, #0
 800eb56:	f04f 0300 	mov.w	r3, #0
 800eb5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eb5e:	f7f1 ffa3 	bl	8000aa8 <__aeabi_dcmplt>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d109      	bne.n	800eb7c <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xe4>
 800eb68:	a317      	add	r3, pc, #92	; (adr r3, 800ebc8 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x130>)
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eb72:	f7f1 ffb7 	bl	8000ae4 <__aeabi_dcmpgt>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d004      	beq.n	800eb86 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0xee>
 800eb7c:	21ff      	movs	r1, #255	; 0xff
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f9ec 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 800eb84:	e00e      	b.n	800eba4 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x10c>
 800eb86:	f04f 0200 	mov.w	r2, #0
 800eb8a:	4b15      	ldr	r3, [pc, #84]	; (800ebe0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x148>)
 800eb8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb90:	a30f      	add	r3, pc, #60	; (adr r3, 800ebd0 <_Z15SetN2kPGN127513R7tN2kMsgh11tN2kBatType16tN2kBatEqSupport14tN2kBatNomVolt11tN2kBatChemdada+0x138>)
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	e9cd 2300 	strd	r2, r3, [sp]
 800eb9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f958 	bl	800ee54 <_ZN7tN2kMsg15Add1ByteUDoubleEddd>
    N2kMsg.AddByte((int8_t)ChargeEfficiencyFactor);
 800eba4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f9d6 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	00000000 	.word	0x00000000
 800ebbc:	c1cdcd65 	.word	0xc1cdcd65
 800ebc0:	00000000 	.word	0x00000000
 800ebc4:	40ac2000 	.word	0x40ac2000
 800ebc8:	9ba5e354 	.word	0x9ba5e354
 800ebcc:	3fe020c4 	.word	0x3fe020c4
 800ebd0:	d2f1a9fc 	.word	0xd2f1a9fc
 800ebd4:	3f60624d 	.word	0x3f60624d
 800ebd8:	0001f219 	.word	0x0001f219
 800ebdc:	3ff00000 	.word	0x3ff00000
 800ebe0:	bff00000 	.word	0xbff00000

0800ebe4 <_ZNK7tN2kMsg7IsValidEv>:
  void SetPGN(unsigned long _PGN);
  void ForceSource(unsigned char _Source) const { Source=_Source; }
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; } // We can send to specified destination only for PGN:s low byte=0
  void Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination=0xff);
  virtual void Clear();
  bool IsValid() const { return (PGN!=0 && DataLen>0); }
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d005      	beq.n	800ec00 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	dd01      	ble.n	800ec00 <_ZNK7tN2kMsg7IsValidEv+0x1c>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e000      	b.n	800ec02 <_ZNK7tN2kMsg7IsValidEv+0x1e>
 800ec00:	2300      	movs	r3, #0
 800ec02:	4618      	mov	r0, r3
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bc80      	pop	{r7}
 800ec0a:	4770      	bx	lr

0800ec0c <round>:

//*****************************************************************************
// On Arduino round() is a macro, hence the definition check. On other systems
// it is a function that may or may not be implemented so we do it ourselves.
#if !defined(round)
double round(double val) {
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	e9c7 0100 	strd	r0, r1, [r7]
  return val >= 0
      ? floor(val + 0.5)
 800ec16:	f04f 0200 	mov.w	r2, #0
 800ec1a:	f04f 0300 	mov.w	r3, #0
 800ec1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ec22:	f7f1 ff55 	bl	8000ad0 <__aeabi_dcmpge>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00f      	beq.n	800ec4c <round+0x40>
 800ec2c:	f04f 0200 	mov.w	r2, #0
 800ec30:	4b10      	ldr	r3, [pc, #64]	; (800ec74 <round+0x68>)
 800ec32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ec36:	f7f1 fb0f 	bl	8000258 <__adddf3>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	4610      	mov	r0, r2
 800ec40:	4619      	mov	r1, r3
 800ec42:	f00a faa9 	bl	8019198 <floor>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
      : ceil(val - 0.5);
 800ec4a:	e00e      	b.n	800ec6a <round+0x5e>
 800ec4c:	f04f 0200 	mov.w	r2, #0
 800ec50:	4b08      	ldr	r3, [pc, #32]	; (800ec74 <round+0x68>)
 800ec52:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ec56:	f7f1 fafd 	bl	8000254 <__aeabi_dsub>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4610      	mov	r0, r2
 800ec60:	4619      	mov	r1, r3
 800ec62:	f00a fa19 	bl	8019098 <ceil>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
}
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	3fe00000 	.word	0x3fe00000

0800ec78 <_ZN7tN2kMsgC1Ehhmi>:
#endif

//*****************************************************************************
tN2kMsg::tN2kMsg(unsigned char _Source, unsigned char _Priority, unsigned long _PGN, int _DataLen) {
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	607b      	str	r3, [r7, #4]
 800ec82:	460b      	mov	r3, r1
 800ec84:	72fb      	strb	r3, [r7, #11]
 800ec86:	4613      	mov	r3, r2
 800ec88:	72bb      	strb	r3, [r7, #10]
 800ec8a:	4a13      	ldr	r2, [pc, #76]	; (800ecd8 <_ZN7tN2kMsgC1Ehhmi+0x60>)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	601a      	str	r2, [r3, #0]
  Init(_Priority,_PGN,_Source,255);
 800ec90:	7afb      	ldrb	r3, [r7, #11]
 800ec92:	7ab9      	ldrb	r1, [r7, #10]
 800ec94:	22ff      	movs	r2, #255	; 0xff
 800ec96:	9200      	str	r2, [sp, #0]
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f000 f839 	bl	800ed12 <_ZN7tN2kMsg4InitEhmhh>
  if ( _DataLen>0 && _DataLen<MaxDataLen ) DataLen=_DataLen;
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	dd05      	ble.n	800ecb2 <_ZN7tN2kMsgC1Ehhmi+0x3a>
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	2bde      	cmp	r3, #222	; 0xde
 800ecaa:	dc02      	bgt.n	800ecb2 <_ZN7tN2kMsgC1Ehhmi+0x3a>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	69ba      	ldr	r2, [r7, #24]
 800ecb0:	611a      	str	r2, [r3, #16]
  ResetData();
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f000 f852 	bl	800ed5c <_ZN7tN2kMsg9ResetDataEv>
  if ( PGN!=0 ) MsgTime=N2kMillis();
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	689b      	ldr	r3, [r3, #8]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d005      	beq.n	800eccc <_ZN7tN2kMsgC1Ehhmi+0x54>
 800ecc0:	f001 f8bc 	bl	800fe3c <_Z9N2kMillisv>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	08019be0 	.word	0x08019be0

0800ecdc <_ZN7tN2kMsg6SetPGNEm>:

//*****************************************************************************
void tN2kMsg::SetPGN(unsigned long _PGN) {
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  Clear();
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	4798      	blx	r3
  if ( PGN==0 ) PGN=_PGN;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d102      	bne.n	800ecfe <_ZN7tN2kMsg6SetPGNEm+0x22>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	609a      	str	r2, [r3, #8]
  MsgTime=N2kMillis();
 800ecfe:	f001 f89d 	bl	800fe3c <_Z9N2kMillisv>
 800ed02:	4602      	mov	r2, r0
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <_ZN7tN2kMsg4InitEhmhh>:

//*****************************************************************************
void tN2kMsg::Init(unsigned char _Priority, unsigned long _PGN, unsigned char _Source, unsigned char _Destination) {
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b084      	sub	sp, #16
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	60f8      	str	r0, [r7, #12]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	460b      	mov	r3, r1
 800ed20:	72fb      	strb	r3, [r7, #11]
 800ed22:	4613      	mov	r3, r2
 800ed24:	72bb      	strb	r3, [r7, #10]
  DataLen=0;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	611a      	str	r2, [r3, #16]
  Priority=_Priority & 0x7;
 800ed2c:	7afb      	ldrb	r3, [r7, #11]
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	711a      	strb	r2, [r3, #4]
  SetPGN(_PGN);
 800ed38:	6879      	ldr	r1, [r7, #4]
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f7ff ffce 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  Source=_Source;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	7aba      	ldrb	r2, [r7, #10]
 800ed44:	731a      	strb	r2, [r3, #12]
  Destination=_Destination;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	7e3a      	ldrb	r2, [r7, #24]
 800ed4a:	735a      	strb	r2, [r3, #13]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
  TPMessage=false;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
#endif
}
 800ed54:	bf00      	nop
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN7tN2kMsg9ResetDataEv>:

//*****************************************************************************
void tN2kMsg::ResetData() {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  if ( DataLen>0 ) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	dd08      	ble.n	800ed7e <_ZN7tN2kMsg9ResetDataEv+0x22>
    memset(Data,0xff,DataLen);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f103 0014 	add.w	r0, r3, #20
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	461a      	mov	r2, r3
 800ed78:	21ff      	movs	r1, #255	; 0xff
 800ed7a:	f00a fadd 	bl	8019338 <memset>
  }
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <_ZN7tN2kMsg5ClearEv>:

//*****************************************************************************
void tN2kMsg::Clear() {
 800ed86:	b480      	push	{r7}
 800ed88:	b083      	sub	sp, #12
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
  PGN=0;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	609a      	str	r2, [r3, #8]
  DataLen=0;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	611a      	str	r2, [r3, #16]
  MsgTime=0;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 800eda2:	bf00      	nop
 800eda4:	370c      	adds	r7, #12
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bc80      	pop	{r7}
 800edaa:	4770      	bx	lr

0800edac <_ZN7tN2kMsg14Add2ByteDoubleEddd>:
    SetBuf3ByteInt(0x7fffff,DataLen,Data);
  }
}

//*****************************************************************************
void tN2kMsg::Add2ByteDouble(double v, double precision, double UndefVal) {
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 800edb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800edbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800edc0:	f7f1 fe68 	bl	8000a94 <__aeabi_dcmpeq>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10c      	bne.n	800ede4 <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x38>
    SetBuf2ByteDouble(v,precision,DataLen,Data);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3310      	adds	r3, #16
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	3214      	adds	r2, #20
 800edd2:	9201      	str	r2, [sp, #4]
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800edda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800edde:	f000 fa6f 	bl	800f2c0 <_Z17SetBuf2ByteDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
  }
}
 800ede2:	e009      	b.n	800edf8 <_ZN7tN2kMsg14Add2ByteDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kInt16NA,DataLen,Data);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f103 0110 	add.w	r1, r3, #16
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	3314      	adds	r3, #20
 800edee:	461a      	mov	r2, r3
 800edf0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800edf4:	f000 fb46 	bl	800f484 <_Z15SetBuf2ByteUInttRiPh>
}
 800edf8:	bf00      	nop
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <_ZN7tN2kMsg15Add2ByteUDoubleEddd>:

//*****************************************************************************
void tN2kMsg::Add2ByteUDouble(double v, double precision, double UndefVal) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af02      	add	r7, sp, #8
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 800ee0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ee10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee14:	f7f1 fe3e 	bl	8000a94 <__aeabi_dcmpeq>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10c      	bne.n	800ee38 <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x38>
    SetBuf2ByteUDouble(v,precision,DataLen,Data);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	3310      	adds	r3, #16
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	3214      	adds	r2, #20
 800ee26:	9201      	str	r2, [sp, #4]
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ee2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee32:	f000 fa8d 	bl	800f350 <_Z18SetBuf2ByteUDoubleddRiPh>
  } else {
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
  }
}
 800ee36:	e009      	b.n	800ee4c <_ZN7tN2kMsg15Add2ByteUDoubleEddd+0x4c>
    SetBuf2ByteUInt(N2kUInt16NA,DataLen,Data);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f103 0110 	add.w	r1, r3, #16
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	3314      	adds	r3, #20
 800ee42:	461a      	mov	r2, r3
 800ee44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ee48:	f000 fb1c 	bl	800f484 <_Z15SetBuf2ByteUInttRiPh>
}
 800ee4c:	bf00      	nop
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <_ZN7tN2kMsg15Add1ByteUDoubleEddd>:
    AddByte(N2kInt8NA);
  }
}

//*****************************************************************************
void tN2kMsg::Add1ByteUDouble(double v, double precision, double UndefVal) {
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af02      	add	r7, sp, #8
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	e9c7 2300 	strd	r2, r3, [r7]
  if (v!=UndefVal) {
 800ee60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ee64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee68:	f7f1 fe14 	bl	8000a94 <__aeabi_dcmpeq>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10c      	bne.n	800ee8c <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x38>
    SetBuf1ByteUDouble(v,precision,DataLen,Data);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3310      	adds	r3, #16
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	3214      	adds	r2, #20
 800ee7a:	9201      	str	r2, [sp, #4]
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ee82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee86:	f000 faa7 	bl	800f3d8 <_Z18SetBuf1ByteUDoubleddRiPh>
  } else {
    AddByte(N2kUInt8NA);
  }
}
 800ee8a:	e003      	b.n	800ee94 <_ZN7tN2kMsg15Add1ByteUDoubleEddd+0x40>
    AddByte(N2kUInt8NA);
 800ee8c:	21ff      	movs	r1, #255	; 0xff
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f000 f864 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
}
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <_ZN7tN2kMsg11Add2ByteIntEs>:

//*****************************************************************************
void tN2kMsg::Add2ByteInt(int16_t v) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteInt(v,DataLen,Data);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f103 0110 	add.w	r1, r3, #16
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f103 0214 	add.w	r2, r3, #20
 800eeb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 fad1 	bl	800f460 <_Z14SetBuf2ByteIntsRiPh>
}
 800eebe:	bf00      	nop
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>:

//*****************************************************************************
void tN2kMsg::Add2ByteUInt(uint16_t v) {
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b082      	sub	sp, #8
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	460b      	mov	r3, r1
 800eed0:	807b      	strh	r3, [r7, #2]
  SetBuf2ByteUInt(v,DataLen,Data);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f103 0110 	add.w	r1, r3, #16
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f103 0214 	add.w	r2, r3, #20
 800eede:	887b      	ldrh	r3, [r7, #2]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 facf 	bl	800f484 <_Z15SetBuf2ByteUInttRiPh>
}
 800eee6:	bf00      	nop
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <_ZN7tN2kMsg11Add3ByteIntEl>:

//*****************************************************************************
void tN2kMsg::Add3ByteInt(int32_t v) {
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b082      	sub	sp, #8
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	6039      	str	r1, [r7, #0]
  SetBuf3ByteInt(v,DataLen,Data);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f103 0110 	add.w	r1, r3, #16
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3314      	adds	r3, #20
 800ef02:	461a      	mov	r2, r3
 800ef04:	6838      	ldr	r0, [r7, #0]
 800ef06:	f000 face 	bl	800f4a6 <_Z14SetBuf3ByteIntlRiPh>
}
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <_ZN7tN2kMsg12Add4ByteUIntEm>:

//*****************************************************************************
void tN2kMsg::Add4ByteUInt(uint32_t v) {
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	6039      	str	r1, [r7, #0]
  SetBuf4ByteUInt(v,DataLen,Data);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f103 0110 	add.w	r1, r3, #16
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	3314      	adds	r3, #20
 800ef26:	461a      	mov	r2, r3
 800ef28:	6838      	ldr	r0, [r7, #0]
 800ef2a:	f000 facc 	bl	800f4c6 <_Z15SetBuf4ByteUIntmRiPh>
}
 800ef2e:	bf00      	nop
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <_ZN7tN2kMsg9AddUInt64Ey>:

//*****************************************************************************
void tN2kMsg::AddUInt64(uint64_t v) {
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b084      	sub	sp, #16
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	60f8      	str	r0, [r7, #12]
 800ef3e:	e9c7 2300 	strd	r2, r3, [r7]
  SetBufUInt64(v,DataLen,Data);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f103 0210 	add.w	r2, r3, #16
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	3314      	adds	r3, #20
 800ef4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef50:	f000 fac9 	bl	800f4e6 <_Z12SetBufUInt64yRiPh>
}
 800ef54:	bf00      	nop
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <_ZN7tN2kMsg7AddByteEh>:

//*****************************************************************************
void tN2kMsg::AddByte(unsigned char v) {
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70fb      	strb	r3, [r7, #3]
  Data[DataLen]=v; DataLen++;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	4413      	add	r3, r2
 800ef70:	78fa      	ldrb	r2, [r7, #3]
 800ef72:	751a      	strb	r2, [r3, #20]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	691b      	ldr	r3, [r3, #16]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	611a      	str	r2, [r3, #16]
}
 800ef7e:	bf00      	nop
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bc80      	pop	{r7}
 800ef86:	4770      	bx	lr

0800ef88 <_ZN7tN2kMsg6AddStrEPKcib>:

//*****************************************************************************
void tN2kMsg::AddStr(const char *str, int len, bool UsePgm) {
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b086      	sub	sp, #24
 800ef8c:	af02      	add	r7, sp, #8
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
 800ef94:	70fb      	strb	r3, [r7, #3]
  SetBufStr(str,len,DataLen,Data,UsePgm,0xff);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f103 0210 	add.w	r2, r3, #16
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f103 0114 	add.w	r1, r3, #20
 800efa2:	23ff      	movs	r3, #255	; 0xff
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	78fb      	ldrb	r3, [r7, #3]
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	460b      	mov	r3, r1
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	68b8      	ldr	r0, [r7, #8]
 800efb0:	f000 faac 	bl	800f50c <_Z9SetBufStrPKciRiPhbh>
}
 800efb4:	bf00      	nop
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <_ZNK7tN2kMsg7GetByteERi>:
    DataLen+=bufLen;
  }
}

//*****************************************************************************
unsigned char tN2kMsg::GetByte(int &Index) const {
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  if (Index<DataLen) {
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	429a      	cmp	r2, r3
 800efd0:	da08      	bge.n	800efe4 <_ZNK7tN2kMsg7GetByteERi+0x28>
    return Data[Index++];
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	1c59      	adds	r1, r3, #1
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	6011      	str	r1, [r2, #0]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	4413      	add	r3, r2
 800efe0:	7d1b      	ldrb	r3, [r3, #20]
 800efe2:	e000      	b.n	800efe6 <_ZNK7tN2kMsg7GetByteERi+0x2a>
  } else return 0xff;
 800efe4:	23ff      	movs	r3, #255	; 0xff
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	370c      	adds	r7, #12
 800efea:	46bd      	mov	sp, r7
 800efec:	bc80      	pop	{r7}
 800efee:	4770      	bx	lr

0800eff0 <_ZNK7tN2kMsg12Get2ByteUIntERit>:
    return GetBuf2ByteInt(Index,Data);
  } else return def;
}

//*****************************************************************************
uint16_t tN2kMsg::Get2ByteUInt(int &Index, uint16_t def) const {
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	80fb      	strh	r3, [r7, #6]
  if (Index+2<=DataLen) {
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	691b      	ldr	r3, [r3, #16]
 800f008:	429a      	cmp	r2, r3
 800f00a:	da07      	bge.n	800f01c <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2c>
    return GetBuf2ByteUInt(Index,Data);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	3314      	adds	r3, #20
 800f010:	4619      	mov	r1, r3
 800f012:	68b8      	ldr	r0, [r7, #8]
 800f014:	f000 f914 	bl	800f240 <_Z15GetBuf2ByteUIntRiPKh>
 800f018:	4603      	mov	r3, r0
 800f01a:	e000      	b.n	800f01e <_ZNK7tN2kMsg12Get2ByteUIntERit+0x2e>
  } else return def;
 800f01c:	88fb      	ldrh	r3, [r7, #6]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <_ZNK7tN2kMsg12Get3ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get3ByteUInt(int &Index, uint32_t def) const {
 800f026:	b580      	push	{r7, lr}
 800f028:	b084      	sub	sp, #16
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	60f8      	str	r0, [r7, #12]
 800f02e:	60b9      	str	r1, [r7, #8]
 800f030:	607a      	str	r2, [r7, #4]
  if (Index+3<=DataLen) {
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	1c9a      	adds	r2, r3, #2
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	da07      	bge.n	800f050 <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2a>
    return GetBuf3ByteUInt(Index,Data);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	3314      	adds	r3, #20
 800f044:	4619      	mov	r1, r3
 800f046:	68b8      	ldr	r0, [r7, #8]
 800f048:	f000 f909 	bl	800f25e <_Z15GetBuf3ByteUIntRiPKh>
 800f04c:	4603      	mov	r3, r0
 800f04e:	e000      	b.n	800f052 <_ZNK7tN2kMsg12Get3ByteUIntERim+0x2c>
  } else return def;
 800f050:	687b      	ldr	r3, [r7, #4]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <_ZNK7tN2kMsg12Get4ByteUIntERim>:

//*****************************************************************************
uint32_t tN2kMsg::Get4ByteUInt(int &Index, uint32_t def) const {
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	607a      	str	r2, [r7, #4]
  if (Index+4<=DataLen) {
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	1cda      	adds	r2, r3, #3
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	429a      	cmp	r2, r3
 800f072:	da07      	bge.n	800f084 <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2a>
    return GetBuf4ByteUInt(Index,Data);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3314      	adds	r3, #20
 800f078:	4619      	mov	r1, r3
 800f07a:	68b8      	ldr	r0, [r7, #8]
 800f07c:	f000 f8fe 	bl	800f27c <_Z15GetBuf4ByteUIntRiPKh>
 800f080:	4603      	mov	r3, r0
 800f082:	e000      	b.n	800f086 <_ZNK7tN2kMsg12Get4ByteUIntERim+0x2c>
  } else return def;
 800f084:	687b      	ldr	r3, [r7, #4]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <_ZNK7tN2kMsg9GetUInt64ERiy>:

//*****************************************************************************
uint64_t tN2kMsg::GetUInt64(int &Index, uint64_t def) const {
 800f08e:	b580      	push	{r7, lr}
 800f090:	b084      	sub	sp, #16
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	e9c7 2300 	strd	r2, r3, [r7]
  if (Index+8<=DataLen) {
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	1dda      	adds	r2, r3, #7
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	da08      	bge.n	800f0bc <_ZNK7tN2kMsg9GetUInt64ERiy+0x2e>
    return GetBuf8ByteUInt(Index,Data);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3314      	adds	r3, #20
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	68b8      	ldr	r0, [r7, #8]
 800f0b2:	f000 f8f2 	bl	800f29a <_Z15GetBuf8ByteUIntRiPKh>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	e001      	b.n	800f0c0 <_ZNK7tN2kMsg9GetUInt64ERiy+0x32>
  } else return def;
 800f0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <_ZNK7tN2kMsg6GetStrEjPcjhRi>:
    return true;
  } else return false;
}

//*****************************************************************************
bool tN2kMsg::GetStr(size_t StrBufSize, char *StrBuf, size_t Length, unsigned char nulChar, int &Index) const {
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b088      	sub	sp, #32
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	60b9      	str	r1, [r7, #8]
 800f0d4:	607a      	str	r2, [r7, #4]
 800f0d6:	603b      	str	r3, [r7, #0]
  unsigned char vb;
  bool nullReached = false;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	77fb      	strb	r3, [r7, #31]
  if ( StrBufSize==0 || StrBuf==0 ) {
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d002      	beq.n	800f0e8 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x1e>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d109      	bne.n	800f0fc <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x32>
    Index+=Length;
 800f0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	601a      	str	r2, [r3, #0]
    return true;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e062      	b.n	800f1c2 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  }
  StrBuf[0] = '\0';
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	701a      	strb	r2, [r3, #0]
  if ((size_t)Index+Length<=(size_t)DataLen) {
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	4413      	add	r3, r2
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	6912      	ldr	r2, [r2, #16]
 800f110:	4293      	cmp	r3, r2
 800f112:	d855      	bhi.n	800f1c0 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf6>
    size_t i;
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800f114:	2300      	movs	r3, #0
 800f116:	61bb      	str	r3, [r7, #24]
 800f118:	69ba      	ldr	r2, [r7, #24]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d22f      	bcs.n	800f180 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	3b01      	subs	r3, #1
 800f124:	69ba      	ldr	r2, [r7, #24]
 800f126:	429a      	cmp	r2, r3
 800f128:	d22a      	bcs.n	800f180 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xb6>
      vb = GetByte(Index);
 800f12a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f7ff ff45 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800f132:	4603      	mov	r3, r0
 800f134:	75fb      	strb	r3, [r7, #23]
      if (! nullReached) {
 800f136:	7ffb      	ldrb	r3, [r7, #31]
 800f138:	f083 0301 	eor.w	r3, r3, #1
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d015      	beq.n	800f16e <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xa4>
        if (vb == 0x00 || vb == nulChar ) {
 800f142:	7dfb      	ldrb	r3, [r7, #23]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d004      	beq.n	800f152 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x88>
 800f148:	7dfa      	ldrb	r2, [r7, #23]
 800f14a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f14e:	429a      	cmp	r2, r3
 800f150:	d107      	bne.n	800f162 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x98>
          nullReached = true; // either null or '@' (AIS null character)
 800f152:	2301      	movs	r3, #1
 800f154:	77fb      	strb	r3, [r7, #31]
          StrBuf[i] = '\0';
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	4413      	add	r3, r2
 800f15c:	2200      	movs	r2, #0
 800f15e:	701a      	strb	r2, [r3, #0]
 800f160:	e00a      	b.n	800f178 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        } else {
          StrBuf[i] = vb;
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	4413      	add	r3, r2
 800f168:	7dfa      	ldrb	r2, [r7, #23]
 800f16a:	701a      	strb	r2, [r3, #0]
 800f16c:	e004      	b.n	800f178 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xae>
        }
      } else {
        StrBuf[i] = '\0';
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	4413      	add	r3, r2
 800f174:	2200      	movs	r2, #0
 800f176:	701a      	strb	r2, [r3, #0]
    for (i=0; i<Length && i<StrBufSize-1; i++) {
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	3301      	adds	r3, #1
 800f17c:	61bb      	str	r3, [r7, #24]
 800f17e:	e7cb      	b.n	800f118 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0x4e>
      }
    }
    StrBuf[i] = '\0';
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	4413      	add	r3, r2
 800f186:	2200      	movs	r2, #0
 800f188:	701a      	strb	r2, [r3, #0]
    for (;i<Length;i++) GetByte(Index);  // Stopped by buffer size, so read out bytes from message
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d207      	bcs.n	800f1a2 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
 800f192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff ff11 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	3301      	adds	r3, #1
 800f19e:	61bb      	str	r3, [r7, #24]
 800f1a0:	e7f3      	b.n	800f18a <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xc0>
    for (;i<StrBufSize;i++) StrBuf[i] = '\0';  // Stopped by length, fill buffer with 0
 800f1a2:	69ba      	ldr	r2, [r7, #24]
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d208      	bcs.n	800f1bc <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf2>
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	701a      	strb	r2, [r3, #0]
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	61bb      	str	r3, [r7, #24]
 800f1ba:	e7f2      	b.n	800f1a2 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xd8>
    return true;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e000      	b.n	800f1c2 <_ZNK7tN2kMsg6GetStrEjPcjhRi+0xf8>
  } else return false;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3720      	adds	r7, #32
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <_ZNK7tN2kMsg9GetVarStrERjPcRi>:

//*****************************************************************************
bool tN2kMsg::GetVarStr(size_t &StrBufSize, char *StrBuf, int &Index) const {
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b088      	sub	sp, #32
 800f1ce:	af02      	add	r7, sp, #8
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	607a      	str	r2, [r7, #4]
 800f1d6:	603b      	str	r3, [r7, #0]
  size_t Len=GetByte(Index)-2;
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff feee 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	3b02      	subs	r3, #2
 800f1e4:	617b      	str	r3, [r7, #20]
  uint8_t Type=GetByte(Index);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f7ff fee7 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	74fb      	strb	r3, [r7, #19]
  if ( Type!=0x01 ) { StrBufSize=0; return false; }
 800f1f2:	7cfb      	ldrb	r3, [r7, #19]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d004      	beq.n	800f202 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x38>
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	2300      	movs	r3, #0
 800f200:	e01a      	b.n	800f238 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x6e>
  if ( StrBuf!=0 ) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00b      	beq.n	800f220 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x56>
    GetStr(StrBufSize,StrBuf,Len,0xff,Index);
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	6819      	ldr	r1, [r3, #0]
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	9301      	str	r3, [sp, #4]
 800f210:	23ff      	movs	r3, #255	; 0xff
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f7ff ff56 	bl	800f0ca <_ZNK7tN2kMsg6GetStrEjPcjhRi>
 800f21e:	e007      	b.n	800f230 <_ZNK7tN2kMsg9GetVarStrERjPcRi+0x66>
  } else {
    Index+=Len; // Just pass this string
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	461a      	mov	r2, r3
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	4413      	add	r3, r2
 800f22a:	461a      	mov	r2, r3
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	601a      	str	r2, [r3, #0]
  }
  StrBufSize=Len;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	601a      	str	r2, [r3, #0]
  return true;
 800f236:	2301      	movs	r3, #1
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3718      	adds	r7, #24
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <_Z15GetBuf2ByteUIntRiPKh>:
int16_t GetBuf2ByteInt(int &index, const unsigned char *buf) {
  return GetBuf<int16_t>(2, index, buf);
}

//*****************************************************************************
uint16_t GetBuf2ByteUInt(int &index, const unsigned char *buf) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
  return GetBuf<uint16_t>(2, index, buf);
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	2002      	movs	r0, #2
 800f250:	f000 fc86 	bl	800fb60 <_Z6GetBufItET_jRiPKh>
 800f254:	4603      	mov	r3, r0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <_Z15GetBuf3ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf3ByteUInt(int &index, const unsigned char *buf) {
 800f25e:	b580      	push	{r7, lr}
 800f260:	b082      	sub	sp, #8
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(3, index, buf);
 800f268:	683a      	ldr	r2, [r7, #0]
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	2003      	movs	r0, #3
 800f26e:	f000 fc97 	bl	800fba0 <_Z6GetBufImET_jRiPKh>
 800f272:	4603      	mov	r3, r0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_Z15GetBuf4ByteUIntRiPKh>:

//*****************************************************************************
uint32_t GetBuf4ByteUInt(int &index, const unsigned char *buf) {
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  return GetBuf<uint32_t>(4, index, buf);
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	6879      	ldr	r1, [r7, #4]
 800f28a:	2004      	movs	r0, #4
 800f28c:	f000 fc88 	bl	800fba0 <_Z6GetBufImET_jRiPKh>
 800f290:	4603      	mov	r3, r0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <_Z15GetBuf8ByteUIntRiPKh>:

//*****************************************************************************
uint64_t GetBuf8ByteUInt(int &index, const unsigned char *buf) {
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	6039      	str	r1, [r7, #0]
  return GetBuf<uint64_t>(8, index, buf);
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	2008      	movs	r0, #8
 800f2aa:	f000 fc99 	bl	800fbe0 <_Z6GetBufIyET_jRiPKh>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
}
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	0000      	movs	r0, r0
	...

0800f2c0 <_Z17SetBuf2ByteDoubleddRiPh>:

  return vl * precision;
}

//*****************************************************************************
void SetBuf2ByteDouble(double v, double precision, int &index, unsigned char *buf) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f2ca:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800f2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f2d6:	f7f1 fa9f 	bl	8000818 <__aeabi_ddiv>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	4610      	mov	r0, r2
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	f7ff fc93 	bl	800ec0c <round>
 800f2e6:	e9c7 0106 	strd	r0, r1, [r7, #24]
  int16_t vi = (vd>=N2kInt16Min && vd<N2kInt16OR)?(int16_t)vd:N2kInt16OR;
 800f2ea:	f04f 0200 	mov.w	r2, #0
 800f2ee:	4b16      	ldr	r3, [pc, #88]	; (800f348 <_Z17SetBuf2ByteDoubleddRiPh+0x88>)
 800f2f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f2f4:	f7f1 fbec 	bl	8000ad0 <__aeabi_dcmpge>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d010      	beq.n	800f320 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800f2fe:	a310      	add	r3, pc, #64	; (adr r3, 800f340 <_Z17SetBuf2ByteDoubleddRiPh+0x80>)
 800f300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f304:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f308:	f7f1 fbce 	bl	8000aa8 <__aeabi_dcmplt>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d006      	beq.n	800f320 <_Z17SetBuf2ByteDoubleddRiPh+0x60>
 800f312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f316:	f7f1 fbef 	bl	8000af8 <__aeabi_d2iz>
 800f31a:	4603      	mov	r3, r0
 800f31c:	b21b      	sxth	r3, r3
 800f31e:	e001      	b.n	800f324 <_Z17SetBuf2ByteDoubleddRiPh+0x64>
 800f320:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800f324:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800f326:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f32e:	2102      	movs	r1, #2
 800f330:	f000 fc7c 	bl	800fc2c <_Z6SetBufIsEvT_jRiPh>
}
 800f334:	bf00      	nop
 800f336:	3720      	adds	r7, #32
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	f3af 8000 	nop.w
 800f340:	00000000 	.word	0x00000000
 800f344:	40dfff80 	.word	0x40dfff80
 800f348:	c0e00000 	.word	0xc0e00000
 800f34c:	00000000 	.word	0x00000000

0800f350 <_Z18SetBuf2ByteUDoubleddRiPh>:

//*****************************************************************************
void SetBuf2ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 800f350:	b580      	push	{r7, lr}
 800f352:	b088      	sub	sp, #32
 800f354:	af00      	add	r7, sp, #0
 800f356:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f35a:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800f35e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f366:	f7f1 fa57 	bl	8000818 <__aeabi_ddiv>
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	4610      	mov	r0, r2
 800f370:	4619      	mov	r1, r3
 800f372:	f7ff fc4b 	bl	800ec0c <round>
 800f376:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint16_t vi = (vd>=0 && vd<N2kUInt16OR)?(uint16_t)vd:N2kUInt16OR;
 800f37a:	f04f 0200 	mov.w	r2, #0
 800f37e:	f04f 0300 	mov.w	r3, #0
 800f382:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f386:	f7f1 fba3 	bl	8000ad0 <__aeabi_dcmpge>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d010      	beq.n	800f3b2 <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800f390:	a30f      	add	r3, pc, #60	; (adr r3, 800f3d0 <_Z18SetBuf2ByteUDoubleddRiPh+0x80>)
 800f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f396:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f39a:	f7f1 fb85 	bl	8000aa8 <__aeabi_dcmplt>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d006      	beq.n	800f3b2 <_Z18SetBuf2ByteUDoubleddRiPh+0x62>
 800f3a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f3a8:	f7f1 fbce 	bl	8000b48 <__aeabi_d2uiz>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	e001      	b.n	800f3b6 <_Z18SetBuf2ByteUDoubleddRiPh+0x66>
 800f3b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f3b6:	82fb      	strh	r3, [r7, #22]
  SetBuf(vi, 2, index, buf);
 800f3b8:	8af8      	ldrh	r0, [r7, #22]
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3be:	2102      	movs	r1, #2
 800f3c0:	f000 fc53 	bl	800fc6a <_Z6SetBufItEvT_jRiPh>
}
 800f3c4:	bf00      	nop
 800f3c6:	3720      	adds	r7, #32
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	f3af 8000 	nop.w
 800f3d0:	00000000 	.word	0x00000000
 800f3d4:	40efffc0 	.word	0x40efffc0

0800f3d8 <_Z18SetBuf1ByteUDoubleddRiPh>:
  int8_t vi = (vd>=N2kInt8Min && vd<N2kInt8OR)?(int8_t)vd:N2kInt8OR;
  SetBuf(vi, 1, index, buf);
}

//*****************************************************************************
void SetBuf1ByteUDouble(double v, double precision, int &index, unsigned char *buf) {
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b088      	sub	sp, #32
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f3e2:	e9c7 2300 	strd	r2, r3, [r7]
  double vd=round((v/precision));
 800f3e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3ee:	f7f1 fa13 	bl	8000818 <__aeabi_ddiv>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f7ff fc07 	bl	800ec0c <round>
 800f3fe:	e9c7 0106 	strd	r0, r1, [r7, #24]
  uint8_t vi = (vd>=0 && vd<N2kUInt8OR)?(uint8_t)vd:N2kUInt8OR;
 800f402:	f04f 0200 	mov.w	r2, #0
 800f406:	f04f 0300 	mov.w	r3, #0
 800f40a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f40e:	f7f1 fb5f 	bl	8000ad0 <__aeabi_dcmpge>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d010      	beq.n	800f43a <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 800f418:	a30f      	add	r3, pc, #60	; (adr r3, 800f458 <_Z18SetBuf1ByteUDoubleddRiPh+0x80>)
 800f41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f422:	f7f1 fb41 	bl	8000aa8 <__aeabi_dcmplt>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d006      	beq.n	800f43a <_Z18SetBuf1ByteUDoubleddRiPh+0x62>
 800f42c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f430:	f7f1 fb8a 	bl	8000b48 <__aeabi_d2uiz>
 800f434:	4603      	mov	r3, r0
 800f436:	b2db      	uxtb	r3, r3
 800f438:	e000      	b.n	800f43c <_Z18SetBuf1ByteUDoubleddRiPh+0x64>
 800f43a:	23fe      	movs	r3, #254	; 0xfe
 800f43c:	75fb      	strb	r3, [r7, #23]
  SetBuf(vi, 1, index, buf);
 800f43e:	7df8      	ldrb	r0, [r7, #23]
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f444:	2101      	movs	r1, #1
 800f446:	f000 fc2f 	bl	800fca8 <_Z6SetBufIhEvT_jRiPh>
}
 800f44a:	bf00      	nop
 800f44c:	3720      	adds	r7, #32
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	f3af 8000 	nop.w
 800f458:	00000000 	.word	0x00000000
 800f45c:	406fc000 	.word	0x406fc000

0800f460 <_Z14SetBuf2ByteIntsRiPh>:

//*****************************************************************************
void SetBuf2ByteInt(int16_t v, int &index, unsigned char *buf) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800f46e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	68ba      	ldr	r2, [r7, #8]
 800f476:	2102      	movs	r1, #2
 800f478:	f000 fbd8 	bl	800fc2c <_Z6SetBufIsEvT_jRiPh>
}
 800f47c:	bf00      	nop
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <_Z15SetBuf2ByteUInttRiPh>:

//*****************************************************************************
void SetBuf2ByteUInt(uint16_t v, int &index, unsigned char *buf) {
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	4603      	mov	r3, r0
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	81fb      	strh	r3, [r7, #14]
  SetBuf(v, 2, index, buf);
 800f492:	89f8      	ldrh	r0, [r7, #14]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68ba      	ldr	r2, [r7, #8]
 800f498:	2102      	movs	r1, #2
 800f49a:	f000 fbe6 	bl	800fc6a <_Z6SetBufItEvT_jRiPh>
}
 800f49e:	bf00      	nop
 800f4a0:	3710      	adds	r7, #16
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <_Z14SetBuf3ByteIntlRiPh>:

//*****************************************************************************
void SetBuf3ByteInt(int32_t v, int &index, unsigned char *buf) {
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b084      	sub	sp, #16
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	60f8      	str	r0, [r7, #12]
 800f4ae:	60b9      	str	r1, [r7, #8]
 800f4b0:	607a      	str	r2, [r7, #4]
  SetBuf(v, 3, index, buf);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	2103      	movs	r1, #3
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f000 fb15 	bl	800fae8 <_Z6SetBufIlEvT_jRiPh>
}
 800f4be:	bf00      	nop
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <_Z15SetBuf4ByteUIntmRiPh>:

//*****************************************************************************
void SetBuf4ByteUInt(uint32_t v, int &index, unsigned char *buf) {
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b084      	sub	sp, #16
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	60f8      	str	r0, [r7, #12]
 800f4ce:	60b9      	str	r1, [r7, #8]
 800f4d0:	607a      	str	r2, [r7, #4]
  SetBuf(v, 4, index, buf);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	2104      	movs	r1, #4
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f000 fb23 	bl	800fb24 <_Z6SetBufImEvT_jRiPh>
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <_Z12SetBufUInt64yRiPh>:

//*****************************************************************************
void SetBufUInt64(uint64_t v, int &index, unsigned char *buf) {
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b086      	sub	sp, #24
 800f4ea:	af02      	add	r7, sp, #8
 800f4ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f4f0:	607a      	str	r2, [r7, #4]
 800f4f2:	603b      	str	r3, [r7, #0]
  SetBuf(v, 8, index, buf);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2208      	movs	r2, #8
 800f4fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f500:	f000 fbf1 	bl	800fce6 <_Z6SetBufIyEvT_jRiPh>
}
 800f504:	bf00      	nop
 800f506:	3710      	adds	r7, #16
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <_Z9SetBufStrPKciRiPhbh>:

//*****************************************************************************
void SetBufStr(const char *str, int len, int &index, unsigned char *buf, bool UsePgm, unsigned char fillChar) {
 800f50c:	b480      	push	{r7}
 800f50e:	b087      	sub	sp, #28
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
 800f518:	603b      	str	r3, [r7, #0]
  int i=0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	617b      	str	r3, [r7, #20]
  if ( UsePgm ) {
 800f51e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01c      	beq.n	800f560 <_Z9SetBufStrPKciRiPhbh+0x54>
    for (; i<len && str[i]!=0; i++, index++) {
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	da35      	bge.n	800f59a <_Z9SetBufStrPKciRiPhbh+0x8e>
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4413      	add	r3, r2
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d02f      	beq.n	800f59a <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=pgm_read_byte(&(str[i]));
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	441a      	add	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4619      	mov	r1, r3
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	440b      	add	r3, r1
 800f54a:	7812      	ldrb	r2, [r2, #0]
 800f54c:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	3301      	adds	r3, #1
 800f552:	617b      	str	r3, [r7, #20]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	1c5a      	adds	r2, r3, #1
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	601a      	str	r2, [r3, #0]
 800f55e:	e7e2      	b.n	800f526 <_Z9SetBufStrPKciRiPhbh+0x1a>
    }
  } else {
    for (; i<len && str[i]!=0; i++, index++) {
 800f560:	697a      	ldr	r2, [r7, #20]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	429a      	cmp	r2, r3
 800f566:	da18      	bge.n	800f59a <_Z9SetBufStrPKciRiPhbh+0x8e>
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	4413      	add	r3, r2
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d012      	beq.n	800f59a <_Z9SetBufStrPKciRiPhbh+0x8e>
      buf[index]=str[i];
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	441a      	add	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4619      	mov	r1, r3
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	440b      	add	r3, r1
 800f584:	7812      	ldrb	r2, [r2, #0]
 800f586:	701a      	strb	r2, [r3, #0]
    for (; i<len && str[i]!=0; i++, index++) {
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	3301      	adds	r3, #1
 800f58c:	617b      	str	r3, [r7, #20]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	601a      	str	r2, [r3, #0]
 800f598:	e7e2      	b.n	800f560 <_Z9SetBufStrPKciRiPhbh+0x54>
    }
  }
  for (; i<len; i++, index++) {
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	da10      	bge.n	800f5c4 <_Z9SetBufStrPKciRiPhbh+0xb8>
    buf[index]=fillChar;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	4413      	add	r3, r2
 800f5ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f5b0:	701a      	strb	r2, [r3, #0]
  for (; i<len; i++, index++) {
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	601a      	str	r2, [r3, #0]
 800f5c2:	e7ea      	b.n	800f59a <_Z9SetBufStrPKciRiPhbh+0x8e>
  }
}
 800f5c4:	bf00      	nop
 800f5c6:	371c      	adds	r7, #28
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bc80      	pop	{r7}
 800f5cc:	4770      	bx	lr
	...

0800f5d0 <_Z8PrintBufP9N2kStreamhPKhb>:

//*****************************************************************************
void PrintBuf(N2kStream *port, unsigned char len, const unsigned char *pData, bool AddLF) {
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	607a      	str	r2, [r7, #4]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	460b      	mov	r3, r1
 800f5de:	72fb      	strb	r3, [r7, #11]
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	72bb      	strb	r3, [r7, #10]
  if (port==0) return;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d021      	beq.n	800f62e <_Z8PrintBufP9N2kStreamhPKhb+0x5e>

  for(int i = 0; i<len; i++) {
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	617b      	str	r3, [r7, #20]
 800f5ee:	7afb      	ldrb	r3, [r7, #11]
 800f5f0:	697a      	ldr	r2, [r7, #20]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	da13      	bge.n	800f61e <_Z8PrintBufP9N2kStreamhPKhb+0x4e>
    if (i>0) { port->print(F(",")); };
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	dd03      	ble.n	800f604 <_Z8PrintBufP9N2kStreamhPKhb+0x34>
 800f5fc:	490e      	ldr	r1, [pc, #56]	; (800f638 <_Z8PrintBufP9N2kStreamhPKhb+0x68>)
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f000 fb8f 	bl	800fd22 <_ZN9N2kStream5printEPKc>
    // Print bytes as hex.
    port->print(pData[i], 16);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2210      	movs	r2, #16
 800f60e:	4619      	mov	r1, r3
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 fba3 	bl	800fd5c <_ZN9N2kStream5printEih>
  for(int i = 0; i<len; i++) {
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	3301      	adds	r3, #1
 800f61a:	617b      	str	r3, [r7, #20]
 800f61c:	e7e7      	b.n	800f5ee <_Z8PrintBufP9N2kStreamhPKhb+0x1e>
  }

  if (AddLF) port->println(F(""));
 800f61e:	7abb      	ldrb	r3, [r7, #10]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d005      	beq.n	800f630 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
 800f624:	4905      	ldr	r1, [pc, #20]	; (800f63c <_Z8PrintBufP9N2kStreamhPKhb+0x6c>)
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 fbd8 	bl	800fddc <_ZN9N2kStream7printlnEPKc>
 800f62c:	e000      	b.n	800f630 <_Z8PrintBufP9N2kStreamhPKhb+0x60>
  if (port==0) return;
 800f62e:	bf00      	nop
}
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	080197f8 	.word	0x080197f8
 800f63c:	080197fc 	.word	0x080197fc

0800f640 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>:

//*****************************************************************************
void tN2kMsg::Print(N2kStream *port, bool NoData) const {
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	4613      	mov	r3, r2
 800f64c:	71fb      	strb	r3, [r7, #7]
  if (port==0 || !IsValid()) return;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d008      	beq.n	800f666 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x26>
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f7ff fac5 	bl	800ebe4 <_ZNK7tN2kMsg7IsValidEv>
 800f65a:	4603      	mov	r3, r0
 800f65c:	f083 0301 	eor.w	r3, r3, #1
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2a>
 800f666:	2301      	movs	r3, #1
 800f668:	e000      	b.n	800f66c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x2c>
 800f66a:	2300      	movs	r3, #0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d15b      	bne.n	800f728 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xe8>
  port->print(N2kMillis()); port->print(F(" : "));
 800f670:	f000 fbe4 	bl	800fe3c <_Z9N2kMillisv>
 800f674:	4603      	mov	r3, r0
 800f676:	220a      	movs	r2, #10
 800f678:	4619      	mov	r1, r3
 800f67a:	68b8      	ldr	r0, [r7, #8]
 800f67c:	f000 fb6e 	bl	800fd5c <_ZN9N2kStream5printEih>
 800f680:	492b      	ldr	r1, [pc, #172]	; (800f730 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf0>)
 800f682:	68b8      	ldr	r0, [r7, #8]
 800f684:	f000 fb4d 	bl	800fd22 <_ZN9N2kStream5printEPKc>
  port->print(F("Pri:")); port->print(Priority);
 800f688:	492a      	ldr	r1, [pc, #168]	; (800f734 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf4>)
 800f68a:	68b8      	ldr	r0, [r7, #8]
 800f68c:	f000 fb49 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	791b      	ldrb	r3, [r3, #4]
 800f694:	220a      	movs	r2, #10
 800f696:	4619      	mov	r1, r3
 800f698:	68b8      	ldr	r0, [r7, #8]
 800f69a:	f000 fb5f 	bl	800fd5c <_ZN9N2kStream5printEih>
  port->print(F(" PGN:")); port->print(PGN);
 800f69e:	4926      	ldr	r1, [pc, #152]	; (800f738 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xf8>)
 800f6a0:	68b8      	ldr	r0, [r7, #8]
 800f6a2:	f000 fb3e 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	220a      	movs	r2, #10
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	68b8      	ldr	r0, [r7, #8]
 800f6b0:	f000 fb54 	bl	800fd5c <_ZN9N2kStream5printEih>
  port->print(F(" Source:")); port->print(Source);
 800f6b4:	4921      	ldr	r1, [pc, #132]	; (800f73c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xfc>)
 800f6b6:	68b8      	ldr	r0, [r7, #8]
 800f6b8:	f000 fb33 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	7b1b      	ldrb	r3, [r3, #12]
 800f6c0:	220a      	movs	r2, #10
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	68b8      	ldr	r0, [r7, #8]
 800f6c6:	f000 fb49 	bl	800fd5c <_ZN9N2kStream5printEih>
  port->print(F(" Dest:")); port->print(Destination);
 800f6ca:	491d      	ldr	r1, [pc, #116]	; (800f740 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x100>)
 800f6cc:	68b8      	ldr	r0, [r7, #8]
 800f6ce:	f000 fb28 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	7b5b      	ldrb	r3, [r3, #13]
 800f6d6:	220a      	movs	r2, #10
 800f6d8:	4619      	mov	r1, r3
 800f6da:	68b8      	ldr	r0, [r7, #8]
 800f6dc:	f000 fb3e 	bl	800fd5c <_ZN9N2kStream5printEih>
  port->print(F(" Len:")); port->print(DataLen);
 800f6e0:	4918      	ldr	r1, [pc, #96]	; (800f744 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x104>)
 800f6e2:	68b8      	ldr	r0, [r7, #8]
 800f6e4:	f000 fb1d 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	220a      	movs	r2, #10
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	68b8      	ldr	r0, [r7, #8]
 800f6f2:	f000 fb33 	bl	800fd5c <_ZN9N2kStream5printEih>
  if (!NoData) {
 800f6f6:	79fb      	ldrb	r3, [r7, #7]
 800f6f8:	f083 0301 	eor.w	r3, r3, #1
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00d      	beq.n	800f71e <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xde>
    port->print(F(" Data:"));
 800f702:	4911      	ldr	r1, [pc, #68]	; (800f748 <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x108>)
 800f704:	68b8      	ldr	r0, [r7, #8]
 800f706:	f000 fb0c 	bl	800fd22 <_ZN9N2kStream5printEPKc>
    PrintBuf(port,DataLen,Data);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	b2d9      	uxtb	r1, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f103 0214 	add.w	r2, r3, #20
 800f716:	2300      	movs	r3, #0
 800f718:	68b8      	ldr	r0, [r7, #8]
 800f71a:	f7ff ff59 	bl	800f5d0 <_Z8PrintBufP9N2kStreamhPKhb>
  }
  port->println(F(""));
 800f71e:	490b      	ldr	r1, [pc, #44]	; (800f74c <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0x10c>)
 800f720:	68b8      	ldr	r0, [r7, #8]
 800f722:	f000 fb5b 	bl	800fddc <_ZN9N2kStream7printlnEPKc>
 800f726:	e000      	b.n	800f72a <_ZNK7tN2kMsg5PrintEP9N2kStreamb+0xea>
  if (port==0 || !IsValid()) return;
 800f728:	bf00      	nop
}
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	08019800 	.word	0x08019800
 800f734:	08019804 	.word	0x08019804
 800f738:	0801980c 	.word	0x0801980c
 800f73c:	08019814 	.word	0x08019814
 800f740:	08019820 	.word	0x08019820
 800f744:	08019828 	.word	0x08019828
 800f748:	08019830 	.word	0x08019830
 800f74c:	080197fc 	.word	0x080197fc

0800f750 <_Z19AddByteEscapedToBufhRhPhRi>:

//*****************************************************************************
void AddByteEscapedToBuf(unsigned char byteToAdd, uint8_t &idx, unsigned char *buf, int &byteSum)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	607a      	str	r2, [r7, #4]
 800f75a:	603b      	str	r3, [r7, #0]
 800f75c:	4603      	mov	r3, r0
 800f75e:	73fb      	strb	r3, [r7, #15]
  buf[idx++]=byteToAdd;
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	1c5a      	adds	r2, r3, #1
 800f766:	b2d1      	uxtb	r1, r2
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	7011      	strb	r1, [r2, #0]
 800f76c:	461a      	mov	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4413      	add	r3, r2
 800f772:	7bfa      	ldrb	r2, [r7, #15]
 800f774:	701a      	strb	r2, [r3, #0]
  byteSum+=byteToAdd;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
 800f77c:	441a      	add	r2, r3
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	601a      	str	r2, [r3, #0]

  if (byteToAdd == Escape) {
 800f782:	7bfb      	ldrb	r3, [r7, #15]
 800f784:	2b10      	cmp	r3, #16
 800f786:	d10a      	bne.n	800f79e <_Z19AddByteEscapedToBufhRhPhRi+0x4e>
    buf[idx++]=Escape;
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	1c5a      	adds	r2, r3, #1
 800f78e:	b2d1      	uxtb	r1, r2
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	7011      	strb	r1, [r2, #0]
 800f794:	461a      	mov	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4413      	add	r3, r2
 800f79a:	2210      	movs	r2, #16
 800f79c:	701a      	strb	r2, [r3, #0]
  }
}
 800f79e:	bf00      	nop
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bc80      	pop	{r7}
 800f7a6:	4770      	bx	lr

0800f7a8 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>:

//*****************************************************************************
// Actisense Format:
// <10><02><93><length (1)><priority (1)><PGN (3)><destination (1)><source (1)><time (4)><len (1)><data (len)><CRC (1)><10><03>
void tN2kMsg::SendInActisenseFormat(N2kStream *port) const {
 800f7a8:	b590      	push	{r4, r7, lr}
 800f7aa:	b0ed      	sub	sp, #436	; 0x1b4
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f7b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f7b6:	6018      	str	r0, [r3, #0]
 800f7b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f7bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800f7c0:	6019      	str	r1, [r3, #0]
  unsigned long _PGN=PGN;
 800f7c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f7c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  unsigned long _MsgTime=MsgTime;
 800f7d2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f7d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  uint8_t msgIdx=0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
  int byteSum = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  uint8_t CheckSum;
  unsigned char ActisenseMsgBuf[MaxActisenseMsgBuf];

  if (port==0 || !IsValid()) return;
 800f7f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f7f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00c      	beq.n	800f818 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x70>
 800f7fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f802:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	f7ff f9ec 	bl	800ebe4 <_ZNK7tN2kMsg7IsValidEv>
 800f80c:	4603      	mov	r3, r0
 800f80e:	f083 0301 	eor.w	r3, r3, #1
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x74>
 800f818:	2301      	movs	r3, #1
 800f81a:	e000      	b.n	800f81e <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x76>
 800f81c:	2300      	movs	r3, #0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f040 815d 	bne.w	800fade <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x336>
  // Serial.print("freeMemory()="); Serial.println(freeMemory());

  ActisenseMsgBuf[msgIdx++]=Escape;
 800f824:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	b2d2      	uxtb	r2, r2
 800f82c:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800f830:	461a      	mov	r2, r3
 800f832:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f836:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800f83a:	2110      	movs	r1, #16
 800f83c:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++]=StartOfText;
 800f83e:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	b2d2      	uxtb	r2, r2
 800f846:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800f84a:	461a      	mov	r2, r3
 800f84c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f850:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800f854:	2102      	movs	r1, #2
 800f856:	5499      	strb	r1, [r3, r2]
  AddByteEscapedToBuf(MsgTypeN2k,msgIdx,ActisenseMsgBuf,byteSum);
 800f858:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f85c:	f107 020c 	add.w	r2, r7, #12
 800f860:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f864:	2093      	movs	r0, #147	; 0x93
 800f866:	f7ff ff73 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen+11,msgIdx,ActisenseMsgBuf,byteSum); //length does not include escaped chars
 800f86a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f86e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	b2db      	uxtb	r3, r3
 800f878:	330b      	adds	r3, #11
 800f87a:	b2d8      	uxtb	r0, r3
 800f87c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f880:	f107 020c 	add.w	r2, r7, #12
 800f884:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f888:	f7ff ff62 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Priority,msgIdx,ActisenseMsgBuf,byteSum);
 800f88c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f890:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	7918      	ldrb	r0, [r3, #4]
 800f898:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f89c:	f107 020c 	add.w	r2, r7, #12
 800f8a0:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f8a4:	f7ff ff54 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 800f8a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f8ac:	b2d8      	uxtb	r0, r3
 800f8ae:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f8b2:	f107 020c 	add.w	r2, r7, #12
 800f8b6:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f8ba:	f7ff ff49 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
 800f8be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f8c2:	0a1b      	lsrs	r3, r3, #8
 800f8c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _PGN>>=8;
 800f8c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f8cc:	b2d8      	uxtb	r0, r3
 800f8ce:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f8d2:	f107 020c 	add.w	r2, r7, #12
 800f8d6:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f8da:	f7ff ff39 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
 800f8de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f8e2:	0a1b      	lsrs	r3, r3, #8
 800f8e4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  AddByteEscapedToBuf(_PGN & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800f8e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f8ec:	b2d8      	uxtb	r0, r3
 800f8ee:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f8f2:	f107 020c 	add.w	r2, r7, #12
 800f8f6:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f8fa:	f7ff ff29 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Destination,msgIdx,ActisenseMsgBuf,byteSum);
 800f8fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f902:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	7b58      	ldrb	r0, [r3, #13]
 800f90a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f90e:	f107 020c 	add.w	r2, r7, #12
 800f912:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f916:	f7ff ff1b 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(Source,msgIdx,ActisenseMsgBuf,byteSum);
 800f91a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f91e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	7b18      	ldrb	r0, [r3, #12]
 800f926:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f92a:	f107 020c 	add.w	r2, r7, #12
 800f92e:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f932:	f7ff ff0d 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  // Time?
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800f936:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f93a:	b2d8      	uxtb	r0, r3
 800f93c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f940:	f107 020c 	add.w	r2, r7, #12
 800f944:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f948:	f7ff ff02 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
 800f94c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f950:	0a1b      	lsrs	r3, r3, #8
 800f952:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800f956:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f95a:	b2d8      	uxtb	r0, r3
 800f95c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f960:	f107 020c 	add.w	r2, r7, #12
 800f964:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f968:	f7ff fef2 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
 800f96c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f970:	0a1b      	lsrs	r3, r3, #8
 800f972:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum); _MsgTime>>=8;
 800f976:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f97a:	b2d8      	uxtb	r0, r3
 800f97c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f980:	f107 020c 	add.w	r2, r7, #12
 800f984:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f988:	f7ff fee2 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
 800f98c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f990:	0a1b      	lsrs	r3, r3, #8
 800f992:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  AddByteEscapedToBuf(_MsgTime & 0xff,msgIdx,ActisenseMsgBuf,byteSum);
 800f996:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800f99a:	b2d8      	uxtb	r0, r3
 800f99c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f9a0:	f107 020c 	add.w	r2, r7, #12
 800f9a4:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f9a8:	f7ff fed2 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
  AddByteEscapedToBuf(DataLen,msgIdx,ActisenseMsgBuf,byteSum);
 800f9ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f9b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	b2d8      	uxtb	r0, r3
 800f9ba:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f9be:	f107 020c 	add.w	r2, r7, #12
 800f9c2:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800f9c6:	f7ff fec3 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>


  for (int i = 0; i < DataLen; i++) AddByteEscapedToBuf(Data[i],msgIdx,ActisenseMsgBuf,byteSum);
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800f9d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f9d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	da17      	bge.n	800fa14 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x26c>
 800f9e4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800f9e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f9ec:	681a      	ldr	r2, [r3, #0]
 800f9ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800f9f2:	4413      	add	r3, r2
 800f9f4:	3314      	adds	r3, #20
 800f9f6:	7818      	ldrb	r0, [r3, #0]
 800f9f8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800f9fc:	f107 020c 	add.w	r2, r7, #12
 800fa00:	f507 71d1 	add.w	r1, r7, #418	; 0x1a2
 800fa04:	f7ff fea4 	bl	800f750 <_Z19AddByteEscapedToBufhRhPhRi>
 800fa08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800fa12:	e7dd      	b.n	800f9d0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x228>
  byteSum %= 256;
 800fa14:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa18:	425a      	negs	r2, r3
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	b2d2      	uxtb	r2, r2
 800fa1e:	bf58      	it	pl
 800fa20:	4253      	negpl	r3, r2
 800fa22:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

  CheckSum = (uint8_t)((byteSum == 0) ? 0 : (256 - byteSum));
 800fa26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d005      	beq.n	800fa3a <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x292>
 800fa2e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	425b      	negs	r3, r3
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	e000      	b.n	800fa3c <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x294>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
  ActisenseMsgBuf[msgIdx++]=CheckSum;
 800fa40:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	b2d2      	uxtb	r2, r2
 800fa48:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fa52:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800fa56:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 800fa5a:	545a      	strb	r2, [r3, r1]
  if (CheckSum==Escape) ActisenseMsgBuf[msgIdx++]=CheckSum;
 800fa5c:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800fa60:	2b10      	cmp	r3, #16
 800fa62:	d10d      	bne.n	800fa80 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x2d8>
 800fa64:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800fa68:	1c5a      	adds	r2, r3, #1
 800fa6a:	b2d2      	uxtb	r2, r2
 800fa6c:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800fa70:	4619      	mov	r1, r3
 800fa72:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fa76:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800fa7a:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 800fa7e:	545a      	strb	r2, [r3, r1]

  ActisenseMsgBuf[msgIdx++] = Escape;
 800fa80:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800fa84:	1c5a      	adds	r2, r3, #1
 800fa86:	b2d2      	uxtb	r2, r2
 800fa88:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fa92:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800fa96:	2110      	movs	r1, #16
 800fa98:	5499      	strb	r1, [r3, r2]
  ActisenseMsgBuf[msgIdx++] = EndOfText;
 800fa9a:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	b2d2      	uxtb	r2, r2
 800faa2:	f887 21a2 	strb.w	r2, [r7, #418]	; 0x1a2
 800faa6:	461a      	mov	r2, r3
 800faa8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800faac:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800fab0:	2103      	movs	r1, #3
 800fab2:	5499      	strb	r1, [r3, r2]

//  if ( port->availableForWrite()>msgIdx ) {  // 16.7.2017 did not work yet
    port->write(ActisenseMsgBuf,msgIdx);
 800fab4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fab8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	3308      	adds	r3, #8
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 800fac8:	4614      	mov	r4, r2
 800faca:	f107 010c 	add.w	r1, r7, #12
 800face:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800fad2:	f5a2 70d8 	sub.w	r0, r2, #432	; 0x1b0
 800fad6:	4622      	mov	r2, r4
 800fad8:	6800      	ldr	r0, [r0, #0]
 800fada:	4798      	blx	r3
 800fadc:	e000      	b.n	800fae0 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream+0x338>
  if (port==0 || !IsValid()) return;
 800fade:	bf00      	nop
//  }
    //Serial.print("Actisense data:");
    //PrintBuf(msgIdx,ActisenseMsgBuf);
    //Serial.print("\r\n");
}
 800fae0:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd90      	pop	{r4, r7, pc}

0800fae8 <_Z6SetBufIlEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
 800faf4:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	4413      	add	r3, r2
 800fb00:	f107 010c 	add.w	r1, r7, #12
 800fb04:	68ba      	ldr	r2, [r7, #8]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f009 fc08 	bl	801931c <memcpy>
  index += len;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	461a      	mov	r2, r3
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	4413      	add	r3, r2
 800fb16:	461a      	mov	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	601a      	str	r2, [r3, #0]
}
 800fb1c:	bf00      	nop
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <_Z6SetBufImEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
 800fb30:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	f107 010c 	add.w	r1, r7, #12
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f009 fbea 	bl	801931c <memcpy>
  index += len;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	4413      	add	r3, r2
 800fb52:	461a      	mov	r2, r3
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	601a      	str	r2, [r3, #0]
}
 800fb58:	bf00      	nop
 800fb5a:	3710      	adds	r7, #16
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_Z6GetBufItET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
  T v{0};
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	82fb      	strh	r3, [r7, #22]
  memcpy(&v, &buf[index], len);
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	461a      	mov	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	1899      	adds	r1, r3, r2
 800fb7a:	f107 0316 	add.w	r3, r7, #22
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f009 fbcb 	bl	801931c <memcpy>
  index += len;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	4413      	add	r3, r2
 800fb90:	461a      	mov	r2, r3
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	601a      	str	r2, [r3, #0]
  return v;
 800fb96:	8afb      	ldrh	r3, [r7, #22]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_Z6GetBufImET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
  T v{0};
 800fbac:	2300      	movs	r3, #0
 800fbae:	617b      	str	r3, [r7, #20]
  memcpy(&v, &buf[index], len);
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	1899      	adds	r1, r3, r2
 800fbba:	f107 0314 	add.w	r3, r7, #20
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f009 fbab 	bl	801931c <memcpy>
  index += len;
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4413      	add	r3, r2
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	601a      	str	r2, [r3, #0]
  return v;
 800fbd6:	697b      	ldr	r3, [r7, #20]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <_Z6GetBufIyET_jRiPKh>:
T GetBuf(size_t len, int& index, const unsigned char* buf) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
  T v{0};
 800fbec:	f04f 0200 	mov.w	r2, #0
 800fbf0:	f04f 0300 	mov.w	r3, #0
 800fbf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  memcpy(&v, &buf[index], len);
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	1899      	adds	r1, r3, r2
 800fc02:	f107 0310 	add.w	r3, r7, #16
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f009 fb87 	bl	801931c <memcpy>
  index += len;
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4413      	add	r3, r2
 800fc18:	461a      	mov	r2, r3
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	601a      	str	r2, [r3, #0]
  return v;
 800fc1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800fc22:	4610      	mov	r0, r2
 800fc24:	4619      	mov	r1, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <_Z6SetBufIsEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	607a      	str	r2, [r7, #4]
 800fc36:	603b      	str	r3, [r7, #0]
 800fc38:	4603      	mov	r3, r0
 800fc3a:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	461a      	mov	r2, r3
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	4413      	add	r3, r2
 800fc46:	f107 010e 	add.w	r1, r7, #14
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f009 fb65 	bl	801931c <memcpy>
  index += len;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	461a      	mov	r2, r3
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	601a      	str	r2, [r3, #0]
}
 800fc62:	bf00      	nop
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <_Z6SetBufItEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	607a      	str	r2, [r7, #4]
 800fc74:	603b      	str	r3, [r7, #0]
 800fc76:	4603      	mov	r3, r0
 800fc78:	81fb      	strh	r3, [r7, #14]
  memcpy(&buf[index], &v, len);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	4413      	add	r3, r2
 800fc84:	f107 010e 	add.w	r1, r7, #14
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f009 fb46 	bl	801931c <memcpy>
  index += len;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	4413      	add	r3, r2
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	601a      	str	r2, [r3, #0]
}
 800fca0:	bf00      	nop
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <_Z6SetBufIhEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60b9      	str	r1, [r7, #8]
 800fcb0:	607a      	str	r2, [r7, #4]
 800fcb2:	603b      	str	r3, [r7, #0]
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73fb      	strb	r3, [r7, #15]
  memcpy(&buf[index], &v, len);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f107 010f 	add.w	r1, r7, #15
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f009 fb27 	bl	801931c <memcpy>
  index += len;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	461a      	mov	r2, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	601a      	str	r2, [r3, #0]
}
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <_Z6SetBufIyEvT_jRiPh>:
void SetBuf(T v, size_t len, int& index, unsigned char* buf) {
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b084      	sub	sp, #16
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800fcf0:	607a      	str	r2, [r7, #4]
 800fcf2:	603b      	str	r3, [r7, #0]
  memcpy(&buf[index], &v, len);
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f107 0108 	add.w	r1, r7, #8
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f009 fb09 	bl	801931c <memcpy>
  index += len;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4413      	add	r3, r2
 800fd14:	461a      	mov	r2, r3
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	601a      	str	r2, [r3, #0]
}
 800fd1a:	bf00      	nop
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <_ZN9N2kStream5printEPKc>:
#include <string.h>

#ifdef ARDUINO
// Arduino uses its own implementation.
#else
size_t N2kStream::print(const char *str) {
 800fd22:	b590      	push	{r4, r7, lr}
 800fd24:	b083      	sub	sp, #12
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
   if(str == 0)
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <_ZN9N2kStream5printEPKc+0x14>
      return 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	e00d      	b.n	800fd52 <_ZN9N2kStream5printEPKc+0x30>

   return write(reinterpret_cast<const uint8_t*>(str), strlen(str));
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	681c      	ldr	r4, [r3, #0]
 800fd3e:	6838      	ldr	r0, [r7, #0]
 800fd40:	f7f0 fa7c 	bl	800023c <strlen>
 800fd44:	4603      	mov	r3, r0
 800fd46:	461a      	mov	r2, r3
 800fd48:	6839      	ldr	r1, [r7, #0]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	47a0      	blx	r4
 800fd4e:	4603      	mov	r3, r0
 800fd50:	bf00      	nop
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	370c      	adds	r7, #12
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd90      	pop	{r4, r7, pc}
	...

0800fd5c <_ZN9N2kStream5printEih>:
   return print(str) + print("\r\n");
}
#endif


size_t N2kStream::print(int val, uint8_t radix) {
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08e      	sub	sp, #56	; 0x38
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	4613      	mov	r3, r2
 800fd68:	71fb      	strb	r3, [r7, #7]

   if(val == 0) {
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d109      	bne.n	800fd84 <_ZN9N2kStream5printEih+0x28>
      // 0 is always 0 regardless of radix.
      return write(reinterpret_cast<const uint8_t*>("0"), 1);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	3308      	adds	r3, #8
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	4916      	ldr	r1, [pc, #88]	; (800fdd4 <_ZN9N2kStream5printEih+0x78>)
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	4798      	blx	r3
 800fd80:	4603      	mov	r3, r0
 800fd82:	e023      	b.n	800fdcc <_ZN9N2kStream5printEih+0x70>
   }

   // Enough for binary representation.
   char buf[8 * sizeof(val) + 1];
   char *ptr = &buf[sizeof(buf) - 1];
 800fd84:	f107 0310 	add.w	r3, r7, #16
 800fd88:	3320      	adds	r3, #32
 800fd8a:	637b      	str	r3, [r7, #52]	; 0x34
   *ptr = '\0';
 800fd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8e:	2200      	movs	r2, #0
 800fd90:	701a      	strb	r2, [r3, #0]

   do {
      *--ptr="0123456789abcdef"[val % radix];
 800fd92:	79fa      	ldrb	r2, [r7, #7]
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	fb93 f1f2 	sdiv	r1, r3, r2
 800fd9a:	fb01 f202 	mul.w	r2, r1, r2
 800fd9e:	1a9b      	subs	r3, r3, r2
 800fda0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fda2:	3a01      	subs	r2, #1
 800fda4:	637a      	str	r2, [r7, #52]	; 0x34
 800fda6:	4a0c      	ldr	r2, [pc, #48]	; (800fdd8 <_ZN9N2kStream5printEih+0x7c>)
 800fda8:	5cd2      	ldrb	r2, [r2, r3]
 800fdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdac:	701a      	strb	r2, [r3, #0]
      val /= radix;
 800fdae:	79fb      	ldrb	r3, [r7, #7]
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	fb92 f3f3 	sdiv	r3, r2, r3
 800fdb6:	60bb      	str	r3, [r7, #8]
   } while(val != 0);
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d000      	beq.n	800fdc0 <_ZN9N2kStream5printEih+0x64>
   do {
 800fdbe:	e7e8      	b.n	800fd92 <_ZN9N2kStream5printEih+0x36>

   return print(ptr);
 800fdc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f7ff ffad 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	bf00      	nop
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3738      	adds	r7, #56	; 0x38
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	08019838 	.word	0x08019838
 800fdd8:	0801983c 	.word	0x0801983c

0800fddc <_ZN9N2kStream7printlnEPKc>:

size_t N2kStream::println(const char *str) {
 800fddc:	b590      	push	{r4, r7, lr}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
   return print(str) + print("\r\n");
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff ff9a 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800fdee:	4604      	mov	r4, r0
 800fdf0:	4904      	ldr	r1, [pc, #16]	; (800fe04 <_ZN9N2kStream7printlnEPKc+0x28>)
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7ff ff95 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	4423      	add	r3, r4
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd90      	pop	{r4, r7, pc}
 800fe04:	08019850 	.word	0x08019850

0800fe08 <_ZN9N2kStream7printlnEih>:

size_t N2kStream::println(int val, uint8_t radix) {
 800fe08:	b590      	push	{r4, r7, lr}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	4613      	mov	r3, r2
 800fe14:	71fb      	strb	r3, [r7, #7]
   return print(val, radix) + print("\r\n");
 800fe16:	79fb      	ldrb	r3, [r7, #7]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	68b9      	ldr	r1, [r7, #8]
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff ff9d 	bl	800fd5c <_ZN9N2kStream5printEih>
 800fe22:	4604      	mov	r4, r0
 800fe24:	4904      	ldr	r1, [pc, #16]	; (800fe38 <_ZN9N2kStream7printlnEih+0x30>)
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff ff7b 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	4423      	add	r3, r4
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3714      	adds	r7, #20
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd90      	pop	{r4, r7, pc}
 800fe38:	08019850 	.word	0x08019850

0800fe3c <_Z9N2kMillisv>:
  #else
    extern "C" {
    // Current uptime in milliseconds. Must be implemented by application.
    extern uint32_t millis();
    }
    uint32_t N2kMillis() { return millis(); }
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	f7fc f850 	bl	800bee4 <millis>
 800fe44:	4603      	mov	r3, r0
 800fe46:	4618      	mov	r0, r3
 800fe48:	bd80      	pop	{r7, pc}
	...

0800fe4c <_Z11N2kMillis64v>:
  #endif

  uint64_t N2kMillis64() {
 800fe4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
    static uint32_t RollCount=0;
    static uint32_t LastRead=0;
    uint32_t Now=millis();
 800fe54:	f7fc f846 	bl	800bee4 <millis>
 800fe58:	6078      	str	r0, [r7, #4]
    if ( LastRead>Now ) RollCount++;
 800fe5a:	4b14      	ldr	r3, [pc, #80]	; (800feac <_Z11N2kMillis64v+0x60>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d204      	bcs.n	800fe6e <_Z11N2kMillis64v+0x22>
 800fe64:	4b12      	ldr	r3, [pc, #72]	; (800feb0 <_Z11N2kMillis64v+0x64>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	4a11      	ldr	r2, [pc, #68]	; (800feb0 <_Z11N2kMillis64v+0x64>)
 800fe6c:	6013      	str	r3, [r2, #0]
    LastRead=Now;
 800fe6e:	4a0f      	ldr	r2, [pc, #60]	; (800feac <_Z11N2kMillis64v+0x60>)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6013      	str	r3, [r2, #0]
    return ((uint64_t)RollCount)<<32 | Now;
 800fe74:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <_Z11N2kMillis64v+0x64>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	469a      	mov	sl, r3
 800fe7c:	4693      	mov	fp, r2
 800fe7e:	f04f 0200 	mov.w	r2, #0
 800fe82:	f04f 0300 	mov.w	r3, #0
 800fe86:	4653      	mov	r3, sl
 800fe88:	2200      	movs	r2, #0
 800fe8a:	6879      	ldr	r1, [r7, #4]
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	460c      	mov	r4, r1
 800fe90:	4605      	mov	r5, r0
 800fe92:	ea42 0804 	orr.w	r8, r2, r4
 800fe96:	ea43 0905 	orr.w	r9, r3, r5
 800fe9a:	4642      	mov	r2, r8
 800fe9c:	464b      	mov	r3, r9
  }
 800fe9e:	4610      	mov	r0, r2
 800fea0:	4619      	mov	r1, r3
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800feaa:	bf00      	nop
 800feac:	20000a64 	.word	0x20000a64
 800feb0:	20000a60 	.word	0x20000a60

0800feb4 <_ZN13tN2kScheduler3NowEv>:
#endif

#if !defined(N2kUse64bitSchedulerTime)
// *****************************************************************************
tN2kSchedulerTime tN2kScheduler::Now() {
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  return N2kMillis();
 800febc:	f7ff ffbe 	bl	800fe3c <_Z9N2kMillisv>
 800fec0:	4603      	mov	r3, r0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <_ZN7tN2kMsg14SetIsTPMessageEb>:
  void SetIsTPMessage(bool tp=true) { TPMessage=tp; }
 800feca:	b480      	push	{r7}
 800fecc:	b083      	sub	sp, #12
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
 800fed2:	460b      	mov	r3, r1
 800fed4:	70fb      	strb	r3, [r7, #3]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	78fa      	ldrb	r2, [r7, #3]
 800feda:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800fede:	bf00      	nop
 800fee0:	370c      	adds	r7, #12
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bc80      	pop	{r7}
 800fee6:	4770      	bx	lr

0800fee8 <_ZNK7tN2kMsg11ForceSourceEh>:
  void ForceSource(unsigned char _Source) const { Source=_Source; }
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	70fb      	strb	r3, [r7, #3]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	78fa      	ldrb	r2, [r7, #3]
 800fef8:	731a      	strb	r2, [r3, #12]
 800fefa:	bf00      	nop
 800fefc:	370c      	adds	r7, #12
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bc80      	pop	{r7}
 800ff02:	4770      	bx	lr

0800ff04 <_ZNK7tN2kMsg16CheckDestinationEv>:
  void CheckDestination() const { if ( (PGN & 0xff)!=0 ) Destination=0xff; } // We can send to specified destination only for PGN:s low byte=0
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d002      	beq.n	800ff1c <_ZNK7tN2kMsg16CheckDestinationEv+0x18>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	22ff      	movs	r2, #255	; 0xff
 800ff1a:	735a      	strb	r2, [r3, #13]
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bc80      	pop	{r7}
 800ff24:	4770      	bx	lr

0800ff26 <_ZN10tN2kCANMsgC1Ev>:
#include <N2kMsg.h>

class tN2kCANMsg
{
public:
  tN2kCANMsg()
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af02      	add	r7, sp, #8
 800ff2c:	6078      	str	r0, [r7, #4]
    : Ready(false),FreeMsg(true),SystemMessage(false), KnownMessage(false) 
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      ,TPRequireCTS(false), TPMaxPackets(0) 
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	2300      	movs	r3, #0
 800ff32:	9300      	str	r3, [sp, #0]
 800ff34:	2300      	movs	r3, #0
 800ff36:	2206      	movs	r2, #6
 800ff38:	210f      	movs	r1, #15
 800ff3a:	f7fe fe9d 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2201      	movs	r2, #1
 800ff4a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
#endif
    {
	  N2kMsg.Clear();
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fe ff08 	bl	800ed86 <_ZN7tN2kMsg5ClearEv>
  }
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <_ZN10tN2kCANMsg11FreeMessageEv>:
#endif
  unsigned char LastFrame; // Last received frame sequence number on fast packets or multi packet
  unsigned char CopiedLen;
  
public:
  void FreeMessage() { 
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    FreeMsg=true; Ready=false; SystemMessage=false; 
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    TPMaxPackets=0; TPRequireCTS=false; 
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
#endif
    N2kMsg.Clear(); N2kMsg.Source=0; 
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fe fee7 	bl	800ed86 <_ZN7tN2kMsg5ClearEv>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	731a      	strb	r2, [r3, #12]
  }  
 800ffbe:	bf00      	nop
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <_Z15N2kIsTimeBeforemm>:
inline bool N2kIsTimeBefore(uint32_t T1, uint32_t T2) { return (T2-T1)<LONG_MAX; }
 800ffc6:	b480      	push	{r7}
 800ffc8:	b083      	sub	sp, #12
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	1ad3      	subs	r3, r2, r3
 800ffd6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	bf34      	ite	cc
 800ffde:	2301      	movcc	r3, #1
 800ffe0:	2300      	movcs	r3, #0
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bc80      	pop	{r7}
 800ffec:	4770      	bx	lr

0800ffee <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>:
  void SetPeriodAndOffset(uint32_t _Period, uint32_t _Offset) { 
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b084      	sub	sp, #16
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	60f8      	str	r0, [r7, #12]
 800fff6:	60b9      	str	r1, [r7, #8]
 800fff8:	607a      	str	r2, [r7, #4]
    Period=_Period; 
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	60da      	str	r2, [r3, #12]
    Offset=_Offset;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	609a      	str	r2, [r3, #8]
    if ( Period==0 ) Disable(); 
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d102      	bne.n	8010014 <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm+0x26>
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f7f1 fd6f 	bl	8001af2 <_ZN17tN2kSyncScheduler7DisableEv>
    UpdateNextTime(); 
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f7f1 fd8f 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
  }
 801001a:	bf00      	nop
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <_ZNK17tN2kSyncScheduler9GetOffsetEv>:
  uint32_t GetOffset() const { return Offset; }
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	bc80      	pop	{r7}
 8010036:	4770      	bx	lr

08010038 <_ZNK17tN2kSyncScheduler9GetPeriodEv>:
  uint32_t GetPeriod() const { return Period; }
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	bc80      	pop	{r7}
 801004c:	4770      	bx	lr
	...

08010050 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>:

  static void SetSyncOffset() { SyncOffset=N2kMillis64(); }
 8010050:	b580      	push	{r7, lr}
 8010052:	af00      	add	r7, sp, #0
 8010054:	f7ff fefa 	bl	800fe4c <_Z11N2kMillis64v>
 8010058:	4602      	mov	r2, r0
 801005a:	460b      	mov	r3, r1
 801005c:	4902      	ldr	r1, [pc, #8]	; (8010068 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv+0x18>)
 801005e:	e9c1 2300 	strd	r2, r3, [r1]
 8010062:	bf00      	nop
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20000a58 	.word	0x20000a58

0801006c <_ZN13tN2kSchedulerC1Em>:
  tN2kSchedulerTime NextTime;
  #if !defined(N2kUse64bitSchedulerTime)
  tN2kSchedulerTime Now();
  #endif
public:
  tN2kScheduler(tN2kSchedulerTime _NextTime=N2kSchedulerDisabled) : NextTime(_NextTime) { }
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	601a      	str	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4618      	mov	r0, r3
 8010080:	370c      	adds	r7, #12
 8010082:	46bd      	mov	sp, r7
 8010084:	bc80      	pop	{r7}
 8010086:	4770      	bx	lr

08010088 <_ZN13tN2kScheduler7DisableEv>:
  void Disable() { 
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
    NextTime=N2kSchedulerDisabled; 
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010096:	601a      	str	r2, [r3, #0]
  }
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	bc80      	pop	{r7}
 80100a0:	4770      	bx	lr

080100a2 <_ZNK13tN2kScheduler10IsDisabledEv>:
  bool IsDisabled() const { return NextTime==N2kSchedulerDisabled; }
 80100a2:	b480      	push	{r7}
 80100a4:	b083      	sub	sp, #12
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100b2:	bf0c      	ite	eq
 80100b4:	2301      	moveq	r3, #1
 80100b6:	2300      	movne	r3, #0
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	4618      	mov	r0, r3
 80100bc:	370c      	adds	r7, #12
 80100be:	46bd      	mov	sp, r7
 80100c0:	bc80      	pop	{r7}
 80100c2:	4770      	bx	lr

080100c4 <_ZNK13tN2kScheduler9IsEnabledEv>:
  bool IsEnabled() const { return NextTime!=N2kSchedulerDisabled; }
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100d4:	bf14      	ite	ne
 80100d6:	2301      	movne	r3, #1
 80100d8:	2300      	moveq	r3, #0
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	4618      	mov	r0, r3
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bc80      	pop	{r7}
 80100e4:	4770      	bx	lr

080100e6 <_ZNK13tN2kScheduler6IsTimeEv>:
  bool IsTime() const {
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
    #if defined(N2kUse64bitSchedulerTime)
    return N2kMillis64()>NextTime;
    #else
    return !IsDisabled() && ( N2kMillis()-NextTime<LONG_MAX );
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7ff ffd7 	bl	80100a2 <_ZNK13tN2kScheduler10IsDisabledEv>
 80100f4:	4603      	mov	r3, r0
 80100f6:	f083 0301 	eor.w	r3, r3, #1
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00b      	beq.n	8010118 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 8010100:	f7ff fe9c 	bl	800fe3c <_Z9N2kMillisv>
 8010104:	4602      	mov	r2, r0
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010110:	4293      	cmp	r3, r2
 8010112:	d201      	bcs.n	8010118 <_ZNK13tN2kScheduler6IsTimeEv+0x32>
 8010114:	2301      	movs	r3, #1
 8010116:	e000      	b.n	801011a <_ZNK13tN2kScheduler6IsTimeEv+0x34>
 8010118:	2300      	movs	r3, #0
    #endif
  }
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <_ZN13tN2kScheduler7FromNowEm>:
  void FromNow(uint32_t _Add) {
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	6039      	str	r1, [r7, #0]
    #if defined(N2kUse64bitSchedulerTime)
    NextTime=N2kMillis64()+_Add;
    #else
    NextTime=Now()+_Add;
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff fec1 	bl	800feb4 <_ZN13tN2kScheduler3NowEv>
 8010132:	4602      	mov	r2, r0
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	441a      	add	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	601a      	str	r2, [r3, #0]
    if ( NextTime==N2kSchedulerDisabled ) NextTime=0; // Roll over
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010144:	d102      	bne.n	801014c <_ZN13tN2kScheduler7FromNowEm+0x2a>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	601a      	str	r2, [r3, #0]
    #endif
  }
 801014c:	bf00      	nop
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>:
    void SetUniqueNumber(uint32_t _UniqueNumber) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0xffe00000) | (_UniqueNumber&0x1fffff); }
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	0d5b      	lsrs	r3, r3, #21
 8010164:	055b      	lsls	r3, r3, #21
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	f3c2 0214 	ubfx	r2, r2, #0, #21
 801016c:	431a      	orrs	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	601a      	str	r2, [r3, #0]
 8010172:	bf00      	nop
 8010174:	370c      	adds	r7, #12
 8010176:	46bd      	mov	sp, r7
 8010178:	bc80      	pop	{r7}
 801017a:	4770      	bx	lr

0801017c <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>:
    void SetManufacturerCode(uint16_t _ManufacturerCode) { DeviceInformation.UnicNumberAndManCode=(DeviceInformation.UnicNumberAndManCode&0x1fffff) | (((unsigned long)(_ManufacturerCode&0x7ff))<<21); }
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	807b      	strh	r3, [r7, #2]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f3c3 0214 	ubfx	r2, r3, #0, #21
 8010190:	887b      	ldrh	r3, [r7, #2]
 8010192:	055b      	lsls	r3, r3, #21
 8010194:	431a      	orrs	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	601a      	str	r2, [r3, #0]
 801019a:	bf00      	nop
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	bc80      	pop	{r7}
 80101a2:	4770      	bx	lr

080101a4 <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>:
    void SetDeviceInstance(unsigned char _DeviceInstance) { DeviceInformation.DeviceInstance=_DeviceInstance; }
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	70fb      	strb	r3, [r7, #3]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	78fa      	ldrb	r2, [r7, #3]
 80101b4:	711a      	strb	r2, [r3, #4]
 80101b6:	bf00      	nop
 80101b8:	370c      	adds	r7, #12
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bc80      	pop	{r7}
 80101be:	4770      	bx	lr

080101c0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>:
    unsigned char GetDeviceInstance() const { return DeviceInformation.DeviceInstance; }
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	791b      	ldrb	r3, [r3, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bc80      	pop	{r7}
 80101d4:	4770      	bx	lr

080101d6 <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>:
    void SetDeviceFunction(unsigned char _DeviceFunction) { DeviceInformation.DeviceFunction=_DeviceFunction; }
 80101d6:	b480      	push	{r7}
 80101d8:	b083      	sub	sp, #12
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	460b      	mov	r3, r1
 80101e0:	70fb      	strb	r3, [r7, #3]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	78fa      	ldrb	r2, [r7, #3]
 80101e6:	715a      	strb	r2, [r3, #5]
 80101e8:	bf00      	nop
 80101ea:	370c      	adds	r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bc80      	pop	{r7}
 80101f0:	4770      	bx	lr

080101f2 <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>:
    void SetDeviceClass(unsigned char _DeviceClass) { DeviceInformation.DeviceClass=((_DeviceClass&0x7f)<<1); }
 80101f2:	b480      	push	{r7}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	460b      	mov	r3, r1
 80101fc:	70fb      	strb	r3, [r7, #3]
 80101fe:	78fb      	ldrb	r3, [r7, #3]
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	b2da      	uxtb	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	719a      	strb	r2, [r3, #6]
 8010208:	bf00      	nop
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	bc80      	pop	{r7}
 8010210:	4770      	bx	lr

08010212 <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>:
    void SetIndustryGroup(unsigned char _IndustryGroup) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0x0f) | (_IndustryGroup<<4) | 0x80; }
 8010212:	b480      	push	{r7}
 8010214:	b083      	sub	sp, #12
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	460b      	mov	r3, r1
 801021c:	70fb      	strb	r3, [r7, #3]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	79db      	ldrb	r3, [r3, #7]
 8010222:	b25b      	sxtb	r3, r3
 8010224:	f003 030f 	and.w	r3, r3, #15
 8010228:	b25a      	sxtb	r2, r3
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	011b      	lsls	r3, r3, #4
 801022e:	b25b      	sxtb	r3, r3
 8010230:	4313      	orrs	r3, r2
 8010232:	b25b      	sxtb	r3, r3
 8010234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010238:	b25b      	sxtb	r3, r3
 801023a:	b2da      	uxtb	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	71da      	strb	r2, [r3, #7]
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	bc80      	pop	{r7}
 8010248:	4770      	bx	lr

0801024a <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>:
    void SetSystemInstance(unsigned char _SystemInstance) { DeviceInformation.IndustryGroupAndSystemInstance=(DeviceInformation.IndustryGroupAndSystemInstance&0xf0) | (_SystemInstance&0x0f); }
 801024a:	b480      	push	{r7}
 801024c:	b083      	sub	sp, #12
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	460b      	mov	r3, r1
 8010254:	70fb      	strb	r3, [r7, #3]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	79db      	ldrb	r3, [r3, #7]
 801025a:	f023 030f 	bic.w	r3, r3, #15
 801025e:	b2da      	uxtb	r2, r3
 8010260:	78fb      	ldrb	r3, [r7, #3]
 8010262:	f003 030f 	and.w	r3, r3, #15
 8010266:	b2db      	uxtb	r3, r3
 8010268:	4313      	orrs	r3, r2
 801026a:	b2da      	uxtb	r2, r3
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	71da      	strb	r2, [r3, #7]
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	bc80      	pop	{r7}
 8010278:	4770      	bx	lr

0801027a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>:
      inline unsigned long GetPGN() const { return PGN; }
 801027a:	b480      	push	{r7}
 801027c:	b083      	sub	sp, #12
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	bc80      	pop	{r7}
 801028e:	4770      	bx	lr

08010290 <_ZN9tNMEA200015tInternalDeviceC1Ev>:
    tInternalDevice() {
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af02      	add	r7, sp, #8
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4618      	mov	r0, r3
 801029c:	f7fc f8a1 	bl	800c3e2 <_ZN9tNMEA200018tDeviceInformationC1Ev>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	3314      	adds	r3, #20
 80102a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff fedf 	bl	801006c <_ZN13tN2kSchedulerC1Em>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	3318      	adds	r3, #24
 80102b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff fed8 	bl	801006c <_ZN13tN2kSchedulerC1Em>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	331c      	adds	r3, #28
 80102c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff fed1 	bl	801006c <_ZN13tN2kSchedulerC1Em>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	3320      	adds	r3, #32
 80102ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff feca 	bl	801006c <_ZN13tN2kSchedulerC1Em>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80102de:	2300      	movs	r3, #0
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	2300      	movs	r3, #0
 80102e4:	2206      	movs	r2, #6
 80102e6:	210f      	movs	r1, #15
 80102e8:	f7fe fcc6 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80102f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff feb8 	bl	801006c <_ZN13tN2kSchedulerC1Em>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8010302:	2300      	movs	r3, #0
 8010304:	2200      	movs	r2, #0
 8010306:	2100      	movs	r1, #0
 8010308:	f7f1 fbd6 	bl	8001ab8 <_ZN17tN2kSyncSchedulerC1Ebmm>
      N2kSource=0;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      HasPendingInformation=false;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      ProductInformation=0; LocalProductInformation=0; ManufacturerSerialCode=0;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	609a      	str	r2, [r3, #8]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2200      	movs	r2, #0
 8010326:	60da      	str	r2, [r3, #12]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2200      	movs	r2, #0
 801032c:	611a      	str	r2, [r3, #16]
      AddressClaimEndSource=N2kMaxCanBusAddress; //GetNextAddressFromBeginning=true;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	22fb      	movs	r2, #251	; 0xfb
 8010332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      TransmitMessages=0; ReceiveMessages=0;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	625a      	str	r2, [r3, #36]	; 0x24
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	629a      	str	r2, [r3, #40]	; 0x28
      PGNSequenceCounters=0; MaxPGNSequenceCounters=0;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	62da      	str	r2, [r3, #44]	; 0x2c
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	631a      	str	r2, [r3, #48]	; 0x30
      NextDTSequence=0;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      HeartbeatSequence=0;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    }
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4618      	mov	r0, r3
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>:
    void SetPendingIsoAddressClaim(unsigned long FromNow=2) { PendingIsoAddressClaim.FromNow(FromNow); HasPendingInformation=true; }
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3314      	adds	r3, #20
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff fed2 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010386:	bf00      	nop
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>:
    bool QueryPendingIsoAddressClaim() { return PendingIsoAddressClaim.IsTime(); }
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	3314      	adds	r3, #20
 801039a:	4618      	mov	r0, r3
 801039c:	f7ff fea3 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 80103a0:	4603      	mov	r3, r0
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>:
    void ClearPendingIsoAddressClaim() { PendingIsoAddressClaim.Disable(); UpdateHasPendingInformation(); }
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b082      	sub	sp, #8
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	3314      	adds	r3, #20
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff fe66 	bl	8010088 <_ZN13tN2kScheduler7DisableEv>
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f895 	bl	80104ec <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 80103c2:	bf00      	nop
 80103c4:	3708      	adds	r7, #8
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}

080103ca <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>:
    void SetPendingProductInformation() { PendingProductInformation.FromNow(187+N2kSource*8); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b082      	sub	sp, #8
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f103 0218 	add.w	r2, r3, #24
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	33bb      	adds	r3, #187	; 0xbb
 80103e2:	4619      	mov	r1, r3
 80103e4:	4610      	mov	r0, r2
 80103e6:	f7ff fe9c 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>:
    void ClearPendingProductInformation() { PendingProductInformation.Disable(); UpdateHasPendingInformation(); }
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	3318      	adds	r3, #24
 8010406:	4618      	mov	r0, r3
 8010408:	f7ff fe3e 	bl	8010088 <_ZN13tN2kScheduler7DisableEv>
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f86d 	bl	80104ec <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 8010412:	bf00      	nop
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>:
    bool QueryPendingProductInformation() { return PendingProductInformation.IsTime(); }
 801041a:	b580      	push	{r7, lr}
 801041c:	b082      	sub	sp, #8
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3318      	adds	r3, #24
 8010426:	4618      	mov	r0, r3
 8010428:	f7ff fe5d 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 801042c:	4603      	mov	r3, r0
 801042e:	4618      	mov	r0, r3
 8010430:	3708      	adds	r7, #8
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>:
    void SetPendingConfigurationInformation() { PendingConfigurationInformation.FromNow(187+N2kSource*10); HasPendingInformation=true; } // Use strange increment to avoid synchronize
 8010436:	b580      	push	{r7, lr}
 8010438:	b082      	sub	sp, #8
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f103 021c 	add.w	r2, r3, #28
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801044a:	4619      	mov	r1, r3
 801044c:	460b      	mov	r3, r1
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	440b      	add	r3, r1
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	33bb      	adds	r3, #187	; 0xbb
 8010456:	4619      	mov	r1, r3
 8010458:	4610      	mov	r0, r2
 801045a:	f7ff fe62 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2201      	movs	r2, #1
 8010462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>:
    void ClearPendingConfigurationInformation() { PendingConfigurationInformation.Disable(); UpdateHasPendingInformation(); }
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	331c      	adds	r3, #28
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff fe04 	bl	8010088 <_ZN13tN2kScheduler7DisableEv>
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 f833 	bl	80104ec <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
 8010486:	bf00      	nop
 8010488:	3708      	adds	r7, #8
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>:
    bool QueryPendingConfigurationInformation() { return PendingConfigurationInformation.IsTime(); }
 801048e:	b580      	push	{r7, lr}
 8010490:	b082      	sub	sp, #8
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	331c      	adds	r3, #28
 801049a:	4618      	mov	r0, r3
 801049c:	f7ff fe23 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 80104a0:	4603      	mov	r3, r0
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>:
    void UpdateAddressClaimEndSource() {
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
      AddressClaimEndSource=N2kSource;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d008      	beq.n	80104da <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x30>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104ce:	3b01      	subs	r3, #1
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80104d8:	e003      	b.n	80104e2 <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv+0x38>
      if ( AddressClaimEndSource>0 ) { AddressClaimEndSource--; } else { AddressClaimEndSource=N2kMaxCanBusAddress; }
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	22fb      	movs	r2, #251	; 0xfb
 80104de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80104e2:	bf00      	nop
 80104e4:	370c      	adds	r7, #12
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bc80      	pop	{r7}
 80104ea:	4770      	bx	lr

080104ec <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>:
    void UpdateHasPendingInformation() {
 80104ec:	b590      	push	{r4, r7, lr}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	3314      	adds	r3, #20
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fde3 	bl	80100c4 <_ZNK13tN2kScheduler9IsEnabledEv>
 80104fe:	4603      	mov	r3, r0
 8010500:	461c      	mov	r4, r3
                            | PendingProductInformation.IsEnabled()
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	3318      	adds	r3, #24
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff fddc 	bl	80100c4 <_ZNK13tN2kScheduler9IsEnabledEv>
 801050c:	4603      	mov	r3, r0
 801050e:	4323      	orrs	r3, r4
 8010510:	b2dc      	uxtb	r4, r3
                            | PendingConfigurationInformation.IsEnabled()
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	331c      	adds	r3, #28
 8010516:	4618      	mov	r0, r3
 8010518:	f7ff fdd4 	bl	80100c4 <_ZNK13tN2kScheduler9IsEnabledEv>
 801051c:	4603      	mov	r3, r0
 801051e:	4323      	orrs	r3, r4
 8010520:	b2dc      	uxtb	r4, r3
                            | NextDTSendTime.IsEnabled()
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010528:	4618      	mov	r0, r3
 801052a:	f7ff fdcb 	bl	80100c4 <_ZNK13tN2kScheduler9IsEnabledEv>
 801052e:	4603      	mov	r3, r0
 8010530:	4323      	orrs	r3, r4
 8010532:	b2db      	uxtb	r3, r3
 8010534:	2b00      	cmp	r3, #0
 8010536:	bf14      	ite	ne
 8010538:	2301      	movne	r3, #1
 801053a:	2300      	moveq	r3, #0
 801053c:	b2da      	uxtb	r2, r3
      HasPendingInformation=  PendingIsoAddressClaim.IsEnabled()
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
 8010544:	bf00      	nop
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	bd90      	pop	{r4, r7, pc}

0801054c <_ZNK9tNMEA200014ForwardEnabledEv>:
    bool ForwardEnabled() const { return ((ForwardMode&FwdModeBit_EnableForward)>0 && (N2kMode!=N2km_SendOnly)); }
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	f003 0301 	and.w	r3, r3, #1
 801055c:	2b00      	cmp	r3, #0
 801055e:	d005      	beq.n	801056c <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	795b      	ldrb	r3, [r3, #5]
 8010564:	2b03      	cmp	r3, #3
 8010566:	d001      	beq.n	801056c <_ZNK9tNMEA200014ForwardEnabledEv+0x20>
 8010568:	2301      	movs	r3, #1
 801056a:	e000      	b.n	801056e <_ZNK9tNMEA200014ForwardEnabledEv+0x22>
 801056c:	2300      	movs	r3, #0
 801056e:	4618      	mov	r0, r3
 8010570:	370c      	adds	r7, #12
 8010572:	46bd      	mov	sp, r7
 8010574:	bc80      	pop	{r7}
 8010576:	4770      	bx	lr

08010578 <_ZNK9tNMEA200021ForwardSystemMessagesEv>:
    bool ForwardSystemMessages() const { return ((ForwardMode&FwdModeBit_SystemMessages)>0); }
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	f003 0302 	and.w	r3, r3, #2
 8010588:	2b00      	cmp	r3, #0
 801058a:	bf14      	ite	ne
 801058c:	2301      	movne	r3, #1
 801058e:	2300      	moveq	r3, #0
 8010590:	b2db      	uxtb	r3, r3
 8010592:	4618      	mov	r0, r3
 8010594:	370c      	adds	r7, #12
 8010596:	46bd      	mov	sp, r7
 8010598:	bc80      	pop	{r7}
 801059a:	4770      	bx	lr

0801059c <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>:
    bool ForwardOnlyKnownMessages() const { return ((ForwardMode&FwdModeBit_OnlyKnownMessages)>0); }
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	f003 0304 	and.w	r3, r3, #4
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	bf14      	ite	ne
 80105b0:	2301      	movne	r3, #1
 80105b2:	2300      	moveq	r3, #0
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	4618      	mov	r0, r3
 80105b8:	370c      	adds	r7, #12
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bc80      	pop	{r7}
 80105be:	4770      	bx	lr

080105c0 <_ZNK9tNMEA200018ForwardOwnMessagesEv>:
    bool ForwardOwnMessages() const { return ((ForwardMode&FwdModeBit_OwnMessages)>0); }
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	f003 0308 	and.w	r3, r3, #8
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	bf14      	ite	ne
 80105d4:	2301      	movne	r3, #1
 80105d6:	2300      	moveq	r3, #0
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	4618      	mov	r0, r3
 80105dc:	370c      	adds	r7, #12
 80105de:	46bd      	mov	sp, r7
 80105e0:	bc80      	pop	{r7}
 80105e2:	4770      	bx	lr

080105e4 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>:
    bool HandleOnlyKnownMessages() const { return ((ForwardMode&HandleModeBit_OnlyKnownMessages)>0); }
 80105e4:	b480      	push	{r7}
 80105e6:	b083      	sub	sp, #12
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	f003 0310 	and.w	r3, r3, #16
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	bf14      	ite	ne
 80105f8:	2301      	movne	r3, #1
 80105fa:	2300      	moveq	r3, #0
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	4618      	mov	r0, r3
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	bc80      	pop	{r7}
 8010606:	4770      	bx	lr

08010608 <_ZN9tNMEA200012IsActiveNodeEv>:
    bool IsActiveNode() { return (N2kMode==N2km_NodeOnly || N2kMode==N2km_ListenAndNode); }
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	795b      	ldrb	r3, [r3, #5]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d003      	beq.n	8010620 <_ZN9tNMEA200012IsActiveNodeEv+0x18>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	795b      	ldrb	r3, [r3, #5]
 801061c:	2b02      	cmp	r3, #2
 801061e:	d101      	bne.n	8010624 <_ZN9tNMEA200012IsActiveNodeEv+0x1c>
 8010620:	2301      	movs	r3, #1
 8010622:	e000      	b.n	8010626 <_ZN9tNMEA200012IsActiveNodeEv+0x1e>
 8010624:	2300      	movs	r3, #0
 8010626:	4618      	mov	r0, r3
 8010628:	370c      	adds	r7, #12
 801062a:	46bd      	mov	sp, r7
 801062c:	bc80      	pop	{r7}
 801062e:	4770      	bx	lr

08010630 <_ZNK9tNMEA200013IsValidDeviceEi>:
    bool IsValidDevice(int iDev) const { return (iDev>=0 && iDev<DeviceCount ); }
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	db06      	blt.n	801064e <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a1b      	ldr	r3, [r3, #32]
 8010644:	683a      	ldr	r2, [r7, #0]
 8010646:	429a      	cmp	r2, r3
 8010648:	da01      	bge.n	801064e <_ZNK9tNMEA200013IsValidDeviceEi+0x1e>
 801064a:	2301      	movs	r3, #1
 801064c:	e000      	b.n	8010650 <_ZNK9tNMEA200013IsValidDeviceEi+0x20>
 801064e:	2300      	movs	r3, #0
 8010650:	4618      	mov	r0, r3
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	bc80      	pop	{r7}
 8010658:	4770      	bx	lr

0801065a <_ZNK9tNMEA200013IsReadyToSendEv>:
    bool IsReadyToSend() const {
 801065a:	b480      	push	{r7}
 801065c:	b083      	sub	sp, #12
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7e1b      	ldrb	r3, [r3, #24]
               (N2kMode!=N2km_SendOnly) &&
 8010666:	2b03      	cmp	r3, #3
 8010668:	d003      	beq.n	8010672 <_ZNK9tNMEA200013IsReadyToSendEv+0x18>
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	791b      	ldrb	r3, [r3, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00d      	beq.n	801068e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenOnly) &&
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	795b      	ldrb	r3, [r3, #5]
      return ( (OpenState==os_Open || dbMode!=dm_None) &&
 8010676:	2b00      	cmp	r3, #0
 8010678:	d009      	beq.n	801068e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_SendOnly) &&
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_ListenOnly) &&
 801067e:	2b03      	cmp	r3, #3
 8010680:	d005      	beq.n	801068e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
               (N2kMode!=N2km_ListenAndSend)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	795b      	ldrb	r3, [r3, #5]
               (N2kMode!=N2km_SendOnly) &&
 8010686:	2b04      	cmp	r3, #4
 8010688:	d001      	beq.n	801068e <_ZNK9tNMEA200013IsReadyToSendEv+0x34>
 801068a:	2301      	movs	r3, #1
 801068c:	e000      	b.n	8010690 <_ZNK9tNMEA200013IsReadyToSendEv+0x36>
 801068e:	2300      	movs	r3, #0
    }
 8010690:	4618      	mov	r0, r3
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	bc80      	pop	{r7}
 8010698:	4770      	bx	lr

0801069a <_ZN9tNMEA200013EnableForwardEb>:
    void EnableForward(bool v=true) {
 801069a:	b480      	push	{r7}
 801069c:	b083      	sub	sp, #12
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
 80106a2:	460b      	mov	r3, r1
 80106a4:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 80106a6:	78fb      	ldrb	r3, [r7, #3]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d006      	beq.n	80106ba <_ZN9tNMEA200013EnableForwardEb+0x20>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	f043 0201 	orr.w	r2, r3, #1
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	609a      	str	r2, [r3, #8]
    }
 80106b8:	e005      	b.n	80106c6 <_ZN9tNMEA200013EnableForwardEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_EnableForward;  } else { ForwardMode &= ~FwdModeBit_EnableForward; }
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	f023 0201 	bic.w	r2, r3, #1
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	609a      	str	r2, [r3, #8]
    }
 80106c6:	bf00      	nop
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bc80      	pop	{r7}
 80106ce:	4770      	bx	lr

080106d0 <_ZN9tNMEA200024SetForwardSystemMessagesEb>:
    void SetForwardSystemMessages(bool v=true) {
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 80106dc:	78fb      	ldrb	r3, [r7, #3]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d006      	beq.n	80106f0 <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x20>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	f043 0202 	orr.w	r2, r3, #2
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	609a      	str	r2, [r3, #8]
      }
 80106ee:	e005      	b.n	80106fc <_ZN9tNMEA200024SetForwardSystemMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_SystemMessages;  } else { ForwardMode &= ~FwdModeBit_SystemMessages; }
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f023 0202 	bic.w	r2, r3, #2
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	609a      	str	r2, [r3, #8]
      }
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	bc80      	pop	{r7}
 8010704:	4770      	bx	lr

08010706 <_ZN9tNMEA200021SetForwardOwnMessagesEb>:
    void SetForwardOwnMessages(bool v=true) {
 8010706:	b480      	push	{r7}
 8010708:	b083      	sub	sp, #12
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	460b      	mov	r3, r1
 8010710:	70fb      	strb	r3, [r7, #3]
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 8010712:	78fb      	ldrb	r3, [r7, #3]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d006      	beq.n	8010726 <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x20>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	f043 0208 	orr.w	r2, r3, #8
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	609a      	str	r2, [r3, #8]
      }
 8010724:	e005      	b.n	8010732 <_ZN9tNMEA200021SetForwardOwnMessagesEb+0x2c>
        if (v) { ForwardMode |= FwdModeBit_OwnMessages;  } else { ForwardMode &= ~FwdModeBit_OwnMessages; }
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	f023 0208 	bic.w	r2, r3, #8
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	609a      	str	r2, [r3, #8]
      }
 8010732:	bf00      	nop
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	bc80      	pop	{r7}
 801073a:	4770      	bx	lr

0801073c <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>:
};

//*****************************************************************************
// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN);
inline void SetN2kPGNISOAcknowledgement(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	607b      	str	r3, [r7, #4]
 8010746:	460b      	mov	r3, r1
 8010748:	72fb      	strb	r3, [r7, #11]
 801074a:	4613      	mov	r3, r2
 801074c:	72bb      	strb	r3, [r7, #10]
  SetN2kPGN59392(N2kMsg,Control,GroupFunction,PGN);
 801074e:	7aba      	ldrb	r2, [r7, #10]
 8010750:	7af9      	ldrb	r1, [r7, #11]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f005 fe40 	bl	80163da <_Z14SetN2kPGN59392R7tN2kMsghhm>
}
 801075a:	bf00      	nop
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <_Z21SetN2kISOAddressClaimR7tN2kMsgy>:
                   ) {
  SetN2kPGN60928(N2kMsg, UniqueNumber, ManufacturerCode, DeviceFunction, DeviceClass,
                 DeviceInstance, SystemInstance, IndustryGroup);
}

inline void SetN2kISOAddressClaim(tN2kMsg &N2kMsg, uint64_t Name) {
 8010762:	b580      	push	{r7, lr}
 8010764:	b084      	sub	sp, #16
 8010766:	af00      	add	r7, sp, #0
 8010768:	60f8      	str	r0, [r7, #12]
 801076a:	e9c7 2300 	strd	r2, r3, [r7]
  SetN2kPGN60928(N2kMsg, Name);
 801076e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010772:	68f8      	ldr	r0, [r7, #12]
 8010774:	f005 fe61 	bl	801643a <_Z14SetN2kPGN60928R7tN2kMsgy>
}
 8010778:	bf00      	nop
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>:
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1);

inline void SetN2kProductInformation(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel=1, unsigned char LoadEquivalency=1) {
 8010780:	b580      	push	{r7, lr}
 8010782:	b08a      	sub	sp, #40	; 0x28
 8010784:	af06      	add	r7, sp, #24
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	607a      	str	r2, [r7, #4]
 801078c:	603b      	str	r3, [r7, #0]
  SetN2kPGN126996(N2kMsg,N2kVersion,ProductCode,
 801078e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010792:	9304      	str	r3, [sp, #16]
 8010794:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010798:	9303      	str	r3, [sp, #12]
 801079a:	6a3b      	ldr	r3, [r7, #32]
 801079c:	9302      	str	r3, [sp, #8]
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	9301      	str	r3, [sp, #4]
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	68b9      	ldr	r1, [r7, #8]
 80107ac:	68f8      	ldr	r0, [r7, #12]
 80107ae:	f005 fe5b 	bl	8016468 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>
                  ModelID,SwCode,ModelVersion,ModelSerialCode,
                  CertificationLevel,LoadEquivalency);
}
 80107b2:	bf00      	nop
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>:

inline void SetN2kConfigurationInformation(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1=0,
                     const char *InstallationDescription2=0,
                     bool UsePgm=false) {
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b086      	sub	sp, #24
 80107be:	af02      	add	r7, sp, #8
 80107c0:	60f8      	str	r0, [r7, #12]
 80107c2:	60b9      	str	r1, [r7, #8]
 80107c4:	607a      	str	r2, [r7, #4]
 80107c6:	603b      	str	r3, [r7, #0]
  SetN2kPGN126998(N2kMsg,
 80107c8:	7e3b      	ldrb	r3, [r7, #24]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	68b9      	ldr	r1, [r7, #8]
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f005 feba 	bl	801654c <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>
                  ManufacturerInformation,
                  InstallationDescription1,
                  InstallationDescription2,
                  UsePgm);
}
 80107d8:	bf00      	nop
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>:
  SetN2kPGN59904(N2kMsg,Destination,RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN);

inline bool ParseN2kPGNISORequest(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  return ParseN2kPGN59904(N2kMsg, RequestedPGN);
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f005 ff55 	bl	801669c <_Z16ParseN2kPGN59904RK7tN2kMsgRm>
 80107f2:	4603      	mov	r3, r0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <_Z12SetHeartbeatR7tN2kMsgmh>:
//  - sequence counter - set to 0xff for testing purposes
//			/ Output:
//  - N2kMsg NMEA2000 message ready to be send.
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter);

inline void SetHeartbeat(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	4613      	mov	r3, r2
 8010808:	71fb      	strb	r3, [r7, #7]
	SetN2kPGN126993(N2kMsg, timeInterval_ms, sequenceCounter);
 801080a:	79fb      	ldrb	r3, [r7, #7]
 801080c:	461a      	mov	r2, r3
 801080e:	68b9      	ldr	r1, [r7, #8]
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f005 ff71 	bl	80166f8 <_Z15SetN2kPGN126993R7tN2kMsgmh>
}
 8010816:	bf00      	nop
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
	...

08010820 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN60928(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,60928L) {}
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f44f 426e 	mov.w	r2, #60928	; 0xee00
 8010830:	6839      	ldr	r1, [r7, #0]
 8010832:	4618      	mov	r0, r3
 8010834:	f7fb fe1e 	bl	800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 8010838:	4a03      	ldr	r2, [pc, #12]	; (8010848 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000+0x28>)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	601a      	str	r2, [r3, #0]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	08019bb4 	.word	0x08019bb4

0801084c <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126464(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126464L) {}
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6039      	str	r1, [r7, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f44f 32f7 	mov.w	r2, #126464	; 0x1ee00
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	4618      	mov	r0, r3
 8010860:	f7fb fe08 	bl	800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 8010864:	4a03      	ldr	r2, [pc, #12]	; (8010874 <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000+0x28>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	08019b88 	.word	0x08019b88

08010878 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126993(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126993L) {}
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a06      	ldr	r2, [pc, #24]	; (80108a0 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x28>)
 8010886:	6839      	ldr	r1, [r7, #0]
 8010888:	4618      	mov	r0, r3
 801088a:	f7fb fdf3 	bl	800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 801088e:	4a05      	ldr	r2, [pc, #20]	; (80108a4 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000+0x2c>)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	601a      	str	r2, [r3, #0]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4618      	mov	r0, r3
 8010898:	3708      	adds	r7, #8
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	0001f011 	.word	0x0001f011
 80108a4:	08019b5c 	.word	0x08019b5c

080108a8 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>:
                               uint32_t TransmissionInterval, 
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126996(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126996L) {}
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4a06      	ldr	r2, [pc, #24]	; (80108d0 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x28>)
 80108b6:	6839      	ldr	r1, [r7, #0]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fb fddb 	bl	800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 80108be:	4a05      	ldr	r2, [pc, #20]	; (80108d4 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000+0x2c>)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4618      	mov	r0, r3
 80108c8:	3708      	adds	r7, #8
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	0001f014 	.word	0x0001f014
 80108d4:	08019b30 	.word	0x08019b30

080108d8 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>:
                               uint16_t TransmissionIntervalOffset, 
                               uint8_t  NumberOfParameterPairs,
                               int iDev);
    virtual bool HandleCommand(const tN2kMsg &N2kMsg, uint8_t PrioritySetting, uint8_t NumberOfParameterPairs, int iDev);
  public:
    tN2kGroupFunctionHandlerForPGN126998(tNMEA2000 *_pNMEA2000) : tN2kGroupFunctionHandler(_pNMEA2000,126998L) {}
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a06      	ldr	r2, [pc, #24]	; (8010900 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x28>)
 80108e6:	6839      	ldr	r1, [r7, #0]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fb fdc3 	bl	800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 80108ee:	4a05      	ldr	r2, [pc, #20]	; (8010904 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000+0x2c>)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4618      	mov	r0, r3
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	0001f016 	.word	0x0001f016
 8010904:	08019b04 	.word	0x08019b04

08010908 <_Z26IsSingleFrameSystemMessagem>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
                                       126208L, /* NMEA Request/Command/Acknowledge group function */
#endif
                                       0};

bool IsSingleFrameSystemMessage(unsigned long PGN) {
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8010916:	d01b      	beq.n	8010950 <_Z26IsSingleFrameSystemMessagem+0x48>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 801091e:	d819      	bhi.n	8010954 <_Z26IsSingleFrameSystemMessagem+0x4c>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 8010926:	d013      	beq.n	8010950 <_Z26IsSingleFrameSystemMessagem+0x48>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 801092e:	d811      	bhi.n	8010954 <_Z26IsSingleFrameSystemMessagem+0x4c>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 8010936:	d00b      	beq.n	8010950 <_Z26IsSingleFrameSystemMessagem+0x48>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 801093e:	d809      	bhi.n	8010954 <_Z26IsSingleFrameSystemMessagem+0x4c>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 8010946:	d003      	beq.n	8010950 <_Z26IsSingleFrameSystemMessagem+0x48>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 801094e:	d101      	bne.n	8010954 <_Z26IsSingleFrameSystemMessagem+0x4c>
                                      case  59392L: /* ISO Acknowledgement */
                                      case   TP_DT: /* Multi packet data transfer, TP.DT */
                                      case   TP_CM: /* Multi packet connection management, TP.CM */
                                      case  59904L: /* ISO Request */
                                      case  60928L: /* ISO Address Claim */
                                      return true;
 8010950:	2301      	movs	r3, #1
 8010952:	e000      	b.n	8010956 <_Z26IsSingleFrameSystemMessagem+0x4e>
                                  }
                                  return false;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	370c      	adds	r7, #12
 801095a:	46bd      	mov	sp, r7
 801095c:	bc80      	pop	{r7}
 801095e:	4770      	bx	lr

08010960 <_Z25IsFastPacketSystemMessagem>:

bool IsFastPacketSystemMessage(unsigned long PGN) {
 8010960:	b480      	push	{r7}
 8010962:	b083      	sub	sp, #12
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 801096e:	4293      	cmp	r3, r2
 8010970:	d003      	beq.n	801097a <_Z25IsFastPacketSystemMessagem+0x1a>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	4a05      	ldr	r2, [pc, #20]	; (801098c <_Z25IsFastPacketSystemMessagem+0x2c>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d101      	bne.n	801097e <_Z25IsFastPacketSystemMessagem+0x1e>
                                      case  65240L: /* Commanded Address*/
                                      case 126208L: /* NMEA Request/Command/Acknowledge group function */
                                      return true;
 801097a:	2301      	movs	r3, #1
 801097c:	e000      	b.n	8010980 <_Z25IsFastPacketSystemMessagem+0x20>
                                  }
                                  return false;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	bc80      	pop	{r7}
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	0001ed00 	.word	0x0001ed00

08010990 <_Z27IsDefaultSingleFrameMessagem>:

bool IsDefaultSingleFrameMessage(unsigned long PGN) {
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a57      	ldr	r2, [pc, #348]	; (8010af8 <_Z27IsDefaultSingleFrameMessagem+0x168>)
 801099c:	4293      	cmp	r3, r2
 801099e:	f000 80a2 	beq.w	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4a54      	ldr	r2, [pc, #336]	; (8010af8 <_Z27IsDefaultSingleFrameMessagem+0x168>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	f200 809f 	bhi.w	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4a53      	ldr	r2, [pc, #332]	; (8010afc <_Z27IsDefaultSingleFrameMessagem+0x16c>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	f200 809a 	bhi.w	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a51      	ldr	r2, [pc, #324]	; (8010b00 <_Z27IsDefaultSingleFrameMessagem+0x170>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d234      	bcs.n	8010a28 <_Z27IsDefaultSingleFrameMessagem+0x98>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a50      	ldr	r2, [pc, #320]	; (8010b04 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	f000 808f 	beq.w	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4a4e      	ldr	r2, [pc, #312]	; (8010b04 <_Z27IsDefaultSingleFrameMessagem+0x174>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	f200 808c 	bhi.w	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4a4c      	ldr	r2, [pc, #304]	; (8010b08 <_Z27IsDefaultSingleFrameMessagem+0x178>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	f200 8087 	bhi.w	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f5b3 3ffc 	cmp.w	r3, #129024	; 0x1f800
 80109e2:	f200 8080 	bhi.w	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4a48      	ldr	r2, [pc, #288]	; (8010b0c <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d07b      	beq.n	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4a46      	ldr	r2, [pc, #280]	; (8010b0c <_Z27IsDefaultSingleFrameMessagem+0x17c>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d879      	bhi.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4a45      	ldr	r2, [pc, #276]	; (8010b10 <_Z27IsDefaultSingleFrameMessagem+0x180>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d073      	beq.n	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4a43      	ldr	r2, [pc, #268]	; (8010b10 <_Z27IsDefaultSingleFrameMessagem+0x180>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d871      	bhi.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4a42      	ldr	r2, [pc, #264]	; (8010b14 <_Z27IsDefaultSingleFrameMessagem+0x184>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d86d      	bhi.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 8010a14:	d21a      	bcs.n	8010a4c <_Z27IsDefaultSingleFrameMessagem+0xbc>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4a3f      	ldr	r2, [pc, #252]	; (8010b18 <_Z27IsDefaultSingleFrameMessagem+0x188>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d85a      	bhi.n	8010ad4 <_Z27IsDefaultSingleFrameMessagem+0x144>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4a3e      	ldr	r2, [pc, #248]	; (8010b1c <_Z27IsDefaultSingleFrameMessagem+0x18c>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d25f      	bcs.n	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 8010a26:	e060      	b.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 8010a2e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8010a32:	2201      	movs	r2, #1
 8010a34:	409a      	lsls	r2, r3
 8010a36:	f240 53f1 	movw	r3, #1521	; 0x5f1
 8010a3a:	4013      	ands	r3, r2
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	bf14      	ite	ne
 8010a40:	2301      	movne	r3, #1
 8010a42:	2300      	moveq	r3, #0
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d14d      	bne.n	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 8010a4a:	e04e      	b.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f5a3 33f9 	sub.w	r3, r3, #127488	; 0x1f200
 8010a52:	2b14      	cmp	r3, #20
 8010a54:	d849      	bhi.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010a56:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <_Z27IsDefaultSingleFrameMessagem+0xcc>)
 8010a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5c:	08010ae7 	.word	0x08010ae7
 8010a60:	08010aeb 	.word	0x08010aeb
 8010a64:	08010aeb 	.word	0x08010aeb
 8010a68:	08010aeb 	.word	0x08010aeb
 8010a6c:	08010aeb 	.word	0x08010aeb
 8010a70:	08010ae7 	.word	0x08010ae7
 8010a74:	08010aeb 	.word	0x08010aeb
 8010a78:	08010aeb 	.word	0x08010aeb
 8010a7c:	08010aeb 	.word	0x08010aeb
 8010a80:	08010aeb 	.word	0x08010aeb
 8010a84:	08010aeb 	.word	0x08010aeb
 8010a88:	08010aeb 	.word	0x08010aeb
 8010a8c:	08010aeb 	.word	0x08010aeb
 8010a90:	08010ae7 	.word	0x08010ae7
 8010a94:	08010aeb 	.word	0x08010aeb
 8010a98:	08010aeb 	.word	0x08010aeb
 8010a9c:	08010aeb 	.word	0x08010aeb
 8010aa0:	08010ae7 	.word	0x08010ae7
 8010aa4:	08010aeb 	.word	0x08010aeb
 8010aa8:	08010aeb 	.word	0x08010aeb
 8010aac:	08010ae7 	.word	0x08010ae7
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 8010ab6:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8010aba:	2201      	movs	r2, #1
 8010abc:	409a      	lsls	r2, r3
 8010abe:	f241 0361 	movw	r3, #4193	; 0x1061
 8010ac2:	4013      	ands	r3, r2
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	bf14      	ite	ne
 8010ac8:	2301      	movne	r3, #1
 8010aca:	2300      	moveq	r3, #0
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d109      	bne.n	8010ae6 <_Z27IsDefaultSingleFrameMessagem+0x156>
 8010ad2:	e00a      	b.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4a12      	ldr	r2, [pc, #72]	; (8010b20 <_Z27IsDefaultSingleFrameMessagem+0x190>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d806      	bhi.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	4a11      	ldr	r2, [pc, #68]	; (8010b24 <_Z27IsDefaultSingleFrameMessagem+0x194>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d2e5      	bcs.n	8010ab0 <_Z27IsDefaultSingleFrameMessagem+0x120>
 8010ae4:	e001      	b.n	8010aea <_Z27IsDefaultSingleFrameMessagem+0x15a>
                                      case 130312L: // Temperature, pri=5, period=2000
                                      case 130313L: // Humidity, pri=5, period=2000
                                      case 130314L: // Pressure, pri=5, period=2000
                                      case 130316L: // Temperature extended range, pri=5, period=NA
                                      case 130576L: // Small Craft Status (Trim Tab position), pri=2, period=200
                                      return true;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e000      	b.n	8010aec <_Z27IsDefaultSingleFrameMessagem+0x15c>
                                  }
                                  return false;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bc80      	pop	{r7}
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	0001fe10 	.word	0x0001fe10
 8010afc:	0001fd0c 	.word	0x0001fd0c
 8010b00:	0001fd02 	.word	0x0001fd02
 8010b04:	0001f903 	.word	0x0001f903
 8010b08:	0001f802 	.word	0x0001f802
 8010b0c:	0001f50b 	.word	0x0001f50b
 8010b10:	0001f503 	.word	0x0001f503
 8010b14:	0001f214 	.word	0x0001f214
 8010b18:	0001f011 	.word	0x0001f011
 8010b1c:	0001f010 	.word	0x0001f010
 8010b20:	0001f119 	.word	0x0001f119
 8010b24:	0001f10d 	.word	0x0001f10d

08010b28 <_Z28IsMandatoryFastPacketMessagem>:

bool IsMandatoryFastPacketMessage(unsigned long PGN) {
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	4a0b      	ldr	r2, [pc, #44]	; (8010b60 <_Z28IsMandatoryFastPacketMessagem+0x38>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d00b      	beq.n	8010b50 <_Z28IsMandatoryFastPacketMessagem+0x28>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4a09      	ldr	r2, [pc, #36]	; (8010b60 <_Z28IsMandatoryFastPacketMessagem+0x38>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d809      	bhi.n	8010b54 <_Z28IsMandatoryFastPacketMessagem+0x2c>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 8010b46:	d003      	beq.n	8010b50 <_Z28IsMandatoryFastPacketMessagem+0x28>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	4a06      	ldr	r2, [pc, #24]	; (8010b64 <_Z28IsMandatoryFastPacketMessagem+0x3c>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d101      	bne.n	8010b54 <_Z28IsMandatoryFastPacketMessagem+0x2c>
                                      case 126464L: // PGN List (Transmit and Receive), pri=6, period=NA
                                      case 126996L: // Product information, pri=6, period=NA
                                      case 126998L: // Configuration information, pri=6, period=NA
                                      return true;
 8010b50:	2301      	movs	r3, #1
 8010b52:	e000      	b.n	8010b56 <_Z28IsMandatoryFastPacketMessagem+0x2e>
                                  }
                                  return false;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	370c      	adds	r7, #12
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bc80      	pop	{r7}
 8010b5e:	4770      	bx	lr
 8010b60:	0001f016 	.word	0x0001f016
 8010b64:	0001f014 	.word	0x0001f014

08010b68 <_Z26IsDefaultFastPacketMessagem>:

bool IsDefaultFastPacketMessage(unsigned long PGN) {
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
                                  switch (PGN) {
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	4a91      	ldr	r2, [pc, #580]	; (8010db8 <_Z26IsDefaultFastPacketMessagem+0x250>)
 8010b74:	4293      	cmp	r3, r2
 8010b76:	f200 8119 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4a8f      	ldr	r2, [pc, #572]	; (8010dbc <_Z26IsDefaultFastPacketMessagem+0x254>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	f080 8112 	bcs.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	4a8e      	ldr	r2, [pc, #568]	; (8010dc0 <_Z26IsDefaultFastPacketMessagem+0x258>)
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	f000 810d 	beq.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4a8b      	ldr	r2, [pc, #556]	; (8010dc0 <_Z26IsDefaultFastPacketMessagem+0x258>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	f200 810a 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a8a      	ldr	r2, [pc, #552]	; (8010dc4 <_Z26IsDefaultFastPacketMessagem+0x25c>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	f200 8105 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4a88      	ldr	r2, [pc, #544]	; (8010dc8 <_Z26IsDefaultFastPacketMessagem+0x260>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	f080 80fe 	bcs.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4a87      	ldr	r2, [pc, #540]	; (8010dcc <_Z26IsDefaultFastPacketMessagem+0x264>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	f200 80fb 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	4a85      	ldr	r2, [pc, #532]	; (8010dd0 <_Z26IsDefaultFastPacketMessagem+0x268>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d261      	bcs.n	8010c82 <_Z26IsDefaultFastPacketMessagem+0x11a>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4a84      	ldr	r2, [pc, #528]	; (8010dd4 <_Z26IsDefaultFastPacketMessagem+0x26c>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	f200 80f2 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	4a83      	ldr	r2, [pc, #524]	; (8010dd8 <_Z26IsDefaultFastPacketMessagem+0x270>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	f080 80eb 	bcs.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4a81      	ldr	r2, [pc, #516]	; (8010ddc <_Z26IsDefaultFastPacketMessagem+0x274>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	f200 80e8 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	4a80      	ldr	r2, [pc, #512]	; (8010de0 <_Z26IsDefaultFastPacketMessagem+0x278>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d25f      	bcs.n	8010ca4 <_Z26IsDefaultFastPacketMessagem+0x13c>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	4a7f      	ldr	r2, [pc, #508]	; (8010de4 <_Z26IsDefaultFastPacketMessagem+0x27c>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	f200 80df 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	4a7d      	ldr	r2, [pc, #500]	; (8010de8 <_Z26IsDefaultFastPacketMessagem+0x280>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	f080 80d8 	bcs.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a7c      	ldr	r2, [pc, #496]	; (8010dec <_Z26IsDefaultFastPacketMessagem+0x284>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	f200 80d5 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4a7a      	ldr	r2, [pc, #488]	; (8010df0 <_Z26IsDefaultFastPacketMessagem+0x288>)
 8010c06:	4293      	cmp	r3, r2
 8010c08:	f080 80ce 	bcs.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4a79      	ldr	r2, [pc, #484]	; (8010df4 <_Z26IsDefaultFastPacketMessagem+0x28c>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	f200 80cb 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4a77      	ldr	r2, [pc, #476]	; (8010df8 <_Z26IsDefaultFastPacketMessagem+0x290>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d272      	bcs.n	8010d04 <_Z26IsDefaultFastPacketMessagem+0x19c>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4a76      	ldr	r2, [pc, #472]	; (8010dfc <_Z26IsDefaultFastPacketMessagem+0x294>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	f000 80c0 	beq.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	4a74      	ldr	r2, [pc, #464]	; (8010dfc <_Z26IsDefaultFastPacketMessagem+0x294>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	f200 80bd 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4a72      	ldr	r2, [pc, #456]	; (8010e00 <_Z26IsDefaultFastPacketMessagem+0x298>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	f000 80b6 	beq.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	4a70      	ldr	r2, [pc, #448]	; (8010e00 <_Z26IsDefaultFastPacketMessagem+0x298>)
 8010c40:	4293      	cmp	r3, r2
 8010c42:	f200 80b3 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4a6e      	ldr	r2, [pc, #440]	; (8010e04 <_Z26IsDefaultFastPacketMessagem+0x29c>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	f200 80ae 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f5b3 3ff9 	cmp.w	r3, #127488	; 0x1f200
 8010c56:	d865      	bhi.n	8010d24 <_Z26IsDefaultFastPacketMessagem+0x1bc>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a6b      	ldr	r2, [pc, #428]	; (8010e08 <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	f000 80a3 	beq.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4a68      	ldr	r2, [pc, #416]	; (8010e08 <_Z26IsDefaultFastPacketMessagem+0x2a0>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	f200 80a0 	bhi.w	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	4a67      	ldr	r2, [pc, #412]	; (8010e0c <_Z26IsDefaultFastPacketMessagem+0x2a4>)
 8010c70:	4293      	cmp	r3, r2
 8010c72:	f200 8095 	bhi.w	8010da0 <_Z26IsDefaultFastPacketMessagem+0x238>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4a65      	ldr	r2, [pc, #404]	; (8010e10 <_Z26IsDefaultFastPacketMessagem+0x2a8>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	f080 8094 	bcs.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010c80:	e094      	b.n	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 8010c88:	3b04      	subs	r3, #4
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	409a      	lsls	r2, r3
 8010c8e:	4b61      	ldr	r3, [pc, #388]	; (8010e14 <_Z26IsDefaultFastPacketMessagem+0x2ac>)
 8010c90:	4013      	ands	r3, r2
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf14      	ite	ne
 8010c96:	2301      	movne	r3, #1
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f040 8083 	bne.w	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010ca2:	e083      	b.n	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f5a3 33fd 	sub.w	r3, r3, #129536	; 0x1fa00
 8010caa:	3b02      	subs	r3, #2
 8010cac:	2b12      	cmp	r3, #18
 8010cae:	d87d      	bhi.n	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010cb0:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <_Z26IsDefaultFastPacketMessagem+0x150>)
 8010cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb6:	bf00      	nop
 8010cb8:	08010da9 	.word	0x08010da9
 8010cbc:	08010dad 	.word	0x08010dad
 8010cc0:	08010da9 	.word	0x08010da9
 8010cc4:	08010da9 	.word	0x08010da9
 8010cc8:	08010da9 	.word	0x08010da9
 8010ccc:	08010dad 	.word	0x08010dad
 8010cd0:	08010dad 	.word	0x08010dad
 8010cd4:	08010da9 	.word	0x08010da9
 8010cd8:	08010dad 	.word	0x08010dad
 8010cdc:	08010da9 	.word	0x08010da9
 8010ce0:	08010dad 	.word	0x08010dad
 8010ce4:	08010da9 	.word	0x08010da9
 8010ce8:	08010dad 	.word	0x08010dad
 8010cec:	08010da9 	.word	0x08010da9
 8010cf0:	08010dad 	.word	0x08010dad
 8010cf4:	08010dad 	.word	0x08010dad
 8010cf8:	08010dad 	.word	0x08010dad
 8010cfc:	08010dad 	.word	0x08010dad
 8010d00:	08010da9 	.word	0x08010da9
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 8010d0a:	3b05      	subs	r3, #5
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	409a      	lsls	r2, r3
 8010d10:	4b41      	ldr	r3, [pc, #260]	; (8010e18 <_Z26IsDefaultFastPacketMessagem+0x2b0>)
 8010d12:	4013      	ands	r3, r2
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	bf14      	ite	ne
 8010d18:	2301      	movne	r3, #1
 8010d1a:	2300      	moveq	r3, #0
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d142      	bne.n	8010da8 <_Z26IsDefaultFastPacketMessagem+0x240>
 8010d22:	e043      	b.n	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f1a3 1301 	sub.w	r3, r3, #65537	; 0x10001
 8010d2a:	f5a3 4372 	sub.w	r3, r3, #61952	; 0xf200
 8010d2e:	2b19      	cmp	r3, #25
 8010d30:	d83c      	bhi.n	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
 8010d32:	a201      	add	r2, pc, #4	; (adr r2, 8010d38 <_Z26IsDefaultFastPacketMessagem+0x1d0>)
 8010d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d38:	08010da9 	.word	0x08010da9
 8010d3c:	08010dad 	.word	0x08010dad
 8010d40:	08010dad 	.word	0x08010dad
 8010d44:	08010dad 	.word	0x08010dad
 8010d48:	08010dad 	.word	0x08010dad
 8010d4c:	08010dad 	.word	0x08010dad
 8010d50:	08010dad 	.word	0x08010dad
 8010d54:	08010da9 	.word	0x08010da9
 8010d58:	08010da9 	.word	0x08010da9
 8010d5c:	08010da9 	.word	0x08010da9
 8010d60:	08010dad 	.word	0x08010dad
 8010d64:	08010dad 	.word	0x08010dad
 8010d68:	08010dad 	.word	0x08010dad
 8010d6c:	08010dad 	.word	0x08010dad
 8010d70:	08010da9 	.word	0x08010da9
 8010d74:	08010da9 	.word	0x08010da9
 8010d78:	08010dad 	.word	0x08010dad
 8010d7c:	08010da9 	.word	0x08010da9
 8010d80:	08010da9 	.word	0x08010da9
 8010d84:	08010dad 	.word	0x08010dad
 8010d88:	08010da9 	.word	0x08010da9
 8010d8c:	08010da9 	.word	0x08010da9
 8010d90:	08010da9 	.word	0x08010da9
 8010d94:	08010da9 	.word	0x08010da9
 8010d98:	08010da9 	.word	0x08010da9
 8010d9c:	08010da9 	.word	0x08010da9
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a1e      	ldr	r2, [pc, #120]	; (8010e1c <_Z26IsDefaultFastPacketMessagem+0x2b4>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d101      	bne.n	8010dac <_Z26IsDefaultFastPacketMessagem+0x244>
                                      case 130323L: // Meteorological Station Data, pri=6, period=1000
                                      case 130324L: // Moored Buoy Station Data, pri=6, period=1000
                                      case 130567L: // Watermaker Input Setting and Status, pri=6, period=2500
                                      case 130577L: // Direction Data PGN, pri=3, period=1000
                                      case 130578L: // Vessel Speed Components, pri=2, period=250
                                      return true;
 8010da8:	2301      	movs	r3, #1
 8010daa:	e000      	b.n	8010dae <_Z26IsDefaultFastPacketMessagem+0x246>
                                  }
                                  return false;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	370c      	adds	r7, #12
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bc80      	pop	{r7}
 8010db6:	4770      	bx	lr
 8010db8:	0001fe12 	.word	0x0001fe12
 8010dbc:	0001fe11 	.word	0x0001fe11
 8010dc0:	0001fe07 	.word	0x0001fe07
 8010dc4:	0001fd14 	.word	0x0001fd14
 8010dc8:	0001fd10 	.word	0x0001fd10
 8010dcc:	0001fc1a 	.word	0x0001fc1a
 8010dd0:	0001fc04 	.word	0x0001fc04
 8010dd4:	0001fb15 	.word	0x0001fb15
 8010dd8:	0001fb00 	.word	0x0001fb00
 8010ddc:	0001fa14 	.word	0x0001fa14
 8010de0:	0001fa02 	.word	0x0001fa02
 8010de4:	0001f916 	.word	0x0001f916
 8010de8:	0001f915 	.word	0x0001f915
 8010dec:	0001f905 	.word	0x0001f905
 8010df0:	0001f904 	.word	0x0001f904
 8010df4:	0001f815 	.word	0x0001f815
 8010df8:	0001f805 	.word	0x0001f805
 8010dfc:	0001f608 	.word	0x0001f608
 8010e00:	0001f513 	.word	0x0001f513
 8010e04:	0001f21a 	.word	0x0001f21a
 8010e08:	0001f105 	.word	0x0001f105
 8010e0c:	0001f00c 	.word	0x0001f00c
 8010e10:	0001f007 	.word	0x0001f007
 8010e14:	007ff307 	.word	0x007ff307
 8010e18:	00019e01 	.word	0x00019e01
 8010e1c:	0001f101 	.word	0x0001f101

08010e20 <_Z30IsProprietaryFastPacketMessagem>:

bool IsProprietaryFastPacketMessage(unsigned long PGN) {
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  return ( PGN==126720L ) || ( 130816L<=PGN && PGN<=131071L );
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4a09      	ldr	r2, [pc, #36]	; (8010e50 <_Z30IsProprietaryFastPacketMessagem+0x30>)
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d007      	beq.n	8010e40 <_Z30IsProprietaryFastPacketMessagem+0x20>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	4a08      	ldr	r2, [pc, #32]	; (8010e54 <_Z30IsProprietaryFastPacketMessagem+0x34>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d905      	bls.n	8010e44 <_Z30IsProprietaryFastPacketMessagem+0x24>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010e3e:	d201      	bcs.n	8010e44 <_Z30IsProprietaryFastPacketMessagem+0x24>
 8010e40:	2301      	movs	r3, #1
 8010e42:	e000      	b.n	8010e46 <_Z30IsProprietaryFastPacketMessagem+0x26>
 8010e44:	2300      	movs	r3, #0
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	370c      	adds	r7, #12
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bc80      	pop	{r7}
 8010e4e:	4770      	bx	lr
 8010e50:	0001ef00 	.word	0x0001ef00
 8010e54:	0001feff 	.word	0x0001feff

08010e58 <_ZN9tNMEA200020IsProprietaryMessageEm>:

bool tNMEA2000::IsProprietaryMessage(unsigned long PGN) {
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  return IsProprietaryFastPacketMessage(PGN) || ( PGN==61184L ) || ( 65280L<=PGN && PGN<=65535L );
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7ff ffdd 	bl	8010e20 <_Z30IsProprietaryFastPacketMessagem>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d10b      	bne.n	8010e84 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f5b3 4f6f 	cmp.w	r3, #61184	; 0xef00
 8010e72:	d007      	beq.n	8010e84 <_ZN9tNMEA200020IsProprietaryMessageEm+0x2c>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8010e7a:	d305      	bcc.n	8010e88 <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e82:	d201      	bcs.n	8010e88 <_ZN9tNMEA200020IsProprietaryMessageEm+0x30>
 8010e84:	2301      	movs	r3, #1
 8010e86:	e000      	b.n	8010e8a <_ZN9tNMEA200020IsProprietaryMessageEm+0x32>
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>:
  size_t i=0;
  for (; i<MaxLen; i++) buf[i]=0;
}

//*****************************************************************************
void tNMEA2000::SetCharBuf(const char *str, size_t MaxLen, char *buf) {
 8010e92:	b480      	push	{r7}
 8010e94:	b087      	sub	sp, #28
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	60f8      	str	r0, [r7, #12]
 8010e9a:	60b9      	str	r1, [r7, #8]
 8010e9c:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d036      	beq.n	8010f12 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d033      	beq.n	8010f12 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x80>
  if ( str==0 ) { buf[0]=0; return; }
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d103      	bne.n	8010eb8 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x26>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	701a      	strb	r2, [r3, #0]
 8010eb6:	e02d      	b.n	8010f14 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  size_t i=0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	617b      	str	r3, [r7, #20]
  for (; i<MaxLen-1 && str[i]!=0; i++) buf[i]=str[i];
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	697a      	ldr	r2, [r7, #20]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d211      	bcs.n	8010eea <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	4413      	add	r3, r2
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00b      	beq.n	8010eea <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	441a      	add	r2, r3
 8010ed8:	6879      	ldr	r1, [r7, #4]
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	440b      	add	r3, r1
 8010ede:	7812      	ldrb	r2, [r2, #0]
 8010ee0:	701a      	strb	r2, [r3, #0]
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	617b      	str	r3, [r7, #20]
 8010ee8:	e7e8      	b.n	8010ebc <_ZN9tNMEA200010SetCharBufEPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 8010eea:	697a      	ldr	r2, [r7, #20]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d208      	bcs.n	8010f04 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x72>
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	2200      	movs	r2, #0
 8010efa:	701a      	strb	r2, [r3, #0]
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	3301      	adds	r3, #1
 8010f00:	617b      	str	r3, [r7, #20]
 8010f02:	e7f2      	b.n	8010eea <_ZN9tNMEA200010SetCharBufEPKcjPc+0x58>
  buf[MaxLen-1]=0; // Force null termination
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	3b01      	subs	r3, #1
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	4413      	add	r3, r2
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	701a      	strb	r2, [r3, #0]
 8010f10:	e000      	b.n	8010f14 <_ZN9tNMEA200010SetCharBufEPKcjPc+0x82>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8010f12:	bf00      	nop
}
 8010f14:	371c      	adds	r7, #28
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bc80      	pop	{r7}
 8010f1a:	4770      	bx	lr

08010f1c <_ZN9tNMEA2000C1Ev>:
  ClearCharBuf(MaxLen,buf);
  if (str) SetCharBuf(str,MaxLen,buf);
}

//*****************************************************************************
tNMEA2000::tNMEA2000() {
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	4a41      	ldr	r2, [pc, #260]	; (801102c <_ZN9tNMEA2000C1Ev+0x110>)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	3314      	adds	r3, #20
 8010f2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ff f89a 	bl	801006c <_ZN13tN2kSchedulerC1Em>

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  pGroupFunctionHandlers=0;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	665a      	str	r2, [r3, #100]	; 0x64
#endif
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  InstallationDescriptionChanged=false;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
#endif
  ForwardStream=0;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	60da      	str	r2, [r3, #12]

  for (int i=0; i<N2kMessageGroups; i++) {SingleFrameMessages[i]=0; FastPacketMessages[i]=0;}
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	60fb      	str	r3, [r7, #12]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	dc11      	bgt.n	8010f7a <_ZN9tNMEA2000C1Ev+0x5e>
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	330c      	adds	r3, #12
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	4413      	add	r3, r2
 8010f60:	2200      	movs	r2, #0
 8010f62:	605a      	str	r2, [r3, #4]
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	330e      	adds	r3, #14
 8010f6a:	009b      	lsls	r3, r3, #2
 8010f6c:	4413      	add	r3, r2
 8010f6e:	2200      	movs	r2, #0
 8010f70:	605a      	str	r2, [r3, #4]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3301      	adds	r3, #1
 8010f76:	60fb      	str	r3, [r7, #12]
 8010f78:	e7ea      	b.n	8010f50 <_ZN9tNMEA2000C1Ev+0x34>

  N2kCANMsgBuf=0;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	645a      	str	r2, [r3, #68]	; 0x44
  MaxN2kCANMsgs=0;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  MaxCANSendFrames=40;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2228      	movs	r2, #40	; 0x28
 8010f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  MaxCANReceiveFrames=0; // Use driver default
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  CANSendFrameBuf=0;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	64da      	str	r2, [r3, #76]	; 0x4c

  OnOpen=0;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	659a      	str	r2, [r3, #88]	; 0x58
  MsgHandler=0;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  MsgHandlers=0;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2200      	movs	r2, #0
 8010fae:	611a      	str	r2, [r3, #16]
  ISORqstHandler=0;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	661a      	str	r2, [r3, #96]	; 0x60

  OpenScheduler.FromNow(0);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	3314      	adds	r3, #20
 8010fba:	2100      	movs	r1, #0
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff f8b0 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
  OpenState=os_None;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	761a      	strb	r2, [r3, #24]
  AddressChanged=false;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	765a      	strb	r2, [r3, #25]
  DeviceInformationChanged=false;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	769a      	strb	r2, [r3, #26]
  dbMode=dm_None;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	711a      	strb	r2, [r3, #4]
  N2kMode=N2km_ListenOnly;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	715a      	strb	r2, [r3, #5]
  ForwardType=fwdt_Actisense;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	719a      	strb	r2, [r3, #6]
  ForwardMode=0;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	609a      	str	r2, [r3, #8]
  EnableForward();
 8010fec:	2101      	movs	r1, #1
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7ff fb53 	bl	801069a <_ZN9tNMEA200013EnableForwardEb>
  SetForwardSystemMessages();
 8010ff4:	2101      	movs	r1, #1
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7ff fb6a 	bl	80106d0 <_ZN9tNMEA200024SetForwardSystemMessagesEb>
  SetForwardOwnMessages();
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f7ff fb81 	bl	8010706 <_ZN9tNMEA200021SetForwardOwnMessagesEb>
  LocalConfigurationInformationData=0;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	625a      	str	r2, [r3, #36]	; 0x24
  SetProgmemConfigurationInformation(DefManufacturerInformation,
 801100a:	4b09      	ldr	r3, [pc, #36]	; (8011030 <_ZN9tNMEA2000C1Ev+0x114>)
 801100c:	4a09      	ldr	r2, [pc, #36]	; (8011034 <_ZN9tNMEA2000C1Ev+0x118>)
 801100e:	490a      	ldr	r1, [pc, #40]	; (8011038 <_ZN9tNMEA2000C1Ev+0x11c>)
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 f959 	bl	80112c8 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>
                                     DefInstallationDescription1,
                                     DefInstallationDescription2);
  Devices=0;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	61da      	str	r2, [r3, #28]
  DeviceCount=1;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	621a      	str	r2, [r3, #32]
}
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	08019d08 	.word	0x08019d08
 8011030:	08019cfc 	.word	0x08019cfc
 8011034:	08019cf8 	.word	0x08019cf8
 8011038:	08019cbc 	.word	0x08019cbc

0801103c <_ZN9tNMEA200011InitDevicesEv>:
  // Note that we can set this only before any initialization. Limit count to 10.
  if ( Devices==0 && _DeviceCount>=1 && _DeviceCount<10 ) DeviceCount=_DeviceCount;
}

//*****************************************************************************
void tNMEA2000::InitDevices() {
 801103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801103e:	b089      	sub	sp, #36	; 0x24
 8011040:	af04      	add	r7, sp, #16
 8011042:	6078      	str	r0, [r7, #4]
  if ( Devices==0 ) {
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	69db      	ldr	r3, [r3, #28]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d164      	bne.n	8011116 <_ZN9tNMEA200011InitDevicesEv+0xda>
    N2kDbgln("Init devices");
    Devices=new tInternalDevice[DeviceCount];
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a1b      	ldr	r3, [r3, #32]
 8011050:	461c      	mov	r4, r3
 8011052:	4b33      	ldr	r3, [pc, #204]	; (8011120 <_ZN9tNMEA200011InitDevicesEv+0xe4>)
 8011054:	429c      	cmp	r4, r3
 8011056:	d804      	bhi.n	8011062 <_ZN9tNMEA200011InitDevicesEv+0x26>
 8011058:	f44f 73ac 	mov.w	r3, #344	; 0x158
 801105c:	fb04 f303 	mul.w	r3, r4, r3
 8011060:	e001      	b.n	8011066 <_ZN9tNMEA200011InitDevicesEv+0x2a>
 8011062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011066:	4618      	mov	r0, r3
 8011068:	f007 ff69 	bl	8018f3e <_Znaj>
 801106c:	4603      	mov	r3, r0
 801106e:	461e      	mov	r6, r3
 8011070:	4635      	mov	r5, r6
 8011072:	1e63      	subs	r3, r4, #1
 8011074:	461c      	mov	r4, r3
 8011076:	2c00      	cmp	r4, #0
 8011078:	db06      	blt.n	8011088 <_ZN9tNMEA200011InitDevicesEv+0x4c>
 801107a:	4628      	mov	r0, r5
 801107c:	f7ff f908 	bl	8010290 <_ZN9tNMEA200015tInternalDeviceC1Ev>
 8011080:	f505 75ac 	add.w	r5, r5, #344	; 0x158
 8011084:	3c01      	subs	r4, #1
 8011086:	e7f6      	b.n	8011076 <_ZN9tNMEA200011InitDevicesEv+0x3a>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	61de      	str	r6, [r3, #28]
    MaxCANSendFrames*=DeviceCount; // We need bigger buffer for sending all information
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	6a12      	ldr	r2, [r2, #32]
 8011096:	b292      	uxth	r2, r2
 8011098:	fb02 f303 	mul.w	r3, r2, r3
 801109c:	b29a      	uxth	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
//    for (int i=0; i<DeviceCount; i++) Devices[i].tDevice();
    // We set default device information here.
    Devices[0].LocalProductInformation=0;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	69db      	ldr	r3, [r3, #28]
 80110a8:	2200      	movs	r2, #0
 80110aa:	60da      	str	r2, [r3, #12]
    Devices[0].ProductInformation=&DefProductInformation;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	69db      	ldr	r3, [r3, #28]
 80110b0:	4a1c      	ldr	r2, [pc, #112]	; (8011124 <_ZN9tNMEA200011InitDevicesEv+0xe8>)
 80110b2:	609a      	str	r2, [r3, #8]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 80110b4:	2300      	movs	r3, #0
 80110b6:	60fb      	str	r3, [r7, #12]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a1b      	ldr	r3, [r3, #32]
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	429a      	cmp	r2, r3
 80110c0:	da29      	bge.n	8011116 <_ZN9tNMEA200011InitDevicesEv+0xda>
      SetDeviceInformation(1+i, // 21 bit resolution, max 2097151. Each device from same manufacturer should have unique number.
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	3301      	adds	r3, #1
 80110c6:	4619      	mov	r1, r3
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	9302      	str	r3, [sp, #8]
 80110cc:	2304      	movs	r3, #4
 80110ce:	9301      	str	r3, [sp, #4]
 80110d0:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	2319      	movs	r3, #25
 80110d8:	2282      	movs	r2, #130	; 0x82
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 fd19 	bl	8011b12 <_ZN9tNMEA200020SetDeviceInformationEmhhthi>
                           25, // Inter/Intranetwork Device. See codes on http://www.nmea.org/Assets/20120726%20nmea%202000%20class%20&%20function%20codes%20v%202.00.pdf
                           2046,  // Maximum 2046. See the list of codes on http://www.nmea.org/Assets/20121020%20nmea%202000%20registration%20list.pdf
                           4,  // Marine
                           i
                          );
      if ( i>0 ) {
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	dd13      	ble.n	801110e <_ZN9tNMEA200011InitDevicesEv+0xd2>
        Devices[i].LocalProductInformation=0;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	69da      	ldr	r2, [r3, #28]
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80110f0:	fb01 f303 	mul.w	r3, r1, r3
 80110f4:	4413      	add	r3, r2
 80110f6:	2200      	movs	r2, #0
 80110f8:	60da      	str	r2, [r3, #12]
        Devices[i].ProductInformation=0;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	69da      	ldr	r2, [r3, #28]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011104:	fb01 f303 	mul.w	r3, r1, r3
 8011108:	4413      	add	r3, r2
 801110a:	2200      	movs	r2, #0
 801110c:	609a      	str	r2, [r3, #8]
    for ( int i=0; i<DeviceCount; i++) { // Initialize all devices with some value
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	3301      	adds	r3, #1
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	e7d0      	b.n	80110b8 <_ZN9tNMEA200011InitDevicesEv+0x7c>
      }
    }
  }
}
 8011116:	bf00      	nop
 8011118:	3714      	adds	r7, #20
 801111a:	46bd      	mov	sp, r7
 801111c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801111e:	bf00      	nop
 8011120:	005f417d 	.word	0x005f417d
 8011124:	08019c30 	.word	0x08019c30

08011128 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi>:

//*****************************************************************************
void tNMEA2000::SetProductInformation(const tProductInformation *_ProductInformation, int iDev) {
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 8011134:	6879      	ldr	r1, [r7, #4]
 8011136:	68f8      	ldr	r0, [r7, #12]
 8011138:	f7ff fa7a 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 801113c:	4603      	mov	r3, r0
 801113e:	f083 0301 	eor.w	r3, r3, #1
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d13f      	bne.n	80111c8 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa0>
  InitDevices();
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7ff ff77 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].ProductInformation=_ProductInformation;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	69da      	ldr	r2, [r3, #28]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011158:	fb01 f303 	mul.w	r3, r1, r3
 801115c:	4413      	add	r3, r2
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	609a      	str	r2, [r3, #8]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=Devices[iDev].LocalProductInformation;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	69da      	ldr	r2, [r3, #28]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801116c:	fb01 f303 	mul.w	r3, r1, r3
 8011170:	4413      	add	r3, r2
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d111      	bne.n	801119c <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0x74>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	69da      	ldr	r2, [r3, #28]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011182:	fb01 f303 	mul.w	r3, r1, r3
 8011186:	441a      	add	r2, r3
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	69d9      	ldr	r1, [r3, #28]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8011192:	fb00 f303 	mul.w	r3, r0, r3
 8011196:	440b      	add	r3, r1
 8011198:	68d2      	ldr	r2, [r2, #12]
 801119a:	609a      	str	r2, [r3, #8]
  if (Devices[iDev].ProductInformation==0) Devices[iDev].ProductInformation=&DefProductInformation;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	69da      	ldr	r2, [r3, #28]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80111a6:	fb01 f303 	mul.w	r3, r1, r3
 80111aa:	4413      	add	r3, r2
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d10b      	bne.n	80111ca <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	69da      	ldr	r2, [r3, #28]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80111bc:	fb01 f303 	mul.w	r3, r1, r3
 80111c0:	4413      	add	r3, r2
 80111c2:	4a03      	ldr	r2, [pc, #12]	; (80111d0 <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa8>)
 80111c4:	609a      	str	r2, [r3, #8]
 80111c6:	e000      	b.n	80111ca <_ZN9tNMEA200021SetProductInformationEPKNS_19tProductInformationEi+0xa2>
  if ( !IsValidDevice(iDev) ) return;
 80111c8:	bf00      	nop
}
 80111ca:	3710      	adds	r7, #16
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	08019c30 	.word	0x08019c30

080111d4 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>:
}

//*****************************************************************************
void tNMEA2000::SetConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08a      	sub	sp, #40	; 0x28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d004      	beq.n	80111f4 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x20>
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ee:	4618      	mov	r0, r3
 80111f0:	f008 f88c 	bl	801930c <free>
  LocalConfigurationInformationData=0;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2200      	movs	r2, #0
 80111f8:	625a      	str	r2, [r3, #36]	; 0x24

  size_t ManInfoLen=(ManufacturerInformation?strlen(ManufacturerInformation)+1:0);
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d005      	beq.n	801120c <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x38>
 8011200:	68b8      	ldr	r0, [r7, #8]
 8011202:	f7ef f81b 	bl	800023c <strlen>
 8011206:	4603      	mov	r3, r0
 8011208:	3301      	adds	r3, #1
 801120a:	e000      	b.n	801120e <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x3a>
 801120c:	2300      	movs	r3, #0
 801120e:	627b      	str	r3, [r7, #36]	; 0x24
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
  size_t InstDesc1Len=Max_N2kConfigurationInfoField_len;
 8011210:	2347      	movs	r3, #71	; 0x47
 8011212:	623b      	str	r3, [r7, #32]
  size_t InstDesc2Len=Max_N2kConfigurationInfoField_len;
 8011214:	2347      	movs	r3, #71	; 0x47
 8011216:	61fb      	str	r3, [r7, #28]
#else
  size_t InstDesc1Len=(InstallationDescription1?strlen(InstallationDescription1)+1:0);
  size_t InstDesc2Len=(InstallationDescription2?strlen(InstallationDescription2)+1:0);
#endif

  if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	2b47      	cmp	r3, #71	; 0x47
 801121c:	d901      	bls.n	8011222 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x4e>
 801121e:	2347      	movs	r3, #71	; 0x47
 8011220:	627b      	str	r3, [r7, #36]	; 0x24
  if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 8011222:	6a3b      	ldr	r3, [r7, #32]
 8011224:	2b47      	cmp	r3, #71	; 0x47
 8011226:	d901      	bls.n	801122c <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x58>
 8011228:	2347      	movs	r3, #71	; 0x47
 801122a:	623b      	str	r3, [r7, #32]
  if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	2b47      	cmp	r3, #71	; 0x47
 8011230:	d901      	bls.n	8011236 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x62>
 8011232:	2347      	movs	r3, #71	; 0x47
 8011234:	61fb      	str	r3, [r7, #28]

  size_t TotalSize=ManInfoLen+InstDesc1Len+InstDesc2Len;
 8011236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011238:	6a3b      	ldr	r3, [r7, #32]
 801123a:	4413      	add	r3, r2
 801123c:	69fa      	ldr	r2, [r7, #28]
 801123e:	4413      	add	r3, r2
 8011240:	61bb      	str	r3, [r7, #24]
  void *mem=(TotalSize>0?malloc(TotalSize):0);
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d004      	beq.n	8011252 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x7e>
 8011248:	69b8      	ldr	r0, [r7, #24]
 801124a:	f008 f857 	bl	80192fc <malloc>
 801124e:	4603      	mov	r3, r0
 8011250:	e000      	b.n	8011254 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0x80>
 8011252:	2300      	movs	r3, #0
 8011254:	617b      	str	r3, [r7, #20]

  LocalConfigurationInformationData=(char*)mem;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	697a      	ldr	r2, [r7, #20]
 801125a:	625a      	str	r2, [r3, #36]	; 0x24
  char *Info=LocalConfigurationInformationData;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011260:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription1,InstDesc1Len,Info);
 8011262:	693a      	ldr	r2, [r7, #16]
 8011264:	6a39      	ldr	r1, [r7, #32]
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff fe13 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa2>
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	e000      	b.n	8011278 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xa4>
 8011276:	2300      	movs	r3, #0
 8011278:	68fa      	ldr	r2, [r7, #12]
 801127a:	62d3      	str	r3, [r2, #44]	; 0x2c
  Info+=InstDesc1Len;
 801127c:	693a      	ldr	r2, [r7, #16]
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	4413      	add	r3, r2
 8011282:	613b      	str	r3, [r7, #16]

  SetCharBuf(InstallationDescription2,InstDesc2Len,Info);
 8011284:	693a      	ldr	r2, [r7, #16]
 8011286:	69f9      	ldr	r1, [r7, #28]
 8011288:	6838      	ldr	r0, [r7, #0]
 801128a:	f7ff fe02 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d001      	beq.n	8011298 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc4>
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	e000      	b.n	801129a <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xc6>
 8011298:	2300      	movs	r3, #0
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	6313      	str	r3, [r2, #48]	; 0x30
  Info+=InstDesc2Len;
 801129e:	693a      	ldr	r2, [r7, #16]
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	4413      	add	r3, r2
 80112a4:	613b      	str	r3, [r7, #16]

  SetCharBuf(ManufacturerInformation,ManInfoLen,Info);
 80112a6:	693a      	ldr	r2, [r7, #16]
 80112a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112aa:	68b8      	ldr	r0, [r7, #8]
 80112ac:	f7ff fdf1 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.ManufacturerInformation=(ManufacturerInformation?Info:0);
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d001      	beq.n	80112ba <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe6>
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	e000      	b.n	80112bc <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_+0xe8>
 80112ba:	2300      	movs	r3, #0
 80112bc:	68fa      	ldr	r2, [r7, #12]
 80112be:	6293      	str	r3, [r2, #40]	; 0x28
}
 80112c0:	bf00      	nop
 80112c2:	3728      	adds	r7, #40	; 0x28
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_>:

//*****************************************************************************
void tNMEA2000::SetProgmemConfigurationInformation(const char *ManufacturerInformation,
                                            const char *InstallationDescription1,
                                            const char *InstallationDescription2) {
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b084      	sub	sp, #16
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
  if ( LocalConfigurationInformationData!=0 ) free(LocalConfigurationInformationData); // This happens on second call, which is not good.
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d004      	beq.n	80112e8 <_ZN9tNMEA200034SetProgmemConfigurationInformationEPKcS1_S1_+0x20>
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e2:	4618      	mov	r0, r3
 80112e4:	f008 f812 	bl	801930c <free>
  LocalConfigurationInformationData=0;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2200      	movs	r2, #0
 80112ec:	625a      	str	r2, [r3, #36]	; 0x24
  ConfigurationInformation.ManufacturerInformation=ManufacturerInformation;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	629a      	str	r2, [r3, #40]	; 0x28
  ConfigurationInformation.InstallationDescription1=InstallationDescription1;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	62da      	str	r2, [r3, #44]	; 0x2c
  ConfigurationInformation.InstallationDescription2=InstallationDescription2;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011300:	bf00      	nop
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>:

//*****************************************************************************
size_t tNMEA2000::GetFastPacketTxPGNCount(int iDev) {
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  if ( !IsValidDevice(iDev) ) return 0;
 8011312:	6839      	ldr	r1, [r7, #0]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f7ff f98b 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 801131a:	4603      	mov	r3, r0
 801131c:	f083 0301 	eor.w	r3, r3, #1
 8011320:	b2db      	uxtb	r3, r3
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x22>
 8011326:	2300      	movs	r3, #0
 8011328:	e050      	b.n	80113cc <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc4>
  unsigned long ListPGN;
  size_t FPTxPGNCount=0;
 801132a:	2300      	movs	r3, #0
 801132c:	617b      	str	r3, [r7, #20]

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 801132e:	2300      	movs	r3, #0
 8011330:	613b      	str	r3, [r7, #16]
 8011332:	4a28      	ldr	r2, [pc, #160]	; (80113d4 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xcc>)
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801133a:	60bb      	str	r3, [r7, #8]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	bf14      	ite	ne
 8011342:	2301      	movne	r3, #1
 8011344:	2300      	moveq	r3, #0
 8011346:	b2db      	uxtb	r3, r3
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00d      	beq.n	8011368 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x60>
    if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 801134c:	68b9      	ldr	r1, [r7, #8]
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f001 fc7c 	bl	8012c4c <_ZN9tNMEA200015IsFastPacketPGNEm>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d002      	beq.n	8011360 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x58>
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	3301      	adds	r3, #1
 801135e:	617b      	str	r3, [r7, #20]
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	3301      	adds	r3, #1
 8011364:	613b      	str	r3, [r7, #16]
 8011366:	e7e4      	b.n	8011332 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x2a>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	69da      	ldr	r2, [r3, #28]
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011372:	fb01 f303 	mul.w	r3, r1, r3
 8011376:	4413      	add	r3, r2
 8011378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801137a:	2b00      	cmp	r3, #0
 801137c:	d025      	beq.n	80113ca <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 801137e:	2300      	movs	r3, #0
 8011380:	60fb      	str	r3, [r7, #12]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	69da      	ldr	r2, [r3, #28]
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801138c:	fb01 f303 	mul.w	r3, r1, r3
 8011390:	4413      	add	r3, r2
 8011392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4413      	add	r3, r2
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	60bb      	str	r3, [r7, #8]
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	bf14      	ite	ne
 80113a4:	2301      	movne	r3, #1
 80113a6:	2300      	moveq	r3, #0
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00d      	beq.n	80113ca <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xc2>
      if ( IsFastPacketPGN(ListPGN) ) FPTxPGNCount++;
 80113ae:	68b9      	ldr	r1, [r7, #8]
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f001 fc4b 	bl	8012c4c <_ZN9tNMEA200015IsFastPacketPGNEm>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d002      	beq.n	80113c2 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0xba>
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	3301      	adds	r3, #1
 80113c0:	617b      	str	r3, [r7, #20]
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	3301      	adds	r3, #1
 80113c6:	60fb      	str	r3, [r7, #12]
 80113c8:	e7db      	b.n	8011382 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi+0x7a>
    }
  }

  return FPTxPGNCount;
 80113ca:	697b      	ldr	r3, [r7, #20]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3718      	adds	r7, #24
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	08019be4 	.word	0x08019be4

080113d8 <_ZN9tNMEA200018GetSequenceCounterEmi>:

//*****************************************************************************
int tNMEA2000::GetSequenceCounter(unsigned long PGN, int iDev) {
 80113d8:	b590      	push	{r4, r7, lr}
 80113da:	b089      	sub	sp, #36	; 0x24
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 80113e4:	6879      	ldr	r1, [r7, #4]
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f7ff f922 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 80113ec:	4603      	mov	r3, r0
 80113ee:	f083 0301 	eor.w	r3, r3, #1
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d001      	beq.n	80113fc <_ZN9tNMEA200018GetSequenceCounterEmi+0x24>
 80113f8:	2300      	movs	r3, #0
 80113fa:	e0f9      	b.n	80115f0 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>

  if ( Devices[iDev].PGNSequenceCounters==0 ) { // Sequence counters has not yet been initialized
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	69da      	ldr	r2, [r3, #28]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011406:	fb01 f303 	mul.w	r3, r1, r3
 801140a:	4413      	add	r3, r2
 801140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140e:	2b00      	cmp	r3, #0
 8011410:	d14c      	bne.n	80114ac <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
    Devices[iDev].MaxPGNSequenceCounters=GetFastPacketTxPGNCount(iDev)+1; // Reserve 1 for undefined PGNs
 8011412:	6879      	ldr	r1, [r7, #4]
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f7ff ff77 	bl	8011308 <_ZN9tNMEA200023GetFastPacketTxPGNCountEi>
 801141a:	4601      	mov	r1, r0
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	69da      	ldr	r2, [r3, #28]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8011426:	fb00 f303 	mul.w	r3, r0, r3
 801142a:	4413      	add	r3, r2
 801142c:	1c4a      	adds	r2, r1, #1
 801142e:	631a      	str	r2, [r3, #48]	; 0x30
    Devices[iDev].PGNSequenceCounters=new unsigned long[Devices[iDev].MaxPGNSequenceCounters];
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	69da      	ldr	r2, [r3, #28]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801143a:	fb01 f303 	mul.w	r3, r1, r3
 801143e:	4413      	add	r3, r2
 8011440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011442:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8011446:	4293      	cmp	r3, r2
 8011448:	d201      	bcs.n	801144e <_ZN9tNMEA200018GetSequenceCounterEmi+0x76>
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	e001      	b.n	8011452 <_ZN9tNMEA200018GetSequenceCounterEmi+0x7a>
 801144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	69d1      	ldr	r1, [r2, #28]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801145c:	fb00 f202 	mul.w	r2, r0, r2
 8011460:	188c      	adds	r4, r1, r2
 8011462:	4618      	mov	r0, r3
 8011464:	f007 fd6b 	bl	8018f3e <_Znaj>
 8011468:	4603      	mov	r3, r0
 801146a:	62e3      	str	r3, [r4, #44]	; 0x2c
    for ( size_t i=0; i<Devices[iDev].MaxPGNSequenceCounters; i++ ) Devices[iDev].PGNSequenceCounters[i]=0;
 801146c:	2300      	movs	r3, #0
 801146e:	61fb      	str	r3, [r7, #28]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	69da      	ldr	r2, [r3, #28]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801147a:	fb01 f303 	mul.w	r3, r1, r3
 801147e:	4413      	add	r3, r2
 8011480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011482:	69fa      	ldr	r2, [r7, #28]
 8011484:	429a      	cmp	r2, r3
 8011486:	d211      	bcs.n	80114ac <_ZN9tNMEA200018GetSequenceCounterEmi+0xd4>
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	69da      	ldr	r2, [r3, #28]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011492:	fb01 f303 	mul.w	r3, r1, r3
 8011496:	4413      	add	r3, r2
 8011498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	4413      	add	r3, r2
 80114a0:	2200      	movs	r2, #0
 80114a2:	601a      	str	r2, [r3, #0]
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	3301      	adds	r3, #1
 80114a8:	61fb      	str	r3, [r7, #28]
 80114aa:	e7e1      	b.n	8011470 <_ZN9tNMEA200018GetSequenceCounterEmi+0x98>
  }
  if ( Devices[iDev].PGNSequenceCounters==0 ) return 0; // Should not be. Only in case of memory allocation problem.
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	69da      	ldr	r2, [r3, #28]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80114b6:	fb01 f303 	mul.w	r3, r1, r3
 80114ba:	4413      	add	r3, r2
 80114bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d101      	bne.n	80114c6 <_ZN9tNMEA200018GetSequenceCounterEmi+0xee>
 80114c2:	2300      	movs	r3, #0
 80114c4:	e094      	b.n	80115f0 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  size_t last=Devices[iDev].MaxPGNSequenceCounters-1;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	69da      	ldr	r2, [r3, #28]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80114d0:	fb01 f303 	mul.w	r3, r1, r3
 80114d4:	4413      	add	r3, r2
 80114d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d8:	3b01      	subs	r3, #1
 80114da:	613b      	str	r3, [r7, #16]
  unsigned long sc;
  for ( size_t i=0; i<last; i++ ) {
 80114dc:	2300      	movs	r3, #0
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	697a      	ldr	r2, [r7, #20]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d25e      	bcs.n	80115a6 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1ce>
    if ( Devices[iDev].PGNSequenceCounters[i]==0 ) { // Empty place, use this
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	69da      	ldr	r2, [r3, #28]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80114f2:	fb01 f303 	mul.w	r3, r1, r3
 80114f6:	4413      	add	r3, r2
 80114f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	4413      	add	r3, r2
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d10f      	bne.n	8011526 <_ZN9tNMEA200018GetSequenceCounterEmi+0x14e>
      Devices[iDev].PGNSequenceCounters[i]=PGN;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	69da      	ldr	r2, [r3, #28]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011510:	fb01 f303 	mul.w	r3, r1, r3
 8011514:	4413      	add	r3, r2
 8011516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	4413      	add	r3, r2
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	601a      	str	r2, [r3, #0]
      return 0; // Start from sequence 0
 8011522:	2300      	movs	r3, #0
 8011524:	e064      	b.n	80115f0 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
    }
    if ( (Devices[iDev].PGNSequenceCounters[i]&0x00ffffff) == PGN ) { // Found counter, use it
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	69da      	ldr	r2, [r3, #28]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011530:	fb01 f303 	mul.w	r3, r1, r3
 8011534:	4413      	add	r3, r2
 8011536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	429a      	cmp	r2, r3
 8011548:	d129      	bne.n	801159e <_ZN9tNMEA200018GetSequenceCounterEmi+0x1c6>
      sc=Devices[iDev].PGNSequenceCounters[i]>>24;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	69da      	ldr	r2, [r3, #28]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011554:	fb01 f303 	mul.w	r3, r1, r3
 8011558:	4413      	add	r3, r2
 801155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4413      	add	r3, r2
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	0e1b      	lsrs	r3, r3, #24
 8011566:	61bb      	str	r3, [r7, #24]
      sc++; if (sc>7) sc=0; // Get next counter
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	3301      	adds	r3, #1
 801156c:	61bb      	str	r3, [r7, #24]
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	2b07      	cmp	r3, #7
 8011572:	d901      	bls.n	8011578 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1a0>
 8011574:	2300      	movs	r3, #0
 8011576:	61bb      	str	r3, [r7, #24]
      Devices[iDev].PGNSequenceCounters[i]=PGN | (sc << 24);
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	0619      	lsls	r1, r3, #24
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	69da      	ldr	r2, [r3, #28]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8011586:	fb00 f303 	mul.w	r3, r0, r3
 801158a:	4413      	add	r3, r2
 801158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	68ba      	ldr	r2, [r7, #8]
 8011596:	430a      	orrs	r2, r1
 8011598:	601a      	str	r2, [r3, #0]
      return sc;
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	e028      	b.n	80115f0 <_ZN9tNMEA200018GetSequenceCounterEmi+0x218>
  for ( size_t i=0; i<last; i++ ) {
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	3301      	adds	r3, #1
 80115a2:	617b      	str	r3, [r7, #20]
 80115a4:	e79c      	b.n	80114e0 <_ZN9tNMEA200018GetSequenceCounterEmi+0x108>
    }
  }
  // PGN counter not found, so use common
  sc=Devices[iDev].PGNSequenceCounters[last];
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	69da      	ldr	r2, [r3, #28]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80115b0:	fb01 f303 	mul.w	r3, r1, r3
 80115b4:	4413      	add	r3, r2
 80115b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	4413      	add	r3, r2
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	61bb      	str	r3, [r7, #24]
  sc++; if (sc>7) sc=0;
 80115c2:	69bb      	ldr	r3, [r7, #24]
 80115c4:	3301      	adds	r3, #1
 80115c6:	61bb      	str	r3, [r7, #24]
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	2b07      	cmp	r3, #7
 80115cc:	d901      	bls.n	80115d2 <_ZN9tNMEA200018GetSequenceCounterEmi+0x1fa>
 80115ce:	2300      	movs	r3, #0
 80115d0:	61bb      	str	r3, [r7, #24]
  Devices[iDev].PGNSequenceCounters[last]=sc;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	69da      	ldr	r2, [r3, #28]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80115dc:	fb01 f303 	mul.w	r3, r1, r3
 80115e0:	4413      	add	r3, r2
 80115e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	4413      	add	r3, r2
 80115ea:	69ba      	ldr	r2, [r7, #24]
 80115ec:	601a      	str	r2, [r3, #0]
  return sc;
 80115ee:	69bb      	ldr	r3, [r7, #24]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3724      	adds	r7, #36	; 0x24
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd90      	pop	{r4, r7, pc}

080115f8 <_Z17CopyProgmemStringPKcjPc>:

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)

//*****************************************************************************
void CopyProgmemString(const char *str, size_t MaxLen, char *buf) {
 80115f8:	b480      	push	{r7}
 80115fa:	b087      	sub	sp, #28
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d03a      	beq.n	8011680 <_Z17CopyProgmemStringPKcjPc+0x88>
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d037      	beq.n	8011680 <_Z17CopyProgmemStringPKcjPc+0x88>
  if ( str==0 ) { buf[0]=0; return; }
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d103      	bne.n	801161e <_Z17CopyProgmemStringPKcjPc+0x26>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2200      	movs	r2, #0
 801161a:	701a      	strb	r2, [r3, #0]
 801161c:	e031      	b.n	8011682 <_Z17CopyProgmemStringPKcjPc+0x8a>
  size_t i=0;
 801161e:	2300      	movs	r3, #0
 8011620:	617b      	str	r3, [r7, #20]
  char c;
  for (; i<MaxLen-1 && (c=pgm_read_byte(&(str[i])))!=0; i++) buf[i]=c;
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	3b01      	subs	r3, #1
 8011626:	697a      	ldr	r2, [r7, #20]
 8011628:	429a      	cmp	r2, r3
 801162a:	d209      	bcs.n	8011640 <_Z17CopyProgmemStringPKcjPc+0x48>
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	4413      	add	r3, r2
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	74fb      	strb	r3, [r7, #19]
 8011636:	7cfb      	ldrb	r3, [r7, #19]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d001      	beq.n	8011640 <_Z17CopyProgmemStringPKcjPc+0x48>
 801163c:	2301      	movs	r3, #1
 801163e:	e000      	b.n	8011642 <_Z17CopyProgmemStringPKcjPc+0x4a>
 8011640:	2300      	movs	r3, #0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d008      	beq.n	8011658 <_Z17CopyProgmemStringPKcjPc+0x60>
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	4413      	add	r3, r2
 801164c:	7cfa      	ldrb	r2, [r7, #19]
 801164e:	701a      	strb	r2, [r3, #0]
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	3301      	adds	r3, #1
 8011654:	617b      	str	r3, [r7, #20]
 8011656:	e7e4      	b.n	8011622 <_Z17CopyProgmemStringPKcjPc+0x2a>
  for (; i<MaxLen; i++) buf[i]=0;
 8011658:	697a      	ldr	r2, [r7, #20]
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	429a      	cmp	r2, r3
 801165e:	d208      	bcs.n	8011672 <_Z17CopyProgmemStringPKcjPc+0x7a>
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	4413      	add	r3, r2
 8011666:	2200      	movs	r2, #0
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	3301      	adds	r3, #1
 801166e:	617b      	str	r3, [r7, #20]
 8011670:	e7f2      	b.n	8011658 <_Z17CopyProgmemStringPKcjPc+0x60>
  buf[MaxLen-1]=0; // Force null termination
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	3b01      	subs	r3, #1
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	4413      	add	r3, r2
 801167a:	2200      	movs	r2, #0
 801167c:	701a      	strb	r2, [r3, #0]
 801167e:	e000      	b.n	8011682 <_Z17CopyProgmemStringPKcjPc+0x8a>
  if ( buf==0 || MaxLen==0 ) return; // nothing to do for 0 buffer
 8011680:	bf00      	nop
}
 8011682:	371c      	adds	r7, #28
 8011684:	46bd      	mov	sp, r7
 8011686:	bc80      	pop	{r7}
 8011688:	4770      	bx	lr
	...

0801168c <_ZN9tNMEA20007IsTxPGNEmi>:

//*****************************************************************************
bool tNMEA2000::IsTxPGN(unsigned long PGN, int iDev) {
 801168c:	b580      	push	{r7, lr}
 801168e:	b088      	sub	sp, #32
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 8011698:	6879      	ldr	r1, [r7, #4]
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f7fe ffc8 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 80116a0:	4603      	mov	r3, r0
 80116a2:	f083 0301 	eor.w	r3, r3, #1
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d001      	beq.n	80116b0 <_ZN9tNMEA20007IsTxPGNEmi+0x24>
 80116ac:	2300      	movs	r3, #0
 80116ae:	e046      	b.n	801173e <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  unsigned long ListPGN;

  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 80116b0:	2300      	movs	r3, #0
 80116b2:	61fb      	str	r3, [r7, #28]
 80116b4:	4a24      	ldr	r2, [pc, #144]	; (8011748 <_ZN9tNMEA20007IsTxPGNEmi+0xbc>)
 80116b6:	69fb      	ldr	r3, [r7, #28]
 80116b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116bc:	617b      	str	r3, [r7, #20]
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	bf14      	ite	ne
 80116c4:	2301      	movne	r3, #1
 80116c6:	2300      	moveq	r3, #0
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d009      	beq.n	80116e2 <_ZN9tNMEA20007IsTxPGNEmi+0x56>
    if ( ListPGN==PGN ) return true;
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d101      	bne.n	80116da <_ZN9tNMEA20007IsTxPGNEmi+0x4e>
 80116d6:	2301      	movs	r3, #1
 80116d8:	e031      	b.n	801173e <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
  for (int i=0; (ListPGN=pgm_read_dword(&DefTransmitMessages[i]))!=0; i++) {
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	3301      	adds	r3, #1
 80116de:	61fb      	str	r3, [r7, #28]
 80116e0:	e7e8      	b.n	80116b4 <_ZN9tNMEA20007IsTxPGNEmi+0x28>
  }
  if (Devices[iDev].TransmitMessages!=0) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	69da      	ldr	r2, [r3, #28]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80116ec:	fb01 f303 	mul.w	r3, r1, r3
 80116f0:	4413      	add	r3, r2
 80116f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d021      	beq.n	801173c <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 80116f8:	2300      	movs	r3, #0
 80116fa:	61bb      	str	r3, [r7, #24]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	69da      	ldr	r2, [r3, #28]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011706:	fb01 f303 	mul.w	r3, r1, r3
 801170a:	4413      	add	r3, r2
 801170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	617b      	str	r3, [r7, #20]
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	2b00      	cmp	r3, #0
 801171c:	bf14      	ite	ne
 801171e:	2301      	movne	r3, #1
 8011720:	2300      	moveq	r3, #0
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	d009      	beq.n	801173c <_ZN9tNMEA20007IsTxPGNEmi+0xb0>
      if ( ListPGN==PGN ) return true;
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	429a      	cmp	r2, r3
 801172e:	d101      	bne.n	8011734 <_ZN9tNMEA20007IsTxPGNEmi+0xa8>
 8011730:	2301      	movs	r3, #1
 8011732:	e004      	b.n	801173e <_ZN9tNMEA20007IsTxPGNEmi+0xb2>
    for (int i=0; (ListPGN=pgm_read_dword(&Devices[iDev].TransmitMessages[i]))!=0; i++) {
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	3301      	adds	r3, #1
 8011738:	61bb      	str	r3, [r7, #24]
 801173a:	e7df      	b.n	80116fc <_ZN9tNMEA20007IsTxPGNEmi+0x70>
    }
  }
  return false;
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3720      	adds	r7, #32
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	08019be4 	.word	0x08019be4

0801174c <_ZNK9tNMEA200021GetProductInformationEiRb>:

//*****************************************************************************
const tNMEA2000::tProductInformation * tNMEA2000::GetProductInformation(int iDev, bool &IsProgMem) const {
 801174c:	b580      	push	{r7, lr}
 801174e:	b086      	sub	sp, #24
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return 0;
 8011758:	68b9      	ldr	r1, [r7, #8]
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f7fe ff68 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8011760:	4603      	mov	r3, r0
 8011762:	f083 0301 	eor.w	r3, r3, #1
 8011766:	b2db      	uxtb	r3, r3
 8011768:	2b00      	cmp	r3, #0
 801176a:	d001      	beq.n	8011770 <_ZNK9tNMEA200021GetProductInformationEiRb+0x24>
 801176c:	2300      	movs	r3, #0
 801176e:	e03d      	b.n	80117ec <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
  int iPIDev=iDev;
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	617b      	str	r3, [r7, #20]

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	69da      	ldr	r2, [r3, #28]
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801177e:	fb01 f303 	mul.w	r3, r1, r3
 8011782:	4413      	add	r3, r2
 8011784:	689b      	ldr	r3, [r3, #8]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d101      	bne.n	801178e <_ZNK9tNMEA200021GetProductInformationEiRb+0x42>
 801178a:	2300      	movs	r3, #0
 801178c:	617b      	str	r3, [r7, #20]
    if ( Devices[iPIDev].ProductInformation==0 ) return 0; // Can not do anything.
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	69da      	ldr	r2, [r3, #28]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011798:	fb01 f303 	mul.w	r3, r1, r3
 801179c:	4413      	add	r3, r2
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <_ZNK9tNMEA200021GetProductInformationEiRb+0x5c>
 80117a4:	2300      	movs	r3, #0
 80117a6:	e021      	b.n	80117ec <_ZNK9tNMEA200021GetProductInformationEiRb+0xa0>
    IsProgMem = (Devices[iPIDev].ProductInformation!=Devices[iPIDev].LocalProductInformation );
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	69da      	ldr	r2, [r3, #28]
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80117b2:	fb01 f303 	mul.w	r3, r1, r3
 80117b6:	4413      	add	r3, r2
 80117b8:	689a      	ldr	r2, [r3, #8]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	69d9      	ldr	r1, [r3, #28]
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80117c4:	fb00 f303 	mul.w	r3, r0, r3
 80117c8:	440b      	add	r3, r1
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	bf14      	ite	ne
 80117d0:	2301      	movne	r3, #1
 80117d2:	2300      	moveq	r3, #0
 80117d4:	b2da      	uxtb	r2, r3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	701a      	strb	r2, [r3, #0]
    return Devices[iPIDev].ProductInformation;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	69da      	ldr	r2, [r3, #28]
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80117e4:	fb01 f303 	mul.w	r3, r1, r3
 80117e8:	4413      	add	r3, r2
 80117ea:	689b      	ldr	r3, [r3, #8]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <_ZNK9tNMEA200013GetN2kVersionEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetN2kVersion(int iDev) const {
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 80117fe:	f107 030b 	add.w	r3, r7, #11
 8011802:	461a      	mov	r2, r3
 8011804:	6839      	ldr	r1, [r7, #0]
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f7ff ffa0 	bl	801174c <_ZNK9tNMEA200021GetProductInformationEiRb>
 801180c:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d101      	bne.n	8011818 <_ZNK9tNMEA200013GetN2kVersionEi+0x24>
 8011814:	2300      	movs	r3, #0
 8011816:	e00a      	b.n	801182e <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>

  if ( !IsProgMem ) {
 8011818:	7afb      	ldrb	r3, [r7, #11]
 801181a:	f083 0301 	eor.w	r3, r3, #1
 801181e:	b2db      	uxtb	r3, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	d002      	beq.n	801182a <_ZNK9tNMEA200013GetN2kVersionEi+0x36>
    return ProductInformation->N2kVersion;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	e001      	b.n	801182e <_ZNK9tNMEA200013GetN2kVersionEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->N2kVersion);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	881b      	ldrh	r3, [r3, #0]
  }
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <_ZNK9tNMEA200014GetProductCodeEi>:

//*****************************************************************************
unsigned short tNMEA2000::GetProductCode(int iDev) const {
 8011836:	b580      	push	{r7, lr}
 8011838:	b084      	sub	sp, #16
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 8011840:	f107 030b 	add.w	r3, r7, #11
 8011844:	461a      	mov	r2, r3
 8011846:	6839      	ldr	r1, [r7, #0]
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff ff7f 	bl	801174c <_ZNK9tNMEA200021GetProductInformationEiRb>
 801184e:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d101      	bne.n	801185a <_ZNK9tNMEA200014GetProductCodeEi+0x24>
 8011856:	2300      	movs	r3, #0
 8011858:	e00a      	b.n	8011870 <_ZNK9tNMEA200014GetProductCodeEi+0x3a>

  if ( !IsProgMem ) {
 801185a:	7afb      	ldrb	r3, [r7, #11]
 801185c:	f083 0301 	eor.w	r3, r3, #1
 8011860:	b2db      	uxtb	r3, r3
 8011862:	2b00      	cmp	r3, #0
 8011864:	d002      	beq.n	801186c <_ZNK9tNMEA200014GetProductCodeEi+0x36>
    return ProductInformation->ProductCode;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	885b      	ldrh	r3, [r3, #2]
 801186a:	e001      	b.n	8011870 <_ZNK9tNMEA200014GetProductCodeEi+0x3a>
  } else {
    return pgm_read_word(&ProductInformation->ProductCode);
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	885b      	ldrh	r3, [r3, #2]
  }
}
 8011870:	4618      	mov	r0, r3
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <_ZNK9tNMEA200010GetModelIDEPcji>:

//*****************************************************************************
void tNMEA2000::GetModelID(char *buf, size_t max_len, int iDev) const {
 8011878:	b580      	push	{r7, lr}
 801187a:	b086      	sub	sp, #24
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	60b9      	str	r1, [r7, #8]
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	603b      	str	r3, [r7, #0]
  if ( max_len==0 ) return;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d023      	beq.n	80118d4 <_ZNK9tNMEA200010GetModelIDEPcji+0x5c>
  buf[0]=0;
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	2200      	movs	r2, #0
 8011890:	701a      	strb	r2, [r3, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 8011892:	f107 0313 	add.w	r3, r7, #19
 8011896:	461a      	mov	r2, r3
 8011898:	6839      	ldr	r1, [r7, #0]
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f7ff ff56 	bl	801174c <_ZNK9tNMEA200021GetProductInformationEiRb>
 80118a0:	6178      	str	r0, [r7, #20]

  if ( ProductInformation==0 ) return;
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d017      	beq.n	80118d8 <_ZNK9tNMEA200010GetModelIDEPcji+0x60>

  if ( !IsProgMem ) {
 80118a8:	7cfb      	ldrb	r3, [r7, #19]
 80118aa:	f083 0301 	eor.w	r3, r3, #1
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d007      	beq.n	80118c4 <_ZNK9tNMEA200010GetModelIDEPcji+0x4c>
    SetCharBuf(ProductInformation->N2kModelID,max_len,buf);
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	3304      	adds	r3, #4
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	6879      	ldr	r1, [r7, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	f7ff fae8 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
 80118c2:	e00a      	b.n	80118da <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  } else {
    CopyProgmemString(ProductInformation->N2kModelID,max_len,buf);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	3304      	adds	r3, #4
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	6879      	ldr	r1, [r7, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff fe93 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
 80118d2:	e002      	b.n	80118da <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( max_len==0 ) return;
 80118d4:	bf00      	nop
 80118d6:	e000      	b.n	80118da <_ZNK9tNMEA200010GetModelIDEPcji+0x62>
  if ( ProductInformation==0 ) return;
 80118d8:	bf00      	nop
  }
}
 80118da:	3718      	adds	r7, #24
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <_ZNK9tNMEA200021GetCertificationLevelEi>:
    CopyProgmemString(ProductInformation->N2kModelSerialCode,max_len,buf);
  }
}

//*****************************************************************************
unsigned char tNMEA2000::GetCertificationLevel(int iDev) const {
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 80118ea:	f107 030b 	add.w	r3, r7, #11
 80118ee:	461a      	mov	r2, r3
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7ff ff2a 	bl	801174c <_ZNK9tNMEA200021GetProductInformationEiRb>
 80118f8:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d101      	bne.n	8011904 <_ZNK9tNMEA200021GetCertificationLevelEi+0x24>
 8011900:	2300      	movs	r3, #0
 8011902:	e00c      	b.n	801191e <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>

  if ( !IsProgMem ) {
 8011904:	7afb      	ldrb	r3, [r7, #11]
 8011906:	f083 0301 	eor.w	r3, r3, #1
 801190a:	b2db      	uxtb	r3, r3
 801190c:	2b00      	cmp	r3, #0
 801190e:	d003      	beq.n	8011918 <_ZNK9tNMEA200021GetCertificationLevelEi+0x38>
    return ProductInformation->CertificationLevel;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011916:	e002      	b.n	801191e <_ZNK9tNMEA200021GetCertificationLevelEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->CertificationLevel);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
  }
}
 801191e:	4618      	mov	r0, r3
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <_ZNK9tNMEA200018GetLoadEquivalencyEi>:

//*****************************************************************************
unsigned char tNMEA2000::GetLoadEquivalency(int iDev) const {
 8011926:	b580      	push	{r7, lr}
 8011928:	b084      	sub	sp, #16
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
 801192e:	6039      	str	r1, [r7, #0]
  bool IsProgMem;
  const tProductInformation *ProductInformation=GetProductInformation(iDev,IsProgMem);
 8011930:	f107 030b 	add.w	r3, r7, #11
 8011934:	461a      	mov	r2, r3
 8011936:	6839      	ldr	r1, [r7, #0]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff ff07 	bl	801174c <_ZNK9tNMEA200021GetProductInformationEiRb>
 801193e:	60f8      	str	r0, [r7, #12]

  if ( ProductInformation==0 ) return 0;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x24>
 8011946:	2300      	movs	r3, #0
 8011948:	e00c      	b.n	8011964 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>

  if ( !IsProgMem ) {
 801194a:	7afb      	ldrb	r3, [r7, #11]
 801194c:	f083 0301 	eor.w	r3, r3, #1
 8011950:	b2db      	uxtb	r3, r3
 8011952:	2b00      	cmp	r3, #0
 8011954:	d003      	beq.n	801195e <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x38>
    return ProductInformation->LoadEquivalency;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801195c:	e002      	b.n	8011964 <_ZNK9tNMEA200018GetLoadEquivalencyEi+0x3e>
  } else {
    return pgm_read_byte(&ProductInformation->LoadEquivalency);
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
  }
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>:

//*****************************************************************************
void tNMEA2000::CopyProgmemConfigurationInformationToLocal() {
 801196c:	b580      	push	{r7, lr}
 801196e:	b096      	sub	sp, #88	; 0x58
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  if ( LocalConfigurationInformationData==0 ) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011978:	2b00      	cmp	r3, #0
 801197a:	d12e      	bne.n	80119da <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv+0x6e>
    char Buf[Max_N2kConfigurationInfoField_len];
    const char *ID1=ConfigurationInformation.InstallationDescription1;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011980:	657b      	str	r3, [r7, #84]	; 0x54
    const char *ID2=ConfigurationInformation.InstallationDescription2;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011986:	653b      	str	r3, [r7, #80]	; 0x50
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,Max_N2kConfigurationInfoField_len,Buf);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	f107 0208 	add.w	r2, r7, #8
 8011990:	2147      	movs	r1, #71	; 0x47
 8011992:	4618      	mov	r0, r3
 8011994:	f7ff fe30 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
    SetConfigurationInformation(Buf);
 8011998:	f107 0108 	add.w	r1, r7, #8
 801199c:	2300      	movs	r3, #0
 801199e:	2200      	movs	r2, #0
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f7ff fc17 	bl	80111d4 <_ZN9tNMEA200027SetConfigurationInformationEPKcS1_S1_>
    CopyProgmemString(ID1,Max_N2kConfigurationInfoField_len,Buf);
 80119a6:	f107 0308 	add.w	r3, r7, #8
 80119aa:	461a      	mov	r2, r3
 80119ac:	2147      	movs	r1, #71	; 0x47
 80119ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80119b0:	f7ff fe22 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription1(Buf);
 80119b4:	f107 0308 	add.w	r3, r7, #8
 80119b8:	4619      	mov	r1, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 f811 	bl	80119e2 <_ZN9tNMEA200027SetInstallationDescription1EPKc>
    CopyProgmemString(ID2,Max_N2kConfigurationInfoField_len,Buf);
 80119c0:	f107 0308 	add.w	r3, r7, #8
 80119c4:	461a      	mov	r2, r3
 80119c6:	2147      	movs	r1, #71	; 0x47
 80119c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80119ca:	f7ff fe15 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
    SetInstallationDescription2(Buf);
 80119ce:	f107 0308 	add.w	r3, r7, #8
 80119d2:	4619      	mov	r1, r3
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f000 f824 	bl	8011a22 <_ZN9tNMEA200027SetInstallationDescription2EPKc>
  }
}
 80119da:	bf00      	nop
 80119dc:	3758      	adds	r7, #88	; 0x58
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <_ZN9tNMEA200027SetInstallationDescription1EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription1(const char *InstallationDescription1) {
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b084      	sub	sp, #16
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
 80119ea:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f7ff ffbd 	bl	801196c <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  // Get pointer to local InstallationDescription1, which is after
  char *Info=LocalConfigurationInformationData;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f6:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription1,Max_N2kConfigurationInfoField_len,Info);
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	2147      	movs	r1, #71	; 0x47
 80119fc:	6838      	ldr	r0, [r7, #0]
 80119fe:	f7ff fa48 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription1=(InstallationDescription1?Info:0);
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d001      	beq.n	8011a0c <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2a>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	e000      	b.n	8011a0e <_ZN9tNMEA200027SetInstallationDescription1EPKc+0x2c>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	62d3      	str	r3, [r2, #44]	; 0x2c
  InstallationDescriptionChanged=true;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2201      	movs	r2, #1
 8011a16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8011a1a:	bf00      	nop
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <_ZN9tNMEA200027SetInstallationDescription2EPKc>:

//*****************************************************************************
void tNMEA2000::SetInstallationDescription2(const char *InstallationDescription2) {
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	6039      	str	r1, [r7, #0]
  CopyProgmemConfigurationInformationToLocal();
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f7ff ff9d 	bl	801196c <_ZN9tNMEA200042CopyProgmemConfigurationInformationToLocalEv>
  char *Info=LocalConfigurationInformationData+Max_N2kConfigurationInfoField_len;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a36:	3347      	adds	r3, #71	; 0x47
 8011a38:	60fb      	str	r3, [r7, #12]
  SetCharBuf(InstallationDescription2,Max_N2kConfigurationInfoField_len,Info);
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	2147      	movs	r1, #71	; 0x47
 8011a3e:	6838      	ldr	r0, [r7, #0]
 8011a40:	f7ff fa27 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  ConfigurationInformation.InstallationDescription2=(InstallationDescription2?Info:0);
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d001      	beq.n	8011a4e <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2c>
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	e000      	b.n	8011a50 <_ZN9tNMEA200027SetInstallationDescription2EPKc+0x2e>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	6313      	str	r3, [r2, #48]	; 0x30
  InstallationDescriptionChanged=true;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2201      	movs	r2, #1
 8011a58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8011a5c:	bf00      	nop
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <_ZN9tNMEA200027GetInstallationDescription1EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription1(char *buf, size_t max_len) {
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d007      	beq.n	8011a88 <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription1,max_len,buf);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7c:	68ba      	ldr	r2, [r7, #8]
 8011a7e:	6879      	ldr	r1, [r7, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff fa06 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
  }
}
 8011a86:	e006      	b.n	8011a96 <_ZN9tNMEA200027GetInstallationDescription1EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription1,max_len,buf);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	6879      	ldr	r1, [r7, #4]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff fdb1 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
}
 8011a96:	bf00      	nop
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <_ZN9tNMEA200027GetInstallationDescription2EPcj>:

//*****************************************************************************
void tNMEA2000::GetInstallationDescription2(char *buf, size_t max_len) {
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	60f8      	str	r0, [r7, #12]
 8011aa6:	60b9      	str	r1, [r7, #8]
 8011aa8:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d007      	beq.n	8011ac2 <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x24>
    SetCharBuf(ConfigurationInformation.InstallationDescription2,max_len,buf);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ab6:	68ba      	ldr	r2, [r7, #8]
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff f9e9 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
  }
}
 8011ac0:	e006      	b.n	8011ad0 <_ZN9tNMEA200027GetInstallationDescription2EPcj+0x32>
    CopyProgmemString(ConfigurationInformation.InstallationDescription2,max_len,buf);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ac6:	68ba      	ldr	r2, [r7, #8]
 8011ac8:	6879      	ldr	r1, [r7, #4]
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7ff fd94 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
}
 8011ad0:	bf00      	nop
 8011ad2:	3710      	adds	r7, #16
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <_ZN9tNMEA200026GetManufacturerInformationEPcj>:

//*****************************************************************************
void tNMEA2000::GetManufacturerInformation(char *buf, size_t max_len) {
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
  if ( LocalConfigurationInformationData!=0 ) {
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d007      	beq.n	8011afc <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x24>
    SetCharBuf(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011af0:	68ba      	ldr	r2, [r7, #8]
 8011af2:	6879      	ldr	r1, [r7, #4]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7ff f9cc 	bl	8010e92 <_ZN9tNMEA200010SetCharBufEPKcjPc>
  } else {
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
  }
}
 8011afa:	e006      	b.n	8011b0a <_ZN9tNMEA200026GetManufacturerInformationEPcj+0x32>
    CopyProgmemString(ConfigurationInformation.ManufacturerInformation,max_len,buf);
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b00:	68ba      	ldr	r2, [r7, #8]
 8011b02:	6879      	ldr	r1, [r7, #4]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7ff fd77 	bl	80115f8 <_Z17CopyProgmemStringPKcjPc>
}
 8011b0a:	bf00      	nop
 8011b0c:	3710      	adds	r7, #16
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <_ZN9tNMEA200020SetDeviceInformationEmhhthi>:
                                     unsigned char _DeviceFunction,
                                     unsigned char _DeviceClass,
                                     uint16_t _ManufacturerCode,
                                     unsigned char _IndustryGroup,
                                     int iDev
                                     ) {
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b084      	sub	sp, #16
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	60f8      	str	r0, [r7, #12]
 8011b1a:	60b9      	str	r1, [r7, #8]
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	461a      	mov	r2, r3
 8011b20:	460b      	mov	r3, r1
 8011b22:	71fb      	strb	r3, [r7, #7]
 8011b24:	4613      	mov	r3, r2
 8011b26:	71bb      	strb	r3, [r7, #6]
   if ( !IsValidDevice(iDev) ) return;
 8011b28:	6a39      	ldr	r1, [r7, #32]
 8011b2a:	68f8      	ldr	r0, [r7, #12]
 8011b2c:	f7fe fd80 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8011b30:	4603      	mov	r3, r0
 8011b32:	f083 0301 	eor.w	r3, r3, #1
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d159      	bne.n	8011bf0 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xde>
   InitDevices();
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f7ff fa7d 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>
   if (_ManufacturerCode!=0xffff) Devices[iDev].DeviceInformation.SetManufacturerCode(_ManufacturerCode);
 8011b42:	8b3b      	ldrh	r3, [r7, #24]
 8011b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d00d      	beq.n	8011b68 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x56>
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	69da      	ldr	r2, [r3, #28]
 8011b50:	6a3b      	ldr	r3, [r7, #32]
 8011b52:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011b56:	fb01 f303 	mul.w	r3, r1, r3
 8011b5a:	4413      	add	r3, r2
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	8b3b      	ldrh	r3, [r7, #24]
 8011b60:	4619      	mov	r1, r3
 8011b62:	4610      	mov	r0, r2
 8011b64:	f7fe fb0a 	bl	801017c <_ZN9tNMEA200018tDeviceInformation19SetManufacturerCodeEt>
   if (_UniqueNumber!=0xffffffff) Devices[iDev].DeviceInformation.SetUniqueNumber(_UniqueNumber);
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b6e:	d00b      	beq.n	8011b88 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x76>
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	69da      	ldr	r2, [r3, #28]
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011b7a:	fb01 f303 	mul.w	r3, r1, r3
 8011b7e:	4413      	add	r3, r2
 8011b80:	68b9      	ldr	r1, [r7, #8]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fe fae6 	bl	8010154 <_ZN9tNMEA200018tDeviceInformation15SetUniqueNumberEm>
   if (_DeviceFunction!=0xff) Devices[iDev].DeviceInformation.SetDeviceFunction(_DeviceFunction);
 8011b88:	79fb      	ldrb	r3, [r7, #7]
 8011b8a:	2bff      	cmp	r3, #255	; 0xff
 8011b8c:	d00d      	beq.n	8011baa <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0x98>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	69da      	ldr	r2, [r3, #28]
 8011b92:	6a3b      	ldr	r3, [r7, #32]
 8011b94:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011b98:	fb01 f303 	mul.w	r3, r1, r3
 8011b9c:	4413      	add	r3, r2
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	79fb      	ldrb	r3, [r7, #7]
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	f7fe fb16 	bl	80101d6 <_ZN9tNMEA200018tDeviceInformation17SetDeviceFunctionEh>
   if (_DeviceClass!=0xff) Devices[iDev].DeviceInformation.SetDeviceClass(_DeviceClass);
 8011baa:	79bb      	ldrb	r3, [r7, #6]
 8011bac:	2bff      	cmp	r3, #255	; 0xff
 8011bae:	d00d      	beq.n	8011bcc <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xba>
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	69da      	ldr	r2, [r3, #28]
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011bba:	fb01 f303 	mul.w	r3, r1, r3
 8011bbe:	4413      	add	r3, r2
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	79bb      	ldrb	r3, [r7, #6]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	f7fe fb13 	bl	80101f2 <_ZN9tNMEA200018tDeviceInformation14SetDeviceClassEh>
   if (_IndustryGroup!=0xff) Devices[iDev].DeviceInformation.SetIndustryGroup(_IndustryGroup);
 8011bcc:	7f3b      	ldrb	r3, [r7, #28]
 8011bce:	2bff      	cmp	r3, #255	; 0xff
 8011bd0:	d00f      	beq.n	8011bf2 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	69da      	ldr	r2, [r3, #28]
 8011bd6:	6a3b      	ldr	r3, [r7, #32]
 8011bd8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011bdc:	fb01 f303 	mul.w	r3, r1, r3
 8011be0:	4413      	add	r3, r2
 8011be2:	461a      	mov	r2, r3
 8011be4:	7f3b      	ldrb	r3, [r7, #28]
 8011be6:	4619      	mov	r1, r3
 8011be8:	4610      	mov	r0, r2
 8011bea:	f7fe fb12 	bl	8010212 <_ZN9tNMEA200018tDeviceInformation16SetIndustryGroupEh>
 8011bee:	e000      	b.n	8011bf2 <_ZN9tNMEA200020SetDeviceInformationEmhhthi+0xe0>
   if ( !IsValidDevice(iDev) ) return;
 8011bf0:	bf00      	nop
}
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi>:
void tNMEA2000::SetDeviceInformationInstances(
                              uint8_t _DeviceInstanceLower,
                              uint8_t _DeviceInstanceUpper,
                              uint8_t _SystemInstance,
                              int iDev
                              ) {
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	4608      	mov	r0, r1
 8011c02:	4611      	mov	r1, r2
 8011c04:	461a      	mov	r2, r3
 8011c06:	4603      	mov	r3, r0
 8011c08:	70fb      	strb	r3, [r7, #3]
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	70bb      	strb	r3, [r7, #2]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	707b      	strb	r3, [r7, #1]
  if ( !IsValidDevice(iDev) ) return;
 8011c12:	69b9      	ldr	r1, [r7, #24]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7fe fd0b 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	f083 0301 	eor.w	r3, r3, #1
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f040 808a 	bne.w	8011d3c <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x144>

  InitDevices();
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7ff fa07 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>
  uint8_t DeviceInstance=Devices[iDev].DeviceInformation.GetDeviceInstance();
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	69da      	ldr	r2, [r3, #28]
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011c38:	fb01 f303 	mul.w	r3, r1, r3
 8011c3c:	4413      	add	r3, r2
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fabe 	bl	80101c0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8011c44:	4603      	mov	r3, r0
 8011c46:	73fb      	strb	r3, [r7, #15]

  if (_DeviceInstanceLower!=0xff ) {
 8011c48:	78fb      	ldrb	r3, [r7, #3]
 8011c4a:	2bff      	cmp	r3, #255	; 0xff
 8011c4c:	d00c      	beq.n	8011c68 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x70>
    DeviceInstance=( (DeviceInstance & ~0x07) | (_DeviceInstanceLower & 0x07) );
 8011c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c52:	f023 0307 	bic.w	r3, r3, #7
 8011c56:	b25a      	sxtb	r2, r3
 8011c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c5c:	f003 0307 	and.w	r3, r3, #7
 8011c60:	b25b      	sxtb	r3, r3
 8011c62:	4313      	orrs	r3, r2
 8011c64:	b25b      	sxtb	r3, r3
 8011c66:	73fb      	strb	r3, [r7, #15]
  }
  if (_DeviceInstanceUpper!=0xff ) {
 8011c68:	78bb      	ldrb	r3, [r7, #2]
 8011c6a:	2bff      	cmp	r3, #255	; 0xff
 8011c6c:	d00a      	beq.n	8011c84 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x8c>
    DeviceInstance=( (DeviceInstance & ~0xF8) | ((_DeviceInstanceUpper&0x1f)<<3) );
 8011c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c72:	f003 0307 	and.w	r3, r3, #7
 8011c76:	b25a      	sxtb	r2, r3
 8011c78:	78bb      	ldrb	r3, [r7, #2]
 8011c7a:	00db      	lsls	r3, r3, #3
 8011c7c:	b25b      	sxtb	r3, r3
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	b25b      	sxtb	r3, r3
 8011c82:	73fb      	strb	r3, [r7, #15]
  }

  if ( Devices[iDev].DeviceInformation.GetDeviceInstance()!=DeviceInstance) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	69da      	ldr	r2, [r3, #28]
 8011c88:	69bb      	ldr	r3, [r7, #24]
 8011c8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011c8e:	fb01 f303 	mul.w	r3, r1, r3
 8011c92:	4413      	add	r3, r2
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7fe fa93 	bl	80101c0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	bf14      	ite	ne
 8011ca4:	2301      	movne	r3, #1
 8011ca6:	2300      	moveq	r3, #0
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d010      	beq.n	8011cd0 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0xd8>
    Devices[iDev].DeviceInformation.SetDeviceInstance(DeviceInstance);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	69da      	ldr	r2, [r3, #28]
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011cb8:	fb01 f303 	mul.w	r3, r1, r3
 8011cbc:	4413      	add	r3, r2
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	7bfb      	ldrb	r3, [r7, #15]
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	4610      	mov	r0, r2
 8011cc6:	f7fe fa6d 	bl	80101a4 <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
    DeviceInformationChanged=true;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2201      	movs	r2, #1
 8011cce:	769a      	strb	r2, [r3, #26]
  }

  if (_SystemInstance!=0xff && Devices[iDev].DeviceInformation.GetSystemInstance()!=_SystemInstance) {
 8011cd0:	787b      	ldrb	r3, [r7, #1]
 8011cd2:	2bff      	cmp	r3, #255	; 0xff
 8011cd4:	d011      	beq.n	8011cfa <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x102>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	69da      	ldr	r2, [r3, #28]
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011ce0:	fb01 f303 	mul.w	r3, r1, r3
 8011ce4:	4413      	add	r3, r2
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fb f94c 	bl	800cf84 <_ZNK9tNMEA200018tDeviceInformation17GetSystemInstanceEv>
 8011cec:	4603      	mov	r3, r0
 8011cee:	461a      	mov	r2, r3
 8011cf0:	787b      	ldrb	r3, [r7, #1]
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d001      	beq.n	8011cfa <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x102>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e000      	b.n	8011cfc <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x104>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d010      	beq.n	8011d22 <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x12a>
    Devices[iDev].DeviceInformation.SetSystemInstance(_SystemInstance);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	69da      	ldr	r2, [r3, #28]
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011d0a:	fb01 f303 	mul.w	r3, r1, r3
 8011d0e:	4413      	add	r3, r2
 8011d10:	461a      	mov	r2, r3
 8011d12:	787b      	ldrb	r3, [r7, #1]
 8011d14:	4619      	mov	r1, r3
 8011d16:	4610      	mov	r0, r2
 8011d18:	f7fe fa97 	bl	801024a <_ZN9tNMEA200018tDeviceInformation17SetSystemInstanceEh>
    DeviceInformationChanged=true;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2201      	movs	r2, #1
 8011d20:	769a      	strb	r2, [r3, #26]
  }

  // Send delayed. Had problems with some devices with too fast response.
  if ( IsReadyToSend() ) SendIsoAddressClaim(0xff,iDev,2);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7fe fc99 	bl	801065a <_ZNK9tNMEA200013IsReadyToSendEv>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d007      	beq.n	8011d3e <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x146>
 8011d2e:	2302      	movs	r3, #2
 8011d30:	69ba      	ldr	r2, [r7, #24]
 8011d32:	21ff      	movs	r1, #255	; 0xff
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f002 fe85 	bl	8014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 8011d3a:	e000      	b.n	8011d3e <_ZN9tNMEA200029SetDeviceInformationInstancesEhhhi+0x146>
  if ( !IsValidDevice(iDev) ) return;
 8011d3c:	bf00      	nop
}
 8011d3e:	3710      	adds	r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi>:
void tNMEA2000::ExtendFastPacketMessages(const unsigned long *_FastPacketMessages) {
  FastPacketMessages[1]=_FastPacketMessages;
}

//*****************************************************************************
void tNMEA2000::ExtendTransmitMessages(const unsigned long *_Messages, int iDev) {
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return;
 8011d50:	6879      	ldr	r1, [r7, #4]
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f7fe fc6c 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	f083 0301 	eor.w	r3, r3, #1
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10d      	bne.n	8011d80 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3c>
  InitDevices();
 8011d64:	68f8      	ldr	r0, [r7, #12]
 8011d66:	f7ff f969 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>
  Devices[iDev].TransmitMessages=_Messages;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	69da      	ldr	r2, [r3, #28]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011d74:	fb01 f303 	mul.w	r3, r1, r3
 8011d78:	4413      	add	r3, r2
 8011d7a:	68ba      	ldr	r2, [r7, #8]
 8011d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8011d7e:	e000      	b.n	8011d82 <_ZN9tNMEA200022ExtendTransmitMessagesEPKmi+0x3e>
  if ( !IsValidDevice(iDev) ) return;
 8011d80:	bf00      	nop
}
 8011d82:	3710      	adds	r7, #16
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh>:
  InitDevices();
  Devices[iDev].ReceiveMessages=_Messages;
}

//*****************************************************************************
void tNMEA2000::SetMode(tN2kMode _N2kMode, uint8_t _N2kSource) {
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	460b      	mov	r3, r1
 8011d92:	70fb      	strb	r3, [r7, #3]
 8011d94:	4613      	mov	r3, r2
 8011d96:	70bb      	strb	r3, [r7, #2]
  InitDevices();
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7ff f94f 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>
  N2kMode=_N2kMode;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	78fa      	ldrb	r2, [r7, #3]
 8011da2:	715a      	strb	r2, [r3, #5]
  for (int i=0; i<DeviceCount; i++) {
 8011da4:	2300      	movs	r3, #0
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6a1b      	ldr	r3, [r3, #32]
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	da1d      	bge.n	8011dee <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x66>
    Devices[i].N2kSource=_N2kSource+i;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	b2d9      	uxtb	r1, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	69da      	ldr	r2, [r3, #28]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8011dc0:	fb00 f303 	mul.w	r3, r0, r3
 8011dc4:	4413      	add	r3, r2
 8011dc6:	78ba      	ldrb	r2, [r7, #2]
 8011dc8:	440a      	add	r2, r1
 8011dca:	b2d2      	uxtb	r2, r2
 8011dcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    Devices[i].UpdateAddressClaimEndSource();
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	69da      	ldr	r2, [r3, #28]
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011dda:	fb01 f303 	mul.w	r3, r1, r3
 8011dde:	4413      	add	r3, r2
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fe fb62 	bl	80104aa <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
  for (int i=0; i<DeviceCount; i++) {
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	3301      	adds	r3, #1
 8011dea:	60fb      	str	r3, [r7, #12]
 8011dec:	e7dc      	b.n	8011da8 <_ZN9tNMEA20007SetModeENS_8tN2kModeEh+0x20>
  }
  AddressChanged=false;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	765a      	strb	r2, [r3, #25]
}
 8011df4:	bf00      	nop
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <_ZN9tNMEA200019InitCANFrameBuffersEv>:

//*****************************************************************************
void tNMEA2000::InitCANFrameBuffers() {
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
    if ( CANSendFrameBuf==0 && !IsInitialized() ) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d10a      	bne.n	8011e22 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7f9 fc3b 	bl	800b688 <_ZN9tNMEA200013IsInitializedEv>
 8011e12:	4603      	mov	r3, r0
 8011e14:	f083 0301 	eor.w	r3, r3, #1
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x26>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e000      	b.n	8011e24 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x28>
 8011e22:	2300      	movs	r3, #0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d01d      	beq.n	8011e64 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x68>
      if ( MaxCANSendFrames>0 ) CANSendFrameBuf = new tCANSendFrame[MaxCANSendFrames];
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d010      	beq.n	8011e54 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x58>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e3c:	d201      	bcs.n	8011e42 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x46>
 8011e3e:	011b      	lsls	r3, r3, #4
 8011e40:	e001      	b.n	8011e46 <_ZN9tNMEA200019InitCANFrameBuffersEv+0x4a>
 8011e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e46:	4618      	mov	r0, r3
 8011e48:	f007 f879 	bl	8018f3e <_Znaj>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	64da      	str	r2, [r3, #76]	; 0x4c
      N2kDbg("Initialize frame buffer. Size: "); N2kDbg(MaxCANSendFrames); N2kDbg(", address:"); N2kDbgln((uint32_t)CANSendFrameBuf);
      CANSendFrameBufferWrite=0;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      CANSendFrameBufferRead=0;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    }

    // Receive buffer has sense only with interrupt handling. So it must be handled on inherited class.
}
 8011e64:	bf00      	nop
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <_ZN9tNMEA20004OpenEv>:

//*****************************************************************************
bool tNMEA2000::Open() {
 8011e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e6e:	b089      	sub	sp, #36	; 0x24
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  if ( OpenState==os_Open ) return true;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	7e1b      	ldrb	r3, [r3, #24]
 8011e78:	2b03      	cmp	r3, #3
 8011e7a:	d101      	bne.n	8011e80 <_ZN9tNMEA20004OpenEv+0x14>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e143      	b.n	8012108 <_ZN9tNMEA20004OpenEv+0x29c>

  if ( OpenState==os_None ) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	7e1b      	ldrb	r3, [r3, #24]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f040 80a2 	bne.w	8011fce <_ZN9tNMEA20004OpenEv+0x162>
    InitCANFrameBuffers();
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	330c      	adds	r3, #12
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	4798      	blx	r3
    InitDevices();
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7ff f8d0 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>

    if ( N2kCANMsgBuf==0 ) {
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f040 8091 	bne.w	8011fc8 <_ZN9tNMEA20004OpenEv+0x15c>
      if ( MaxN2kCANMsgs==0 ) MaxN2kCANMsgs=5;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d103      	bne.n	8011eb8 <_ZN9tNMEA20004OpenEv+0x4c>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2205      	movs	r2, #5
 8011eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      N2kCANMsgBuf = new tN2kCANMsg[MaxN2kCANMsgs];
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ebe:	461c      	mov	r4, r3
 8011ec0:	4b93      	ldr	r3, [pc, #588]	; (8012110 <_ZN9tNMEA20004OpenEv+0x2a4>)
 8011ec2:	429c      	cmp	r4, r3
 8011ec4:	d804      	bhi.n	8011ed0 <_ZN9tNMEA20004OpenEv+0x64>
 8011ec6:	4623      	mov	r3, r4
 8011ec8:	019b      	lsls	r3, r3, #6
 8011eca:	4423      	add	r3, r4
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	e001      	b.n	8011ed4 <_ZN9tNMEA20004OpenEv+0x68>
 8011ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f007 f832 	bl	8018f3e <_Znaj>
 8011eda:	4603      	mov	r3, r0
 8011edc:	461e      	mov	r6, r3
 8011ede:	4635      	mov	r5, r6
 8011ee0:	1e63      	subs	r3, r4, #1
 8011ee2:	461c      	mov	r4, r3
 8011ee4:	2c00      	cmp	r4, #0
 8011ee6:	db06      	blt.n	8011ef6 <_ZN9tNMEA20004OpenEv+0x8a>
 8011ee8:	4628      	mov	r0, r5
 8011eea:	f7fe f81c 	bl	800ff26 <_ZN10tN2kCANMsgC1Ev>
 8011eee:	f505 7582 	add.w	r5, r5, #260	; 0x104
 8011ef2:	3c01      	subs	r4, #1
 8011ef4:	e7f6      	b.n	8011ee4 <_ZN9tNMEA20004OpenEv+0x78>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	645e      	str	r6, [r3, #68]	; 0x44
      for (int i=0; i<MaxN2kCANMsgs; i++) N2kCANMsgBuf[i].FreeMessage();
 8011efa:	2300      	movs	r3, #0
 8011efc:	61fb      	str	r3, [r7, #28]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011f04:	461a      	mov	r2, r3
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	da0e      	bge.n	8011f2a <_ZN9tNMEA20004OpenEv+0xbe>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011f10:	69fa      	ldr	r2, [r7, #28]
 8011f12:	4613      	mov	r3, r2
 8011f14:	019b      	lsls	r3, r3, #6
 8011f16:	4413      	add	r3, r2
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	440b      	add	r3, r1
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fe f82f 	bl	800ff80 <_ZN10tN2kCANMsg11FreeMessageEv>
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	3301      	adds	r3, #1
 8011f26:	61fb      	str	r3, [r7, #28]
 8011f28:	e7e9      	b.n	8011efe <_ZN9tNMEA20004OpenEv+0x92>

      #if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
      // On first open try add also default group function handlers
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN60928(this)); // NAME handler
 8011f2a:	2014      	movs	r0, #20
 8011f2c:	f006 fff6 	bl	8018f1c <_Znwj>
 8011f30:	4603      	mov	r3, r0
 8011f32:	461c      	mov	r4, r3
 8011f34:	6879      	ldr	r1, [r7, #4]
 8011f36:	4620      	mov	r0, r4
 8011f38:	f7fe fc72 	bl	8010820 <_ZN35tN2kGroupFunctionHandlerForPGN60928C1EP9tNMEA2000>
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f004 fa12 	bl	8016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126464(this)); // Rx/Tx list handler
 8011f44:	2014      	movs	r0, #20
 8011f46:	f006 ffe9 	bl	8018f1c <_Znwj>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	461c      	mov	r4, r3
 8011f4e:	6879      	ldr	r1, [r7, #4]
 8011f50:	4620      	mov	r0, r4
 8011f52:	f7fe fc7b 	bl	801084c <_ZN36tN2kGroupFunctionHandlerForPGN126464C1EP9tNMEA2000>
 8011f56:	4621      	mov	r1, r4
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f004 fa05 	bl	8016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #if !defined(N2K_NO_HEARTBEAT_SUPPORT)
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126993(this)); // Heartbeat handler
 8011f5e:	2014      	movs	r0, #20
 8011f60:	f006 ffdc 	bl	8018f1c <_Znwj>
 8011f64:	4603      	mov	r3, r0
 8011f66:	461c      	mov	r4, r3
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f7fe fc84 	bl	8010878 <_ZN36tN2kGroupFunctionHandlerForPGN126993C1EP9tNMEA2000>
 8011f70:	4621      	mov	r1, r4
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f004 f9f8 	bl	8016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126996(this)); // Product information
 8011f78:	2014      	movs	r0, #20
 8011f7a:	f006 ffcf 	bl	8018f1c <_Znwj>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	461c      	mov	r4, r3
 8011f82:	6879      	ldr	r1, [r7, #4]
 8011f84:	4620      	mov	r0, r4
 8011f86:	f7fe fc8f 	bl	80108a8 <_ZN36tN2kGroupFunctionHandlerForPGN126996C1EP9tNMEA2000>
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f004 f9eb 	bl	8016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandlerForPGN126998(this)); // Configuration information handler
 8011f92:	2014      	movs	r0, #20
 8011f94:	f006 ffc2 	bl	8018f1c <_Znwj>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	461c      	mov	r4, r3
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f7fe fc9a 	bl	80108d8 <_ZN36tN2kGroupFunctionHandlerForPGN126998C1EP9tNMEA2000>
 8011fa4:	4621      	mov	r1, r4
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f004 f9de 	bl	8016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      AddGroupFunctionHandler(new tN2kGroupFunctionHandler(this,0)); // Default handler at last
 8011fac:	2014      	movs	r0, #20
 8011fae:	f006 ffb5 	bl	8018f1c <_Znwj>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	461c      	mov	r4, r3
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	6879      	ldr	r1, [r7, #4]
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f7fa fa5a 	bl	800c474 <_ZN24tN2kGroupFunctionHandlerC1EP9tNMEA2000m>
 8011fc0:	4621      	mov	r1, r4
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f004 f9d0 	bl	8016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
      #endif
    }
    OpenState=os_OpenCAN;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2201      	movs	r2, #1
 8011fcc:	761a      	strb	r2, [r3, #24]
  }

  if ( OpenState==os_OpenCAN ) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	7e1b      	ldrb	r3, [r3, #24]
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d155      	bne.n	8012082 <_ZN9tNMEA20004OpenEv+0x216>
    if ( !OpenScheduler.IsTime() ) return false;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	3314      	adds	r3, #20
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7fe f883 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	f083 0301 	eor.w	r3, r3, #1
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <_ZN9tNMEA20004OpenEv+0x184>
 8011fec:	2300      	movs	r3, #0
 8011fee:	e08b      	b.n	8012108 <_ZN9tNMEA20004OpenEv+0x29c>
    bool Notify=( (ForwardStream!=0) && (ForwardType==tNMEA2000::fwdt_Text) );
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d005      	beq.n	8012004 <_ZN9tNMEA20004OpenEv+0x198>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	799b      	ldrb	r3, [r3, #6]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d101      	bne.n	8012004 <_ZN9tNMEA20004OpenEv+0x198>
 8012000:	2301      	movs	r3, #1
 8012002:	e000      	b.n	8012006 <_ZN9tNMEA20004OpenEv+0x19a>
 8012004:	2300      	movs	r3, #0
 8012006:	76fb      	strb	r3, [r7, #27]
    if ( (dbMode!=dm_None) || CANOpen() ) {
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	791b      	ldrb	r3, [r3, #4]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d108      	bne.n	8012022 <_ZN9tNMEA20004OpenEv+0x1b6>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	3304      	adds	r3, #4
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	4798      	blx	r3
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <_ZN9tNMEA20004OpenEv+0x1ba>
 8012022:	2301      	movs	r3, #1
 8012024:	e000      	b.n	8012028 <_ZN9tNMEA20004OpenEv+0x1bc>
 8012026:	2300      	movs	r3, #0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d012      	beq.n	8012052 <_ZN9tNMEA20004OpenEv+0x1e6>
      OpenState=os_WaitOpen;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2202      	movs	r2, #2
 8012030:	761a      	strb	r2, [r3, #24]
      OpenScheduler.FromNow(200);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	3314      	adds	r3, #20
 8012036:	21c8      	movs	r1, #200	; 0xc8
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe f872 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device ready"));
 801203e:	7efb      	ldrb	r3, [r7, #27]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d016      	beq.n	8012072 <_ZN9tNMEA20004OpenEv+0x206>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	4932      	ldr	r1, [pc, #200]	; (8012114 <_ZN9tNMEA20004OpenEv+0x2a8>)
 801204a:	4618      	mov	r0, r3
 801204c:	f7fd fec6 	bl	800fddc <_ZN9N2kStream7printlnEPKc>
 8012050:	e00f      	b.n	8012072 <_ZN9tNMEA20004OpenEv+0x206>
    } else { // Open failed, delay next open
      OpenScheduler.FromNow(1000);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	3314      	adds	r3, #20
 8012056:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801205a:	4618      	mov	r0, r3
 801205c:	f7fe f861 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
      if ( Notify ) ForwardStream->println(F("CAN device failed to open"));
 8012060:	7efb      	ldrb	r3, [r7, #27]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d005      	beq.n	8012072 <_ZN9tNMEA20004OpenEv+0x206>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	492b      	ldr	r1, [pc, #172]	; (8012118 <_ZN9tNMEA20004OpenEv+0x2ac>)
 801206c:	4618      	mov	r0, r3
 801206e:	f7fd feb5 	bl	800fddc <_ZN9N2kStream7printlnEPKc>
    }
    return OpenState==os_WaitOpen;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	7e1b      	ldrb	r3, [r3, #24]
 8012076:	2b02      	cmp	r3, #2
 8012078:	bf0c      	ite	eq
 801207a:	2301      	moveq	r3, #1
 801207c:	2300      	movne	r3, #0
 801207e:	b2db      	uxtb	r3, r3
 8012080:	e042      	b.n	8012108 <_ZN9tNMEA20004OpenEv+0x29c>
  }

  // There were problems with some CAN controllers start sending immediately after
  // Initialization so we start sending delayed.
  if ( OpenState==os_WaitOpen && OpenScheduler.IsTime() ) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	7e1b      	ldrb	r3, [r3, #24]
 8012086:	2b02      	cmp	r3, #2
 8012088:	d109      	bne.n	801209e <_ZN9tNMEA20004OpenEv+0x232>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	3314      	adds	r3, #20
 801208e:	4618      	mov	r0, r3
 8012090:	f7fe f829 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d001      	beq.n	801209e <_ZN9tNMEA20004OpenEv+0x232>
 801209a:	2301      	movs	r3, #1
 801209c:	e000      	b.n	80120a0 <_ZN9tNMEA20004OpenEv+0x234>
 801209e:	2300      	movs	r3, #0
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d018      	beq.n	80120d6 <_ZN9tNMEA20004OpenEv+0x26a>
    OpenState=os_Open;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2203      	movs	r2, #3
 80120a8:	761a      	strb	r2, [r3, #24]
    StartAddressClaim();
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f003 fd32 	bl	8015b14 <_ZN9tNMEA200017StartAddressClaimEv>
    tN2kSyncScheduler::SetSyncOffset();
 80120b0:	f7fd ffce 	bl	8010050 <_ZN17tN2kSyncScheduler13SetSyncOffsetEv>
    if ( OnOpen!=0 ) OnOpen();
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <_ZN9tNMEA20004OpenEv+0x256>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c0:	4798      	blx	r3
    SetHeartbeatIntervalAndOffset(DefaultHeartbeatInterval,10000); // Init default hearbeat interval and offset.
 80120c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80120ca:	f64e 2160 	movw	r1, #60000	; 0xea60
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 f93c 	bl	801234c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>
 80120d4:	e011      	b.n	80120fa <_ZN9tNMEA20004OpenEv+0x28e>
  } else {
    unsigned long canId;
    unsigned char len = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    while ( CANGetFrame(canId,len,buf) );
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	3308      	adds	r3, #8
 80120e0:	681c      	ldr	r4, [r3, #0]
 80120e2:	f107 0308 	add.w	r3, r7, #8
 80120e6:	f107 0213 	add.w	r2, r7, #19
 80120ea:	f107 0114 	add.w	r1, r7, #20
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	47a0      	blx	r4
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d000      	beq.n	80120fa <_ZN9tNMEA20004OpenEv+0x28e>
 80120f8:	e7ef      	b.n	80120da <_ZN9tNMEA20004OpenEv+0x26e>
  }

  // For compatibility return true, when final open is waiting.
  return OpenState>=os_WaitOpen;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	7e1b      	ldrb	r3, [r3, #24]
 80120fe:	2b01      	cmp	r3, #1
 8012100:	bf8c      	ite	hi
 8012102:	2301      	movhi	r3, #1
 8012104:	2300      	movls	r3, #0
 8012106:	b2db      	uxtb	r3, r3
}
 8012108:	4618      	mov	r0, r3
 801210a:	3724      	adds	r7, #36	; 0x24
 801210c:	46bd      	mov	sp, r7
 801210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012110:	007e07e0 	.word	0x007e07e0
 8012114:	08019854 	.word	0x08019854
 8012118:	08019868 	.word	0x08019868

0801211c <_Z10CanIdToN2kmRhRmS_S_>:
void tNMEA2000::Restart() {
  StartAddressClaim();
}

//*****************************************************************************
void CanIdToN2k(unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst) {
 801211c:	b480      	push	{r7}
 801211e:	b087      	sub	sp, #28
 8012120:	af00      	add	r7, sp, #0
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	607a      	str	r2, [r7, #4]
 8012128:	603b      	str	r3, [r7, #0]
  unsigned char CanIdPF = (unsigned char) (id >> 16);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	0c1b      	lsrs	r3, r3, #16
 801212e:	75fb      	strb	r3, [r7, #23]
  unsigned char CanIdPS = (unsigned char) (id >> 8);
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	0a1b      	lsrs	r3, r3, #8
 8012134:	75bb      	strb	r3, [r7, #22]
  unsigned char CanIdDP = (unsigned char) (id >> 24) & 1;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	0e1b      	lsrs	r3, r3, #24
 801213a:	b2db      	uxtb	r3, r3
 801213c:	f003 0301 	and.w	r3, r3, #1
 8012140:	757b      	strb	r3, [r7, #21]

    src = (unsigned char) id >> 0;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	b2da      	uxtb	r2, r3
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	701a      	strb	r2, [r3, #0]
    prio = (unsigned char) ((id >> 26) & 0x7);
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	0e9b      	lsrs	r3, r3, #26
 801214e:	b2db      	uxtb	r3, r3
 8012150:	f003 0307 	and.w	r3, r3, #7
 8012154:	b2da      	uxtb	r2, r3
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	701a      	strb	r2, [r3, #0]

    if (CanIdPF < 240) {
 801215a:	7dfb      	ldrb	r3, [r7, #23]
 801215c:	2bef      	cmp	r3, #239	; 0xef
 801215e:	d80a      	bhi.n	8012176 <_Z10CanIdToN2kmRhRmS_S_+0x5a>
      /* PDU1 format, the PS contains the destination address */
        dst = CanIdPS;
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	7dba      	ldrb	r2, [r7, #22]
 8012164:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8);
 8012166:	7d7b      	ldrb	r3, [r7, #21]
 8012168:	041a      	lsls	r2, r3, #16
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	021b      	lsls	r3, r3, #8
 801216e:	431a      	orrs	r2, r3
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	601a      	str	r2, [r3, #0]
    } else {
      /* PDU2 format, the destination is implied global and the PGN is extended */
        dst = 0xff;
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
    }
}
 8012174:	e00b      	b.n	801218e <_Z10CanIdToN2kmRhRmS_S_+0x72>
        dst = 0xff;
 8012176:	6a3b      	ldr	r3, [r7, #32]
 8012178:	22ff      	movs	r2, #255	; 0xff
 801217a:	701a      	strb	r2, [r3, #0]
        pgn = (((unsigned long)CanIdDP) << 16) | (((unsigned long)CanIdPF) << 8) | (unsigned long)CanIdPS;
 801217c:	7d7b      	ldrb	r3, [r7, #21]
 801217e:	041a      	lsls	r2, r3, #16
 8012180:	7dfb      	ldrb	r3, [r7, #23]
 8012182:	021b      	lsls	r3, r3, #8
 8012184:	431a      	orrs	r2, r3
 8012186:	7dbb      	ldrb	r3, [r7, #22]
 8012188:	431a      	orrs	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	601a      	str	r2, [r3, #0]
}
 801218e:	bf00      	nop
 8012190:	371c      	adds	r7, #28
 8012192:	46bd      	mov	sp, r7
 8012194:	bc80      	pop	{r7}
 8012196:	4770      	bx	lr

08012198 <_Z10N2ktoCanIDhmmh>:

//*****************************************************************************
unsigned long N2ktoCanID(unsigned char priority, unsigned long PGN, unsigned long Source, unsigned char Destination) {
 8012198:	b480      	push	{r7}
 801219a:	b087      	sub	sp, #28
 801219c:	af00      	add	r7, sp, #0
 801219e:	60b9      	str	r1, [r7, #8]
 80121a0:	607a      	str	r2, [r7, #4]
 80121a2:	461a      	mov	r2, r3
 80121a4:	4603      	mov	r3, r0
 80121a6:	73fb      	strb	r3, [r7, #15]
 80121a8:	4613      	mov	r3, r2
 80121aa:	73bb      	strb	r3, [r7, #14]
  unsigned char CanIdPF = (unsigned char) (PGN >> 8);
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	0a1b      	lsrs	r3, r3, #8
 80121b0:	75fb      	strb	r3, [r7, #23]

  if (CanIdPF < 240) {  // PDU1 format
 80121b2:	7dfb      	ldrb	r3, [r7, #23]
 80121b4:	2bef      	cmp	r3, #239	; 0xef
 80121b6:	d812      	bhi.n	80121de <_Z10N2ktoCanIDhmmh+0x46>
     if ( (PGN & 0xff) != 0 ) return 0;  // for PDU1 format PGN lowest byte has to be 0 for the destination.
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d001      	beq.n	80121c4 <_Z10N2ktoCanIDhmmh+0x2c>
 80121c0:	2300      	movs	r3, #0
 80121c2:	e015      	b.n	80121f0 <_Z10N2ktoCanIDhmmh+0x58>
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | ((unsigned long)Destination)<<8 | (unsigned long)Source);
 80121c4:	7bfb      	ldrb	r3, [r7, #15]
 80121c6:	069b      	lsls	r3, r3, #26
 80121c8:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	021b      	lsls	r3, r3, #8
 80121d0:	431a      	orrs	r2, r3
 80121d2:	7bbb      	ldrb	r3, [r7, #14]
 80121d4:	021b      	lsls	r3, r3, #8
 80121d6:	431a      	orrs	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	4313      	orrs	r3, r2
 80121dc:	e008      	b.n	80121f0 <_Z10N2ktoCanIDhmmh+0x58>
  } else { // PDU2 format
     return ( ((unsigned long)(priority & 0x7))<<26 | PGN<<8 | (unsigned long)Source);
 80121de:	7bfb      	ldrb	r3, [r7, #15]
 80121e0:	069b      	lsls	r3, r3, #26
 80121e2:	f003 52e0 	and.w	r2, r3, #469762048	; 0x1c000000
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	021b      	lsls	r3, r3, #8
 80121ea:	431a      	orrs	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4313      	orrs	r3, r2
  }
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	371c      	adds	r7, #28
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bc80      	pop	{r7}
 80121f8:	4770      	bx	lr

080121fa <_ZN9tNMEA200010SendFramesEv>:

//*****************************************************************************
bool tNMEA2000::SendFrames()
{ uint16_t temp;
 80121fa:	b5b0      	push	{r4, r5, r7, lr}
 80121fc:	b086      	sub	sp, #24
 80121fe:	af02      	add	r7, sp, #8
 8012200:	6078      	str	r0, [r7, #4]

  if ( CANSendFrameBuf==0 ) return true; // This can be in case, where inherited class defines own buffering.
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <_ZN9tNMEA200010SendFramesEv+0x14>
 801220a:	2301      	movs	r3, #1
 801220c:	e03f      	b.n	801228e <_ZN9tNMEA200010SendFramesEv+0x94>

  while (CANSendFrameBufferRead!=CANSendFrameBufferWrite) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801221a:	429a      	cmp	r2, r3
 801221c:	d036      	beq.n	801228c <_ZN9tNMEA200010SendFramesEv+0x92>
    temp = (CANSendFrameBufferRead + 1) % MaxCANSendFrames;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8012224:	3301      	adds	r3, #1
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 801222c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012230:	fb01 f202 	mul.w	r2, r1, r2
 8012234:	1a9b      	subs	r3, r3, r2
 8012236:	81fb      	strh	r3, [r7, #14]
    if ( CANSendFrame(CANSendFrameBuf[temp].id, CANSendFrameBuf[temp].len, CANSendFrameBuf[temp].buf, CANSendFrameBuf[temp].wait_sent) ) {
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681c      	ldr	r4, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012242:	89fb      	ldrh	r3, [r7, #14]
 8012244:	011b      	lsls	r3, r3, #4
 8012246:	4413      	add	r3, r2
 8012248:	6819      	ldr	r1, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801224e:	89fb      	ldrh	r3, [r7, #14]
 8012250:	011b      	lsls	r3, r3, #4
 8012252:	4413      	add	r3, r2
 8012254:	7918      	ldrb	r0, [r3, #4]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801225a:	89fb      	ldrh	r3, [r7, #14]
 801225c:	011b      	lsls	r3, r3, #4
 801225e:	4413      	add	r3, r2
 8012260:	1d5d      	adds	r5, r3, #5
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012266:	89fb      	ldrh	r3, [r7, #14]
 8012268:	011b      	lsls	r3, r3, #4
 801226a:	4413      	add	r3, r2
 801226c:	7b5b      	ldrb	r3, [r3, #13]
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	462b      	mov	r3, r5
 8012272:	4602      	mov	r2, r0
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	47a0      	blx	r4
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d004      	beq.n	8012288 <_ZN9tNMEA200010SendFramesEv+0x8e>
      CANSendFrameBufferRead=temp;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	89fa      	ldrh	r2, [r7, #14]
 8012282:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8012286:	e7c2      	b.n	801220e <_ZN9tNMEA200010SendFramesEv+0x14>
      N2kFrameOutDbgStart("Frame unbuffered "); N2kFrameOutDbgln(CANSendFrameBuf[temp].id);
    } else return false;
 8012288:	2300      	movs	r3, #0
 801228a:	e000      	b.n	801228e <_ZN9tNMEA200010SendFramesEv+0x94>
  }

  return true;
 801228c:	2301      	movs	r3, #1
}
 801228e:	4618      	mov	r0, r3
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bdb0      	pop	{r4, r5, r7, pc}

08012296 <_ZN9tNMEA20009SendFrameEmhPKhb>:

//*****************************************************************************
bool tNMEA2000::SendFrame(unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent) {
 8012296:	b590      	push	{r4, r7, lr}
 8012298:	b089      	sub	sp, #36	; 0x24
 801229a:	af02      	add	r7, sp, #8
 801229c:	60f8      	str	r0, [r7, #12]
 801229e:	60b9      	str	r1, [r7, #8]
 80122a0:	603b      	str	r3, [r7, #0]
 80122a2:	4613      	mov	r3, r2
 80122a4:	71fb      	strb	r3, [r7, #7]

  if ( !SendFrames() || !CANSendFrame(id,len,buf,wait_sent) ) { // If we can not sent frame immediately, add it to buffer
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff ffa7 	bl	80121fa <_ZN9tNMEA200010SendFramesEv>
 80122ac:	4603      	mov	r3, r0
 80122ae:	f083 0301 	eor.w	r3, r3, #1
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d110      	bne.n	80122da <_ZN9tNMEA20009SendFrameEmhPKhb+0x44>
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	681c      	ldr	r4, [r3, #0]
 80122be:	79fa      	ldrb	r2, [r7, #7]
 80122c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	68b9      	ldr	r1, [r7, #8]
 80122ca:	68f8      	ldr	r0, [r7, #12]
 80122cc:	47a0      	blx	r4
 80122ce:	4603      	mov	r3, r0
 80122d0:	f083 0301 	eor.w	r3, r3, #1
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d001      	beq.n	80122de <_ZN9tNMEA20009SendFrameEmhPKhb+0x48>
 80122da:	2301      	movs	r3, #1
 80122dc:	e000      	b.n	80122e0 <_ZN9tNMEA20009SendFrameEmhPKhb+0x4a>
 80122de:	2300      	movs	r3, #0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d02d      	beq.n	8012340 <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
    tCANSendFrame *Frame=GetNextFreeCANSendFrame();
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f000 fa3a 	bl	801275e <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>
 80122ea:	6138      	str	r0, [r7, #16]
    if ( Frame==0 ) {
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d101      	bne.n	80122f6 <_ZN9tNMEA20009SendFrameEmhPKhb+0x60>
      N2kFrameOutDbgStart("Frame failed "); N2kFrameOutDbgln(id);
      return false;
 80122f2:	2300      	movs	r3, #0
 80122f4:	e025      	b.n	8012342 <_ZN9tNMEA20009SendFrameEmhPKhb+0xac>
    }
    len=N2kMin<unsigned char>(len,8);
 80122f6:	79fb      	ldrb	r3, [r7, #7]
 80122f8:	2108      	movs	r1, #8
 80122fa:	4618      	mov	r0, r3
 80122fc:	f004 fa30 	bl	8016760 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 8012300:	4603      	mov	r3, r0
 8012302:	71fb      	strb	r3, [r7, #7]
    Frame->id=id;
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	68ba      	ldr	r2, [r7, #8]
 8012308:	601a      	str	r2, [r3, #0]
    Frame->len=len;
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	79fa      	ldrb	r2, [r7, #7]
 801230e:	711a      	strb	r2, [r3, #4]
    Frame->wait_sent=wait_sent;
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012316:	735a      	strb	r2, [r3, #13]
    for (int i=0; i<len; i++) Frame->buf[i]=buf[i];
 8012318:	2300      	movs	r3, #0
 801231a:	617b      	str	r3, [r7, #20]
 801231c:	79fb      	ldrb	r3, [r7, #7]
 801231e:	697a      	ldr	r2, [r7, #20]
 8012320:	429a      	cmp	r2, r3
 8012322:	da0d      	bge.n	8012340 <_ZN9tNMEA20009SendFrameEmhPKhb+0xaa>
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	4413      	add	r3, r2
 801232a:	7819      	ldrb	r1, [r3, #0]
 801232c:	693a      	ldr	r2, [r7, #16]
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	4413      	add	r3, r2
 8012332:	3305      	adds	r3, #5
 8012334:	460a      	mov	r2, r1
 8012336:	701a      	strb	r2, [r3, #0]
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	3301      	adds	r3, #1
 801233c:	617b      	str	r3, [r7, #20]
 801233e:	e7ed      	b.n	801231c <_ZN9tNMEA20009SendFrameEmhPKhb+0x86>
    N2kFrameOutDbgStart("Frame buffered "); N2kFrameOutDbgln(id);
  }

  return true;
 8012340:	2301      	movs	r3, #1
}
 8012342:	4618      	mov	r0, r3
 8012344:	371c      	adds	r7, #28
 8012346:	46bd      	mov	sp, r7
 8012348:	bd90      	pop	{r4, r7, pc}
	...

0801234c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi>:

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
void tNMEA2000::SetHeartbeatIntervalAndOffset(uint32_t interval, uint32_t offset, int iDev) {
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	607a      	str	r2, [r7, #4]
 8012358:	603b      	str	r3, [r7, #0]
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012360:	d105      	bne.n	801236e <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x22>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012368:	4293      	cmp	r3, r2
 801236a:	f000 809e 	beq.w	80124aa <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x15e>
  InitDevices();
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7fe fe64 	bl	801103c <_ZN9tNMEA200011InitDevicesEv>
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801237a:	617b      	str	r3, [r7, #20]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6a1b      	ldr	r3, [r3, #32]
 8012380:	697a      	ldr	r2, [r7, #20]
 8012382:	429a      	cmp	r2, r3
 8012384:	f280 8092 	bge.w	80124ac <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	2b00      	cmp	r3, #0
 801238c:	db04      	blt.n	8012398 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x4c>
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	429a      	cmp	r2, r3
 8012394:	f2c0 808a 	blt.w	80124ac <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x160>
    if ( interval==0xffffffff ) {
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801239e:	d10e      	bne.n	80123be <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x72>
      interval=Devices[i].HeartbeatScheduler.GetPeriod();
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	69da      	ldr	r2, [r3, #28]
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80123aa:	fb01 f303 	mul.w	r3, r1, r3
 80123ae:	4413      	add	r3, r2
 80123b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fd fe3f 	bl	8010038 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 80123ba:	60b8      	str	r0, [r7, #8]
 80123bc:	e006      	b.n	80123cc <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
    } else if (interval==0xfffffffe) { // restore default
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	f113 0f02 	cmn.w	r3, #2
 80123c4:	d102      	bne.n	80123cc <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x80>
      interval=DefaultHeartbeatInterval;
 80123c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80123ca:	60bb      	str	r3, [r7, #8]
    }
    if ( offset==0xffffffff ) offset=Devices[i].HeartbeatScheduler.GetOffset();
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123d2:	d10d      	bne.n	80123f0 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xa4>
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	69da      	ldr	r2, [r3, #28]
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80123de:	fb01 f303 	mul.w	r3, r1, r3
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fd fe1a 	bl	8010022 <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 80123ee:	6078      	str	r0, [r7, #4]

    if ( interval==0 ) { // This is for test purposes
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d10d      	bne.n	8012412 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xc6>
      Devices[i].HeartbeatScheduler.Disable();
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	69da      	ldr	r2, [r3, #28]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012400:	fb01 f303 	mul.w	r3, r1, r3
 8012404:	4413      	add	r3, r2
 8012406:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801240a:	4618      	mov	r0, r3
 801240c:	f7ef fb71 	bl	8001af2 <_ZN17tN2kSyncScheduler7DisableEv>
 8012410:	e047      	b.n	80124a2 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
    } else {
      if ( interval>MaxHeartbeatInterval ) interval=MaxHeartbeatInterval;
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	4a27      	ldr	r2, [pc, #156]	; (80124b4 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d901      	bls.n	801241e <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xd2>
 801241a:	4b26      	ldr	r3, [pc, #152]	; (80124b4 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x168>)
 801241c:	60bb      	str	r3, [r7, #8]
      if ( interval<1000 ) interval=1000;
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012424:	d202      	bcs.n	801242c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0xe0>
 8012426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801242a:	60bb      	str	r3, [r7, #8]

      bool changed=( Devices[i].HeartbeatScheduler.GetPeriod()!=interval || Devices[i].HeartbeatScheduler.GetOffset()!=offset ); 
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	69da      	ldr	r2, [r3, #28]
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012436:	fb01 f303 	mul.w	r3, r1, r3
 801243a:	4413      	add	r3, r2
 801243c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012440:	4618      	mov	r0, r3
 8012442:	f7fd fdf9 	bl	8010038 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 8012446:	4602      	mov	r2, r0
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	4293      	cmp	r3, r2
 801244c:	d110      	bne.n	8012470 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x124>
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	69da      	ldr	r2, [r3, #28]
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012458:	fb01 f303 	mul.w	r3, r1, r3
 801245c:	4413      	add	r3, r2
 801245e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012462:	4618      	mov	r0, r3
 8012464:	f7fd fddd 	bl	8010022 <_ZNK17tN2kSyncScheduler9GetOffsetEv>
 8012468:	4602      	mov	r2, r0
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	4293      	cmp	r3, r2
 801246e:	d001      	beq.n	8012474 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x128>
 8012470:	2301      	movs	r3, #1
 8012472:	e000      	b.n	8012476 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x12a>
 8012474:	2300      	movs	r3, #0
 8012476:	74fb      	strb	r3, [r7, #19]
      if ( changed ) {
 8012478:	7cfb      	ldrb	r3, [r7, #19]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d011      	beq.n	80124a2 <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x156>
        Devices[i].HeartbeatScheduler.SetPeriodAndOffset(interval,offset);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	69da      	ldr	r2, [r3, #28]
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012488:	fb01 f303 	mul.w	r3, r1, r3
 801248c:	4413      	add	r3, r2
 801248e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	68b9      	ldr	r1, [r7, #8]
 8012496:	4618      	mov	r0, r3
 8012498:	f7fd fda9 	bl	800ffee <_ZN17tN2kSyncScheduler18SetPeriodAndOffsetEmm>
        DeviceInformationChanged=true;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2201      	movs	r2, #1
 80124a0:	769a      	strb	r2, [r3, #26]
  for (int i=(iDev<0?0:iDev); i<DeviceCount && (iDev<0?true:i<iDev+1); i++) {
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	3301      	adds	r3, #1
 80124a6:	617b      	str	r3, [r7, #20]
 80124a8:	e768      	b.n	801237c <_ZN9tNMEA200029SetHeartbeatIntervalAndOffsetEmmi+0x30>
  if ( interval==0xffffffff && offset==0xffff ) return; // Do not change
 80124aa:	bf00      	nop
      }
    }
  }
}
 80124ac:	3718      	adds	r7, #24
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	0009ffd8 	.word	0x0009ffd8

080124b8 <_ZN9tNMEA200013SendHeartbeatEi>:
void tNMEA2000::SetHeartbeatInterval(unsigned long interval, bool /*SetAsDefault*/, int iDev) {
  SetHeartbeatIntervalAndOffset(interval,0xffffffff,iDev);
}

//*****************************************************************************
void tNMEA2000::SendHeartbeat(int iDev) {
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b0c4      	sub	sp, #272	; 0x110
 80124bc:	af02      	add	r7, sp, #8
 80124be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124c6:	6018      	str	r0, [r3, #0]
 80124c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124d0:	6019      	str	r1, [r3, #0]
  if ( !IsValidDevice(iDev) ) return;
 80124d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124d6:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80124da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124e2:	6811      	ldr	r1, [r2, #0]
 80124e4:	6818      	ldr	r0, [r3, #0]
 80124e6:	f7fe f8a3 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 80124ea:	4603      	mov	r3, r0
 80124ec:	f083 0301 	eor.w	r3, r3, #1
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d133      	bne.n	801255e <_ZN9tNMEA200013SendHeartbeatEi+0xa6>
  tN2kMsg N2kMsg;
 80124f6:	f107 000c 	add.w	r0, r7, #12
 80124fa:	2300      	movs	r3, #0
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	2300      	movs	r3, #0
 8012500:	2206      	movs	r2, #6
 8012502:	210f      	movs	r1, #15
 8012504:	f7fc fbb8 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
  SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),0xff);
 8012508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801250c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	69da      	ldr	r2, [r3, #28]
 8012514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012522:	fb01 f303 	mul.w	r3, r1, r3
 8012526:	4413      	add	r3, r2
 8012528:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801252c:	4618      	mov	r0, r3
 801252e:	f7fd fd83 	bl	8010038 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 8012532:	4601      	mov	r1, r0
 8012534:	f107 030c 	add.w	r3, r7, #12
 8012538:	22ff      	movs	r2, #255	; 0xff
 801253a:	4618      	mov	r0, r3
 801253c:	f7fe f95e 	bl	80107fc <_Z12SetHeartbeatR7tN2kMsgmh>
  SendMsg(N2kMsg,iDev);
 8012540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012544:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8012548:	f107 010c 	add.w	r1, r7, #12
 801254c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012554:	6812      	ldr	r2, [r2, #0]
 8012556:	6818      	ldr	r0, [r3, #0]
 8012558:	f000 f996 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 801255c:	e000      	b.n	8012560 <_ZN9tNMEA200013SendHeartbeatEi+0xa8>
  if ( !IsValidDevice(iDev) ) return;
 801255e:	bf00      	nop
}
 8012560:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <_ZN9tNMEA200013SendHeartbeatEb>:

//*****************************************************************************
void tNMEA2000::SendHeartbeat(bool force) {
 8012568:	b580      	push	{r7, lr}
 801256a:	b0c4      	sub	sp, #272	; 0x110
 801256c:	af02      	add	r7, sp, #8
 801256e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012576:	6018      	str	r0, [r3, #0]
 8012578:	460a      	mov	r2, r1
 801257a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801257e:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8012582:	701a      	strb	r2, [r3, #0]
  if ( !IsActiveNode() ) return;
 8012584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801258c:	6818      	ldr	r0, [r3, #0]
 801258e:	f7fe f83b 	bl	8010608 <_ZN9tNMEA200012IsActiveNodeEv>
 8012592:	4603      	mov	r3, r0
 8012594:	f083 0301 	eor.w	r3, r3, #1
 8012598:	b2db      	uxtb	r3, r3
 801259a:	2b00      	cmp	r3, #0
 801259c:	f040 80da 	bne.w	8012754 <_ZN9tNMEA200013SendHeartbeatEb+0x1ec>

  for (int iDev=0; iDev<DeviceCount; iDev++) {
 80125a0:	2300      	movs	r3, #0
 80125a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80125a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	6a1b      	ldr	r3, [r3, #32]
 80125b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80125b6:	429a      	cmp	r2, r3
 80125b8:	f280 80cd 	bge.w	8012756 <_ZN9tNMEA200013SendHeartbeatEb+0x1ee>
    if ( !IsAddressClaimStarted(iDev) ) {
 80125bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125c4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80125c8:	6818      	ldr	r0, [r3, #0]
 80125ca:	f003 facb 	bl	8015b64 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 80125ce:	4603      	mov	r3, r0
 80125d0:	f083 0301 	eor.w	r3, r3, #1
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	f000 80b6 	beq.w	8012748 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
      if ( force || Devices[iDev].HeartbeatScheduler.IsTime() ) {
 80125dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d114      	bne.n	8012614 <_ZN9tNMEA200013SendHeartbeatEb+0xac>
 80125ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	69da      	ldr	r2, [r3, #28]
 80125f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125fa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80125fe:	fb01 f303 	mul.w	r3, r1, r3
 8012602:	4413      	add	r3, r2
 8012604:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012608:	4618      	mov	r0, r3
 801260a:	f7ef fa82 	bl	8001b12 <_ZN17tN2kSyncScheduler6IsTimeEv>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <_ZN9tNMEA200013SendHeartbeatEb+0xb0>
 8012614:	2301      	movs	r3, #1
 8012616:	e000      	b.n	801261a <_ZN9tNMEA200013SendHeartbeatEb+0xb2>
 8012618:	2300      	movs	r3, #0
 801261a:	2b00      	cmp	r3, #0
 801261c:	f000 8094 	beq.w	8012748 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
        Devices[iDev].HeartbeatScheduler.UpdateNextTime();
 8012620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	69da      	ldr	r2, [r3, #28]
 801262c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012630:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012634:	fb01 f303 	mul.w	r3, r1, r3
 8012638:	4413      	add	r3, r2
 801263a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801263e:	4618      	mov	r0, r3
 8012640:	f7ef fa7a 	bl	8001b38 <_ZN17tN2kSyncScheduler14UpdateNextTimeEv>
        tN2kMsg N2kMsg;
 8012644:	f107 0008 	add.w	r0, r7, #8
 8012648:	2300      	movs	r3, #0
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	2300      	movs	r3, #0
 801264e:	2206      	movs	r2, #6
 8012650:	210f      	movs	r1, #15
 8012652:	f7fc fb11 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
        SetHeartbeat(N2kMsg,Devices[iDev].HeartbeatScheduler.GetPeriod(),force?0xff:Devices[iDev].HeartbeatSequence);
 8012656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801265a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	69da      	ldr	r2, [r3, #28]
 8012662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012666:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801266a:	fb01 f303 	mul.w	r3, r1, r3
 801266e:	4413      	add	r3, r2
 8012670:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012674:	4618      	mov	r0, r3
 8012676:	f7fd fcdf 	bl	8010038 <_ZNK17tN2kSyncScheduler9GetPeriodEv>
 801267a:	4601      	mov	r1, r0
 801267c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012680:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d001      	beq.n	801268e <_ZN9tNMEA200013SendHeartbeatEb+0x126>
 801268a:	23ff      	movs	r3, #255	; 0xff
 801268c:	e00e      	b.n	80126ac <_ZN9tNMEA200013SendHeartbeatEb+0x144>
 801268e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	69da      	ldr	r2, [r3, #28]
 801269a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801269e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80126a2:	fb00 f303 	mul.w	r3, r0, r3
 80126a6:	4413      	add	r3, r2
 80126a8:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80126ac:	f107 0008 	add.w	r0, r7, #8
 80126b0:	461a      	mov	r2, r3
 80126b2:	f7fe f8a3 	bl	80107fc <_Z12SetHeartbeatR7tN2kMsgmh>
        SendMsg(N2kMsg,iDev);
 80126b6:	f107 0108 	add.w	r1, r7, #8
 80126ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80126c6:	6818      	ldr	r0, [r3, #0]
 80126c8:	f000 f8de 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
        if ( !force ) {
 80126cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126d0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	f083 0301 	eor.w	r3, r3, #1
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d033      	beq.n	8012748 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
          Devices[iDev].HeartbeatSequence++;
 80126e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	69da      	ldr	r2, [r3, #28]
 80126ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126f0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80126f4:	fb01 f303 	mul.w	r3, r1, r3
 80126f8:	4413      	add	r3, r2
 80126fa:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 80126fe:	3201      	adds	r2, #1
 8012700:	b2d2      	uxtb	r2, r2
 8012702:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
          if ( Devices[iDev].HeartbeatSequence>252 ) Devices[iDev].HeartbeatSequence=0;
 8012706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801270a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	69da      	ldr	r2, [r3, #28]
 8012712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012716:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801271a:	fb01 f303 	mul.w	r3, r1, r3
 801271e:	4413      	add	r3, r2
 8012720:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8012724:	2bfc      	cmp	r3, #252	; 0xfc
 8012726:	d90f      	bls.n	8012748 <_ZN9tNMEA200013SendHeartbeatEb+0x1e0>
 8012728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801272c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	69da      	ldr	r2, [r3, #28]
 8012734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012738:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801273c:	fb01 f303 	mul.w	r3, r1, r3
 8012740:	4413      	add	r3, r2
 8012742:	2200      	movs	r2, #0
 8012744:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  for (int iDev=0; iDev<DeviceCount; iDev++) {
 8012748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801274c:	3301      	adds	r3, #1
 801274e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012752:	e728      	b.n	80125a6 <_ZN9tNMEA200013SendHeartbeatEb+0x3e>
  if ( !IsActiveNode() ) return;
 8012754:	bf00      	nop
        }
      }
    }
  }
}
 8012756:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <_ZN9tNMEA200023GetNextFreeCANSendFrameEv>:
#endif

//*****************************************************************************
tNMEA2000::tCANSendFrame *tNMEA2000::GetNextFreeCANSendFrame() {
 801275e:	b480      	push	{r7}
 8012760:	b085      	sub	sp, #20
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
  if (CANSendFrameBuf==0) return 0;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x14>
 801276e:	2300      	movs	r3, #0
 8012770:	e01f      	b.n	80127b2 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>

  uint16_t temp = (CANSendFrameBufferWrite + 1) % MaxCANSendFrames;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012778:	3301      	adds	r3, #1
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8012780:	fb93 f1f2 	sdiv	r1, r3, r2
 8012784:	fb01 f202 	mul.w	r2, r1, r2
 8012788:	1a9b      	subs	r3, r3, r2
 801278a:	81fb      	strh	r3, [r7, #14]

  if (temp != CANSendFrameBufferRead) {
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8012792:	89fa      	ldrh	r2, [r7, #14]
 8012794:	429a      	cmp	r2, r3
 8012796:	d00b      	beq.n	80127b0 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x52>
    CANSendFrameBufferWrite = temp;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	89fa      	ldrh	r2, [r7, #14]
 801279c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    return &(CANSendFrameBuf[CANSendFrameBufferWrite]);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80127aa:	011b      	lsls	r3, r3, #4
 80127ac:	4413      	add	r3, r2
 80127ae:	e000      	b.n	80127b2 <_ZN9tNMEA200023GetNextFreeCANSendFrameEv+0x54>
  } else {
    return 0;
 80127b0:	2300      	movs	r3, #0
  }
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3714      	adds	r7, #20
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bc80      	pop	{r7}
 80127ba:	4770      	bx	lr

080127bc <_ZN9tNMEA200022SendPendingInformationEv>:

//*****************************************************************************
void tNMEA2000::SendPendingInformation() {
 80127bc:	b580      	push	{r7, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++ ) {
 80127c4:	2300      	movs	r3, #0
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6a1b      	ldr	r3, [r3, #32]
 80127cc:	68fa      	ldr	r2, [r7, #12]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	da56      	bge.n	8012880 <_ZN9tNMEA200022SendPendingInformationEv+0xc4>
    if (  Devices[i].HasPendingInformation ) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	69da      	ldr	r2, [r3, #28]
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80127dc:	fb01 f303 	mul.w	r3, r1, r3
 80127e0:	4413      	add	r3, r2
 80127e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d046      	beq.n	8012878 <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
      #if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
      SendPendingTPMessage(i);
 80127ea:	68f9      	ldr	r1, [r7, #12]
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f001 fe37 	bl	8014460 <_ZN9tNMEA200020SendPendingTPMessageEi>
      #endif
      if ( Devices[i].QueryPendingIsoAddressClaim() ) {
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	69da      	ldr	r2, [r3, #28]
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80127fc:	fb01 f303 	mul.w	r3, r1, r3
 8012800:	4413      	add	r3, r2
 8012802:	4618      	mov	r0, r3
 8012804:	f7fd fdc3 	bl	801038e <_ZN9tNMEA200015tInternalDevice27QueryPendingIsoAddressClaimEv>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d010      	beq.n	8012830 <_ZN9tNMEA200022SendPendingInformationEv+0x74>
        SendIsoAddressClaim(0xff,i);
 801280e:	2300      	movs	r3, #0
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	21ff      	movs	r1, #255	; 0xff
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f002 f915 	bl	8014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        Devices[i].ClearPendingIsoAddressClaim();
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	69da      	ldr	r2, [r3, #28]
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012824:	fb01 f303 	mul.w	r3, r1, r3
 8012828:	4413      	add	r3, r2
 801282a:	4618      	mov	r0, r3
 801282c:	f7fd fdbd 	bl	80103aa <_ZN9tNMEA200015tInternalDevice27ClearPendingIsoAddressClaimEv>
      }
      if ( Devices[i].QueryPendingProductInformation() ) SendProductInformation(i);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	69da      	ldr	r2, [r3, #28]
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801283a:	fb01 f303 	mul.w	r3, r1, r3
 801283e:	4413      	add	r3, r2
 8012840:	4618      	mov	r0, r3
 8012842:	f7fd fdea 	bl	801041a <_ZN9tNMEA200015tInternalDevice30QueryPendingProductInformationEv>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d003      	beq.n	8012854 <_ZN9tNMEA200022SendPendingInformationEv+0x98>
 801284c:	68f9      	ldr	r1, [r7, #12]
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f002 fcb0 	bl	80151b4 <_ZN9tNMEA200022SendProductInformationEi>
      if ( Devices[i].QueryPendingConfigurationInformation() ) SendConfigurationInformation(i);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	69da      	ldr	r2, [r3, #28]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801285e:	fb01 f303 	mul.w	r3, r1, r3
 8012862:	4413      	add	r3, r2
 8012864:	4618      	mov	r0, r3
 8012866:	f7fd fe12 	bl	801048e <_ZN9tNMEA200015tInternalDevice36QueryPendingConfigurationInformationEv>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d003      	beq.n	8012878 <_ZN9tNMEA200022SendPendingInformationEv+0xbc>
 8012870:	68f9      	ldr	r1, [r7, #12]
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f002 fe36 	bl	80154e4 <_ZN9tNMEA200028SendConfigurationInformationEi>
  for (int i=0; i<DeviceCount; i++ ) {
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	3301      	adds	r3, #1
 801287c:	60fb      	str	r3, [r7, #12]
 801287e:	e7a3      	b.n	80127c8 <_ZN9tNMEA200022SendPendingInformationEv+0xc>
    }
  }
}
 8012880:	bf00      	nop
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>:

//*****************************************************************************
// Sends message to N2k bus
//
bool tNMEA2000::SendMsg(const tN2kMsg &N2kMsg, int DeviceIndex) {
 8012888:	b580      	push	{r7, lr}
 801288a:	b090      	sub	sp, #64	; 0x40
 801288c:	af02      	add	r7, sp, #8
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
  if ( dbMode==dm_None ) {
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	791b      	ldrb	r3, [r3, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d117      	bne.n	80128cc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
    if ( OpenState!=os_Open ) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	7e1b      	ldrb	r3, [r3, #24]
 80128a0:	2b03      	cmp	r3, #3
 80128a2:	d013      	beq.n	80128cc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
      if ( !(Open() && OpenState==os_Open) ) return false;  // Can not do much
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f7ff fae1 	bl	8011e6c <_ZN9tNMEA20004OpenEv>
 80128aa:	4603      	mov	r3, r0
 80128ac:	f083 0301 	eor.w	r3, r3, #1
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d103      	bne.n	80128be <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x36>
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	7e1b      	ldrb	r3, [r3, #24]
 80128ba:	2b03      	cmp	r3, #3
 80128bc:	d001      	beq.n	80128c2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a>
 80128be:	2301      	movs	r3, #1
 80128c0:	e000      	b.n	80128c4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c>
 80128c2:	2300      	movs	r3, #0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x44>
 80128c8:	2300      	movs	r3, #0
 80128ca:	e1b0      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
    }
  }

  bool result=false;
 80128cc:	2300      	movs	r3, #0
 80128ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if ( DeviceIndex>=DeviceCount) return result;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6a1b      	ldr	r3, [r3, #32]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	429a      	cmp	r2, r3
 80128da:	db02      	blt.n	80128e2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x5a>
 80128dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128e0:	e1a5      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
  N2kMsg.CheckDestination();
 80128e2:	68b8      	ldr	r0, [r7, #8]
 80128e4:	f7fd fb0e 	bl	800ff04 <_ZNK7tN2kMsg16CheckDestinationEv>
  if (DeviceIndex>=0) { N2kMsg.ForceSource(Devices[DeviceIndex].N2kSource); } else { DeviceIndex=0; }
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	db0e      	blt.n	801290c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x84>
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	69da      	ldr	r2, [r3, #28]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80128f8:	fb01 f303 	mul.w	r3, r1, r3
 80128fc:	4413      	add	r3, r2
 80128fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012902:	4619      	mov	r1, r3
 8012904:	68b8      	ldr	r0, [r7, #8]
 8012906:	f7fd faef 	bl	800fee8 <_ZNK7tN2kMsg11ForceSourceEh>
 801290a:	e001      	b.n	8012910 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x88>
 801290c:	2300      	movs	r3, #0
 801290e:	607b      	str	r3, [r7, #4]

  if ( N2kMsg.Source>N2kMaxCanBusAddress && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false; // CAN bus address range is 0-251. Anyway allow ISO address claim mgs.
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	7b1b      	ldrb	r3, [r3, #12]
 8012914:	2bfb      	cmp	r3, #251	; 0xfb
 8012916:	d906      	bls.n	8012926 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9e>
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	689b      	ldr	r3, [r3, #8]
 801291c:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8012920:	d001      	beq.n	8012926 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x9e>
 8012922:	2300      	movs	r3, #0
 8012924:	e183      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  unsigned long canId=N2ktoCanID(N2kMsg.Priority,N2kMsg.PGN,N2kMsg.Source, N2kMsg.Destination);
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	7918      	ldrb	r0, [r3, #4]
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	6899      	ldr	r1, [r3, #8]
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	7b1b      	ldrb	r3, [r3, #12]
 8012932:	461a      	mov	r2, r3
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	7b5b      	ldrb	r3, [r3, #13]
 8012938:	f7ff fc2e 	bl	8012198 <_Z10N2ktoCanIDhmmh>
 801293c:	6238      	str	r0, [r7, #32]

  if ( canId==0 ) { // PGN validity - N2ktoCanID returns 0 for invalid PGN
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d101      	bne.n	8012948 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xc0>
//    if (ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("Invalid PGN ")); ForwardStream->println(N2kMsg.PGN); }
    return false;
 8012944:	2300      	movs	r3, #0
 8012946:	e172      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>
  }

  if (N2kMode==N2km_ListenOnly) return false; // Do not send anything on listen only mode
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	795b      	ldrb	r3, [r3, #5]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d101      	bne.n	8012954 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xcc>
 8012950:	2300      	movs	r3, #0
 8012952:	e16c      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  if (N2kMsg.PGN==0) return false;
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d101      	bne.n	8012960 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xd8>
 801295c:	2300      	movs	r3, #0
 801295e:	e166      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

  switch (dbMode) {
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	791b      	ldrb	r3, [r3, #4]
 8012964:	2b02      	cmp	r3, #2
 8012966:	f000 8155 	beq.w	8012c14 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x38c>
 801296a:	2b02      	cmp	r3, #2
 801296c:	f300 815d 	bgt.w	8012c2a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
 8012970:	2b00      	cmp	r3, #0
 8012972:	d003      	beq.n	801297c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0xf4>
 8012974:	2b01      	cmp	r3, #1
 8012976:	f000 8142 	beq.w	8012bfe <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x376>
 801297a:	e156      	b.n	8012c2a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
    case dm_None:
      N2kMsgDbgStart("Send PGN:"); N2kMsgDbgln(N2kMsg.PGN);
      N2kMsgDbgStart(" - can ID:"); N2kMsgDbgln(canId);
      if ( IsAddressClaimStarted(DeviceIndex) && N2kMsg.PGN!=N2kPGNIsoAddressClaim ) return false;
 801297c:	6879      	ldr	r1, [r7, #4]
 801297e:	68f8      	ldr	r0, [r7, #12]
 8012980:	f003 f8f0 	bl	8015b64 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 8012984:	4603      	mov	r3, r0
 8012986:	2b00      	cmp	r3, #0
 8012988:	d006      	beq.n	8012998 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8012992:	d001      	beq.n	8012998 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x110>
 8012994:	2301      	movs	r3, #1
 8012996:	e000      	b.n	801299a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x112>
 8012998:	2300      	movs	r3, #0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x11a>
 801299e:	2300      	movs	r3, #0
 80129a0:	e145      	b.n	8012c2e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a6>

      if (N2kMsg.DataLen<=8 && !IsFastPacket(N2kMsg) ) { // We can send single frame
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	2b08      	cmp	r3, #8
 80129a8:	dc0b      	bgt.n	80129c2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 80129aa:	68b9      	ldr	r1, [r7, #8]
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	f000 f9b9 	bl	8012d24 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>
 80129b2:	4603      	mov	r3, r0
 80129b4:	f083 0301 	eor.w	r3, r3, #1
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13a>
 80129be:	2301      	movs	r3, #1
 80129c0:	e000      	b.n	80129c4 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x13c>
 80129c2:	2300      	movs	r3, #0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d034      	beq.n	8012a32 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1aa>
          DbgPrintBuf(N2kMsg.DataLen, N2kMsg.Data,true);
          result=SendFrame(canId, N2kMsg.DataLen, N2kMsg.Data,false);
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	691b      	ldr	r3, [r3, #16]
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	3314      	adds	r3, #20
 80129d2:	2100      	movs	r1, #0
 80129d4:	9100      	str	r1, [sp, #0]
 80129d6:	6a39      	ldr	r1, [r7, #32]
 80129d8:	68f8      	ldr	r0, [r7, #12]
 80129da:	f7ff fc5c 	bl	8012296 <_ZN9tNMEA20009SendFrameEmhPKhb>
 80129de:	4603      	mov	r3, r0
 80129e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) { ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN); ForwardStream->println(F(" send failed")); }
 80129e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129e8:	f083 0301 	eor.w	r3, r3, #1
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f000 80fa 	beq.w	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f000 80f5 	beq.w	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	799b      	ldrb	r3, [r3, #6]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	f040 80f0 	bne.w	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	498a      	ldr	r1, [pc, #552]	; (8012c38 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fd f987 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	68d8      	ldr	r0, [r3, #12]
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	689b      	ldr	r3, [r3, #8]
 8012a1c:	220a      	movs	r2, #10
 8012a1e:	4619      	mov	r1, r3
 8012a20:	f7fd f99c 	bl	800fd5c <_ZN9N2kStream5printEih>
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	4984      	ldr	r1, [pc, #528]	; (8012c3c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fd f9d6 	bl	800fddc <_ZN9N2kStream7printlnEPKc>
 8012a30:	e0da      	b.n	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
          N2kPrintFreeMemory("SendMsg, single frame");
      } else { // Send it as fast packet in multiple frames
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
        if ( N2kMsg.IsTPMessage() ) {
 8012a32:	68b8      	ldr	r0, [r7, #8]
 8012a34:	f7fa fa2e 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d008      	beq.n	8012a50 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1c8>
          result=StartSendTPMessage(N2kMsg,DeviceIndex);
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	68b9      	ldr	r1, [r7, #8]
 8012a42:	68f8      	ldr	r0, [r7, #12]
 8012a44:	f001 fc67 	bl	8014316 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a4e:	e0cb      	b.n	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
        } else
#endif
        {
          unsigned char temp[8]; // {0,0,0,0,0,0,0,0};
          int cur=0;
 8012a50:	2300      	movs	r3, #0
 8012a52:	633b      	str	r3, [r7, #48]	; 0x30
          int frames=(N2kMsg.DataLen>6 ? (N2kMsg.DataLen-6-1)/7+1+1 : 1 );
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	2b06      	cmp	r3, #6
 8012a5a:	dd0b      	ble.n	8012a74 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ec>
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	691b      	ldr	r3, [r3, #16]
 8012a60:	3b07      	subs	r3, #7
 8012a62:	4a77      	ldr	r2, [pc, #476]	; (8012c40 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b8>)
 8012a64:	fb82 1203 	smull	r1, r2, r2, r3
 8012a68:	441a      	add	r2, r3
 8012a6a:	1092      	asrs	r2, r2, #2
 8012a6c:	17db      	asrs	r3, r3, #31
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	3302      	adds	r3, #2
 8012a72:	e000      	b.n	8012a76 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x1ee>
 8012a74:	2301      	movs	r3, #1
 8012a76:	61fb      	str	r3, [r7, #28]
          int Order=GetSequenceCounter(N2kMsg.PGN,DeviceIndex)<<5;
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	4619      	mov	r1, r3
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f7fe fca9 	bl	80113d8 <_ZN9tNMEA200018GetSequenceCounterEmi>
 8012a86:	4603      	mov	r3, r0
 8012a88:	015b      	lsls	r3, r3, #5
 8012a8a:	61bb      	str	r3, [r7, #24]
          result=true;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          for (int i = 0; i<frames && result; i++) {
 8012a92:	2300      	movs	r3, #0
 8012a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a98:	69fb      	ldr	r3, [r7, #28]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	f280 80a4 	bge.w	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
 8012aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012aa4:	f083 0301 	eor.w	r3, r3, #1
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f040 809c 	bne.w	8012be8 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x360>
              temp[0] = i|Order; //frame counter
 8012ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab2:	b25a      	sxtb	r2, r3
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	b25b      	sxtb	r3, r3
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	b25b      	sxtb	r3, r3
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	743b      	strb	r3, [r7, #16]
              if (i==0) {
 8012ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d11a      	bne.n	8012afc <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x274>
                  temp[1] = N2kMsg.DataLen; //total bytes in fast packet
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	747b      	strb	r3, [r7, #17]
                  //send the first 6 bytes
                  for (int j = 2; j<8; j++) {
 8012ace:	2302      	movs	r3, #2
 8012ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad4:	2b07      	cmp	r3, #7
 8012ad6:	dc3a      	bgt.n	8012b4e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c6>
                       temp[j]=N2kMsg.Data[cur];
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012adc:	4413      	add	r3, r2
 8012ade:	3314      	adds	r3, #20
 8012ae0:	7819      	ldrb	r1, [r3, #0]
 8012ae2:	f107 0210 	add.w	r2, r7, #16
 8012ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae8:	4413      	add	r3, r2
 8012aea:	460a      	mov	r2, r1
 8012aec:	701a      	strb	r2, [r3, #0]
                       cur++;
 8012aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af0:	3301      	adds	r3, #1
 8012af2:	633b      	str	r3, [r7, #48]	; 0x30
                  for (int j = 2; j<8; j++) {
 8012af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af6:	3301      	adds	r3, #1
 8012af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012afa:	e7ea      	b.n	8012ad2 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x24a>
                   }
                  N2kPrintFreeMemory("SendMsg, fastpacket");
              } else {
                   int j=1;
 8012afc:	2301      	movs	r3, #1
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
                   //send the next 7 data bytes
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	2b07      	cmp	r3, #7
 8012b04:	dc16      	bgt.n	8012b34 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	691b      	ldr	r3, [r3, #16]
 8012b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	da11      	bge.n	8012b34 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
                       temp[j]=N2kMsg.Data[cur];
 8012b10:	68ba      	ldr	r2, [r7, #8]
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	4413      	add	r3, r2
 8012b16:	3314      	adds	r3, #20
 8012b18:	7819      	ldrb	r1, [r3, #0]
 8012b1a:	f107 0210 	add.w	r2, r7, #16
 8012b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b20:	4413      	add	r3, r2
 8012b22:	460a      	mov	r2, r1
 8012b24:	701a      	strb	r2, [r3, #0]
                       cur++;
 8012b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b28:	3301      	adds	r3, #1
 8012b2a:	633b      	str	r3, [r7, #48]	; 0x30
                   for (; j<8 && cur<N2kMsg.DataLen; j++) {
 8012b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2e:	3301      	adds	r3, #1
 8012b30:	627b      	str	r3, [r7, #36]	; 0x24
 8012b32:	e7e5      	b.n	8012b00 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x278>
                   }
                   for (; j<8; j++) {
 8012b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b36:	2b07      	cmp	r3, #7
 8012b38:	dc09      	bgt.n	8012b4e <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2c6>
                       temp[j]=0xff;
 8012b3a:	f107 0210 	add.w	r2, r7, #16
 8012b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b40:	4413      	add	r3, r2
 8012b42:	22ff      	movs	r2, #255	; 0xff
 8012b44:	701a      	strb	r2, [r3, #0]
                   for (; j<8; j++) {
 8012b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b48:	3301      	adds	r3, #1
 8012b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8012b4c:	e7f2      	b.n	8012b34 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x2ac>
                   }
              }

              DbgPrintBuf(8,temp,true);
              result=SendFrame(canId, 8, temp, true);
 8012b4e:	f107 0310 	add.w	r3, r7, #16
 8012b52:	2201      	movs	r2, #1
 8012b54:	9200      	str	r2, [sp, #0]
 8012b56:	2208      	movs	r2, #8
 8012b58:	6a39      	ldr	r1, [r7, #32]
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f7ff fb9b 	bl	8012296 <_ZN9tNMEA20009SendFrameEmhPKhb>
 8012b60:	4603      	mov	r3, r0
 8012b62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
              if (!result && ForwardStream!=0 && ForwardType==tNMEA2000::fwdt_Text) {
 8012b66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b6a:	f083 0301 	eor.w	r3, r3, #1
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d035      	beq.n	8012be0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d031      	beq.n	8012be0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	799b      	ldrb	r3, [r3, #6]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d12d      	bne.n	8012be0 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x358>
                ForwardStream->print(F("PGN ")); ForwardStream->print(N2kMsg.PGN);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	492b      	ldr	r1, [pc, #172]	; (8012c38 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b0>)
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fd f8c9 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	68d8      	ldr	r0, [r3, #12]
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	689b      	ldr	r3, [r3, #8]
 8012b98:	220a      	movs	r2, #10
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	f7fd f8de 	bl	800fd5c <_ZN9N2kStream5printEih>
                ForwardStream->print(F(", frame:")); ForwardStream->print(i); ForwardStream->print(F("/")); ForwardStream->print(frames);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	4927      	ldr	r1, [pc, #156]	; (8012c44 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3bc>)
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fd f8bb 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	220a      	movs	r2, #10
 8012bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fd f8d1 	bl	800fd5c <_ZN9N2kStream5printEih>
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	4922      	ldr	r1, [pc, #136]	; (8012c48 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3c0>)
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fd f8ae 	bl	800fd22 <_ZN9N2kStream5printEPKc>
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	220a      	movs	r2, #10
 8012bcc:	69f9      	ldr	r1, [r7, #28]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7fd f8c4 	bl	800fd5c <_ZN9N2kStream5printEih>
                ForwardStream->println(F(" send failed"));
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	4918      	ldr	r1, [pc, #96]	; (8012c3c <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3b4>)
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fd f8fe 	bl	800fddc <_ZN9N2kStream7printlnEPKc>
          for (int i = 0; i<frames && result; i++) {
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	3301      	adds	r3, #1
 8012be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012be6:	e756      	b.n	8012a96 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x20e>
              }
          }
        }
      };
      if ( ForwardOwnMessages() ) ForwardMessage(N2kMsg);
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f7fd fce9 	bl	80105c0 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d019      	beq.n	8012c28 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
 8012bf4:	68b9      	ldr	r1, [r7, #8]
 8012bf6:	68f8      	ldr	r0, [r7, #12]
 8012bf8:	f001 febd 	bl	8014976 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      break;
 8012bfc:	e014      	b.n	8012c28 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a0>
    case dm_ClearText:
      result=true;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.Print(ForwardStream);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	68b8      	ldr	r0, [r7, #8]
 8012c0e:	f7fc fd17 	bl	800f640 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 8012c12:	e00a      	b.n	8012c2a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
    case dm_Actisense:
      result=true;
 8012c14:	2301      	movs	r3, #1
 8012c16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      N2kMsg.SendInActisenseFormat(ForwardStream);
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	4619      	mov	r1, r3
 8012c20:	68b8      	ldr	r0, [r7, #8]
 8012c22:	f7fc fdc1 	bl	800f7a8 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 8012c26:	e000      	b.n	8012c2a <_ZN9tNMEA20007SendMsgERK7tN2kMsgi+0x3a2>
      break;
 8012c28:	bf00      	nop
  }

  return result;
 8012c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3738      	adds	r7, #56	; 0x38
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	08019884 	.word	0x08019884
 8012c3c:	0801988c 	.word	0x0801988c
 8012c40:	92492493 	.word	0x92492493
 8012c44:	0801989c 	.word	0x0801989c
 8012c48:	080198a8 	.word	0x080198a8

08012c4c <_ZN9tNMEA200015IsFastPacketPGNEm>:
void tNMEA2000::SetDebugMode(tDebugMode _dbMode) {
  dbMode=_dbMode;
}

//*****************************************************************************
bool tNMEA2000::IsFastPacketPGN(unsigned long PGN) {
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 8012c56:	6838      	ldr	r0, [r7, #0]
 8012c58:	f7fd fe82 	bl	8010960 <_Z25IsFastPacketSystemMessagem>
 8012c5c:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d115      	bne.n	8012c8e <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 8012c62:	6838      	ldr	r0, [r7, #0]
 8012c64:	f7fd ff60 	bl	8010b28 <_Z28IsMandatoryFastPacketMessagem>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10f      	bne.n	8012c8e <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d105      	bne.n	8012c82 <_ZN9tNMEA200015IsFastPacketPGNEm+0x36>
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 8012c76:	6838      	ldr	r0, [r7, #0]
 8012c78:	f7fd ff76 	bl	8010b68 <_Z26IsDefaultFastPacketMessagem>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d105      	bne.n	8012c8e <_ZN9tNMEA200015IsFastPacketPGNEm+0x42>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 8012c82:	6838      	ldr	r0, [r7, #0]
 8012c84:	f7fe f8cc 	bl	8010e20 <_Z30IsProprietaryFastPacketMessagem>
 8012c88:	4603      	mov	r3, r0
       ( FastPacketMessages[0]==0 && IsDefaultFastPacketMessage(PGN) ) ||
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d001      	beq.n	8012c92 <_ZN9tNMEA200015IsFastPacketPGNEm+0x46>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	e000      	b.n	8012c94 <_ZN9tNMEA200015IsFastPacketPGNEm+0x48>
 8012c92:	2300      	movs	r3, #0
  if ( IsFastPacketSystemMessage(PGN) || IsMandatoryFastPacketMessage(PGN) ||
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d001      	beq.n	8012c9c <_ZN9tNMEA200015IsFastPacketPGNEm+0x50>
       IsProprietaryFastPacketMessage(PGN) ) return true;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e03f      	b.n	8012d1c <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>

  int i;

    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	72fb      	strb	r3, [r7, #11]
 8012ca0:	7afb      	ldrb	r3, [r7, #11]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d839      	bhi.n	8012d1a <_ZN9tNMEA200015IsFastPacketPGNEm+0xce>
      if (FastPacketMessages[igroup]!=0) {
 8012ca6:	7afb      	ldrb	r3, [r7, #11]
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	330e      	adds	r3, #14
 8012cac:	009b      	lsls	r3, r3, #2
 8012cae:	4413      	add	r3, r2
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d02d      	beq.n	8012d12 <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	60fb      	str	r3, [r7, #12]
 8012cba:	7afb      	ldrb	r3, [r7, #11]
 8012cbc:	687a      	ldr	r2, [r7, #4]
 8012cbe:	330e      	adds	r3, #14
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	685a      	ldr	r2, [r3, #4]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	009b      	lsls	r3, r3, #2
 8012cca:	4413      	add	r3, r2
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	683a      	ldr	r2, [r7, #0]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d00f      	beq.n	8012cf4 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 8012cd4:	7afb      	ldrb	r3, [r7, #11]
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	330e      	adds	r3, #14
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	685a      	ldr	r2, [r3, #4]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	4413      	add	r3, r2
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d003      	beq.n	8012cf4 <_ZN9tNMEA200015IsFastPacketPGNEm+0xa8>
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	60fb      	str	r3, [r7, #12]
 8012cf2:	e7e2      	b.n	8012cba <_ZN9tNMEA200015IsFastPacketPGNEm+0x6e>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 8012cf4:	7afb      	ldrb	r3, [r7, #11]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	330e      	adds	r3, #14
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	4413      	add	r3, r2
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4413      	add	r3, r2
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	683a      	ldr	r2, [r7, #0]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d101      	bne.n	8012d12 <_ZN9tNMEA200015IsFastPacketPGNEm+0xc6>
         return true;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e004      	b.n	8012d1c <_ZN9tNMEA200015IsFastPacketPGNEm+0xd0>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 8012d12:	7afb      	ldrb	r3, [r7, #11]
 8012d14:	3301      	adds	r3, #1
 8012d16:	72fb      	strb	r3, [r7, #11]
 8012d18:	e7c2      	b.n	8012ca0 <_ZN9tNMEA200015IsFastPacketPGNEm+0x54>
        }
      }
    }

    return false;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg>:

//*****************************************************************************
bool tNMEA2000::IsFastPacket(const tN2kMsg &N2kMsg) {
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	6039      	str	r1, [r7, #0]
  if (N2kMsg.Priority>=0x80) return false; // Special handling for force to send message as single frame.
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	791b      	ldrb	r3, [r3, #4]
 8012d32:	b25b      	sxtb	r3, r3
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	da01      	bge.n	8012d3c <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x18>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e007      	b.n	8012d4c <_ZN9tNMEA200012IsFastPacketERK7tN2kMsg+0x28>

  return IsFastPacketPGN(N2kMsg.PGN);
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	689b      	ldr	r3, [r3, #8]
 8012d40:	4619      	mov	r1, r3
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f7ff ff82 	bl	8012c4c <_ZN9tNMEA200015IsFastPacketPGNEm>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	bf00      	nop
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>:

//*****************************************************************************
bool tNMEA2000::CheckKnownMessage(unsigned long PGN, bool &SystemMessage, bool &FastPacket) {
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	607a      	str	r2, [r7, #4]
 8012d60:	603b      	str	r3, [r7, #0]
  int i;
//    return true;
    FastPacket=false;
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	2200      	movs	r2, #0
 8012d66:	701a      	strb	r2, [r3, #0]
    SystemMessage=false;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	701a      	strb	r2, [r3, #0]
    if ( PGN==0 ) { return false; }  // Unknown
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d101      	bne.n	8012d78 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x24>
 8012d74:	2300      	movs	r3, #0
 8012d76:	e0ce      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check other messages
    if ( SingleFrameMessages[0]==0 && IsDefaultSingleFrameMessage(PGN) ) return true;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d107      	bne.n	8012d90 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 8012d80:	68b8      	ldr	r0, [r7, #8]
 8012d82:	f7fd fe05 	bl	8010990 <_Z27IsDefaultSingleFrameMessagem>
 8012d86:	4603      	mov	r3, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d001      	beq.n	8012d90 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3c>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e000      	b.n	8012d92 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x3e>
 8012d90:	2300      	movs	r3, #0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d001      	beq.n	8012d9a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x46>
 8012d96:	2301      	movs	r3, #1
 8012d98:	e0bd      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( (FastPacket=IsMandatoryFastPacketMessage(PGN)) ) return true;
 8012d9a:	68b8      	ldr	r0, [r7, #8]
 8012d9c:	f7fd fec4 	bl	8010b28 <_Z28IsMandatoryFastPacketMessagem>
 8012da0:	4603      	mov	r3, r0
 8012da2:	461a      	mov	r2, r3
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d001      	beq.n	8012db4 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x60>
 8012db0:	2301      	movs	r3, #1
 8012db2:	e0b0      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    if ( FastPacketMessages[0]==0 && (FastPacket=IsDefaultFastPacketMessage(PGN))==true ) return true;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d10c      	bne.n	8012dd6 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 8012dbc:	68b8      	ldr	r0, [r7, #8]
 8012dbe:	f7fd fed3 	bl	8010b68 <_Z26IsDefaultFastPacketMessagem>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	701a      	strb	r2, [r3, #0]
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d101      	bne.n	8012dd6 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x82>
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e000      	b.n	8012dd8 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x84>
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d001      	beq.n	8012de0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x8c>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e09a      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>

    // Check system messages
    if ( IsSingleFrameSystemMessage(PGN) || (FastPacket=IsFastPacketSystemMessage(PGN))==true ) {
 8012de0:	68b8      	ldr	r0, [r7, #8]
 8012de2:	f7fd fd91 	bl	8010908 <_Z26IsSingleFrameSystemMessagem>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10a      	bne.n	8012e02 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xae>
 8012dec:	68b8      	ldr	r0, [r7, #8]
 8012dee:	f7fd fdb7 	bl	8010960 <_Z25IsFastPacketSystemMessagem>
 8012df2:	4603      	mov	r3, r0
 8012df4:	461a      	mov	r2, r3
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	701a      	strb	r2, [r3, #0]
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d101      	bne.n	8012e06 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb2>
 8012e02:	2301      	movs	r3, #1
 8012e04:	e000      	b.n	8012e08 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xb4>
 8012e06:	2300      	movs	r3, #0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d004      	beq.n	8012e16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc2>
      SystemMessage=true;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2201      	movs	r2, #1
 8012e10:	701a      	strb	r2, [r3, #0]
      return true;
 8012e12:	2301      	movs	r3, #1
 8012e14:	e07f      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    }

    // Check user defined messages
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 8012e16:	2300      	movs	r3, #0
 8012e18:	74fb      	strb	r3, [r7, #19]
 8012e1a:	7cfb      	ldrb	r3, [r7, #19]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d872      	bhi.n	8012f06 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1b2>
      if (SingleFrameMessages[igroup]!=0) {
 8012e20:	7cfb      	ldrb	r3, [r7, #19]
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	330c      	adds	r3, #12
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4413      	add	r3, r2
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d02d      	beq.n	8012e8c <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
        for (i=0; pgm_read_dword(&SingleFrameMessages[igroup][i])!=PGN && pgm_read_dword(&SingleFrameMessages[igroup][i])!=0; i++);
 8012e30:	2300      	movs	r3, #0
 8012e32:	617b      	str	r3, [r7, #20]
 8012e34:	7cfb      	ldrb	r3, [r7, #19]
 8012e36:	68fa      	ldr	r2, [r7, #12]
 8012e38:	330c      	adds	r3, #12
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	4413      	add	r3, r2
 8012e3e:	685a      	ldr	r2, [r3, #4]
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	4413      	add	r3, r2
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	68ba      	ldr	r2, [r7, #8]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d00f      	beq.n	8012e6e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 8012e4e:	7cfb      	ldrb	r3, [r7, #19]
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	330c      	adds	r3, #12
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	4413      	add	r3, r2
 8012e58:	685a      	ldr	r2, [r3, #4]
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	4413      	add	r3, r2
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d003      	beq.n	8012e6e <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x11a>
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	3301      	adds	r3, #1
 8012e6a:	617b      	str	r3, [r7, #20]
 8012e6c:	e7e2      	b.n	8012e34 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xe0>
        if (pgm_read_dword(&SingleFrameMessages[igroup][i])==PGN) return true;
 8012e6e:	7cfb      	ldrb	r3, [r7, #19]
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	330c      	adds	r3, #12
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	4413      	add	r3, r2
 8012e78:	685a      	ldr	r2, [r3, #4]
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	4413      	add	r3, r2
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d101      	bne.n	8012e8c <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x138>
 8012e88:	2301      	movs	r3, #1
 8012e8a:	e044      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
      }

      if (FastPacketMessages[igroup]!=0) {
 8012e8c:	7cfb      	ldrb	r3, [r7, #19]
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	330e      	adds	r3, #14
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	4413      	add	r3, r2
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d030      	beq.n	8012efe <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
        for (i=0; pgm_read_dword(&FastPacketMessages[igroup][i])!=PGN && pgm_read_dword(&FastPacketMessages[igroup][i])!=0; i++);
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	617b      	str	r3, [r7, #20]
 8012ea0:	7cfb      	ldrb	r3, [r7, #19]
 8012ea2:	68fa      	ldr	r2, [r7, #12]
 8012ea4:	330e      	adds	r3, #14
 8012ea6:	009b      	lsls	r3, r3, #2
 8012ea8:	4413      	add	r3, r2
 8012eaa:	685a      	ldr	r2, [r3, #4]
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	009b      	lsls	r3, r3, #2
 8012eb0:	4413      	add	r3, r2
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	68ba      	ldr	r2, [r7, #8]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d00f      	beq.n	8012eda <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 8012eba:	7cfb      	ldrb	r3, [r7, #19]
 8012ebc:	68fa      	ldr	r2, [r7, #12]
 8012ebe:	330e      	adds	r3, #14
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	4413      	add	r3, r2
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	4413      	add	r3, r2
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d003      	beq.n	8012eda <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x186>
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	617b      	str	r3, [r7, #20]
 8012ed8:	e7e2      	b.n	8012ea0 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x14c>
        if (pgm_read_dword(&FastPacketMessages[igroup][i])==PGN) {
 8012eda:	7cfb      	ldrb	r3, [r7, #19]
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	330e      	adds	r3, #14
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	4413      	add	r3, r2
 8012ee4:	685a      	ldr	r2, [r3, #4]
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	68ba      	ldr	r2, [r7, #8]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d104      	bne.n	8012efe <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1aa>
         FastPacket=true;
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	701a      	strb	r2, [r3, #0]
         return true;
 8012efa:	2301      	movs	r3, #1
 8012efc:	e00b      	b.n	8012f16 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0x1c2>
    for (unsigned char igroup=0; (igroup<N2kMessageGroups); igroup++)  {
 8012efe:	7cfb      	ldrb	r3, [r7, #19]
 8012f00:	3301      	adds	r3, #1
 8012f02:	74fb      	strb	r3, [r7, #19]
 8012f04:	e789      	b.n	8012e1a <_ZN9tNMEA200017CheckKnownMessageEmRbS0_+0xc6>
        }
      }
    }

    FastPacket=IsProprietaryFastPacketMessage(PGN);
 8012f06:	68b8      	ldr	r0, [r7, #8]
 8012f08:	f7fd ff8a 	bl	8010e20 <_Z30IsProprietaryFastPacketMessagem>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	461a      	mov	r2, r3
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	701a      	strb	r2, [r3, #0]
    
    return false;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3718      	adds	r7, #24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>:

//*****************************************************************************
void CopyBufToCANMsg(tN2kCANMsg &CANMsg, unsigned char start, unsigned char len, unsigned char *buf) {
 8012f1e:	b480      	push	{r7}
 8012f20:	b087      	sub	sp, #28
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	60f8      	str	r0, [r7, #12]
 8012f26:	607b      	str	r3, [r7, #4]
 8012f28:	460b      	mov	r3, r1
 8012f2a:	72fb      	strb	r3, [r7, #11]
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	72bb      	strb	r3, [r7, #10]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 8012f30:	7afb      	ldrb	r3, [r7, #11]
 8012f32:	617b      	str	r3, [r7, #20]
 8012f34:	7abb      	ldrb	r3, [r7, #10]
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	bfb4      	ite	lt
 8012f3c:	2301      	movlt	r3, #1
 8012f3e:	2300      	movge	r3, #0
 8012f40:	b2da      	uxtb	r2, r3
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8012f48:	2bde      	cmp	r3, #222	; 0xde
 8012f4a:	bf94      	ite	ls
 8012f4c:	2301      	movls	r3, #1
 8012f4e:	2300      	movhi	r3, #0
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	4013      	ands	r3, r2
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d016      	beq.n	8012f88 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x6a>
          CANMsg.N2kMsg.Data[CANMsg.CopiedLen]=buf[j];
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	4413      	add	r3, r2
 8012f60:	68fa      	ldr	r2, [r7, #12]
 8012f62:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
 8012f66:	4611      	mov	r1, r2
 8012f68:	781a      	ldrb	r2, [r3, #0]
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	440b      	add	r3, r1
 8012f6e:	751a      	strb	r2, [r3, #20]
        for (int j=start; (j<len) & (CANMsg.CopiedLen<CANMsg.N2kMsg.MaxDataLen); j++, CANMsg.CopiedLen++) {
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	3301      	adds	r3, #1
 8012f74:	617b      	str	r3, [r7, #20]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8012f86:	e7d5      	b.n	8012f34 <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh+0x16>
        }
}
 8012f88:	bf00      	nop
 8012f8a:	371c      	adds	r7, #28
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bc80      	pop	{r7}
 8012f90:	4770      	bx	lr

08012f92 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, bool TPMsg, uint8_t &MsgIndex) {
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b088      	sub	sp, #32
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	60b9      	str	r1, [r7, #8]
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	71fb      	strb	r3, [r7, #7]
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	71bb      	strb	r3, [r7, #6]
void tNMEA2000::FindFreeCANMsgIndex(unsigned long PGN, unsigned char Source, unsigned char Destination, uint8_t &MsgIndex) {
#endif
  unsigned long OldestMsgTime,CurTime;
  int OldestIndex;

  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 8012fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012faa:	2200      	movs	r2, #0
 8012fac:	701a      	strb	r2, [r3, #0]
 8012fae:	f7fc ff45 	bl	800fe3c <_Z9N2kMillisv>
 8012fb2:	61f8      	str	r0, [r7, #28]
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	617b      	str	r3, [r7, #20]
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fbe:	61bb      	str	r3, [r7, #24]
       MsgIndex<MaxN2kCANMsgs &&
 8012fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc2:	781a      	ldrb	r2, [r3, #0]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d24f      	bcs.n	801306e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	460b      	mov	r3, r1
 8012fda:	019b      	lsls	r3, r3, #6
 8012fdc:	440b      	add	r3, r1
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8012fe6:	f083 0301 	eor.w	r3, r3, #1
 8012fea:	b2db      	uxtb	r3, r3
       MsgIndex<MaxN2kCANMsgs &&
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d03e      	beq.n	801306e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
         ( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	019b      	lsls	r3, r3, #6
 8012ffe:	440b      	add	r3, r1
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	689b      	ldr	r3, [r3, #8]
       !( N2kCANMsgBuf[MsgIndex].FreeMsg ||
 8013006:	68ba      	ldr	r2, [r7, #8]
 8013008:	429a      	cmp	r2, r3
 801300a:	d12e      	bne.n	801306a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	4619      	mov	r1, r3
 8013016:	460b      	mov	r3, r1
 8013018:	019b      	lsls	r3, r3, #6
 801301a:	440b      	add	r3, r1
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	4413      	add	r3, r2
 8013020:	7b1b      	ldrb	r3, [r3, #12]
 8013022:	79fa      	ldrb	r2, [r7, #7]
 8013024:	429a      	cmp	r2, r3
 8013026:	d120      	bne.n	801306a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
           && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	4619      	mov	r1, r3
 8013032:	460b      	mov	r3, r1
 8013034:	019b      	lsls	r3, r3, #6
 8013036:	440b      	add	r3, r1
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	4413      	add	r3, r2
 801303c:	7b5b      	ldrb	r3, [r3, #13]
 801303e:	79ba      	ldrb	r2, [r7, #6]
 8013040:	429a      	cmp	r2, r3
 8013042:	d112      	bne.n	801306a <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xd8>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
           && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()==TPMsg
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	4619      	mov	r1, r3
 801304e:	460b      	mov	r3, r1
 8013050:	019b      	lsls	r3, r3, #6
 8013052:	440b      	add	r3, r1
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	4413      	add	r3, r2
 8013058:	4618      	mov	r0, r3
 801305a:	f7f9 ff1b 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
 8013062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013066:	4293      	cmp	r3, r2
 8013068:	d001      	beq.n	801306e <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xdc>
       MsgIndex<MaxN2kCANMsgs &&
 801306a:	2301      	movs	r3, #1
 801306c:	e000      	b.n	8013070 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0xde>
 801306e:	2300      	movs	r3, #0
 8013070:	2b00      	cmp	r3, #0
 8013072:	d029      	beq.n	80130c8 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x136>
#endif
         )
        );
       MsgIndex++) { // Find free message place
    if ( N2kIsTimeBefore(N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime,OldestMsgTime) ) {
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307a:	781b      	ldrb	r3, [r3, #0]
 801307c:	4619      	mov	r1, r3
 801307e:	460b      	mov	r3, r1
 8013080:	019b      	lsls	r3, r3, #6
 8013082:	440b      	add	r3, r1
 8013084:	009b      	lsls	r3, r3, #2
 8013086:	4413      	add	r3, r2
 8013088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801308c:	69f9      	ldr	r1, [r7, #28]
 801308e:	4618      	mov	r0, r3
 8013090:	f7fc ff99 	bl	800ffc6 <_Z15N2kIsTimeBeforemm>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00f      	beq.n	80130ba <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x128>
      OldestIndex=MsgIndex;
 801309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	61bb      	str	r3, [r7, #24]
      OldestMsgTime=N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	4619      	mov	r1, r3
 80130aa:	460b      	mov	r3, r1
 80130ac:	019b      	lsls	r3, r3, #6
 80130ae:	440b      	add	r3, r1
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	4413      	add	r3, r2
 80130b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80130b8:	61fb      	str	r3, [r7, #28]
       MsgIndex++) { // Find free message place
 80130ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130bc:	781b      	ldrb	r3, [r3, #0]
  for (MsgIndex=0, CurTime=OldestMsgTime=N2kMillis(), OldestIndex=MaxN2kCANMsgs;
 80130be:	3301      	adds	r3, #1
 80130c0:	b2da      	uxtb	r2, r3
 80130c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c4:	701a      	strb	r2, [r3, #0]
 80130c6:	e77b      	b.n	8012fc0 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x2e>
    }
  }
  if ( MsgIndex==MaxN2kCANMsgs && N2kHasElapsed(OldestMsgTime,Max_N2kMsgBuf_Time,CurTime) ) {
 80130c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ca:	781a      	ldrb	r2, [r3, #0]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d109      	bne.n	80130ea <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 80130d6:	697a      	ldr	r2, [r7, #20]
 80130d8:	2164      	movs	r1, #100	; 0x64
 80130da:	69f8      	ldr	r0, [r7, #28]
 80130dc:	f7f9 f96a 	bl	800c3b4 <_Z13N2kHasElapsedmmm>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d001      	beq.n	80130ea <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x158>
 80130e6:	2301      	movs	r3, #1
 80130e8:	e000      	b.n	80130ec <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x15a>
 80130ea:	2300      	movs	r3, #0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d010      	beq.n	8013112 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh+0x180>
    MsgIndex=OldestIndex; // Use the old one, which has timed out
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	b2da      	uxtb	r2, r3
 80130f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f6:	701a      	strb	r2, [r3, #0]
    N2kCANMsgBuf[MsgIndex].FreeMessage();
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80130fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	4619      	mov	r1, r3
 8013102:	460b      	mov	r3, r1
 8013104:	019b      	lsls	r3, r3, #6
 8013106:	440b      	add	r3, r1
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	4413      	add	r3, r2
 801310c:	4618      	mov	r0, r3
 801310e:	f7fc ff37 	bl	800ff80 <_ZN10tN2kCANMsg11FreeMessageEv>
  }

}
 8013112:	bf00      	nop
 8013114:	3720      	adds	r7, #32
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
	...

0801311c <_ZN9tNMEA200012SendTPCM_BAMEi>:

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)

//*****************************************************************************
bool tNMEA2000::SendTPCM_BAM(int iDev) {
 801311c:	b580      	push	{r7, lr}
 801311e:	b0c4      	sub	sp, #272	; 0x110
 8013120:	af02      	add	r7, sp, #8
 8013122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801312a:	6018      	str	r0, [r3, #0]
 801312c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013134:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 8013136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801313a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801313e:	6818      	ldr	r0, [r3, #0]
 8013140:	f7fd fa62 	bl	8010608 <_ZN9tNMEA200012IsActiveNodeEv>
 8013144:	4603      	mov	r3, r0
 8013146:	f083 0301 	eor.w	r3, r3, #1
 801314a:	b2db      	uxtb	r3, r3
 801314c:	2b00      	cmp	r3, #0
 801314e:	d001      	beq.n	8013154 <_ZN9tNMEA200012SendTPCM_BAMEi+0x38>
 8013150:	2300      	movs	r3, #0
 8013152:	e0a6      	b.n	80132a2 <_ZN9tNMEA200012SendTPCM_BAMEi+0x186>

  tN2kMsg N2kMsg;
 8013154:	f107 0008 	add.w	r0, r7, #8
 8013158:	2300      	movs	r3, #0
 801315a:	9300      	str	r3, [sp, #0]
 801315c:	2300      	movs	r3, #0
 801315e:	2206      	movs	r2, #6
 8013160:	210f      	movs	r1, #15
 8013162:	f7fb fd89 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  N2kMsg.Source=Devices[iDev].N2kSource;
 8013166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801316a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	69da      	ldr	r2, [r3, #28]
 8013172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013180:	fb01 f303 	mul.w	r3, r1, r3
 8013184:	4413      	add	r3, r2
 8013186:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801318a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801318e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013192:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=0xff;
 8013194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801319c:	22ff      	movs	r2, #255	; 0xff
 801319e:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 80131a0:	f107 0308 	add.w	r3, r7, #8
 80131a4:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7fb fd97 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 80131ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80131b6:	2206      	movs	r2, #6
 80131b8:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_BAM);
 80131ba:	f107 0308 	add.w	r3, r7, #8
 80131be:	2120      	movs	r1, #32
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fb fecb 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 80131c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	69da      	ldr	r2, [r3, #28]
 80131d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80131e0:	fb01 f303 	mul.w	r3, r1, r3
 80131e4:	4413      	add	r3, r2
 80131e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 80131ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	f107 0308 	add.w	r3, r7, #8
 80131f6:	4611      	mov	r1, r2
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fb fe64 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 80131fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013202:	4a2a      	ldr	r2, [pc, #168]	; (80132ac <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 8013204:	fb82 1203 	smull	r1, r2, r2, r3
 8013208:	441a      	add	r2, r3
 801320a:	1092      	asrs	r2, r2, #2
 801320c:	17db      	asrs	r3, r3, #31
 801320e:	1ad3      	subs	r3, r2, r3
 8013210:	b2d8      	uxtb	r0, r3
 8013212:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8013216:	4b25      	ldr	r3, [pc, #148]	; (80132ac <_ZN9tNMEA200012SendTPCM_BAMEi+0x190>)
 8013218:	fb83 1302 	smull	r1, r3, r3, r2
 801321c:	4413      	add	r3, r2
 801321e:	1099      	asrs	r1, r3, #2
 8013220:	17d3      	asrs	r3, r2, #31
 8013222:	1ac9      	subs	r1, r1, r3
 8013224:	460b      	mov	r3, r1
 8013226:	00db      	lsls	r3, r3, #3
 8013228:	1a5b      	subs	r3, r3, r1
 801322a:	1ad1      	subs	r1, r2, r3
 801322c:	2900      	cmp	r1, #0
 801322e:	d001      	beq.n	8013234 <_ZN9tNMEA200012SendTPCM_BAMEi+0x118>
 8013230:	2301      	movs	r3, #1
 8013232:	e000      	b.n	8013236 <_ZN9tNMEA200012SendTPCM_BAMEi+0x11a>
 8013234:	2300      	movs	r3, #0
 8013236:	4403      	add	r3, r0
 8013238:	b2da      	uxtb	r2, r3
 801323a:	f107 0308 	add.w	r3, r7, #8
 801323e:	4611      	mov	r1, r2
 8013240:	4618      	mov	r0, r3
 8013242:	f7fb fe8b 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 8013246:	f107 0308 	add.w	r3, r7, #8
 801324a:	21ff      	movs	r1, #255	; 0xff
 801324c:	4618      	mov	r0, r3
 801324e:	f7fb fe85 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 8013252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	69da      	ldr	r2, [r3, #28]
 801325e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801326c:	fb01 f303 	mul.w	r3, r1, r3
 8013270:	4413      	add	r3, r2
 8013272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013274:	461a      	mov	r2, r3
 8013276:	f107 0308 	add.w	r3, r7, #8
 801327a:	4611      	mov	r1, r2
 801327c:	4618      	mov	r0, r3
 801327e:	f7fb fe36 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 8013282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013286:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 801328a:	f107 0108 	add.w	r1, r7, #8
 801328e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013296:	6812      	ldr	r2, [r2, #0]
 8013298:	6818      	ldr	r0, [r3, #0]
 801329a:	f7ff faf5 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 801329e:	4603      	mov	r3, r0
 80132a0:	bf00      	nop
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	92492493 	.word	0x92492493

080132b0 <_ZN9tNMEA200012SendTPCM_RTSEi>:

//*****************************************************************************
bool tNMEA2000::SendTPCM_RTS(int iDev) {
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b0c4      	sub	sp, #272	; 0x110
 80132b4:	af02      	add	r7, sp, #8
 80132b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132be:	6018      	str	r0, [r3, #0]
 80132c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132c8:	6019      	str	r1, [r3, #0]
  if ( !IsActiveNode() ) return false;
 80132ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132d2:	6818      	ldr	r0, [r3, #0]
 80132d4:	f7fd f998 	bl	8010608 <_ZN9tNMEA200012IsActiveNodeEv>
 80132d8:	4603      	mov	r3, r0
 80132da:	f083 0301 	eor.w	r3, r3, #1
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d001      	beq.n	80132e8 <_ZN9tNMEA200012SendTPCM_RTSEi+0x38>
 80132e4:	2300      	movs	r3, #0
 80132e6:	e0b7      	b.n	8013458 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1a8>

  tN2kMsg N2kMsg;
 80132e8:	f107 0008 	add.w	r0, r7, #8
 80132ec:	2300      	movs	r3, #0
 80132ee:	9300      	str	r3, [sp, #0]
 80132f0:	2300      	movs	r3, #0
 80132f2:	2206      	movs	r2, #6
 80132f4:	210f      	movs	r1, #15
 80132f6:	f7fb fcbf 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 80132fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	69da      	ldr	r2, [r3, #28]
 8013306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801330a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013314:	fb01 f303 	mul.w	r3, r1, r3
 8013318:	4413      	add	r3, r2
 801331a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801331e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013322:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013326:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 8013328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801332c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	69da      	ldr	r2, [r3, #28]
 8013334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013342:	fb01 f303 	mul.w	r3, r1, r3
 8013346:	4413      	add	r3, r2
 8013348:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801334c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013350:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013354:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_CM);
 8013356:	f107 0308 	add.w	r3, r7, #8
 801335a:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 801335e:	4618      	mov	r0, r3
 8013360:	f7fb fcbc 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 8013364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013368:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801336c:	2206      	movs	r2, #6
 801336e:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(TP_CM_RTS);
 8013370:	f107 0308 	add.w	r3, r7, #8
 8013374:	2110      	movs	r1, #16
 8013376:	4618      	mov	r0, r3
 8013378:	f7fb fdf0 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  int nBytes=Devices[iDev].PendingTPMsg.DataLen;
 801337c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	69da      	ldr	r2, [r3, #28]
 8013388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801338c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013396:	fb01 f303 	mul.w	r3, r1, r3
 801339a:	4413      	add	r3, r2
 801339c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801339e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  N2kMsg.Add2ByteUInt(nBytes);
 80133a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	f107 0308 	add.w	r3, r7, #8
 80133ac:	4611      	mov	r1, r2
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7fb fd89 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nBytes/7+(nBytes%7!=0?1:0));
 80133b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80133b8:	4a2a      	ldr	r2, [pc, #168]	; (8013464 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b4>)
 80133ba:	fb82 1203 	smull	r1, r2, r2, r3
 80133be:	441a      	add	r2, r3
 80133c0:	1092      	asrs	r2, r2, #2
 80133c2:	17db      	asrs	r3, r3, #31
 80133c4:	1ad3      	subs	r3, r2, r3
 80133c6:	b2d8      	uxtb	r0, r3
 80133c8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80133cc:	4b25      	ldr	r3, [pc, #148]	; (8013464 <_ZN9tNMEA200012SendTPCM_RTSEi+0x1b4>)
 80133ce:	fb83 1302 	smull	r1, r3, r3, r2
 80133d2:	4413      	add	r3, r2
 80133d4:	1099      	asrs	r1, r3, #2
 80133d6:	17d3      	asrs	r3, r2, #31
 80133d8:	1ac9      	subs	r1, r1, r3
 80133da:	460b      	mov	r3, r1
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	1a5b      	subs	r3, r3, r1
 80133e0:	1ad1      	subs	r1, r2, r3
 80133e2:	2900      	cmp	r1, #0
 80133e4:	d001      	beq.n	80133ea <_ZN9tNMEA200012SendTPCM_RTSEi+0x13a>
 80133e6:	2301      	movs	r3, #1
 80133e8:	e000      	b.n	80133ec <_ZN9tNMEA200012SendTPCM_RTSEi+0x13c>
 80133ea:	2300      	movs	r3, #0
 80133ec:	4403      	add	r3, r0
 80133ee:	b2da      	uxtb	r2, r3
 80133f0:	f107 0308 	add.w	r3, r7, #8
 80133f4:	4611      	mov	r1, r2
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fb fdb0 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 80133fc:	f107 0308 	add.w	r3, r7, #8
 8013400:	21ff      	movs	r1, #255	; 0xff
 8013402:	4618      	mov	r0, r3
 8013404:	f7fb fdaa 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(Devices[iDev].PendingTPMsg.PGN);
 8013408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801340c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	69da      	ldr	r2, [r3, #28]
 8013414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013422:	fb01 f303 	mul.w	r3, r1, r3
 8013426:	4413      	add	r3, r2
 8013428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801342a:	461a      	mov	r2, r3
 801342c:	f107 0308 	add.w	r3, r7, #8
 8013430:	4611      	mov	r1, r2
 8013432:	4618      	mov	r0, r3
 8013434:	f7fb fd5b 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
  return SendMsg(N2kMsg,iDev);
 8013438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801343c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8013440:	f107 0108 	add.w	r1, r7, #8
 8013444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801344c:	6812      	ldr	r2, [r2, #0]
 801344e:	6818      	ldr	r0, [r3, #0]
 8013450:	f7ff fa1a 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8013454:	4603      	mov	r3, r0
 8013456:	bf00      	nop
}
 8013458:	4618      	mov	r0, r3
 801345a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	92492493 	.word	0x92492493

08013468 <_Z12TPCtsPacketsh>:

unsigned char TPCtsPackets(unsigned char nPackets) { return tNMEA2000::N2kMax<unsigned char>(1,tNMEA2000::N2kMin<unsigned char>(nPackets,TP_MAX_FRAMES)); }
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	71fb      	strb	r3, [r7, #7]
 8013472:	79fb      	ldrb	r3, [r7, #7]
 8013474:	2105      	movs	r1, #5
 8013476:	4618      	mov	r0, r3
 8013478:	f003 f972 	bl	8016760 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>
 801347c:	4603      	mov	r3, r0
 801347e:	4619      	mov	r1, r3
 8013480:	2001      	movs	r0, #1
 8013482:	f003 f981 	bl	8016788 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>
 8013486:	4603      	mov	r3, r0
 8013488:	4618      	mov	r0, r3
 801348a:	3708      	adds	r7, #8
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <_ZN9tNMEA200012SendTPCM_CTSEmhihh>:

//*****************************************************************************
void tNMEA2000::SendTPCM_CTS(unsigned long PGN, unsigned char Destination, int iDev, unsigned char nPackets, unsigned char NextPacketNumber) {
 8013490:	b590      	push	{r4, r7, lr}
 8013492:	b0c7      	sub	sp, #284	; 0x11c
 8013494:	af02      	add	r7, sp, #8
 8013496:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801349a:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801349e:	6020      	str	r0, [r4, #0]
 80134a0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80134a4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80134a8:	6001      	str	r1, [r0, #0]
 80134aa:	4611      	mov	r1, r2
 80134ac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80134b0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80134b4:	6013      	str	r3, [r2, #0]
 80134b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134ba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80134be:	460a      	mov	r2, r1
 80134c0:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 80134c2:	f107 0014 	add.w	r0, r7, #20
 80134c6:	2300      	movs	r3, #0
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	2300      	movs	r3, #0
 80134cc:	2206      	movs	r2, #6
 80134ce:	210f      	movs	r1, #15
 80134d0:	f7fb fbd2 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 80134d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134dc:	6818      	ldr	r0, [r3, #0]
 80134de:	f7fd f893 	bl	8010608 <_ZN9tNMEA200012IsActiveNodeEv>
 80134e2:	4603      	mov	r3, r0
 80134e4:	f083 0301 	eor.w	r3, r3, #1
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d164      	bne.n	80135b8 <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x128>
  N2kMsg.Source=Devices[iDev].N2kSource;
 80134ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	69da      	ldr	r2, [r3, #28]
 80134fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013508:	fb01 f303 	mul.w	r3, r1, r3
 801350c:	4413      	add	r3, r2
 801350e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013512:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 8013516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801351a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 8013524:	f107 0314 	add.w	r3, r7, #20
 8013528:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 801352c:	4618      	mov	r0, r3
 801352e:	f7fb fbd5 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 8013532:	2306      	movs	r3, #6
 8013534:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_CTS);
 8013536:	f107 0314 	add.w	r3, r7, #20
 801353a:	2111      	movs	r1, #17
 801353c:	4618      	mov	r0, r3
 801353e:	f7fb fd0d 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(TPCtsPackets(nPackets));
 8013542:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff ff8e 	bl	8013468 <_Z12TPCtsPacketsh>
 801354c:	4603      	mov	r3, r0
 801354e:	461a      	mov	r2, r3
 8013550:	f107 0314 	add.w	r3, r7, #20
 8013554:	4611      	mov	r1, r2
 8013556:	4618      	mov	r0, r3
 8013558:	f7fb fd00 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(NextPacketNumber);
 801355c:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 8013560:	f107 0314 	add.w	r3, r7, #20
 8013564:	4611      	mov	r1, r2
 8013566:	4618      	mov	r0, r3
 8013568:	f7fb fcf8 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 801356c:	f107 0314 	add.w	r3, r7, #20
 8013570:	21ff      	movs	r1, #255	; 0xff
 8013572:	4618      	mov	r0, r3
 8013574:	f7fb fcf2 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 8013578:	f107 0314 	add.w	r3, r7, #20
 801357c:	21ff      	movs	r1, #255	; 0xff
 801357e:	4618      	mov	r0, r3
 8013580:	f7fb fcec 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 8013584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	f107 0314 	add.w	r3, r7, #20
 8013592:	4611      	mov	r1, r2
 8013594:	4618      	mov	r0, r3
 8013596:	f7fb fcaa 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 801359a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801359e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80135a2:	f107 0114 	add.w	r1, r7, #20
 80135a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135ae:	6812      	ldr	r2, [r2, #0]
 80135b0:	6818      	ldr	r0, [r3, #0]
 80135b2:	f7ff f969 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80135b6:	e000      	b.n	80135ba <_ZN9tNMEA200012SendTPCM_CTSEmhihh+0x12a>
  if ( !IsActiveNode() ) return;
 80135b8:	bf00      	nop
}
 80135ba:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd90      	pop	{r4, r7, pc}

080135c2 <_ZN9tNMEA200015SendTPCM_EndAckEmhith>:

//*****************************************************************************
void tNMEA2000::SendTPCM_EndAck(unsigned long PGN, unsigned char Destination, int iDev, uint16_t nBytes, unsigned char nPackets) {
 80135c2:	b590      	push	{r4, r7, lr}
 80135c4:	b0c7      	sub	sp, #284	; 0x11c
 80135c6:	af02      	add	r7, sp, #8
 80135c8:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80135cc:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80135d0:	6020      	str	r0, [r4, #0]
 80135d2:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80135d6:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80135da:	6001      	str	r1, [r0, #0]
 80135dc:	4611      	mov	r1, r2
 80135de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80135e2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80135e6:	6013      	str	r3, [r2, #0]
 80135e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135ec:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80135f0:	460a      	mov	r2, r1
 80135f2:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 80135f4:	f107 0014 	add.w	r0, r7, #20
 80135f8:	2300      	movs	r3, #0
 80135fa:	9300      	str	r3, [sp, #0]
 80135fc:	2300      	movs	r3, #0
 80135fe:	2206      	movs	r2, #6
 8013600:	210f      	movs	r1, #15
 8013602:	f7fb fb39 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 8013606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801360a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801360e:	6818      	ldr	r0, [r3, #0]
 8013610:	f7fc fffa 	bl	8010608 <_ZN9tNMEA200012IsActiveNodeEv>
 8013614:	4603      	mov	r3, r0
 8013616:	f083 0301 	eor.w	r3, r3, #1
 801361a:	b2db      	uxtb	r3, r3
 801361c:	2b00      	cmp	r3, #0
 801361e:	d159      	bne.n	80136d4 <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x112>
  N2kMsg.Source=Devices[iDev].N2kSource;
 8013620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	69da      	ldr	r2, [r3, #28]
 801362c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013630:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801363a:	fb01 f303 	mul.w	r3, r1, r3
 801363e:	4413      	add	r3, r2
 8013640:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013644:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 8013648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801364c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 8013656:	f107 0314 	add.w	r3, r7, #20
 801365a:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 801365e:	4618      	mov	r0, r3
 8013660:	f7fb fb3c 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 8013664:	2306      	movs	r3, #6
 8013666:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_ACK);
 8013668:	f107 0314 	add.w	r3, r7, #20
 801366c:	2113      	movs	r1, #19
 801366e:	4618      	mov	r0, r3
 8013670:	f7fb fc74 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add2ByteUInt(nBytes);
 8013674:	f8b7 2120 	ldrh.w	r2, [r7, #288]	; 0x120
 8013678:	f107 0314 	add.w	r3, r7, #20
 801367c:	4611      	mov	r1, r2
 801367e:	4618      	mov	r0, r3
 8013680:	f7fb fc21 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
  N2kMsg.AddByte(nPackets);
 8013684:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 8013688:	f107 0314 	add.w	r3, r7, #20
 801368c:	4611      	mov	r1, r2
 801368e:	4618      	mov	r0, r3
 8013690:	f7fb fc64 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 8013694:	f107 0314 	add.w	r3, r7, #20
 8013698:	21ff      	movs	r1, #255	; 0xff
 801369a:	4618      	mov	r0, r3
 801369c:	f7fb fc5e 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 80136a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	f107 0314 	add.w	r3, r7, #20
 80136ae:	4611      	mov	r1, r2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fb fc1c 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 80136b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136ba:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80136be:	f107 0114 	add.w	r1, r7, #20
 80136c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80136c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136ca:	6812      	ldr	r2, [r2, #0]
 80136cc:	6818      	ldr	r0, [r3, #0]
 80136ce:	f7ff f8db 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80136d2:	e000      	b.n	80136d6 <_ZN9tNMEA200015SendTPCM_EndAckEmhith+0x114>
  if ( !IsActiveNode() ) return;
 80136d4:	bf00      	nop
}
 80136d6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd90      	pop	{r4, r7, pc}

080136de <_ZN9tNMEA200014SendTPCM_AbortEmhih>:

//*****************************************************************************
void tNMEA2000::SendTPCM_Abort(unsigned long PGN, unsigned char Destination, int iDev, unsigned char AbortCode) {
 80136de:	b590      	push	{r4, r7, lr}
 80136e0:	b0c7      	sub	sp, #284	; 0x11c
 80136e2:	af02      	add	r7, sp, #8
 80136e4:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80136e8:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80136ec:	6020      	str	r0, [r4, #0]
 80136ee:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80136f2:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80136f6:	6001      	str	r1, [r0, #0]
 80136f8:	4611      	mov	r1, r2
 80136fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80136fe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8013702:	6013      	str	r3, [r2, #0]
 8013704:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013708:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 801370c:	460a      	mov	r2, r1
 801370e:	701a      	strb	r2, [r3, #0]
  tN2kMsg N2kMsg;
 8013710:	f107 0014 	add.w	r0, r7, #20
 8013714:	2300      	movs	r3, #0
 8013716:	9300      	str	r3, [sp, #0]
 8013718:	2300      	movs	r3, #0
 801371a:	2206      	movs	r2, #6
 801371c:	210f      	movs	r1, #15
 801371e:	f7fb faab 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

  if ( !IsActiveNode() ) return;
 8013722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801372a:	6818      	ldr	r0, [r3, #0]
 801372c:	f7fc ff6c 	bl	8010608 <_ZN9tNMEA200012IsActiveNodeEv>
 8013730:	4603      	mov	r3, r0
 8013732:	f083 0301 	eor.w	r3, r3, #1
 8013736:	b2db      	uxtb	r3, r3
 8013738:	2b00      	cmp	r3, #0
 801373a:	d15d      	bne.n	80137f8 <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11a>
  N2kMsg.Source=Devices[iDev].N2kSource;
 801373c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	69da      	ldr	r2, [r3, #28]
 8013748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801374c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013756:	fb01 f303 	mul.w	r3, r1, r3
 801375a:	4413      	add	r3, r2
 801375c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013760:	f887 3020 	strb.w	r3, [r7, #32]
  N2kMsg.Destination=Destination;
 8013764:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013768:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  N2kMsg.SetPGN(TP_CM);
 8013772:	f107 0314 	add.w	r3, r7, #20
 8013776:	f44f 416c 	mov.w	r1, #60416	; 0xec00
 801377a:	4618      	mov	r0, r3
 801377c:	f7fb faae 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 8013780:	2306      	movs	r3, #6
 8013782:	763b      	strb	r3, [r7, #24]
  N2kMsg.AddByte(TP_CM_Abort);
 8013784:	f107 0314 	add.w	r3, r7, #20
 8013788:	21ff      	movs	r1, #255	; 0xff
 801378a:	4618      	mov	r0, r3
 801378c:	f7fb fbe6 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(AbortCode);
 8013790:	f897 2120 	ldrb.w	r2, [r7, #288]	; 0x120
 8013794:	f107 0314 	add.w	r3, r7, #20
 8013798:	4611      	mov	r1, r2
 801379a:	4618      	mov	r0, r3
 801379c:	f7fb fbde 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 80137a0:	f107 0314 	add.w	r3, r7, #20
 80137a4:	21ff      	movs	r1, #255	; 0xff
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fb fbd8 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 80137ac:	f107 0314 	add.w	r3, r7, #20
 80137b0:	21ff      	movs	r1, #255	; 0xff
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fb fbd2 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.AddByte(0xff); // Reserved;
 80137b8:	f107 0314 	add.w	r3, r7, #20
 80137bc:	21ff      	movs	r1, #255	; 0xff
 80137be:	4618      	mov	r0, r3
 80137c0:	f7fb fbcc 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  N2kMsg.Add3ByteInt(PGN);
 80137c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	f107 0314 	add.w	r3, r7, #20
 80137d2:	4611      	mov	r1, r2
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7fb fb8a 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
  SendMsg(N2kMsg,iDev);
 80137da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137de:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80137e2:	f107 0114 	add.w	r1, r7, #20
 80137e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137ee:	6812      	ldr	r2, [r2, #0]
 80137f0:	6818      	ldr	r0, [r3, #0]
 80137f2:	f7ff f849 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80137f6:	e000      	b.n	80137fa <_ZN9tNMEA200014SendTPCM_AbortEmhih+0x11c>
  if ( !IsActiveNode() ) return;
 80137f8:	bf00      	nop
}
 80137fa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd90      	pop	{r4, r7, pc}

08013802 <_ZN9tNMEA20008SendTPDTEi>:

//*****************************************************************************
// Caller should take care of not calling this after all has been done.
// Use HasAllTPDTSent for checking.
bool tNMEA2000::SendTPDT(int iDev) {
 8013802:	b580      	push	{r7, lr}
 8013804:	b0c6      	sub	sp, #280	; 0x118
 8013806:	af02      	add	r7, sp, #8
 8013808:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801380c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013810:	6018      	str	r0, [r3, #0]
 8013812:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013816:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801381a:	6019      	str	r1, [r3, #0]
  tN2kMsg N2kMsg;
 801381c:	f107 000c 	add.w	r0, r7, #12
 8013820:	2300      	movs	r3, #0
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	2300      	movs	r3, #0
 8013826:	2206      	movs	r2, #6
 8013828:	210f      	movs	r1, #15
 801382a:	f7fb fa25 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
  N2kMsg.Source=Devices[iDev].N2kSource;
 801382e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013832:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	69da      	ldr	r2, [r3, #28]
 801383a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801383e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013848:	fb01 f303 	mul.w	r3, r1, r3
 801384c:	4413      	add	r3, r2
 801384e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8013852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801385a:	731a      	strb	r2, [r3, #12]
  N2kMsg.Destination=Devices[iDev].PendingTPMsg.Destination;
 801385c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013860:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	69da      	ldr	r2, [r3, #28]
 8013868:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801386c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013876:	fb01 f303 	mul.w	r3, r1, r3
 801387a:	4413      	add	r3, r2
 801387c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8013880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013888:	735a      	strb	r2, [r3, #13]
  N2kMsg.SetPGN(TP_DT);
 801388a:	f107 030c 	add.w	r3, r7, #12
 801388e:	f44f 416b 	mov.w	r1, #60160	; 0xeb00
 8013892:	4618      	mov	r0, r3
 8013894:	f7fb fa22 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
  N2kMsg.Priority=6;
 8013898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801389c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80138a0:	2206      	movs	r2, #6
 80138a2:	711a      	strb	r2, [r3, #4]
  N2kMsg.AddByte(Devices[iDev].NextDTSequence+1);
 80138a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	69da      	ldr	r2, [r3, #28]
 80138b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80138be:	fb01 f303 	mul.w	r3, r1, r3
 80138c2:	4413      	add	r3, r2
 80138c4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80138c8:	3301      	adds	r3, #1
 80138ca:	b2da      	uxtb	r2, r3
 80138cc:	f107 030c 	add.w	r3, r7, #12
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fb fb42 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  int iByteToSend=Devices[iDev].NextDTSequence*7;
 80138d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	69da      	ldr	r2, [r3, #28]
 80138e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80138e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80138f2:	fb01 f303 	mul.w	r3, r1, r3
 80138f6:	4413      	add	r3, r2
 80138f8:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80138fc:	461a      	mov	r2, r3
 80138fe:	4613      	mov	r3, r2
 8013900:	00db      	lsls	r3, r3, #3
 8013902:	1a9b      	subs	r3, r3, r2
 8013904:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 8013908:	2300      	movs	r3, #0
 801390a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801390e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013912:	2b06      	cmp	r3, #6
 8013914:	dc41      	bgt.n	801399a <_ZN9tNMEA20008SendTPDTEi+0x198>
    if ( iByteToSend<Devices[iDev].PendingTPMsg.DataLen ) {
 8013916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801391a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	69da      	ldr	r2, [r3, #28]
 8013922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013926:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013930:	fb01 f303 	mul.w	r3, r1, r3
 8013934:	4413      	add	r3, r2
 8013936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013938:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801393c:	429a      	cmp	r2, r3
 801393e:	da1b      	bge.n	8013978 <_ZN9tNMEA20008SendTPDTEi+0x176>
      N2kMsg.AddByte(Devices[iDev].PendingTPMsg.Data[iByteToSend]);
 8013940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	69da      	ldr	r2, [r3, #28]
 801394c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013950:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801395a:	fb01 f303 	mul.w	r3, r1, r3
 801395e:	441a      	add	r2, r3
 8013960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013964:	4413      	add	r3, r2
 8013966:	334c      	adds	r3, #76	; 0x4c
 8013968:	781a      	ldrb	r2, [r3, #0]
 801396a:	f107 030c 	add.w	r3, r7, #12
 801396e:	4611      	mov	r1, r2
 8013970:	4618      	mov	r0, r3
 8013972:	f7fb faf3 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 8013976:	e005      	b.n	8013984 <_ZN9tNMEA20008SendTPDTEi+0x182>
    } else N2kMsg.AddByte(0xff);
 8013978:	f107 030c 	add.w	r3, r7, #12
 801397c:	21ff      	movs	r1, #255	; 0xff
 801397e:	4618      	mov	r0, r3
 8013980:	f7fb faec 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
  for ( int i=0; i<7; i++,iByteToSend++ ) {
 8013984:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013988:	3301      	adds	r3, #1
 801398a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013992:	3301      	adds	r3, #1
 8013994:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013998:	e7b9      	b.n	801390e <_ZN9tNMEA20008SendTPDTEi+0x10c>
  }
  Devices[iDev].NextDTSequence++;
 801399a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801399e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	69da      	ldr	r2, [r3, #28]
 80139a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80139b4:	fb01 f303 	mul.w	r3, r1, r3
 80139b8:	4413      	add	r3, r2
 80139ba:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 80139be:	3201      	adds	r2, #1
 80139c0:	b2d2      	uxtb	r2, r2
 80139c2:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

  return SendMsg(N2kMsg,iDev);
 80139c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139ca:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80139ce:	f107 010c 	add.w	r1, r7, #12
 80139d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139da:	6812      	ldr	r2, [r2, #0]
 80139dc:	6818      	ldr	r0, [r3, #0]
 80139de:	f7fe ff53 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80139e2:	4603      	mov	r3, r0
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}

080139ee <_ZN9tNMEA200014HasAllTPDTSentEi>:

//*****************************************************************************
bool tNMEA2000::HasAllTPDTSent(int iDev) {
 80139ee:	b480      	push	{r7}
 80139f0:	b083      	sub	sp, #12
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
 80139f6:	6039      	str	r1, [r7, #0]
  return ( Devices[iDev].NextDTSequence*7>=Devices[iDev].PendingTPMsg.DataLen );
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	69da      	ldr	r2, [r3, #28]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013a02:	fb01 f303 	mul.w	r3, r1, r3
 8013a06:	4413      	add	r3, r2
 8013a08:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	4613      	mov	r3, r2
 8013a10:	00db      	lsls	r3, r3, #3
 8013a12:	1a9a      	subs	r2, r3, r2
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	69d9      	ldr	r1, [r3, #28]
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8013a1e:	fb00 f303 	mul.w	r3, r0, r3
 8013a22:	440b      	add	r3, r1
 8013a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a26:	429a      	cmp	r2, r3
 8013a28:	bfac      	ite	ge
 8013a2a:	2301      	movge	r3, #1
 8013a2c:	2300      	movlt	r3, #0
 8013a2e:	b2db      	uxtb	r3, r3
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bc80      	pop	{r7}
 8013a38:	4770      	bx	lr
	...

08013a3c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>:

//*****************************************************************************
bool tNMEA2000::TestHandleTPMessage(unsigned long PGN, unsigned char Source, unsigned char Destination,
                                    unsigned char len, unsigned char *buf,
                                    uint8_t &MsgIndex) {
 8013a3c:	b590      	push	{r4, r7, lr}
 8013a3e:	b08f      	sub	sp, #60	; 0x3c
 8013a40:	af02      	add	r7, sp, #8
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	4611      	mov	r1, r2
 8013a48:	461a      	mov	r2, r3
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	71fb      	strb	r3, [r7, #7]
 8013a4e:	4613      	mov	r3, r2
 8013a50:	71bb      	strb	r3, [r7, #6]
  MsgIndex=MaxN2kCANMsgs;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a5a:	701a      	strb	r2, [r3, #0]
  int iDev=FindSourceDeviceIndex(Destination);
 8013a5c:	79bb      	ldrb	r3, [r7, #6]
 8013a5e:	4619      	mov	r1, r3
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f000 ff40 	bl	80148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8013a66:	62b8      	str	r0, [r7, #40]	; 0x28

  if ( PGN==TP_CM ) {
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	f5b3 4f6c 	cmp.w	r3, #60416	; 0xec00
 8013a6e:	f040 8268 	bne.w	8013f42 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x506>
    unsigned char TP_CM_Control=buf[0];
 8013a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int Index=5;
 8013a7a:	2305      	movs	r3, #5
 8013a7c:	617b      	str	r3, [r7, #20]
    unsigned long TransportPGN=GetBuf3ByteUInt(Index,buf);
 8013a7e:	f107 0314 	add.w	r3, r7, #20
 8013a82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fb fbea 	bl	800f25e <_Z15GetBuf3ByteUIntRiPKh>
 8013a8a:	6238      	str	r0, [r7, #32]

    switch (TP_CM_Control) {
 8013a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a90:	2b20      	cmp	r3, #32
 8013a92:	dc2b      	bgt.n	8013aec <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0xb0>
 8013a94:	2b10      	cmp	r3, #16
 8013a96:	f2c0 824d 	blt.w	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 8013a9a:	3b10      	subs	r3, #16
 8013a9c:	2b10      	cmp	r3, #16
 8013a9e:	f200 8249 	bhi.w	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
 8013aa2:	a201      	add	r2, pc, #4	; (adr r2, 8013aa8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x6c>)
 8013aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aa8:	08013af5 	.word	0x08013af5
 8013aac:	08013d71 	.word	0x08013d71
 8013ab0:	08013f35 	.word	0x08013f35
 8013ab4:	08013e9f 	.word	0x08013e9f
 8013ab8:	08013f35 	.word	0x08013f35
 8013abc:	08013f35 	.word	0x08013f35
 8013ac0:	08013f35 	.word	0x08013f35
 8013ac4:	08013f35 	.word	0x08013f35
 8013ac8:	08013f35 	.word	0x08013f35
 8013acc:	08013f35 	.word	0x08013f35
 8013ad0:	08013f35 	.word	0x08013f35
 8013ad4:	08013f35 	.word	0x08013f35
 8013ad8:	08013f35 	.word	0x08013f35
 8013adc:	08013f35 	.word	0x08013f35
 8013ae0:	08013f35 	.word	0x08013f35
 8013ae4:	08013f35 	.word	0x08013f35
 8013ae8:	08013af5 	.word	0x08013af5
 8013aec:	2bff      	cmp	r3, #255	; 0xff
 8013aee:	f000 81f5 	beq.w	8013edc <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4a0>
 8013af2:	e21f      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_BAM:
      case TP_CM_RTS: {
        N2kMsgDbgln("Got TP Command");
        Index=1;
 8013af4:	2301      	movs	r3, #1
 8013af6:	617b      	str	r3, [r7, #20]
        uint16_t nBytes=GetBuf2ByteUInt(Index,buf);
 8013af8:	f107 0314 	add.w	r3, r7, #20
 8013afc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fb fb9e 	bl	800f240 <_Z15GetBuf2ByteUIntRiPKh>
 8013b04:	4603      	mov	r3, r0
 8013b06:	83bb      	strh	r3, [r7, #28]
        uint8_t TPMaxPackets=buf[Index++];
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	1c5a      	adds	r2, r3, #1
 8013b0c:	617a      	str	r2, [r7, #20]
 8013b0e:	461a      	mov	r2, r3
 8013b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b12:	4413      	add	r3, r2
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	76fb      	strb	r3, [r7, #27]
        //Index++; // reserved

        FindFreeCANMsgIndex(TransportPGN,Source,Destination,true,MsgIndex);
 8013b18:	79b9      	ldrb	r1, [r7, #6]
 8013b1a:	79fa      	ldrb	r2, [r7, #7]
 8013b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b1e:	9301      	str	r3, [sp, #4]
 8013b20:	2301      	movs	r3, #1
 8013b22:	9300      	str	r3, [sp, #0]
 8013b24:	460b      	mov	r3, r1
 8013b26:	6a39      	ldr	r1, [r7, #32]
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f7ff fa32 	bl	8012f92 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>

        if (MsgIndex==MaxN2kCANMsgs) { // No free msg place
 8013b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b30:	781a      	ldrb	r2, [r3, #0]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d111      	bne.n	8013b60 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x124>
          N2kMsgDbgStart("No free msg slot"); N2kMsgDbgln();
          if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to abort transport
 8013b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b40:	2b10      	cmp	r3, #16
 8013b42:	f040 81ea 	bne.w	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 8013b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f2c0 81e6 	blt.w	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);
 8013b4e:	79fa      	ldrb	r2, [r7, #7]
 8013b50:	2301      	movs	r3, #1
 8013b52:	9300      	str	r3, [sp, #0]
 8013b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b56:	6a39      	ldr	r1, [r7, #32]
 8013b58:	68f8      	ldr	r0, [r7, #12]
 8013b5a:	f7ff fdc0 	bl	80136de <_ZN9tNMEA200014SendTPCM_AbortEmhih>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
            }
          }
        }
        break;
 8013b5e:	e1dc      	b.n	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
          N2kCANMsgBuf[MsgIndex].KnownMessage=CheckKnownMessage(TransportPGN,N2kCANMsgBuf[MsgIndex].SystemMessage,FastPacket);
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	4619      	mov	r1, r3
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	019b      	lsls	r3, r3, #6
 8013b6e:	440b      	add	r3, r1
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4413      	add	r3, r2
 8013b74:	f103 01fe 	add.w	r1, r3, #254	; 0xfe
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	4618      	mov	r0, r3
 8013b82:	4603      	mov	r3, r0
 8013b84:	019b      	lsls	r3, r3, #6
 8013b86:	4403      	add	r3, r0
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	18d4      	adds	r4, r2, r3
 8013b8c:	f107 0313 	add.w	r3, r7, #19
 8013b90:	460a      	mov	r2, r1
 8013b92:	6a39      	ldr	r1, [r7, #32]
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f7ff f8dd 	bl	8012d54 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 8013ba0:	8bbb      	ldrh	r3, [r7, #28]
 8013ba2:	2bde      	cmp	r3, #222	; 0xde
 8013ba4:	d818      	bhi.n	8013bd8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bac:	781b      	ldrb	r3, [r3, #0]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	019b      	lsls	r3, r3, #6
 8013bb4:	440b      	add	r3, r1
 8013bb6:	009b      	lsls	r3, r3, #2
 8013bb8:	4413      	add	r3, r2
 8013bba:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d108      	bne.n	8013bd4 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x198>
               (N2kCANMsgBuf[MsgIndex].KnownMessage || !HandleOnlyKnownMessages()) ) {
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f7fc fd0e 	bl	80105e4 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	f083 0301 	eor.w	r3, r3, #1
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d001      	beq.n	8013bd8 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19c>
          if ( nBytes < tN2kMsg::MaxDataLen &&  // Currently we can handle only tN2kMsg::MaxDataLen long messages
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	e000      	b.n	8013bda <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x19e>
 8013bd8:	2300      	movs	r3, #0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f000 80b6 	beq.w	8013d4c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x310>
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013be6:	781b      	ldrb	r3, [r3, #0]
 8013be8:	4619      	mov	r1, r3
 8013bea:	460b      	mov	r3, r1
 8013bec:	019b      	lsls	r3, r3, #6
 8013bee:	440b      	add	r3, r1
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	4413      	add	r3, r2
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(7 /* Priority? */,TransportPGN,Source,Destination);
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	4619      	mov	r1, r3
 8013c04:	460b      	mov	r3, r1
 8013c06:	019b      	lsls	r3, r3, #6
 8013c08:	440b      	add	r3, r1
 8013c0a:	009b      	lsls	r3, r3, #2
 8013c0c:	4413      	add	r3, r2
 8013c0e:	4618      	mov	r0, r3
 8013c10:	79fa      	ldrb	r2, [r7, #7]
 8013c12:	79bb      	ldrb	r3, [r7, #6]
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	4613      	mov	r3, r2
 8013c18:	6a3a      	ldr	r2, [r7, #32]
 8013c1a:	2107      	movs	r1, #7
 8013c1c:	f7fb f879 	bl	800ed12 <_ZN7tN2kMsg4InitEhmhh>
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	4619      	mov	r1, r3
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	019b      	lsls	r3, r3, #6
 8013c2e:	440b      	add	r3, r1
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	4413      	add	r3, r2
 8013c34:	2200      	movs	r2, #0
 8013c36:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            N2kCANMsgBuf[MsgIndex].LastFrame=0;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	4619      	mov	r1, r3
 8013c44:	460b      	mov	r3, r1
 8013c46:	019b      	lsls	r3, r3, #6
 8013c48:	440b      	add	r3, r1
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4413      	add	r3, r2
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=nBytes;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	460b      	mov	r3, r1
 8013c60:	019b      	lsls	r3, r3, #6
 8013c62:	440b      	add	r3, r1
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	4413      	add	r3, r2
 8013c68:	8bba      	ldrh	r2, [r7, #28]
 8013c6a:	611a      	str	r2, [r3, #16]
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage();
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	4619      	mov	r1, r3
 8013c76:	460b      	mov	r3, r1
 8013c78:	019b      	lsls	r3, r3, #6
 8013c7a:	440b      	add	r3, r1
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	4413      	add	r3, r2
 8013c80:	2101      	movs	r1, #1
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7fc f921 	bl	800feca <_ZN7tN2kMsg14SetIsTPMessageEb>
            N2kCANMsgBuf[MsgIndex].TPMaxPackets=TPMaxPackets;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	4619      	mov	r1, r3
 8013c92:	460b      	mov	r3, r1
 8013c94:	019b      	lsls	r3, r3, #6
 8013c96:	440b      	add	r3, r1
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	4413      	add	r3, r2
 8013c9c:	7efa      	ldrb	r2, [r7, #27]
 8013c9e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 8013ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ca6:	2b10      	cmp	r3, #16
 8013ca8:	d142      	bne.n	8013d30 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
 8013caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	db3f      	blt.n	8013d30 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x2f4>
              SendTPCM_CTS(TransportPGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	4619      	mov	r1, r3
 8013cba:	460b      	mov	r3, r1
 8013cbc:	019b      	lsls	r3, r3, #6
 8013cbe:	440b      	add	r3, r1
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	4413      	add	r3, r2
 8013cc4:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	019b      	lsls	r3, r3, #6
 8013cd6:	4403      	add	r3, r0
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	440b      	add	r3, r1
 8013cdc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	b2db      	uxtb	r3, r3
 8013ce4:	79f9      	ldrb	r1, [r7, #7]
 8013ce6:	9301      	str	r3, [sp, #4]
 8013ce8:	9200      	str	r2, [sp, #0]
 8013cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cec:	460a      	mov	r2, r1
 8013cee:	6a39      	ldr	r1, [r7, #32]
 8013cf0:	68f8      	ldr	r0, [r7, #12]
 8013cf2:	f7ff fbcd 	bl	8013490 <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
              N2kCANMsgBuf[MsgIndex].TPRequireCTS=TPCtsPackets(N2kCANMsgBuf[MsgIndex].TPMaxPackets);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	4619      	mov	r1, r3
 8013d00:	460b      	mov	r3, r1
 8013d02:	019b      	lsls	r3, r3, #6
 8013d04:	440b      	add	r3, r1
 8013d06:	009b      	lsls	r3, r3, #2
 8013d08:	4413      	add	r3, r2
 8013d0a:	f893 1101 	ldrb.w	r1, [r3, #257]	; 0x101
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	4618      	mov	r0, r3
 8013d18:	4603      	mov	r3, r0
 8013d1a:	019b      	lsls	r3, r3, #6
 8013d1c:	4403      	add	r3, r0
 8013d1e:	009b      	lsls	r3, r3, #2
 8013d20:	18d4      	adds	r4, r2, r3
 8013d22:	4608      	mov	r0, r1
 8013d24:	f7ff fba0 	bl	8013468 <_Z12TPCtsPacketsh>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
        break;
 8013d2e:	e0f4      	b.n	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              N2kCANMsgBuf[MsgIndex].TPMaxPackets=0xff; // TPMaxPackets>0 indicates that it is TP message
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	4619      	mov	r1, r3
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	019b      	lsls	r3, r3, #6
 8013d3e:	440b      	add	r3, r1
 8013d40:	009b      	lsls	r3, r3, #2
 8013d42:	4413      	add	r3, r2
 8013d44:	22ff      	movs	r2, #255	; 0xff
 8013d46:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        break;
 8013d4a:	e0e6      	b.n	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
            if ( (TP_CM_Control==TP_CM_RTS) && (iDev>=0) ) { // If it was for us and not broadcast, we need to response
 8013d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d50:	2b10      	cmp	r3, #16
 8013d52:	f040 80e2 	bne.w	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
 8013d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	f2c0 80de 	blt.w	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
              SendTPCM_Abort(TransportPGN,Source,iDev,TP_CM_AbortBusy);  // Abort
 8013d5e:	79fa      	ldrb	r2, [r7, #7]
 8013d60:	2301      	movs	r3, #1
 8013d62:	9300      	str	r3, [sp, #0]
 8013d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d66:	6a39      	ldr	r1, [r7, #32]
 8013d68:	68f8      	ldr	r0, [r7, #12]
 8013d6a:	f7ff fcb8 	bl	80136de <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        break;
 8013d6e:	e0d4      	b.n	8013f1a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4de>
      }
      case TP_CM_CTS:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 8013d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013d72:	68f8      	ldr	r0, [r7, #12]
 8013d74:	f7fc fc5c 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	f083 0301 	eor.w	r3, r3, #1
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	f040 80cc 	bne.w	8013f1e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e2>
        N2kMsgDbgStart("Got TP CTS"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	69da      	ldr	r2, [r3, #28]
 8013d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d8c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013d90:	fb01 f303 	mul.w	r3, r1, r3
 8013d94:	4413      	add	r3, r2
 8013d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f8 fb59 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f040 80bd 	bne.w	8013f22 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4e6>
        if ( Devices[iDev].PendingTPMsg.PGN!=TransportPGN ) { // Some failure on communication
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	69da      	ldr	r2, [r3, #28]
 8013dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013db2:	fb01 f303 	mul.w	r3, r1, r3
 8013db6:	4413      	add	r3, r2
 8013db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dba:	6a3a      	ldr	r2, [r7, #32]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d004      	beq.n	8013dca <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x38e>
          EndSendTPMessage(iDev); // Should we retry from beginning?
 8013dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013dc2:	68f8      	ldr	r0, [r7, #12]
 8013dc4:	f000 fb1f 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
          break;
 8013dc8:	e0b4      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        }
        // Now respond with next data packets
        if ( buf[1]>0 ) { // Note that with 0, receiver wants to have break
 8013dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dcc:	3301      	adds	r3, #1
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d055      	beq.n	8013e80 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
          if ( buf[2]-1!=Devices[iDev].NextDTSequence ) { // We got sequence error
 8013dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dd6:	3302      	adds	r3, #2
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	68fa      	ldr	r2, [r7, #12]
 8013dde:	69d1      	ldr	r1, [r2, #28]
 8013de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013de2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8013de6:	fb00 f202 	mul.w	r2, r0, r2
 8013dea:	440a      	add	r2, r1
 8013dec:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d004      	beq.n	8013dfe <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3c2>
            EndSendTPMessage(iDev); // Should we retry from beginning?
 8013df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013df6:	68f8      	ldr	r0, [r7, #12]
 8013df8:	f000 fb05 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
            break;
 8013dfc:	e09a      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
          }
          uint8_t MaxTPSequences=buf[1];
 8013dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e00:	785b      	ldrb	r3, [r3, #1]
 8013e02:	77fb      	strb	r3, [r7, #31]
          bool TPDTResult=true;
 8013e04:	2301      	movs	r3, #1
 8013e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          for ( uint8_t iSeq=0; TPDTResult &&iSeq<MaxTPSequences && !HasAllTPDTSent(iDev); iSeq++ ) TPDTResult&=SendTPDT(iDev);
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8013e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d010      	beq.n	8013e3a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 8013e18:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013e1c:	7ffb      	ldrb	r3, [r7, #31]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d20b      	bcs.n	8013e3a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 8013e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f7ff fde2 	bl	80139ee <_ZN9tNMEA200014HasAllTPDTSentEi>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	f083 0301 	eor.w	r3, r3, #1
 8013e30:	b2db      	uxtb	r3, r3
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d001      	beq.n	8013e3a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3fe>
 8013e36:	2301      	movs	r3, #1
 8013e38:	e000      	b.n	8013e3c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x400>
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d014      	beq.n	8013e6a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x42e>
 8013e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f7ff fcdd 	bl	8013802 <_ZN9tNMEA20008SendTPDTEi>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e50:	4013      	ands	r3, r2
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	bf14      	ite	ne
 8013e56:	2301      	movne	r3, #1
 8013e58:	2300      	moveq	r3, #0
 8013e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013e5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013e62:	3301      	adds	r3, #1
 8013e64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8013e68:	e7d2      	b.n	8013e10 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x3d4>
          if ( !TPDTResult ) EndSendTPMessage(iDev);
 8013e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e6e:	f083 0301 	eor.w	r3, r3, #1
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d003      	beq.n	8013e80 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x444>
 8013e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f000 fac3 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
        }
        Devices[iDev].NextDTSendTime.FromNow(100); // Set timeout for next response
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	69da      	ldr	r2, [r3, #28]
 8013e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e86:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013e8a:	fb01 f303 	mul.w	r3, r1, r3
 8013e8e:	4413      	add	r3, r2
 8013e90:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8013e94:	2164      	movs	r1, #100	; 0x64
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7fc f943 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
        break;
 8013e9c:	e04a      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_ACK:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 8013e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f7fc fbc5 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	f083 0301 	eor.w	r3, r3, #1
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d139      	bne.n	8013f26 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ea>
        N2kMsgDbgStart("Got TP ACK"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	69da      	ldr	r2, [r3, #28]
 8013eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013ebc:	fb01 f303 	mul.w	r3, r1, r3
 8013ec0:	4413      	add	r3, r2
 8013ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7f8 fac3 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d12b      	bne.n	8013f2a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4ee>
        EndSendTPMessage(iDev);
 8013ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f000 fa96 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 8013eda:	e02b      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
      case TP_CM_Abort:
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 8013edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013ede:	68f8      	ldr	r0, [r7, #12]
 8013ee0:	f7fc fba6 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	f083 0301 	eor.w	r3, r3, #1
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d11e      	bne.n	8013f2e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f2>
        N2kMsgDbgStart("Got TP Abort"); N2kMsgDbgln(MsgIndex);
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	69da      	ldr	r2, [r3, #28]
 8013ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013efa:	fb01 f303 	mul.w	r3, r1, r3
 8013efe:	4413      	add	r3, r2
 8013f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f8 faa4 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d110      	bne.n	8013f32 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f6>
        EndSendTPMessage(iDev);
 8013f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f000 fa77 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
        break;
 8013f18:	e00c      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        break;
 8013f1a:	bf00      	nop
 8013f1c:	e00a      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 8013f1e:	bf00      	nop
 8013f20:	e008      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 8013f22:	bf00      	nop
 8013f24:	e006      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 8013f26:	bf00      	nop
 8013f28:	e004      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 8013f2a:	bf00      	nop
 8013f2c:	e002      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( !IsValidDevice(iDev) ) break; // Should never fail
 8013f2e:	bf00      	nop
 8013f30:	e000      	b.n	8013f34 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x4f8>
        if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) break; // We should not get controls for broadcast TP msg
 8013f32:	bf00      	nop
      default:
        ;
    }
    MsgIndex=MaxN2kCANMsgs;  // After TP_CM, message is newer ready.
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f3c:	701a      	strb	r2, [r3, #0]
    return true;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e1ab      	b.n	801429a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  } else if ( PGN==TP_DT ) { // Datapacket
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	f5b3 4f6b 	cmp.w	r3, #60160	; 0xeb00
 8013f48:	f040 81a6 	bne.w	8014298 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85c>
    N2kMsgDbgStart("Got TP data"); N2kMsgDbgln(MsgIndex);
    // So we need to find TP msg which sender and destination matches.
    for (MsgIndex=0;
 8013f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f4e:	2200      	movs	r2, #0
 8013f50:	701a      	strb	r2, [r3, #0]
         MsgIndex<MaxN2kCANMsgs &&
 8013f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f54:	781a      	ldrb	r2, [r3, #0]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d23e      	bcs.n	8013fde <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	019b      	lsls	r3, r3, #6
 8013f6e:	440b      	add	r3, r1
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	4413      	add	r3, r2
 8013f74:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
         MsgIndex<MaxN2kCANMsgs &&
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d12e      	bne.n	8013fda <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	4619      	mov	r1, r3
 8013f86:	460b      	mov	r3, r1
 8013f88:	019b      	lsls	r3, r3, #6
 8013f8a:	440b      	add	r3, r1
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	4413      	add	r3, r2
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7f8 ff7f 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 8013f96:	4603      	mov	r3, r0
 8013f98:	f083 0301 	eor.w	r3, r3, #1
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d11b      	bne.n	8013fda <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Destination==Destination
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	4619      	mov	r1, r3
 8013fac:	460b      	mov	r3, r1
 8013fae:	019b      	lsls	r3, r3, #6
 8013fb0:	440b      	add	r3, r1
 8013fb2:	009b      	lsls	r3, r3, #2
 8013fb4:	4413      	add	r3, r2
 8013fb6:	7b5b      	ldrb	r3, [r3, #13]
 8013fb8:	79ba      	ldrb	r2, [r7, #6]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d10d      	bne.n	8013fda <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x59e>
            && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	460b      	mov	r3, r1
 8013fca:	019b      	lsls	r3, r3, #6
 8013fcc:	440b      	add	r3, r1
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4413      	add	r3, r2
 8013fd2:	7b1b      	ldrb	r3, [r3, #12]
         !( !N2kCANMsgBuf[MsgIndex].FreeMsg
 8013fd4:	79fa      	ldrb	r2, [r7, #7]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d001      	beq.n	8013fde <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a2>
         MsgIndex<MaxN2kCANMsgs &&
 8013fda:	2301      	movs	r3, #1
 8013fdc:	e000      	b.n	8013fe0 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5a4>
 8013fde:	2300      	movs	r3, #0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d006      	beq.n	8013ff2 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x5b6>
          );
         MsgIndex++);
 8013fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fe6:	781b      	ldrb	r3, [r3, #0]
    for (MsgIndex=0;
 8013fe8:	3301      	adds	r3, #1
 8013fea:	b2da      	uxtb	r2, r3
 8013fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fee:	701a      	strb	r2, [r3, #0]
 8013ff0:	e7af      	b.n	8013f52 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x516>
    // if (MsgIndex==MaxN2kCANMsgs) N2kMsgDbgln("TP data msg not found");
    // for (int i=1; i<len; i++) N2kMsgDbgln(buf[i]);
    if (MsgIndex<MaxN2kCANMsgs) { // found TP message under reception
 8013ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ff4:	781a      	ldrb	r2, [r3, #0]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	f080 8149 	bcs.w	8014294 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
      N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
      if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right packet is coming
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	4619      	mov	r1, r3
 801400c:	460b      	mov	r3, r1
 801400e:	019b      	lsls	r3, r3, #6
 8014010:	440b      	add	r3, r1
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	4413      	add	r3, r2
 8014016:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 801401a:	3301      	adds	r3, #1
 801401c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801401e:	7812      	ldrb	r2, [r2, #0]
 8014020:	4293      	cmp	r3, r2
 8014022:	f040 80f1 	bne.w	8014208 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x7cc>
        // Add packet to the message
        CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	4619      	mov	r1, r3
 8014030:	460b      	mov	r3, r1
 8014032:	019b      	lsls	r3, r3, #6
 8014034:	440b      	add	r3, r1
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	18d0      	adds	r0, r2, r3
 801403a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801403e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014040:	2101      	movs	r1, #1
 8014042:	f7fe ff6c 	bl	8012f1e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
        N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	4619      	mov	r1, r3
 8014050:	460b      	mov	r3, r1
 8014052:	019b      	lsls	r3, r3, #6
 8014054:	440b      	add	r3, r1
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	4413      	add	r3, r2
 801405a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801405c:	7812      	ldrb	r2, [r2, #0]
 801405e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        // Transport protocol is slower, so to avoid timeout, we reset message time
        N2kCANMsgBuf[MsgIndex].N2kMsg.MsgTime=N2kMillis();
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	4619      	mov	r1, r3
 801406c:	460b      	mov	r3, r1
 801406e:	019b      	lsls	r3, r3, #6
 8014070:	440b      	add	r3, r1
 8014072:	009b      	lsls	r3, r3, #2
 8014074:	18d4      	adds	r4, r2, r3
 8014076:	f7fb fee1 	bl	800fe3c <_Z9N2kMillisv>
 801407a:	4603      	mov	r3, r0
 801407c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if ( N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen ) { // all done
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	4619      	mov	r1, r3
 801408a:	460b      	mov	r3, r1
 801408c:	019b      	lsls	r3, r3, #6
 801408e:	440b      	add	r3, r1
 8014090:	009b      	lsls	r3, r3, #2
 8014092:	4413      	add	r3, r2
 8014094:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8014098:	4618      	mov	r0, r3
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801409e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	4619      	mov	r1, r3
 80140a4:	460b      	mov	r3, r1
 80140a6:	019b      	lsls	r3, r3, #6
 80140a8:	440b      	add	r3, r1
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	4413      	add	r3, r2
 80140ae:	691b      	ldr	r3, [r3, #16]
 80140b0:	4298      	cmp	r0, r3
 80140b2:	db4c      	blt.n	801414e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x712>
          N2kCANMsgBuf[MsgIndex].Ready=true;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	4619      	mov	r1, r3
 80140be:	460b      	mov	r3, r1
 80140c0:	019b      	lsls	r3, r3, #6
 80140c2:	440b      	add	r3, r1
 80140c4:	009b      	lsls	r3, r3, #2
 80140c6:	4413      	add	r3, r2
 80140c8:	2201      	movs	r2, #1
 80140ca:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // send response
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	4619      	mov	r1, r3
 80140d8:	460b      	mov	r3, r1
 80140da:	019b      	lsls	r3, r3, #6
 80140dc:	440b      	add	r3, r1
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	4413      	add	r3, r2
 80140e2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	f000 80be 	beq.w	8014268 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 80140ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	f2c0 80ba 	blt.w	8014268 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_EndAck(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen,N2kCANMsgBuf[MsgIndex].LastFrame);
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	4619      	mov	r1, r3
 80140fe:	460b      	mov	r3, r1
 8014100:	019b      	lsls	r3, r3, #6
 8014102:	440b      	add	r3, r1
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	4413      	add	r3, r2
 8014108:	6898      	ldr	r0, [r3, #8]
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	4619      	mov	r1, r3
 8014114:	460b      	mov	r3, r1
 8014116:	019b      	lsls	r3, r3, #6
 8014118:	440b      	add	r3, r1
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	4413      	add	r3, r2
 801411e:	691b      	ldr	r3, [r3, #16]
 8014120:	b29a      	uxth	r2, r3
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8014126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	461c      	mov	r4, r3
 801412c:	4623      	mov	r3, r4
 801412e:	019b      	lsls	r3, r3, #6
 8014130:	4423      	add	r3, r4
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	440b      	add	r3, r1
 8014136:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 801413a:	79f9      	ldrb	r1, [r7, #7]
 801413c:	9301      	str	r3, [sp, #4]
 801413e:	9200      	str	r2, [sp, #0]
 8014140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014142:	460a      	mov	r2, r1
 8014144:	4601      	mov	r1, r0
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f7ff fa3b 	bl	80135c2 <_ZN9tNMEA200015SendTPCM_EndAckEmhith>
 801414c:	e08c      	b.n	8014268 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        } else {
          if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && ((N2kCANMsgBuf[MsgIndex].LastFrame)%N2kCANMsgBuf[MsgIndex].TPRequireCTS)==0 ) { // send response
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	4619      	mov	r1, r3
 8014158:	460b      	mov	r3, r1
 801415a:	019b      	lsls	r3, r3, #6
 801415c:	440b      	add	r3, r1
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	4413      	add	r3, r2
 8014162:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8014166:	2b00      	cmp	r3, #0
 8014168:	d07e      	beq.n	8014268 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801416e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	4619      	mov	r1, r3
 8014174:	460b      	mov	r3, r1
 8014176:	019b      	lsls	r3, r3, #6
 8014178:	440b      	add	r3, r1
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	4413      	add	r3, r2
 801417e:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8014186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	4618      	mov	r0, r3
 801418c:	4603      	mov	r3, r0
 801418e:	019b      	lsls	r3, r3, #6
 8014190:	4403      	add	r3, r0
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	440b      	add	r3, r1
 8014196:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 801419a:	fbb2 f1f3 	udiv	r1, r2, r3
 801419e:	fb01 f303 	mul.w	r3, r1, r3
 80141a2:	1ad3      	subs	r3, r2, r3
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d15e      	bne.n	8014268 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
            SendTPCM_CTS(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,N2kCANMsgBuf[MsgIndex].TPMaxPackets,N2kCANMsgBuf[MsgIndex].LastFrame+1);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	4619      	mov	r1, r3
 80141b4:	460b      	mov	r3, r1
 80141b6:	019b      	lsls	r3, r3, #6
 80141b8:	440b      	add	r3, r1
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	4413      	add	r3, r2
 80141be:	6898      	ldr	r0, [r3, #8]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	4619      	mov	r1, r3
 80141ca:	460b      	mov	r3, r1
 80141cc:	019b      	lsls	r3, r3, #6
 80141ce:	440b      	add	r3, r1
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	4413      	add	r3, r2
 80141d4:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80141dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	461c      	mov	r4, r3
 80141e2:	4623      	mov	r3, r4
 80141e4:	019b      	lsls	r3, r3, #6
 80141e6:	4423      	add	r3, r4
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	440b      	add	r3, r1
 80141ec:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80141f0:	3301      	adds	r3, #1
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	79f9      	ldrb	r1, [r7, #7]
 80141f6:	9301      	str	r3, [sp, #4]
 80141f8:	9200      	str	r2, [sp, #0]
 80141fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fc:	460a      	mov	r2, r1
 80141fe:	4601      	mov	r1, r0
 8014200:	68f8      	ldr	r0, [r7, #12]
 8014202:	f7ff f945 	bl	8013490 <_ZN9tNMEA200012SendTPCM_CTSEmhihh>
 8014206:	e02f      	b.n	8014268 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x82c>
          }
        }
      } else { // Wrong packet - either we lost packet or sender sends wrong, so free this
        N2kMsgDbgStart("Invalid packet: "); N2kMsgDbgln(buf[0]);
        if ( N2kCANMsgBuf[MsgIndex].TPRequireCTS>0 && iDev>=0 ) { // We need to abort transport
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801420c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	4619      	mov	r1, r3
 8014212:	460b      	mov	r3, r1
 8014214:	019b      	lsls	r3, r3, #6
 8014216:	440b      	add	r3, r1
 8014218:	009b      	lsls	r3, r3, #2
 801421a:	4413      	add	r3, r2
 801421c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8014220:	2b00      	cmp	r3, #0
 8014222:	d014      	beq.n	801424e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
 8014224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014226:	2b00      	cmp	r3, #0
 8014228:	db11      	blt.n	801424e <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x812>
          SendTPCM_Abort(N2kCANMsgBuf[MsgIndex].N2kMsg.PGN,Source,iDev,TP_CM_AbortTimeout);  // Abort transport
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	4619      	mov	r1, r3
 8014234:	460b      	mov	r3, r1
 8014236:	019b      	lsls	r3, r3, #6
 8014238:	440b      	add	r3, r1
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	4413      	add	r3, r2
 801423e:	6899      	ldr	r1, [r3, #8]
 8014240:	79fa      	ldrb	r2, [r7, #7]
 8014242:	2303      	movs	r3, #3
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014248:	68f8      	ldr	r0, [r7, #12]
 801424a:	f7ff fa48 	bl	80136de <_ZN9tNMEA200014SendTPCM_AbortEmhih>
        }
        N2kCANMsgBuf[MsgIndex].FreeMessage();
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	4619      	mov	r1, r3
 8014258:	460b      	mov	r3, r1
 801425a:	019b      	lsls	r3, r3, #6
 801425c:	440b      	add	r3, r1
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	4413      	add	r3, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f7fb fe8c 	bl	800ff80 <_ZN10tN2kCANMsg11FreeMessageEv>

      }
      if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801426c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	4619      	mov	r1, r3
 8014272:	460b      	mov	r3, r1
 8014274:	019b      	lsls	r3, r3, #6
 8014276:	440b      	add	r3, r1
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	4413      	add	r3, r2
 801427c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014280:	f083 0301 	eor.w	r3, r3, #1
 8014284:	b2db      	uxtb	r3, r3
 8014286:	2b00      	cmp	r3, #0
 8014288:	d004      	beq.n	8014294 <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x858>
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014292:	701a      	strb	r2, [r3, #0]
    }
    return true; // We handled message
 8014294:	2301      	movs	r3, #1
 8014296:	e000      	b.n	801429a <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh+0x85e>
  }

  return false;
 8014298:	2300      	movs	r3, #0
}
 801429a:	4618      	mov	r0, r3
 801429c:	3734      	adds	r7, #52	; 0x34
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd90      	pop	{r4, r7, pc}
 80142a2:	bf00      	nop

080142a4 <_ZN7tN2kMsgaSERKS_>:
class tN2kMsg
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	6039      	str	r1, [r7, #0]
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	791a      	ldrb	r2, [r3, #4]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	711a      	strb	r2, [r3, #4]
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	689a      	ldr	r2, [r3, #8]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	609a      	str	r2, [r3, #8]
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	7b1a      	ldrb	r2, [r3, #12]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	731a      	strb	r2, [r3, #12]
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	7b5a      	ldrb	r2, [r3, #13]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	735a      	strb	r2, [r3, #13]
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	691a      	ldr	r2, [r3, #16]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	611a      	str	r2, [r3, #16]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f103 0114 	add.w	r1, r3, #20
 80142dc:	22de      	movs	r2, #222	; 0xde
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	3314      	adds	r3, #20
 80142e2:	2a00      	cmp	r2, #0
 80142e4:	db05      	blt.n	80142f2 <_ZN7tN2kMsgaSERKS_+0x4e>
 80142e6:	7818      	ldrb	r0, [r3, #0]
 80142e8:	7008      	strb	r0, [r1, #0]
 80142ea:	3101      	adds	r1, #1
 80142ec:	3301      	adds	r3, #1
 80142ee:	3a01      	subs	r2, #1
 80142f0:	e7f7      	b.n	80142e2 <_ZN7tN2kMsgaSERKS_+0x3e>
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	370c      	adds	r7, #12
 8014310:	46bd      	mov	sp, r7
 8014312:	bc80      	pop	{r7}
 8014314:	4770      	bx	lr

08014316 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi>:

//*****************************************************************************
bool tNMEA2000::StartSendTPMessage(const tN2kMsg& msg, int iDev) {
 8014316:	b580      	push	{r7, lr}
 8014318:	b086      	sub	sp, #24
 801431a:	af00      	add	r7, sp, #0
 801431c:	60f8      	str	r0, [r7, #12]
 801431e:	60b9      	str	r1, [r7, #8]
 8014320:	607a      	str	r2, [r7, #4]
  if ( !IsValidDevice(iDev) ) return false;
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	68f8      	ldr	r0, [r7, #12]
 8014326:	f7fc f983 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 801432a:	4603      	mov	r3, r0
 801432c:	f083 0301 	eor.w	r3, r3, #1
 8014330:	b2db      	uxtb	r3, r3
 8014332:	2b00      	cmp	r3, #0
 8014334:	d001      	beq.n	801433a <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x24>
 8014336:	2300      	movs	r3, #0
 8014338:	e061      	b.n	80143fe <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  if ( Devices[iDev].PendingTPMsg.PGN!=0 ) return false; // No room for sending TP message
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	69da      	ldr	r2, [r3, #28]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014344:	fb01 f303 	mul.w	r3, r1, r3
 8014348:	4413      	add	r3, r2
 801434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801434c:	2b00      	cmp	r3, #0
 801434e:	d001      	beq.n	8014354 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0x3e>
 8014350:	2300      	movs	r3, #0
 8014352:	e054      	b.n	80143fe <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xe8>

  int result=false;
 8014354:	2300      	movs	r3, #0
 8014356:	617b      	str	r3, [r7, #20]

  Devices[iDev].HasPendingInformation=true;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	69da      	ldr	r2, [r3, #28]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014362:	fb01 f303 	mul.w	r3, r1, r3
 8014366:	4413      	add	r3, r2
 8014368:	2201      	movs	r2, #1
 801436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  Devices[iDev].PendingTPMsg=msg;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	69da      	ldr	r2, [r3, #28]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014378:	fb01 f303 	mul.w	r3, r1, r3
 801437c:	4413      	add	r3, r2
 801437e:	3338      	adds	r3, #56	; 0x38
 8014380:	68b9      	ldr	r1, [r7, #8]
 8014382:	4618      	mov	r0, r3
 8014384:	f7ff ff8e 	bl	80142a4 <_ZN7tN2kMsgaSERKS_>
  Devices[iDev].NextDTSequence=0;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	69da      	ldr	r2, [r3, #28]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014392:	fb01 f303 	mul.w	r3, r1, r3
 8014396:	4413      	add	r3, r2
 8014398:	2200      	movs	r2, #0
 801439a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  Devices[iDev].NextDTSendTime.FromNow(50);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	69da      	ldr	r2, [r3, #28]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80143a8:	fb01 f303 	mul.w	r3, r1, r3
 80143ac:	4413      	add	r3, r2
 80143ae:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80143b2:	2132      	movs	r1, #50	; 0x32
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7fb feb4 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
  if ( IsBroadcast(msg.Destination) ) { // Start with BAM
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	7b5b      	ldrb	r3, [r3, #13]
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f8 f847 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d006      	beq.n	80143d8 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xc2>
    result=SendTPCM_BAM(iDev);
 80143ca:	6879      	ldr	r1, [r7, #4]
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f7fe fea5 	bl	801311c <_ZN9tNMEA200012SendTPCM_BAMEi>
 80143d2:	4603      	mov	r3, r0
 80143d4:	617b      	str	r3, [r7, #20]
 80143d6:	e005      	b.n	80143e4 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xce>
  } else {
    result=SendTPCM_RTS(iDev);
 80143d8:	6879      	ldr	r1, [r7, #4]
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	f7fe ff68 	bl	80132b0 <_ZN9tNMEA200012SendTPCM_RTSEi>
 80143e0:	4603      	mov	r3, r0
 80143e2:	617b      	str	r3, [r7, #20]
  }

  if ( !result ) EndSendTPMessage(iDev); // Currently no retry
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d103      	bne.n	80143f2 <_ZN9tNMEA200018StartSendTPMessageERK7tN2kMsgi+0xdc>
 80143ea:	6879      	ldr	r1, [r7, #4]
 80143ec:	68f8      	ldr	r0, [r7, #12]
 80143ee:	f000 f80a 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>

  return result;
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	bf14      	ite	ne
 80143f8:	2301      	movne	r3, #1
 80143fa:	2300      	moveq	r3, #0
 80143fc:	b2db      	uxtb	r3, r3
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3718      	adds	r7, #24
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <_ZN9tNMEA200016EndSendTPMessageEi>:

//*****************************************************************************
void tNMEA2000::EndSendTPMessage(int iDev) {
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
 801440e:	6039      	str	r1, [r7, #0]
  Devices[iDev].PendingTPMsg.Clear();
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	69da      	ldr	r2, [r3, #28]
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801441a:	fb01 f303 	mul.w	r3, r1, r3
 801441e:	4413      	add	r3, r2
 8014420:	3338      	adds	r3, #56	; 0x38
 8014422:	4618      	mov	r0, r3
 8014424:	f7fa fcaf 	bl	800ed86 <_ZN7tN2kMsg5ClearEv>
  Devices[iDev].NextDTSendTime.Disable();
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	69da      	ldr	r2, [r3, #28]
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014432:	fb01 f303 	mul.w	r3, r1, r3
 8014436:	4413      	add	r3, r2
 8014438:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801443c:	4618      	mov	r0, r3
 801443e:	f7fb fe23 	bl	8010088 <_ZN13tN2kScheduler7DisableEv>
  Devices[iDev].UpdateHasPendingInformation();
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	69da      	ldr	r2, [r3, #28]
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801444c:	fb01 f303 	mul.w	r3, r1, r3
 8014450:	4413      	add	r3, r2
 8014452:	4618      	mov	r0, r3
 8014454:	f7fc f84a 	bl	80104ec <_ZN9tNMEA200015tInternalDevice27UpdateHasPendingInformationEv>
}
 8014458:	bf00      	nop
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <_ZN9tNMEA200020SendPendingTPMessageEi>:

//*****************************************************************************
void tNMEA2000::SendPendingTPMessage(int iDev) {
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	6039      	str	r1, [r7, #0]
  if ( Devices[iDev].PendingTPMsg.PGN!=0 && Devices[iDev].NextDTSendTime.IsTime() ) { // Pending message and timed out
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	69da      	ldr	r2, [r3, #28]
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014474:	fb01 f303 	mul.w	r3, r1, r3
 8014478:	4413      	add	r3, r2
 801447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801447c:	2b00      	cmp	r3, #0
 801447e:	d011      	beq.n	80144a4 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	69da      	ldr	r2, [r3, #28]
 8014484:	683b      	ldr	r3, [r7, #0]
 8014486:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801448a:	fb01 f303 	mul.w	r3, r1, r3
 801448e:	4413      	add	r3, r2
 8014490:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8014494:	4618      	mov	r0, r3
 8014496:	f7fb fe26 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d001      	beq.n	80144a4 <_ZN9tNMEA200020SendPendingTPMessageEi+0x44>
 80144a0:	2301      	movs	r3, #1
 80144a2:	e000      	b.n	80144a6 <_ZN9tNMEA200020SendPendingTPMessageEi+0x46>
 80144a4:	2300      	movs	r3, #0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d031      	beq.n	801450e <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
    if ( IsBroadcast(Devices[iDev].PendingTPMsg.Destination) ) { // For broadcast we just send next data
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	69da      	ldr	r2, [r3, #28]
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80144b4:	fb01 f303 	mul.w	r3, r1, r3
 80144b8:	4413      	add	r3, r2
 80144ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144be:	4618      	mov	r0, r3
 80144c0:	f7f7 ffc7 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d01d      	beq.n	8014506 <_ZN9tNMEA200020SendPendingTPMessageEi+0xa6>
      SendTPDT(iDev);
 80144ca:	6839      	ldr	r1, [r7, #0]
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f7ff f998 	bl	8013802 <_ZN9tNMEA20008SendTPDTEi>
      Devices[iDev].NextDTSendTime.FromNow(50);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	69da      	ldr	r2, [r3, #28]
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80144dc:	fb01 f303 	mul.w	r3, r1, r3
 80144e0:	4413      	add	r3, r2
 80144e2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80144e6:	2132      	movs	r1, #50	; 0x32
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fb fe1a 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
      if ( HasAllTPDTSent(iDev) ) EndSendTPMessage(iDev); // All done
 80144ee:	6839      	ldr	r1, [r7, #0]
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7ff fa7c 	bl	80139ee <_ZN9tNMEA200014HasAllTPDTSentEi>
 80144f6:	4603      	mov	r3, r0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d008      	beq.n	801450e <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7ff ff81 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
    } else { // We have not got response from receiver within timeout, so just end. Or should we retry?
      EndSendTPMessage(iDev);
    }
  }
}
 8014504:	e003      	b.n	801450e <_ZN9tNMEA200020SendPendingTPMessageEi+0xae>
      EndSendTPMessage(iDev);
 8014506:	6839      	ldr	r1, [r7, #0]
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f7ff ff7c 	bl	8014406 <_ZN9tNMEA200016EndSendTPMessageEi>
}
 801450e:	bf00      	nop
 8014510:	3708      	adds	r7, #8
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <_Z22IsFastPacketFirstFrameh>:

#endif

//*****************************************************************************
inline bool IsFastPacketFirstFrame(unsigned char b) { return ((b & 0x1F)==0); }
 8014516:	b480      	push	{r7}
 8014518:	b083      	sub	sp, #12
 801451a:	af00      	add	r7, sp, #0
 801451c:	4603      	mov	r3, r0
 801451e:	71fb      	strb	r3, [r7, #7]
 8014520:	79fb      	ldrb	r3, [r7, #7]
 8014522:	f003 031f 	and.w	r3, r3, #31
 8014526:	2b00      	cmp	r3, #0
 8014528:	bf0c      	ite	eq
 801452a:	2301      	moveq	r3, #1
 801452c:	2300      	movne	r3, #0
 801452e:	b2db      	uxtb	r3, r3
 8014530:	4618      	mov	r0, r3
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	bc80      	pop	{r7}
 8014538:	4770      	bx	lr

0801453a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>:

//*****************************************************************************
// Function handles received CAN frame and adds it to tN2kCANMsg.
// Returns: Index to ready tN2kCANMsg or MaxN2kCANMsgs, if we skipped the frame
//          or message is not ready (fast packet or ISO Multi-Packet)
uint8_t tNMEA2000::SetN2kCANBufMsg(unsigned long canId, unsigned char len, unsigned char *buf) {
 801453a:	b590      	push	{r4, r7, lr}
 801453c:	b08d      	sub	sp, #52	; 0x34
 801453e:	af04      	add	r7, sp, #16
 8014540:	60f8      	str	r0, [r7, #12]
 8014542:	60b9      	str	r1, [r7, #8]
 8014544:	603b      	str	r3, [r7, #0]
 8014546:	4613      	mov	r3, r2
 8014548:	71fb      	strb	r3, [r7, #7]
  unsigned char Source;
  unsigned char Destination;
  bool FastPacket;
  bool SystemMessage;
  bool KnownMessage;
  uint8_t MsgIndex=MaxN2kCANMsgs;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014550:	74fb      	strb	r3, [r7, #19]

    CanIdToN2k(canId,Priority,PGN,Source,Destination);
 8014552:	f107 0017 	add.w	r0, r7, #23
 8014556:	f107 0218 	add.w	r2, r7, #24
 801455a:	f107 011e 	add.w	r1, r7, #30
 801455e:	f107 0316 	add.w	r3, r7, #22
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	4603      	mov	r3, r0
 8014566:	68b8      	ldr	r0, [r7, #8]
 8014568:	f7fd fdd8 	bl	801211c <_Z10CanIdToN2kmRhRmS_S_>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    if ( !TestHandleTPMessage(PGN,Source,Destination,len,buf,MsgIndex) )
 801456c:	69b9      	ldr	r1, [r7, #24]
 801456e:	7dfa      	ldrb	r2, [r7, #23]
 8014570:	7db8      	ldrb	r0, [r7, #22]
 8014572:	f107 0313 	add.w	r3, r7, #19
 8014576:	9302      	str	r3, [sp, #8]
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	9301      	str	r3, [sp, #4]
 801457c:	79fb      	ldrb	r3, [r7, #7]
 801457e:	9300      	str	r3, [sp, #0]
 8014580:	4603      	mov	r3, r0
 8014582:	68f8      	ldr	r0, [r7, #12]
 8014584:	f7ff fa5a 	bl	8013a3c <_ZN9tNMEA200019TestHandleTPMessageEmhhhPhRh>
 8014588:	4603      	mov	r3, r0
 801458a:	f083 0301 	eor.w	r3, r3, #1
 801458e:	b2db      	uxtb	r3, r3
 8014590:	2b00      	cmp	r3, #0
 8014592:	f000 81a3 	beq.w	80148dc <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
#endif
    {
      KnownMessage=CheckKnownMessage(PGN,SystemMessage,FastPacket);
 8014596:	69b9      	ldr	r1, [r7, #24]
 8014598:	f107 0315 	add.w	r3, r7, #21
 801459c:	f107 0214 	add.w	r2, r7, #20
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	f7fe fbd7 	bl	8012d54 <_ZN9tNMEA200017CheckKnownMessageEmRbS0_>
 80145a6:	4603      	mov	r3, r0
 80145a8:	77fb      	strb	r3, [r7, #31]
      if ( KnownMessage || !HandleOnlyKnownMessages() ) {
 80145aa:	7ffb      	ldrb	r3, [r7, #31]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d108      	bne.n	80145c2 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x88>
 80145b0:	68f8      	ldr	r0, [r7, #12]
 80145b2:	f7fc f817 	bl	80105e4 <_ZNK9tNMEA200023HandleOnlyKnownMessagesEv>
 80145b6:	4603      	mov	r3, r0
 80145b8:	f083 0301 	eor.w	r3, r3, #1
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8c>
 80145c2:	2301      	movs	r3, #1
 80145c4:	e000      	b.n	80145c8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x8e>
 80145c6:	2300      	movs	r3, #0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	f000 8187 	beq.w	80148dc <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
        if (FastPacket && !IsFastPacketFirstFrame(buf[0]) ) { // Not first frame
 80145ce:	7d7b      	ldrb	r3, [r7, #21]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d00c      	beq.n	80145ee <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	4618      	mov	r0, r3
 80145da:	f7ff ff9c 	bl	8014516 <_Z22IsFastPacketFirstFrameh>
 80145de:	4603      	mov	r3, r0
 80145e0:	f083 0301 	eor.w	r3, r3, #1
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d001      	beq.n	80145ee <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb4>
 80145ea:	2301      	movs	r3, #1
 80145ec:	e000      	b.n	80145f0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xb6>
 80145ee:	2300      	movs	r3, #0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d07e      	beq.n	80146f2 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x1b8>
        N2kFrameInDbgStart("New frame="); N2kFrameInDbg(PGN); N2kFrameInDbg(" frame="); N2kFrameInDbg(buf[0],HEX); N2kFrameInDbgln();
          // Find previous slot for this PGN
          for (MsgIndex=0;
 80145f4:	2300      	movs	r3, #0
 80145f6:	74fb      	strb	r3, [r7, #19]
               MsgIndex<MaxN2kCANMsgs &&
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80145fe:	7cfb      	ldrb	r3, [r7, #19]
 8014600:	429a      	cmp	r2, r3
 8014602:	d92a      	bls.n	801465a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014608:	7cfb      	ldrb	r3, [r7, #19]
 801460a:	4619      	mov	r1, r3
 801460c:	460b      	mov	r3, r1
 801460e:	019b      	lsls	r3, r3, #6
 8014610:	440b      	add	r3, r1
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	4413      	add	r3, r2
 8014616:	689a      	ldr	r2, [r3, #8]
 8014618:	69bb      	ldr	r3, [r7, #24]
               MsgIndex<MaxN2kCANMsgs &&
 801461a:	429a      	cmp	r2, r3
 801461c:	d11b      	bne.n	8014656 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
                  && N2kCANMsgBuf[MsgIndex].N2kMsg.Source==Source
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014622:	7cfb      	ldrb	r3, [r7, #19]
 8014624:	4619      	mov	r1, r3
 8014626:	460b      	mov	r3, r1
 8014628:	019b      	lsls	r3, r3, #6
 801462a:	440b      	add	r3, r1
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	4413      	add	r3, r2
 8014630:	7b1a      	ldrb	r2, [r3, #12]
 8014632:	7dfb      	ldrb	r3, [r7, #23]
 8014634:	429a      	cmp	r2, r3
 8014636:	d10e      	bne.n	8014656 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x11c>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
                  && !N2kCANMsgBuf[MsgIndex].N2kMsg.IsTPMessage()
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801463c:	7cfb      	ldrb	r3, [r7, #19]
 801463e:	4619      	mov	r1, r3
 8014640:	460b      	mov	r3, r1
 8014642:	019b      	lsls	r3, r3, #6
 8014644:	440b      	add	r3, r1
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	4413      	add	r3, r2
 801464a:	4618      	mov	r0, r3
 801464c:	f7f8 fc22 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 8014650:	4603      	mov	r3, r0
               !( N2kCANMsgBuf[MsgIndex].N2kMsg.PGN==PGN
 8014652:	2b00      	cmp	r3, #0
 8014654:	d001      	beq.n	801465a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x120>
               MsgIndex<MaxN2kCANMsgs &&
 8014656:	2301      	movs	r3, #1
 8014658:	e000      	b.n	801465c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x122>
 801465a:	2300      	movs	r3, #0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d004      	beq.n	801466a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x130>
          for (MsgIndex=0;
 8014660:	7cfb      	ldrb	r3, [r7, #19]
 8014662:	3301      	adds	r3, #1
 8014664:	b2db      	uxtb	r3, r3
 8014666:	74fb      	strb	r3, [r7, #19]
 8014668:	e7c6      	b.n	80145f8 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0xbe>
#endif
                );
               MsgIndex++);
          if (MsgIndex<MaxN2kCANMsgs) { // we found start for this message, so add data to it.
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014670:	7cfb      	ldrb	r3, [r7, #19]
 8014672:	429a      	cmp	r2, r3
 8014674:	f240 80f2 	bls.w	801485c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            if (N2kCANMsgBuf[MsgIndex].LastFrame+1 == buf[0]) { // Right frame is coming
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801467c:	7cfb      	ldrb	r3, [r7, #19]
 801467e:	4619      	mov	r1, r3
 8014680:	460b      	mov	r3, r1
 8014682:	019b      	lsls	r3, r3, #6
 8014684:	440b      	add	r3, r1
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 801468e:	3301      	adds	r3, #1
 8014690:	683a      	ldr	r2, [r7, #0]
 8014692:	7812      	ldrb	r2, [r2, #0]
 8014694:	4293      	cmp	r3, r2
 8014696:	d11b      	bne.n	80146d0 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x196>
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801469c:	7cfb      	ldrb	r3, [r7, #19]
 801469e:	4619      	mov	r1, r3
 80146a0:	460b      	mov	r3, r1
 80146a2:	019b      	lsls	r3, r3, #6
 80146a4:	440b      	add	r3, r1
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	4413      	add	r3, r2
 80146aa:	683a      	ldr	r2, [r7, #0]
 80146ac:	7812      	ldrb	r2, [r2, #0]
 80146ae:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],1,len,buf);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146b6:	7cfb      	ldrb	r3, [r7, #19]
 80146b8:	4619      	mov	r1, r3
 80146ba:	460b      	mov	r3, r1
 80146bc:	019b      	lsls	r3, r3, #6
 80146be:	440b      	add	r3, r1
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	18d0      	adds	r0, r2, r3
 80146c4:	79fa      	ldrb	r2, [r7, #7]
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	2101      	movs	r1, #1
 80146ca:	f7fe fc28 	bl	8012f1e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
 80146ce:	e0c5      	b.n	801485c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else { // We have lost frame, so free this
              N2kFrameErrDbgStart("Lost frame ");  N2kFrameErrDbg(N2kCANMsgBuf[MsgIndex].LastFrame); N2kFrameErrDbg("/");  N2kFrameErrDbg(buf[0]);
              N2kFrameErrDbg(", source ");  N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
              N2kCANMsgBuf[MsgIndex].FreeMessage();
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146d4:	7cfb      	ldrb	r3, [r7, #19]
 80146d6:	4619      	mov	r1, r3
 80146d8:	460b      	mov	r3, r1
 80146da:	019b      	lsls	r3, r3, #6
 80146dc:	440b      	add	r3, r1
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	4413      	add	r3, r2
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7fb fc4c 	bl	800ff80 <_ZN10tN2kCANMsg11FreeMessageEv>
              MsgIndex=MaxN2kCANMsgs;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80146ee:	74fb      	strb	r3, [r7, #19]
 80146f0:	e0b4      	b.n	801485c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
              N2kFrameErrDbgStart("Orphan frame "); N2kFrameErrDbg(buf[0]); N2kFrameErrDbg(", source ");
              N2kFrameErrDbg(Source); N2kFrameErrDbg(" for: "); N2kFrameErrDbgln(PGN);
          }
        } else { // Handle first frame
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
          FindFreeCANMsgIndex(PGN,Source,Destination,false,MsgIndex);
 80146f2:	69b9      	ldr	r1, [r7, #24]
 80146f4:	7dfa      	ldrb	r2, [r7, #23]
 80146f6:	7db8      	ldrb	r0, [r7, #22]
 80146f8:	f107 0313 	add.w	r3, r7, #19
 80146fc:	9301      	str	r3, [sp, #4]
 80146fe:	2300      	movs	r3, #0
 8014700:	9300      	str	r3, [sp, #0]
 8014702:	4603      	mov	r3, r0
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f7fe fc44 	bl	8012f92 <_ZN9tNMEA200019FindFreeCANMsgIndexEmhhbRh>
#else
          FindFreeCANMsgIndex(PGN,Source,Destination,MsgIndex);
#endif
          if ( MsgIndex<MaxN2kCANMsgs ) { // we found free place, so handle frame
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014710:	7cfb      	ldrb	r3, [r7, #19]
 8014712:	429a      	cmp	r2, r3
 8014714:	f240 80a2 	bls.w	801485c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            N2kMsgDbgStart("Use msg slot: "); N2kMsgDbgln(MsgIndex);
            N2kCANMsgBuf[MsgIndex].FreeMsg=false;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801471c:	7cfb      	ldrb	r3, [r7, #19]
 801471e:	4619      	mov	r1, r3
 8014720:	460b      	mov	r3, r1
 8014722:	019b      	lsls	r3, r3, #6
 8014724:	440b      	add	r3, r1
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4413      	add	r3, r2
 801472a:	2200      	movs	r2, #0
 801472c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            N2kCANMsgBuf[MsgIndex].KnownMessage=KnownMessage;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014734:	7cfb      	ldrb	r3, [r7, #19]
 8014736:	4619      	mov	r1, r3
 8014738:	460b      	mov	r3, r1
 801473a:	019b      	lsls	r3, r3, #6
 801473c:	440b      	add	r3, r1
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	4413      	add	r3, r2
 8014742:	7ffa      	ldrb	r2, [r7, #31]
 8014744:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            N2kCANMsgBuf[MsgIndex].SystemMessage=SystemMessage;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801474c:	7cfb      	ldrb	r3, [r7, #19]
 801474e:	4619      	mov	r1, r3
 8014750:	460b      	mov	r3, r1
 8014752:	019b      	lsls	r3, r3, #6
 8014754:	440b      	add	r3, r1
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	7d3a      	ldrb	r2, [r7, #20]
 801475c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            N2kCANMsgBuf[MsgIndex].N2kMsg.Init(Priority,PGN,Source,Destination);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014764:	7cfb      	ldrb	r3, [r7, #19]
 8014766:	4619      	mov	r1, r3
 8014768:	460b      	mov	r3, r1
 801476a:	019b      	lsls	r3, r3, #6
 801476c:	440b      	add	r3, r1
 801476e:	009b      	lsls	r3, r3, #2
 8014770:	4413      	add	r3, r2
 8014772:	461c      	mov	r4, r3
 8014774:	7fb9      	ldrb	r1, [r7, #30]
 8014776:	69ba      	ldr	r2, [r7, #24]
 8014778:	7df8      	ldrb	r0, [r7, #23]
 801477a:	7dbb      	ldrb	r3, [r7, #22]
 801477c:	9300      	str	r3, [sp, #0]
 801477e:	4603      	mov	r3, r0
 8014780:	4620      	mov	r0, r4
 8014782:	f7fa fac6 	bl	800ed12 <_ZN7tN2kMsg4InitEhmhh>
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
            N2kCANMsgBuf[MsgIndex].N2kMsg.SetIsTPMessage(false);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801478a:	7cfb      	ldrb	r3, [r7, #19]
 801478c:	4619      	mov	r1, r3
 801478e:	460b      	mov	r3, r1
 8014790:	019b      	lsls	r3, r3, #6
 8014792:	440b      	add	r3, r1
 8014794:	009b      	lsls	r3, r3, #2
 8014796:	4413      	add	r3, r2
 8014798:	2100      	movs	r1, #0
 801479a:	4618      	mov	r0, r3
 801479c:	f7fb fb95 	bl	800feca <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
            N2kCANMsgBuf[MsgIndex].CopiedLen=0;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147a4:	7cfb      	ldrb	r3, [r7, #19]
 80147a6:	4619      	mov	r1, r3
 80147a8:	460b      	mov	r3, r1
 80147aa:	019b      	lsls	r3, r3, #6
 80147ac:	440b      	add	r3, r1
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	4413      	add	r3, r2
 80147b2:	2200      	movs	r2, #0
 80147b4:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
            if (FastPacket) {
 80147b8:	7d7b      	ldrb	r3, [r7, #21]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d029      	beq.n	8014812 <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x2d8>
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],2,len,buf);
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147c2:	7cfb      	ldrb	r3, [r7, #19]
 80147c4:	4619      	mov	r1, r3
 80147c6:	460b      	mov	r3, r1
 80147c8:	019b      	lsls	r3, r3, #6
 80147ca:	440b      	add	r3, r1
 80147cc:	009b      	lsls	r3, r3, #2
 80147ce:	18d0      	adds	r0, r2, r3
 80147d0:	79fa      	ldrb	r2, [r7, #7]
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	2102      	movs	r1, #2
 80147d6:	f7fe fba2 	bl	8012f1e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("First frame="); N2kFrameInDbg(PGN);  N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=buf[0];
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147de:	7cfb      	ldrb	r3, [r7, #19]
 80147e0:	4619      	mov	r1, r3
 80147e2:	460b      	mov	r3, r1
 80147e4:	019b      	lsls	r3, r3, #6
 80147e6:	440b      	add	r3, r1
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	4413      	add	r3, r2
 80147ec:	683a      	ldr	r2, [r7, #0]
 80147ee:	7812      	ldrb	r2, [r2, #0]
 80147f0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=buf[1];
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	3301      	adds	r3, #1
 80147f8:	7818      	ldrb	r0, [r3, #0]
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147fe:	7cfb      	ldrb	r3, [r7, #19]
 8014800:	4619      	mov	r1, r3
 8014802:	460b      	mov	r3, r1
 8014804:	019b      	lsls	r3, r3, #6
 8014806:	440b      	add	r3, r1
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	4413      	add	r3, r2
 801480c:	4602      	mov	r2, r0
 801480e:	611a      	str	r2, [r3, #16]
 8014810:	e024      	b.n	801485c <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x322>
            } else {
              CopyBufToCANMsg(N2kCANMsgBuf[MsgIndex],0,len,buf);
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014816:	7cfb      	ldrb	r3, [r7, #19]
 8014818:	4619      	mov	r1, r3
 801481a:	460b      	mov	r3, r1
 801481c:	019b      	lsls	r3, r3, #6
 801481e:	440b      	add	r3, r1
 8014820:	009b      	lsls	r3, r3, #2
 8014822:	18d0      	adds	r0, r2, r3
 8014824:	79fa      	ldrb	r2, [r7, #7]
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	2100      	movs	r1, #0
 801482a:	f7fe fb78 	bl	8012f1e <_Z15CopyBufToCANMsgR10tN2kCANMsghhPh>
              N2kFrameInDbgStart("Single frame="); N2kFrameInDbg(PGN); N2kFrameInDbgln();
              N2kCANMsgBuf[MsgIndex].LastFrame=0;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014832:	7cfb      	ldrb	r3, [r7, #19]
 8014834:	4619      	mov	r1, r3
 8014836:	460b      	mov	r3, r1
 8014838:	019b      	lsls	r3, r3, #6
 801483a:	440b      	add	r3, r1
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4413      	add	r3, r2
 8014840:	2200      	movs	r2, #0
 8014842:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
              N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen=len;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801484a:	7cfb      	ldrb	r3, [r7, #19]
 801484c:	4619      	mov	r1, r3
 801484e:	460b      	mov	r3, r1
 8014850:	019b      	lsls	r3, r3, #6
 8014852:	440b      	add	r3, r1
 8014854:	009b      	lsls	r3, r3, #2
 8014856:	4413      	add	r3, r2
 8014858:	79fa      	ldrb	r2, [r7, #7]
 801485a:	611a      	str	r2, [r3, #16]
            }
          }
        }

        if ( MsgIndex<MaxN2kCANMsgs ) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014862:	7cfb      	ldrb	r3, [r7, #19]
 8014864:	429a      	cmp	r2, r3
 8014866:	d939      	bls.n	80148dc <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
          N2kCANMsgBuf[MsgIndex].Ready=(N2kCANMsgBuf[MsgIndex].CopiedLen>=N2kCANMsgBuf[MsgIndex].N2kMsg.DataLen);
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801486c:	7cfb      	ldrb	r3, [r7, #19]
 801486e:	4619      	mov	r1, r3
 8014870:	460b      	mov	r3, r1
 8014872:	019b      	lsls	r3, r3, #6
 8014874:	440b      	add	r3, r1
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4413      	add	r3, r2
 801487a:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 801487e:	461c      	mov	r4, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014884:	7cfb      	ldrb	r3, [r7, #19]
 8014886:	4619      	mov	r1, r3
 8014888:	460b      	mov	r3, r1
 801488a:	019b      	lsls	r3, r3, #6
 801488c:	440b      	add	r3, r1
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4413      	add	r3, r2
 8014892:	691a      	ldr	r2, [r3, #16]
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8014898:	7cfb      	ldrb	r3, [r7, #19]
 801489a:	4618      	mov	r0, r3
 801489c:	4603      	mov	r3, r0
 801489e:	019b      	lsls	r3, r3, #6
 80148a0:	4403      	add	r3, r0
 80148a2:	009b      	lsls	r3, r3, #2
 80148a4:	440b      	add	r3, r1
 80148a6:	4294      	cmp	r4, r2
 80148a8:	bfac      	ite	ge
 80148aa:	2201      	movge	r2, #1
 80148ac:	2200      	movlt	r2, #0
 80148ae:	b2d2      	uxtb	r2, r2
 80148b0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
          if ( !N2kCANMsgBuf[MsgIndex].Ready ) MsgIndex=MaxN2kCANMsgs; // If packet is not ready, do not return index to it
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80148b8:	7cfb      	ldrb	r3, [r7, #19]
 80148ba:	4619      	mov	r1, r3
 80148bc:	460b      	mov	r3, r1
 80148be:	019b      	lsls	r3, r3, #6
 80148c0:	440b      	add	r3, r1
 80148c2:	009b      	lsls	r3, r3, #2
 80148c4:	4413      	add	r3, r2
 80148c6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80148ca:	f083 0301 	eor.w	r3, r3, #1
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d003      	beq.n	80148dc <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh+0x3a2>
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148da:	74fb      	strb	r3, [r7, #19]
        }
      }
    }

    return MsgIndex;
 80148dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3724      	adds	r7, #36	; 0x24
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd90      	pop	{r4, r7, pc}

080148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>:

//*****************************************************************************
 int tNMEA2000::FindSourceDeviceIndex(unsigned char Source) {
 80148e6:	b480      	push	{r7}
 80148e8:	b085      	sub	sp, #20
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	6078      	str	r0, [r7, #4]
 80148ee:	460b      	mov	r3, r1
 80148f0:	70fb      	strb	r3, [r7, #3]
   int i=DeviceCount;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	6a1b      	ldr	r3, [r3, #32]
 80148f6:	60fb      	str	r3, [r7, #12]

     if ( Source<=253 ) {
 80148f8:	78fb      	ldrb	r3, [r7, #3]
 80148fa:	2bfd      	cmp	r3, #253	; 0xfd
 80148fc:	d817      	bhi.n	801492e <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
       for (i=0; i<DeviceCount && Devices[i].N2kSource!=Source; i++);
 80148fe:	2300      	movs	r3, #0
 8014900:	60fb      	str	r3, [r7, #12]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	6a1b      	ldr	r3, [r3, #32]
 8014906:	68fa      	ldr	r2, [r7, #12]
 8014908:	429a      	cmp	r2, r3
 801490a:	da10      	bge.n	801492e <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	69da      	ldr	r2, [r3, #28]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014916:	fb01 f303 	mul.w	r3, r1, r3
 801491a:	4413      	add	r3, r2
 801491c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014920:	78fa      	ldrb	r2, [r7, #3]
 8014922:	429a      	cmp	r2, r3
 8014924:	d003      	beq.n	801492e <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x48>
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	3301      	adds	r3, #1
 801492a:	60fb      	str	r3, [r7, #12]
 801492c:	e7e9      	b.n	8014902 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x1c>
     }

     return (i<DeviceCount?i:-1);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6a1b      	ldr	r3, [r3, #32]
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	429a      	cmp	r2, r3
 8014936:	da01      	bge.n	801493c <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x56>
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	e001      	b.n	8014940 <_ZN9tNMEA200021FindSourceDeviceIndexEh+0x5a>
 801493c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 8014940:	4618      	mov	r0, r3
 8014942:	3714      	adds	r7, #20
 8014944:	46bd      	mov	sp, r7
 8014946:	bc80      	pop	{r7}
 8014948:	4770      	bx	lr

0801494a <_ZN9tNMEA200010IsMySourceEh>:

//*****************************************************************************
bool tNMEA2000::IsMySource(unsigned char Source) {
 801494a:	b580      	push	{r7, lr}
 801494c:	b082      	sub	sp, #8
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
 8014952:	460b      	mov	r3, r1
 8014954:	70fb      	strb	r3, [r7, #3]
    return (FindSourceDeviceIndex(Source)!=-1);
 8014956:	78fb      	ldrb	r3, [r7, #3]
 8014958:	4619      	mov	r1, r3
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f7ff ffc3 	bl	80148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8014960:	4603      	mov	r3, r0
 8014962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014966:	bf14      	ite	ne
 8014968:	2301      	movne	r3, #1
 801496a:	2300      	moveq	r3, #0
 801496c:	b2db      	uxtb	r3, r3
}
 801496e:	4618      	mov	r0, r3
 8014970:	3708      	adds	r7, #8
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kMsg &N2kMsg) {
 8014976:	b580      	push	{r7, lr}
 8014978:	b082      	sub	sp, #8
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	6039      	str	r1, [r7, #0]
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f7fb fde3 	bl	801054c <_ZNK9tNMEA200014ForwardEnabledEv>
 8014986:	4603      	mov	r3, r0
 8014988:	f083 0301 	eor.w	r3, r3, #1
 801498c:	b2db      	uxtb	r3, r3
 801498e:	2b00      	cmp	r3, #0
 8014990:	d118      	bne.n	80149c4 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x4e>
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f7fb fe14 	bl	80105c0 <_ZNK9tNMEA200018ForwardOwnMessagesEv>
 8014998:	4603      	mov	r3, r0
 801499a:	f083 0301 	eor.w	r3, r3, #1
 801499e:	b2db      	uxtb	r3, r3
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d10b      	bne.n	80149bc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x46>
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	7b1b      	ldrb	r3, [r3, #12]
 80149a8:	4619      	mov	r1, r3
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7ff ffcd 	bl	801494a <_ZN9tNMEA200010IsMySourceEh>
 80149b0:	4603      	mov	r3, r0
 80149b2:	f083 0301 	eor.w	r3, r3, #1
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d005      	beq.n	80149c8 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	795b      	ldrb	r3, [r3, #5]
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	d101      	bne.n	80149c8 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x52>
 80149c4:	2301      	movs	r3, #1
 80149c6:	e000      	b.n	80149ca <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x54>
 80149c8:	2300      	movs	r3, #0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d115      	bne.n	80149fa <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x84>

  switch (ForwardType) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	799b      	ldrb	r3, [r3, #6]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d002      	beq.n	80149dc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x66>
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d007      	beq.n	80149ea <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x74>
 80149da:	e00f      	b.n	80149fc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Actisense:
      N2kMsg.SendInActisenseFormat(ForwardStream);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	4619      	mov	r1, r3
 80149e2:	6838      	ldr	r0, [r7, #0]
 80149e4:	f7fa fee0 	bl	800f7a8 <_ZNK7tN2kMsg21SendInActisenseFormatEP9N2kStream>
      break;
 80149e8:	e008      	b.n	80149fc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
    case fwdt_Text:
      N2kMsg.Print(ForwardStream);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	68db      	ldr	r3, [r3, #12]
 80149ee:	2200      	movs	r2, #0
 80149f0:	4619      	mov	r1, r3
 80149f2:	6838      	ldr	r0, [r7, #0]
 80149f4:	f7fa fe24 	bl	800f640 <_ZNK7tN2kMsg5PrintEP9N2kStreamb>
      break;
 80149f8:	e000      	b.n	80149fc <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg+0x86>
  if ( !ForwardEnabled() || ( !( ForwardOwnMessages() && IsMySource(N2kMsg.Source) ) && N2kMode==N2km_NodeOnly ) ) return;
 80149fa:	bf00      	nop
  }
}
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}

08014a02 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>:

//*****************************************************************************
void tNMEA2000::ForwardMessage(const tN2kCANMsg &N2kCanMsg) {
 8014a02:	b580      	push	{r7, lr}
 8014a04:	b082      	sub	sp, #8
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	6078      	str	r0, [r7, #4]
 8014a0a:	6039      	str	r1, [r7, #0]
  if ( N2kCanMsg.KnownMessage || !ForwardOnlyKnownMessages() ) ForwardMessage(N2kCanMsg.N2kMsg);
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d108      	bne.n	8014a28 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x26>
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f7fb fdc0 	bl	801059c <_ZNK9tNMEA200024ForwardOnlyKnownMessagesEv>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	f083 0301 	eor.w	r3, r3, #1
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2a>
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e000      	b.n	8014a2e <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x2c>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d004      	beq.n	8014a3c <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg+0x3a>
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	4619      	mov	r1, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff ff9d 	bl	8014976 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
}
 8014a3c:	bf00      	nop
 8014a3e:	3708      	adds	r7, #8
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>:

//*****************************************************************************
void tNMEA2000::SendIsoAddressClaim(unsigned char Destination, int DeviceIndex, unsigned long FromNow) {
 8014a44:	b590      	push	{r4, r7, lr}
 8014a46:	b0c7      	sub	sp, #284	; 0x11c
 8014a48:	af02      	add	r7, sp, #8
 8014a4a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8014a4e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8014a52:	6020      	str	r0, [r4, #0]
 8014a54:	4608      	mov	r0, r1
 8014a56:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8014a5a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8014a5e:	600a      	str	r2, [r1, #0]
 8014a60:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014a64:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8014a68:	6013      	str	r3, [r2, #0]
 8014a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014a6e:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8014a72:	4602      	mov	r2, r0
 8014a74:	701a      	strb	r2, [r3, #0]

  // Some devices (Garmin) request constantly information on network about others
  // 59904 ISO Request:  PGN = 60928
  // So we need to Re-send Address claim, or they will stop detecting us
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 8014a76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014a7a:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	2bff      	cmp	r3, #255	; 0xff
 8014a82:	d10d      	bne.n	8014aa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 8014a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a92:	d105      	bne.n	8014aa0 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x5c>
 8014a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014a98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	601a      	str	r2, [r3, #0]

  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 8014aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014aa4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	db76      	blt.n	8014b9c <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>
 8014aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	6a1b      	ldr	r3, [r3, #32]
 8014aba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014abe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8014ac2:	6812      	ldr	r2, [r2, #0]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	da69      	bge.n	8014b9c <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x158>

  // Set pending, if we have delayed it.
  if ( FromNow>0 ) {
 8014ac8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014acc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d018      	beq.n	8014b08 <_ZN9tNMEA200019SendIsoAddressClaimEhim+0xc4>
    Devices[DeviceIndex].SetPendingIsoAddressClaim(FromNow);
 8014ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	69da      	ldr	r2, [r3, #28]
 8014ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014ae6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014af0:	fb01 f303 	mul.w	r3, r1, r3
 8014af4:	441a      	add	r2, r3
 8014af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014afa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014afe:	6819      	ldr	r1, [r3, #0]
 8014b00:	4610      	mov	r0, r2
 8014b02:	f7fb fc31 	bl	8010368 <_ZN9tNMEA200015tInternalDevice25SetPendingIsoAddressClaimEm>
    return;
 8014b06:	e04a      	b.n	8014b9e <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  }

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 8014b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	69da      	ldr	r2, [r3, #28]
 8014b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014b22:	fb01 f303 	mul.w	r3, r1, r3
 8014b26:	4413      	add	r3, r2
 8014b28:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8014b2c:	f107 0014 	add.w	r0, r7, #20
 8014b30:	2300      	movs	r3, #0
 8014b32:	9300      	str	r3, [sp, #0]
 8014b34:	2300      	movs	r3, #0
 8014b36:	2206      	movs	r2, #6
 8014b38:	f7fa f89e 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

    RespondMsg.Destination=Destination;
 8014b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b40:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    SetN2kISOAddressClaim(RespondMsg,Devices[DeviceIndex].DeviceInformation.GetName());
 8014b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	69da      	ldr	r2, [r3, #28]
 8014b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014b64:	fb01 f303 	mul.w	r3, r1, r3
 8014b68:	4413      	add	r3, r2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f7 fc64 	bl	800c438 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8014b70:	4602      	mov	r2, r0
 8014b72:	460b      	mov	r3, r1
 8014b74:	f107 0114 	add.w	r1, r7, #20
 8014b78:	4608      	mov	r0, r1
 8014b7a:	f7fb fdf2 	bl	8010762 <_Z21SetN2kISOAddressClaimR7tN2kMsgy>
    SendMsg(RespondMsg,DeviceIndex);
 8014b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b82:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8014b86:	f107 0114 	add.w	r1, r7, #20
 8014b8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014b92:	6812      	ldr	r2, [r2, #0]
 8014b94:	6818      	ldr	r0, [r3, #0]
 8014b96:	f7fd fe77 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8014b9a:	e000      	b.n	8014b9e <_ZN9tNMEA200019SendIsoAddressClaimEhim+0x15a>
  if ( DeviceIndex<0 || DeviceIndex>=DeviceCount) return;
 8014b9c:	bf00      	nop
}
 8014b9e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd90      	pop	{r4, r7, pc}
	...

08014ba8 <_ZN9tNMEA200013SendTxPGNListEhib>:

#define MAX_PGNS_IN_LIST 74

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 8014ba8:	b590      	push	{r4, r7, lr}
 8014baa:	b0cb      	sub	sp, #300	; 0x12c
 8014bac:	af02      	add	r7, sp, #8
 8014bae:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014bb2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8014bb6:	6020      	str	r0, [r4, #0]
 8014bb8:	4608      	mov	r0, r1
 8014bba:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014bbe:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014bc2:	600a      	str	r2, [r1, #0]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014bca:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8014bce:	4602      	mov	r2, r0
 8014bd0:	701a      	strb	r2, [r3, #0]
 8014bd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014bd6:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8014bda:	460a      	mov	r2, r1
 8014bdc:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendTxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 8014bde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014be2:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	2bff      	cmp	r3, #255	; 0xff
 8014bea:	d10d      	bne.n	8014c08 <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 8014bec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014bf0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014bfa:	d105      	bne.n	8014c08 <_ZN9tNMEA200013SendTxPGNListEhib+0x60>
 8014bfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014c04:	2200      	movs	r2, #0
 8014c06:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 8014c08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c0c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8014c10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014c18:	6811      	ldr	r1, [r2, #0]
 8014c1a:	6818      	ldr	r0, [r3, #0]
 8014c1c:	f7fb fd08 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8014c20:	4603      	mov	r3, r0
 8014c22:	f083 0301 	eor.w	r3, r3, #1
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f040 80cc 	bne.w	8014dc6 <_ZN9tNMEA200013SendTxPGNListEhib+0x21e>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 8014c2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	69da      	ldr	r2, [r3, #28]
 8014c3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014c48:	fb01 f303 	mul.w	r3, r1, r3
 8014c4c:	4413      	add	r3, r2
 8014c4e:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8014c52:	f107 0014 	add.w	r0, r7, #20
 8014c56:	2300      	movs	r3, #0
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	2206      	movs	r2, #6
 8014c5e:	f7fa f80b 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 8014c62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014c6a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014c6e:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 8014c72:	7812      	ldrb	r2, [r2, #0]
 8014c74:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 8014c76:	f107 0314 	add.w	r3, r7, #20
 8014c7a:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7fa f82c 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 8014c84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014c8c:	2206      	movs	r2, #6
 8014c8e:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 8014c90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014c94:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8014c98:	781a      	ldrb	r2, [r3, #0]
 8014c9a:	f107 0314 	add.w	r3, r7, #20
 8014c9e:	4611      	mov	r1, r2
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fb f912 	bl	800feca <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_transmit);
 8014ca6:	f107 0314 	add.w	r3, r7, #20
 8014caa:	2100      	movs	r1, #0
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7fa f955 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014cb8:	2300      	movs	r3, #0
 8014cba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014cbe:	4a44      	ldr	r2, [pc, #272]	; (8014dd0 <_ZN9tNMEA200013SendTxPGNListEhib+0x228>)
 8014cc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014ccc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d005      	beq.n	8014ce0 <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 8014cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014cd8:	2b49      	cmp	r3, #73	; 0x49
 8014cda:	d801      	bhi.n	8014ce0 <_ZN9tNMEA200013SendTxPGNListEhib+0x138>
 8014cdc:	2301      	movs	r3, #1
 8014cde:	e000      	b.n	8014ce2 <_ZN9tNMEA200013SendTxPGNListEhib+0x13a>
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d012      	beq.n	8014d0c <_ZN9tNMEA200013SendTxPGNListEhib+0x164>
      RespondMsg.Add3ByteInt(PGN);
 8014ce6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014cea:	f107 0314 	add.w	r3, r7, #20
 8014cee:	4611      	mov	r1, r2
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7fa f8fc 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefTransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014cf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014d04:	3301      	adds	r3, #1
 8014d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8014d0a:	e7d8      	b.n	8014cbe <_ZN9tNMEA200013SendTxPGNListEhib+0x116>
    }
    if (Devices[DeviceIndex].TransmitMessages!=0) {
 8014d0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014d10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	69da      	ldr	r2, [r3, #28]
 8014d18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014d1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014d26:	fb01 f303 	mul.w	r3, r1, r3
 8014d2a:	4413      	add	r3, r2
 8014d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d03a      	beq.n	8014da8 <_ZN9tNMEA200013SendTxPGNListEhib+0x200>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014d32:	2300      	movs	r3, #0
 8014d34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8014d38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014d3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	69da      	ldr	r2, [r3, #28]
 8014d44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014d48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014d52:	fb01 f303 	mul.w	r3, r1, r3
 8014d56:	4413      	add	r3, r2
 8014d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8014d5e:	009b      	lsls	r3, r3, #2
 8014d60:	4413      	add	r3, r2
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014d68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d005      	beq.n	8014d7c <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 8014d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014d74:	2b49      	cmp	r3, #73	; 0x49
 8014d76:	d801      	bhi.n	8014d7c <_ZN9tNMEA200013SendTxPGNListEhib+0x1d4>
 8014d78:	2301      	movs	r3, #1
 8014d7a:	e000      	b.n	8014d7e <_ZN9tNMEA200013SendTxPGNListEhib+0x1d6>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d012      	beq.n	8014da8 <_ZN9tNMEA200013SendTxPGNListEhib+0x200>
        RespondMsg.Add3ByteInt(PGN);
 8014d82:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014d86:	f107 0314 	add.w	r3, r7, #20
 8014d8a:	4611      	mov	r1, r2
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7fa f8ae 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].TransmitMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8014d96:	3301      	adds	r3, #1
 8014d98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8014d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014da0:	3301      	adds	r3, #1
 8014da2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8014da6:	e7c7      	b.n	8014d38 <_ZN9tNMEA200013SendTxPGNListEhib+0x190>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 8014da8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014dac:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8014db0:	f107 0114 	add.w	r1, r7, #20
 8014db4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014db8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014dbc:	6812      	ldr	r2, [r2, #0]
 8014dbe:	6818      	ldr	r0, [r3, #0]
 8014dc0:	f7fd fd62 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8014dc4:	e000      	b.n	8014dc8 <_ZN9tNMEA200013SendTxPGNListEhib+0x220>
  if ( !IsValidDevice(DeviceIndex) ) return;
 8014dc6:	bf00      	nop
}
 8014dc8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd90      	pop	{r4, r7, pc}
 8014dd0:	08019be4 	.word	0x08019be4

08014dd4 <_ZN9tNMEA200013SendRxPGNListEhib>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex, bool UseTP) {
 8014dd4:	b590      	push	{r4, r7, lr}
 8014dd6:	b0cb      	sub	sp, #300	; 0x12c
 8014dd8:	af02      	add	r7, sp, #8
 8014dda:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014dde:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8014de2:	6020      	str	r0, [r4, #0]
 8014de4:	4608      	mov	r0, r1
 8014de6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014dea:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014dee:	600a      	str	r2, [r1, #0]
 8014df0:	4619      	mov	r1, r3
 8014df2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014df6:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	701a      	strb	r2, [r3, #0]
 8014dfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e02:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8014e06:	460a      	mov	r2, r1
 8014e08:	701a      	strb	r2, [r3, #0]
#else
void tNMEA2000::SendRxPGNList(unsigned char Destination, int DeviceIndex) {
#endif
  if (Destination==0xff && DeviceIndex==-1) DeviceIndex=0;
 8014e0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e0e:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8014e12:	781b      	ldrb	r3, [r3, #0]
 8014e14:	2bff      	cmp	r3, #255	; 0xff
 8014e16:	d10d      	bne.n	8014e34 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 8014e18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e26:	d105      	bne.n	8014e34 <_ZN9tNMEA200013SendRxPGNListEhib+0x60>
 8014e28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014e30:	2200      	movs	r2, #0
 8014e32:	601a      	str	r2, [r3, #0]

  if ( !IsValidDevice(DeviceIndex) ) return;
 8014e34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e38:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8014e3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014e44:	6811      	ldr	r1, [r2, #0]
 8014e46:	6818      	ldr	r0, [r3, #0]
 8014e48:	f7fb fbf2 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	f083 0301 	eor.w	r3, r3, #1
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	f040 80cc 	bne.w	8014ff2 <_ZN9tNMEA200013SendRxPGNListEhib+0x21e>

  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 8014e5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	69da      	ldr	r2, [r3, #28]
 8014e66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014e74:	fb01 f303 	mul.w	r3, r1, r3
 8014e78:	4413      	add	r3, r2
 8014e7a:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8014e7e:	f107 0014 	add.w	r0, r7, #20
 8014e82:	2300      	movs	r3, #0
 8014e84:	9300      	str	r3, [sp, #0]
 8014e86:	2300      	movs	r3, #0
 8014e88:	2206      	movs	r2, #6
 8014e8a:	f7f9 fef5 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
  unsigned long PGN;

    RespondMsg.Destination=Destination;
 8014e8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014e92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014e96:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014e9a:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 8014e9e:	7812      	ldrb	r2, [r2, #0]
 8014ea0:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetPGN(126464L);
 8014ea2:	f107 0314 	add.w	r3, r7, #20
 8014ea6:	f44f 31f7 	mov.w	r1, #126464	; 0x1ee00
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7f9 ff16 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    RespondMsg.Priority=6;
 8014eb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014eb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014eb8:	2206      	movs	r2, #6
 8014eba:	711a      	strb	r2, [r3, #4]
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.SetIsTPMessage(UseTP);
 8014ebc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ec0:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8014ec4:	781a      	ldrb	r2, [r3, #0]
 8014ec6:	f107 0314 	add.w	r3, r7, #20
 8014eca:	4611      	mov	r1, r2
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7fa fffc 	bl	800feca <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    RespondMsg.AddByte(N2kpgnl_receive);
 8014ed2:	f107 0314 	add.w	r3, r7, #20
 8014ed6:	2101      	movs	r1, #1
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7fa f83f 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    // First add default messages
    size_t PGNCount=0;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014eea:	4a44      	ldr	r2, [pc, #272]	; (8014ffc <_ZN9tNMEA200013SendRxPGNListEhib+0x228>)
 8014eec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ef4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014ef8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d005      	beq.n	8014f0c <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 8014f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014f04:	2b49      	cmp	r3, #73	; 0x49
 8014f06:	d801      	bhi.n	8014f0c <_ZN9tNMEA200013SendRxPGNListEhib+0x138>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	e000      	b.n	8014f0e <_ZN9tNMEA200013SendRxPGNListEhib+0x13a>
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d012      	beq.n	8014f38 <_ZN9tNMEA200013SendRxPGNListEhib+0x164>
      RespondMsg.Add3ByteInt(PGN);
 8014f12:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014f16:	f107 0314 	add.w	r3, r7, #20
 8014f1a:	4611      	mov	r1, r2
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7f9 ffe6 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
    for (int i=0; (PGN=pgm_read_dword(&DefReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014f22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014f26:	3301      	adds	r3, #1
 8014f28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014f30:	3301      	adds	r3, #1
 8014f32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8014f36:	e7d8      	b.n	8014eea <_ZN9tNMEA200013SendRxPGNListEhib+0x116>
    }
    if (Devices[DeviceIndex].ReceiveMessages!=0) {
 8014f38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	69da      	ldr	r2, [r3, #28]
 8014f44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014f52:	fb01 f303 	mul.w	r3, r1, r3
 8014f56:	4413      	add	r3, r2
 8014f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d03a      	beq.n	8014fd4 <_ZN9tNMEA200013SendRxPGNListEhib+0x200>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014f5e:	2300      	movs	r3, #0
 8014f60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8014f64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	69da      	ldr	r2, [r3, #28]
 8014f70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014f74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014f7e:	fb01 f303 	mul.w	r3, r1, r3
 8014f82:	4413      	add	r3, r2
 8014f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	4413      	add	r3, r2
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d005      	beq.n	8014fa8 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 8014f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014fa0:	2b49      	cmp	r3, #73	; 0x49
 8014fa2:	d801      	bhi.n	8014fa8 <_ZN9tNMEA200013SendRxPGNListEhib+0x1d4>
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e000      	b.n	8014faa <_ZN9tNMEA200013SendRxPGNListEhib+0x1d6>
 8014fa8:	2300      	movs	r3, #0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d012      	beq.n	8014fd4 <_ZN9tNMEA200013SendRxPGNListEhib+0x200>
        RespondMsg.Add3ByteInt(PGN);
 8014fae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014fb2:	f107 0314 	add.w	r3, r7, #20
 8014fb6:	4611      	mov	r1, r2
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f9 ff98 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
      for (int i=0; (PGN=pgm_read_dword(&Devices[DeviceIndex].ReceiveMessages[i]))!=0 && PGNCount<MAX_PGNS_IN_LIST; i++, PGNCount++ ) {
 8014fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8014fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014fcc:	3301      	adds	r3, #1
 8014fce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8014fd2:	e7c7      	b.n	8014f64 <_ZN9tNMEA200013SendRxPGNListEhib+0x190>
      }
    }
    SendMsg(RespondMsg,DeviceIndex);
 8014fd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014fd8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8014fdc:	f107 0114 	add.w	r1, r7, #20
 8014fe0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014fe4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014fe8:	6812      	ldr	r2, [r2, #0]
 8014fea:	6818      	ldr	r0, [r3, #0]
 8014fec:	f7fd fc4c 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8014ff0:	e000      	b.n	8014ff4 <_ZN9tNMEA200013SendRxPGNListEhib+0x220>
  if ( !IsValidDevice(DeviceIndex) ) return;
 8014ff2:	bf00      	nop
}
 8014ff4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd90      	pop	{r4, r7, pc}
 8014ffc:	08019c10 	.word	0x08019c10

08015000 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>:

//*****************************************************************************
void SetN2kPGN126996Progmem(tN2kMsg &N2kMsg, const tNMEA2000::tProductInformation *ProductInformation, char *OptionalSerialCode=0) {
 8015000:	b580      	push	{r7, lr}
 8015002:	b086      	sub	sp, #24
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	607a      	str	r2, [r7, #4]
  int i;

    N2kMsg.SetPGN(126996L);
 801500c:	4968      	ldr	r1, [pc, #416]	; (80151b0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x1b0>)
 801500e:	68f8      	ldr	r0, [r7, #12]
 8015010:	f7f9 fe64 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2206      	movs	r2, #6
 8015018:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->N2kVersion));
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	881b      	ldrh	r3, [r3, #0]
 801501e:	b21b      	sxth	r3, r3
 8015020:	4619      	mov	r1, r3
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f7f9 ff3a 	bl	800ee9c <_ZN7tN2kMsg11Add2ByteIntEs>
    N2kMsg.Add2ByteInt(pgm_read_word(&ProductInformation->ProductCode));
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	885b      	ldrh	r3, [r3, #2]
 801502c:	b21b      	sxth	r3, r3
 801502e:	4619      	mov	r1, r3
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f7f9 ff33 	bl	800ee9c <_ZN7tN2kMsg11Add2ByteIntEs>
    for (i=0; i<Max_N2kModelID_len && pgm_read_byte(&ProductInformation->N2kModelID[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelID[i])); }
 8015036:	2300      	movs	r3, #0
 8015038:	617b      	str	r3, [r7, #20]
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	2b1f      	cmp	r3, #31
 801503e:	dc13      	bgt.n	8015068 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	4413      	add	r3, r2
 8015046:	3304      	adds	r3, #4
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d00c      	beq.n	8015068 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
 801504e:	68ba      	ldr	r2, [r7, #8]
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	4413      	add	r3, r2
 8015054:	3304      	adds	r3, #4
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	4619      	mov	r1, r3
 801505a:	68f8      	ldr	r0, [r7, #12]
 801505c:	f7f9 ff7e 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	3301      	adds	r3, #1
 8015064:	617b      	str	r3, [r7, #20]
 8015066:	e7e8      	b.n	801503a <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x3a>
    for (; i<Max_N2kModelID_len; i++ ) { N2kMsg.AddByte(0xff); }
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	2b1f      	cmp	r3, #31
 801506c:	dc07      	bgt.n	801507e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x7e>
 801506e:	21ff      	movs	r1, #255	; 0xff
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f7f9 ff73 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	3301      	adds	r3, #1
 801507a:	617b      	str	r3, [r7, #20]
 801507c:	e7f4      	b.n	8015068 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x68>
    for (i=0; i<Max_N2kSwCode_len && pgm_read_byte(&ProductInformation->N2kSwCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kSwCode[i])); }
 801507e:	2300      	movs	r3, #0
 8015080:	617b      	str	r3, [r7, #20]
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	2b1f      	cmp	r3, #31
 8015086:	dc13      	bgt.n	80150b0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 8015088:	68ba      	ldr	r2, [r7, #8]
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	4413      	add	r3, r2
 801508e:	3325      	adds	r3, #37	; 0x25
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d00c      	beq.n	80150b0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
 8015096:	68ba      	ldr	r2, [r7, #8]
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	4413      	add	r3, r2
 801509c:	3325      	adds	r3, #37	; 0x25
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	4619      	mov	r1, r3
 80150a2:	68f8      	ldr	r0, [r7, #12]
 80150a4:	f7f9 ff5a 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	3301      	adds	r3, #1
 80150ac:	617b      	str	r3, [r7, #20]
 80150ae:	e7e8      	b.n	8015082 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x82>
    for (; i<Max_N2kSwCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	2b1f      	cmp	r3, #31
 80150b4:	dc07      	bgt.n	80150c6 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xc6>
 80150b6:	21ff      	movs	r1, #255	; 0xff
 80150b8:	68f8      	ldr	r0, [r7, #12]
 80150ba:	f7f9 ff4f 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	3301      	adds	r3, #1
 80150c2:	617b      	str	r3, [r7, #20]
 80150c4:	e7f4      	b.n	80150b0 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xb0>
    for (i=0; i<Max_N2kModelVersion_len && pgm_read_byte(&ProductInformation->N2kModelVersion[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelVersion[i])); }
 80150c6:	2300      	movs	r3, #0
 80150c8:	617b      	str	r3, [r7, #20]
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	2b1f      	cmp	r3, #31
 80150ce:	dc13      	bgt.n	80150f8 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 80150d0:	68ba      	ldr	r2, [r7, #8]
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	4413      	add	r3, r2
 80150d6:	3346      	adds	r3, #70	; 0x46
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d00c      	beq.n	80150f8 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
 80150de:	68ba      	ldr	r2, [r7, #8]
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	4413      	add	r3, r2
 80150e4:	3346      	adds	r3, #70	; 0x46
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	4619      	mov	r1, r3
 80150ea:	68f8      	ldr	r0, [r7, #12]
 80150ec:	f7f9 ff36 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	3301      	adds	r3, #1
 80150f4:	617b      	str	r3, [r7, #20]
 80150f6:	e7e8      	b.n	80150ca <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xca>
    for (; i<Max_N2kModelVersion_len; i++ ) { N2kMsg.AddByte(0xff); }
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	2b1f      	cmp	r3, #31
 80150fc:	dc07      	bgt.n	801510e <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x10e>
 80150fe:	21ff      	movs	r1, #255	; 0xff
 8015100:	68f8      	ldr	r0, [r7, #12]
 8015102:	f7f9 ff2b 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	3301      	adds	r3, #1
 801510a:	617b      	str	r3, [r7, #20]
 801510c:	e7f4      	b.n	80150f8 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0xf8>
    if (OptionalSerialCode) {
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d016      	beq.n	8015142 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x142>
      for (i=0; i<Max_N2kModelSerialCode_len && OptionalSerialCode[i]; i++ ) { N2kMsg.AddByte(OptionalSerialCode[i]); }
 8015114:	2300      	movs	r3, #0
 8015116:	617b      	str	r3, [r7, #20]
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	2b1f      	cmp	r3, #31
 801511c:	dc2a      	bgt.n	8015174 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	687a      	ldr	r2, [r7, #4]
 8015122:	4413      	add	r3, r2
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d024      	beq.n	8015174 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	4413      	add	r3, r2
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	4619      	mov	r1, r3
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f7f9 ff11 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	3301      	adds	r3, #1
 801513e:	617b      	str	r3, [r7, #20]
 8015140:	e7ea      	b.n	8015118 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x118>
    } else {
      for (i=0; i<Max_N2kModelSerialCode_len && pgm_read_byte(&ProductInformation->N2kModelSerialCode[i]); i++ ) { N2kMsg.AddByte(pgm_read_byte(&ProductInformation->N2kModelSerialCode[i])); }
 8015142:	2300      	movs	r3, #0
 8015144:	617b      	str	r3, [r7, #20]
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b1f      	cmp	r3, #31
 801514a:	dc13      	bgt.n	8015174 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801514c:	68ba      	ldr	r2, [r7, #8]
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	4413      	add	r3, r2
 8015152:	3367      	adds	r3, #103	; 0x67
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d00c      	beq.n	8015174 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
 801515a:	68ba      	ldr	r2, [r7, #8]
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	4413      	add	r3, r2
 8015160:	3367      	adds	r3, #103	; 0x67
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	4619      	mov	r1, r3
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f7f9 fef8 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	3301      	adds	r3, #1
 8015170:	617b      	str	r3, [r7, #20]
 8015172:	e7e8      	b.n	8015146 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x146>
    }
    for (; i<Max_N2kModelSerialCode_len; i++ ) { N2kMsg.AddByte(0xff); }
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	2b1f      	cmp	r3, #31
 8015178:	dc07      	bgt.n	801518a <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x18a>
 801517a:	21ff      	movs	r1, #255	; 0xff
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f7f9 feed 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	3301      	adds	r3, #1
 8015186:	617b      	str	r3, [r7, #20]
 8015188:	e7f4      	b.n	8015174 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc+0x174>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->CertificationLevel));
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8015190:	4619      	mov	r1, r3
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	f7f9 fee2 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(pgm_read_byte(&ProductInformation->LoadEquivalency));
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801519e:	4619      	mov	r1, r3
 80151a0:	68f8      	ldr	r0, [r7, #12]
 80151a2:	f7f9 fedb 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
}
 80151a6:	bf00      	nop
 80151a8:	3718      	adds	r7, #24
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	0001f014 	.word	0x0001f014

080151b4 <_ZN9tNMEA200022SendProductInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendProductInformation(int iDev) {
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
  return SendProductInformation(0xff,iDev,false);
 80151be:	2300      	movs	r3, #0
 80151c0:	683a      	ldr	r2, [r7, #0]
 80151c2:	21ff      	movs	r1, #255	; 0xff
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f805 	bl	80151d4 <_ZN9tNMEA200022SendProductInformationEhib>
 80151ca:	4603      	mov	r3, r0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <_ZN9tNMEA200022SendProductInformationEhib>:

bool tNMEA2000::SendProductInformation(unsigned char Destination, int iDev, bool UseTP) {
 80151d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151d8:	b0ca      	sub	sp, #296	; 0x128
 80151da:	af06      	add	r7, sp, #24
 80151dc:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80151e0:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80151e4:	6020      	str	r0, [r4, #0]
 80151e6:	4608      	mov	r0, r1
 80151e8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80151ec:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80151f0:	600a      	str	r2, [r1, #0]
 80151f2:	4619      	mov	r1, r3
 80151f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80151f8:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80151fc:	4602      	mov	r2, r0
 80151fe:	701a      	strb	r2, [r3, #0]
 8015200:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015204:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8015208:	460a      	mov	r2, r1
 801520a:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendProductInformation(int iDev) {
#endif
  if ( !IsValidDevice(iDev) ) return false;
 801520c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015210:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015214:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801521c:	6811      	ldr	r1, [r2, #0]
 801521e:	6818      	ldr	r0, [r3, #0]
 8015220:	f7fb fa06 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8015224:	4603      	mov	r3, r0
 8015226:	f083 0301 	eor.w	r3, r3, #1
 801522a:	b2db      	uxtb	r3, r3
 801522c:	2b00      	cmp	r3, #0
 801522e:	d001      	beq.n	8015234 <_ZN9tNMEA200022SendProductInformationEhib+0x60>
 8015230:	2300      	movs	r3, #0
 8015232:	e151      	b.n	80154d8 <_ZN9tNMEA200022SendProductInformationEhib+0x304>
  tN2kMsg RespondMsg(Devices[iDev].N2kSource);
 8015234:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	69da      	ldr	r2, [r3, #28]
 8015240:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015244:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801524e:	fb01 f303 	mul.w	r3, r1, r3
 8015252:	4413      	add	r3, r2
 8015254:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8015258:	f107 0010 	add.w	r0, r7, #16
 801525c:	2300      	movs	r3, #0
 801525e:	9300      	str	r3, [sp, #0]
 8015260:	2300      	movs	r3, #0
 8015262:	2206      	movs	r2, #6
 8015264:	f7f9 fd08 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
  int iPIDev=iDev;
 8015268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801526c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    if ( Devices[iPIDev].ProductInformation==0 ) iPIDev=0; // Use first device product information
 8015276:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801527a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	69da      	ldr	r2, [r3, #28]
 8015282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015286:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801528a:	fb01 f303 	mul.w	r3, r1, r3
 801528e:	4413      	add	r3, r2
 8015290:	689b      	ldr	r3, [r3, #8]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d102      	bne.n	801529c <_ZN9tNMEA200022SendProductInformationEhib+0xc8>
 8015296:	2300      	movs	r3, #0
 8015298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    if ( Devices[iPIDev].ProductInformation==0 ) return false; // Can not do anything.
 801529c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80152a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	69da      	ldr	r2, [r3, #28]
 80152a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80152ac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80152b0:	fb01 f303 	mul.w	r3, r1, r3
 80152b4:	4413      	add	r3, r2
 80152b6:	689b      	ldr	r3, [r3, #8]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d101      	bne.n	80152c0 <_ZN9tNMEA200022SendProductInformationEhib+0xec>
 80152bc:	2300      	movs	r3, #0
 80152be:	e10b      	b.n	80154d8 <_ZN9tNMEA200022SendProductInformationEhib+0x304>

    if ( Devices[iPIDev].ProductInformation==Devices[iPIDev].LocalProductInformation ) {
 80152c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80152c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	69da      	ldr	r2, [r3, #28]
 80152cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80152d0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80152d4:	fb01 f303 	mul.w	r3, r1, r3
 80152d8:	4413      	add	r3, r2
 80152da:	689a      	ldr	r2, [r3, #8]
 80152dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80152e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	69d9      	ldr	r1, [r3, #28]
 80152e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80152ec:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80152f0:	fb00 f303 	mul.w	r3, r0, r3
 80152f4:	440b      	add	r3, r1
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	f040 808a 	bne.w	8015412 <_ZN9tNMEA200022SendProductInformationEhib+0x23e>
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 80152fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	69da      	ldr	r2, [r3, #28]
 801530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801530e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015312:	fb01 f303 	mul.w	r3, r1, r3
 8015316:	4413      	add	r3, r2
 8015318:	689b      	ldr	r3, [r3, #8]
 801531a:	881b      	ldrh	r3, [r3, #0]
 801531c:	469e      	mov	lr, r3
                                          Devices[iPIDev].ProductInformation->ProductCode,
 801531e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	69da      	ldr	r2, [r3, #28]
 801532a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801532e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015332:	fb01 f303 	mul.w	r3, r1, r3
 8015336:	4413      	add	r3, r2
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	885b      	ldrh	r3, [r3, #2]
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 801533c:	4698      	mov	r8, r3
                                          Devices[iPIDev].ProductInformation->N2kModelID,
 801533e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	69da      	ldr	r2, [r3, #28]
 801534a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801534e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015352:	fb01 f303 	mul.w	r3, r1, r3
 8015356:	4413      	add	r3, r2
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	1d1e      	adds	r6, r3, #4
                                          Devices[iPIDev].ProductInformation->N2kSwCode,
 801535c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	69da      	ldr	r2, [r3, #28]
 8015368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801536c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015370:	fb01 f303 	mul.w	r3, r1, r3
 8015374:	4413      	add	r3, r2
 8015376:	689b      	ldr	r3, [r3, #8]
 8015378:	3325      	adds	r3, #37	; 0x25
                                          Devices[iPIDev].ProductInformation->N2kModelVersion,
 801537a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801537e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8015382:	6812      	ldr	r2, [r2, #0]
 8015384:	69d1      	ldr	r1, [r2, #28]
 8015386:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801538a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801538e:	fb00 f202 	mul.w	r2, r0, r2
 8015392:	440a      	add	r2, r1
 8015394:	6892      	ldr	r2, [r2, #8]
 8015396:	3246      	adds	r2, #70	; 0x46
                                          Devices[iPIDev].ProductInformation->N2kModelSerialCode,
 8015398:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801539c:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80153a0:	6809      	ldr	r1, [r1, #0]
 80153a2:	69c8      	ldr	r0, [r1, #28]
 80153a4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80153a8:	f44f 74ac 	mov.w	r4, #344	; 0x158
 80153ac:	fb04 f101 	mul.w	r1, r4, r1
 80153b0:	4401      	add	r1, r0
 80153b2:	6889      	ldr	r1, [r1, #8]
 80153b4:	3167      	adds	r1, #103	; 0x67
                                          Devices[iPIDev].ProductInformation->CertificationLevel,
 80153b6:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80153ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80153be:	6800      	ldr	r0, [r0, #0]
 80153c0:	69c4      	ldr	r4, [r0, #28]
 80153c2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80153c6:	f44f 75ac 	mov.w	r5, #344	; 0x158
 80153ca:	fb05 f000 	mul.w	r0, r5, r0
 80153ce:	4420      	add	r0, r4
 80153d0:	6880      	ldr	r0, [r0, #8]
 80153d2:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
                                          Devices[iPIDev].ProductInformation->LoadEquivalency);
 80153d6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80153da:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80153de:	6824      	ldr	r4, [r4, #0]
 80153e0:	69e5      	ldr	r5, [r4, #28]
 80153e2:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80153e6:	f44f 7cac 	mov.w	ip, #344	; 0x158
 80153ea:	fb0c f404 	mul.w	r4, ip, r4
 80153ee:	442c      	add	r4, r5
 80153f0:	68a4      	ldr	r4, [r4, #8]
 80153f2:	f894 4089 	ldrb.w	r4, [r4, #137]	; 0x89
      SetN2kProductInformation(RespondMsg,Devices[iPIDev].ProductInformation->N2kVersion,
 80153f6:	f107 0510 	add.w	r5, r7, #16
 80153fa:	9404      	str	r4, [sp, #16]
 80153fc:	9003      	str	r0, [sp, #12]
 80153fe:	9102      	str	r1, [sp, #8]
 8015400:	9201      	str	r2, [sp, #4]
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	4633      	mov	r3, r6
 8015406:	4642      	mov	r2, r8
 8015408:	4671      	mov	r1, lr
 801540a:	4628      	mov	r0, r5
 801540c:	f7fb f9b8 	bl	8010780 <_Z24SetN2kProductInformationR7tN2kMsgjjPKcS2_S2_S2_hh>
 8015410:	e013      	b.n	801543a <_ZN9tNMEA200022SendProductInformationEhib+0x266>
    } else {
      SetN2kPGN126996Progmem(RespondMsg,Devices[iPIDev].ProductInformation);
 8015412:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	69da      	ldr	r2, [r3, #28]
 801541e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015422:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015426:	fb01 f303 	mul.w	r3, r1, r3
 801542a:	4413      	add	r3, r2
 801542c:	6899      	ldr	r1, [r3, #8]
 801542e:	f107 0310 	add.w	r3, r7, #16
 8015432:	2200      	movs	r2, #0
 8015434:	4618      	mov	r0, r3
 8015436:	f7ff fde3 	bl	8015000 <_Z22SetN2kPGN126996ProgmemR7tN2kMsgPKN9tNMEA200019tProductInformationEPc>
    }
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 801543a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801543e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015442:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015446:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 801544a:	7812      	ldrb	r2, [r2, #0]
 801544c:	735a      	strb	r2, [r3, #13]
    RespondMsg.SetIsTPMessage(UseTP);
 801544e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015452:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8015456:	781a      	ldrb	r2, [r3, #0]
 8015458:	f107 0310 	add.w	r3, r7, #16
 801545c:	4611      	mov	r1, r2
 801545e:	4618      	mov	r0, r3
 8015460:	f7fa fd33 	bl	800feca <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,iDev) ) {
 8015464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015468:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 801546c:	f107 0110 	add.w	r1, r7, #16
 8015470:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015478:	6812      	ldr	r2, [r2, #0]
 801547a:	6818      	ldr	r0, [r3, #0]
 801547c:	f7fd fa04 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 8015480:	4603      	mov	r3, r0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d014      	beq.n	80154b0 <_ZN9tNMEA200022SendProductInformationEhib+0x2dc>
      Devices[iDev].ClearPendingProductInformation();
 8015486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801548a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	69da      	ldr	r2, [r3, #28]
 8015492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80154a0:	fb01 f303 	mul.w	r3, r1, r3
 80154a4:	4413      	add	r3, r2
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fa ffa7 	bl	80103fa <_ZN9tNMEA200015tInternalDevice30ClearPendingProductInformationEv>
      return true;
 80154ac:	2301      	movs	r3, #1
 80154ae:	e013      	b.n	80154d8 <_ZN9tNMEA200022SendProductInformationEhib+0x304>
    }

    Devices[iDev].SetPendingProductInformation();
 80154b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80154b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	69da      	ldr	r2, [r3, #28]
 80154bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80154c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80154ca:	fb01 f303 	mul.w	r3, r1, r3
 80154ce:	4413      	add	r3, r2
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7fa ff7a 	bl	80103ca <_ZN9tNMEA200015tInternalDevice28SetPendingProductInformationEv>
    return false;
 80154d6:	2300      	movs	r3, #0
}
 80154d8:	4618      	mov	r0, r3
 80154da:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80154de:	46bd      	mov	sp, r7
 80154e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154e4 <_ZN9tNMEA200028SendConfigurationInformationEi>:

//*****************************************************************************
#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
  return SendConfigurationInformation(0xff,DeviceIndex,false);
 80154ee:	2300      	movs	r3, #0
 80154f0:	683a      	ldr	r2, [r7, #0]
 80154f2:	21ff      	movs	r1, #255	; 0xff
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	f000 f805 	bl	8015504 <_ZN9tNMEA200028SendConfigurationInformationEhib>
 80154fa:	4603      	mov	r3, r0
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3708      	adds	r7, #8
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <_ZN9tNMEA200028SendConfigurationInformationEhib>:

bool tNMEA2000::SendConfigurationInformation(unsigned char Destination, int DeviceIndex, bool UseTP) {
 8015504:	b590      	push	{r4, r7, lr}
 8015506:	b0c7      	sub	sp, #284	; 0x11c
 8015508:	af02      	add	r7, sp, #8
 801550a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801550e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8015512:	6020      	str	r0, [r4, #0]
 8015514:	4608      	mov	r0, r1
 8015516:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801551a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801551e:	600a      	str	r2, [r1, #0]
 8015520:	4619      	mov	r1, r3
 8015522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015526:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 801552a:	4602      	mov	r2, r0
 801552c:	701a      	strb	r2, [r3, #0]
 801552e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015532:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8015536:	460a      	mov	r2, r1
 8015538:	701a      	strb	r2, [r3, #0]
#else
bool tNMEA2000::SendConfigurationInformation(int DeviceIndex) {
#endif
  if ( !IsValidDevice(DeviceIndex) ) return false;
 801553a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801553e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801554a:	6811      	ldr	r1, [r2, #0]
 801554c:	6818      	ldr	r0, [r3, #0]
 801554e:	f7fb f86f 	bl	8010630 <_ZNK9tNMEA200013IsValidDeviceEi>
 8015552:	4603      	mov	r3, r0
 8015554:	f083 0301 	eor.w	r3, r3, #1
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	d001      	beq.n	8015562 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x5e>
 801555e:	2300      	movs	r3, #0
 8015560:	e0a8      	b.n	80156b4 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b0>
  tN2kMsg RespondMsg(Devices[DeviceIndex].N2kSource);
 8015562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	69da      	ldr	r2, [r3, #28]
 801556e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801557c:	fb01 f303 	mul.w	r3, r1, r3
 8015580:	4413      	add	r3, r2
 8015582:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8015586:	f107 0014 	add.w	r0, r7, #20
 801558a:	2300      	movs	r3, #0
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	2300      	movs	r3, #0
 8015590:	2206      	movs	r2, #6
 8015592:	f7f9 fb71 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>

    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 8015596:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801559a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d10f      	bne.n	80155c6 <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc2>
         ConfigurationInformation.InstallationDescription1!=0 ||
 80155a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ( ConfigurationInformation.ManufacturerInformation!=0 ||
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d107      	bne.n	80155c6 <_ZN9tNMEA200028SendConfigurationInformationEhib+0xc2>
         ConfigurationInformation.InstallationDescription2!=0 ) {
 80155b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         ConfigurationInformation.InstallationDescription1!=0 ||
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d023      	beq.n	801560e <_ZN9tNMEA200028SendConfigurationInformationEhib+0x10a>
        SetN2kConfigurationInformation(RespondMsg,
 80155c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80155d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
                                       ConfigurationInformation.ManufacturerInformation,
                                       ConfigurationInformation.InstallationDescription1,
                                       ConfigurationInformation.InstallationDescription2,
                                       LocalConfigurationInformationData==0);
 80155ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        SetN2kConfigurationInformation(RespondMsg,
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	bf0c      	ite	eq
 80155fa:	2301      	moveq	r3, #1
 80155fc:	2300      	movne	r3, #0
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	f107 0014 	add.w	r0, r7, #20
 8015604:	9300      	str	r3, [sp, #0]
 8015606:	4623      	mov	r3, r4
 8015608:	f7fb f8d7 	bl	80107ba <_Z30SetN2kConfigurationInformationR7tN2kMsgPKcS2_S2_b>
 801560c:	e006      	b.n	801561c <_ZN9tNMEA200028SendConfigurationInformationEhib+0x118>
    } else { // No information provided, so respond not available
      SetN2kPGNISOAcknowledgement(RespondMsg,1,0xff,126998L);
 801560e:	f107 0014 	add.w	r0, r7, #20
 8015612:	4b2b      	ldr	r3, [pc, #172]	; (80156c0 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1bc>)
 8015614:	22ff      	movs	r2, #255	; 0xff
 8015616:	2101      	movs	r1, #1
 8015618:	f7fb f890 	bl	801073c <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
    }

#if !defined(N2K_NO_ISO_MULTI_PACKET_SUPPORT)
    RespondMsg.Destination=Destination;
 801561c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015620:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    RespondMsg.SetIsTPMessage(UseTP);
 801562a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801562e:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8015632:	781a      	ldrb	r2, [r3, #0]
 8015634:	f107 0314 	add.w	r3, r7, #20
 8015638:	4611      	mov	r1, r2
 801563a:	4618      	mov	r0, r3
 801563c:	f7fa fc45 	bl	800feca <_ZN7tN2kMsg14SetIsTPMessageEb>
#endif
    if (SendMsg(RespondMsg,DeviceIndex) ) {
 8015640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015644:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015648:	f107 0114 	add.w	r1, r7, #20
 801564c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015654:	6812      	ldr	r2, [r2, #0]
 8015656:	6818      	ldr	r0, [r3, #0]
 8015658:	f7fd f916 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 801565c:	4603      	mov	r3, r0
 801565e:	2b00      	cmp	r3, #0
 8015660:	d014      	beq.n	801568c <_ZN9tNMEA200028SendConfigurationInformationEhib+0x188>
      Devices[DeviceIndex].ClearPendingConfigurationInformation();
 8015662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	69da      	ldr	r2, [r3, #28]
 801566e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801567c:	fb01 f303 	mul.w	r3, r1, r3
 8015680:	4413      	add	r3, r2
 8015682:	4618      	mov	r0, r3
 8015684:	f7fa fef3 	bl	801046e <_ZN9tNMEA200015tInternalDevice36ClearPendingConfigurationInformationEv>
      return true;
 8015688:	2301      	movs	r3, #1
 801568a:	e013      	b.n	80156b4 <_ZN9tNMEA200028SendConfigurationInformationEhib+0x1b0>
    }

    Devices[DeviceIndex].SetPendingConfigurationInformation();
 801568c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	69da      	ldr	r2, [r3, #28]
 8015698:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801569c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80156a6:	fb01 f303 	mul.w	r3, r1, r3
 80156aa:	4413      	add	r3, r2
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7fa fec2 	bl	8010436 <_ZN9tNMEA200015tInternalDevice34SetPendingConfigurationInformationEv>
    return false;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd90      	pop	{r4, r7, pc}
 80156be:	bf00      	nop
 80156c0:	0001f016 	.word	0x0001f016

080156c4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>:

//*****************************************************************************
void tNMEA2000::RespondISORequest(const tN2kMsg &N2kMsg, unsigned long RequestedPGN, int iDev) {
 80156c4:	b590      	push	{r4, r7, lr}
 80156c6:	b0c7      	sub	sp, #284	; 0x11c
 80156c8:	af02      	add	r7, sp, #8
 80156ca:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80156ce:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80156d2:	6020      	str	r0, [r4, #0]
 80156d4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80156d8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80156dc:	6001      	str	r1, [r0, #0]
 80156de:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80156e2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80156e6:	600a      	str	r2, [r1, #0]
 80156e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80156ec:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80156f0:	6013      	str	r3, [r2, #0]
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 80156f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80156f6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80156fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80156fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015702:	6811      	ldr	r1, [r2, #0]
 8015704:	6818      	ldr	r0, [r3, #0]
 8015706:	f000 fa2d 	bl	8015b64 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	f040 80ce 	bne.w	80158ae <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ea>

    switch (RequestedPGN) {
 8015712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	4a67      	ldr	r2, [pc, #412]	; (80158bc <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 801571e:	4293      	cmp	r3, r2
 8015720:	d06b      	beq.n	80157fa <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x136>
 8015722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015726:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4a63      	ldr	r2, [pc, #396]	; (80158bc <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f8>)
 801572e:	4293      	cmp	r3, r2
 8015730:	d870      	bhi.n	8015814 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 8015732:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015736:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	4a60      	ldr	r2, [pc, #384]	; (80158c0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 801573e:	4293      	cmp	r3, r2
 8015740:	d04e      	beq.n	80157e0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x11c>
 8015742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	4a5c      	ldr	r2, [pc, #368]	; (80158c0 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1fc>)
 801574e:	4293      	cmp	r3, r2
 8015750:	d860      	bhi.n	8015814 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
 8015752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8015760:	d008      	beq.n	8015774 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xb0>
 8015762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015766:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f5b3 3ff7 	cmp.w	r3, #126464	; 0x1ee00
 8015770:	d00f      	beq.n	8015792 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0xce>
 8015772:	e04f      	b.n	8015814 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x150>
      case 60928L: /*ISO Address Claim*/  // Someone is asking others to claim their addresses
        SendIsoAddressClaim(0xff,iDev);
 8015774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015778:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801577c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015780:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8015784:	2300      	movs	r3, #0
 8015786:	6812      	ldr	r2, [r2, #0]
 8015788:	21ff      	movs	r1, #255	; 0xff
 801578a:	6800      	ldr	r0, [r0, #0]
 801578c:	f7ff f95a 	bl	8014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
        break;
 8015790:	e090      	b.n	80158b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126464L:
        SendTxPGNList(N2kMsg.Source,iDev);
 8015792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	7b19      	ldrb	r1, [r3, #12]
 801579e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157a2:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80157a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157aa:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80157ae:	2300      	movs	r3, #0
 80157b0:	6812      	ldr	r2, [r2, #0]
 80157b2:	6800      	ldr	r0, [r0, #0]
 80157b4:	f7ff f9f8 	bl	8014ba8 <_ZN9tNMEA200013SendTxPGNListEhib>
        SendRxPGNList(N2kMsg.Source,iDev);
 80157b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	7b19      	ldrb	r1, [r3, #12]
 80157c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157c8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80157cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157d0:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80157d4:	2300      	movs	r3, #0
 80157d6:	6812      	ldr	r2, [r2, #0]
 80157d8:	6800      	ldr	r0, [r0, #0]
 80157da:	f7ff fafb 	bl	8014dd4 <_ZN9tNMEA200013SendRxPGNListEhib>
        break;
 80157de:	e069      	b.n	80158b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126996L: /* Product information */
        SendProductInformation(iDev);
 80157e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157e4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80157e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80157f0:	6811      	ldr	r1, [r2, #0]
 80157f2:	6818      	ldr	r0, [r3, #0]
 80157f4:	f7ff fcde 	bl	80151b4 <_ZN9tNMEA200022SendProductInformationEi>
        break;
 80157f8:	e05c      	b.n	80158b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      case 126998L: /* Configuration information */
        SendConfigurationInformation(iDev);
 80157fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157fe:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015802:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801580a:	6811      	ldr	r1, [r2, #0]
 801580c:	6818      	ldr	r0, [r3, #0]
 801580e:	f7ff fe69 	bl	80154e4 <_ZN9tNMEA200028SendConfigurationInformationEi>
        break;
 8015812:	e04f      	b.n	80158b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
      default:
        /* If user has established a handler */
        if (ISORqstHandler!=0) {
 8015814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015820:	2b00      	cmp	r3, #0
 8015822:	d019      	beq.n	8015858 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x194>
          /* and if it handled the request, we are done */
          if (ISORqstHandler(RequestedPGN,N2kMsg.Source,iDev)) {
 8015824:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015830:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015834:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8015838:	6812      	ldr	r2, [r2, #0]
 801583a:	7b11      	ldrb	r1, [r2, #12]
 801583c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8015840:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8015844:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8015848:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 801584c:	6812      	ldr	r2, [r2, #0]
 801584e:	6800      	ldr	r0, [r0, #0]
 8015850:	4798      	blx	r3
 8015852:	4603      	mov	r3, r0
 8015854:	2b00      	cmp	r3, #0
 8015856:	d12c      	bne.n	80158b2 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1ee>
            return;
          }
        }

        tN2kMsg   N2kMsgR;
 8015858:	f107 0014 	add.w	r0, r7, #20
 801585c:	2300      	movs	r3, #0
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	2300      	movs	r3, #0
 8015862:	2206      	movs	r2, #6
 8015864:	210f      	movs	r1, #15
 8015866:	f7f9 fa07 	bl	800ec78 <_ZN7tN2kMsgC1Ehhmi>
        // No user handler, or there was one and it retured FALSE.  Send NAK
        SetN2kPGNISOAcknowledgement(N2kMsgR,1,0xff,RequestedPGN);
 801586a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801586e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015872:	f107 0014 	add.w	r0, r7, #20
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	22ff      	movs	r2, #255	; 0xff
 801587a:	2101      	movs	r1, #1
 801587c:	f7fa ff5e 	bl	801073c <_Z27SetN2kPGNISOAcknowledgementR7tN2kMsghhm>
        // Direct the response to original requester.
        N2kMsgR.Destination  = N2kMsg.Source;
 8015880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	7b1b      	ldrb	r3, [r3, #12]
 801588c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        SendMsg(N2kMsgR,iDev);
 8015890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015894:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015898:	f107 0114 	add.w	r1, r7, #20
 801589c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80158a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80158a4:	6812      	ldr	r2, [r2, #0]
 80158a6:	6818      	ldr	r0, [r3, #0]
 80158a8:	f7fc ffee 	bl	8012888 <_ZN9tNMEA20007SendMsgERK7tN2kMsgi>
 80158ac:	e002      	b.n	80158b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
    if ( IsAddressClaimStarted(iDev) ) return; // We do not respond any queries during address claiming.
 80158ae:	bf00      	nop
 80158b0:	e000      	b.n	80158b4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi+0x1f0>
            return;
 80158b2:	bf00      	nop
    }
}
 80158b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd90      	pop	{r4, r7, pc}
 80158bc:	0001f016 	.word	0x0001f016
 80158c0:	0001f014 	.word	0x0001f014

080158c4 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISORequest(const tN2kMsg &N2kMsg) {
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
  unsigned long RequestedPGN;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	7b5b      	ldrb	r3, [r3, #13]
 80158d2:	4619      	mov	r1, r3
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f7ff f806 	bl	80148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 80158da:	60f8      	str	r0, [r7, #12]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	7b5b      	ldrb	r3, [r3, #13]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7f6 fdb6 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 80158e6:	4603      	mov	r3, r0
 80158e8:	f083 0301 	eor.w	r3, r3, #1
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d005      	beq.n	80158fe <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158f8:	d101      	bne.n	80158fe <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3a>
 80158fa:	2301      	movs	r3, #1
 80158fc:	e000      	b.n	8015900 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x3c>
 80158fe:	2300      	movs	r3, #0
 8015900:	2b00      	cmp	r3, #0
 8015902:	d125      	bne.n	8015950 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8c>

    ParseN2kPGNISORequest(N2kMsg,RequestedPGN);
 8015904:	f107 0308 	add.w	r3, r7, #8
 8015908:	4619      	mov	r1, r3
 801590a:	6838      	ldr	r0, [r7, #0]
 801590c:	f7fa ff68 	bl	80107e0 <_Z21ParseN2kPGNISORequestRK7tN2kMsgRm>
    N2kMsgDbgStart("ISO request: "); N2kMsgDbgln(RequestedPGN);
    if (tNMEA2000::IsBroadcast(N2kMsg.Destination)) { // broadcast -> respond from all devices
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	7b5b      	ldrb	r3, [r3, #13]
 8015914:	4618      	mov	r0, r3
 8015916:	f7f6 fd9c 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d010      	beq.n	8015942 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x7e>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondISORequest(N2kMsg,RequestedPGN,iDev);
 8015920:	2300      	movs	r3, #0
 8015922:	60fb      	str	r3, [r7, #12]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6a1b      	ldr	r3, [r3, #32]
 8015928:	68fa      	ldr	r2, [r7, #12]
 801592a:	429a      	cmp	r2, r3
 801592c:	da11      	bge.n	8015952 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
 801592e:	68ba      	ldr	r2, [r7, #8]
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f7ff fec5 	bl	80156c4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	3301      	adds	r3, #1
 801593e:	60fb      	str	r3, [r7, #12]
 8015940:	e7f0      	b.n	8015924 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x60>
    } else {
      RespondISORequest(N2kMsg,RequestedPGN,iDev);
 8015942:	68ba      	ldr	r2, [r7, #8]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	6839      	ldr	r1, [r7, #0]
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f7ff febb 	bl	80156c4 <_ZN9tNMEA200017RespondISORequestERK7tN2kMsgmi>
 801594e:	e000      	b.n	8015952 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg+0x8e>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8015950:	bf00      	nop
    }
}
 8015952:	3710      	adds	r7, #16
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}

08015958 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>:
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// Here we first call callback and if that will not handle function, we use default handler.
void tNMEA2000::RespondGroupFunction(const tN2kMsg &N2kMsg, tN2kGroupFunctionCode GroupFunctionCode, unsigned long PGNForGroupFunction, int iDev) {
 8015958:	b590      	push	{r4, r7, lr}
 801595a:	b089      	sub	sp, #36	; 0x24
 801595c:	af02      	add	r7, sp, #8
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	603b      	str	r3, [r7, #0]
 8015964:	4613      	mov	r3, r2
 8015966:	71fb      	strb	r3, [r7, #7]
    // Find group function handler for PGN
    tN2kGroupFunctionHandler *pGroupFunctionHandler;
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801596c:	617b      	str	r3, [r7, #20]
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d02c      	beq.n	80159ce <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      if ( pGroupFunctionHandler->PGN==PGNForGroupFunction ) {
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	689b      	ldr	r3, [r3, #8]
 8015978:	683a      	ldr	r2, [r7, #0]
 801597a:	429a      	cmp	r2, r3
 801597c:	d10b      	bne.n	8015996 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x3e>
        // For matching PGN we run handler and exit always
        pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev);
 801597e:	697b      	ldr	r3, [r7, #20]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	3320      	adds	r3, #32
 8015984:	681c      	ldr	r4, [r3, #0]
 8015986:	79fa      	ldrb	r2, [r7, #7]
 8015988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	68b9      	ldr	r1, [r7, #8]
 8015990:	6978      	ldr	r0, [r7, #20]
 8015992:	47a0      	blx	r4
        return;
 8015994:	e01b      	b.n	80159ce <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x76>
      } else if ( pGroupFunctionHandler->PGN==0 &&
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	689b      	ldr	r3, [r3, #8]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d10f      	bne.n	80159be <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
                  pGroupFunctionHandler->Handle(N2kMsg,GroupFunctionCode, PGNForGroupFunction,iDev)
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	3320      	adds	r3, #32
 80159a4:	681c      	ldr	r4, [r3, #0]
 80159a6:	79fa      	ldrb	r2, [r7, #7]
 80159a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159aa:	9300      	str	r3, [sp, #0]
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	68b9      	ldr	r1, [r7, #8]
 80159b0:	6978      	ldr	r0, [r7, #20]
 80159b2:	47a0      	blx	r4
 80159b4:	4603      	mov	r3, r0
      } else if ( pGroupFunctionHandler->PGN==0 &&
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d001      	beq.n	80159be <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x66>
 80159ba:	2301      	movs	r3, #1
 80159bc:	e000      	b.n	80159c0 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x68>
 80159be:	2300      	movs	r3, #0
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d103      	bne.n	80159cc <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x74>
    for ( pGroupFunctionHandler=pGroupFunctionHandlers; pGroupFunctionHandler!=0; pGroupFunctionHandler=pGroupFunctionHandler->pNext) {
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	617b      	str	r3, [r7, #20]
 80159ca:	e7d0      	b.n	801596e <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi+0x16>
                ) {
        // If handler PGN is 0, we try handler and exit, if it does it. Default handler has PGN=0, but
        // it is at end of list. This allows user to add handlers, which tries to handle all PGNs.
        return;
 80159cc:	bf00      	nop
      }
    }
}
 80159ce:	371c      	adds	r7, #28
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd90      	pop	{r4, r7, pc}

080159d4 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>:

//*****************************************************************************
// Document https://www.nmea.org/Assets/20140109%20nmea-2000-corrigendum-tc201401031%20pgn%20126208.pdf
// defines that systems should respond to NMEA Request/Command/Acknowledge group function PGN 126208.
// On the document it is not clear can request be send as broadcast, so we handle it, if we can.
void tNMEA2000::HandleGroupFunction(const tN2kMsg &N2kMsg) {
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b088      	sub	sp, #32
 80159d8:	af02      	add	r7, sp, #8
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
  tN2kGroupFunctionCode GroupFunctionCode;
  unsigned long PGNForGroupFunction;
  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	7b5b      	ldrb	r3, [r3, #13]
 80159e2:	4619      	mov	r1, r3
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7fe ff7e 	bl	80148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 80159ea:	6178      	str	r0, [r7, #20]

    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	7b5b      	ldrb	r3, [r3, #13]
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f6 fd2e 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 80159f6:	4603      	mov	r3, r0
 80159f8:	f083 0301 	eor.w	r3, r3, #1
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d005      	beq.n	8015a0e <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a08:	d101      	bne.n	8015a0e <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3a>
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	e000      	b.n	8015a10 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x3c>
 8015a0e:	2300      	movs	r3, #0
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d133      	bne.n	8015a7c <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xa8>

    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 8015a14:	f107 020c 	add.w	r2, r7, #12
 8015a18:	f107 0313 	add.w	r3, r7, #19
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	6838      	ldr	r0, [r7, #0]
 8015a20:	f7f7 f82a 	bl	800ca78 <_ZN24tN2kGroupFunctionHandler5ParseERK7tN2kMsgR21tN2kGroupFunctionCodeRm>
 8015a24:	4603      	mov	r3, r0
 8015a26:	f083 0301 	eor.w	r3, r3, #1
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d127      	bne.n	8015a80 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xac>
    N2kMsgDbgStart("Group function: "); N2kMsgDbgln(PGNForGroupFunction);
    if ( tNMEA2000::IsBroadcast(N2kMsg.Destination) ) { // broadcast -> respond from all devices
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	7b5b      	ldrb	r3, [r3, #13]
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7f6 fd0c 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d013      	beq.n	8015a68 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x94>
      for (iDev=0; iDev<DeviceCount; iDev++) RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 8015a40:	2300      	movs	r3, #0
 8015a42:	617b      	str	r3, [r7, #20]
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6a1b      	ldr	r3, [r3, #32]
 8015a48:	697a      	ldr	r2, [r7, #20]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	da19      	bge.n	8015a82 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
 8015a4e:	7cfa      	ldrb	r2, [r7, #19]
 8015a50:	68f9      	ldr	r1, [r7, #12]
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	9300      	str	r3, [sp, #0]
 8015a56:	460b      	mov	r3, r1
 8015a58:	6839      	ldr	r1, [r7, #0]
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f7ff ff7c 	bl	8015958 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	3301      	adds	r3, #1
 8015a64:	617b      	str	r3, [r7, #20]
 8015a66:	e7ed      	b.n	8015a44 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0x70>
    } else {
      RespondGroupFunction(N2kMsg,GroupFunctionCode,PGNForGroupFunction,iDev);
 8015a68:	7cfa      	ldrb	r2, [r7, #19]
 8015a6a:	68f9      	ldr	r1, [r7, #12]
 8015a6c:	697b      	ldr	r3, [r7, #20]
 8015a6e:	9300      	str	r3, [sp, #0]
 8015a70:	460b      	mov	r3, r1
 8015a72:	6839      	ldr	r1, [r7, #0]
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f7ff ff6f 	bl	8015958 <_ZN9tNMEA200020RespondGroupFunctionERK7tN2kMsg21tN2kGroupFunctionCodemi>
 8015a7a:	e002      	b.n	8015a82 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8015a7c:	bf00      	nop
 8015a7e:	e000      	b.n	8015a82 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg+0xae>
    if (!tN2kGroupFunctionHandler::Parse(N2kMsg,GroupFunctionCode,PGNForGroupFunction)) return;
 8015a80:	bf00      	nop
    }
}
 8015a82:	3718      	adds	r7, #24
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <_ZN9tNMEA200017StartAddressClaimEi>:
#endif

//*****************************************************************************
void tNMEA2000::StartAddressClaim(int iDev) {
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6039      	str	r1, [r7, #0]
  if ( IsReadyToSend() ) { // Start address claim automatically
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f7fa fde1 	bl	801065a <_ZNK9tNMEA200013IsReadyToSendEv>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d033      	beq.n	8015b06 <_ZN9tNMEA200017StartAddressClaimEi+0x7e>
    Devices[iDev].AddressClaimTimer.Disable();
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	69da      	ldr	r2, [r3, #28]
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015aa8:	fb01 f303 	mul.w	r3, r1, r3
 8015aac:	4413      	add	r3, r2
 8015aae:	3320      	adds	r3, #32
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7fa fae9 	bl	8010088 <_ZN13tN2kScheduler7DisableEv>
    if ( (ForwardStream!=0) && ( ForwardType==tNMEA2000::fwdt_Text) ) {
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d010      	beq.n	8015ae0 <_ZN9tNMEA200017StartAddressClaimEi+0x58>
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	799b      	ldrb	r3, [r3, #6]
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d10c      	bne.n	8015ae0 <_ZN9tNMEA200017StartAddressClaimEi+0x58>
      ForwardStream->print(F("Start address claim for device "));
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	68db      	ldr	r3, [r3, #12]
 8015aca:	4911      	ldr	r1, [pc, #68]	; (8015b10 <_ZN9tNMEA200017StartAddressClaimEi+0x88>)
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7fa f928 	bl	800fd22 <_ZN9N2kStream5printEPKc>
      ForwardStream->println(iDev);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	220a      	movs	r2, #10
 8015ad8:	6839      	ldr	r1, [r7, #0]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7fa f994 	bl	800fe08 <_ZN9N2kStream7printlnEih>
    }
    SendIsoAddressClaim(0xff,iDev);
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	21ff      	movs	r1, #255	; 0xff
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f7fe ffac 	bl	8014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
    Devices[iDev].AddressClaimTimer.FromNow(N2kAddressClaimTimeout);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	69da      	ldr	r2, [r3, #28]
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015af6:	fb01 f303 	mul.w	r3, r1, r3
 8015afa:	4413      	add	r3, r2
 8015afc:	3320      	adds	r3, #32
 8015afe:	21fa      	movs	r1, #250	; 0xfa
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7fa fb0e 	bl	8010122 <_ZN13tN2kScheduler7FromNowEm>
  }
}
 8015b06:	bf00      	nop
 8015b08:	3708      	adds	r7, #8
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop
 8015b10:	080198ac 	.word	0x080198ac

08015b14 <_ZN9tNMEA200017StartAddressClaimEv>:

//*****************************************************************************
void tNMEA2000::StartAddressClaim() {
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b084      	sub	sp, #16
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  for (int i=0; i<DeviceCount; i++) {
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	60fb      	str	r3, [r7, #12]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a1b      	ldr	r3, [r3, #32]
 8015b24:	68fa      	ldr	r2, [r7, #12]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	da18      	bge.n	8015b5c <_ZN9tNMEA200017StartAddressClaimEv+0x48>
    if ( Devices[i].N2kSource==N2kNullCanBusAddress ) GetNextAddress(i,true); // On restart try address claiming from the beginning
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	69da      	ldr	r2, [r3, #28]
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015b34:	fb01 f303 	mul.w	r3, r1, r3
 8015b38:	4413      	add	r3, r2
 8015b3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015b3e:	2bfe      	cmp	r3, #254	; 0xfe
 8015b40:	d104      	bne.n	8015b4c <_ZN9tNMEA200017StartAddressClaimEv+0x38>
 8015b42:	2201      	movs	r2, #1
 8015b44:	68f9      	ldr	r1, [r7, #12]
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 f9a3 	bl	8015e92 <_ZN9tNMEA200014GetNextAddressEib>
    StartAddressClaim(i);
 8015b4c:	68f9      	ldr	r1, [r7, #12]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f7ff ff9a 	bl	8015a88 <_ZN9tNMEA200017StartAddressClaimEi>
  for (int i=0; i<DeviceCount; i++) {
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	3301      	adds	r3, #1
 8015b58:	60fb      	str	r3, [r7, #12]
 8015b5a:	e7e1      	b.n	8015b20 <_ZN9tNMEA200017StartAddressClaimEv+0xc>
  }
}
 8015b5c:	bf00      	nop
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <_ZN9tNMEA200021IsAddressClaimStartedEi>:

//*****************************************************************************
bool tNMEA2000::IsAddressClaimStarted(int iDev) {
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	6039      	str	r1, [r7, #0]
  // Reset address claim after timeout
  bool result=Devices[iDev].AddressClaimTimer.IsEnabled();
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	69da      	ldr	r2, [r3, #28]
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015b78:	fb01 f303 	mul.w	r3, r1, r3
 8015b7c:	4413      	add	r3, r2
 8015b7e:	3320      	adds	r3, #32
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7fa fa9f 	bl	80100c4 <_ZNK13tN2kScheduler9IsEnabledEv>
 8015b86:	4603      	mov	r3, r0
 8015b88:	73fb      	strb	r3, [r7, #15]
  if ( result ) {
 8015b8a:	7bfb      	ldrb	r3, [r7, #15]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d027      	beq.n	8015be0 <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
    if ( Devices[iDev].AddressClaimTimer.IsTime() ) {
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	69da      	ldr	r2, [r3, #28]
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015b9a:	fb01 f303 	mul.w	r3, r1, r3
 8015b9e:	4413      	add	r3, r2
 8015ba0:	3320      	adds	r3, #32
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7fa fa9f 	bl	80100e6 <_ZNK13tN2kScheduler6IsTimeEv>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d018      	beq.n	8015be0 <_ZN9tNMEA200021IsAddressClaimStartedEi+0x7c>
      Devices[iDev].AddressClaimTimer.Disable();
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	69da      	ldr	r2, [r3, #28]
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015bb8:	fb01 f303 	mul.w	r3, r1, r3
 8015bbc:	4413      	add	r3, r2
 8015bbe:	3320      	adds	r3, #32
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7fa fa61 	bl	8010088 <_ZN13tN2kScheduler7DisableEv>
      result=false;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	73fb      	strb	r3, [r7, #15]
      // We have claimed our address, so save end source for next possible claim run.
      Devices[iDev].UpdateAddressClaimEndSource();
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	69da      	ldr	r2, [r3, #28]
 8015bce:	683b      	ldr	r3, [r7, #0]
 8015bd0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015bd4:	fb01 f303 	mul.w	r3, r1, r3
 8015bd8:	4413      	add	r3, r2
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7fa fc65 	bl	80104aa <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    }
  }

  return result;
 8015be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleISOAddressClaim(const tN2kMsg &N2kMsg) {
 8015bea:	b590      	push	{r4, r7, lr}
 8015bec:	b089      	sub	sp, #36	; 0x24
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	6039      	str	r1, [r7, #0]
  int iDev=FindSourceDeviceIndex(N2kMsg.Source);
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	7b1b      	ldrb	r3, [r3, #12]
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f7fe fe73 	bl	80148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8015c00:	61f8      	str	r0, [r7, #28]
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	7b1b      	ldrb	r3, [r3, #12]
 8015c06:	2bfe      	cmp	r3, #254	; 0xfe
 8015c08:	d073      	beq.n	8015cf2 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x108>
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c10:	d06f      	beq.n	8015cf2 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x108>

  int Index=0;
 8015c12:	2300      	movs	r3, #0
 8015c14:	60fb      	str	r3, [r7, #12]
  uint64_t CallerName=N2kMsg.GetUInt64(Index);
 8015c16:	f107 010c 	add.w	r1, r7, #12
 8015c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c22:	6838      	ldr	r0, [r7, #0]
 8015c24:	f7f9 fa33 	bl	800f08e <_ZNK7tN2kMsg9GetUInt64ERiy>
 8015c28:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (Devices[iDev].DeviceInformation.GetName()<CallerName) { // We can keep our address, so just reclaim it
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	69da      	ldr	r2, [r3, #28]
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015c36:	fb01 f303 	mul.w	r3, r1, r3
 8015c3a:	4413      	add	r3, r2
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7f6 fbfb 	bl	800c438 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8015c42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015c46:	4290      	cmp	r0, r2
 8015c48:	eb71 0303 	sbcs.w	r3, r1, r3
 8015c4c:	bf34      	ite	cc
 8015c4e:	2301      	movcc	r3, #1
 8015c50:	2300      	movcs	r3, #0
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d006      	beq.n	8015c66 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x7c>
      SendIsoAddressClaim(0xff,iDev);
 8015c58:	2300      	movs	r3, #0
 8015c5a:	69fa      	ldr	r2, [r7, #28]
 8015c5c:	21ff      	movs	r1, #255	; 0xff
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f7fe fef0 	bl	8014a44 <_ZN9tNMEA200019SendIsoAddressClaimEhim>
 8015c64:	e046      	b.n	8015cf4 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x10a>
    } else { // we have to try an other address
      if ( Devices[iDev].DeviceInformation.GetName()==CallerName && IsAddressClaimStarted(iDev) ) {
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	69da      	ldr	r2, [r3, #28]
 8015c6a:	69fb      	ldr	r3, [r7, #28]
 8015c6c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015c70:	fb01 f303 	mul.w	r3, r1, r3
 8015c74:	4413      	add	r3, r2
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7f6 fbde 	bl	800c438 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8015c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015c80:	428b      	cmp	r3, r1
 8015c82:	bf08      	it	eq
 8015c84:	4282      	cmpeq	r2, r0
 8015c86:	d108      	bne.n	8015c9a <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb0>
 8015c88:	69f9      	ldr	r1, [r7, #28]
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7ff ff6a 	bl	8015b64 <_ZN9tNMEA200021IsAddressClaimStartedEi>
 8015c90:	4603      	mov	r3, r0
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d001      	beq.n	8015c9a <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb0>
 8015c96:	2301      	movs	r3, #1
 8015c98:	e000      	b.n	8015c9c <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xb2>
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d01e      	beq.n	8015cde <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xf4>
        // If the name is same, then the first instance will get claim and change its address.
        // This should not happen, if user takes care of setting unique ID for device information.
        // If he does not there is no problem with this class, but e.g. Garmin gets crazy.
        // Try to solve situation by changing our device instance.
        Devices[iDev].DeviceInformation.SetDeviceInstance(Devices[iDev].DeviceInformation.GetDeviceInstance()+1);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	69da      	ldr	r2, [r3, #28]
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015caa:	fb01 f303 	mul.w	r3, r1, r3
 8015cae:	4413      	add	r3, r2
 8015cb0:	461c      	mov	r4, r3
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	69da      	ldr	r2, [r3, #28]
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015cbc:	fb01 f303 	mul.w	r3, r1, r3
 8015cc0:	4413      	add	r3, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fa fa7c 	bl	80101c0 <_ZNK9tNMEA200018tDeviceInformation17GetDeviceInstanceEv>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	3301      	adds	r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	4619      	mov	r1, r3
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f7fa fa67 	bl	80101a4 <_ZN9tNMEA200018tDeviceInformation17SetDeviceInstanceEh>
        DeviceInformationChanged=true;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2201      	movs	r2, #1
 8015cda:	769a      	strb	r2, [r3, #26]
 8015cdc:	e004      	b.n	8015ce8 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0xfe>
      } else {
        GetNextAddress(iDev);
 8015cde:	2200      	movs	r2, #0
 8015ce0:	69f9      	ldr	r1, [r7, #28]
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f000 f8d5 	bl	8015e92 <_ZN9tNMEA200014GetNextAddressEib>
      }
      StartAddressClaim(iDev);
 8015ce8:	69f9      	ldr	r1, [r7, #28]
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7ff fecc 	bl	8015a88 <_ZN9tNMEA200017StartAddressClaimEi>
 8015cf0:	e000      	b.n	8015cf4 <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg+0x10a>
  if ( N2kMsg.Source==N2kNullCanBusAddress || iDev==-1 ) return; // if the address is not same as we have, we do nothing
 8015cf2:	bf00      	nop
    }
}
 8015cf4:	3724      	adds	r7, #36	; 0x24
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd90      	pop	{r4, r7, pc}

08015cfa <_ZN9tNMEA200022HandleCommandedAddressEyhi>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(uint64_t CommandedName, unsigned char NewAddress, int iDev) {
 8015cfa:	b580      	push	{r7, lr}
 8015cfc:	b084      	sub	sp, #16
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	60f8      	str	r0, [r7, #12]
 8015d02:	e9c7 2300 	strd	r2, r3, [r7]
  if ( IsBroadcast(NewAddress) ) return;
 8015d06:	7e3b      	ldrb	r3, [r7, #24]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7f6 fba2 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d140      	bne.n	8015d96 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9c>
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	69da      	ldr	r2, [r3, #28]
 8015d18:	69fb      	ldr	r3, [r7, #28]
 8015d1a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015d1e:	fb01 f303 	mul.w	r3, r1, r3
 8015d22:	4413      	add	r3, r2
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f6 fb87 	bl	800c438 <_ZNK9tNMEA200018tDeviceInformation7GetNameEv>
 8015d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d2e:	428b      	cmp	r3, r1
 8015d30:	bf08      	it	eq
 8015d32:	4282      	cmpeq	r2, r0
 8015d34:	d10e      	bne.n	8015d54 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
      Devices[iDev].N2kSource!=NewAddress) { // We have been commanded to set our address
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	69da      	ldr	r2, [r3, #28]
 8015d3a:	69fb      	ldr	r3, [r7, #28]
 8015d3c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015d40:	fb01 f303 	mul.w	r3, r1, r3
 8015d44:	4413      	add	r3, r2
 8015d46:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
  if (Devices[iDev].DeviceInformation.GetName() == CommandedName &&
 8015d4a:	7e3a      	ldrb	r2, [r7, #24]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d001      	beq.n	8015d54 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5a>
 8015d50:	2301      	movs	r3, #1
 8015d52:	e000      	b.n	8015d56 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x5c>
 8015d54:	2300      	movs	r3, #0
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d01e      	beq.n	8015d98 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9e>
    Devices[iDev].N2kSource=NewAddress;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	69da      	ldr	r2, [r3, #28]
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015d64:	fb01 f303 	mul.w	r3, r1, r3
 8015d68:	4413      	add	r3, r2
 8015d6a:	7e3a      	ldrb	r2, [r7, #24]
 8015d6c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    Devices[iDev].UpdateAddressClaimEndSource();
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	69da      	ldr	r2, [r3, #28]
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015d7a:	fb01 f303 	mul.w	r3, r1, r3
 8015d7e:	4413      	add	r3, r2
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7fa fb92 	bl	80104aa <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
    StartAddressClaim(iDev);
 8015d86:	69f9      	ldr	r1, [r7, #28]
 8015d88:	68f8      	ldr	r0, [r7, #12]
 8015d8a:	f7ff fe7d 	bl	8015a88 <_ZN9tNMEA200017StartAddressClaimEi>
    AddressChanged=true;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	2201      	movs	r2, #1
 8015d92:	765a      	strb	r2, [r3, #25]
 8015d94:	e000      	b.n	8015d98 <_ZN9tNMEA200022HandleCommandedAddressEyhi+0x9e>
  if ( IsBroadcast(NewAddress) ) return;
 8015d96:	bf00      	nop
  }
}
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::HandleCommandedAddress(const tN2kMsg &N2kMsg) {
 8015d9e:	b580      	push	{r7, lr}
 8015da0:	b08a      	sub	sp, #40	; 0x28
 8015da2:	af02      	add	r7, sp, #8
 8015da4:	6078      	str	r0, [r7, #4]
 8015da6:	6039      	str	r1, [r7, #0]
  N2kMsgDbgStart(" Commanded address:"); N2kMsgDbgln(N2kMsg.Destination);

  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	689b      	ldr	r3, [r3, #8]
 8015dac:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d10c      	bne.n	8015dce <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 8015db4:	6838      	ldr	r0, [r7, #0]
 8015db6:	f7f7 f86d 	bl	800ce94 <_ZNK7tN2kMsg11IsTPMessageEv>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	f083 0301 	eor.w	r3, r3, #1
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d103      	bne.n	8015dce <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x30>
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	691b      	ldr	r3, [r3, #16]
 8015dca:	2b09      	cmp	r3, #9
 8015dcc:	d001      	beq.n	8015dd2 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x34>
 8015dce:	2301      	movs	r3, #1
 8015dd0:	e000      	b.n	8015dd4 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x36>
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d154      	bne.n	8015e82 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe4>

  int iDev=FindSourceDeviceIndex(N2kMsg.Destination);
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	7b5b      	ldrb	r3, [r3, #13]
 8015ddc:	4619      	mov	r1, r3
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f7fe fd81 	bl	80148e6 <_ZN9tNMEA200021FindSourceDeviceIndexEh>
 8015de4:	61f8      	str	r0, [r7, #28]
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	7b5b      	ldrb	r3, [r3, #13]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f6 fb31 	bl	800c452 <_ZN9tNMEA200011IsBroadcastEh>
 8015df0:	4603      	mov	r3, r0
 8015df2:	f083 0301 	eor.w	r3, r3, #1
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d005      	beq.n	8015e08 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e02:	d101      	bne.n	8015e08 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6a>
 8015e04:	2301      	movs	r3, #1
 8015e06:	e000      	b.n	8015e0a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0x6c>
 8015e08:	2300      	movs	r3, #0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d13b      	bne.n	8015e86 <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xe8>

  int Index=0;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	60bb      	str	r3, [r7, #8]
  uint64_t CommandedName=N2kMsg.GetUInt64(Index);
 8015e12:	f107 0108 	add.w	r1, r7, #8
 8015e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e1e:	6838      	ldr	r0, [r7, #0]
 8015e20:	f7f9 f935 	bl	800f08e <_ZNK7tN2kMsg9GetUInt64ERiy>
 8015e24:	e9c7 0104 	strd	r0, r1, [r7, #16]
  unsigned char NewAddress=N2kMsg.GetByte(Index);
 8015e28:	f107 0308 	add.w	r3, r7, #8
 8015e2c:	4619      	mov	r1, r3
 8015e2e:	6838      	ldr	r0, [r7, #0]
 8015e30:	f7f9 f8c4 	bl	800efbc <_ZNK7tN2kMsg7GetByteERi>
 8015e34:	4603      	mov	r3, r0
 8015e36:	73fb      	strb	r3, [r7, #15]
  if  ( NewAddress>=252 ) return;
 8015e38:	7bfb      	ldrb	r3, [r7, #15]
 8015e3a:	2bfb      	cmp	r3, #251	; 0xfb
 8015e3c:	d825      	bhi.n	8015e8a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xec>

  if ( iDev==-1 ) {
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e44:	d113      	bne.n	8015e6e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xd0>
    for (iDev=0; iDev<DeviceCount; iDev++) HandleCommandedAddress(CommandedName,NewAddress,iDev);
 8015e46:	2300      	movs	r3, #0
 8015e48:	61fb      	str	r3, [r7, #28]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6a1b      	ldr	r3, [r3, #32]
 8015e4e:	69fa      	ldr	r2, [r7, #28]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	da1b      	bge.n	8015e8c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	9301      	str	r3, [sp, #4]
 8015e58:	7bfb      	ldrb	r3, [r7, #15]
 8015e5a:	9300      	str	r3, [sp, #0]
 8015e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f7ff ff4a 	bl	8015cfa <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	3301      	adds	r3, #1
 8015e6a:	61fb      	str	r3, [r7, #28]
 8015e6c:	e7ed      	b.n	8015e4a <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xac>
  } else {
    HandleCommandedAddress(CommandedName,NewAddress,iDev);
 8015e6e:	69fb      	ldr	r3, [r7, #28]
 8015e70:	9301      	str	r3, [sp, #4]
 8015e72:	7bfb      	ldrb	r3, [r7, #15]
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f7ff ff3d 	bl	8015cfa <_ZN9tNMEA200022HandleCommandedAddressEyhi>
 8015e80:	e004      	b.n	8015e8c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( N2kMsg.PGN!=65240L || !N2kMsg.IsTPMessage() || N2kMsg.DataLen!=9 ) return;
 8015e82:	bf00      	nop
 8015e84:	e002      	b.n	8015e8c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if ( !tNMEA2000::IsBroadcast(N2kMsg.Destination) && iDev==-1) return; // if destination is not for us, we do nothing
 8015e86:	bf00      	nop
 8015e88:	e000      	b.n	8015e8c <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg+0xee>
  if  ( NewAddress>=252 ) return;
 8015e8a:	bf00      	nop
  }
}
 8015e8c:	3720      	adds	r7, #32
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}

08015e92 <_ZN9tNMEA200014GetNextAddressEib>:
  DeviceInformationChanged=false;
  return result;
}

//*****************************************************************************
void tNMEA2000::GetNextAddress(int DeviceIndex, bool RestartAtEnd) {
 8015e92:	b580      	push	{r7, lr}
 8015e94:	b086      	sub	sp, #24
 8015e96:	af00      	add	r7, sp, #0
 8015e98:	60f8      	str	r0, [r7, #12]
 8015e9a:	60b9      	str	r1, [r7, #8]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	71fb      	strb	r3, [r7, #7]
  bool FoundSame;
  // Currently simply add address
  // Note that 251 is the last source. We do not send data if address is higher than that.

  do {
    if ( Devices[DeviceIndex].N2kSource==N2kNullCanBusAddress ) {
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	69da      	ldr	r2, [r3, #28]
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015eaa:	fb01 f303 	mul.w	r3, r1, r3
 8015eae:	4413      	add	r3, r2
 8015eb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015eb4:	2bfe      	cmp	r3, #254	; 0xfe
 8015eb6:	d11a      	bne.n	8015eee <_ZN9tNMEA200014GetNextAddressEib+0x5c>
      if ( RestartAtEnd ) {
 8015eb8:	79fb      	ldrb	r3, [r7, #7]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f000 8097 	beq.w	8015fee <_ZN9tNMEA200014GetNextAddressEib+0x15c>
        // For null address start from beginning.
        Devices[DeviceIndex].N2kSource=14;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	69da      	ldr	r2, [r3, #28]
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015eca:	fb01 f303 	mul.w	r3, r1, r3
 8015ece:	4413      	add	r3, r2
 8015ed0:	220e      	movs	r2, #14
 8015ed2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        Devices[DeviceIndex].UpdateAddressClaimEndSource();
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	69da      	ldr	r2, [r3, #28]
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015ee0:	fb01 f303 	mul.w	r3, r1, r3
 8015ee4:	4413      	add	r3, r2
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7fa fadf 	bl	80104aa <_ZN9tNMEA200015tInternalDevice27UpdateAddressClaimEndSourceEv>
 8015eec:	e04a      	b.n	8015f84 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
      } else return;
    } else if (Devices[DeviceIndex].N2kSource!=Devices[DeviceIndex].AddressClaimEndSource) {
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	69da      	ldr	r2, [r3, #28]
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015ef8:	fb01 f303 	mul.w	r3, r1, r3
 8015efc:	4413      	add	r3, r2
 8015efe:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	69d9      	ldr	r1, [r3, #28]
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8015f0c:	fb00 f303 	mul.w	r3, r0, r3
 8015f10:	440b      	add	r3, r1
 8015f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015f16:	429a      	cmp	r2, r3
 8015f18:	d025      	beq.n	8015f66 <_ZN9tNMEA200014GetNextAddressEib+0xd4>
      Devices[DeviceIndex].N2kSource++;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	69da      	ldr	r2, [r3, #28]
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015f24:	fb01 f303 	mul.w	r3, r1, r3
 8015f28:	4413      	add	r3, r2
 8015f2a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8015f2e:	3201      	adds	r2, #1
 8015f30:	b2d2      	uxtb	r2, r2
 8015f32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      // Roll to start?
      if ( Devices[DeviceIndex].N2kSource>N2kMaxCanBusAddress ) Devices[DeviceIndex].N2kSource=0;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	69da      	ldr	r2, [r3, #28]
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015f40:	fb01 f303 	mul.w	r3, r1, r3
 8015f44:	4413      	add	r3, r2
 8015f46:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015f4a:	2bfb      	cmp	r3, #251	; 0xfb
 8015f4c:	d91a      	bls.n	8015f84 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	69da      	ldr	r2, [r3, #28]
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015f58:	fb01 f303 	mul.w	r3, r1, r3
 8015f5c:	4413      	add	r3, r2
 8015f5e:	2200      	movs	r2, #0
 8015f60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8015f64:	e00e      	b.n	8015f84 <_ZN9tNMEA200014GetNextAddressEib+0xf2>
    } else {
      Devices[DeviceIndex].N2kSource=N2kNullCanBusAddress; // Force null address = cannot claim address
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	69da      	ldr	r2, [r3, #28]
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015f70:	fb01 f303 	mul.w	r3, r1, r3
 8015f74:	4413      	add	r3, r2
 8015f76:	22fe      	movs	r2, #254	; 0xfe
 8015f78:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      AddressChanged=true;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2201      	movs	r2, #1
 8015f80:	765a      	strb	r2, [r3, #25]
      return;
 8015f82:	e035      	b.n	8015ff0 <_ZN9tNMEA200014GetNextAddressEib+0x15e>
    }
    FoundSame=false;
 8015f84:	2300      	movs	r3, #0
 8015f86:	75fb      	strb	r3, [r7, #23]
    // Check that we do not have same on our list
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 8015f88:	2300      	movs	r3, #0
 8015f8a:	613b      	str	r3, [r7, #16]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	6a1b      	ldr	r3, [r3, #32]
 8015f90:	693a      	ldr	r2, [r7, #16]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	da23      	bge.n	8015fde <_ZN9tNMEA200014GetNextAddressEib+0x14c>
 8015f96:	7dfb      	ldrb	r3, [r7, #23]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d120      	bne.n	8015fde <_ZN9tNMEA200014GetNextAddressEib+0x14c>
      if (i!=DeviceIndex) FoundSame=(Devices[DeviceIndex].N2kSource==Devices[i].N2kSource);
 8015f9c:	693a      	ldr	r2, [r7, #16]
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d018      	beq.n	8015fd6 <_ZN9tNMEA200014GetNextAddressEib+0x144>
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	69da      	ldr	r2, [r3, #28]
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015fae:	fb01 f303 	mul.w	r3, r1, r3
 8015fb2:	4413      	add	r3, r2
 8015fb4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	69d9      	ldr	r1, [r3, #28]
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8015fc2:	fb00 f303 	mul.w	r3, r0, r3
 8015fc6:	440b      	add	r3, r1
 8015fc8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	bf0c      	ite	eq
 8015fd0:	2301      	moveq	r3, #1
 8015fd2:	2300      	movne	r3, #0
 8015fd4:	75fb      	strb	r3, [r7, #23]
    for (int i=0; i<DeviceCount && !FoundSame; i++) {
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	613b      	str	r3, [r7, #16]
 8015fdc:	e7d6      	b.n	8015f8c <_ZN9tNMEA200014GetNextAddressEib+0xfa>
  do {
 8015fde:	7dfb      	ldrb	r3, [r7, #23]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d000      	beq.n	8015fe6 <_ZN9tNMEA200014GetNextAddressEib+0x154>
 8015fe4:	e75c      	b.n	8015ea0 <_ZN9tNMEA200014GetNextAddressEib+0xe>
    }
  } while (FoundSame);
  AddressChanged=true;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	765a      	strb	r2, [r3, #25]
 8015fec:	e000      	b.n	8015ff0 <_ZN9tNMEA200014GetNextAddressEib+0x15e>
      } else return;
 8015fee:	bf00      	nop
}
 8015ff0:	3718      	adds	r7, #24
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
	...

08015ff8 <_ZN9tNMEA200027HandleReceivedSystemMessageEi>:

//*****************************************************************************
bool tNMEA2000::HandleReceivedSystemMessage(int MsgIndex) {
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
  bool result=false;
 8016002:	2300      	movs	r3, #0
 8016004:	73fb      	strb	r3, [r7, #15]

   if ( N2kMode==N2km_SendOnly || N2kMode==N2km_ListenAndSend ) return result;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	795b      	ldrb	r3, [r3, #5]
 801600a:	2b03      	cmp	r3, #3
 801600c:	d003      	beq.n	8016016 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x1e>
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	795b      	ldrb	r3, [r3, #5]
 8016012:	2b04      	cmp	r3, #4
 8016014:	d101      	bne.n	801601a <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x22>
 8016016:	7bfb      	ldrb	r3, [r7, #15]
 8016018:	e07c      	b.n	8016114 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11c>

    if ( N2kCANMsgBuf[MsgIndex].SystemMessage ) {
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801601e:	683a      	ldr	r2, [r7, #0]
 8016020:	4613      	mov	r3, r2
 8016022:	019b      	lsls	r3, r3, #6
 8016024:	4413      	add	r3, r2
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	440b      	add	r3, r1
 801602a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801602e:	2b00      	cmp	r3, #0
 8016030:	d06f      	beq.n	8016112 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x11a>
      if ( ForwardSystemMessages() ) ForwardMessage(N2kCANMsgBuf[MsgIndex].N2kMsg);
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7fa faa0 	bl	8010578 <_ZNK9tNMEA200021ForwardSystemMessagesEv>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00b      	beq.n	8016056 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x5e>
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8016042:	683a      	ldr	r2, [r7, #0]
 8016044:	4613      	mov	r3, r2
 8016046:	019b      	lsls	r3, r3, #6
 8016048:	4413      	add	r3, r2
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	440b      	add	r3, r1
 801604e:	4619      	mov	r1, r3
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7fe fc90 	bl	8014976 <_ZN9tNMEA200014ForwardMessageERK7tN2kMsg>
      if ( N2kMode!=N2km_ListenOnly ) { // Note that in listen only mode we will not inform us to the bus
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	795b      	ldrb	r3, [r3, #5]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d057      	beq.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
        switch (N2kCANMsgBuf[MsgIndex].N2kMsg.PGN) {
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8016062:	683a      	ldr	r2, [r7, #0]
 8016064:	4613      	mov	r3, r2
 8016066:	019b      	lsls	r3, r3, #6
 8016068:	4413      	add	r3, r2
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	440b      	add	r3, r1
 801606e:	689b      	ldr	r3, [r3, #8]
 8016070:	4a2a      	ldr	r2, [pc, #168]	; (801611c <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 8016072:	4293      	cmp	r3, r2
 8016074:	d03d      	beq.n	80160f2 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xfa>
 8016076:	4a29      	ldr	r2, [pc, #164]	; (801611c <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x124>)
 8016078:	4293      	cmp	r3, r2
 801607a:	d848      	bhi.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 801607c:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 8016080:	4293      	cmp	r3, r2
 8016082:	d029      	beq.n	80160d8 <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xe0>
 8016084:	f64f 62d8 	movw	r2, #65240	; 0xfed8
 8016088:	4293      	cmp	r3, r2
 801608a:	d840      	bhi.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 801608c:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8016090:	d015      	beq.n	80160be <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0xc6>
 8016092:	f5b3 4f6e 	cmp.w	r3, #60928	; 0xee00
 8016096:	d83a      	bhi.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
 8016098:	f5b3 4f68 	cmp.w	r3, #59392	; 0xe800
 801609c:	d036      	beq.n	801610c <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x114>
 801609e:	f5b3 4f6a 	cmp.w	r3, #59904	; 0xea00
 80160a2:	d134      	bne.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 59392L: /*ISO Acknowledgement*/
            break;
          case 59904L: /*ISO Request*/
            HandleISORequest(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80160a8:	683a      	ldr	r2, [r7, #0]
 80160aa:	4613      	mov	r3, r2
 80160ac:	019b      	lsls	r3, r3, #6
 80160ae:	4413      	add	r3, r2
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	440b      	add	r3, r1
 80160b4:	4619      	mov	r1, r3
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7ff fc04 	bl	80158c4 <_ZN9tNMEA200016HandleISORequestERK7tN2kMsg>
            break;
 80160bc:	e027      	b.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 60928L: /*ISO Address Claim*/
            HandleISOAddressClaim(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80160c2:	683a      	ldr	r2, [r7, #0]
 80160c4:	4613      	mov	r3, r2
 80160c6:	019b      	lsls	r3, r3, #6
 80160c8:	4413      	add	r3, r2
 80160ca:	009b      	lsls	r3, r3, #2
 80160cc:	440b      	add	r3, r1
 80160ce:	4619      	mov	r1, r3
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7ff fd8a 	bl	8015bea <_ZN9tNMEA200021HandleISOAddressClaimERK7tN2kMsg>
            break;
 80160d6:	e01a      	b.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
          case 65240L: /*Commanded Address*/
            HandleCommandedAddress(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	4613      	mov	r3, r2
 80160e0:	019b      	lsls	r3, r3, #6
 80160e2:	4413      	add	r3, r2
 80160e4:	009b      	lsls	r3, r3, #2
 80160e6:	440b      	add	r3, r1
 80160e8:	4619      	mov	r1, r3
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7ff fe57 	bl	8015d9e <_ZN9tNMEA200022HandleCommandedAddressERK7tN2kMsg>
            break;
 80160f0:	e00d      	b.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
          case 126208L: /*NMEA Request/Command/Acknowledge group function*/
            HandleGroupFunction(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80160f6:	683a      	ldr	r2, [r7, #0]
 80160f8:	4613      	mov	r3, r2
 80160fa:	019b      	lsls	r3, r3, #6
 80160fc:	4413      	add	r3, r2
 80160fe:	009b      	lsls	r3, r3, #2
 8016100:	440b      	add	r3, r1
 8016102:	4619      	mov	r1, r3
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f7ff fc65 	bl	80159d4 <_ZN9tNMEA200019HandleGroupFunctionERK7tN2kMsg>
            break;
 801610a:	e000      	b.n	801610e <_ZN9tNMEA200027HandleReceivedSystemMessageEi+0x116>
            break;
 801610c:	bf00      	nop
#endif
        }
      }
      result=true;
 801610e:	2301      	movs	r3, #1
 8016110:	73fb      	strb	r3, [r7, #15]
    }

  return result;
 8016112:	7bfb      	ldrb	r3, [r7, #15]
}
 8016114:	4618      	mov	r0, r3
 8016116:	3710      	adds	r7, #16
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	0001ed00 	.word	0x0001ed00

08016120 <_ZN9tNMEA200013ParseMessagesEv>:

//*****************************************************************************
void tNMEA2000::ParseMessages() {
 8016120:	b590      	push	{r4, r7, lr}
 8016122:	b089      	sub	sp, #36	; 0x24
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
    unsigned long canId;
    unsigned char len = 0;
 8016128:	2300      	movs	r3, #0
 801612a:	74fb      	strb	r3, [r7, #19]
    unsigned char buf[8];
    uint8_t MsgIndex;
    static const int MaxReadFramesOnParse=20;
    int FramesRead=0;
 801612c:	2300      	movs	r3, #0
 801612e:	61fb      	str	r3, [r7, #28]
//    tN2kMsg N2kMsg;

    if ( OpenState!=os_Open ) {
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	7e1b      	ldrb	r3, [r3, #24]
 8016134:	2b03      	cmp	r3, #3
 8016136:	d011      	beq.n	801615c <_ZN9tNMEA200013ParseMessagesEv+0x3c>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f7fb fe97 	bl	8011e6c <_ZN9tNMEA20004OpenEv>
 801613e:	4603      	mov	r3, r0
 8016140:	f083 0301 	eor.w	r3, r3, #1
 8016144:	b2db      	uxtb	r3, r3
 8016146:	2b00      	cmp	r3, #0
 8016148:	d103      	bne.n	8016152 <_ZN9tNMEA200013ParseMessagesEv+0x32>
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	7e1b      	ldrb	r3, [r3, #24]
 801614e:	2b03      	cmp	r3, #3
 8016150:	d001      	beq.n	8016156 <_ZN9tNMEA200013ParseMessagesEv+0x36>
 8016152:	2301      	movs	r3, #1
 8016154:	e000      	b.n	8016158 <_ZN9tNMEA200013ParseMessagesEv+0x38>
 8016156:	2300      	movs	r3, #0
 8016158:	2b00      	cmp	r3, #0
 801615a:	d166      	bne.n	801622a <_ZN9tNMEA200013ParseMessagesEv+0x10a>
    }

    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	791b      	ldrb	r3, [r3, #4]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d164      	bne.n	801622e <_ZN9tNMEA200013ParseMessagesEv+0x10e>

    SendFrames();
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f7fc f848 	bl	80121fa <_ZN9tNMEA200010SendFramesEv>
    SendPendingInformation();
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7fc fb26 	bl	80127bc <_ZN9tNMEA200022SendPendingInformationEv>
#if defined(DEBUG_NMEA2000_ISR)
    TestISR();
#endif

    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 8016170:	69fb      	ldr	r3, [r7, #28]
 8016172:	2b13      	cmp	r3, #19
 8016174:	dc10      	bgt.n	8016198 <_ZN9tNMEA200013ParseMessagesEv+0x78>
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	3308      	adds	r3, #8
 801617c:	681c      	ldr	r4, [r3, #0]
 801617e:	f107 0308 	add.w	r3, r7, #8
 8016182:	f107 0213 	add.w	r2, r7, #19
 8016186:	f107 0114 	add.w	r1, r7, #20
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	47a0      	blx	r4
 801618e:	4603      	mov	r3, r0
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <_ZN9tNMEA200013ParseMessagesEv+0x78>
 8016194:	2301      	movs	r3, #1
 8016196:	e000      	b.n	801619a <_ZN9tNMEA200013ParseMessagesEv+0x7a>
 8016198:	2300      	movs	r3, #0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d040      	beq.n	8016220 <_ZN9tNMEA200013ParseMessagesEv+0x100>
        FramesRead++;
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	3301      	adds	r3, #1
 80161a2:	61fb      	str	r3, [r7, #28]
        N2kMsgDbgStart("Received frame, can ID:"); N2kMsgDbg(canId); N2kMsgDbg(" len:"); N2kMsgDbg(len); N2kMsgDbg(" data:"); DbgPrintBuf(len,buf,false); N2kMsgDbgln();
        MsgIndex=SetN2kCANBufMsg(canId,len,buf);
 80161a4:	6979      	ldr	r1, [r7, #20]
 80161a6:	7cfa      	ldrb	r2, [r7, #19]
 80161a8:	f107 0308 	add.w	r3, r7, #8
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f7fe f9c4 	bl	801453a <_ZN9tNMEA200015SetN2kCANBufMsgEmhPh>
 80161b2:	4603      	mov	r3, r0
 80161b4:	76fb      	strb	r3, [r7, #27]
        if (MsgIndex<MaxN2kCANMsgs) {
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80161bc:	7efa      	ldrb	r2, [r7, #27]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d2d6      	bcs.n	8016170 <_ZN9tNMEA200013ParseMessagesEv+0x50>
          if ( !HandleReceivedSystemMessage(MsgIndex) ) {
 80161c2:	7efb      	ldrb	r3, [r7, #27]
 80161c4:	4619      	mov	r1, r3
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f7ff ff16 	bl	8015ff8 <_ZN9tNMEA200027HandleReceivedSystemMessageEi>
 80161cc:	4603      	mov	r3, r0
 80161ce:	f083 0301 	eor.w	r3, r3, #1
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d00b      	beq.n	80161f0 <_ZN9tNMEA200013ParseMessagesEv+0xd0>
            N2kMsgDbgStart(" - Non system message, MsgIndex: "); N2kMsgDbgln(MsgIndex);
            ForwardMessage(N2kCANMsgBuf[MsgIndex]);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80161dc:	7efa      	ldrb	r2, [r7, #27]
 80161de:	4613      	mov	r3, r2
 80161e0:	019b      	lsls	r3, r3, #6
 80161e2:	4413      	add	r3, r2
 80161e4:	009b      	lsls	r3, r3, #2
 80161e6:	440b      	add	r3, r1
 80161e8:	4619      	mov	r1, r3
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f7fe fc09 	bl	8014a02 <_ZN9tNMEA200014ForwardMessageERK10tN2kCANMsg>
          }
//          N2kCANMsgBuf[MsgIndex].N2kMsg.Print(Serial);
          RunMessageHandlers(N2kCANMsgBuf[MsgIndex].N2kMsg);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80161f4:	7efa      	ldrb	r2, [r7, #27]
 80161f6:	4613      	mov	r3, r2
 80161f8:	019b      	lsls	r3, r3, #6
 80161fa:	4413      	add	r3, r2
 80161fc:	009b      	lsls	r3, r3, #2
 80161fe:	440b      	add	r3, r1
 8016200:	4619      	mov	r1, r3
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 f817 	bl	8016236 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>
          N2kCANMsgBuf[MsgIndex].FreeMessage();
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801620c:	7efa      	ldrb	r2, [r7, #27]
 801620e:	4613      	mov	r3, r2
 8016210:	019b      	lsls	r3, r3, #6
 8016212:	4413      	add	r3, r2
 8016214:	009b      	lsls	r3, r3, #2
 8016216:	440b      	add	r3, r1
 8016218:	4618      	mov	r0, r3
 801621a:	f7f9 feb1 	bl	800ff80 <_ZN10tN2kCANMsg11FreeMessageEv>
    while (FramesRead<MaxReadFramesOnParse && CANGetFrame(canId,len,buf) ) {           // check if data coming
 801621e:	e7a7      	b.n	8016170 <_ZN9tNMEA200013ParseMessagesEv+0x50>
          N2kMsgDbgStart(" - Free message, MsgIndex: "); N2kMsgDbg(MsgIndex); N2kMsgDbgln();
        }
    }

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
    SendHeartbeat();
 8016220:	2100      	movs	r1, #0
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f7fc f9a0 	bl	8012568 <_ZN9tNMEA200013SendHeartbeatEb>
 8016228:	e002      	b.n	8016230 <_ZN9tNMEA200013ParseMessagesEv+0x110>
      if ( !(Open() && OpenState==os_Open) ) return;  // Can not do much
 801622a:	bf00      	nop
 801622c:	e000      	b.n	8016230 <_ZN9tNMEA200013ParseMessagesEv+0x110>
    if (dbMode != dm_None) return; // No much to do here, when in Debug mode
 801622e:	bf00      	nop
#endif
}
 8016230:	3724      	adds	r7, #36	; 0x24
 8016232:	46bd      	mov	sp, r7
 8016234:	bd90      	pop	{r4, r7, pc}

08016236 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg>:

//*****************************************************************************
void tNMEA2000::RunMessageHandlers(const tN2kMsg &N2kMsg) {
 8016236:	b580      	push	{r7, lr}
 8016238:	b084      	sub	sp, #16
 801623a:	af00      	add	r7, sp, #0
 801623c:	6078      	str	r0, [r7, #4]
 801623e:	6039      	str	r1, [r7, #0]
  if ( MsgHandler!=0 ) MsgHandler(N2kMsg);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016244:	2b00      	cmp	r3, #0
 8016246:	d003      	beq.n	8016250 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x1a>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801624c:	6838      	ldr	r0, [r7, #0]
 801624e:	4798      	blx	r3

  tMsgHandler *MsgHandler=MsgHandlers;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	691b      	ldr	r3, [r3, #16]
 8016254:	60fb      	str	r3, [r7, #12]
  // Loop through all pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()==0; MsgHandler=MsgHandler->pNext) MsgHandler->HandleMsg(N2kMsg);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d007      	beq.n	801626c <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f7fa f80c 	bl	801027a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 8016262:	4603      	mov	r3, r0
 8016264:	2b00      	cmp	r3, #0
 8016266:	d101      	bne.n	801626c <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x36>
 8016268:	2301      	movs	r3, #1
 801626a:	e000      	b.n	801626e <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x38>
 801626c:	2300      	movs	r3, #0
 801626e:	2b00      	cmp	r3, #0
 8016270:	d009      	beq.n	8016286 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	6839      	ldr	r1, [r7, #0]
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	4798      	blx	r3
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	685b      	ldr	r3, [r3, #4]
 8016282:	60fb      	str	r3, [r7, #12]
 8016284:	e7e7      	b.n	8016256 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x20>
  // Loop through specific pgn handlers
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d009      	beq.n	80162a0 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f7f9 fff4 	bl	801027a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 8016292:	4602      	mov	r2, r0
 8016294:	683b      	ldr	r3, [r7, #0]
 8016296:	689b      	ldr	r3, [r3, #8]
 8016298:	429a      	cmp	r2, r3
 801629a:	d801      	bhi.n	80162a0 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6a>
 801629c:	2301      	movs	r3, #1
 801629e:	e000      	b.n	80162a2 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x6c>
 80162a0:	2300      	movs	r3, #0
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d016      	beq.n	80162d4 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x9e>
    if ( MsgHandler->GetPGN()==N2kMsg.PGN ) MsgHandler->HandleMsg(N2kMsg);
 80162a6:	68f8      	ldr	r0, [r7, #12]
 80162a8:	f7f9 ffe7 	bl	801027a <_ZNK9tNMEA200011tMsgHandler6GetPGNEv>
 80162ac:	4602      	mov	r2, r0
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	689b      	ldr	r3, [r3, #8]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	bf0c      	ite	eq
 80162b6:	2301      	moveq	r3, #1
 80162b8:	2300      	movne	r3, #0
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d005      	beq.n	80162cc <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x96>
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	6839      	ldr	r1, [r7, #0]
 80162c8:	68f8      	ldr	r0, [r7, #12]
 80162ca:	4798      	blx	r3
  for ( ;MsgHandler!=0 && MsgHandler->GetPGN()<=N2kMsg.PGN; MsgHandler=MsgHandler->pNext) {
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	60fb      	str	r3, [r7, #12]
 80162d2:	e7d8      	b.n	8016286 <_ZN9tNMEA200018RunMessageHandlersERK7tN2kMsg+0x50>
  }
}
 80162d4:	bf00      	nop
 80162d6:	3710      	adds	r7, #16
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}

080162dc <_ZN9tNMEA20009SetOnOpenEPFvvE>:

//*****************************************************************************
void tNMEA2000::SetOnOpen(void (*_OnOpen)()) {
 80162dc:	b480      	push	{r7}
 80162de:	b083      	sub	sp, #12
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	6039      	str	r1, [r7, #0]
  OnOpen=_OnOpen;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	683a      	ldr	r2, [r7, #0]
 80162ea:	659a      	str	r2, [r3, #88]	; 0x58
}
 80162ec:	bf00      	nop
 80162ee:	370c      	adds	r7, #12
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bc80      	pop	{r7}
 80162f4:	4770      	bx	lr

080162f6 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:
  ISORqstHandler=ISORequestHandler;
}

#if !defined(N2K_NO_GROUP_FUNCTION_SUPPORT)
//*****************************************************************************
void tNMEA2000::RemoveGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 80162f6:	b480      	push	{r7}
 80162f8:	b085      	sub	sp, #20
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
 80162fe:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d02b      	beq.n	801635e <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801630a:	2b00      	cmp	r3, #0
 801630c:	d027      	beq.n	801635e <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x68>

  tN2kGroupFunctionHandler* pPrevGroupFunctionHandler=pGroupFunctionHandlers;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016312:	60fb      	str	r3, [r7, #12]
  // Handle, if first
  if ( pPrevGroupFunctionHandler==pGroupFunctionHandler ) {
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	429a      	cmp	r2, r3
 801631a:	d104      	bne.n	8016326 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    pGroupFunctionHandlers=pPrevGroupFunctionHandler->pNext;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	685a      	ldr	r2, [r3, #4]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	665a      	str	r2, [r3, #100]	; 0x64
 8016324:	e017      	b.n	8016356 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
  } else {
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d008      	beq.n	801633e <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	683a      	ldr	r2, [r7, #0]
 8016332:	429a      	cmp	r2, r3
 8016334:	d003      	beq.n	801633e <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pPrevGroupFunctionHandler = pPrevGroupFunctionHandler->pNext);
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	60fb      	str	r3, [r7, #12]
    for ( ;pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext!=pGroupFunctionHandler;
 801633c:	e7f3      	b.n	8016326 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x30>
    if ( pPrevGroupFunctionHandler!=0 && pPrevGroupFunctionHandler->pNext==pGroupFunctionHandler ) {
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d008      	beq.n	8016356 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	683a      	ldr	r2, [r7, #0]
 801634a:	429a      	cmp	r2, r3
 801634c:	d103      	bne.n	8016356 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x60>
      pPrevGroupFunctionHandler->pNext=pGroupFunctionHandler->pNext;
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	685a      	ldr	r2, [r3, #4]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	605a      	str	r2, [r3, #4]
    }
  }
  pGroupFunctionHandler->pNext=0;
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	2200      	movs	r2, #0
 801635a:	605a      	str	r2, [r3, #4]
 801635c:	e000      	b.n	8016360 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  if (pGroupFunctionHandler==0 || pGroupFunctionHandlers==0 ) return;
 801635e:	bf00      	nop
}
 8016360:	3714      	adds	r7, #20
 8016362:	46bd      	mov	sp, r7
 8016364:	bc80      	pop	{r7}
 8016366:	4770      	bx	lr

08016368 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler>:

//*****************************************************************************
void tNMEA2000::AddGroupFunctionHandler(tN2kGroupFunctionHandler *pGroupFunctionHandler) {
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  if (pGroupFunctionHandler==0) return;
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d02c      	beq.n	80163d2 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6a>
  RemoveGroupFunctionHandler(pGroupFunctionHandler);
 8016378:	6839      	ldr	r1, [r7, #0]
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f7ff ffbb 	bl	80162f6 <_ZN9tNMEA200026RemoveGroupFunctionHandlerEP24tN2kGroupFunctionHandler>
  // Add to the end on the list
  if ( pGroupFunctionHandlers==0 ) { // If there is none set, put it to first
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016384:	2b00      	cmp	r3, #0
 8016386:	d103      	bne.n	8016390 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x28>
    pGroupFunctionHandlers=pGroupFunctionHandler;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	683a      	ldr	r2, [r7, #0]
 801638c:	665a      	str	r2, [r3, #100]	; 0x64
 801638e:	e021      	b.n	80163d4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  } else {
    tN2kGroupFunctionHandler* pLastGroupFunctionHandler;
    // find last
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016394:	60fb      	str	r3, [r7, #12]
      pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN != 0;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	685b      	ldr	r3, [r3, #4]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d008      	beq.n	80163b0 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	689b      	ldr	r3, [r3, #8]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d003      	beq.n	80163b0 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x48>
      pLastGroupFunctionHandler = pLastGroupFunctionHandler->pNext);
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	60fb      	str	r3, [r7, #12]
    for (pLastGroupFunctionHandler = pGroupFunctionHandlers;
 80163ae:	e7f2      	b.n	8016396 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x2e>
    // Insert the new handler before the default handler if the default handler is present.
    if ( pLastGroupFunctionHandler->pNext != 0 && pLastGroupFunctionHandler->pNext->PGN == 0 ) {
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	685b      	ldr	r3, [r3, #4]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d008      	beq.n	80163ca <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	685b      	ldr	r3, [r3, #4]
 80163bc:	689b      	ldr	r3, [r3, #8]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d103      	bne.n	80163ca <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x62>
      pGroupFunctionHandler->pNext = pLastGroupFunctionHandler->pNext;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	685a      	ldr	r2, [r3, #4]
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	605a      	str	r2, [r3, #4]
    }
    // Add the new handler to the list.
    pLastGroupFunctionHandler->pNext = pGroupFunctionHandler;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	683a      	ldr	r2, [r7, #0]
 80163ce:	605a      	str	r2, [r3, #4]
 80163d0:	e000      	b.n	80163d4 <_ZN9tNMEA200023AddGroupFunctionHandlerEP24tN2kGroupFunctionHandler+0x6c>
  if (pGroupFunctionHandler==0) return;
 80163d2:	bf00      	nop
  }
}
 80163d4:	3710      	adds	r7, #16
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}

080163da <_Z14SetN2kPGN59392R7tN2kMsghhm>:
#endif

//*****************************************************************************
/// ISO Acknowledgement
void SetN2kPGN59392(tN2kMsg &N2kMsg, unsigned char Control, unsigned char GroupFunction, unsigned long PGN) {
 80163da:	b580      	push	{r7, lr}
 80163dc:	b084      	sub	sp, #16
 80163de:	af00      	add	r7, sp, #0
 80163e0:	60f8      	str	r0, [r7, #12]
 80163e2:	607b      	str	r3, [r7, #4]
 80163e4:	460b      	mov	r3, r1
 80163e6:	72fb      	strb	r3, [r7, #11]
 80163e8:	4613      	mov	r3, r2
 80163ea:	72bb      	strb	r3, [r7, #10]
    N2kMsg.SetPGN(59392L);
 80163ec:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	f7f8 fc73 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	2206      	movs	r2, #6
 80163fa:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddByte(Control);
 80163fc:	7afb      	ldrb	r3, [r7, #11]
 80163fe:	4619      	mov	r1, r3
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f7f8 fdab 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(GroupFunction);
 8016406:	7abb      	ldrb	r3, [r7, #10]
 8016408:	4619      	mov	r1, r3
 801640a:	68f8      	ldr	r0, [r7, #12]
 801640c:	f7f8 fda6 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 8016410:	21ff      	movs	r1, #255	; 0xff
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	f7f8 fda2 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 8016418:	21ff      	movs	r1, #255	; 0xff
 801641a:	68f8      	ldr	r0, [r7, #12]
 801641c:	f7f8 fd9e 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0xff); // Reserved
 8016420:	21ff      	movs	r1, #255	; 0xff
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	f7f8 fd9a 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.Add3ByteInt(PGN);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	4619      	mov	r1, r3
 801642c:	68f8      	ldr	r0, [r7, #12]
 801642e:	f7f8 fd5e 	bl	800eeee <_ZN7tN2kMsg11Add3ByteIntEl>
}
 8016432:	bf00      	nop
 8016434:	3710      	adds	r7, #16
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <_Z14SetN2kPGN60928R7tN2kMsgy>:
    N2kMsg.AddByte( 0x80 | ((IndustryGroup&0x7)<<4) | (SystemInstance&0x0f) );
}

//*****************************************************************************
// ISO Address Claim
void SetN2kPGN60928(tN2kMsg &N2kMsg, uint64_t Name) {
 801643a:	b580      	push	{r7, lr}
 801643c:	b084      	sub	sp, #16
 801643e:	af00      	add	r7, sp, #0
 8016440:	60f8      	str	r0, [r7, #12]
 8016442:	e9c7 2300 	strd	r2, r3, [r7]
    N2kMsg.SetPGN(N2kPGNIsoAddressClaim);
 8016446:	f44f 416e 	mov.w	r1, #60928	; 0xee00
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	f7f8 fc46 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	2206      	movs	r2, #6
 8016454:	711a      	strb	r2, [r3, #4]

    N2kMsg.AddUInt64(Name);
 8016456:	e9d7 2300 	ldrd	r2, r3, [r7]
 801645a:	68f8      	ldr	r0, [r7, #12]
 801645c:	f7f8 fd6b 	bl	800ef36 <_ZN7tN2kMsg9AddUInt64Ey>
}
 8016460:	bf00      	nop
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh>:
//*****************************************************************************
// Product Information
void SetN2kPGN126996(tN2kMsg &N2kMsg, unsigned int N2kVersion, unsigned int ProductCode,
                     const char *ModelID, const char *SwCode,
                     const char *ModelVersion, const char *ModelSerialCode,
                     unsigned char CertificationLevel, unsigned char LoadEquivalency) {
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	607a      	str	r2, [r7, #4]
 8016474:	603b      	str	r3, [r7, #0]

    N2kMsg.SetPGN(N2kPGNProductInformation);
 8016476:	491d      	ldr	r1, [pc, #116]	; (80164ec <_Z15SetN2kPGN126996R7tN2kMsgjjPKcS2_S2_S2_hh+0x84>)
 8016478:	68f8      	ldr	r0, [r7, #12]
 801647a:	f7f8 fc2f 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	2206      	movs	r2, #6
 8016482:	711a      	strb	r2, [r3, #4]
    N2kMsg.Add2ByteUInt(N2kVersion);
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	b29b      	uxth	r3, r3
 8016488:	4619      	mov	r1, r3
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f7f8 fd1b 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.Add2ByteUInt(ProductCode);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	b29b      	uxth	r3, r3
 8016494:	4619      	mov	r1, r3
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	f7f8 fd15 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
    N2kMsg.AddStr(ModelID, Max_N2kModelID_len);
 801649c:	2300      	movs	r3, #0
 801649e:	2220      	movs	r2, #32
 80164a0:	6839      	ldr	r1, [r7, #0]
 80164a2:	68f8      	ldr	r0, [r7, #12]
 80164a4:	f7f8 fd70 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(SwCode, Max_N2kSwCode_len);
 80164a8:	2300      	movs	r3, #0
 80164aa:	2220      	movs	r2, #32
 80164ac:	69b9      	ldr	r1, [r7, #24]
 80164ae:	68f8      	ldr	r0, [r7, #12]
 80164b0:	f7f8 fd6a 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelVersion, Max_N2kModelVersion_len);
 80164b4:	2300      	movs	r3, #0
 80164b6:	2220      	movs	r2, #32
 80164b8:	69f9      	ldr	r1, [r7, #28]
 80164ba:	68f8      	ldr	r0, [r7, #12]
 80164bc:	f7f8 fd64 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddStr(ModelSerialCode, Max_N2kModelSerialCode_len);
 80164c0:	2300      	movs	r3, #0
 80164c2:	2220      	movs	r2, #32
 80164c4:	6a39      	ldr	r1, [r7, #32]
 80164c6:	68f8      	ldr	r0, [r7, #12]
 80164c8:	f7f8 fd5e 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>
    N2kMsg.AddByte(CertificationLevel);
 80164cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80164d0:	4619      	mov	r1, r3
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f7f8 fd42 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(LoadEquivalency);
 80164d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80164dc:	4619      	mov	r1, r3
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	f7f8 fd3c 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
}
 80164e4:	bf00      	nop
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	0001f014 	.word	0x0001f014

080164f0 <_Z13ProgmemStrLenPKc>:

  return true;
}

//*****************************************************************************
size_t ProgmemStrLen(const char *str) {
 80164f0:	b480      	push	{r7}
 80164f2:	b085      	sub	sp, #20
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
  size_t len;
    if (str==0) return 0;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d101      	bne.n	8016502 <_Z13ProgmemStrLenPKc+0x12>
 80164fe:	2300      	movs	r3, #0
 8016500:	e00c      	b.n	801651c <_Z13ProgmemStrLenPKc+0x2c>
    for (len=0; pgm_read_byte(&(str[len]))!=0; len++ );
 8016502:	2300      	movs	r3, #0
 8016504:	60fb      	str	r3, [r7, #12]
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	4413      	add	r3, r2
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d003      	beq.n	801651a <_Z13ProgmemStrLenPKc+0x2a>
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	3301      	adds	r3, #1
 8016516:	60fb      	str	r3, [r7, #12]
 8016518:	e7f5      	b.n	8016506 <_Z13ProgmemStrLenPKc+0x16>
    return len;
 801651a:	68fb      	ldr	r3, [r7, #12]
}
 801651c:	4618      	mov	r0, r3
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	bc80      	pop	{r7}
 8016524:	4770      	bx	lr

08016526 <_Z6StrLenPKc>:

//*****************************************************************************
size_t StrLen(const char *str) {
 8016526:	b580      	push	{r7, lr}
 8016528:	b082      	sub	sp, #8
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
    if (str==0) return 0;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d101      	bne.n	8016538 <_Z6StrLenPKc+0x12>
 8016534:	2300      	movs	r3, #0
 8016536:	e004      	b.n	8016542 <_Z6StrLenPKc+0x1c>
    return strlen(str);
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7e9 fe7f 	bl	800023c <strlen>
 801653e:	4603      	mov	r3, r0
 8016540:	bf00      	nop
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
	...

0801654c <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b>:
// Configuration information
void SetN2kPGN126998(tN2kMsg &N2kMsg,
                     const char *ManufacturerInformation,
                     const char *InstallationDescription1,
                     const char *InstallationDescription2,
                     bool UsePgm) {
 801654c:	b580      	push	{r7, lr}
 801654e:	b08a      	sub	sp, #40	; 0x28
 8016550:	af00      	add	r7, sp, #0
 8016552:	60f8      	str	r0, [r7, #12]
 8016554:	60b9      	str	r1, [r7, #8]
 8016556:	607a      	str	r2, [r7, #4]
 8016558:	603b      	str	r3, [r7, #0]
  size_t TotalLen;
  size_t MaxLen=tN2kMsg::MaxDataLen-6; // Each field has 2 extra bytes
 801655a:	23d9      	movs	r3, #217	; 0xd9
 801655c:	61bb      	str	r3, [r7, #24]
  size_t ManInfoLen;
  size_t InstDesc1Len;
  size_t InstDesc2Len;

    if ( UsePgm ) {
 801655e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016562:	2b00      	cmp	r3, #0
 8016564:	d00c      	beq.n	8016580 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x34>
      ManInfoLen=ProgmemStrLen(ManufacturerInformation);
 8016566:	68b8      	ldr	r0, [r7, #8]
 8016568:	f7ff ffc2 	bl	80164f0 <_Z13ProgmemStrLenPKc>
 801656c:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=ProgmemStrLen(InstallationDescription1);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7ff ffbe 	bl	80164f0 <_Z13ProgmemStrLenPKc>
 8016574:	6238      	str	r0, [r7, #32]
      InstDesc2Len=ProgmemStrLen(InstallationDescription2);
 8016576:	6838      	ldr	r0, [r7, #0]
 8016578:	f7ff ffba 	bl	80164f0 <_Z13ProgmemStrLenPKc>
 801657c:	61f8      	str	r0, [r7, #28]
 801657e:	e00b      	b.n	8016598 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x4c>
    } else {
      ManInfoLen=StrLen(ManufacturerInformation);
 8016580:	68b8      	ldr	r0, [r7, #8]
 8016582:	f7ff ffd0 	bl	8016526 <_Z6StrLenPKc>
 8016586:	6278      	str	r0, [r7, #36]	; 0x24
      InstDesc1Len=StrLen(InstallationDescription1);
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f7ff ffcc 	bl	8016526 <_Z6StrLenPKc>
 801658e:	6238      	str	r0, [r7, #32]
      InstDesc2Len=StrLen(InstallationDescription2);
 8016590:	6838      	ldr	r0, [r7, #0]
 8016592:	f7ff ffc8 	bl	8016526 <_Z6StrLenPKc>
 8016596:	61f8      	str	r0, [r7, #28]
    }

    if ( ManInfoLen>Max_N2kConfigurationInfoField_len ) ManInfoLen=Max_N2kConfigurationInfoField_len;
 8016598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801659a:	2b47      	cmp	r3, #71	; 0x47
 801659c:	d901      	bls.n	80165a2 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x56>
 801659e:	2347      	movs	r3, #71	; 0x47
 80165a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ( InstDesc1Len>Max_N2kConfigurationInfoField_len ) InstDesc1Len=Max_N2kConfigurationInfoField_len;
 80165a2:	6a3b      	ldr	r3, [r7, #32]
 80165a4:	2b47      	cmp	r3, #71	; 0x47
 80165a6:	d901      	bls.n	80165ac <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x60>
 80165a8:	2347      	movs	r3, #71	; 0x47
 80165aa:	623b      	str	r3, [r7, #32]
    if ( InstDesc2Len>Max_N2kConfigurationInfoField_len ) InstDesc2Len=Max_N2kConfigurationInfoField_len;
 80165ac:	69fb      	ldr	r3, [r7, #28]
 80165ae:	2b47      	cmp	r3, #71	; 0x47
 80165b0:	d901      	bls.n	80165b6 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x6a>
 80165b2:	2347      	movs	r3, #71	; 0x47
 80165b4:	61fb      	str	r3, [r7, #28]

    TotalLen=0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	617b      	str	r3, [r7, #20]
    if (TotalLen+ManInfoLen>MaxLen) ManInfoLen=MaxLen-TotalLen;
 80165ba:	697a      	ldr	r2, [r7, #20]
 80165bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165be:	4413      	add	r3, r2
 80165c0:	69ba      	ldr	r2, [r7, #24]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d203      	bcs.n	80165ce <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x82>
 80165c6:	69ba      	ldr	r2, [r7, #24]
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	1ad3      	subs	r3, r2, r3
 80165cc:	627b      	str	r3, [r7, #36]	; 0x24
    TotalLen+=ManInfoLen;
 80165ce:	697a      	ldr	r2, [r7, #20]
 80165d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d2:	4413      	add	r3, r2
 80165d4:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc1Len>MaxLen) InstDesc1Len=MaxLen-TotalLen;
 80165d6:	697a      	ldr	r2, [r7, #20]
 80165d8:	6a3b      	ldr	r3, [r7, #32]
 80165da:	4413      	add	r3, r2
 80165dc:	69ba      	ldr	r2, [r7, #24]
 80165de:	429a      	cmp	r2, r3
 80165e0:	d203      	bcs.n	80165ea <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x9e>
 80165e2:	69ba      	ldr	r2, [r7, #24]
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	1ad3      	subs	r3, r2, r3
 80165e8:	623b      	str	r3, [r7, #32]
    TotalLen+=InstDesc1Len;
 80165ea:	697a      	ldr	r2, [r7, #20]
 80165ec:	6a3b      	ldr	r3, [r7, #32]
 80165ee:	4413      	add	r3, r2
 80165f0:	617b      	str	r3, [r7, #20]
    if (TotalLen+InstDesc2Len>MaxLen) InstDesc2Len=MaxLen-TotalLen;
 80165f2:	697a      	ldr	r2, [r7, #20]
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	4413      	add	r3, r2
 80165f8:	69ba      	ldr	r2, [r7, #24]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d203      	bcs.n	8016606 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0xba>
 80165fe:	69ba      	ldr	r2, [r7, #24]
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	1ad3      	subs	r3, r2, r3
 8016604:	61fb      	str	r3, [r7, #28]
    TotalLen+=InstDesc2Len;
 8016606:	697a      	ldr	r2, [r7, #20]
 8016608:	69fb      	ldr	r3, [r7, #28]
 801660a:	4413      	add	r3, r2
 801660c:	617b      	str	r3, [r7, #20]

    N2kMsg.SetPGN(N2kPGNConfigurationInformation);
 801660e:	4922      	ldr	r1, [pc, #136]	; (8016698 <_Z15SetN2kPGN126998R7tN2kMsgPKcS2_S2_b+0x14c>)
 8016610:	68f8      	ldr	r0, [r7, #12]
 8016612:	f7f8 fb63 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
    N2kMsg.Priority=6;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2206      	movs	r2, #6
 801661a:	711a      	strb	r2, [r3, #4]
    // InstallationDescription1
    N2kMsg.AddByte(InstDesc1Len+2);
 801661c:	6a3b      	ldr	r3, [r7, #32]
 801661e:	b2db      	uxtb	r3, r3
 8016620:	3302      	adds	r3, #2
 8016622:	b2db      	uxtb	r3, r3
 8016624:	4619      	mov	r1, r3
 8016626:	68f8      	ldr	r0, [r7, #12]
 8016628:	f7f8 fc98 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 801662c:	2101      	movs	r1, #1
 801662e:	68f8      	ldr	r0, [r7, #12]
 8016630:	f7f8 fc94 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription1,InstDesc1Len,UsePgm);
 8016634:	6a3a      	ldr	r2, [r7, #32]
 8016636:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801663a:	6879      	ldr	r1, [r7, #4]
 801663c:	68f8      	ldr	r0, [r7, #12]
 801663e:	f7f8 fca3 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>

    // InstallationDescription2
    N2kMsg.AddByte(InstDesc2Len+2);
 8016642:	69fb      	ldr	r3, [r7, #28]
 8016644:	b2db      	uxtb	r3, r3
 8016646:	3302      	adds	r3, #2
 8016648:	b2db      	uxtb	r3, r3
 801664a:	4619      	mov	r1, r3
 801664c:	68f8      	ldr	r0, [r7, #12]
 801664e:	f7f8 fc85 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 8016652:	2101      	movs	r1, #1
 8016654:	68f8      	ldr	r0, [r7, #12]
 8016656:	f7f8 fc81 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(InstallationDescription2,InstDesc2Len,UsePgm);
 801665a:	69fa      	ldr	r2, [r7, #28]
 801665c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016660:	6839      	ldr	r1, [r7, #0]
 8016662:	68f8      	ldr	r0, [r7, #12]
 8016664:	f7f8 fc90 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>
    // ManufacturerInformation
    N2kMsg.AddByte(ManInfoLen+2);
 8016668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666a:	b2db      	uxtb	r3, r3
 801666c:	3302      	adds	r3, #2
 801666e:	b2db      	uxtb	r3, r3
 8016670:	4619      	mov	r1, r3
 8016672:	68f8      	ldr	r0, [r7, #12]
 8016674:	f7f8 fc72 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddByte(0x01);
 8016678:	2101      	movs	r1, #1
 801667a:	68f8      	ldr	r0, [r7, #12]
 801667c:	f7f8 fc6e 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
    N2kMsg.AddStr(ManufacturerInformation,ManInfoLen,UsePgm);
 8016680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016682:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016686:	68b9      	ldr	r1, [r7, #8]
 8016688:	68f8      	ldr	r0, [r7, #12]
 801668a:	f7f8 fc7d 	bl	800ef88 <_ZN7tN2kMsg6AddStrEPKcib>
}
 801668e:	bf00      	nop
 8016690:	3728      	adds	r7, #40	; 0x28
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	0001f016 	.word	0x0001f016

0801669c <_Z16ParseN2kPGN59904RK7tN2kMsgRm>:
    N2kMsg.Destination=Destination;
    N2kMsg.Priority=6;
    N2kMsg.Add3ByteInt(RequestedPGN);
}

bool ParseN2kPGN59904(const tN2kMsg &N2kMsg, unsigned long &RequestedPGN) {
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
  int result=((N2kMsg.DataLen>=3) && (N2kMsg.DataLen<=8));
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	691b      	ldr	r3, [r3, #16]
 80166aa:	2b02      	cmp	r3, #2
 80166ac:	dd05      	ble.n	80166ba <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	691b      	ldr	r3, [r3, #16]
 80166b2:	2b08      	cmp	r3, #8
 80166b4:	dc01      	bgt.n	80166ba <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x1e>
 80166b6:	2301      	movs	r3, #1
 80166b8:	e000      	b.n	80166bc <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x20>
 80166ba:	2300      	movs	r3, #0
 80166bc:	60fb      	str	r3, [r7, #12]
  RequestedPGN=0;
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	2200      	movs	r2, #0
 80166c2:	601a      	str	r2, [r3, #0]
  if (result) {
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d00c      	beq.n	80166e4 <_Z16ParseN2kPGN59904RK7tN2kMsgRm+0x48>
    int Index=0;
 80166ca:	2300      	movs	r3, #0
 80166cc:	60bb      	str	r3, [r7, #8]
    RequestedPGN=N2kMsg.Get3ByteUInt(Index);
 80166ce:	f107 0308 	add.w	r3, r7, #8
 80166d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166d6:	4619      	mov	r1, r3
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f7f8 fca4 	bl	800f026 <_ZNK7tN2kMsg12Get3ByteUIntERim>
 80166de:	4602      	mov	r2, r0
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	601a      	str	r2, [r3, #0]
  }

  return result;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	bf14      	ite	ne
 80166ea:	2301      	movne	r3, #1
 80166ec:	2300      	moveq	r3, #0
 80166ee:	b2db      	uxtb	r3, r3
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3710      	adds	r7, #16
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <_Z15SetN2kPGN126993R7tN2kMsgmh>:
}

#if !defined(N2K_NO_HEARTBEAT_SUPPORT)
//*****************************************************************************
// Heartbeat
void SetN2kPGN126993(tN2kMsg &N2kMsg, uint32_t timeInterval_ms, uint8_t sequenceCounter) {
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b084      	sub	sp, #16
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	4613      	mov	r3, r2
 8016704:	71fb      	strb	r3, [r7, #7]
	N2kMsg.SetPGN(126993L);
 8016706:	4914      	ldr	r1, [pc, #80]	; (8016758 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x60>)
 8016708:	68f8      	ldr	r0, [r7, #12]
 801670a:	f7f8 fae7 	bl	800ecdc <_ZN7tN2kMsg6SetPGNEm>
	N2kMsg.Priority=7;
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	2207      	movs	r2, #7
 8016712:	711a      	strb	r2, [r3, #4]
	if ( timeInterval_ms>MaxHeartbeatInterval ) {
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	4a11      	ldr	r2, [pc, #68]	; (801675c <_Z15SetN2kPGN126993R7tN2kMsgmh+0x64>)
 8016718:	4293      	cmp	r3, r2
 801671a:	d905      	bls.n	8016728 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x30>
	  N2kMsg.Add2ByteUInt(0xfffe); // Error
 801671c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	f7f8 fbd0 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
 8016726:	e005      	b.n	8016734 <_Z15SetN2kPGN126993R7tN2kMsgmh+0x3c>
	} else {
	  N2kMsg.Add2ByteUInt((uint16_t)(timeInterval_ms));
 8016728:	68bb      	ldr	r3, [r7, #8]
 801672a:	b29b      	uxth	r3, r3
 801672c:	4619      	mov	r1, r3
 801672e:	68f8      	ldr	r0, [r7, #12]
 8016730:	f7f8 fbc9 	bl	800eec6 <_ZN7tN2kMsg12Add2ByteUIntEt>
	}
	N2kMsg.AddByte(sequenceCounter);
 8016734:	79fb      	ldrb	r3, [r7, #7]
 8016736:	4619      	mov	r1, r3
 8016738:	68f8      	ldr	r0, [r7, #12]
 801673a:	f7f8 fc0f 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.AddByte(0xff); // Reserved
 801673e:	21ff      	movs	r1, #255	; 0xff
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f7f8 fc0b 	bl	800ef5c <_ZN7tN2kMsg7AddByteEh>
	N2kMsg.Add4ByteUInt(0xffffffff); // Reserved
 8016746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801674a:	68f8      	ldr	r0, [r7, #12]
 801674c:	f7f8 fbe1 	bl	800ef12 <_ZN7tN2kMsg12Add4ByteUIntEm>
}
 8016750:	bf00      	nop
 8016752:	3710      	adds	r7, #16
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	0001f011 	.word	0x0001f011
 801675c:	0009ffd8 	.word	0x0009ffd8

08016760 <_ZN9tNMEA20006N2kMinIhEET_S1_S1_>:
  template <typename T> static T N2kMin(T a, T b) { return (a<b?a:b); }
 8016760:	b480      	push	{r7}
 8016762:	b083      	sub	sp, #12
 8016764:	af00      	add	r7, sp, #0
 8016766:	4603      	mov	r3, r0
 8016768:	460a      	mov	r2, r1
 801676a:	71fb      	strb	r3, [r7, #7]
 801676c:	4613      	mov	r3, r2
 801676e:	71bb      	strb	r3, [r7, #6]
 8016770:	79fa      	ldrb	r2, [r7, #7]
 8016772:	79bb      	ldrb	r3, [r7, #6]
 8016774:	429a      	cmp	r2, r3
 8016776:	d201      	bcs.n	801677c <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1c>
 8016778:	79fb      	ldrb	r3, [r7, #7]
 801677a:	e000      	b.n	801677e <_ZN9tNMEA20006N2kMinIhEET_S1_S1_+0x1e>
 801677c:	79bb      	ldrb	r3, [r7, #6]
 801677e:	4618      	mov	r0, r3
 8016780:	370c      	adds	r7, #12
 8016782:	46bd      	mov	sp, r7
 8016784:	bc80      	pop	{r7}
 8016786:	4770      	bx	lr

08016788 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_>:
  template <typename T> static T N2kMax(T a, T b) { return (a>b?a:b); }
 8016788:	b480      	push	{r7}
 801678a:	b083      	sub	sp, #12
 801678c:	af00      	add	r7, sp, #0
 801678e:	4603      	mov	r3, r0
 8016790:	460a      	mov	r2, r1
 8016792:	71fb      	strb	r3, [r7, #7]
 8016794:	4613      	mov	r3, r2
 8016796:	71bb      	strb	r3, [r7, #6]
 8016798:	79fa      	ldrb	r2, [r7, #7]
 801679a:	79bb      	ldrb	r3, [r7, #6]
 801679c:	429a      	cmp	r2, r3
 801679e:	d901      	bls.n	80167a4 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1c>
 80167a0:	79fb      	ldrb	r3, [r7, #7]
 80167a2:	e000      	b.n	80167a6 <_ZN9tNMEA20006N2kMaxIhEET_S1_S1_+0x1e>
 80167a4:	79bb      	ldrb	r3, [r7, #6]
 80167a6:	4618      	mov	r0, r3
 80167a8:	370c      	adds	r7, #12
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bc80      	pop	{r7}
 80167ae:	4770      	bx	lr

080167b0 <__NVIC_SystemReset>:
{
 80167b0:	b480      	push	{r7}
 80167b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80167b4:	f3bf 8f4f 	dsb	sy
}
 80167b8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80167ba:	4b06      	ldr	r3, [pc, #24]	; (80167d4 <__NVIC_SystemReset+0x24>)
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80167c2:	4904      	ldr	r1, [pc, #16]	; (80167d4 <__NVIC_SystemReset+0x24>)
 80167c4:	4b04      	ldr	r3, [pc, #16]	; (80167d8 <__NVIC_SystemReset+0x28>)
 80167c6:	4313      	orrs	r3, r2
 80167c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80167ca:	f3bf 8f4f 	dsb	sy
}
 80167ce:	bf00      	nop
    __NOP();
 80167d0:	bf00      	nop
 80167d2:	e7fd      	b.n	80167d0 <__NVIC_SystemReset+0x20>
 80167d4:	e000ed00 	.word	0xe000ed00
 80167d8:	05fa0004 	.word	0x05fa0004

080167dc <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	460b      	mov	r3, r1
 80167e6:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80167e8:	f240 401c 	movw	r0, #1052	; 0x41c
 80167ec:	f002 fb50 	bl	8018e90 <USBD_static_malloc>
 80167f0:	4602      	mov	r2, r0
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d101      	bne.n	8016806 <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 8016802:	2302      	movs	r3, #2
 8016804:	e03f      	b.n	8016886 <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801680c:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2200      	movs	r2, #0
 8016812:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801681c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2200      	movs	r2, #0
 8016824:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2200      	movs	r2, #0
 801682c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	2200      	movs	r2, #0
 8016834:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	2202      	movs	r2, #2
 801683c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	2200      	movs	r2, #0
 8016844:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	2200      	movs	r2, #0
 801684c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	2200      	movs	r2, #0
 8016854:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2200      	movs	r2, #0
 801685c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	2202      	movs	r2, #2
 8016864:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2200      	movs	r2, #0
 801686c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	4798      	blx	r3
 801687a:	4603      	mov	r3, r0
 801687c:	2b00      	cmp	r3, #0
 801687e:	d001      	beq.n	8016884 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8016880:	2302      	movs	r3, #2
 8016882:	e000      	b.n	8016886 <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8016884:	2300      	movs	r3, #0
}
 8016886:	4618      	mov	r0, r3
 8016888:	3710      	adds	r7, #16
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 801688e:	b580      	push	{r7, lr}
 8016890:	b084      	sub	sp, #16
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
 8016896:	460b      	mov	r3, r1
 8016898:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168a0:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	2200      	movs	r2, #0
 80168a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2200      	movs	r2, #0
 80168ae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2202      	movs	r2, #2
 80168b6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2200      	movs	r2, #0
 80168be:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	2202      	movs	r2, #2
 80168c6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d00e      	beq.n	80168f2 <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168da:	689b      	ldr	r3, [r3, #8]
 80168dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168e4:	4618      	mov	r0, r3
 80168e6:	f002 fadf 	bl	8018ea8 <USBD_static_free>
    pdev->pClassData = NULL;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80168f2:	2300      	movs	r3, #0
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3710      	adds	r7, #16
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b086      	sub	sp, #24
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8016906:	2300      	movs	r3, #0
 8016908:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 801690a:	2300      	movs	r3, #0
 801690c:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 801690e:	2300      	movs	r3, #0
 8016910:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8016912:	2300      	movs	r3, #0
 8016914:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801691c:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016926:	2b00      	cmp	r3, #0
 8016928:	d03f      	beq.n	80169aa <USBD_DFU_Setup+0xae>
 801692a:	2b20      	cmp	r3, #32
 801692c:	f040 80c2 	bne.w	8016ab4 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	785b      	ldrb	r3, [r3, #1]
 8016934:	2b06      	cmp	r3, #6
 8016936:	d830      	bhi.n	801699a <USBD_DFU_Setup+0x9e>
 8016938:	a201      	add	r2, pc, #4	; (adr r2, 8016940 <USBD_DFU_Setup+0x44>)
 801693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801693e:	bf00      	nop
 8016940:	08016991 	.word	0x08016991
 8016944:	0801695d 	.word	0x0801695d
 8016948:	08016967 	.word	0x08016967
 801694c:	08016971 	.word	0x08016971
 8016950:	08016979 	.word	0x08016979
 8016954:	08016981 	.word	0x08016981
 8016958:	08016989 	.word	0x08016989
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 801695c:	6839      	ldr	r1, [r7, #0]
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f000 fa8e 	bl	8016e80 <DFU_Download>
          break;
 8016964:	e020      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8016966:	6839      	ldr	r1, [r7, #0]
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	f000 faf3 	bl	8016f54 <DFU_Upload>
          break;
 801696e:	e01b      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 fbc7 	bl	8017104 <DFU_GetStatus>
          break;
 8016976:	e017      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f000 fc75 	bl	8017268 <DFU_ClearStatus>
          break;
 801697e:	e013      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	f000 fcc0 	bl	8017306 <DFU_GetState>
          break;
 8016986:	e00f      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	f000 fcd0 	bl	801732e <DFU_Abort>
          break;
 801698e:	e00b      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8016990:	6839      	ldr	r1, [r7, #0]
 8016992:	6878      	ldr	r0, [r7, #4]
 8016994:	f000 fa14 	bl	8016dc0 <DFU_Detach>
          break;
 8016998:	e006      	b.n	80169a8 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 801699a:	6839      	ldr	r1, [r7, #0]
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f001 fd6e 	bl	801847e <USBD_CtlError>
          ret = USBD_FAIL;
 80169a2:	2302      	movs	r3, #2
 80169a4:	747b      	strb	r3, [r7, #17]
          break;
 80169a6:	bf00      	nop
      }
      break;
 80169a8:	e08b      	b.n	8016ac2 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	785b      	ldrb	r3, [r3, #1]
 80169ae:	2b0b      	cmp	r3, #11
 80169b0:	d878      	bhi.n	8016aa4 <USBD_DFU_Setup+0x1a8>
 80169b2:	a201      	add	r2, pc, #4	; (adr r2, 80169b8 <USBD_DFU_Setup+0xbc>)
 80169b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169b8:	080169e9 	.word	0x080169e9
 80169bc:	08016aa5 	.word	0x08016aa5
 80169c0:	08016aa5 	.word	0x08016aa5
 80169c4:	08016aa5 	.word	0x08016aa5
 80169c8:	08016aa5 	.word	0x08016aa5
 80169cc:	08016aa5 	.word	0x08016aa5
 80169d0:	08016a11 	.word	0x08016a11
 80169d4:	08016aa5 	.word	0x08016aa5
 80169d8:	08016aa5 	.word	0x08016aa5
 80169dc:	08016aa5 	.word	0x08016aa5
 80169e0:	08016a3b 	.word	0x08016a3b
 80169e4:	08016a65 	.word	0x08016a65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ee:	2b03      	cmp	r3, #3
 80169f0:	d107      	bne.n	8016a02 <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80169f2:	f107 030a 	add.w	r3, r7, #10
 80169f6:	2202      	movs	r2, #2
 80169f8:	4619      	mov	r1, r3
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f001 fda9 	bl	8018552 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016a00:	e057      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8016a02:	6839      	ldr	r1, [r7, #0]
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f001 fd3a 	bl	801847e <USBD_CtlError>
            ret = USBD_FAIL;
 8016a0a:	2302      	movs	r3, #2
 8016a0c:	747b      	strb	r3, [r7, #17]
          break;
 8016a0e:	e050      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	885b      	ldrh	r3, [r3, #2]
 8016a14:	0a1b      	lsrs	r3, r3, #8
 8016a16:	b29b      	uxth	r3, r3
 8016a18:	2b21      	cmp	r3, #33	; 0x21
 8016a1a:	d107      	bne.n	8016a2c <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8016a1c:	4b2b      	ldr	r3, [pc, #172]	; (8016acc <USBD_DFU_Setup+0x1d0>)
 8016a1e:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	88db      	ldrh	r3, [r3, #6]
 8016a24:	2b09      	cmp	r3, #9
 8016a26:	bf28      	it	cs
 8016a28:	2309      	movcs	r3, #9
 8016a2a:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8016a2c:	8a7b      	ldrh	r3, [r7, #18]
 8016a2e:	461a      	mov	r2, r3
 8016a30:	6979      	ldr	r1, [r7, #20]
 8016a32:	6878      	ldr	r0, [r7, #4]
 8016a34:	f001 fd8d 	bl	8018552 <USBD_CtlSendData>
          break;
 8016a38:	e03b      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a40:	2b03      	cmp	r3, #3
 8016a42:	d108      	bne.n	8016a56 <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8016a4a:	2201      	movs	r2, #1
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f001 fd7f 	bl	8018552 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016a54:	e02d      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8016a56:	6839      	ldr	r1, [r7, #0]
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	f001 fd10 	bl	801847e <USBD_CtlError>
            ret = USBD_FAIL;
 8016a5e:	2302      	movs	r3, #2
 8016a60:	747b      	strb	r3, [r7, #17]
          break;
 8016a62:	e026      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	885b      	ldrh	r3, [r3, #2]
 8016a68:	b2db      	uxtb	r3, r3
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d113      	bne.n	8016a96 <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a74:	2b03      	cmp	r3, #3
 8016a76:	d107      	bne.n	8016a88 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	885b      	ldrh	r3, [r3, #2]
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	461a      	mov	r2, r3
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016a86:	e014      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8016a88:	6839      	ldr	r1, [r7, #0]
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f001 fcf7 	bl	801847e <USBD_CtlError>
              ret = USBD_FAIL;
 8016a90:	2302      	movs	r3, #2
 8016a92:	747b      	strb	r3, [r7, #17]
          break;
 8016a94:	e00d      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f001 fcf0 	bl	801847e <USBD_CtlError>
            ret = USBD_FAIL;
 8016a9e:	2302      	movs	r3, #2
 8016aa0:	747b      	strb	r3, [r7, #17]
          break;
 8016aa2:	e006      	b.n	8016ab2 <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f001 fce9 	bl	801847e <USBD_CtlError>
          ret = USBD_FAIL;
 8016aac:	2302      	movs	r3, #2
 8016aae:	747b      	strb	r3, [r7, #17]
          break;
 8016ab0:	bf00      	nop
      }
      break;
 8016ab2:	e006      	b.n	8016ac2 <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 8016ab4:	6839      	ldr	r1, [r7, #0]
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f001 fce1 	bl	801847e <USBD_CtlError>
      ret = USBD_FAIL;
 8016abc:	2302      	movs	r3, #2
 8016abe:	747b      	strb	r3, [r7, #17]
      break;
 8016ac0:	bf00      	nop
  }

  return ret;
 8016ac2:	7c7b      	ldrb	r3, [r7, #17]
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3718      	adds	r7, #24
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	200000f6 	.word	0x200000f6

08016ad0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b083      	sub	sp, #12
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	221b      	movs	r2, #27
 8016adc:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8016ade:	4b03      	ldr	r3, [pc, #12]	; (8016aec <USBD_DFU_GetCfgDesc+0x1c>)
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bc80      	pop	{r7}
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	200000e4 	.word	0x200000e4

08016af0 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8016af0:	b480      	push	{r7}
 8016af2:	b083      	sub	sp, #12
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
 8016af8:	460b      	mov	r3, r1
 8016afa:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8016afc:	2300      	movs	r3, #0
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	370c      	adds	r7, #12
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bc80      	pop	{r7}
 8016b06:	4770      	bx	lr

08016b08 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	370c      	adds	r7, #12
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bc80      	pop	{r7}
 8016b1a:	4770      	bx	lr

08016b1c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b086      	sub	sp, #24
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b2a:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016b32:	2b04      	cmp	r3, #4
 8016b34:	f040 80ca 	bne.w	8016ccc <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	f040 8086 	bne.w	8016c50 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d105      	bne.n	8016b58 <USBD_DFU_EP0_TxReady+0x3c>
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	f000 809a 	beq.w	8016c8c <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	2b21      	cmp	r3, #33	; 0x21
 8016b5e:	d129      	bne.n	8016bb4 <USBD_DFU_EP0_TxReady+0x98>
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b66:	2b05      	cmp	r3, #5
 8016b68:	d124      	bne.n	8016bb4 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	785b      	ldrb	r3, [r3, #1]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	789b      	ldrb	r3, [r3, #2]
 8016b80:	021b      	lsls	r3, r3, #8
 8016b82:	441a      	add	r2, r3
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	78db      	ldrb	r3, [r3, #3]
 8016b94:	041b      	lsls	r3, r3, #16
 8016b96:	441a      	add	r2, r3
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	791b      	ldrb	r3, [r3, #4]
 8016ba8:	061b      	lsls	r3, r3, #24
 8016baa:	441a      	add	r2, r3
 8016bac:	697b      	ldr	r3, [r7, #20]
 8016bae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8016bb2:	e06b      	b.n	8016c8c <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	2b41      	cmp	r3, #65	; 0x41
 8016bba:	d136      	bne.n	8016c2a <USBD_DFU_EP0_TxReady+0x10e>
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bc2:	2b05      	cmp	r3, #5
 8016bc4:	d131      	bne.n	8016c2a <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	785b      	ldrb	r3, [r3, #1]
 8016bca:	461a      	mov	r2, r3
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8016bd2:	697b      	ldr	r3, [r7, #20]
 8016bd4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8016bd8:	697b      	ldr	r3, [r7, #20]
 8016bda:	789b      	ldrb	r3, [r3, #2]
 8016bdc:	021b      	lsls	r3, r3, #8
 8016bde:	441a      	add	r2, r3
 8016be0:	697b      	ldr	r3, [r7, #20]
 8016be2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	78db      	ldrb	r3, [r3, #3]
 8016bf0:	041b      	lsls	r3, r3, #16
 8016bf2:	441a      	add	r2, r3
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	791b      	ldrb	r3, [r3, #4]
 8016c04:	061b      	lsls	r3, r3, #24
 8016c06:	441a      	add	r2, r3
 8016c08:	697b      	ldr	r3, [r7, #20]
 8016c0a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c14:	68db      	ldr	r3, [r3, #12]
 8016c16:	697a      	ldr	r2, [r7, #20]
 8016c18:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8016c1c:	4610      	mov	r0, r2
 8016c1e:	4798      	blx	r3
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d032      	beq.n	8016c8c <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 8016c26:	2302      	movs	r3, #2
 8016c28:	e059      	b.n	8016cde <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8016c2a:	697b      	ldr	r3, [r7, #20]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	2200      	movs	r2, #0
 8016c36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8016c42:	f107 0308 	add.w	r3, r7, #8
 8016c46:	4619      	mov	r1, r3
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f001 fc18 	bl	801847e <USBD_CtlError>
 8016c4e:	e01d      	b.n	8016c8c <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c56:	2b01      	cmp	r3, #1
 8016c58:	d918      	bls.n	8016c8c <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c60:	3b02      	subs	r3, #2
 8016c62:	029a      	lsls	r2, r3, #10
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8016c6a:	4413      	add	r3, r2
 8016c6c:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c74:	691b      	ldr	r3, [r3, #16]
 8016c76:	6978      	ldr	r0, [r7, #20]
 8016c78:	6939      	ldr	r1, [r7, #16]
 8016c7a:	697a      	ldr	r2, [r7, #20]
 8016c7c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8016c80:	4798      	blx	r3
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d001      	beq.n	8016c8c <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8016c88:	2302      	movs	r3, #2
 8016c8a:	e028      	b.n	8016cde <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8016c8c:	697b      	ldr	r3, [r7, #20]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	2200      	movs	r2, #0
 8016c98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	2203      	movs	r2, #3
 8016ca0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	e008      	b.n	8016cde <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016cd2:	2b07      	cmp	r3, #7
 8016cd4:	d102      	bne.n	8016cdc <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f000 fb76 	bl	80173c8 <DFU_Leave>
    }
  }

  return USBD_OK;
 8016cdc:	2300      	movs	r3, #0
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3718      	adds	r7, #24
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}

08016ce6 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8016ce6:	b480      	push	{r7}
 8016ce8:	b083      	sub	sp, #12
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8016cee:	2300      	movs	r3, #0
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	370c      	adds	r7, #12
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bc80      	pop	{r7}
 8016cf8:	4770      	bx	lr

08016cfa <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016cfa:	b480      	push	{r7}
 8016cfc:	b083      	sub	sp, #12
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
 8016d02:	460b      	mov	r3, r1
 8016d04:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8016d06:	2300      	movs	r3, #0
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	370c      	adds	r7, #12
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bc80      	pop	{r7}
 8016d10:	4770      	bx	lr

08016d12 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016d12:	b480      	push	{r7}
 8016d14:	b083      	sub	sp, #12
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
 8016d1a:	460b      	mov	r3, r1
 8016d1c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8016d1e:	2300      	movs	r3, #0
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	370c      	adds	r7, #12
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bc80      	pop	{r7}
 8016d28:	4770      	bx	lr

08016d2a <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8016d2a:	b480      	push	{r7}
 8016d2c:	b083      	sub	sp, #12
 8016d2e:	af00      	add	r7, sp, #0
 8016d30:	6078      	str	r0, [r7, #4]
 8016d32:	460b      	mov	r3, r1
 8016d34:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8016d36:	2300      	movs	r3, #0
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	370c      	adds	r7, #12
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bc80      	pop	{r7}
 8016d40:	4770      	bx	lr
	...

08016d44 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8016d44:	b480      	push	{r7}
 8016d46:	b083      	sub	sp, #12
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	220a      	movs	r2, #10
 8016d50:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8016d52:	4b03      	ldr	r3, [pc, #12]	; (8016d60 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	370c      	adds	r7, #12
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bc80      	pop	{r7}
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop
 8016d60:	20000100 	.word	0x20000100

08016d64 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b084      	sub	sp, #16
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	460b      	mov	r3, r1
 8016d6e:	607a      	str	r2, [r7, #4]
 8016d70:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8016d72:	7afb      	ldrb	r3, [r7, #11]
 8016d74:	2b06      	cmp	r3, #6
 8016d76:	d80a      	bhi.n	8016d8e <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	4905      	ldr	r1, [pc, #20]	; (8016d98 <USBD_DFU_GetUsrStringDesc+0x34>)
 8016d84:	4618      	mov	r0, r3
 8016d86:	f001 fb8b 	bl	80184a0 <USBD_GetString>
    return USBD_StrDesc;
 8016d8a:	4b03      	ldr	r3, [pc, #12]	; (8016d98 <USBD_DFU_GetUsrStringDesc+0x34>)
 8016d8c:	e000      	b.n	8016d90 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8016d8e:	2300      	movs	r3, #0
  }
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	3710      	adds	r7, #16
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	20000a68 	.word	0x20000a68

08016d9c <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b083      	sub	sp, #12
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d003      	beq.n	8016db4 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	683a      	ldr	r2, [r7, #0]
 8016db0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 8016db4:	2300      	movs	r3, #0
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	370c      	adds	r7, #12
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bc80      	pop	{r7}
 8016dbe:	4770      	bx	lr

08016dc0 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
 8016dc8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dd0:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016dd8:	2b02      	cmp	r3, #2
 8016dda:	d013      	beq.n	8016e04 <DFU_Detach+0x44>
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016de2:	2b03      	cmp	r3, #3
 8016de4:	d00e      	beq.n	8016e04 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016dec:	2b05      	cmp	r3, #5
 8016dee:	d009      	beq.n	8016e04 <DFU_Detach+0x44>
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016df6:	2b06      	cmp	r3, #6
 8016df8:	d004      	beq.n	8016e04 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016e00:	2b09      	cmp	r3, #9
 8016e02:	d125      	bne.n	8016e50 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2202      	movs	r2, #2
 8016e08:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2200      	movs	r2, #0
 8016e18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2200      	movs	r2, #0
 8016e28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2200      	movs	r2, #0
 8016e44:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8016e50:	4b0a      	ldr	r3, [pc, #40]	; (8016e7c <DFU_Detach+0xbc>)
 8016e52:	7d5b      	ldrb	r3, [r3, #21]
 8016e54:	f003 0310 	and.w	r3, r3, #16
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d006      	beq.n	8016e6a <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f000 fb51 	bl	8017504 <USBD_Stop>
    USBD_Start(pdev);
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fb42 	bl	80174ec <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8016e68:	e004      	b.n	8016e74 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	885b      	ldrh	r3, [r3, #2]
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7ed f9bc 	bl	80041ec <HAL_Delay>
}
 8016e74:	bf00      	nop
 8016e76:	3710      	adds	r7, #16
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	200000e4 	.word	0x200000e4

08016e80 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
 8016e88:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e90:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8016e92:	683b      	ldr	r3, [r7, #0]
 8016e94:	88db      	ldrh	r3, [r3, #6]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d02e      	beq.n	8016ef8 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016ea0:	2b02      	cmp	r3, #2
 8016ea2:	d004      	beq.n	8016eae <DFU_Download+0x2e>
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016eaa:	2b05      	cmp	r3, #5
 8016eac:	d11f      	bne.n	8016eee <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	885b      	ldrh	r3, [r3, #2]
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	88db      	ldrh	r3, [r3, #6]
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2203      	movs	r2, #3
 8016eca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8016eda:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	6878      	ldr	r0, [r7, #4]
 8016ee8:	f001 fb61 	bl	80185ae <USBD_CtlPrepareRx>
 8016eec:	e02e      	b.n	8016f4c <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8016eee:	6839      	ldr	r1, [r7, #0]
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f001 fac4 	bl	801847e <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8016ef6:	e029      	b.n	8016f4c <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016efe:	2b05      	cmp	r3, #5
 8016f00:	d004      	beq.n	8016f0c <DFU_Download+0x8c>
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016f08:	2b02      	cmp	r3, #2
 8016f0a:	d11a      	bne.n	8016f42 <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	2201      	movs	r2, #1
 8016f10:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	2206      	movs	r2, #6
 8016f18:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2200      	movs	r2, #0
 8016f28:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8016f40:	e004      	b.n	8016f4c <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 8016f42:	6839      	ldr	r1, [r7, #0]
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f001 fa9a 	bl	801847e <USBD_CtlError>
}
 8016f4a:	e7ff      	b.n	8016f4c <DFU_Download+0xcc>
 8016f4c:	bf00      	nop
 8016f4e:	3710      	adds	r7, #16
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd80      	pop	{r7, pc}

08016f54 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b086      	sub	sp, #24
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f64:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 8016f66:	2300      	movs	r3, #0
 8016f68:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	88db      	ldrh	r3, [r3, #6]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	f000 80ab 	beq.w	80170ce <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016f7e:	2b02      	cmp	r3, #2
 8016f80:	d005      	beq.n	8016f8e <DFU_Upload+0x3a>
 8016f82:	697b      	ldr	r3, [r7, #20]
 8016f84:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8016f88:	2b09      	cmp	r3, #9
 8016f8a:	f040 8093 	bne.w	80170b4 <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	885b      	ldrh	r3, [r3, #2]
 8016f92:	461a      	mov	r2, r3
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	88db      	ldrh	r3, [r3, #6]
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d12c      	bne.n	801700a <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016fb6:	2b03      	cmp	r3, #3
 8016fb8:	d901      	bls.n	8016fbe <DFU_Upload+0x6a>
 8016fba:	2202      	movs	r2, #2
 8016fbc:	e000      	b.n	8016fc0 <DFU_Upload+0x6c>
 8016fbe:	2209      	movs	r2, #9
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8016fc6:	697b      	ldr	r3, [r7, #20]
 8016fc8:	2200      	movs	r2, #0
 8016fca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	2200      	movs	r2, #0
 8016fee:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8016ff0:	697b      	ldr	r3, [r7, #20]
 8016ff2:	2221      	movs	r2, #33	; 0x21
 8016ff4:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	2241      	movs	r2, #65	; 0x41
 8016ffa:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	2203      	movs	r2, #3
 8017000:	4619      	mov	r1, r3
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f001 faa5 	bl	8018552 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8017008:	e078      	b.n	80170fc <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 801700a:	697b      	ldr	r3, [r7, #20]
 801700c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017010:	2b01      	cmp	r3, #1
 8017012:	d934      	bls.n	801707e <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8017014:	697b      	ldr	r3, [r7, #20]
 8017016:	2209      	movs	r2, #9
 8017018:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	2200      	movs	r2, #0
 8017020:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	2200      	movs	r2, #0
 8017028:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	2200      	movs	r2, #0
 8017030:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017046:	3b02      	subs	r3, #2
 8017048:	029a      	lsls	r2, r3, #10
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8017050:	4413      	add	r3, r2
 8017052:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801705a:	695b      	ldr	r3, [r3, #20]
 801705c:	68f8      	ldr	r0, [r7, #12]
 801705e:	6979      	ldr	r1, [r7, #20]
 8017060:	697a      	ldr	r2, [r7, #20]
 8017062:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8017066:	4798      	blx	r3
 8017068:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017070:	b29b      	uxth	r3, r3
 8017072:	461a      	mov	r2, r3
 8017074:	6939      	ldr	r1, [r7, #16]
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	f001 fa6b 	bl	8018552 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 801707c:	e03e      	b.n	80170fc <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	220f      	movs	r2, #15
 8017082:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8017086:	697b      	ldr	r3, [r7, #20]
 8017088:	2200      	movs	r2, #0
 801708a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801708e:	697b      	ldr	r3, [r7, #20]
 8017090:	2200      	movs	r2, #0
 8017092:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	2200      	movs	r2, #0
 801709a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 80170aa:	6839      	ldr	r1, [r7, #0]
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f001 f9e6 	bl	801847e <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80170b2:	e023      	b.n	80170fc <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80170b4:	697b      	ldr	r3, [r7, #20]
 80170b6:	2200      	movs	r2, #0
 80170b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80170bc:	697b      	ldr	r3, [r7, #20]
 80170be:	2200      	movs	r2, #0
 80170c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80170c4:	6839      	ldr	r1, [r7, #0]
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f001 f9d9 	bl	801847e <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80170cc:	e016      	b.n	80170fc <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	2202      	movs	r2, #2
 80170d2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	2200      	movs	r2, #0
 80170da:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	2200      	movs	r2, #0
 80170e2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	2200      	movs	r2, #0
 80170ea:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 80170fa:	e7ff      	b.n	80170fc <DFU_Upload+0x1a8>
 80170fc:	bf00      	nop
 80170fe:	3718      	adds	r7, #24
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}

08017104 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b084      	sub	sp, #16
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017112:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801711a:	2b03      	cmp	r3, #3
 801711c:	d002      	beq.n	8017124 <DFU_GetStatus+0x20>
 801711e:	2b06      	cmp	r3, #6
 8017120:	d055      	beq.n	80171ce <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 8017122:	e092      	b.n	801724a <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801712a:	2b00      	cmp	r3, #0
 801712c:	d038      	beq.n	80171a0 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	2204      	movs	r2, #4
 8017132:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2200      	movs	r2, #0
 801713a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	2200      	movs	r2, #0
 8017142:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	2200      	movs	r2, #0
 801714a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017160:	2b00      	cmp	r3, #0
 8017162:	d110      	bne.n	8017186 <DFU_GetStatus+0x82>
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	2b41      	cmp	r3, #65	; 0x41
 801716a:	d10c      	bne.n	8017186 <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017172:	699b      	ldr	r3, [r3, #24]
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 801717a:	68fa      	ldr	r2, [r7, #12]
 801717c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8017180:	2100      	movs	r1, #0
 8017182:	4798      	blx	r3
      break;
 8017184:	e061      	b.n	801724a <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801718c:	699b      	ldr	r3, [r3, #24]
 801718e:	68fa      	ldr	r2, [r7, #12]
 8017190:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8017194:	68fa      	ldr	r2, [r7, #12]
 8017196:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 801719a:	2101      	movs	r1, #1
 801719c:	4798      	blx	r3
      break;
 801719e:	e054      	b.n	801724a <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2205      	movs	r2, #5
 80171a4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	2200      	movs	r2, #0
 80171ac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2200      	movs	r2, #0
 80171b4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	2200      	movs	r2, #0
 80171bc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80171cc:	e03d      	b.n	801724a <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d116      	bne.n	8017206 <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2207      	movs	r2, #7
 80171dc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2201      	movs	r2, #1
 80171e4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2200      	movs	r2, #0
 80171ec:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2200      	movs	r2, #0
 80171f4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8017204:	e020      	b.n	8017248 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 801720c:	2b00      	cmp	r3, #0
 801720e:	d11b      	bne.n	8017248 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8017210:	4b14      	ldr	r3, [pc, #80]	; (8017264 <DFU_GetStatus+0x160>)
 8017212:	7d1b      	ldrb	r3, [r3, #20]
 8017214:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8017218:	2b00      	cmp	r3, #0
 801721a:	d015      	beq.n	8017248 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	2202      	movs	r2, #2
 8017220:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	2200      	movs	r2, #0
 8017228:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	2200      	movs	r2, #0
 8017230:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	2200      	movs	r2, #0
 8017238:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8017248:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8017250:	2206      	movs	r2, #6
 8017252:	4619      	mov	r1, r3
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f001 f97c 	bl	8018552 <USBD_CtlSendData>
}
 801725a:	bf00      	nop
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
 8017262:	bf00      	nop
 8017264:	200000e4 	.word	0x200000e4

08017268 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8017268:	b480      	push	{r7}
 801726a:	b085      	sub	sp, #20
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017276:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801727e:	2b0a      	cmp	r3, #10
 8017280:	d11e      	bne.n	80172c0 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	2202      	movs	r2, #2
 8017286:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2200      	movs	r2, #0
 801728e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	2200      	movs	r2, #0
 8017296:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	2200      	movs	r2, #0
 801729e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2200      	movs	r2, #0
 80172a6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	2200      	movs	r2, #0
 80172ba:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 80172be:	e01d      	b.n	80172fc <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	220a      	movs	r2, #10
 80172c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	220e      	movs	r2, #14
 80172cc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	2200      	movs	r2, #0
 80172d4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	2200      	movs	r2, #0
 80172dc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	2200      	movs	r2, #0
 80172e4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2200      	movs	r2, #0
 80172f8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 80172fc:	bf00      	nop
 80172fe:	3714      	adds	r7, #20
 8017300:	46bd      	mov	sp, r7
 8017302:	bc80      	pop	{r7}
 8017304:	4770      	bx	lr

08017306 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8017306:	b580      	push	{r7, lr}
 8017308:	b084      	sub	sp, #16
 801730a:	af00      	add	r7, sp, #0
 801730c:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017314:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801731c:	2201      	movs	r2, #1
 801731e:	4619      	mov	r1, r3
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f001 f916 	bl	8018552 <USBD_CtlSendData>
}
 8017326:	bf00      	nop
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}

0801732e <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 801732e:	b480      	push	{r7}
 8017330:	b085      	sub	sp, #20
 8017332:	af00      	add	r7, sp, #0
 8017334:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801733c:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8017344:	2b02      	cmp	r3, #2
 8017346:	d013      	beq.n	8017370 <DFU_Abort+0x42>
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801734e:	2b03      	cmp	r3, #3
 8017350:	d00e      	beq.n	8017370 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8017358:	2b05      	cmp	r3, #5
 801735a:	d009      	beq.n	8017370 <DFU_Abort+0x42>
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8017362:	2b06      	cmp	r3, #6
 8017364:	d004      	beq.n	8017370 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801736c:	2b09      	cmp	r3, #9
 801736e:	d125      	bne.n	80173bc <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	2202      	movs	r2, #2
 8017374:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	2200      	movs	r2, #0
 801737c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2200      	movs	r2, #0
 8017384:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	2200      	movs	r2, #0
 801738c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2200      	movs	r2, #0
 8017394:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2200      	movs	r2, #0
 80173a8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	2200      	movs	r2, #0
 80173b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	2200      	movs	r2, #0
 80173b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 80173bc:	bf00      	nop
 80173be:	3714      	adds	r7, #20
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bc80      	pop	{r7}
 80173c4:	4770      	bx	lr
	...

080173c8 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173d6:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	2200      	movs	r2, #0
 80173dc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 80173e0:	4b1f      	ldr	r3, [pc, #124]	; (8017460 <DFU_Leave+0x98>)
 80173e2:	7d1b      	ldrb	r3, [r3, #20]
 80173e4:	f003 0304 	and.w	r3, r3, #4
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d016      	beq.n	801741a <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2206      	movs	r2, #6
 80173f0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	2200      	movs	r2, #0
 80173f8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	2200      	movs	r2, #0
 8017400:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	2200      	movs	r2, #0
 8017408:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8017418:	e01f      	b.n	801745a <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	2208      	movs	r2, #8
 801741e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	2200      	movs	r2, #0
 8017426:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	2200      	movs	r2, #0
 801742e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2200      	movs	r2, #0
 8017436:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f000 f85c 	bl	8017504 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017452:	689b      	ldr	r3, [r3, #8]
 8017454:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8017456:	f7ff f9ab 	bl	80167b0 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 801745a:	3710      	adds	r7, #16
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}
 8017460:	200000e4 	.word	0x200000e4

08017464 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b084      	sub	sp, #16
 8017468:	af00      	add	r7, sp, #0
 801746a:	60f8      	str	r0, [r7, #12]
 801746c:	60b9      	str	r1, [r7, #8]
 801746e:	4613      	mov	r3, r2
 8017470:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d101      	bne.n	801747c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017478:	2302      	movs	r3, #2
 801747a:	e01a      	b.n	80174b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017482:	2b00      	cmp	r3, #0
 8017484:	d003      	beq.n	801748e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	2200      	movs	r2, #0
 801748a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d003      	beq.n	801749c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	68ba      	ldr	r2, [r7, #8]
 8017498:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2201      	movs	r2, #1
 80174a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	79fa      	ldrb	r2, [r7, #7]
 80174a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f001 fb82 	bl	8018bb4 <USBD_LL_Init>

  return USBD_OK;
 80174b0:	2300      	movs	r3, #0
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3710      	adds	r7, #16
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}

080174ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80174ba:	b480      	push	{r7}
 80174bc:	b085      	sub	sp, #20
 80174be:	af00      	add	r7, sp, #0
 80174c0:	6078      	str	r0, [r7, #4]
 80174c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80174c4:	2300      	movs	r3, #0
 80174c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80174c8:	683b      	ldr	r3, [r7, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d006      	beq.n	80174dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	683a      	ldr	r2, [r7, #0]
 80174d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80174d6:	2300      	movs	r3, #0
 80174d8:	73fb      	strb	r3, [r7, #15]
 80174da:	e001      	b.n	80174e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80174dc:	2302      	movs	r3, #2
 80174de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80174e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3714      	adds	r7, #20
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bc80      	pop	{r7}
 80174ea:	4770      	bx	lr

080174ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b082      	sub	sp, #8
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f001 fba1 	bl	8018c3c <USBD_LL_Start>

  return USBD_OK;
 80174fa:	2300      	movs	r3, #0
}
 80174fc:	4618      	mov	r0, r3
 80174fe:	3708      	adds	r7, #8
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}

08017504 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	6852      	ldr	r2, [r2, #4]
 8017518:	b2d2      	uxtb	r2, r2
 801751a:	4611      	mov	r1, r2
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f001 fba6 	bl	8018c72 <USBD_LL_Stop>

  return USBD_OK;
 8017526:	2300      	movs	r3, #0
}
 8017528:	4618      	mov	r0, r3
 801752a:	3708      	adds	r7, #8
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}

08017530 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017530:	b480      	push	{r7}
 8017532:	b083      	sub	sp, #12
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017538:	2300      	movs	r3, #0
}
 801753a:	4618      	mov	r0, r3
 801753c:	370c      	adds	r7, #12
 801753e:	46bd      	mov	sp, r7
 8017540:	bc80      	pop	{r7}
 8017542:	4770      	bx	lr

08017544 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
 801754c:	460b      	mov	r3, r1
 801754e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017550:	2302      	movs	r3, #2
 8017552:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801755a:	2b00      	cmp	r3, #0
 801755c:	d00c      	beq.n	8017578 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	78fa      	ldrb	r2, [r7, #3]
 8017568:	4611      	mov	r1, r2
 801756a:	6878      	ldr	r0, [r7, #4]
 801756c:	4798      	blx	r3
 801756e:	4603      	mov	r3, r0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d101      	bne.n	8017578 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8017574:	2300      	movs	r3, #0
 8017576:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8017578:	7bfb      	ldrb	r3, [r7, #15]
}
 801757a:	4618      	mov	r0, r3
 801757c:	3710      	adds	r7, #16
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}

08017582 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017582:	b580      	push	{r7, lr}
 8017584:	b082      	sub	sp, #8
 8017586:	af00      	add	r7, sp, #0
 8017588:	6078      	str	r0, [r7, #4]
 801758a:	460b      	mov	r3, r1
 801758c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017594:	685b      	ldr	r3, [r3, #4]
 8017596:	78fa      	ldrb	r2, [r7, #3]
 8017598:	4611      	mov	r1, r2
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	4798      	blx	r3

  return USBD_OK;
 801759e:	2300      	movs	r3, #0
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3708      	adds	r7, #8
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b082      	sub	sp, #8
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80175b8:	6839      	ldr	r1, [r7, #0]
 80175ba:	4618      	mov	r0, r3
 80175bc:	f000 ff23 	bl	8018406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2201      	movs	r2, #1
 80175c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80175ce:	461a      	mov	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80175dc:	f003 031f 	and.w	r3, r3, #31
 80175e0:	2b02      	cmp	r3, #2
 80175e2:	d016      	beq.n	8017612 <USBD_LL_SetupStage+0x6a>
 80175e4:	2b02      	cmp	r3, #2
 80175e6:	d81c      	bhi.n	8017622 <USBD_LL_SetupStage+0x7a>
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d002      	beq.n	80175f2 <USBD_LL_SetupStage+0x4a>
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d008      	beq.n	8017602 <USBD_LL_SetupStage+0x5a>
 80175f0:	e017      	b.n	8017622 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80175f8:	4619      	mov	r1, r3
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f000 fa04 	bl	8017a08 <USBD_StdDevReq>
      break;
 8017600:	e01a      	b.n	8017638 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8017608:	4619      	mov	r1, r3
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f000 fa66 	bl	8017adc <USBD_StdItfReq>
      break;
 8017610:	e012      	b.n	8017638 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8017618:	4619      	mov	r1, r3
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f000 faa6 	bl	8017b6c <USBD_StdEPReq>
      break;
 8017620:	e00a      	b.n	8017638 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017628:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801762c:	b2db      	uxtb	r3, r3
 801762e:	4619      	mov	r1, r3
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f001 fb5f 	bl	8018cf4 <USBD_LL_StallEP>
      break;
 8017636:	bf00      	nop
  }

  return USBD_OK;
 8017638:	2300      	movs	r3, #0
}
 801763a:	4618      	mov	r0, r3
 801763c:	3708      	adds	r7, #8
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}

08017642 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017642:	b580      	push	{r7, lr}
 8017644:	b086      	sub	sp, #24
 8017646:	af00      	add	r7, sp, #0
 8017648:	60f8      	str	r0, [r7, #12]
 801764a:	460b      	mov	r3, r1
 801764c:	607a      	str	r2, [r7, #4]
 801764e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017650:	7afb      	ldrb	r3, [r7, #11]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d14b      	bne.n	80176ee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801765c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017664:	2b03      	cmp	r3, #3
 8017666:	d134      	bne.n	80176d2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	68da      	ldr	r2, [r3, #12]
 801766c:	697b      	ldr	r3, [r7, #20]
 801766e:	691b      	ldr	r3, [r3, #16]
 8017670:	429a      	cmp	r2, r3
 8017672:	d919      	bls.n	80176a8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	68da      	ldr	r2, [r3, #12]
 8017678:	697b      	ldr	r3, [r7, #20]
 801767a:	691b      	ldr	r3, [r3, #16]
 801767c:	1ad2      	subs	r2, r2, r3
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	68da      	ldr	r2, [r3, #12]
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801768a:	429a      	cmp	r2, r3
 801768c:	d203      	bcs.n	8017696 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801768e:	697b      	ldr	r3, [r7, #20]
 8017690:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8017692:	b29b      	uxth	r3, r3
 8017694:	e002      	b.n	801769c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017696:	697b      	ldr	r3, [r7, #20]
 8017698:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801769a:	b29b      	uxth	r3, r3
 801769c:	461a      	mov	r2, r3
 801769e:	6879      	ldr	r1, [r7, #4]
 80176a0:	68f8      	ldr	r0, [r7, #12]
 80176a2:	f000 ffa2 	bl	80185ea <USBD_CtlContinueRx>
 80176a6:	e038      	b.n	801771a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176ae:	691b      	ldr	r3, [r3, #16]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d00a      	beq.n	80176ca <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80176ba:	2b03      	cmp	r3, #3
 80176bc:	d105      	bne.n	80176ca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176c4:	691b      	ldr	r3, [r3, #16]
 80176c6:	68f8      	ldr	r0, [r7, #12]
 80176c8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80176ca:	68f8      	ldr	r0, [r7, #12]
 80176cc:	f000 ff9f 	bl	801860e <USBD_CtlSendStatus>
 80176d0:	e023      	b.n	801771a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80176d8:	2b05      	cmp	r3, #5
 80176da:	d11e      	bne.n	801771a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	2200      	movs	r2, #0
 80176e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80176e4:	2100      	movs	r1, #0
 80176e6:	68f8      	ldr	r0, [r7, #12]
 80176e8:	f001 fb04 	bl	8018cf4 <USBD_LL_StallEP>
 80176ec:	e015      	b.n	801771a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176f4:	699b      	ldr	r3, [r3, #24]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d00d      	beq.n	8017716 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8017700:	2b03      	cmp	r3, #3
 8017702:	d108      	bne.n	8017716 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801770a:	699b      	ldr	r3, [r3, #24]
 801770c:	7afa      	ldrb	r2, [r7, #11]
 801770e:	4611      	mov	r1, r2
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	4798      	blx	r3
 8017714:	e001      	b.n	801771a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017716:	2302      	movs	r3, #2
 8017718:	e000      	b.n	801771c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801771a:	2300      	movs	r3, #0
}
 801771c:	4618      	mov	r0, r3
 801771e:	3718      	adds	r7, #24
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}

08017724 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b086      	sub	sp, #24
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	460b      	mov	r3, r1
 801772e:	607a      	str	r2, [r7, #4]
 8017730:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017732:	7afb      	ldrb	r3, [r7, #11]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d17f      	bne.n	8017838 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	3314      	adds	r3, #20
 801773c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017744:	2b02      	cmp	r3, #2
 8017746:	d15c      	bne.n	8017802 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	68da      	ldr	r2, [r3, #12]
 801774c:	697b      	ldr	r3, [r7, #20]
 801774e:	691b      	ldr	r3, [r3, #16]
 8017750:	429a      	cmp	r2, r3
 8017752:	d915      	bls.n	8017780 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	68da      	ldr	r2, [r3, #12]
 8017758:	697b      	ldr	r3, [r7, #20]
 801775a:	691b      	ldr	r3, [r3, #16]
 801775c:	1ad2      	subs	r2, r2, r3
 801775e:	697b      	ldr	r3, [r7, #20]
 8017760:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8017762:	697b      	ldr	r3, [r7, #20]
 8017764:	68db      	ldr	r3, [r3, #12]
 8017766:	b29b      	uxth	r3, r3
 8017768:	461a      	mov	r2, r3
 801776a:	6879      	ldr	r1, [r7, #4]
 801776c:	68f8      	ldr	r0, [r7, #12]
 801776e:	f000 ff0c 	bl	801858a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017772:	2300      	movs	r3, #0
 8017774:	2200      	movs	r2, #0
 8017776:	2100      	movs	r1, #0
 8017778:	68f8      	ldr	r0, [r7, #12]
 801777a:	f001 fb66 	bl	8018e4a <USBD_LL_PrepareReceive>
 801777e:	e04e      	b.n	801781e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	697a      	ldr	r2, [r7, #20]
 8017786:	6912      	ldr	r2, [r2, #16]
 8017788:	fbb3 f1f2 	udiv	r1, r3, r2
 801778c:	fb01 f202 	mul.w	r2, r1, r2
 8017790:	1a9b      	subs	r3, r3, r2
 8017792:	2b00      	cmp	r3, #0
 8017794:	d11c      	bne.n	80177d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	689a      	ldr	r2, [r3, #8]
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801779e:	429a      	cmp	r2, r3
 80177a0:	d316      	bcc.n	80177d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	689a      	ldr	r2, [r3, #8]
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d20f      	bcs.n	80177d0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80177b0:	2200      	movs	r2, #0
 80177b2:	2100      	movs	r1, #0
 80177b4:	68f8      	ldr	r0, [r7, #12]
 80177b6:	f000 fee8 	bl	801858a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	2200      	movs	r2, #0
 80177be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80177c2:	2300      	movs	r3, #0
 80177c4:	2200      	movs	r2, #0
 80177c6:	2100      	movs	r1, #0
 80177c8:	68f8      	ldr	r0, [r7, #12]
 80177ca:	f001 fb3e 	bl	8018e4a <USBD_LL_PrepareReceive>
 80177ce:	e026      	b.n	801781e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80177d6:	68db      	ldr	r3, [r3, #12]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d00a      	beq.n	80177f2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80177e2:	2b03      	cmp	r3, #3
 80177e4:	d105      	bne.n	80177f2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	68f8      	ldr	r0, [r7, #12]
 80177f0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80177f2:	2180      	movs	r1, #128	; 0x80
 80177f4:	68f8      	ldr	r0, [r7, #12]
 80177f6:	f001 fa7d 	bl	8018cf4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80177fa:	68f8      	ldr	r0, [r7, #12]
 80177fc:	f000 ff1a 	bl	8018634 <USBD_CtlReceiveStatus>
 8017800:	e00d      	b.n	801781e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017808:	2b04      	cmp	r3, #4
 801780a:	d004      	beq.n	8017816 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8017812:	2b00      	cmp	r3, #0
 8017814:	d103      	bne.n	801781e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8017816:	2180      	movs	r1, #128	; 0x80
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	f001 fa6b 	bl	8018cf4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017824:	2b01      	cmp	r3, #1
 8017826:	d11d      	bne.n	8017864 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8017828:	68f8      	ldr	r0, [r7, #12]
 801782a:	f7ff fe81 	bl	8017530 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	2200      	movs	r2, #0
 8017832:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017836:	e015      	b.n	8017864 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801783e:	695b      	ldr	r3, [r3, #20]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d00d      	beq.n	8017860 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801784a:	2b03      	cmp	r3, #3
 801784c:	d108      	bne.n	8017860 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017854:	695b      	ldr	r3, [r3, #20]
 8017856:	7afa      	ldrb	r2, [r7, #11]
 8017858:	4611      	mov	r1, r2
 801785a:	68f8      	ldr	r0, [r7, #12]
 801785c:	4798      	blx	r3
 801785e:	e001      	b.n	8017864 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017860:	2302      	movs	r3, #2
 8017862:	e000      	b.n	8017866 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8017864:	2300      	movs	r3, #0
}
 8017866:	4618      	mov	r0, r3
 8017868:	3718      	adds	r7, #24
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801786e:	b580      	push	{r7, lr}
 8017870:	b082      	sub	sp, #8
 8017872:	af00      	add	r7, sp, #0
 8017874:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017876:	2340      	movs	r3, #64	; 0x40
 8017878:	2200      	movs	r2, #0
 801787a:	2100      	movs	r1, #0
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f001 fa13 	bl	8018ca8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	2201      	movs	r2, #1
 8017886:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2240      	movs	r2, #64	; 0x40
 801788e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017892:	2340      	movs	r3, #64	; 0x40
 8017894:	2200      	movs	r2, #0
 8017896:	2180      	movs	r1, #128	; 0x80
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f001 fa05 	bl	8018ca8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	2201      	movs	r2, #1
 80178a2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2240      	movs	r2, #64	; 0x40
 80178a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2201      	movs	r2, #1
 80178ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2200      	movs	r2, #0
 80178b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2200      	movs	r2, #0
 80178be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2200      	movs	r2, #0
 80178c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d009      	beq.n	80178e6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80178d8:	685b      	ldr	r3, [r3, #4]
 80178da:	687a      	ldr	r2, [r7, #4]
 80178dc:	6852      	ldr	r2, [r2, #4]
 80178de:	b2d2      	uxtb	r2, r2
 80178e0:	4611      	mov	r1, r2
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	4798      	blx	r3
  }

  return USBD_OK;
 80178e6:	2300      	movs	r3, #0
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3708      	adds	r7, #8
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}

080178f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80178f0:	b480      	push	{r7}
 80178f2:	b083      	sub	sp, #12
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	460b      	mov	r3, r1
 80178fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	78fa      	ldrb	r2, [r7, #3]
 8017900:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017902:	2300      	movs	r3, #0
}
 8017904:	4618      	mov	r0, r3
 8017906:	370c      	adds	r7, #12
 8017908:	46bd      	mov	sp, r7
 801790a:	bc80      	pop	{r7}
 801790c:	4770      	bx	lr

0801790e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801790e:	b480      	push	{r7}
 8017910:	b083      	sub	sp, #12
 8017912:	af00      	add	r7, sp, #0
 8017914:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2204      	movs	r2, #4
 8017926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801792a:	2300      	movs	r3, #0
}
 801792c:	4618      	mov	r0, r3
 801792e:	370c      	adds	r7, #12
 8017930:	46bd      	mov	sp, r7
 8017932:	bc80      	pop	{r7}
 8017934:	4770      	bx	lr

08017936 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017936:	b480      	push	{r7}
 8017938:	b083      	sub	sp, #12
 801793a:	af00      	add	r7, sp, #0
 801793c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017944:	2b04      	cmp	r3, #4
 8017946:	d105      	bne.n	8017954 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017954:	2300      	movs	r3, #0
}
 8017956:	4618      	mov	r0, r3
 8017958:	370c      	adds	r7, #12
 801795a:	46bd      	mov	sp, r7
 801795c:	bc80      	pop	{r7}
 801795e:	4770      	bx	lr

08017960 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801796e:	2b03      	cmp	r3, #3
 8017970:	d10b      	bne.n	801798a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017978:	69db      	ldr	r3, [r3, #28]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d005      	beq.n	801798a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017984:	69db      	ldr	r3, [r3, #28]
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801798a:	2300      	movs	r3, #0
}
 801798c:	4618      	mov	r0, r3
 801798e:	3708      	adds	r7, #8
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}

08017994 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017994:	b480      	push	{r7}
 8017996:	b083      	sub	sp, #12
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	460b      	mov	r3, r1
 801799e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80179a0:	2300      	movs	r3, #0
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	370c      	adds	r7, #12
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bc80      	pop	{r7}
 80179aa:	4770      	bx	lr

080179ac <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80179ac:	b480      	push	{r7}
 80179ae:	b083      	sub	sp, #12
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	460b      	mov	r3, r1
 80179b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80179b8:	2300      	movs	r3, #0
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	370c      	adds	r7, #12
 80179be:	46bd      	mov	sp, r7
 80179c0:	bc80      	pop	{r7}
 80179c2:	4770      	bx	lr

080179c4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80179c4:	b480      	push	{r7}
 80179c6:	b083      	sub	sp, #12
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80179cc:	2300      	movs	r3, #0
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	370c      	adds	r7, #12
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bc80      	pop	{r7}
 80179d6:	4770      	bx	lr

080179d8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2201      	movs	r2, #1
 80179e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	687a      	ldr	r2, [r7, #4]
 80179f2:	6852      	ldr	r2, [r2, #4]
 80179f4:	b2d2      	uxtb	r2, r2
 80179f6:	4611      	mov	r1, r2
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	4798      	blx	r3

  return USBD_OK;
 80179fc:	2300      	movs	r3, #0
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	3708      	adds	r7, #8
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
	...

08017a08 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017a12:	2300      	movs	r3, #0
 8017a14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017a1e:	2b40      	cmp	r3, #64	; 0x40
 8017a20:	d005      	beq.n	8017a2e <USBD_StdDevReq+0x26>
 8017a22:	2b40      	cmp	r3, #64	; 0x40
 8017a24:	d84f      	bhi.n	8017ac6 <USBD_StdDevReq+0xbe>
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d009      	beq.n	8017a3e <USBD_StdDevReq+0x36>
 8017a2a:	2b20      	cmp	r3, #32
 8017a2c:	d14b      	bne.n	8017ac6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a34:	689b      	ldr	r3, [r3, #8]
 8017a36:	6839      	ldr	r1, [r7, #0]
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	4798      	blx	r3
      break;
 8017a3c:	e048      	b.n	8017ad0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017a3e:	683b      	ldr	r3, [r7, #0]
 8017a40:	785b      	ldrb	r3, [r3, #1]
 8017a42:	2b09      	cmp	r3, #9
 8017a44:	d839      	bhi.n	8017aba <USBD_StdDevReq+0xb2>
 8017a46:	a201      	add	r2, pc, #4	; (adr r2, 8017a4c <USBD_StdDevReq+0x44>)
 8017a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a4c:	08017a9d 	.word	0x08017a9d
 8017a50:	08017ab1 	.word	0x08017ab1
 8017a54:	08017abb 	.word	0x08017abb
 8017a58:	08017aa7 	.word	0x08017aa7
 8017a5c:	08017abb 	.word	0x08017abb
 8017a60:	08017a7f 	.word	0x08017a7f
 8017a64:	08017a75 	.word	0x08017a75
 8017a68:	08017abb 	.word	0x08017abb
 8017a6c:	08017a93 	.word	0x08017a93
 8017a70:	08017a89 	.word	0x08017a89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017a74:	6839      	ldr	r1, [r7, #0]
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f000 f9dc 	bl	8017e34 <USBD_GetDescriptor>
          break;
 8017a7c:	e022      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017a7e:	6839      	ldr	r1, [r7, #0]
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f000 fb51 	bl	8018128 <USBD_SetAddress>
          break;
 8017a86:	e01d      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8017a88:	6839      	ldr	r1, [r7, #0]
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f000 fb90 	bl	80181b0 <USBD_SetConfig>
          break;
 8017a90:	e018      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017a92:	6839      	ldr	r1, [r7, #0]
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f000 fc19 	bl	80182cc <USBD_GetConfig>
          break;
 8017a9a:	e013      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017a9c:	6839      	ldr	r1, [r7, #0]
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f000 fc49 	bl	8018336 <USBD_GetStatus>
          break;
 8017aa4:	e00e      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017aa6:	6839      	ldr	r1, [r7, #0]
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f000 fc77 	bl	801839c <USBD_SetFeature>
          break;
 8017aae:	e009      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017ab0:	6839      	ldr	r1, [r7, #0]
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f000 fc86 	bl	80183c4 <USBD_ClrFeature>
          break;
 8017ab8:	e004      	b.n	8017ac4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8017aba:	6839      	ldr	r1, [r7, #0]
 8017abc:	6878      	ldr	r0, [r7, #4]
 8017abe:	f000 fcde 	bl	801847e <USBD_CtlError>
          break;
 8017ac2:	bf00      	nop
      }
      break;
 8017ac4:	e004      	b.n	8017ad0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8017ac6:	6839      	ldr	r1, [r7, #0]
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f000 fcd8 	bl	801847e <USBD_CtlError>
      break;
 8017ace:	bf00      	nop
  }

  return ret;
 8017ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	3710      	adds	r7, #16
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}
 8017ada:	bf00      	nop

08017adc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b084      	sub	sp, #16
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017aea:	683b      	ldr	r3, [r7, #0]
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017af2:	2b40      	cmp	r3, #64	; 0x40
 8017af4:	d005      	beq.n	8017b02 <USBD_StdItfReq+0x26>
 8017af6:	2b40      	cmp	r3, #64	; 0x40
 8017af8:	d82e      	bhi.n	8017b58 <USBD_StdItfReq+0x7c>
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d001      	beq.n	8017b02 <USBD_StdItfReq+0x26>
 8017afe:	2b20      	cmp	r3, #32
 8017b00:	d12a      	bne.n	8017b58 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b08:	3b01      	subs	r3, #1
 8017b0a:	2b02      	cmp	r3, #2
 8017b0c:	d81d      	bhi.n	8017b4a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	889b      	ldrh	r3, [r3, #4]
 8017b12:	b2db      	uxtb	r3, r3
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	d813      	bhi.n	8017b40 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b1e:	689b      	ldr	r3, [r3, #8]
 8017b20:	6839      	ldr	r1, [r7, #0]
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	4798      	blx	r3
 8017b26:	4603      	mov	r3, r0
 8017b28:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	88db      	ldrh	r3, [r3, #6]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d110      	bne.n	8017b54 <USBD_StdItfReq+0x78>
 8017b32:	7bfb      	ldrb	r3, [r7, #15]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d10d      	bne.n	8017b54 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8017b38:	6878      	ldr	r0, [r7, #4]
 8017b3a:	f000 fd68 	bl	801860e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017b3e:	e009      	b.n	8017b54 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8017b40:	6839      	ldr	r1, [r7, #0]
 8017b42:	6878      	ldr	r0, [r7, #4]
 8017b44:	f000 fc9b 	bl	801847e <USBD_CtlError>
          break;
 8017b48:	e004      	b.n	8017b54 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8017b4a:	6839      	ldr	r1, [r7, #0]
 8017b4c:	6878      	ldr	r0, [r7, #4]
 8017b4e:	f000 fc96 	bl	801847e <USBD_CtlError>
          break;
 8017b52:	e000      	b.n	8017b56 <USBD_StdItfReq+0x7a>
          break;
 8017b54:	bf00      	nop
      }
      break;
 8017b56:	e004      	b.n	8017b62 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8017b58:	6839      	ldr	r1, [r7, #0]
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f000 fc8f 	bl	801847e <USBD_CtlError>
      break;
 8017b60:	bf00      	nop
  }

  return USBD_OK;
 8017b62:	2300      	movs	r3, #0
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	3710      	adds	r7, #16
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd80      	pop	{r7, pc}

08017b6c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b084      	sub	sp, #16
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
 8017b74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017b76:	2300      	movs	r3, #0
 8017b78:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	889b      	ldrh	r3, [r3, #4]
 8017b7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	781b      	ldrb	r3, [r3, #0]
 8017b84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017b88:	2b40      	cmp	r3, #64	; 0x40
 8017b8a:	d007      	beq.n	8017b9c <USBD_StdEPReq+0x30>
 8017b8c:	2b40      	cmp	r3, #64	; 0x40
 8017b8e:	f200 8146 	bhi.w	8017e1e <USBD_StdEPReq+0x2b2>
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d00a      	beq.n	8017bac <USBD_StdEPReq+0x40>
 8017b96:	2b20      	cmp	r3, #32
 8017b98:	f040 8141 	bne.w	8017e1e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	6839      	ldr	r1, [r7, #0]
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	4798      	blx	r3
      break;
 8017baa:	e13d      	b.n	8017e28 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017bb4:	2b20      	cmp	r3, #32
 8017bb6:	d10a      	bne.n	8017bce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017bbe:	689b      	ldr	r3, [r3, #8]
 8017bc0:	6839      	ldr	r1, [r7, #0]
 8017bc2:	6878      	ldr	r0, [r7, #4]
 8017bc4:	4798      	blx	r3
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8017bca:	7bfb      	ldrb	r3, [r7, #15]
 8017bcc:	e12d      	b.n	8017e2a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	785b      	ldrb	r3, [r3, #1]
 8017bd2:	2b03      	cmp	r3, #3
 8017bd4:	d007      	beq.n	8017be6 <USBD_StdEPReq+0x7a>
 8017bd6:	2b03      	cmp	r3, #3
 8017bd8:	f300 811b 	bgt.w	8017e12 <USBD_StdEPReq+0x2a6>
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d072      	beq.n	8017cc6 <USBD_StdEPReq+0x15a>
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d03a      	beq.n	8017c5a <USBD_StdEPReq+0xee>
 8017be4:	e115      	b.n	8017e12 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017bec:	2b02      	cmp	r3, #2
 8017bee:	d002      	beq.n	8017bf6 <USBD_StdEPReq+0x8a>
 8017bf0:	2b03      	cmp	r3, #3
 8017bf2:	d015      	beq.n	8017c20 <USBD_StdEPReq+0xb4>
 8017bf4:	e02b      	b.n	8017c4e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017bf6:	7bbb      	ldrb	r3, [r7, #14]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d00c      	beq.n	8017c16 <USBD_StdEPReq+0xaa>
 8017bfc:	7bbb      	ldrb	r3, [r7, #14]
 8017bfe:	2b80      	cmp	r3, #128	; 0x80
 8017c00:	d009      	beq.n	8017c16 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017c02:	7bbb      	ldrb	r3, [r7, #14]
 8017c04:	4619      	mov	r1, r3
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f001 f874 	bl	8018cf4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017c0c:	2180      	movs	r1, #128	; 0x80
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f001 f870 	bl	8018cf4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017c14:	e020      	b.n	8017c58 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8017c16:	6839      	ldr	r1, [r7, #0]
 8017c18:	6878      	ldr	r0, [r7, #4]
 8017c1a:	f000 fc30 	bl	801847e <USBD_CtlError>
              break;
 8017c1e:	e01b      	b.n	8017c58 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	885b      	ldrh	r3, [r3, #2]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d10e      	bne.n	8017c46 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8017c28:	7bbb      	ldrb	r3, [r7, #14]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d00b      	beq.n	8017c46 <USBD_StdEPReq+0xda>
 8017c2e:	7bbb      	ldrb	r3, [r7, #14]
 8017c30:	2b80      	cmp	r3, #128	; 0x80
 8017c32:	d008      	beq.n	8017c46 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	88db      	ldrh	r3, [r3, #6]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d104      	bne.n	8017c46 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8017c3c:	7bbb      	ldrb	r3, [r7, #14]
 8017c3e:	4619      	mov	r1, r3
 8017c40:	6878      	ldr	r0, [r7, #4]
 8017c42:	f001 f857 	bl	8018cf4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f000 fce1 	bl	801860e <USBD_CtlSendStatus>

              break;
 8017c4c:	e004      	b.n	8017c58 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8017c4e:	6839      	ldr	r1, [r7, #0]
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f000 fc14 	bl	801847e <USBD_CtlError>
              break;
 8017c56:	bf00      	nop
          }
          break;
 8017c58:	e0e0      	b.n	8017e1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c60:	2b02      	cmp	r3, #2
 8017c62:	d002      	beq.n	8017c6a <USBD_StdEPReq+0xfe>
 8017c64:	2b03      	cmp	r3, #3
 8017c66:	d015      	beq.n	8017c94 <USBD_StdEPReq+0x128>
 8017c68:	e026      	b.n	8017cb8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017c6a:	7bbb      	ldrb	r3, [r7, #14]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d00c      	beq.n	8017c8a <USBD_StdEPReq+0x11e>
 8017c70:	7bbb      	ldrb	r3, [r7, #14]
 8017c72:	2b80      	cmp	r3, #128	; 0x80
 8017c74:	d009      	beq.n	8017c8a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017c76:	7bbb      	ldrb	r3, [r7, #14]
 8017c78:	4619      	mov	r1, r3
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f001 f83a 	bl	8018cf4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017c80:	2180      	movs	r1, #128	; 0x80
 8017c82:	6878      	ldr	r0, [r7, #4]
 8017c84:	f001 f836 	bl	8018cf4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017c88:	e01c      	b.n	8017cc4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8017c8a:	6839      	ldr	r1, [r7, #0]
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f000 fbf6 	bl	801847e <USBD_CtlError>
              break;
 8017c92:	e017      	b.n	8017cc4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	885b      	ldrh	r3, [r3, #2]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d112      	bne.n	8017cc2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017c9c:	7bbb      	ldrb	r3, [r7, #14]
 8017c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d004      	beq.n	8017cb0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8017ca6:	7bbb      	ldrb	r3, [r7, #14]
 8017ca8:	4619      	mov	r1, r3
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f001 f841 	bl	8018d32 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f000 fcac 	bl	801860e <USBD_CtlSendStatus>
              }
              break;
 8017cb6:	e004      	b.n	8017cc2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8017cb8:	6839      	ldr	r1, [r7, #0]
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f000 fbdf 	bl	801847e <USBD_CtlError>
              break;
 8017cc0:	e000      	b.n	8017cc4 <USBD_StdEPReq+0x158>
              break;
 8017cc2:	bf00      	nop
          }
          break;
 8017cc4:	e0aa      	b.n	8017e1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ccc:	2b02      	cmp	r3, #2
 8017cce:	d002      	beq.n	8017cd6 <USBD_StdEPReq+0x16a>
 8017cd0:	2b03      	cmp	r3, #3
 8017cd2:	d032      	beq.n	8017d3a <USBD_StdEPReq+0x1ce>
 8017cd4:	e097      	b.n	8017e06 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017cd6:	7bbb      	ldrb	r3, [r7, #14]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d007      	beq.n	8017cec <USBD_StdEPReq+0x180>
 8017cdc:	7bbb      	ldrb	r3, [r7, #14]
 8017cde:	2b80      	cmp	r3, #128	; 0x80
 8017ce0:	d004      	beq.n	8017cec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8017ce2:	6839      	ldr	r1, [r7, #0]
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f000 fbca 	bl	801847e <USBD_CtlError>
                break;
 8017cea:	e091      	b.n	8017e10 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	da0b      	bge.n	8017d0c <USBD_StdEPReq+0x1a0>
 8017cf4:	7bbb      	ldrb	r3, [r7, #14]
 8017cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017cfa:	4613      	mov	r3, r2
 8017cfc:	009b      	lsls	r3, r3, #2
 8017cfe:	4413      	add	r3, r2
 8017d00:	009b      	lsls	r3, r3, #2
 8017d02:	3310      	adds	r3, #16
 8017d04:	687a      	ldr	r2, [r7, #4]
 8017d06:	4413      	add	r3, r2
 8017d08:	3304      	adds	r3, #4
 8017d0a:	e00b      	b.n	8017d24 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017d0c:	7bbb      	ldrb	r3, [r7, #14]
 8017d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017d12:	4613      	mov	r3, r2
 8017d14:	009b      	lsls	r3, r3, #2
 8017d16:	4413      	add	r3, r2
 8017d18:	009b      	lsls	r3, r3, #2
 8017d1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	4413      	add	r3, r2
 8017d22:	3304      	adds	r3, #4
 8017d24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	2202      	movs	r2, #2
 8017d30:	4619      	mov	r1, r3
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f000 fc0d 	bl	8018552 <USBD_CtlSendData>
              break;
 8017d38:	e06a      	b.n	8017e10 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	da11      	bge.n	8017d66 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017d42:	7bbb      	ldrb	r3, [r7, #14]
 8017d44:	f003 020f 	and.w	r2, r3, #15
 8017d48:	6879      	ldr	r1, [r7, #4]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	009b      	lsls	r3, r3, #2
 8017d4e:	4413      	add	r3, r2
 8017d50:	009b      	lsls	r3, r3, #2
 8017d52:	440b      	add	r3, r1
 8017d54:	3318      	adds	r3, #24
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d117      	bne.n	8017d8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8017d5c:	6839      	ldr	r1, [r7, #0]
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f000 fb8d 	bl	801847e <USBD_CtlError>
                  break;
 8017d64:	e054      	b.n	8017e10 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017d66:	7bbb      	ldrb	r3, [r7, #14]
 8017d68:	f003 020f 	and.w	r2, r3, #15
 8017d6c:	6879      	ldr	r1, [r7, #4]
 8017d6e:	4613      	mov	r3, r2
 8017d70:	009b      	lsls	r3, r3, #2
 8017d72:	4413      	add	r3, r2
 8017d74:	009b      	lsls	r3, r3, #2
 8017d76:	440b      	add	r3, r1
 8017d78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d104      	bne.n	8017d8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8017d82:	6839      	ldr	r1, [r7, #0]
 8017d84:	6878      	ldr	r0, [r7, #4]
 8017d86:	f000 fb7a 	bl	801847e <USBD_CtlError>
                  break;
 8017d8a:	e041      	b.n	8017e10 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	da0b      	bge.n	8017dac <USBD_StdEPReq+0x240>
 8017d94:	7bbb      	ldrb	r3, [r7, #14]
 8017d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d9a:	4613      	mov	r3, r2
 8017d9c:	009b      	lsls	r3, r3, #2
 8017d9e:	4413      	add	r3, r2
 8017da0:	009b      	lsls	r3, r3, #2
 8017da2:	3310      	adds	r3, #16
 8017da4:	687a      	ldr	r2, [r7, #4]
 8017da6:	4413      	add	r3, r2
 8017da8:	3304      	adds	r3, #4
 8017daa:	e00b      	b.n	8017dc4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017dac:	7bbb      	ldrb	r3, [r7, #14]
 8017dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017db2:	4613      	mov	r3, r2
 8017db4:	009b      	lsls	r3, r3, #2
 8017db6:	4413      	add	r3, r2
 8017db8:	009b      	lsls	r3, r3, #2
 8017dba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	4413      	add	r3, r2
 8017dc2:	3304      	adds	r3, #4
 8017dc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017dc6:	7bbb      	ldrb	r3, [r7, #14]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d002      	beq.n	8017dd2 <USBD_StdEPReq+0x266>
 8017dcc:	7bbb      	ldrb	r3, [r7, #14]
 8017dce:	2b80      	cmp	r3, #128	; 0x80
 8017dd0:	d103      	bne.n	8017dda <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	601a      	str	r2, [r3, #0]
 8017dd8:	e00e      	b.n	8017df8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8017dda:	7bbb      	ldrb	r3, [r7, #14]
 8017ddc:	4619      	mov	r1, r3
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f000 ffc6 	bl	8018d70 <USBD_LL_IsStallEP>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d003      	beq.n	8017df2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2201      	movs	r2, #1
 8017dee:	601a      	str	r2, [r3, #0]
 8017df0:	e002      	b.n	8017df8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	2200      	movs	r2, #0
 8017df6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	2202      	movs	r2, #2
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	6878      	ldr	r0, [r7, #4]
 8017e00:	f000 fba7 	bl	8018552 <USBD_CtlSendData>
              break;
 8017e04:	e004      	b.n	8017e10 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8017e06:	6839      	ldr	r1, [r7, #0]
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f000 fb38 	bl	801847e <USBD_CtlError>
              break;
 8017e0e:	bf00      	nop
          }
          break;
 8017e10:	e004      	b.n	8017e1c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8017e12:	6839      	ldr	r1, [r7, #0]
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f000 fb32 	bl	801847e <USBD_CtlError>
          break;
 8017e1a:	bf00      	nop
      }
      break;
 8017e1c:	e004      	b.n	8017e28 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8017e1e:	6839      	ldr	r1, [r7, #0]
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f000 fb2c 	bl	801847e <USBD_CtlError>
      break;
 8017e26:	bf00      	nop
  }

  return ret;
 8017e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	3710      	adds	r7, #16
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd80      	pop	{r7, pc}
	...

08017e34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b084      	sub	sp, #16
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017e42:	2300      	movs	r3, #0
 8017e44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017e46:	2300      	movs	r3, #0
 8017e48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	885b      	ldrh	r3, [r3, #2]
 8017e4e:	0a1b      	lsrs	r3, r3, #8
 8017e50:	b29b      	uxth	r3, r3
 8017e52:	3b01      	subs	r3, #1
 8017e54:	2b06      	cmp	r3, #6
 8017e56:	f200 813b 	bhi.w	80180d0 <USBD_GetDescriptor+0x29c>
 8017e5a:	a201      	add	r2, pc, #4	; (adr r2, 8017e60 <USBD_GetDescriptor+0x2c>)
 8017e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e60:	08017e7d 	.word	0x08017e7d
 8017e64:	08017e95 	.word	0x08017e95
 8017e68:	08017ed5 	.word	0x08017ed5
 8017e6c:	080180d1 	.word	0x080180d1
 8017e70:	080180d1 	.word	0x080180d1
 8017e74:	08018071 	.word	0x08018071
 8017e78:	0801809d 	.word	0x0801809d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	687a      	ldr	r2, [r7, #4]
 8017e86:	7c12      	ldrb	r2, [r2, #16]
 8017e88:	f107 0108 	add.w	r1, r7, #8
 8017e8c:	4610      	mov	r0, r2
 8017e8e:	4798      	blx	r3
 8017e90:	60f8      	str	r0, [r7, #12]
      break;
 8017e92:	e125      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	7c1b      	ldrb	r3, [r3, #16]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d10d      	bne.n	8017eb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ea4:	f107 0208 	add.w	r2, r7, #8
 8017ea8:	4610      	mov	r0, r2
 8017eaa:	4798      	blx	r3
 8017eac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	2202      	movs	r2, #2
 8017eb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017eb6:	e113      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ec0:	f107 0208 	add.w	r2, r7, #8
 8017ec4:	4610      	mov	r0, r2
 8017ec6:	4798      	blx	r3
 8017ec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	3301      	adds	r3, #1
 8017ece:	2202      	movs	r2, #2
 8017ed0:	701a      	strb	r2, [r3, #0]
      break;
 8017ed2:	e105      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017ed4:	683b      	ldr	r3, [r7, #0]
 8017ed6:	885b      	ldrh	r3, [r3, #2]
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	2b05      	cmp	r3, #5
 8017edc:	f200 80ac 	bhi.w	8018038 <USBD_GetDescriptor+0x204>
 8017ee0:	a201      	add	r2, pc, #4	; (adr r2, 8017ee8 <USBD_GetDescriptor+0xb4>)
 8017ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ee6:	bf00      	nop
 8017ee8:	08017f01 	.word	0x08017f01
 8017eec:	08017f35 	.word	0x08017f35
 8017ef0:	08017f69 	.word	0x08017f69
 8017ef4:	08017f9d 	.word	0x08017f9d
 8017ef8:	08017fd1 	.word	0x08017fd1
 8017efc:	08018005 	.word	0x08018005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d00b      	beq.n	8017f24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	687a      	ldr	r2, [r7, #4]
 8017f16:	7c12      	ldrb	r2, [r2, #16]
 8017f18:	f107 0108 	add.w	r1, r7, #8
 8017f1c:	4610      	mov	r0, r2
 8017f1e:	4798      	blx	r3
 8017f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f22:	e0a4      	b.n	801806e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8017f24:	6839      	ldr	r1, [r7, #0]
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f000 faa9 	bl	801847e <USBD_CtlError>
            err++;
 8017f2c:	7afb      	ldrb	r3, [r7, #11]
 8017f2e:	3301      	adds	r3, #1
 8017f30:	72fb      	strb	r3, [r7, #11]
          break;
 8017f32:	e09c      	b.n	801806e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017f3a:	689b      	ldr	r3, [r3, #8]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d00b      	beq.n	8017f58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017f46:	689b      	ldr	r3, [r3, #8]
 8017f48:	687a      	ldr	r2, [r7, #4]
 8017f4a:	7c12      	ldrb	r2, [r2, #16]
 8017f4c:	f107 0108 	add.w	r1, r7, #8
 8017f50:	4610      	mov	r0, r2
 8017f52:	4798      	blx	r3
 8017f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f56:	e08a      	b.n	801806e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8017f58:	6839      	ldr	r1, [r7, #0]
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f000 fa8f 	bl	801847e <USBD_CtlError>
            err++;
 8017f60:	7afb      	ldrb	r3, [r7, #11]
 8017f62:	3301      	adds	r3, #1
 8017f64:	72fb      	strb	r3, [r7, #11]
          break;
 8017f66:	e082      	b.n	801806e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d00b      	beq.n	8017f8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017f7a:	68db      	ldr	r3, [r3, #12]
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	7c12      	ldrb	r2, [r2, #16]
 8017f80:	f107 0108 	add.w	r1, r7, #8
 8017f84:	4610      	mov	r0, r2
 8017f86:	4798      	blx	r3
 8017f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f8a:	e070      	b.n	801806e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8017f8c:	6839      	ldr	r1, [r7, #0]
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f000 fa75 	bl	801847e <USBD_CtlError>
            err++;
 8017f94:	7afb      	ldrb	r3, [r7, #11]
 8017f96:	3301      	adds	r3, #1
 8017f98:	72fb      	strb	r3, [r7, #11]
          break;
 8017f9a:	e068      	b.n	801806e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017fa2:	691b      	ldr	r3, [r3, #16]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d00b      	beq.n	8017fc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017fae:	691b      	ldr	r3, [r3, #16]
 8017fb0:	687a      	ldr	r2, [r7, #4]
 8017fb2:	7c12      	ldrb	r2, [r2, #16]
 8017fb4:	f107 0108 	add.w	r1, r7, #8
 8017fb8:	4610      	mov	r0, r2
 8017fba:	4798      	blx	r3
 8017fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017fbe:	e056      	b.n	801806e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8017fc0:	6839      	ldr	r1, [r7, #0]
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f000 fa5b 	bl	801847e <USBD_CtlError>
            err++;
 8017fc8:	7afb      	ldrb	r3, [r7, #11]
 8017fca:	3301      	adds	r3, #1
 8017fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8017fce:	e04e      	b.n	801806e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017fd6:	695b      	ldr	r3, [r3, #20]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d00b      	beq.n	8017ff4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017fe2:	695b      	ldr	r3, [r3, #20]
 8017fe4:	687a      	ldr	r2, [r7, #4]
 8017fe6:	7c12      	ldrb	r2, [r2, #16]
 8017fe8:	f107 0108 	add.w	r1, r7, #8
 8017fec:	4610      	mov	r0, r2
 8017fee:	4798      	blx	r3
 8017ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017ff2:	e03c      	b.n	801806e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8017ff4:	6839      	ldr	r1, [r7, #0]
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f000 fa41 	bl	801847e <USBD_CtlError>
            err++;
 8017ffc:	7afb      	ldrb	r3, [r7, #11]
 8017ffe:	3301      	adds	r3, #1
 8018000:	72fb      	strb	r3, [r7, #11]
          break;
 8018002:	e034      	b.n	801806e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801800a:	699b      	ldr	r3, [r3, #24]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d00b      	beq.n	8018028 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8018016:	699b      	ldr	r3, [r3, #24]
 8018018:	687a      	ldr	r2, [r7, #4]
 801801a:	7c12      	ldrb	r2, [r2, #16]
 801801c:	f107 0108 	add.w	r1, r7, #8
 8018020:	4610      	mov	r0, r2
 8018022:	4798      	blx	r3
 8018024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018026:	e022      	b.n	801806e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8018028:	6839      	ldr	r1, [r7, #0]
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f000 fa27 	bl	801847e <USBD_CtlError>
            err++;
 8018030:	7afb      	ldrb	r3, [r7, #11]
 8018032:	3301      	adds	r3, #1
 8018034:	72fb      	strb	r3, [r7, #11]
          break;
 8018036:	e01a      	b.n	801806e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018040:	2b00      	cmp	r3, #0
 8018042:	d00c      	beq.n	801805e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801804c:	683a      	ldr	r2, [r7, #0]
 801804e:	8852      	ldrh	r2, [r2, #2]
 8018050:	b2d1      	uxtb	r1, r2
 8018052:	f107 0208 	add.w	r2, r7, #8
 8018056:	6878      	ldr	r0, [r7, #4]
 8018058:	4798      	blx	r3
 801805a:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801805c:	e006      	b.n	801806c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 801805e:	6839      	ldr	r1, [r7, #0]
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f000 fa0c 	bl	801847e <USBD_CtlError>
            err++;
 8018066:	7afb      	ldrb	r3, [r7, #11]
 8018068:	3301      	adds	r3, #1
 801806a:	72fb      	strb	r3, [r7, #11]
          break;
 801806c:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 801806e:	e037      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	7c1b      	ldrb	r3, [r3, #16]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d109      	bne.n	801808c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018080:	f107 0208 	add.w	r2, r7, #8
 8018084:	4610      	mov	r0, r2
 8018086:	4798      	blx	r3
 8018088:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801808a:	e029      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 801808c:	6839      	ldr	r1, [r7, #0]
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f000 f9f5 	bl	801847e <USBD_CtlError>
        err++;
 8018094:	7afb      	ldrb	r3, [r7, #11]
 8018096:	3301      	adds	r3, #1
 8018098:	72fb      	strb	r3, [r7, #11]
      break;
 801809a:	e021      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	7c1b      	ldrb	r3, [r3, #16]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d10d      	bne.n	80180c0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80180aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ac:	f107 0208 	add.w	r2, r7, #8
 80180b0:	4610      	mov	r0, r2
 80180b2:	4798      	blx	r3
 80180b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	3301      	adds	r3, #1
 80180ba:	2207      	movs	r2, #7
 80180bc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80180be:	e00f      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80180c0:	6839      	ldr	r1, [r7, #0]
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f000 f9db 	bl	801847e <USBD_CtlError>
        err++;
 80180c8:	7afb      	ldrb	r3, [r7, #11]
 80180ca:	3301      	adds	r3, #1
 80180cc:	72fb      	strb	r3, [r7, #11]
      break;
 80180ce:	e007      	b.n	80180e0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80180d0:	6839      	ldr	r1, [r7, #0]
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f000 f9d3 	bl	801847e <USBD_CtlError>
      err++;
 80180d8:	7afb      	ldrb	r3, [r7, #11]
 80180da:	3301      	adds	r3, #1
 80180dc:	72fb      	strb	r3, [r7, #11]
      break;
 80180de:	bf00      	nop
  }

  if (err != 0U)
 80180e0:	7afb      	ldrb	r3, [r7, #11]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d11c      	bne.n	8018120 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80180e6:	893b      	ldrh	r3, [r7, #8]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d011      	beq.n	8018110 <USBD_GetDescriptor+0x2dc>
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	88db      	ldrh	r3, [r3, #6]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d00d      	beq.n	8018110 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80180f4:	683b      	ldr	r3, [r7, #0]
 80180f6:	88da      	ldrh	r2, [r3, #6]
 80180f8:	893b      	ldrh	r3, [r7, #8]
 80180fa:	4293      	cmp	r3, r2
 80180fc:	bf28      	it	cs
 80180fe:	4613      	movcs	r3, r2
 8018100:	b29b      	uxth	r3, r3
 8018102:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018104:	893b      	ldrh	r3, [r7, #8]
 8018106:	461a      	mov	r2, r3
 8018108:	68f9      	ldr	r1, [r7, #12]
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f000 fa21 	bl	8018552 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	88db      	ldrh	r3, [r3, #6]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d104      	bne.n	8018122 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f000 fa78 	bl	801860e <USBD_CtlSendStatus>
 801811e:	e000      	b.n	8018122 <USBD_GetDescriptor+0x2ee>
    return;
 8018120:	bf00      	nop
    }
  }
}
 8018122:	3710      	adds	r7, #16
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}

08018128 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	889b      	ldrh	r3, [r3, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d130      	bne.n	801819c <USBD_SetAddress+0x74>
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	88db      	ldrh	r3, [r3, #6]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d12c      	bne.n	801819c <USBD_SetAddress+0x74>
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	885b      	ldrh	r3, [r3, #2]
 8018146:	2b7f      	cmp	r3, #127	; 0x7f
 8018148:	d828      	bhi.n	801819c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	885b      	ldrh	r3, [r3, #2]
 801814e:	b2db      	uxtb	r3, r3
 8018150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801815c:	2b03      	cmp	r3, #3
 801815e:	d104      	bne.n	801816a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8018160:	6839      	ldr	r1, [r7, #0]
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f000 f98b 	bl	801847e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018168:	e01d      	b.n	80181a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	7bfa      	ldrb	r2, [r7, #15]
 801816e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018172:	7bfb      	ldrb	r3, [r7, #15]
 8018174:	4619      	mov	r1, r3
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f000 fe25 	bl	8018dc6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801817c:	6878      	ldr	r0, [r7, #4]
 801817e:	f000 fa46 	bl	801860e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018182:	7bfb      	ldrb	r3, [r7, #15]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d004      	beq.n	8018192 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2202      	movs	r2, #2
 801818c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018190:	e009      	b.n	80181a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2201      	movs	r2, #1
 8018196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801819a:	e004      	b.n	80181a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801819c:	6839      	ldr	r1, [r7, #0]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f000 f96d 	bl	801847e <USBD_CtlError>
  }
}
 80181a4:	bf00      	nop
 80181a6:	bf00      	nop
 80181a8:	3710      	adds	r7, #16
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
	...

080181b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b082      	sub	sp, #8
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
 80181b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	885b      	ldrh	r3, [r3, #2]
 80181be:	b2da      	uxtb	r2, r3
 80181c0:	4b41      	ldr	r3, [pc, #260]	; (80182c8 <USBD_SetConfig+0x118>)
 80181c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80181c4:	4b40      	ldr	r3, [pc, #256]	; (80182c8 <USBD_SetConfig+0x118>)
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	2b01      	cmp	r3, #1
 80181ca:	d904      	bls.n	80181d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80181cc:	6839      	ldr	r1, [r7, #0]
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f000 f955 	bl	801847e <USBD_CtlError>
 80181d4:	e075      	b.n	80182c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181dc:	2b02      	cmp	r3, #2
 80181de:	d002      	beq.n	80181e6 <USBD_SetConfig+0x36>
 80181e0:	2b03      	cmp	r3, #3
 80181e2:	d023      	beq.n	801822c <USBD_SetConfig+0x7c>
 80181e4:	e062      	b.n	80182ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80181e6:	4b38      	ldr	r3, [pc, #224]	; (80182c8 <USBD_SetConfig+0x118>)
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d01a      	beq.n	8018224 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80181ee:	4b36      	ldr	r3, [pc, #216]	; (80182c8 <USBD_SetConfig+0x118>)
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	461a      	mov	r2, r3
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2203      	movs	r2, #3
 80181fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018200:	4b31      	ldr	r3, [pc, #196]	; (80182c8 <USBD_SetConfig+0x118>)
 8018202:	781b      	ldrb	r3, [r3, #0]
 8018204:	4619      	mov	r1, r3
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f7ff f99c 	bl	8017544 <USBD_SetClassConfig>
 801820c:	4603      	mov	r3, r0
 801820e:	2b02      	cmp	r3, #2
 8018210:	d104      	bne.n	801821c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8018212:	6839      	ldr	r1, [r7, #0]
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f000 f932 	bl	801847e <USBD_CtlError>
            return;
 801821a:	e052      	b.n	80182c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801821c:	6878      	ldr	r0, [r7, #4]
 801821e:	f000 f9f6 	bl	801860e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018222:	e04e      	b.n	80182c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8018224:	6878      	ldr	r0, [r7, #4]
 8018226:	f000 f9f2 	bl	801860e <USBD_CtlSendStatus>
        break;
 801822a:	e04a      	b.n	80182c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801822c:	4b26      	ldr	r3, [pc, #152]	; (80182c8 <USBD_SetConfig+0x118>)
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d112      	bne.n	801825a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	2202      	movs	r2, #2
 8018238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801823c:	4b22      	ldr	r3, [pc, #136]	; (80182c8 <USBD_SetConfig+0x118>)
 801823e:	781b      	ldrb	r3, [r3, #0]
 8018240:	461a      	mov	r2, r3
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8018246:	4b20      	ldr	r3, [pc, #128]	; (80182c8 <USBD_SetConfig+0x118>)
 8018248:	781b      	ldrb	r3, [r3, #0]
 801824a:	4619      	mov	r1, r3
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f7ff f998 	bl	8017582 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f000 f9db 	bl	801860e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018258:	e033      	b.n	80182c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801825a:	4b1b      	ldr	r3, [pc, #108]	; (80182c8 <USBD_SetConfig+0x118>)
 801825c:	781b      	ldrb	r3, [r3, #0]
 801825e:	461a      	mov	r2, r3
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	429a      	cmp	r2, r3
 8018266:	d01d      	beq.n	80182a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	b2db      	uxtb	r3, r3
 801826e:	4619      	mov	r1, r3
 8018270:	6878      	ldr	r0, [r7, #4]
 8018272:	f7ff f986 	bl	8017582 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8018276:	4b14      	ldr	r3, [pc, #80]	; (80182c8 <USBD_SetConfig+0x118>)
 8018278:	781b      	ldrb	r3, [r3, #0]
 801827a:	461a      	mov	r2, r3
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018280:	4b11      	ldr	r3, [pc, #68]	; (80182c8 <USBD_SetConfig+0x118>)
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	4619      	mov	r1, r3
 8018286:	6878      	ldr	r0, [r7, #4]
 8018288:	f7ff f95c 	bl	8017544 <USBD_SetClassConfig>
 801828c:	4603      	mov	r3, r0
 801828e:	2b02      	cmp	r3, #2
 8018290:	d104      	bne.n	801829c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8018292:	6839      	ldr	r1, [r7, #0]
 8018294:	6878      	ldr	r0, [r7, #4]
 8018296:	f000 f8f2 	bl	801847e <USBD_CtlError>
            return;
 801829a:	e012      	b.n	80182c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	f000 f9b6 	bl	801860e <USBD_CtlSendStatus>
        break;
 80182a2:	e00e      	b.n	80182c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f000 f9b2 	bl	801860e <USBD_CtlSendStatus>
        break;
 80182aa:	e00a      	b.n	80182c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80182ac:	6839      	ldr	r1, [r7, #0]
 80182ae:	6878      	ldr	r0, [r7, #4]
 80182b0:	f000 f8e5 	bl	801847e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80182b4:	4b04      	ldr	r3, [pc, #16]	; (80182c8 <USBD_SetConfig+0x118>)
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	4619      	mov	r1, r3
 80182ba:	6878      	ldr	r0, [r7, #4]
 80182bc:	f7ff f961 	bl	8017582 <USBD_ClrClassConfig>
        break;
 80182c0:	bf00      	nop
    }
  }
}
 80182c2:	3708      	adds	r7, #8
 80182c4:	46bd      	mov	sp, r7
 80182c6:	bd80      	pop	{r7, pc}
 80182c8:	20000b67 	.word	0x20000b67

080182cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b082      	sub	sp, #8
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
 80182d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	88db      	ldrh	r3, [r3, #6]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d004      	beq.n	80182e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80182de:	6839      	ldr	r1, [r7, #0]
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f000 f8cc 	bl	801847e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80182e6:	e022      	b.n	801832e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80182ee:	2b02      	cmp	r3, #2
 80182f0:	dc02      	bgt.n	80182f8 <USBD_GetConfig+0x2c>
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	dc03      	bgt.n	80182fe <USBD_GetConfig+0x32>
 80182f6:	e015      	b.n	8018324 <USBD_GetConfig+0x58>
 80182f8:	2b03      	cmp	r3, #3
 80182fa:	d00b      	beq.n	8018314 <USBD_GetConfig+0x48>
 80182fc:	e012      	b.n	8018324 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2200      	movs	r2, #0
 8018302:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	3308      	adds	r3, #8
 8018308:	2201      	movs	r2, #1
 801830a:	4619      	mov	r1, r3
 801830c:	6878      	ldr	r0, [r7, #4]
 801830e:	f000 f920 	bl	8018552 <USBD_CtlSendData>
        break;
 8018312:	e00c      	b.n	801832e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	3304      	adds	r3, #4
 8018318:	2201      	movs	r2, #1
 801831a:	4619      	mov	r1, r3
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f000 f918 	bl	8018552 <USBD_CtlSendData>
        break;
 8018322:	e004      	b.n	801832e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8018324:	6839      	ldr	r1, [r7, #0]
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	f000 f8a9 	bl	801847e <USBD_CtlError>
        break;
 801832c:	bf00      	nop
}
 801832e:	bf00      	nop
 8018330:	3708      	adds	r7, #8
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}

08018336 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018336:	b580      	push	{r7, lr}
 8018338:	b082      	sub	sp, #8
 801833a:	af00      	add	r7, sp, #0
 801833c:	6078      	str	r0, [r7, #4]
 801833e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018346:	3b01      	subs	r3, #1
 8018348:	2b02      	cmp	r3, #2
 801834a:	d81e      	bhi.n	801838a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	88db      	ldrh	r3, [r3, #6]
 8018350:	2b02      	cmp	r3, #2
 8018352:	d004      	beq.n	801835e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8018354:	6839      	ldr	r1, [r7, #0]
 8018356:	6878      	ldr	r0, [r7, #4]
 8018358:	f000 f891 	bl	801847e <USBD_CtlError>
        break;
 801835c:	e01a      	b.n	8018394 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2201      	movs	r2, #1
 8018362:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801836a:	2b00      	cmp	r3, #0
 801836c:	d005      	beq.n	801837a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	68db      	ldr	r3, [r3, #12]
 8018372:	f043 0202 	orr.w	r2, r3, #2
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	330c      	adds	r3, #12
 801837e:	2202      	movs	r2, #2
 8018380:	4619      	mov	r1, r3
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	f000 f8e5 	bl	8018552 <USBD_CtlSendData>
      break;
 8018388:	e004      	b.n	8018394 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801838a:	6839      	ldr	r1, [r7, #0]
 801838c:	6878      	ldr	r0, [r7, #4]
 801838e:	f000 f876 	bl	801847e <USBD_CtlError>
      break;
 8018392:	bf00      	nop
  }
}
 8018394:	bf00      	nop
 8018396:	3708      	adds	r7, #8
 8018398:	46bd      	mov	sp, r7
 801839a:	bd80      	pop	{r7, pc}

0801839c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
 80183a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	885b      	ldrh	r3, [r3, #2]
 80183aa:	2b01      	cmp	r3, #1
 80183ac:	d106      	bne.n	80183bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	2201      	movs	r2, #1
 80183b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80183b6:	6878      	ldr	r0, [r7, #4]
 80183b8:	f000 f929 	bl	801860e <USBD_CtlSendStatus>
  }
}
 80183bc:	bf00      	nop
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}

080183c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
 80183cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80183d4:	3b01      	subs	r3, #1
 80183d6:	2b02      	cmp	r3, #2
 80183d8:	d80b      	bhi.n	80183f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	885b      	ldrh	r3, [r3, #2]
 80183de:	2b01      	cmp	r3, #1
 80183e0:	d10c      	bne.n	80183fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2200      	movs	r2, #0
 80183e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80183ea:	6878      	ldr	r0, [r7, #4]
 80183ec:	f000 f90f 	bl	801860e <USBD_CtlSendStatus>
      }
      break;
 80183f0:	e004      	b.n	80183fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80183f2:	6839      	ldr	r1, [r7, #0]
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f000 f842 	bl	801847e <USBD_CtlError>
      break;
 80183fa:	e000      	b.n	80183fe <USBD_ClrFeature+0x3a>
      break;
 80183fc:	bf00      	nop
  }
}
 80183fe:	bf00      	nop
 8018400:	3708      	adds	r7, #8
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}

08018406 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018406:	b480      	push	{r7}
 8018408:	b083      	sub	sp, #12
 801840a:	af00      	add	r7, sp, #0
 801840c:	6078      	str	r0, [r7, #4]
 801840e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	781a      	ldrb	r2, [r3, #0]
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	785a      	ldrb	r2, [r3, #1]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	3302      	adds	r3, #2
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	b29a      	uxth	r2, r3
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	3303      	adds	r3, #3
 801842c:	781b      	ldrb	r3, [r3, #0]
 801842e:	b29b      	uxth	r3, r3
 8018430:	021b      	lsls	r3, r3, #8
 8018432:	b29b      	uxth	r3, r3
 8018434:	4413      	add	r3, r2
 8018436:	b29a      	uxth	r2, r3
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	3304      	adds	r3, #4
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	b29a      	uxth	r2, r3
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	3305      	adds	r3, #5
 8018448:	781b      	ldrb	r3, [r3, #0]
 801844a:	b29b      	uxth	r3, r3
 801844c:	021b      	lsls	r3, r3, #8
 801844e:	b29b      	uxth	r3, r3
 8018450:	4413      	add	r3, r2
 8018452:	b29a      	uxth	r2, r3
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	3306      	adds	r3, #6
 801845c:	781b      	ldrb	r3, [r3, #0]
 801845e:	b29a      	uxth	r2, r3
 8018460:	683b      	ldr	r3, [r7, #0]
 8018462:	3307      	adds	r3, #7
 8018464:	781b      	ldrb	r3, [r3, #0]
 8018466:	b29b      	uxth	r3, r3
 8018468:	021b      	lsls	r3, r3, #8
 801846a:	b29b      	uxth	r3, r3
 801846c:	4413      	add	r3, r2
 801846e:	b29a      	uxth	r2, r3
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	80da      	strh	r2, [r3, #6]

}
 8018474:	bf00      	nop
 8018476:	370c      	adds	r7, #12
 8018478:	46bd      	mov	sp, r7
 801847a:	bc80      	pop	{r7}
 801847c:	4770      	bx	lr

0801847e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801847e:	b580      	push	{r7, lr}
 8018480:	b082      	sub	sp, #8
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
 8018486:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8018488:	2180      	movs	r1, #128	; 0x80
 801848a:	6878      	ldr	r0, [r7, #4]
 801848c:	f000 fc32 	bl	8018cf4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8018490:	2100      	movs	r1, #0
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f000 fc2e 	bl	8018cf4 <USBD_LL_StallEP>
}
 8018498:	bf00      	nop
 801849a:	3708      	adds	r7, #8
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}

080184a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b086      	sub	sp, #24
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	60f8      	str	r0, [r7, #12]
 80184a8:	60b9      	str	r1, [r7, #8]
 80184aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80184ac:	2300      	movs	r3, #0
 80184ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d032      	beq.n	801851c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80184b6:	68f8      	ldr	r0, [r7, #12]
 80184b8:	f000 f834 	bl	8018524 <USBD_GetLen>
 80184bc:	4603      	mov	r3, r0
 80184be:	3301      	adds	r3, #1
 80184c0:	b29b      	uxth	r3, r3
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	b29a      	uxth	r2, r3
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80184ca:	7dfb      	ldrb	r3, [r7, #23]
 80184cc:	1c5a      	adds	r2, r3, #1
 80184ce:	75fa      	strb	r2, [r7, #23]
 80184d0:	461a      	mov	r2, r3
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	4413      	add	r3, r2
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	7812      	ldrb	r2, [r2, #0]
 80184da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80184dc:	7dfb      	ldrb	r3, [r7, #23]
 80184de:	1c5a      	adds	r2, r3, #1
 80184e0:	75fa      	strb	r2, [r7, #23]
 80184e2:	461a      	mov	r2, r3
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	4413      	add	r3, r2
 80184e8:	2203      	movs	r2, #3
 80184ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80184ec:	e012      	b.n	8018514 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	1c5a      	adds	r2, r3, #1
 80184f2:	60fa      	str	r2, [r7, #12]
 80184f4:	7dfa      	ldrb	r2, [r7, #23]
 80184f6:	1c51      	adds	r1, r2, #1
 80184f8:	75f9      	strb	r1, [r7, #23]
 80184fa:	4611      	mov	r1, r2
 80184fc:	68ba      	ldr	r2, [r7, #8]
 80184fe:	440a      	add	r2, r1
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8018504:	7dfb      	ldrb	r3, [r7, #23]
 8018506:	1c5a      	adds	r2, r3, #1
 8018508:	75fa      	strb	r2, [r7, #23]
 801850a:	461a      	mov	r2, r3
 801850c:	68bb      	ldr	r3, [r7, #8]
 801850e:	4413      	add	r3, r2
 8018510:	2200      	movs	r2, #0
 8018512:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d1e8      	bne.n	80184ee <USBD_GetString+0x4e>
    }
  }
}
 801851c:	bf00      	nop
 801851e:	3718      	adds	r7, #24
 8018520:	46bd      	mov	sp, r7
 8018522:	bd80      	pop	{r7, pc}

08018524 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018524:	b480      	push	{r7}
 8018526:	b085      	sub	sp, #20
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801852c:	2300      	movs	r3, #0
 801852e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8018530:	e005      	b.n	801853e <USBD_GetLen+0x1a>
  {
    len++;
 8018532:	7bfb      	ldrb	r3, [r7, #15]
 8018534:	3301      	adds	r3, #1
 8018536:	73fb      	strb	r3, [r7, #15]
    buf++;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	3301      	adds	r3, #1
 801853c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d1f5      	bne.n	8018532 <USBD_GetLen+0xe>
  }

  return len;
 8018546:	7bfb      	ldrb	r3, [r7, #15]
}
 8018548:	4618      	mov	r0, r3
 801854a:	3714      	adds	r7, #20
 801854c:	46bd      	mov	sp, r7
 801854e:	bc80      	pop	{r7}
 8018550:	4770      	bx	lr

08018552 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8018552:	b580      	push	{r7, lr}
 8018554:	b084      	sub	sp, #16
 8018556:	af00      	add	r7, sp, #0
 8018558:	60f8      	str	r0, [r7, #12]
 801855a:	60b9      	str	r1, [r7, #8]
 801855c:	4613      	mov	r3, r2
 801855e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	2202      	movs	r2, #2
 8018564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018568:	88fa      	ldrh	r2, [r7, #6]
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801856e:	88fa      	ldrh	r2, [r7, #6]
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018574:	88fb      	ldrh	r3, [r7, #6]
 8018576:	68ba      	ldr	r2, [r7, #8]
 8018578:	2100      	movs	r1, #0
 801857a:	68f8      	ldr	r0, [r7, #12]
 801857c:	f000 fc42 	bl	8018e04 <USBD_LL_Transmit>

  return USBD_OK;
 8018580:	2300      	movs	r3, #0
}
 8018582:	4618      	mov	r0, r3
 8018584:	3710      	adds	r7, #16
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}

0801858a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801858a:	b580      	push	{r7, lr}
 801858c:	b084      	sub	sp, #16
 801858e:	af00      	add	r7, sp, #0
 8018590:	60f8      	str	r0, [r7, #12]
 8018592:	60b9      	str	r1, [r7, #8]
 8018594:	4613      	mov	r3, r2
 8018596:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018598:	88fb      	ldrh	r3, [r7, #6]
 801859a:	68ba      	ldr	r2, [r7, #8]
 801859c:	2100      	movs	r1, #0
 801859e:	68f8      	ldr	r0, [r7, #12]
 80185a0:	f000 fc30 	bl	8018e04 <USBD_LL_Transmit>

  return USBD_OK;
 80185a4:	2300      	movs	r3, #0
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3710      	adds	r7, #16
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}

080185ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80185ae:	b580      	push	{r7, lr}
 80185b0:	b084      	sub	sp, #16
 80185b2:	af00      	add	r7, sp, #0
 80185b4:	60f8      	str	r0, [r7, #12]
 80185b6:	60b9      	str	r1, [r7, #8]
 80185b8:	4613      	mov	r3, r2
 80185ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	2203      	movs	r2, #3
 80185c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80185c4:	88fa      	ldrh	r2, [r7, #6]
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80185cc:	88fa      	ldrh	r2, [r7, #6]
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80185d4:	88fb      	ldrh	r3, [r7, #6]
 80185d6:	68ba      	ldr	r2, [r7, #8]
 80185d8:	2100      	movs	r1, #0
 80185da:	68f8      	ldr	r0, [r7, #12]
 80185dc:	f000 fc35 	bl	8018e4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80185e0:	2300      	movs	r3, #0
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3710      	adds	r7, #16
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}

080185ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80185ea:	b580      	push	{r7, lr}
 80185ec:	b084      	sub	sp, #16
 80185ee:	af00      	add	r7, sp, #0
 80185f0:	60f8      	str	r0, [r7, #12]
 80185f2:	60b9      	str	r1, [r7, #8]
 80185f4:	4613      	mov	r3, r2
 80185f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80185f8:	88fb      	ldrh	r3, [r7, #6]
 80185fa:	68ba      	ldr	r2, [r7, #8]
 80185fc:	2100      	movs	r1, #0
 80185fe:	68f8      	ldr	r0, [r7, #12]
 8018600:	f000 fc23 	bl	8018e4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018604:	2300      	movs	r3, #0
}
 8018606:	4618      	mov	r0, r3
 8018608:	3710      	adds	r7, #16
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}

0801860e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801860e:	b580      	push	{r7, lr}
 8018610:	b082      	sub	sp, #8
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	2204      	movs	r2, #4
 801861a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801861e:	2300      	movs	r3, #0
 8018620:	2200      	movs	r2, #0
 8018622:	2100      	movs	r1, #0
 8018624:	6878      	ldr	r0, [r7, #4]
 8018626:	f000 fbed 	bl	8018e04 <USBD_LL_Transmit>

  return USBD_OK;
 801862a:	2300      	movs	r3, #0
}
 801862c:	4618      	mov	r0, r3
 801862e:	3708      	adds	r7, #8
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2205      	movs	r2, #5
 8018640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018644:	2300      	movs	r3, #0
 8018646:	2200      	movs	r2, #0
 8018648:	2100      	movs	r1, #0
 801864a:	6878      	ldr	r0, [r7, #4]
 801864c:	f000 fbfd 	bl	8018e4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018650:	2300      	movs	r3, #0
}
 8018652:	4618      	mov	r0, r3
 8018654:	3708      	adds	r7, #8
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
	...

0801865c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018660:	2200      	movs	r2, #0
 8018662:	4912      	ldr	r1, [pc, #72]	; (80186ac <MX_USB_DEVICE_Init+0x50>)
 8018664:	4812      	ldr	r0, [pc, #72]	; (80186b0 <MX_USB_DEVICE_Init+0x54>)
 8018666:	f7fe fefd 	bl	8017464 <USBD_Init>
 801866a:	4603      	mov	r3, r0
 801866c:	2b00      	cmp	r3, #0
 801866e:	d001      	beq.n	8018674 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018670:	f7e9 f9fe 	bl	8001a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8018674:	490f      	ldr	r1, [pc, #60]	; (80186b4 <MX_USB_DEVICE_Init+0x58>)
 8018676:	480e      	ldr	r0, [pc, #56]	; (80186b0 <MX_USB_DEVICE_Init+0x54>)
 8018678:	f7fe ff1f 	bl	80174ba <USBD_RegisterClass>
 801867c:	4603      	mov	r3, r0
 801867e:	2b00      	cmp	r3, #0
 8018680:	d001      	beq.n	8018686 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018682:	f7e9 f9f5 	bl	8001a70 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8018686:	490c      	ldr	r1, [pc, #48]	; (80186b8 <MX_USB_DEVICE_Init+0x5c>)
 8018688:	4809      	ldr	r0, [pc, #36]	; (80186b0 <MX_USB_DEVICE_Init+0x54>)
 801868a:	f7fe fb87 	bl	8016d9c <USBD_DFU_RegisterMedia>
 801868e:	4603      	mov	r3, r0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d001      	beq.n	8018698 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018694:	f7e9 f9ec 	bl	8001a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018698:	4805      	ldr	r0, [pc, #20]	; (80186b0 <MX_USB_DEVICE_Init+0x54>)
 801869a:	f7fe ff27 	bl	80174ec <USBD_Start>
 801869e:	4603      	mov	r3, r0
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d001      	beq.n	80186a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80186a4:	f7e9 f9e4 	bl	8001a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80186a8:	bf00      	nop
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	2000010c 	.word	0x2000010c
 80186b0:	20000b68 	.word	0x20000b68
 80186b4:	200000a8 	.word	0x200000a8
 80186b8:	2000015c 	.word	0x2000015c

080186bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80186bc:	b480      	push	{r7}
 80186be:	b083      	sub	sp, #12
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	4603      	mov	r3, r0
 80186c4:	6039      	str	r1, [r7, #0]
 80186c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	2212      	movs	r2, #18
 80186cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80186ce:	4b03      	ldr	r3, [pc, #12]	; (80186dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	370c      	adds	r7, #12
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bc80      	pop	{r7}
 80186d8:	4770      	bx	lr
 80186da:	bf00      	nop
 80186dc:	20000128 	.word	0x20000128

080186e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80186e0:	b480      	push	{r7}
 80186e2:	b083      	sub	sp, #12
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	4603      	mov	r3, r0
 80186e8:	6039      	str	r1, [r7, #0]
 80186ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80186ec:	683b      	ldr	r3, [r7, #0]
 80186ee:	2204      	movs	r2, #4
 80186f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80186f2:	4b03      	ldr	r3, [pc, #12]	; (8018700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	370c      	adds	r7, #12
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bc80      	pop	{r7}
 80186fc:	4770      	bx	lr
 80186fe:	bf00      	nop
 8018700:	2000013c 	.word	0x2000013c

08018704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
 801870a:	4603      	mov	r3, r0
 801870c:	6039      	str	r1, [r7, #0]
 801870e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018710:	79fb      	ldrb	r3, [r7, #7]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d105      	bne.n	8018722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018716:	683a      	ldr	r2, [r7, #0]
 8018718:	4907      	ldr	r1, [pc, #28]	; (8018738 <USBD_FS_ProductStrDescriptor+0x34>)
 801871a:	4808      	ldr	r0, [pc, #32]	; (801873c <USBD_FS_ProductStrDescriptor+0x38>)
 801871c:	f7ff fec0 	bl	80184a0 <USBD_GetString>
 8018720:	e004      	b.n	801872c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018722:	683a      	ldr	r2, [r7, #0]
 8018724:	4904      	ldr	r1, [pc, #16]	; (8018738 <USBD_FS_ProductStrDescriptor+0x34>)
 8018726:	4805      	ldr	r0, [pc, #20]	; (801873c <USBD_FS_ProductStrDescriptor+0x38>)
 8018728:	f7ff feba 	bl	80184a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801872c:	4b02      	ldr	r3, [pc, #8]	; (8018738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801872e:	4618      	mov	r0, r3
 8018730:	3708      	adds	r7, #8
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}
 8018736:	bf00      	nop
 8018738:	20000e2c 	.word	0x20000e2c
 801873c:	080198cc 	.word	0x080198cc

08018740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	4603      	mov	r3, r0
 8018748:	6039      	str	r1, [r7, #0]
 801874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	4904      	ldr	r1, [pc, #16]	; (8018760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018750:	4804      	ldr	r0, [pc, #16]	; (8018764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018752:	f7ff fea5 	bl	80184a0 <USBD_GetString>
  return USBD_StrDesc;
 8018756:	4b02      	ldr	r3, [pc, #8]	; (8018760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018758:	4618      	mov	r0, r3
 801875a:	3708      	adds	r7, #8
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}
 8018760:	20000e2c 	.word	0x20000e2c
 8018764:	080198ec 	.word	0x080198ec

08018768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	4603      	mov	r3, r0
 8018770:	6039      	str	r1, [r7, #0]
 8018772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	221a      	movs	r2, #26
 8018778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801877a:	f000 f843 	bl	8018804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801877e:	4b02      	ldr	r3, [pc, #8]	; (8018788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018780:	4618      	mov	r0, r3
 8018782:	3708      	adds	r7, #8
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	20000140 	.word	0x20000140

0801878c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b082      	sub	sp, #8
 8018790:	af00      	add	r7, sp, #0
 8018792:	4603      	mov	r3, r0
 8018794:	6039      	str	r1, [r7, #0]
 8018796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018798:	79fb      	ldrb	r3, [r7, #7]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d105      	bne.n	80187aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801879e:	683a      	ldr	r2, [r7, #0]
 80187a0:	4907      	ldr	r1, [pc, #28]	; (80187c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80187a2:	4808      	ldr	r0, [pc, #32]	; (80187c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80187a4:	f7ff fe7c 	bl	80184a0 <USBD_GetString>
 80187a8:	e004      	b.n	80187b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80187aa:	683a      	ldr	r2, [r7, #0]
 80187ac:	4904      	ldr	r1, [pc, #16]	; (80187c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80187ae:	4805      	ldr	r0, [pc, #20]	; (80187c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80187b0:	f7ff fe76 	bl	80184a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80187b4:	4b02      	ldr	r3, [pc, #8]	; (80187c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80187b6:	4618      	mov	r0, r3
 80187b8:	3708      	adds	r7, #8
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}
 80187be:	bf00      	nop
 80187c0:	20000e2c 	.word	0x20000e2c
 80187c4:	08019900 	.word	0x08019900

080187c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b082      	sub	sp, #8
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	4603      	mov	r3, r0
 80187d0:	6039      	str	r1, [r7, #0]
 80187d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80187d4:	79fb      	ldrb	r3, [r7, #7]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d105      	bne.n	80187e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80187da:	683a      	ldr	r2, [r7, #0]
 80187dc:	4907      	ldr	r1, [pc, #28]	; (80187fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80187de:	4808      	ldr	r0, [pc, #32]	; (8018800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80187e0:	f7ff fe5e 	bl	80184a0 <USBD_GetString>
 80187e4:	e004      	b.n	80187f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80187e6:	683a      	ldr	r2, [r7, #0]
 80187e8:	4904      	ldr	r1, [pc, #16]	; (80187fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80187ea:	4805      	ldr	r0, [pc, #20]	; (8018800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80187ec:	f7ff fe58 	bl	80184a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80187f0:	4b02      	ldr	r3, [pc, #8]	; (80187fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80187f2:	4618      	mov	r0, r3
 80187f4:	3708      	adds	r7, #8
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	20000e2c 	.word	0x20000e2c
 8018800:	0801990c 	.word	0x0801990c

08018804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801880a:	4b0f      	ldr	r3, [pc, #60]	; (8018848 <Get_SerialNum+0x44>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018810:	4b0e      	ldr	r3, [pc, #56]	; (801884c <Get_SerialNum+0x48>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018816:	4b0e      	ldr	r3, [pc, #56]	; (8018850 <Get_SerialNum+0x4c>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801881c:	68fa      	ldr	r2, [r7, #12]
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	4413      	add	r3, r2
 8018822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d009      	beq.n	801883e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801882a:	2208      	movs	r2, #8
 801882c:	4909      	ldr	r1, [pc, #36]	; (8018854 <Get_SerialNum+0x50>)
 801882e:	68f8      	ldr	r0, [r7, #12]
 8018830:	f000 f814 	bl	801885c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018834:	2204      	movs	r2, #4
 8018836:	4908      	ldr	r1, [pc, #32]	; (8018858 <Get_SerialNum+0x54>)
 8018838:	68b8      	ldr	r0, [r7, #8]
 801883a:	f000 f80f 	bl	801885c <IntToUnicode>
  }
}
 801883e:	bf00      	nop
 8018840:	3710      	adds	r7, #16
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}
 8018846:	bf00      	nop
 8018848:	1ffff7e8 	.word	0x1ffff7e8
 801884c:	1ffff7ec 	.word	0x1ffff7ec
 8018850:	1ffff7f0 	.word	0x1ffff7f0
 8018854:	20000142 	.word	0x20000142
 8018858:	20000152 	.word	0x20000152

0801885c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801885c:	b480      	push	{r7}
 801885e:	b087      	sub	sp, #28
 8018860:	af00      	add	r7, sp, #0
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	4613      	mov	r3, r2
 8018868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801886a:	2300      	movs	r3, #0
 801886c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801886e:	2300      	movs	r3, #0
 8018870:	75fb      	strb	r3, [r7, #23]
 8018872:	e027      	b.n	80188c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	0f1b      	lsrs	r3, r3, #28
 8018878:	2b09      	cmp	r3, #9
 801887a:	d80b      	bhi.n	8018894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	0f1b      	lsrs	r3, r3, #28
 8018880:	b2da      	uxtb	r2, r3
 8018882:	7dfb      	ldrb	r3, [r7, #23]
 8018884:	005b      	lsls	r3, r3, #1
 8018886:	4619      	mov	r1, r3
 8018888:	68bb      	ldr	r3, [r7, #8]
 801888a:	440b      	add	r3, r1
 801888c:	3230      	adds	r2, #48	; 0x30
 801888e:	b2d2      	uxtb	r2, r2
 8018890:	701a      	strb	r2, [r3, #0]
 8018892:	e00a      	b.n	80188aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	0f1b      	lsrs	r3, r3, #28
 8018898:	b2da      	uxtb	r2, r3
 801889a:	7dfb      	ldrb	r3, [r7, #23]
 801889c:	005b      	lsls	r3, r3, #1
 801889e:	4619      	mov	r1, r3
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	440b      	add	r3, r1
 80188a4:	3237      	adds	r2, #55	; 0x37
 80188a6:	b2d2      	uxtb	r2, r2
 80188a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	011b      	lsls	r3, r3, #4
 80188ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80188b0:	7dfb      	ldrb	r3, [r7, #23]
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	3301      	adds	r3, #1
 80188b6:	68ba      	ldr	r2, [r7, #8]
 80188b8:	4413      	add	r3, r2
 80188ba:	2200      	movs	r2, #0
 80188bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80188be:	7dfb      	ldrb	r3, [r7, #23]
 80188c0:	3301      	adds	r3, #1
 80188c2:	75fb      	strb	r3, [r7, #23]
 80188c4:	7dfa      	ldrb	r2, [r7, #23]
 80188c6:	79fb      	ldrb	r3, [r7, #7]
 80188c8:	429a      	cmp	r2, r3
 80188ca:	d3d3      	bcc.n	8018874 <IntToUnicode+0x18>
  }
}
 80188cc:	bf00      	nop
 80188ce:	bf00      	nop
 80188d0:	371c      	adds	r7, #28
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bc80      	pop	{r7}
 80188d6:	4770      	bx	lr

080188d8 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80188d8:	b480      	push	{r7}
 80188da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80188dc:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80188de:	4618      	mov	r0, r3
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bc80      	pop	{r7}
 80188e4:	4770      	bx	lr

080188e6 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80188e6:	b480      	push	{r7}
 80188e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80188ea:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	46bd      	mov	sp, r7
 80188f0:	bc80      	pop	{r7}
 80188f2:	4770      	bx	lr

080188f4 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80188f4:	b480      	push	{r7}
 80188f6:	b083      	sub	sp, #12
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80188fc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80188fe:	4618      	mov	r0, r3
 8018900:	370c      	adds	r7, #12
 8018902:	46bd      	mov	sp, r7
 8018904:	bc80      	pop	{r7}
 8018906:	4770      	bx	lr

08018908 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8018908:	b480      	push	{r7}
 801890a:	b085      	sub	sp, #20
 801890c:	af00      	add	r7, sp, #0
 801890e:	60f8      	str	r0, [r7, #12]
 8018910:	60b9      	str	r1, [r7, #8]
 8018912:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8018914:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018916:	4618      	mov	r0, r3
 8018918:	3714      	adds	r7, #20
 801891a:	46bd      	mov	sp, r7
 801891c:	bc80      	pop	{r7}
 801891e:	4770      	bx	lr

08018920 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8018920:	b480      	push	{r7}
 8018922:	b085      	sub	sp, #20
 8018924:	af00      	add	r7, sp, #0
 8018926:	60f8      	str	r0, [r7, #12]
 8018928:	60b9      	str	r1, [r7, #8]
 801892a:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 801892c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801892e:	4618      	mov	r0, r3
 8018930:	3714      	adds	r7, #20
 8018932:	46bd      	mov	sp, r7
 8018934:	bc80      	pop	{r7}
 8018936:	4770      	bx	lr

08018938 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8018938:	b480      	push	{r7}
 801893a:	b085      	sub	sp, #20
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	460b      	mov	r3, r1
 8018942:	607a      	str	r2, [r7, #4]
 8018944:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8018946:	7afb      	ldrb	r3, [r7, #11]
 8018948:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 801894a:	bf00      	nop
  }
  return (USBD_OK);
 801894c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801894e:	4618      	mov	r0, r3
 8018950:	3714      	adds	r7, #20
 8018952:	46bd      	mov	sp, r7
 8018954:	bc80      	pop	{r7}
 8018956:	4770      	bx	lr

08018958 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b088      	sub	sp, #32
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018960:	f107 0310 	add.w	r3, r7, #16
 8018964:	2200      	movs	r2, #0
 8018966:	601a      	str	r2, [r3, #0]
 8018968:	605a      	str	r2, [r3, #4]
 801896a:	609a      	str	r2, [r3, #8]
 801896c:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018976:	d12c      	bne.n	80189d2 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018978:	4b18      	ldr	r3, [pc, #96]	; (80189dc <HAL_PCD_MspInit+0x84>)
 801897a:	699b      	ldr	r3, [r3, #24]
 801897c:	4a17      	ldr	r2, [pc, #92]	; (80189dc <HAL_PCD_MspInit+0x84>)
 801897e:	f043 0304 	orr.w	r3, r3, #4
 8018982:	6193      	str	r3, [r2, #24]
 8018984:	4b15      	ldr	r3, [pc, #84]	; (80189dc <HAL_PCD_MspInit+0x84>)
 8018986:	699b      	ldr	r3, [r3, #24]
 8018988:	f003 0304 	and.w	r3, r3, #4
 801898c:	60fb      	str	r3, [r7, #12]
 801898e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8018990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018996:	2300      	movs	r3, #0
 8018998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801899a:	2300      	movs	r3, #0
 801899c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801899e:	f107 0310 	add.w	r3, r7, #16
 80189a2:	4619      	mov	r1, r3
 80189a4:	480e      	ldr	r0, [pc, #56]	; (80189e0 <HAL_PCD_MspInit+0x88>)
 80189a6:	f7ed ff59 	bl	800685c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80189aa:	4b0c      	ldr	r3, [pc, #48]	; (80189dc <HAL_PCD_MspInit+0x84>)
 80189ac:	695b      	ldr	r3, [r3, #20]
 80189ae:	4a0b      	ldr	r2, [pc, #44]	; (80189dc <HAL_PCD_MspInit+0x84>)
 80189b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80189b4:	6153      	str	r3, [r2, #20]
 80189b6:	4b09      	ldr	r3, [pc, #36]	; (80189dc <HAL_PCD_MspInit+0x84>)
 80189b8:	695b      	ldr	r3, [r3, #20]
 80189ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80189be:	60bb      	str	r3, [r7, #8]
 80189c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80189c2:	2200      	movs	r2, #0
 80189c4:	2100      	movs	r1, #0
 80189c6:	2043      	movs	r0, #67	; 0x43
 80189c8:	f7ed f99f 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80189cc:	2043      	movs	r0, #67	; 0x43
 80189ce:	f7ed f9b8 	bl	8005d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80189d2:	bf00      	nop
 80189d4:	3720      	adds	r7, #32
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	40021000 	.word	0x40021000
 80189e0:	40010800 	.word	0x40010800

080189e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b082      	sub	sp, #8
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80189f8:	4619      	mov	r1, r3
 80189fa:	4610      	mov	r0, r2
 80189fc:	f7fe fdd4 	bl	80175a8 <USBD_LL_SetupStage>
}
 8018a00:	bf00      	nop
 8018a02:	3708      	adds	r7, #8
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd80      	pop	{r7, pc}

08018a08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b082      	sub	sp, #8
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	6078      	str	r0, [r7, #4]
 8018a10:	460b      	mov	r3, r1
 8018a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8018a1a:	78fa      	ldrb	r2, [r7, #3]
 8018a1c:	6879      	ldr	r1, [r7, #4]
 8018a1e:	4613      	mov	r3, r2
 8018a20:	00db      	lsls	r3, r3, #3
 8018a22:	1a9b      	subs	r3, r3, r2
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	440b      	add	r3, r1
 8018a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018a2c:	681a      	ldr	r2, [r3, #0]
 8018a2e:	78fb      	ldrb	r3, [r7, #3]
 8018a30:	4619      	mov	r1, r3
 8018a32:	f7fe fe06 	bl	8017642 <USBD_LL_DataOutStage>
}
 8018a36:	bf00      	nop
 8018a38:	3708      	adds	r7, #8
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bd80      	pop	{r7, pc}

08018a3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a3e:	b580      	push	{r7, lr}
 8018a40:	b082      	sub	sp, #8
 8018a42:	af00      	add	r7, sp, #0
 8018a44:	6078      	str	r0, [r7, #4]
 8018a46:	460b      	mov	r3, r1
 8018a48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8018a50:	78fa      	ldrb	r2, [r7, #3]
 8018a52:	6879      	ldr	r1, [r7, #4]
 8018a54:	4613      	mov	r3, r2
 8018a56:	00db      	lsls	r3, r3, #3
 8018a58:	1a9b      	subs	r3, r3, r2
 8018a5a:	009b      	lsls	r3, r3, #2
 8018a5c:	440b      	add	r3, r1
 8018a5e:	3348      	adds	r3, #72	; 0x48
 8018a60:	681a      	ldr	r2, [r3, #0]
 8018a62:	78fb      	ldrb	r3, [r7, #3]
 8018a64:	4619      	mov	r1, r3
 8018a66:	f7fe fe5d 	bl	8017724 <USBD_LL_DataInStage>
}
 8018a6a:	bf00      	nop
 8018a6c:	3708      	adds	r7, #8
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}

08018a72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a72:	b580      	push	{r7, lr}
 8018a74:	b082      	sub	sp, #8
 8018a76:	af00      	add	r7, sp, #0
 8018a78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7fe ff6d 	bl	8017960 <USBD_LL_SOF>
}
 8018a86:	bf00      	nop
 8018a88:	3708      	adds	r7, #8
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}

08018a8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a8e:	b580      	push	{r7, lr}
 8018a90:	b084      	sub	sp, #16
 8018a92:	af00      	add	r7, sp, #0
 8018a94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018a96:	2301      	movs	r3, #1
 8018a98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	2b02      	cmp	r3, #2
 8018aa0:	d001      	beq.n	8018aa6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018aa2:	f7e8 ffe5 	bl	8001a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018aac:	7bfa      	ldrb	r2, [r7, #15]
 8018aae:	4611      	mov	r1, r2
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7fe ff1d 	bl	80178f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018abc:	4618      	mov	r0, r3
 8018abe:	f7fe fed6 	bl	801786e <USBD_LL_Reset>
}
 8018ac2:	bf00      	nop
 8018ac4:	3710      	adds	r7, #16
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}
	...

08018acc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7fe ff17 	bl	801790e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	687a      	ldr	r2, [r7, #4]
 8018aec:	6812      	ldr	r2, [r2, #0]
 8018aee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018af2:	f043 0301 	orr.w	r3, r3, #1
 8018af6:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	6a1b      	ldr	r3, [r3, #32]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d005      	beq.n	8018b0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018b00:	4b04      	ldr	r3, [pc, #16]	; (8018b14 <HAL_PCD_SuspendCallback+0x48>)
 8018b02:	691b      	ldr	r3, [r3, #16]
 8018b04:	4a03      	ldr	r2, [pc, #12]	; (8018b14 <HAL_PCD_SuspendCallback+0x48>)
 8018b06:	f043 0306 	orr.w	r3, r3, #6
 8018b0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018b0c:	bf00      	nop
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}
 8018b14:	e000ed00 	.word	0xe000ed00

08018b18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018b26:	4618      	mov	r0, r3
 8018b28:	f7fe ff05 	bl	8017936 <USBD_LL_Resume>
}
 8018b2c:	bf00      	nop
 8018b2e:	3708      	adds	r7, #8
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}

08018b34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
 8018b3c:	460b      	mov	r3, r1
 8018b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018b46:	78fa      	ldrb	r2, [r7, #3]
 8018b48:	4611      	mov	r1, r2
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7fe ff2e 	bl	80179ac <USBD_LL_IsoOUTIncomplete>
}
 8018b50:	bf00      	nop
 8018b52:	3708      	adds	r7, #8
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b082      	sub	sp, #8
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
 8018b60:	460b      	mov	r3, r1
 8018b62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018b6a:	78fa      	ldrb	r2, [r7, #3]
 8018b6c:	4611      	mov	r1, r2
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7fe ff10 	bl	8017994 <USBD_LL_IsoINIncomplete>
}
 8018b74:	bf00      	nop
 8018b76:	3708      	adds	r7, #8
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}

08018b7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7fe ff1a 	bl	80179c4 <USBD_LL_DevConnected>
}
 8018b90:	bf00      	nop
 8018b92:	3708      	adds	r7, #8
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}

08018b98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7fe ff16 	bl	80179d8 <USBD_LL_DevDisconnected>
}
 8018bac:	bf00      	nop
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}

08018bb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b082      	sub	sp, #8
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	781b      	ldrb	r3, [r3, #0]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d133      	bne.n	8018c2c <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018bc4:	4a1c      	ldr	r2, [pc, #112]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	4a1a      	ldr	r2, [pc, #104]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018bd4:	4b18      	ldr	r3, [pc, #96]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018bdc:	4b16      	ldr	r3, [pc, #88]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bde:	2204      	movs	r2, #4
 8018be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018be2:	4b15      	ldr	r3, [pc, #84]	; (8018c38 <USBD_LL_Init+0x84>)
 8018be4:	2202      	movs	r2, #2
 8018be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018be8:	4b13      	ldr	r3, [pc, #76]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bea:	2202      	movs	r2, #2
 8018bec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018bee:	4b12      	ldr	r3, [pc, #72]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018bf4:	4b10      	ldr	r3, [pc, #64]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8018bfa:	4b0f      	ldr	r3, [pc, #60]	; (8018c38 <USBD_LL_Init+0x84>)
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018c00:	480d      	ldr	r0, [pc, #52]	; (8018c38 <USBD_LL_Init+0x84>)
 8018c02:	f7ed ffc7 	bl	8006b94 <HAL_PCD_Init>
 8018c06:	4603      	mov	r3, r0
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d001      	beq.n	8018c10 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018c0c:	f7e8 ff30 	bl	8001a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018c10:	2180      	movs	r1, #128	; 0x80
 8018c12:	4809      	ldr	r0, [pc, #36]	; (8018c38 <USBD_LL_Init+0x84>)
 8018c14:	f7ee ff9e 	bl	8007b54 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018c18:	2240      	movs	r2, #64	; 0x40
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	4806      	ldr	r0, [pc, #24]	; (8018c38 <USBD_LL_Init+0x84>)
 8018c1e:	f7ee ff53 	bl	8007ac8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018c22:	2280      	movs	r2, #128	; 0x80
 8018c24:	2101      	movs	r1, #1
 8018c26:	4804      	ldr	r0, [pc, #16]	; (8018c38 <USBD_LL_Init+0x84>)
 8018c28:	f7ee ff4e 	bl	8007ac8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018c2c:	2300      	movs	r3, #0
}
 8018c2e:	4618      	mov	r0, r3
 8018c30:	3708      	adds	r7, #8
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}
 8018c36:	bf00      	nop
 8018c38:	2000102c 	.word	0x2000102c

08018c3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c44:	2300      	movs	r3, #0
 8018c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018c52:	4618      	mov	r0, r3
 8018c54:	f7ee f8bb 	bl	8006dce <HAL_PCD_Start>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c5c:	7bfb      	ldrb	r3, [r7, #15]
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f000 f92c 	bl	8018ebc <USBD_Get_USB_Status>
 8018c64:	4603      	mov	r3, r0
 8018c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3710      	adds	r7, #16
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}

08018c72 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8018c72:	b580      	push	{r7, lr}
 8018c74:	b084      	sub	sp, #16
 8018c76:	af00      	add	r7, sp, #0
 8018c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7ee f8c2 	bl	8006e12 <HAL_PCD_Stop>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c92:	7bfb      	ldrb	r3, [r7, #15]
 8018c94:	4618      	mov	r0, r3
 8018c96:	f000 f911 	bl	8018ebc <USBD_Get_USB_Status>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	3710      	adds	r7, #16
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd80      	pop	{r7, pc}

08018ca8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	4608      	mov	r0, r1
 8018cb2:	4611      	mov	r1, r2
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	70fb      	strb	r3, [r7, #3]
 8018cba:	460b      	mov	r3, r1
 8018cbc:	70bb      	strb	r3, [r7, #2]
 8018cbe:	4613      	mov	r3, r2
 8018cc0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018cd0:	78bb      	ldrb	r3, [r7, #2]
 8018cd2:	883a      	ldrh	r2, [r7, #0]
 8018cd4:	78f9      	ldrb	r1, [r7, #3]
 8018cd6:	f7ee fc52 	bl	800757e <HAL_PCD_EP_Open>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018cde:	7bfb      	ldrb	r3, [r7, #15]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f000 f8eb 	bl	8018ebc <USBD_Get_USB_Status>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	3710      	adds	r7, #16
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b084      	sub	sp, #16
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	460b      	mov	r3, r1
 8018cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d00:	2300      	movs	r3, #0
 8018d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d04:	2300      	movs	r3, #0
 8018d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018d0e:	78fa      	ldrb	r2, [r7, #3]
 8018d10:	4611      	mov	r1, r2
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7ee fd16 	bl	8007744 <HAL_PCD_EP_SetStall>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d1c:	7bfb      	ldrb	r3, [r7, #15]
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f000 f8cc 	bl	8018ebc <USBD_Get_USB_Status>
 8018d24:	4603      	mov	r3, r0
 8018d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3710      	adds	r7, #16
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}

08018d32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d32:	b580      	push	{r7, lr}
 8018d34:	b084      	sub	sp, #16
 8018d36:	af00      	add	r7, sp, #0
 8018d38:	6078      	str	r0, [r7, #4]
 8018d3a:	460b      	mov	r3, r1
 8018d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d42:	2300      	movs	r3, #0
 8018d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018d4c:	78fa      	ldrb	r2, [r7, #3]
 8018d4e:	4611      	mov	r1, r2
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7ee fd59 	bl	8007808 <HAL_PCD_EP_ClrStall>
 8018d56:	4603      	mov	r3, r0
 8018d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d5a:	7bfb      	ldrb	r3, [r7, #15]
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	f000 f8ad 	bl	8018ebc <USBD_Get_USB_Status>
 8018d62:	4603      	mov	r3, r0
 8018d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d68:	4618      	mov	r0, r3
 8018d6a:	3710      	adds	r7, #16
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd80      	pop	{r7, pc}

08018d70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d70:	b480      	push	{r7}
 8018d72:	b085      	sub	sp, #20
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
 8018d78:	460b      	mov	r3, r1
 8018d7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018d82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	da0b      	bge.n	8018da4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018d8c:	78fb      	ldrb	r3, [r7, #3]
 8018d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018d92:	68f9      	ldr	r1, [r7, #12]
 8018d94:	4613      	mov	r3, r2
 8018d96:	00db      	lsls	r3, r3, #3
 8018d98:	1a9b      	subs	r3, r3, r2
 8018d9a:	009b      	lsls	r3, r3, #2
 8018d9c:	440b      	add	r3, r1
 8018d9e:	333e      	adds	r3, #62	; 0x3e
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	e00b      	b.n	8018dbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018da4:	78fb      	ldrb	r3, [r7, #3]
 8018da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018daa:	68f9      	ldr	r1, [r7, #12]
 8018dac:	4613      	mov	r3, r2
 8018dae:	00db      	lsls	r3, r3, #3
 8018db0:	1a9b      	subs	r3, r3, r2
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	440b      	add	r3, r1
 8018db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018dba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3714      	adds	r7, #20
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bc80      	pop	{r7}
 8018dc4:	4770      	bx	lr

08018dc6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018dc6:	b580      	push	{r7, lr}
 8018dc8:	b084      	sub	sp, #16
 8018dca:	af00      	add	r7, sp, #0
 8018dcc:	6078      	str	r0, [r7, #4]
 8018dce:	460b      	mov	r3, r1
 8018dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018de0:	78fa      	ldrb	r2, [r7, #3]
 8018de2:	4611      	mov	r1, r2
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7ee fba5 	bl	8007534 <HAL_PCD_SetAddress>
 8018dea:	4603      	mov	r3, r0
 8018dec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018dee:	7bfb      	ldrb	r3, [r7, #15]
 8018df0:	4618      	mov	r0, r3
 8018df2:	f000 f863 	bl	8018ebc <USBD_Get_USB_Status>
 8018df6:	4603      	mov	r3, r0
 8018df8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3710      	adds	r7, #16
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}

08018e04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b086      	sub	sp, #24
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	60f8      	str	r0, [r7, #12]
 8018e0c:	607a      	str	r2, [r7, #4]
 8018e0e:	461a      	mov	r2, r3
 8018e10:	460b      	mov	r3, r1
 8018e12:	72fb      	strb	r3, [r7, #11]
 8018e14:	4613      	mov	r3, r2
 8018e16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e18:	2300      	movs	r3, #0
 8018e1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018e26:	893b      	ldrh	r3, [r7, #8]
 8018e28:	7af9      	ldrb	r1, [r7, #11]
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	f7ee fc4d 	bl	80076ca <HAL_PCD_EP_Transmit>
 8018e30:	4603      	mov	r3, r0
 8018e32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e34:	7dfb      	ldrb	r3, [r7, #23]
 8018e36:	4618      	mov	r0, r3
 8018e38:	f000 f840 	bl	8018ebc <USBD_Get_USB_Status>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018e40:	7dbb      	ldrb	r3, [r7, #22]
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3718      	adds	r7, #24
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}

08018e4a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018e4a:	b580      	push	{r7, lr}
 8018e4c:	b086      	sub	sp, #24
 8018e4e:	af00      	add	r7, sp, #0
 8018e50:	60f8      	str	r0, [r7, #12]
 8018e52:	607a      	str	r2, [r7, #4]
 8018e54:	461a      	mov	r2, r3
 8018e56:	460b      	mov	r3, r1
 8018e58:	72fb      	strb	r3, [r7, #11]
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e62:	2300      	movs	r3, #0
 8018e64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8018e6c:	893b      	ldrh	r3, [r7, #8]
 8018e6e:	7af9      	ldrb	r1, [r7, #11]
 8018e70:	687a      	ldr	r2, [r7, #4]
 8018e72:	f7ee fbec 	bl	800764e <HAL_PCD_EP_Receive>
 8018e76:	4603      	mov	r3, r0
 8018e78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e7a:	7dfb      	ldrb	r3, [r7, #23]
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f000 f81d 	bl	8018ebc <USBD_Get_USB_Status>
 8018e82:	4603      	mov	r3, r0
 8018e84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018e86:	7dbb      	ldrb	r3, [r7, #22]
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3718      	adds	r7, #24
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}

08018e90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018e90:	b480      	push	{r7}
 8018e92:	b083      	sub	sp, #12
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018e98:	4b02      	ldr	r3, [pc, #8]	; (8018ea4 <USBD_static_malloc+0x14>)
}
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	370c      	adds	r7, #12
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bc80      	pop	{r7}
 8018ea2:	4770      	bx	lr
 8018ea4:	2000142c 	.word	0x2000142c

08018ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018ea8:	b480      	push	{r7}
 8018eaa:	b083      	sub	sp, #12
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]

}
 8018eb0:	bf00      	nop
 8018eb2:	370c      	adds	r7, #12
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	bc80      	pop	{r7}
 8018eb8:	4770      	bx	lr
	...

08018ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018ebc:	b480      	push	{r7}
 8018ebe:	b085      	sub	sp, #20
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018eca:	79fb      	ldrb	r3, [r7, #7]
 8018ecc:	2b03      	cmp	r3, #3
 8018ece:	d817      	bhi.n	8018f00 <USBD_Get_USB_Status+0x44>
 8018ed0:	a201      	add	r2, pc, #4	; (adr r2, 8018ed8 <USBD_Get_USB_Status+0x1c>)
 8018ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ed6:	bf00      	nop
 8018ed8:	08018ee9 	.word	0x08018ee9
 8018edc:	08018eef 	.word	0x08018eef
 8018ee0:	08018ef5 	.word	0x08018ef5
 8018ee4:	08018efb 	.word	0x08018efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018ee8:	2300      	movs	r3, #0
 8018eea:	73fb      	strb	r3, [r7, #15]
    break;
 8018eec:	e00b      	b.n	8018f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018eee:	2302      	movs	r3, #2
 8018ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8018ef2:	e008      	b.n	8018f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8018ef8:	e005      	b.n	8018f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018efa:	2302      	movs	r3, #2
 8018efc:	73fb      	strb	r3, [r7, #15]
    break;
 8018efe:	e002      	b.n	8018f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018f00:	2302      	movs	r3, #2
 8018f02:	73fb      	strb	r3, [r7, #15]
    break;
 8018f04:	bf00      	nop
  }
  return usb_status;
 8018f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f08:	4618      	mov	r0, r3
 8018f0a:	3714      	adds	r7, #20
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	bc80      	pop	{r7}
 8018f10:	4770      	bx	lr
 8018f12:	bf00      	nop

08018f14 <_ZdlPvj>:
 8018f14:	f000 b897 	b.w	8019046 <_ZdlPv>

08018f18 <_ZdaPv>:
 8018f18:	f000 b895 	b.w	8019046 <_ZdlPv>

08018f1c <_Znwj>:
 8018f1c:	2801      	cmp	r0, #1
 8018f1e:	bf38      	it	cc
 8018f20:	2001      	movcc	r0, #1
 8018f22:	b510      	push	{r4, lr}
 8018f24:	4604      	mov	r4, r0
 8018f26:	4620      	mov	r0, r4
 8018f28:	f000 f9e8 	bl	80192fc <malloc>
 8018f2c:	b930      	cbnz	r0, 8018f3c <_Znwj+0x20>
 8018f2e:	f000 f89f 	bl	8019070 <_ZSt15get_new_handlerv>
 8018f32:	b908      	cbnz	r0, 8018f38 <_Znwj+0x1c>
 8018f34:	f000 f9b0 	bl	8019298 <abort>
 8018f38:	4780      	blx	r0
 8018f3a:	e7f4      	b.n	8018f26 <_Znwj+0xa>
 8018f3c:	bd10      	pop	{r4, pc}

08018f3e <_Znaj>:
 8018f3e:	f7ff bfed 	b.w	8018f1c <_Znwj>

08018f42 <__cxa_pure_virtual>:
 8018f42:	b508      	push	{r3, lr}
 8018f44:	f000 f88e 	bl	8019064 <_ZSt9terminatev>

08018f48 <_ZNSaIcEC1Ev>:
 8018f48:	4770      	bx	lr

08018f4a <_ZNSaIcED1Ev>:
 8018f4a:	4770      	bx	lr

08018f4c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8018f4c:	b10a      	cbz	r2, 8018f52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8018f4e:	f000 b9e5 	b.w	801931c <memcpy>
 8018f52:	4770      	bx	lr

08018f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8018f54:	b508      	push	{r3, lr}
 8018f56:	680b      	ldr	r3, [r1, #0]
 8018f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018f5c:	d302      	bcc.n	8018f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8018f5e:	480d      	ldr	r0, [pc, #52]	; (8018f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8018f60:	f000 f894 	bl	801908c <_ZSt20__throw_length_errorPKc>
 8018f64:	4293      	cmp	r3, r2
 8018f66:	d90b      	bls.n	8018f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018f68:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018f6c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8018f70:	d206      	bcs.n	8018f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018f72:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8018f76:	bf2a      	itet	cs
 8018f78:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8018f7c:	6008      	strcc	r0, [r1, #0]
 8018f7e:	600b      	strcs	r3, [r1, #0]
 8018f80:	6808      	ldr	r0, [r1, #0]
 8018f82:	3001      	adds	r0, #1
 8018f84:	d501      	bpl.n	8018f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8018f86:	f000 f87b 	bl	8019080 <_ZSt17__throw_bad_allocv>
 8018f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018f8e:	f7ff bfc5 	b.w	8018f1c <_Znwj>
 8018f92:	bf00      	nop
 8018f94:	08019d20 	.word	0x08019d20

08018f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8018f98:	4603      	mov	r3, r0
 8018f9a:	f853 0b08 	ldr.w	r0, [r3], #8
 8018f9e:	4298      	cmp	r0, r3
 8018fa0:	d001      	beq.n	8018fa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8018fa2:	f000 b850 	b.w	8019046 <_ZdlPv>
 8018fa6:	4770      	bx	lr

08018fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8018fa8:	2a01      	cmp	r2, #1
 8018faa:	b410      	push	{r4}
 8018fac:	d103      	bne.n	8018fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 8018fae:	780a      	ldrb	r2, [r1, #0]
 8018fb0:	bc10      	pop	{r4}
 8018fb2:	7002      	strb	r2, [r0, #0]
 8018fb4:	4770      	bx	lr
 8018fb6:	bc10      	pop	{r4}
 8018fb8:	f7ff bfc8 	b.w	8018f4c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08018fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8018fbc:	b508      	push	{r3, lr}
 8018fbe:	1a52      	subs	r2, r2, r1
 8018fc0:	f7ff fff2 	bl	8018fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8018fc4:	bd08      	pop	{r3, pc}

08018fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8018fc6:	b510      	push	{r4, lr}
 8018fc8:	4604      	mov	r4, r0
 8018fca:	f7ff ffe5 	bl	8018f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8018fce:	4620      	mov	r0, r4
 8018fd0:	bd10      	pop	{r4, pc}
	...

08018fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8018fd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	4616      	mov	r6, r2
 8018fda:	460d      	mov	r5, r1
 8018fdc:	b919      	cbnz	r1, 8018fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8018fde:	b112      	cbz	r2, 8018fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8018fe0:	480d      	ldr	r0, [pc, #52]	; (8019018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8018fe2:	f000 f850 	bl	8019086 <_ZSt19__throw_logic_errorPKc>
 8018fe6:	1b73      	subs	r3, r6, r5
 8018fe8:	2b0f      	cmp	r3, #15
 8018fea:	9301      	str	r3, [sp, #4]
 8018fec:	d907      	bls.n	8018ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8018fee:	2200      	movs	r2, #0
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	a901      	add	r1, sp, #4
 8018ff4:	f7ff ffae 	bl	8018f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8018ff8:	9b01      	ldr	r3, [sp, #4]
 8018ffa:	6020      	str	r0, [r4, #0]
 8018ffc:	60a3      	str	r3, [r4, #8]
 8018ffe:	4632      	mov	r2, r6
 8019000:	4629      	mov	r1, r5
 8019002:	6820      	ldr	r0, [r4, #0]
 8019004:	f7ff ffda 	bl	8018fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8019008:	2100      	movs	r1, #0
 801900a:	9b01      	ldr	r3, [sp, #4]
 801900c:	6822      	ldr	r2, [r4, #0]
 801900e:	6063      	str	r3, [r4, #4]
 8019010:	54d1      	strb	r1, [r2, r3]
 8019012:	b002      	add	sp, #8
 8019014:	bd70      	pop	{r4, r5, r6, pc}
 8019016:	bf00      	nop
 8019018:	08019d38 	.word	0x08019d38

0801901c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801901c:	b538      	push	{r3, r4, r5, lr}
 801901e:	f100 0308 	add.w	r3, r0, #8
 8019022:	4604      	mov	r4, r0
 8019024:	460d      	mov	r5, r1
 8019026:	6003      	str	r3, [r0, #0]
 8019028:	b159      	cbz	r1, 8019042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801902a:	4608      	mov	r0, r1
 801902c:	f7e7 f906 	bl	800023c <strlen>
 8019030:	182a      	adds	r2, r5, r0
 8019032:	4620      	mov	r0, r4
 8019034:	f04f 0300 	mov.w	r3, #0
 8019038:	4629      	mov	r1, r5
 801903a:	f7ff ffcb 	bl	8018fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801903e:	4620      	mov	r0, r4
 8019040:	bd38      	pop	{r3, r4, r5, pc}
 8019042:	2201      	movs	r2, #1
 8019044:	e7f5      	b.n	8019032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08019046 <_ZdlPv>:
 8019046:	f000 b961 	b.w	801930c <free>

0801904a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801904a:	b508      	push	{r3, lr}
 801904c:	4780      	blx	r0
 801904e:	f000 f923 	bl	8019298 <abort>
	...

08019054 <_ZSt13get_terminatev>:
 8019054:	4b02      	ldr	r3, [pc, #8]	; (8019060 <_ZSt13get_terminatev+0xc>)
 8019056:	6818      	ldr	r0, [r3, #0]
 8019058:	f3bf 8f5b 	dmb	ish
 801905c:	4770      	bx	lr
 801905e:	bf00      	nop
 8019060:	20000178 	.word	0x20000178

08019064 <_ZSt9terminatev>:
 8019064:	b508      	push	{r3, lr}
 8019066:	f7ff fff5 	bl	8019054 <_ZSt13get_terminatev>
 801906a:	f7ff ffee 	bl	801904a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08019070 <_ZSt15get_new_handlerv>:
 8019070:	4b02      	ldr	r3, [pc, #8]	; (801907c <_ZSt15get_new_handlerv+0xc>)
 8019072:	6818      	ldr	r0, [r3, #0]
 8019074:	f3bf 8f5b 	dmb	ish
 8019078:	4770      	bx	lr
 801907a:	bf00      	nop
 801907c:	2000184c 	.word	0x2000184c

08019080 <_ZSt17__throw_bad_allocv>:
 8019080:	b508      	push	{r3, lr}
 8019082:	f000 f909 	bl	8019298 <abort>

08019086 <_ZSt19__throw_logic_errorPKc>:
 8019086:	b508      	push	{r3, lr}
 8019088:	f000 f906 	bl	8019298 <abort>

0801908c <_ZSt20__throw_length_errorPKc>:
 801908c:	b508      	push	{r3, lr}
 801908e:	f000 f903 	bl	8019298 <abort>
 8019092:	0000      	movs	r0, r0
 8019094:	0000      	movs	r0, r0
	...

08019098 <ceil>:
 8019098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801909c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80190a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80190a4:	2e13      	cmp	r6, #19
 80190a6:	4602      	mov	r2, r0
 80190a8:	460b      	mov	r3, r1
 80190aa:	4607      	mov	r7, r0
 80190ac:	460c      	mov	r4, r1
 80190ae:	4605      	mov	r5, r0
 80190b0:	dc31      	bgt.n	8019116 <ceil+0x7e>
 80190b2:	2e00      	cmp	r6, #0
 80190b4:	da12      	bge.n	80190dc <ceil+0x44>
 80190b6:	a334      	add	r3, pc, #208	; (adr r3, 8019188 <ceil+0xf0>)
 80190b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190bc:	f7e7 f8cc 	bl	8000258 <__adddf3>
 80190c0:	2200      	movs	r2, #0
 80190c2:	2300      	movs	r3, #0
 80190c4:	f7e7 fd0e 	bl	8000ae4 <__aeabi_dcmpgt>
 80190c8:	b128      	cbz	r0, 80190d6 <ceil+0x3e>
 80190ca:	2c00      	cmp	r4, #0
 80190cc:	db56      	blt.n	801917c <ceil+0xe4>
 80190ce:	433c      	orrs	r4, r7
 80190d0:	d058      	beq.n	8019184 <ceil+0xec>
 80190d2:	2500      	movs	r5, #0
 80190d4:	4c2e      	ldr	r4, [pc, #184]	; (8019190 <ceil+0xf8>)
 80190d6:	4623      	mov	r3, r4
 80190d8:	462f      	mov	r7, r5
 80190da:	e025      	b.n	8019128 <ceil+0x90>
 80190dc:	4a2d      	ldr	r2, [pc, #180]	; (8019194 <ceil+0xfc>)
 80190de:	fa42 f806 	asr.w	r8, r2, r6
 80190e2:	ea01 0208 	and.w	r2, r1, r8
 80190e6:	4302      	orrs	r2, r0
 80190e8:	d01e      	beq.n	8019128 <ceil+0x90>
 80190ea:	a327      	add	r3, pc, #156	; (adr r3, 8019188 <ceil+0xf0>)
 80190ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f0:	f7e7 f8b2 	bl	8000258 <__adddf3>
 80190f4:	2200      	movs	r2, #0
 80190f6:	2300      	movs	r3, #0
 80190f8:	f7e7 fcf4 	bl	8000ae4 <__aeabi_dcmpgt>
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d0ea      	beq.n	80190d6 <ceil+0x3e>
 8019100:	2c00      	cmp	r4, #0
 8019102:	bfc2      	ittt	gt
 8019104:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019108:	fa43 f606 	asrgt.w	r6, r3, r6
 801910c:	19a4      	addgt	r4, r4, r6
 801910e:	2500      	movs	r5, #0
 8019110:	ea24 0408 	bic.w	r4, r4, r8
 8019114:	e7df      	b.n	80190d6 <ceil+0x3e>
 8019116:	2e33      	cmp	r6, #51	; 0x33
 8019118:	dd0a      	ble.n	8019130 <ceil+0x98>
 801911a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801911e:	d103      	bne.n	8019128 <ceil+0x90>
 8019120:	f7e7 f89a 	bl	8000258 <__adddf3>
 8019124:	4607      	mov	r7, r0
 8019126:	460b      	mov	r3, r1
 8019128:	4638      	mov	r0, r7
 801912a:	4619      	mov	r1, r3
 801912c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019134:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8019138:	fa22 f808 	lsr.w	r8, r2, r8
 801913c:	ea18 0f00 	tst.w	r8, r0
 8019140:	d0f2      	beq.n	8019128 <ceil+0x90>
 8019142:	a311      	add	r3, pc, #68	; (adr r3, 8019188 <ceil+0xf0>)
 8019144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019148:	f7e7 f886 	bl	8000258 <__adddf3>
 801914c:	2200      	movs	r2, #0
 801914e:	2300      	movs	r3, #0
 8019150:	f7e7 fcc8 	bl	8000ae4 <__aeabi_dcmpgt>
 8019154:	2800      	cmp	r0, #0
 8019156:	d0be      	beq.n	80190d6 <ceil+0x3e>
 8019158:	2c00      	cmp	r4, #0
 801915a:	dd02      	ble.n	8019162 <ceil+0xca>
 801915c:	2e14      	cmp	r6, #20
 801915e:	d103      	bne.n	8019168 <ceil+0xd0>
 8019160:	3401      	adds	r4, #1
 8019162:	ea25 0508 	bic.w	r5, r5, r8
 8019166:	e7b6      	b.n	80190d6 <ceil+0x3e>
 8019168:	2301      	movs	r3, #1
 801916a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801916e:	fa03 f606 	lsl.w	r6, r3, r6
 8019172:	4435      	add	r5, r6
 8019174:	42bd      	cmp	r5, r7
 8019176:	bf38      	it	cc
 8019178:	18e4      	addcc	r4, r4, r3
 801917a:	e7f2      	b.n	8019162 <ceil+0xca>
 801917c:	2500      	movs	r5, #0
 801917e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019182:	e7a8      	b.n	80190d6 <ceil+0x3e>
 8019184:	4625      	mov	r5, r4
 8019186:	e7a6      	b.n	80190d6 <ceil+0x3e>
 8019188:	8800759c 	.word	0x8800759c
 801918c:	7e37e43c 	.word	0x7e37e43c
 8019190:	3ff00000 	.word	0x3ff00000
 8019194:	000fffff 	.word	0x000fffff

08019198 <floor>:
 8019198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801919c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80191a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80191a4:	2e13      	cmp	r6, #19
 80191a6:	4602      	mov	r2, r0
 80191a8:	460b      	mov	r3, r1
 80191aa:	4607      	mov	r7, r0
 80191ac:	460c      	mov	r4, r1
 80191ae:	4605      	mov	r5, r0
 80191b0:	dc33      	bgt.n	801921a <floor+0x82>
 80191b2:	2e00      	cmp	r6, #0
 80191b4:	da14      	bge.n	80191e0 <floor+0x48>
 80191b6:	a334      	add	r3, pc, #208	; (adr r3, 8019288 <floor+0xf0>)
 80191b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191bc:	f7e7 f84c 	bl	8000258 <__adddf3>
 80191c0:	2200      	movs	r2, #0
 80191c2:	2300      	movs	r3, #0
 80191c4:	f7e7 fc8e 	bl	8000ae4 <__aeabi_dcmpgt>
 80191c8:	b138      	cbz	r0, 80191da <floor+0x42>
 80191ca:	2c00      	cmp	r4, #0
 80191cc:	da58      	bge.n	8019280 <floor+0xe8>
 80191ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80191d2:	431d      	orrs	r5, r3
 80191d4:	d001      	beq.n	80191da <floor+0x42>
 80191d6:	2500      	movs	r5, #0
 80191d8:	4c2d      	ldr	r4, [pc, #180]	; (8019290 <floor+0xf8>)
 80191da:	4623      	mov	r3, r4
 80191dc:	462f      	mov	r7, r5
 80191de:	e025      	b.n	801922c <floor+0x94>
 80191e0:	4a2c      	ldr	r2, [pc, #176]	; (8019294 <floor+0xfc>)
 80191e2:	fa42 f806 	asr.w	r8, r2, r6
 80191e6:	ea01 0208 	and.w	r2, r1, r8
 80191ea:	4302      	orrs	r2, r0
 80191ec:	d01e      	beq.n	801922c <floor+0x94>
 80191ee:	a326      	add	r3, pc, #152	; (adr r3, 8019288 <floor+0xf0>)
 80191f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f4:	f7e7 f830 	bl	8000258 <__adddf3>
 80191f8:	2200      	movs	r2, #0
 80191fa:	2300      	movs	r3, #0
 80191fc:	f7e7 fc72 	bl	8000ae4 <__aeabi_dcmpgt>
 8019200:	2800      	cmp	r0, #0
 8019202:	d0ea      	beq.n	80191da <floor+0x42>
 8019204:	2c00      	cmp	r4, #0
 8019206:	bfbe      	ittt	lt
 8019208:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801920c:	fa43 f606 	asrlt.w	r6, r3, r6
 8019210:	19a4      	addlt	r4, r4, r6
 8019212:	2500      	movs	r5, #0
 8019214:	ea24 0408 	bic.w	r4, r4, r8
 8019218:	e7df      	b.n	80191da <floor+0x42>
 801921a:	2e33      	cmp	r6, #51	; 0x33
 801921c:	dd0a      	ble.n	8019234 <floor+0x9c>
 801921e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019222:	d103      	bne.n	801922c <floor+0x94>
 8019224:	f7e7 f818 	bl	8000258 <__adddf3>
 8019228:	4607      	mov	r7, r0
 801922a:	460b      	mov	r3, r1
 801922c:	4638      	mov	r0, r7
 801922e:	4619      	mov	r1, r3
 8019230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019238:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801923c:	fa22 f808 	lsr.w	r8, r2, r8
 8019240:	ea18 0f00 	tst.w	r8, r0
 8019244:	d0f2      	beq.n	801922c <floor+0x94>
 8019246:	a310      	add	r3, pc, #64	; (adr r3, 8019288 <floor+0xf0>)
 8019248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801924c:	f7e7 f804 	bl	8000258 <__adddf3>
 8019250:	2200      	movs	r2, #0
 8019252:	2300      	movs	r3, #0
 8019254:	f7e7 fc46 	bl	8000ae4 <__aeabi_dcmpgt>
 8019258:	2800      	cmp	r0, #0
 801925a:	d0be      	beq.n	80191da <floor+0x42>
 801925c:	2c00      	cmp	r4, #0
 801925e:	da02      	bge.n	8019266 <floor+0xce>
 8019260:	2e14      	cmp	r6, #20
 8019262:	d103      	bne.n	801926c <floor+0xd4>
 8019264:	3401      	adds	r4, #1
 8019266:	ea25 0508 	bic.w	r5, r5, r8
 801926a:	e7b6      	b.n	80191da <floor+0x42>
 801926c:	2301      	movs	r3, #1
 801926e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019272:	fa03 f606 	lsl.w	r6, r3, r6
 8019276:	4435      	add	r5, r6
 8019278:	42bd      	cmp	r5, r7
 801927a:	bf38      	it	cc
 801927c:	18e4      	addcc	r4, r4, r3
 801927e:	e7f2      	b.n	8019266 <floor+0xce>
 8019280:	2500      	movs	r5, #0
 8019282:	462c      	mov	r4, r5
 8019284:	e7a9      	b.n	80191da <floor+0x42>
 8019286:	bf00      	nop
 8019288:	8800759c 	.word	0x8800759c
 801928c:	7e37e43c 	.word	0x7e37e43c
 8019290:	bff00000 	.word	0xbff00000
 8019294:	000fffff 	.word	0x000fffff

08019298 <abort>:
 8019298:	2006      	movs	r0, #6
 801929a:	b508      	push	{r3, lr}
 801929c:	f000 f968 	bl	8019570 <raise>
 80192a0:	2001      	movs	r0, #1
 80192a2:	f7ea fed4 	bl	800404e <_exit>
	...

080192a8 <__errno>:
 80192a8:	4b01      	ldr	r3, [pc, #4]	; (80192b0 <__errno+0x8>)
 80192aa:	6818      	ldr	r0, [r3, #0]
 80192ac:	4770      	bx	lr
 80192ae:	bf00      	nop
 80192b0:	2000017c 	.word	0x2000017c

080192b4 <__libc_init_array>:
 80192b4:	b570      	push	{r4, r5, r6, lr}
 80192b6:	2600      	movs	r6, #0
 80192b8:	4d0c      	ldr	r5, [pc, #48]	; (80192ec <__libc_init_array+0x38>)
 80192ba:	4c0d      	ldr	r4, [pc, #52]	; (80192f0 <__libc_init_array+0x3c>)
 80192bc:	1b64      	subs	r4, r4, r5
 80192be:	10a4      	asrs	r4, r4, #2
 80192c0:	42a6      	cmp	r6, r4
 80192c2:	d109      	bne.n	80192d8 <__libc_init_array+0x24>
 80192c4:	f000 f97e 	bl	80195c4 <_init>
 80192c8:	2600      	movs	r6, #0
 80192ca:	4d0a      	ldr	r5, [pc, #40]	; (80192f4 <__libc_init_array+0x40>)
 80192cc:	4c0a      	ldr	r4, [pc, #40]	; (80192f8 <__libc_init_array+0x44>)
 80192ce:	1b64      	subs	r4, r4, r5
 80192d0:	10a4      	asrs	r4, r4, #2
 80192d2:	42a6      	cmp	r6, r4
 80192d4:	d105      	bne.n	80192e2 <__libc_init_array+0x2e>
 80192d6:	bd70      	pop	{r4, r5, r6, pc}
 80192d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80192dc:	4798      	blx	r3
 80192de:	3601      	adds	r6, #1
 80192e0:	e7ee      	b.n	80192c0 <__libc_init_array+0xc>
 80192e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80192e6:	4798      	blx	r3
 80192e8:	3601      	adds	r6, #1
 80192ea:	e7f2      	b.n	80192d2 <__libc_init_array+0x1e>
 80192ec:	08019d6c 	.word	0x08019d6c
 80192f0:	08019d6c 	.word	0x08019d6c
 80192f4:	08019d6c 	.word	0x08019d6c
 80192f8:	08019d74 	.word	0x08019d74

080192fc <malloc>:
 80192fc:	4b02      	ldr	r3, [pc, #8]	; (8019308 <malloc+0xc>)
 80192fe:	4601      	mov	r1, r0
 8019300:	6818      	ldr	r0, [r3, #0]
 8019302:	f000 b889 	b.w	8019418 <_malloc_r>
 8019306:	bf00      	nop
 8019308:	2000017c 	.word	0x2000017c

0801930c <free>:
 801930c:	4b02      	ldr	r3, [pc, #8]	; (8019318 <free+0xc>)
 801930e:	4601      	mov	r1, r0
 8019310:	6818      	ldr	r0, [r3, #0]
 8019312:	f000 b819 	b.w	8019348 <_free_r>
 8019316:	bf00      	nop
 8019318:	2000017c 	.word	0x2000017c

0801931c <memcpy>:
 801931c:	440a      	add	r2, r1
 801931e:	4291      	cmp	r1, r2
 8019320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019324:	d100      	bne.n	8019328 <memcpy+0xc>
 8019326:	4770      	bx	lr
 8019328:	b510      	push	{r4, lr}
 801932a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801932e:	4291      	cmp	r1, r2
 8019330:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019334:	d1f9      	bne.n	801932a <memcpy+0xe>
 8019336:	bd10      	pop	{r4, pc}

08019338 <memset>:
 8019338:	4603      	mov	r3, r0
 801933a:	4402      	add	r2, r0
 801933c:	4293      	cmp	r3, r2
 801933e:	d100      	bne.n	8019342 <memset+0xa>
 8019340:	4770      	bx	lr
 8019342:	f803 1b01 	strb.w	r1, [r3], #1
 8019346:	e7f9      	b.n	801933c <memset+0x4>

08019348 <_free_r>:
 8019348:	b538      	push	{r3, r4, r5, lr}
 801934a:	4605      	mov	r5, r0
 801934c:	2900      	cmp	r1, #0
 801934e:	d040      	beq.n	80193d2 <_free_r+0x8a>
 8019350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019354:	1f0c      	subs	r4, r1, #4
 8019356:	2b00      	cmp	r3, #0
 8019358:	bfb8      	it	lt
 801935a:	18e4      	addlt	r4, r4, r3
 801935c:	f000 f924 	bl	80195a8 <__malloc_lock>
 8019360:	4a1c      	ldr	r2, [pc, #112]	; (80193d4 <_free_r+0x8c>)
 8019362:	6813      	ldr	r3, [r2, #0]
 8019364:	b933      	cbnz	r3, 8019374 <_free_r+0x2c>
 8019366:	6063      	str	r3, [r4, #4]
 8019368:	6014      	str	r4, [r2, #0]
 801936a:	4628      	mov	r0, r5
 801936c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019370:	f000 b920 	b.w	80195b4 <__malloc_unlock>
 8019374:	42a3      	cmp	r3, r4
 8019376:	d908      	bls.n	801938a <_free_r+0x42>
 8019378:	6820      	ldr	r0, [r4, #0]
 801937a:	1821      	adds	r1, r4, r0
 801937c:	428b      	cmp	r3, r1
 801937e:	bf01      	itttt	eq
 8019380:	6819      	ldreq	r1, [r3, #0]
 8019382:	685b      	ldreq	r3, [r3, #4]
 8019384:	1809      	addeq	r1, r1, r0
 8019386:	6021      	streq	r1, [r4, #0]
 8019388:	e7ed      	b.n	8019366 <_free_r+0x1e>
 801938a:	461a      	mov	r2, r3
 801938c:	685b      	ldr	r3, [r3, #4]
 801938e:	b10b      	cbz	r3, 8019394 <_free_r+0x4c>
 8019390:	42a3      	cmp	r3, r4
 8019392:	d9fa      	bls.n	801938a <_free_r+0x42>
 8019394:	6811      	ldr	r1, [r2, #0]
 8019396:	1850      	adds	r0, r2, r1
 8019398:	42a0      	cmp	r0, r4
 801939a:	d10b      	bne.n	80193b4 <_free_r+0x6c>
 801939c:	6820      	ldr	r0, [r4, #0]
 801939e:	4401      	add	r1, r0
 80193a0:	1850      	adds	r0, r2, r1
 80193a2:	4283      	cmp	r3, r0
 80193a4:	6011      	str	r1, [r2, #0]
 80193a6:	d1e0      	bne.n	801936a <_free_r+0x22>
 80193a8:	6818      	ldr	r0, [r3, #0]
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	4401      	add	r1, r0
 80193ae:	6011      	str	r1, [r2, #0]
 80193b0:	6053      	str	r3, [r2, #4]
 80193b2:	e7da      	b.n	801936a <_free_r+0x22>
 80193b4:	d902      	bls.n	80193bc <_free_r+0x74>
 80193b6:	230c      	movs	r3, #12
 80193b8:	602b      	str	r3, [r5, #0]
 80193ba:	e7d6      	b.n	801936a <_free_r+0x22>
 80193bc:	6820      	ldr	r0, [r4, #0]
 80193be:	1821      	adds	r1, r4, r0
 80193c0:	428b      	cmp	r3, r1
 80193c2:	bf01      	itttt	eq
 80193c4:	6819      	ldreq	r1, [r3, #0]
 80193c6:	685b      	ldreq	r3, [r3, #4]
 80193c8:	1809      	addeq	r1, r1, r0
 80193ca:	6021      	streq	r1, [r4, #0]
 80193cc:	6063      	str	r3, [r4, #4]
 80193ce:	6054      	str	r4, [r2, #4]
 80193d0:	e7cb      	b.n	801936a <_free_r+0x22>
 80193d2:	bd38      	pop	{r3, r4, r5, pc}
 80193d4:	20001850 	.word	0x20001850

080193d8 <sbrk_aligned>:
 80193d8:	b570      	push	{r4, r5, r6, lr}
 80193da:	4e0e      	ldr	r6, [pc, #56]	; (8019414 <sbrk_aligned+0x3c>)
 80193dc:	460c      	mov	r4, r1
 80193de:	6831      	ldr	r1, [r6, #0]
 80193e0:	4605      	mov	r5, r0
 80193e2:	b911      	cbnz	r1, 80193ea <sbrk_aligned+0x12>
 80193e4:	f000 f88c 	bl	8019500 <_sbrk_r>
 80193e8:	6030      	str	r0, [r6, #0]
 80193ea:	4621      	mov	r1, r4
 80193ec:	4628      	mov	r0, r5
 80193ee:	f000 f887 	bl	8019500 <_sbrk_r>
 80193f2:	1c43      	adds	r3, r0, #1
 80193f4:	d00a      	beq.n	801940c <sbrk_aligned+0x34>
 80193f6:	1cc4      	adds	r4, r0, #3
 80193f8:	f024 0403 	bic.w	r4, r4, #3
 80193fc:	42a0      	cmp	r0, r4
 80193fe:	d007      	beq.n	8019410 <sbrk_aligned+0x38>
 8019400:	1a21      	subs	r1, r4, r0
 8019402:	4628      	mov	r0, r5
 8019404:	f000 f87c 	bl	8019500 <_sbrk_r>
 8019408:	3001      	adds	r0, #1
 801940a:	d101      	bne.n	8019410 <sbrk_aligned+0x38>
 801940c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019410:	4620      	mov	r0, r4
 8019412:	bd70      	pop	{r4, r5, r6, pc}
 8019414:	20001854 	.word	0x20001854

08019418 <_malloc_r>:
 8019418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801941c:	1ccd      	adds	r5, r1, #3
 801941e:	f025 0503 	bic.w	r5, r5, #3
 8019422:	3508      	adds	r5, #8
 8019424:	2d0c      	cmp	r5, #12
 8019426:	bf38      	it	cc
 8019428:	250c      	movcc	r5, #12
 801942a:	2d00      	cmp	r5, #0
 801942c:	4607      	mov	r7, r0
 801942e:	db01      	blt.n	8019434 <_malloc_r+0x1c>
 8019430:	42a9      	cmp	r1, r5
 8019432:	d905      	bls.n	8019440 <_malloc_r+0x28>
 8019434:	230c      	movs	r3, #12
 8019436:	2600      	movs	r6, #0
 8019438:	603b      	str	r3, [r7, #0]
 801943a:	4630      	mov	r0, r6
 801943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019440:	4e2e      	ldr	r6, [pc, #184]	; (80194fc <_malloc_r+0xe4>)
 8019442:	f000 f8b1 	bl	80195a8 <__malloc_lock>
 8019446:	6833      	ldr	r3, [r6, #0]
 8019448:	461c      	mov	r4, r3
 801944a:	bb34      	cbnz	r4, 801949a <_malloc_r+0x82>
 801944c:	4629      	mov	r1, r5
 801944e:	4638      	mov	r0, r7
 8019450:	f7ff ffc2 	bl	80193d8 <sbrk_aligned>
 8019454:	1c43      	adds	r3, r0, #1
 8019456:	4604      	mov	r4, r0
 8019458:	d14d      	bne.n	80194f6 <_malloc_r+0xde>
 801945a:	6834      	ldr	r4, [r6, #0]
 801945c:	4626      	mov	r6, r4
 801945e:	2e00      	cmp	r6, #0
 8019460:	d140      	bne.n	80194e4 <_malloc_r+0xcc>
 8019462:	6823      	ldr	r3, [r4, #0]
 8019464:	4631      	mov	r1, r6
 8019466:	4638      	mov	r0, r7
 8019468:	eb04 0803 	add.w	r8, r4, r3
 801946c:	f000 f848 	bl	8019500 <_sbrk_r>
 8019470:	4580      	cmp	r8, r0
 8019472:	d13a      	bne.n	80194ea <_malloc_r+0xd2>
 8019474:	6821      	ldr	r1, [r4, #0]
 8019476:	3503      	adds	r5, #3
 8019478:	1a6d      	subs	r5, r5, r1
 801947a:	f025 0503 	bic.w	r5, r5, #3
 801947e:	3508      	adds	r5, #8
 8019480:	2d0c      	cmp	r5, #12
 8019482:	bf38      	it	cc
 8019484:	250c      	movcc	r5, #12
 8019486:	4638      	mov	r0, r7
 8019488:	4629      	mov	r1, r5
 801948a:	f7ff ffa5 	bl	80193d8 <sbrk_aligned>
 801948e:	3001      	adds	r0, #1
 8019490:	d02b      	beq.n	80194ea <_malloc_r+0xd2>
 8019492:	6823      	ldr	r3, [r4, #0]
 8019494:	442b      	add	r3, r5
 8019496:	6023      	str	r3, [r4, #0]
 8019498:	e00e      	b.n	80194b8 <_malloc_r+0xa0>
 801949a:	6822      	ldr	r2, [r4, #0]
 801949c:	1b52      	subs	r2, r2, r5
 801949e:	d41e      	bmi.n	80194de <_malloc_r+0xc6>
 80194a0:	2a0b      	cmp	r2, #11
 80194a2:	d916      	bls.n	80194d2 <_malloc_r+0xba>
 80194a4:	1961      	adds	r1, r4, r5
 80194a6:	42a3      	cmp	r3, r4
 80194a8:	6025      	str	r5, [r4, #0]
 80194aa:	bf18      	it	ne
 80194ac:	6059      	strne	r1, [r3, #4]
 80194ae:	6863      	ldr	r3, [r4, #4]
 80194b0:	bf08      	it	eq
 80194b2:	6031      	streq	r1, [r6, #0]
 80194b4:	5162      	str	r2, [r4, r5]
 80194b6:	604b      	str	r3, [r1, #4]
 80194b8:	4638      	mov	r0, r7
 80194ba:	f104 060b 	add.w	r6, r4, #11
 80194be:	f000 f879 	bl	80195b4 <__malloc_unlock>
 80194c2:	f026 0607 	bic.w	r6, r6, #7
 80194c6:	1d23      	adds	r3, r4, #4
 80194c8:	1af2      	subs	r2, r6, r3
 80194ca:	d0b6      	beq.n	801943a <_malloc_r+0x22>
 80194cc:	1b9b      	subs	r3, r3, r6
 80194ce:	50a3      	str	r3, [r4, r2]
 80194d0:	e7b3      	b.n	801943a <_malloc_r+0x22>
 80194d2:	6862      	ldr	r2, [r4, #4]
 80194d4:	42a3      	cmp	r3, r4
 80194d6:	bf0c      	ite	eq
 80194d8:	6032      	streq	r2, [r6, #0]
 80194da:	605a      	strne	r2, [r3, #4]
 80194dc:	e7ec      	b.n	80194b8 <_malloc_r+0xa0>
 80194de:	4623      	mov	r3, r4
 80194e0:	6864      	ldr	r4, [r4, #4]
 80194e2:	e7b2      	b.n	801944a <_malloc_r+0x32>
 80194e4:	4634      	mov	r4, r6
 80194e6:	6876      	ldr	r6, [r6, #4]
 80194e8:	e7b9      	b.n	801945e <_malloc_r+0x46>
 80194ea:	230c      	movs	r3, #12
 80194ec:	4638      	mov	r0, r7
 80194ee:	603b      	str	r3, [r7, #0]
 80194f0:	f000 f860 	bl	80195b4 <__malloc_unlock>
 80194f4:	e7a1      	b.n	801943a <_malloc_r+0x22>
 80194f6:	6025      	str	r5, [r4, #0]
 80194f8:	e7de      	b.n	80194b8 <_malloc_r+0xa0>
 80194fa:	bf00      	nop
 80194fc:	20001850 	.word	0x20001850

08019500 <_sbrk_r>:
 8019500:	b538      	push	{r3, r4, r5, lr}
 8019502:	2300      	movs	r3, #0
 8019504:	4d05      	ldr	r5, [pc, #20]	; (801951c <_sbrk_r+0x1c>)
 8019506:	4604      	mov	r4, r0
 8019508:	4608      	mov	r0, r1
 801950a:	602b      	str	r3, [r5, #0]
 801950c:	f7ea fdaa 	bl	8004064 <_sbrk>
 8019510:	1c43      	adds	r3, r0, #1
 8019512:	d102      	bne.n	801951a <_sbrk_r+0x1a>
 8019514:	682b      	ldr	r3, [r5, #0]
 8019516:	b103      	cbz	r3, 801951a <_sbrk_r+0x1a>
 8019518:	6023      	str	r3, [r4, #0]
 801951a:	bd38      	pop	{r3, r4, r5, pc}
 801951c:	20001858 	.word	0x20001858

08019520 <_raise_r>:
 8019520:	291f      	cmp	r1, #31
 8019522:	b538      	push	{r3, r4, r5, lr}
 8019524:	4604      	mov	r4, r0
 8019526:	460d      	mov	r5, r1
 8019528:	d904      	bls.n	8019534 <_raise_r+0x14>
 801952a:	2316      	movs	r3, #22
 801952c:	6003      	str	r3, [r0, #0]
 801952e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019532:	bd38      	pop	{r3, r4, r5, pc}
 8019534:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019536:	b112      	cbz	r2, 801953e <_raise_r+0x1e>
 8019538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801953c:	b94b      	cbnz	r3, 8019552 <_raise_r+0x32>
 801953e:	4620      	mov	r0, r4
 8019540:	f000 f830 	bl	80195a4 <_getpid_r>
 8019544:	462a      	mov	r2, r5
 8019546:	4601      	mov	r1, r0
 8019548:	4620      	mov	r0, r4
 801954a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801954e:	f000 b817 	b.w	8019580 <_kill_r>
 8019552:	2b01      	cmp	r3, #1
 8019554:	d00a      	beq.n	801956c <_raise_r+0x4c>
 8019556:	1c59      	adds	r1, r3, #1
 8019558:	d103      	bne.n	8019562 <_raise_r+0x42>
 801955a:	2316      	movs	r3, #22
 801955c:	6003      	str	r3, [r0, #0]
 801955e:	2001      	movs	r0, #1
 8019560:	e7e7      	b.n	8019532 <_raise_r+0x12>
 8019562:	2400      	movs	r4, #0
 8019564:	4628      	mov	r0, r5
 8019566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801956a:	4798      	blx	r3
 801956c:	2000      	movs	r0, #0
 801956e:	e7e0      	b.n	8019532 <_raise_r+0x12>

08019570 <raise>:
 8019570:	4b02      	ldr	r3, [pc, #8]	; (801957c <raise+0xc>)
 8019572:	4601      	mov	r1, r0
 8019574:	6818      	ldr	r0, [r3, #0]
 8019576:	f7ff bfd3 	b.w	8019520 <_raise_r>
 801957a:	bf00      	nop
 801957c:	2000017c 	.word	0x2000017c

08019580 <_kill_r>:
 8019580:	b538      	push	{r3, r4, r5, lr}
 8019582:	2300      	movs	r3, #0
 8019584:	4d06      	ldr	r5, [pc, #24]	; (80195a0 <_kill_r+0x20>)
 8019586:	4604      	mov	r4, r0
 8019588:	4608      	mov	r0, r1
 801958a:	4611      	mov	r1, r2
 801958c:	602b      	str	r3, [r5, #0]
 801958e:	f7ea fd4e 	bl	800402e <_kill>
 8019592:	1c43      	adds	r3, r0, #1
 8019594:	d102      	bne.n	801959c <_kill_r+0x1c>
 8019596:	682b      	ldr	r3, [r5, #0]
 8019598:	b103      	cbz	r3, 801959c <_kill_r+0x1c>
 801959a:	6023      	str	r3, [r4, #0]
 801959c:	bd38      	pop	{r3, r4, r5, pc}
 801959e:	bf00      	nop
 80195a0:	20001858 	.word	0x20001858

080195a4 <_getpid_r>:
 80195a4:	f7ea bd3c 	b.w	8004020 <_getpid>

080195a8 <__malloc_lock>:
 80195a8:	4801      	ldr	r0, [pc, #4]	; (80195b0 <__malloc_lock+0x8>)
 80195aa:	f000 b809 	b.w	80195c0 <__retarget_lock_acquire_recursive>
 80195ae:	bf00      	nop
 80195b0:	2000185c 	.word	0x2000185c

080195b4 <__malloc_unlock>:
 80195b4:	4801      	ldr	r0, [pc, #4]	; (80195bc <__malloc_unlock+0x8>)
 80195b6:	f000 b804 	b.w	80195c2 <__retarget_lock_release_recursive>
 80195ba:	bf00      	nop
 80195bc:	2000185c 	.word	0x2000185c

080195c0 <__retarget_lock_acquire_recursive>:
 80195c0:	4770      	bx	lr

080195c2 <__retarget_lock_release_recursive>:
 80195c2:	4770      	bx	lr

080195c4 <_init>:
 80195c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195c6:	bf00      	nop
 80195c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195ca:	bc08      	pop	{r3}
 80195cc:	469e      	mov	lr, r3
 80195ce:	4770      	bx	lr

080195d0 <_fini>:
 80195d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195d2:	bf00      	nop
 80195d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195d6:	bc08      	pop	{r3}
 80195d8:	469e      	mov	lr, r3
 80195da:	4770      	bx	lr
